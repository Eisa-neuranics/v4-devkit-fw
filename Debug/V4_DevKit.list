
V4_DevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184c8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024f8  08018608  08018608  00019608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ab00  0801ab00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ab08  0801ab08  0001bb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ab0c  0801ab0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000018c  20000008  0801ab10  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000194  0801ac9c  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001cc  0801acd1  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003498  200001e0  0801ace2  0001c1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003678  0801ace2  0001c678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001df57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001e000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001e000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  0801ace2  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00049460  00000000  00000000  0001df87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a30f  00000000  00000000  000673e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d88  00000000  00000000  000716f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002f36  00000000  00000000  00075480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ba61  00000000  00000000  000783b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00051c9d  00000000  00000000  000b3e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001129d1  00000000  00000000  00105ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00218485  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010f9c  00000000  00000000  002184c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007c  00000000  00000000  00229464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080185f0 	.word	0x080185f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080185f0 	.word	0x080185f0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bd8:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000bda:	2019      	movs	r0, #25
 8000bdc:	f001 fe84 	bl	80028e8 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f001 fe7d 	bl	80028e8 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f885 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f001 fe76 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f000 f87e 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c04:	2019      	movs	r0, #25
 8000c06:	f001 fe6f 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000c0a:	210a      	movs	r1, #10
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f877 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c12:	2019      	movs	r0, #25
 8000c14:	f001 fe68 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH2_CN_REG	, 0x1C );				// CH1 is routed to: N = IN1 , P = IN2
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f000 f870 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c20:	2019      	movs	r0, #25
 8000c22:	f001 fe61 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x2E );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000c26:	212e      	movs	r1, #46	@ 0x2e
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f869 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c2e:	2019      	movs	r0, #25
 8000c30:	f001 fe5a 	bl	80028e8 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x06 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000c34:	2106      	movs	r1, #6
 8000c36:	200c      	movs	r0, #12
 8000c38:	f000 f862 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f001 fe53 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x30 );				// 0x04: RLD amplifier powered down
 8000c42:	2130      	movs	r1, #48	@ 0x30
 8000c44:	200a      	movs	r0, #10
 8000c46:	f000 f85b 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f001 fe4c 	bl	80028e8 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_4 );				// Configures the R2 decimation rate as 5 for all channels.
 8000c50:	2101      	movs	r1, #1
 8000c52:	2021      	movs	r0, #33	@ 0x21
 8000c54:	f000 f854 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f001 fe45 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2022      	movs	r0, #34	@ 0x22
 8000c62:	f000 f84d 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c66:	2019      	movs	r0, #25
 8000c68:	f001 fe3e 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	2023      	movs	r0, #35	@ 0x23
 8000c70:	f000 f846 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f001 fe37 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	2024      	movs	r0, #36	@ 0x24
 8000c7e:	f000 f83f 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f001 fe30 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000c88:	2108      	movs	r1, #8
 8000c8a:	2027      	movs	r0, #39	@ 0x27
 8000c8c:	f000 f838 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c90:	2019      	movs	r0, #25
 8000c92:	f001 fe29 	bl	80028e8 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x70 );				// Channel for Loop Read Back: CH1
 8000c96:	2170      	movs	r1, #112	@ 0x70
 8000c98:	202f      	movs	r0, #47	@ 0x2f
 8000c9a:	f000 f831 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f001 fe22 	bl	80028e8 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ccc:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000cce:	2364      	movs	r3, #100	@ 0x64
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000cd6:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <ADS1293_SPIReadReg+0x54>)
 8000cda:	f009 fa2e 	bl	800a13a <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000cde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001fc 	.word	0x200001fc
 8000cf8:	20000208 	.word	0x20000208
 8000cfc:	20001734 	.word	0x20001734

08000d00 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000d22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <ADS1293_SPIWriteReg+0x4c>)
 8000d34:	f009 f88b 	bl	8009e4e <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001fc 	.word	0x200001fc
 8000d4c:	20001734 	.word	0x20001734

08000d50 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg ( uint8_t *buffer, uint8_t count )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d5e:	22d0      	movs	r2, #208	@ 0xd0
 8000d60:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	719a      	strb	r2, [r3, #6]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	71da      	strb	r2, [r3, #7]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	721a      	strb	r2, [r3, #8]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da0:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2264      	movs	r2, #100	@ 0x64
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4905      	ldr	r1, [pc, #20]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <ADS1293_SPIStreamReadReg+0x7c>)
 8000db4:	f009 f9c1 	bl	800a13a <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000db8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[6] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001fc 	.word	0x200001fc
 8000dcc:	20001734 	.word	0x20001734

08000dd0 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0


	 // Initialize filters
	 init_combined_filter(&combined_filter, 10.0, 100.0, 50.0);
 8000dd4:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8000df8 <AFE_Init+0x28>
 8000dd8:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8000e00 <AFE_Init+0x30>
 8000ddc:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8000e08 <AFE_Init+0x38>
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <AFE_Init+0x40>)
 8000de2:	f000 fda5 	bl	8001930 <init_combined_filter>

	 DIAG ("\t\tAFE initialised\r\n");
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <AFE_Init+0x44>)
 8000de8:	f001 fe0a 	bl	8002a00 <DIAG>
	 HAL_Delay (10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 fd7b 	bl	80028e8 <HAL_Delay>
 }
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40490000 	.word	0x40490000
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40240000 	.word	0x40240000
 8000e10:	20000de0 	.word	0x20000de0
 8000e14:	08018608 	.word	0x08018608

08000e18 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000e1e:	4b69      	ldr	r3, [pc, #420]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d812      	bhi.n	8000e4c <AFE_Control+0x34>
 8000e26:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <AFE_Control+0x14>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	08000e7b 	.word	0x08000e7b
 8000e34:	08000e87 	.word	0x08000e87
 8000e38:	08000ead 	.word	0x08000ead
 8000e3c:	08000ed1 	.word	0x08000ed1
 8000e40:	08000ff5 	.word	0x08000ff5
 8000e44:	0800143d 	.word	0x0800143d
 8000e48:	08001445 	.word	0x08001445
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000e52:	e2fb      	b.n	800144c <AFE_Control+0x634>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e5c:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f001 fd42 	bl	80028e8 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000e64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e68:	2201      	movs	r2, #1
 8000e6a:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f001 fd3b 	bl	80028e8 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000e72:	4b54      	ldr	r3, [pc, #336]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e78:	e2e8      	b.n	800144c <AFE_Control+0x634>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000e7a:	f7ff fea7 	bl	8000bcc <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e84:	e2e2      	b.n	800144c <AFE_Control+0x634>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000e86:	2040      	movs	r0, #64	@ 0x40
 8000e88:	f7ff ff0e 	bl	8000ca8 <ADS1293_SPIReadReg>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc8 <AFE_Control+0x1b0>)
 8000e92:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000e94:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc8 <AFE_Control+0x1b0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d103      	bne.n	8000ea4 <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000e9c:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000ea2:	e2d3      	b.n	800144c <AFE_Control+0x634>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000ea4:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000eaa:	e2cf      	b.n	800144c <AFE_Control+0x634>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff26 	bl	8000d00 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000eb4:	2032      	movs	r0, #50	@ 0x32
 8000eb6:	f001 fd17 	bl	80028e8 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ff1f 	bl	8000d00 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	@ 0x32
 8000ec4:	f001 fd10 	bl	80028e8 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ece:	e2bd      	b.n	800144c <AFE_Control+0x634>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fcc <AFE_Control+0x1b4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d170      	bne.n	8000fbc <AFE_Control+0x1a4>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000eda:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd0 <AFE_Control+0x1b8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <AFE_Control+0x1b4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 9 );
 8000ee6:	2109      	movs	r1, #9
 8000ee8:	483a      	ldr	r0, [pc, #232]	@ (8000fd4 <AFE_Control+0x1bc>)
 8000eea:	f7ff ff31 	bl	8000d50 <ADS1293_SPIStreamReadReg>





 	  			  num_samples++;
 8000eee:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <AFE_Control+0x1c0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a38      	ldr	r2, [pc, #224]	@ (8000fd8 <AFE_Control+0x1c0>)
 8000ef6:	6013      	str	r3, [r2, #0]
 	  			  if ( num_samples > 5)
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <AFE_Control+0x1c0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	dd59      	ble.n	8000fb4 <AFE_Control+0x19c>
 	  			  {
 	  				  float value1 = sinf(angle);
 8000f00:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	f015 fe59 	bl	8016bc0 <sinf>
 8000f0e:	ed87 0a01 	vstr	s0, [r7, #4]
 	  				  float value2 = cosf(angle);
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1c:	f015 fe0c 	bl	8016b38 <cosf>
 8000f20:	ed87 0a00 	vstr	s0, [r7]

 	  				  angle += step;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000fe0 <AFE_Control+0x1c8>
 8000f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f32:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f34:	edc3 7a00 	vstr	s15, [r3]
 	  				  if (angle > TWO_PI) angle -= TWO_PI; // Wrap around
 8000f38:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f3a:	edd3 7a00 	vldr	s15, [r3]
 8000f3e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000fe4 <AFE_Control+0x1cc>
 8000f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	dd09      	ble.n	8000f60 <AFE_Control+0x148>
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000fe4 <AFE_Control+0x1cc>
 8000f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <AFE_Control+0x1c4>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]

 	  				  tsDebug.i16TxTMR1 = (int) (value1 * 1000);
 8000f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f64:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000fe8 <AFE_Control+0x1d0>
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f70:	ee17 3a90 	vmov	r3, s15
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <AFE_Control+0x1d4>)
 8000f78:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
 	  				  tsDebug.i16TxTMR2 = (int) (value2 * 1000);
 8000f7c:	edd7 7a00 	vldr	s15, [r7]
 8000f80:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000fe8 <AFE_Control+0x1d0>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <AFE_Control+0x1d4>)
 8000f94:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262

 	  				  // Count SPS
 	 	  			  AFE.u16SampleCount++;
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <AFE_Control+0x1d8>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <AFE_Control+0x1d8>)
 8000fa4:	801a      	strh	r2, [r3, #0]
 	 	  			  num_samples = 0;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <AFE_Control+0x1c0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 	 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000fb2:	e24b      	b.n	800144c <AFE_Control+0x634>
 	  				eAFE_STATE = AFE_STATE_READ_DATA;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fba:	e247      	b.n	800144c <AFE_Control+0x634>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	@ (8000fc4 <AFE_Control+0x1ac>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fc2:	e243      	b.n	800144c <AFE_Control+0x634>
 8000fc4:	20000212 	.word	0x20000212
 8000fc8:	20000e74 	.word	0x20000e74
 8000fcc:	20000214 	.word	0x20000214
 8000fd0:	20001928 	.word	0x20001928
 8000fd4:	20000e78 	.word	0x20000e78
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000e70 	.word	0x20000e70
 8000fe0:	3dcccccd 	.word	0x3dcccccd
 8000fe4:	40c90fdb 	.word	0x40c90fdb
 8000fe8:	447a0000 	.word	0x447a0000
 8000fec:	20001328 	.word	0x20001328
 8000ff0:	20001940 	.word	0x20001940
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  TMR1.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000ff4:	4bc2      	ldr	r3, [pc, #776]	@ (8001300 <AFE_Control+0x4e8>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	4ac1      	ldr	r2, [pc, #772]	@ (8001300 <AFE_Control+0x4e8>)
 8000ffc:	7892      	ldrb	r2, [r2, #2]
 8000ffe:	0212      	lsls	r2, r2, #8
 8001000:	b292      	uxth	r2, r2
 8001002:	4313      	orrs	r3, r2
 8001004:	4abe      	ldr	r2, [pc, #760]	@ (8001300 <AFE_Control+0x4e8>)
 8001006:	78d2      	ldrb	r2, [r2, #3]
 8001008:	4313      	orrs	r3, r2
 800100a:	4abe      	ldr	r2, [pc, #760]	@ (8001304 <AFE_Control+0x4ec>)
 800100c:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR1.Vin = ( 2.4 * ( ( (2.0 * (double)TMR1.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8001010:	4bbc      	ldr	r3, [pc, #752]	@ (8001304 <AFE_Control+0x4ec>)
 8001012:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa5c 	bl	80004d4 <__aeabi_i2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	f7ff f90c 	bl	800023c <__adddf3>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	a3b0      	add	r3, pc, #704	@ (adr r3, 80012f0 <AFE_Control+0x4d8>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fbe3 	bl	80007fc <__aeabi_ddiv>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4bb1      	ldr	r3, [pc, #708]	@ (8001308 <AFE_Control+0x4f0>)
 8001044:	f7ff f8f8 	bl	8000238 <__aeabi_dsub>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	a3a9      	add	r3, pc, #676	@ (adr r3, 80012f8 <AFE_Control+0x4e0>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff faa7 	bl	80005a8 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4ba9      	ldr	r3, [pc, #676]	@ (800130c <AFE_Control+0x4f4>)
 8001068:	f7ff fbc8 	bl	80007fc <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd5a 	bl	8000b2c <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4aa2      	ldr	r2, [pc, #648]	@ (8001304 <AFE_Control+0x4ec>)
 800107c:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR1.Raw[Temp_buff_count] = (int)(TMR1.Vin * 1000000);
 8001080:	4ba0      	ldr	r3, [pc, #640]	@ (8001304 <AFE_Control+0x4ec>)
 8001082:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001086:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001310 <AFE_Control+0x4f8>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	4ba1      	ldr	r3, [pc, #644]	@ (8001314 <AFE_Control+0x4fc>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001098:	ee17 1a90 	vmov	r1, s15
 800109c:	4b99      	ldr	r3, [pc, #612]	@ (8001304 <AFE_Control+0x4ec>)
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  TMR2.Input = (int32_t)( (SpiRxData[4] << 16) | (uint16_t)(SpiRxData[5] << 8) | SpiRxData[6]);
 80010a2:	4b97      	ldr	r3, [pc, #604]	@ (8001300 <AFE_Control+0x4e8>)
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	4a95      	ldr	r2, [pc, #596]	@ (8001300 <AFE_Control+0x4e8>)
 80010aa:	7952      	ldrb	r2, [r2, #5]
 80010ac:	0212      	lsls	r2, r2, #8
 80010ae:	b292      	uxth	r2, r2
 80010b0:	4313      	orrs	r3, r2
 80010b2:	4a93      	ldr	r2, [pc, #588]	@ (8001300 <AFE_Control+0x4e8>)
 80010b4:	7992      	ldrb	r2, [r2, #6]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	4a97      	ldr	r2, [pc, #604]	@ (8001318 <AFE_Control+0x500>)
 80010ba:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR2.Vin = ( 2.4 * ( ( (2.0 * (double)TMR2.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 80010be:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <AFE_Control+0x500>)
 80010c0:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa05 	bl	80004d4 <__aeabi_i2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	f7ff f8b5 	bl	800023c <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	a385      	add	r3, pc, #532	@ (adr r3, 80012f0 <AFE_Control+0x4d8>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fb8c 	bl	80007fc <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b85      	ldr	r3, [pc, #532]	@ (8001308 <AFE_Control+0x4f0>)
 80010f2:	f7ff f8a1 	bl	8000238 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	a37e      	add	r3, pc, #504	@ (adr r3, 80012f8 <AFE_Control+0x4e0>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa50 	bl	80005a8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b7d      	ldr	r3, [pc, #500]	@ (800130c <AFE_Control+0x4f4>)
 8001116:	f7ff fb71 	bl	80007fc <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd03 	bl	8000b2c <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4a7b      	ldr	r2, [pc, #492]	@ (8001318 <AFE_Control+0x500>)
 800112a:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR2.Raw[Temp_buff_count] = (int)(TMR2.Vin * 1000000);
 800112e:	4b7a      	ldr	r3, [pc, #488]	@ (8001318 <AFE_Control+0x500>)
 8001130:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001134:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001310 <AFE_Control+0x4f8>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	4b75      	ldr	r3, [pc, #468]	@ (8001314 <AFE_Control+0x4fc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001146:	ee17 1a90 	vmov	r1, s15
 800114a:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <AFE_Control+0x500>)
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  EMG.Input = (int32_t)( (SpiRxData[7] << 16) | (uint16_t)(SpiRxData[8] << 8) | SpiRxData[9]);
 8001150:	4b6b      	ldr	r3, [pc, #428]	@ (8001300 <AFE_Control+0x4e8>)
 8001152:	79db      	ldrb	r3, [r3, #7]
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	4a6a      	ldr	r2, [pc, #424]	@ (8001300 <AFE_Control+0x4e8>)
 8001158:	7a12      	ldrb	r2, [r2, #8]
 800115a:	0212      	lsls	r2, r2, #8
 800115c:	b292      	uxth	r2, r2
 800115e:	4313      	orrs	r3, r2
 8001160:	4a67      	ldr	r2, [pc, #412]	@ (8001300 <AFE_Control+0x4e8>)
 8001162:	7a52      	ldrb	r2, [r2, #9]
 8001164:	4313      	orrs	r3, r2
 8001166:	4a6d      	ldr	r2, [pc, #436]	@ (800131c <AFE_Control+0x504>)
 8001168:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  EMG.Vin = ( 2.4 * ( ( (2.0 * (double)EMG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 800116c:	4b6b      	ldr	r3, [pc, #428]	@ (800131c <AFE_Control+0x504>)
 800116e:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9ae 	bl	80004d4 <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	f7ff f85e 	bl	800023c <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a359      	add	r3, pc, #356	@ (adr r3, 80012f0 <AFE_Control+0x4d8>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fb35 	bl	80007fc <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b5a      	ldr	r3, [pc, #360]	@ (8001308 <AFE_Control+0x4f0>)
 80011a0:	f7ff f84a 	bl	8000238 <__aeabi_dsub>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	a352      	add	r3, pc, #328	@ (adr r3, 80012f8 <AFE_Control+0x4e0>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff f9f9 	bl	80005a8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b52      	ldr	r3, [pc, #328]	@ (800130c <AFE_Control+0x4f4>)
 80011c4:	f7ff fb1a 	bl	80007fc <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fcac 	bl	8000b2c <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a51      	ldr	r2, [pc, #324]	@ (800131c <AFE_Control+0x504>)
 80011d8:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  EMG.Raw[Temp_buff_count] = (int)(EMG.Vin * 1000000);
 80011dc:	4b4f      	ldr	r3, [pc, #316]	@ (800131c <AFE_Control+0x504>)
 80011de:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 80011e2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001310 <AFE_Control+0x4f8>
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <AFE_Control+0x4fc>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f4:	ee17 1a90 	vmov	r1, s15
 80011f8:	4b48      	ldr	r3, [pc, #288]	@ (800131c <AFE_Control+0x504>)
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
// 	  		  TMR1.Filtered [Temp_buff_count] = IIR_AFE ( &TMR1, Temp_buff_count);
// 	  		  TMR2.Filtered [Temp_buff_count] = IIR_AFE ( &TMR2, Temp_buff_count);
// 	  		  EMG.Filtered  [Temp_buff_count] = IIR_AFE ( &EMG, Temp_buff_count);


 	  		 	  		  TMR1.Filtered [Temp_buff_count] = tsDebug.i16TxTMR1;
 80011fe:	4b48      	ldr	r3, [pc, #288]	@ (8001320 <AFE_Control+0x508>)
 8001200:	f9b3 2260 	ldrsh.w	r2, [r3, #608]	@ 0x260
 8001204:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <AFE_Control+0x4fc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4611      	mov	r1, r2
 800120a:	4a3e      	ldr	r2, [pc, #248]	@ (8001304 <AFE_Control+0x4ec>)
 800120c:	3318      	adds	r3, #24
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	6059      	str	r1, [r3, #4]
 	  		 	  		  TMR2.Filtered [Temp_buff_count] = tsDebug.i16TxTMR2;
 8001214:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <AFE_Control+0x508>)
 8001216:	f9b3 2262 	ldrsh.w	r2, [r3, #610]	@ 0x262
 800121a:	4b3e      	ldr	r3, [pc, #248]	@ (8001314 <AFE_Control+0x4fc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	4a3d      	ldr	r2, [pc, #244]	@ (8001318 <AFE_Control+0x500>)
 8001222:	3318      	adds	r3, #24
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	6059      	str	r1, [r3, #4]
// 	  		 	  		  EMG.Filtered  [Temp_buff_count] = IIR_AFE ( &EMG, Temp_buff_count);



 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (  		  TMR1.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <AFE_Control+0x4fc>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4a35      	ldr	r2, [pc, #212]	@ (8001304 <AFE_Control+0x4ec>)
 8001230:	3318      	adds	r3, #24
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	1218      	asrs	r0, r3, #8
 800123a:	4b3a      	ldr	r3, [pc, #232]	@ (8001324 <AFE_Control+0x50c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	b2d1      	uxtb	r1, r2
 8001242:	4a38      	ldr	r2, [pc, #224]	@ (8001324 <AFE_Control+0x50c>)
 8001244:	7011      	strb	r1, [r2, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	b2c2      	uxtb	r2, r0
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <AFE_Control+0x4ec>)
 800124c:	440b      	add	r3, r1
 800124e:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (uint8_t) TMR1.Filtered [Temp_buff_count] & 0x00FF );
 8001252:	4b30      	ldr	r3, [pc, #192]	@ (8001314 <AFE_Control+0x4fc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4a2b      	ldr	r2, [pc, #172]	@ (8001304 <AFE_Control+0x4ec>)
 8001258:	3318      	adds	r3, #24
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	6858      	ldr	r0, [r3, #4]
 8001260:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <AFE_Control+0x50c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	b2d1      	uxtb	r1, r2
 8001268:	4a2e      	ldr	r2, [pc, #184]	@ (8001324 <AFE_Control+0x50c>)
 800126a:	7011      	strb	r1, [r2, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	b2c2      	uxtb	r2, r0
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <AFE_Control+0x4ec>)
 8001272:	440b      	add	r3, r1
 8001274:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (  		  TMR2.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <AFE_Control+0x4fc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <AFE_Control+0x500>)
 800127e:	3318      	adds	r3, #24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	1218      	asrs	r0, r3, #8
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <AFE_Control+0x510>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	b2d1      	uxtb	r1, r2
 8001290:	4a25      	ldr	r2, [pc, #148]	@ (8001328 <AFE_Control+0x510>)
 8001292:	7011      	strb	r1, [r2, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	b2c2      	uxtb	r2, r0
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <AFE_Control+0x500>)
 800129a:	440b      	add	r3, r1
 800129c:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (uint8_t) TMR2.Filtered [Temp_buff_count] & 0x00FF );
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <AFE_Control+0x4fc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <AFE_Control+0x500>)
 80012a6:	3318      	adds	r3, #24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	6858      	ldr	r0, [r3, #4]
 80012ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <AFE_Control+0x510>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	b2d1      	uxtb	r1, r2
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <AFE_Control+0x510>)
 80012b8:	7011      	strb	r1, [r2, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	b2c2      	uxtb	r2, r0
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <AFE_Control+0x500>)
 80012c0:	440b      	add	r3, r1
 80012c2:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (  		  EMG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <AFE_Control+0x4fc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4a14      	ldr	r2, [pc, #80]	@ (800131c <AFE_Control+0x504>)
 80012cc:	3318      	adds	r3, #24
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	1218      	asrs	r0, r3, #8
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <AFE_Control+0x514>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	b2d1      	uxtb	r1, r2
 80012de:	4a13      	ldr	r2, [pc, #76]	@ (800132c <AFE_Control+0x514>)
 80012e0:	7011      	strb	r1, [r2, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	b2c2      	uxtb	r2, r0
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <AFE_Control+0x504>)
 80012e8:	440b      	add	r3, r1
 80012ea:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 80012ee:	e01f      	b.n	8001330 <AFE_Control+0x518>
 80012f0:	00000000 	.word	0x00000000
 80012f4:	41686a00 	.word	0x41686a00
 80012f8:	33333333 	.word	0x33333333
 80012fc:	40033333 	.word	0x40033333
 8001300:	20000e78 	.word	0x20000e78
 8001304:	20000218 	.word	0x20000218
 8001308:	3ff00000 	.word	0x3ff00000
 800130c:	400c0000 	.word	0x400c0000
 8001310:	49742400 	.word	0x49742400
 8001314:	20000e82 	.word	0x20000e82
 8001318:	2000051c 	.word	0x2000051c
 800131c:	20000820 	.word	0x20000820
 8001320:	20001328 	.word	0x20001328
 8001324:	20000e75 	.word	0x20000e75
 8001328:	20000e76 	.word	0x20000e76
 800132c:	20000e77 	.word	0x20000e77
 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (uint8_t) EMG.Filtered [Temp_buff_count] & 0x00FF );
 8001330:	4b48      	ldr	r3, [pc, #288]	@ (8001454 <AFE_Control+0x63c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <AFE_Control+0x640>)
 8001336:	3318      	adds	r3, #24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	6858      	ldr	r0, [r3, #4]
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <AFE_Control+0x644>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	b2d1      	uxtb	r1, r2
 8001346:	4a45      	ldr	r2, [pc, #276]	@ (800145c <AFE_Control+0x644>)
 8001348:	7011      	strb	r1, [r2, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	b2c2      	uxtb	r2, r0
 800134e:	4b42      	ldr	r3, [pc, #264]	@ (8001458 <AFE_Control+0x640>)
 8001350:	440b      	add	r3, r1
 8001352:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.TMR == true && tsCmd.EMG == true)
 8001356:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <AFE_Control+0x648>)
 8001358:	7e1b      	ldrb	r3, [r3, #24]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d103      	bne.n	8001366 <AFE_Control+0x54e>
 800135e:	4b40      	ldr	r3, [pc, #256]	@ (8001460 <AFE_Control+0x648>)
 8001360:	7edb      	ldrb	r3, [r3, #27]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d022      	beq.n	80013ac <AFE_Control+0x594>
 				  {
// 					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
// 					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
// 					 tsDebug.i16TxEMG  = EMG.Filtered  [Temp_buff_count];
 				  }
 				  else if (tsCmd.TMR == true && tsCmd.EMG == false )
 8001366:	4b3e      	ldr	r3, [pc, #248]	@ (8001460 <AFE_Control+0x648>)
 8001368:	7e1b      	ldrb	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d103      	bne.n	8001376 <AFE_Control+0x55e>
 800136e:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <AFE_Control+0x648>)
 8001370:	7edb      	ldrb	r3, [r3, #27]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01a      	beq.n	80013ac <AFE_Control+0x594>
//  					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
//  					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
//  					 tsDebug.i16TxEMG  = 0x00;
 				  }

 				  else if (tsCmd.TMR == false && tsCmd.EMG == true )
 8001376:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <AFE_Control+0x648>)
 8001378:	7e1b      	ldrb	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <AFE_Control+0x594>
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <AFE_Control+0x648>)
 8001380:	7edb      	ldrb	r3, [r3, #27]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d112      	bne.n	80013ac <AFE_Control+0x594>
 				  {
  					 tsDebug.i16TxTMR1 = 0x00;
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <AFE_Control+0x64c>)
 8001388:	2200      	movs	r2, #0
 800138a:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxTMR2 = 0x00;
 800138e:	4b35      	ldr	r3, [pc, #212]	@ (8001464 <AFE_Control+0x64c>)
 8001390:	2200      	movs	r2, #0
 8001392:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxEMG  = EMG.Filtered [Temp_buff_count];
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <AFE_Control+0x63c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4a2f      	ldr	r2, [pc, #188]	@ (8001458 <AFE_Control+0x640>)
 800139c:	3318      	adds	r3, #24
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <AFE_Control+0x64c>)
 80013a8:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 				  }
 				 tsDebug.bReleaseAFEData= true;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <AFE_Control+0x64c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
 			  #endif


	  		  Temp_buff_count++;		if (Temp_buff_count  ==  Temp_BUF_LEN ) 	{ Temp_buff_count = 0; }
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <AFE_Control+0x63c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <AFE_Control+0x63c>)
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <AFE_Control+0x63c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b19      	cmp	r3, #25
 80013c6:	d102      	bne.n	80013ce <AFE_Control+0x5b6>
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <AFE_Control+0x63c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]

 	  		if ( u8TMR1DataLen >=  BLE_Data_Length )
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <AFE_Control+0x650>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013d4:	d92e      	bls.n	8001434 <AFE_Control+0x61c>
 	  		{
 	  			memcpy ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxData, 64 );
 80013d6:	2240      	movs	r2, #64	@ 0x40
 80013d8:	4924      	ldr	r1, [pc, #144]	@ (800146c <AFE_Control+0x654>)
 80013da:	4825      	ldr	r0, [pc, #148]	@ (8001470 <AFE_Control+0x658>)
 80013dc:	f014 fc57 	bl	8015c8e <memcpy>
 	  			memcpy ( tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxData, 64 );
 80013e0:	2240      	movs	r2, #64	@ 0x40
 80013e2:	4924      	ldr	r1, [pc, #144]	@ (8001474 <AFE_Control+0x65c>)
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <AFE_Control+0x660>)
 80013e6:	f014 fc52 	bl	8015c8e <memcpy>
 	  			memcpy ( tsStreamAFE.u8EMGTxCpy, EMG.u8TxData, 64 );
 80013ea:	2240      	movs	r2, #64	@ 0x40
 80013ec:	4923      	ldr	r1, [pc, #140]	@ (800147c <AFE_Control+0x664>)
 80013ee:	4824      	ldr	r0, [pc, #144]	@ (8001480 <AFE_Control+0x668>)
 80013f0:	f014 fc4d 	bl	8015c8e <memcpy>


 	  			// Copy TMR data length
 	  			TMR1.u8TxLen = u8TMR1DataLen;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <AFE_Control+0x650>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <AFE_Control+0x66c>)
 80013fa:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			TMR2.u8TxLen = u8TMR2DataLen;
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <AFE_Control+0x670>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <AFE_Control+0x674>)
 8001404:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			EMG.u8TxLen = u8EMGDataLen;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <AFE_Control+0x644>)
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <AFE_Control+0x640>)
 800140e:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2

 	  			// Enable BLE data transmission
 	  			tsStreamAFE.bReleaseAfeData = true;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <AFE_Control+0x678>)
 8001414:	2201      	movs	r2, #1
 8001416:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
 	  			tsStreamIMU.bReleaseAccelData = true;
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <AFE_Control+0x67c>)
 800141c:	2201      	movs	r2, #1
 800141e:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
 	  			u8TMR1DataLen = 0;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <AFE_Control+0x650>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
 	  			u8TMR2DataLen = 0;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <AFE_Control+0x670>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
 	  			u8EMGDataLen = 0;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <AFE_Control+0x644>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <AFE_Control+0x680>)
 8001436:	2204      	movs	r2, #4
 8001438:	701a      	strb	r2, [r3, #0]
 	  		  break;
 800143a:	e007      	b.n	800144c <AFE_Control+0x634>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <AFE_Control+0x680>)
 800143e:	2206      	movs	r2, #6
 8001440:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8001442:	e003      	b.n	800144c <AFE_Control+0x634>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <AFE_Control+0x680>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 	  		  break;
 800144a:	bf00      	nop
 	  	  }
 }
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000e82 	.word	0x20000e82
 8001458:	20000820 	.word	0x20000820
 800145c:	20000e77 	.word	0x20000e77
 8001460:	2000163c 	.word	0x2000163c
 8001464:	20001328 	.word	0x20001328
 8001468:	20000e75 	.word	0x20000e75
 800146c:	20000474 	.word	0x20000474
 8001470:	20000c2a 	.word	0x20000c2a
 8001474:	20000778 	.word	0x20000778
 8001478:	20000c72 	.word	0x20000c72
 800147c:	20000a7c 	.word	0x20000a7c
 8001480:	20000cba 	.word	0x20000cba
 8001484:	20000218 	.word	0x20000218
 8001488:	20000e76 	.word	0x20000e76
 800148c:	2000051c 	.word	0x2000051c
 8001490:	20000b24 	.word	0x20000b24
 8001494:	2000104c 	.word	0x2000104c
 8001498:	20000212 	.word	0x20000212

0800149c <AFE_StreamDataPack>:

 void AFE_StreamDataPack 		( uint8_t *TMR1Data, uint8_t TMR1DataLen,
		  	  	  	  	  	  	  uint8_t *TMR2Data, uint8_t TMR2DataLen,
								  uint8_t *EMGData , uint8_t EMGDataLen,
								  uint8_t *outputString )
 {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	72fb      	strb	r3, [r7, #11]
 80014ac:	4613      	mov	r3, r2
 80014ae:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamAFE.u8TxData, 0, sizeof(tsStreamAFE.u8TxData) );
 80014b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b8:	2100      	movs	r1, #0
 80014ba:	4875      	ldr	r0, [pc, #468]	@ (8001690 <AFE_StreamDataPack+0x1f4>)
 80014bc:	f014 fb56 	bl	8015b6c <memset>

//#ifdef IMU_ENABLE
 	outputString [index++] = 'S';
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	75fa      	strb	r2, [r7, #23]
 80014c6:	461a      	mov	r2, r3
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	4413      	add	r3, r2
 80014cc:	2253      	movs	r2, #83	@ 0x53
 80014ce:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;
 80014d0:	4b70      	ldr	r3, [pc, #448]	@ (8001694 <AFE_StreamDataPack+0x1f8>)
 80014d2:	795b      	ldrb	r3, [r3, #5]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	b2d1      	uxtb	r1, r2
 80014d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <AFE_StreamDataPack+0x1f8>)
 80014da:	7151      	strb	r1, [r2, #5]
 80014dc:	7dfa      	ldrb	r2, [r7, #23]
 80014de:	1c51      	adds	r1, r2, #1
 80014e0:	75f9      	strb	r1, [r7, #23]
 80014e2:	4611      	mov	r1, r2
 80014e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e6:	440a      	add	r2, r1
 80014e8:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	75fa      	strb	r2, [r7, #23]
 80014f0:	461a      	mov	r2, r3
 80014f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f4:	4413      	add	r3, r2
 80014f6:	222c      	movs	r2, #44	@ 0x2c
 80014f8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	75fa      	strb	r2, [r7, #23]
 8001500:	461a      	mov	r2, r3
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001504:	4413      	add	r3, r2
 8001506:	2243      	movs	r2, #67	@ 0x43
 8001508:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	75fa      	strb	r2, [r7, #23]
 8001510:	461a      	mov	r2, r3
 8001512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001514:	4413      	add	r3, r2
 8001516:	2230      	movs	r2, #48	@ 0x30
 8001518:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	75fa      	strb	r2, [r7, #23]
 8001520:	461a      	mov	r2, r3
 8001522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001524:	4413      	add	r3, r2
 8001526:	222c      	movs	r2, #44	@ 0x2c
 8001528:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR1DataLen;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	75fa      	strb	r2, [r7, #23]
 8001530:	461a      	mov	r2, r3
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	4413      	add	r3, r2
 8001536:	7afa      	ldrb	r2, [r7, #11]
 8001538:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	75fa      	strb	r2, [r7, #23]
 8001540:	461a      	mov	r2, r3
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	4413      	add	r3, r2
 8001546:	222c      	movs	r2, #44	@ 0x2c
 8001548:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR1Data, TMR1DataLen );
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800154e:	4413      	add	r3, r2
 8001550:	7afa      	ldrb	r2, [r7, #11]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	4618      	mov	r0, r3
 8001556:	f014 fb9a 	bl	8015c8e <memcpy>

 	index += TMR1DataLen;
 800155a:	7dfa      	ldrb	r2, [r7, #23]
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	4413      	add	r3, r2
 8001560:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	75fa      	strb	r2, [r7, #23]
 8001568:	461a      	mov	r2, r3
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	4413      	add	r3, r2
 800156e:	222c      	movs	r2, #44	@ 0x2c
 8001570:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	75fa      	strb	r2, [r7, #23]
 8001578:	461a      	mov	r2, r3
 800157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157c:	4413      	add	r3, r2
 800157e:	2243      	movs	r2, #67	@ 0x43
 8001580:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	75fa      	strb	r2, [r7, #23]
 8001588:	461a      	mov	r2, r3
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	4413      	add	r3, r2
 800158e:	2231      	movs	r2, #49	@ 0x31
 8001590:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	75fa      	strb	r2, [r7, #23]
 8001598:	461a      	mov	r2, r3
 800159a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159c:	4413      	add	r3, r2
 800159e:	222c      	movs	r2, #44	@ 0x2c
 80015a0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR2DataLen;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	75fa      	strb	r2, [r7, #23]
 80015a8:	461a      	mov	r2, r3
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	4413      	add	r3, r2
 80015ae:	7aba      	ldrb	r2, [r7, #10]
 80015b0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	75fa      	strb	r2, [r7, #23]
 80015b8:	461a      	mov	r2, r3
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	4413      	add	r3, r2
 80015be:	222c      	movs	r2, #44	@ 0x2c
 80015c0:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015c6:	4413      	add	r3, r2
 80015c8:	7aba      	ldrb	r2, [r7, #10]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f014 fb5e 	bl	8015c8e <memcpy>

 	index += TMR2DataLen;
 80015d2:	7dfa      	ldrb	r2, [r7, #23]
 80015d4:	7abb      	ldrb	r3, [r7, #10]
 80015d6:	4413      	add	r3, r2
 80015d8:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	75fa      	strb	r2, [r7, #23]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e4:	4413      	add	r3, r2
 80015e6:	222c      	movs	r2, #44	@ 0x2c
 80015e8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	75fa      	strb	r2, [r7, #23]
 80015f0:	461a      	mov	r2, r3
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	4413      	add	r3, r2
 80015f6:	2243      	movs	r2, #67	@ 0x43
 80015f8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	75fa      	strb	r2, [r7, #23]
 8001600:	461a      	mov	r2, r3
 8001602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001604:	4413      	add	r3, r2
 8001606:	2232      	movs	r2, #50	@ 0x32
 8001608:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	75fa      	strb	r2, [r7, #23]
 8001610:	461a      	mov	r2, r3
 8001612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001614:	4413      	add	r3, r2
 8001616:	222c      	movs	r2, #44	@ 0x2c
 8001618:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = EMGDataLen;
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	75fa      	strb	r2, [r7, #23]
 8001620:	461a      	mov	r2, r3
 8001622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001624:	4413      	add	r3, r2
 8001626:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800162a:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	75fa      	strb	r2, [r7, #23]
 8001632:	461a      	mov	r2, r3
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	4413      	add	r3, r2
 8001638:	222c      	movs	r2, #44	@ 0x2c
 800163a:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, EMGData, EMGDataLen );
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001640:	4413      	add	r3, r2
 8001642:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001646:	6a39      	ldr	r1, [r7, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f014 fb20 	bl	8015c8e <memcpy>

 	index += EMGDataLen;
 800164e:	7dfa      	ldrb	r2, [r7, #23]
 8001650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001654:	4413      	add	r3, r2
 8001656:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = 'T';
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	75fa      	strb	r2, [r7, #23]
 800165e:	461a      	mov	r2, r3
 8001660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001662:	4413      	add	r3, r2
 8001664:	2254      	movs	r2, #84	@ 0x54
 8001666:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	75fa      	strb	r2, [r7, #23]
 800166e:	461a      	mov	r2, r3
 8001670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001672:	4413      	add	r3, r2
 8001674:	224d      	movs	r2, #77	@ 0x4d
 8001676:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	75fa      	strb	r2, [r7, #23]
 800167e:	461a      	mov	r2, r3
 8001680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001682:	4413      	add	r3, r2
 8001684:	224d      	movs	r2, #77	@ 0x4d
 8001686:	701a      	strb	r2, [r3, #0]
//	outputString [index++] = ',';
//
//	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
//#endif

 }
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000b2a 	.word	0x20000b2a
 8001694:	200019e0 	.word	0x200019e0

08001698 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <BLE_Init+0x28>)
 800169e:	2200      	movs	r2, #0
 80016a0:	725a      	strb	r2, [r3, #9]
	 tsBle.App.GyroNotification = false;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <BLE_Init+0x28>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	729a      	strb	r2, [r3, #10]
	 tsBle.App.AfeNotification = false;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <BLE_Init+0x28>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	721a      	strb	r2, [r3, #8]

	 DIAG ("\t\tBLE initialised\r\n");
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <BLE_Init+0x2c>)
 80016b0:	f001 f9a6 	bl	8002a00 <DIAG>
	 HAL_Delay (10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f001 f917 	bl	80028e8 <HAL_Delay>
 }
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200019e0 	.word	0x200019e0
 80016c4:	0801861c 	.word	0x0801861c

080016c8 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af04      	add	r7, sp, #16

	 switch( eBLE_STATE )
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <BLE_Control+0x228>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	f200 8105 	bhi.w	80018e2 <BLE_Control+0x21a>
 80016d8:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <BLE_Control+0x18>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	08001715 	.word	0x08001715
 80016e4:	0800171d 	.word	0x0800171d
 80016e8:	08001725 	.word	0x08001725
 80016ec:	0800172d 	.word	0x0800172d
 80016f0:	08001747 	.word	0x08001747
 80016f4:	08001761 	.word	0x08001761
 80016f8:	080017d7 	.word	0x080017d7
 80016fc:	080017f5 	.word	0x080017f5
 8001700:	0800184f 	.word	0x0800184f
 8001704:	08001873 	.word	0x08001873
 8001708:	080018af 	.word	0x080018af
 800170c:	080018d3 	.word	0x080018d3
 8001710:	080018db 	.word	0x080018db
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 8001714:	4b76      	ldr	r3, [pc, #472]	@ (80018f0 <BLE_Control+0x228>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
		 break;
 800171a:	e0e6      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 800171c:	4b74      	ldr	r3, [pc, #464]	@ (80018f0 <BLE_Control+0x228>)
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
		 break;
 8001722:	e0e2      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001724:	4b72      	ldr	r3, [pc, #456]	@ (80018f0 <BLE_Control+0x228>)
 8001726:	2203      	movs	r2, #3
 8001728:	701a      	strb	r2, [r3, #0]
		 break;
 800172a:	e0de      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 800172c:	4b71      	ldr	r3, [pc, #452]	@ (80018f4 <BLE_Control+0x22c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001736:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <BLE_Control+0x228>)
 8001738:	2205      	movs	r2, #5
 800173a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 800173c:	e0d5      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 800173e:	4b6c      	ldr	r3, [pc, #432]	@ (80018f0 <BLE_Control+0x228>)
 8001740:	2203      	movs	r2, #3
 8001742:	701a      	strb	r2, [r3, #0]
		 break;
 8001744:	e0d1      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 8001746:	4b6b      	ldr	r3, [pc, #428]	@ (80018f4 <BLE_Control+0x22c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001750:	4b67      	ldr	r3, [pc, #412]	@ (80018f0 <BLE_Control+0x228>)
 8001752:	2205      	movs	r2, #5
 8001754:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 8001756:	e0c8      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_ADV;
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <BLE_Control+0x228>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
		 break;
 800175e:	e0c4      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.AfeNotification )
 8001760:	4b64      	ldr	r3, [pc, #400]	@ (80018f4 <BLE_Control+0x22c>)
 8001762:	7a1b      	ldrb	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d032      	beq.n	80017ce <BLE_Control+0x106>
		 {
			 if ( tsStreamAFE.bReleaseAfeData == true )
 8001768:	4b63      	ldr	r3, [pc, #396]	@ (80018f8 <BLE_Control+0x230>)
 800176a:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 800176e:	2b01      	cmp	r3, #1
 8001770:	d129      	bne.n	80017c6 <BLE_Control+0xfe>
			 {
				 tsStreamAFE.bReleaseAfeData = false;
 8001772:	4b61      	ldr	r3, [pc, #388]	@ (80018f8 <BLE_Control+0x230>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
				 AFE_StreamDataPack ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxLen,
 800177a:	4b60      	ldr	r3, [pc, #384]	@ (80018fc <BLE_Control+0x234>)
 800177c:	f893 12f2 	ldrb.w	r1, [r3, #754]	@ 0x2f2
 8001780:	4b5f      	ldr	r3, [pc, #380]	@ (8001900 <BLE_Control+0x238>)
 8001782:	f893 22f2 	ldrb.w	r2, [r3, #754]	@ 0x2f2
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <BLE_Control+0x23c>)
 8001788:	f893 32f2 	ldrb.w	r3, [r3, #754]	@ 0x2f2
 800178c:	485e      	ldr	r0, [pc, #376]	@ (8001908 <BLE_Control+0x240>)
 800178e:	9002      	str	r0, [sp, #8]
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4b5e      	ldr	r3, [pc, #376]	@ (800190c <BLE_Control+0x244>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4613      	mov	r3, r2
 8001798:	4a5d      	ldr	r2, [pc, #372]	@ (8001910 <BLE_Control+0x248>)
 800179a:	485e      	ldr	r0, [pc, #376]	@ (8001914 <BLE_Control+0x24c>)
 800179c:	f7ff fe7e 	bl	800149c <AFE_StreamDataPack>
						 	 	 	  tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxLen,
									  tsStreamAFE.u8EMGTxCpy, EMG.u8TxLen,
									  tsStreamAFE.u8TxData );
				 // Reset data length
				 TMR1.u8TxLen = 0;
 80017a0:	4b56      	ldr	r3, [pc, #344]	@ (80018fc <BLE_Control+0x234>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 TMR2.u8TxLen = 0;
 80017a8:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <BLE_Control+0x238>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 EMG.u8TxLen = 0;
 80017b0:	4b54      	ldr	r3, [pc, #336]	@ (8001904 <BLE_Control+0x23c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 // Set the task for BLE
				 tsBle.App.AfeSetTask = true;
 80017b8:	4b4e      	ldr	r3, [pc, #312]	@ (80018f4 <BLE_Control+0x22c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	72da      	strb	r2, [r3, #11]

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 80017be:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <BLE_Control+0x228>)
 80017c0:	2206      	movs	r2, #6
 80017c2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 80017c4:	e091      	b.n	80018ea <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 80017c6:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <BLE_Control+0x228>)
 80017c8:	2205      	movs	r2, #5
 80017ca:	701a      	strb	r2, [r3, #0]
		 break;
 80017cc:	e08d      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80017ce:	4b48      	ldr	r3, [pc, #288]	@ (80018f0 <BLE_Control+0x228>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	701a      	strb	r2, [r3, #0]
		 break;
 80017d4:	e089      	b.n	80018ea <BLE_Control+0x222>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.AFE_XferComplete )
 80017d6:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <BLE_Control+0x22c>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <BLE_Control+0x124>
		 {
			 tsBle.AFE_XferComplete = false;
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <BLE_Control+0x22c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 80017e4:	4b42      	ldr	r3, [pc, #264]	@ (80018f0 <BLE_Control+0x228>)
 80017e6:	220b      	movs	r2, #11
 80017e8:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 80017ea:	e07e      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 80017ec:	4b40      	ldr	r3, [pc, #256]	@ (80018f0 <BLE_Control+0x228>)
 80017ee:	2206      	movs	r2, #6
 80017f0:	701a      	strb	r2, [r3, #0]
		 break;
 80017f2:	e07a      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 80017f4:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <BLE_Control+0x22c>)
 80017f6:	7a5b      	ldrb	r3, [r3, #9]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d024      	beq.n	8001846 <BLE_Control+0x17e>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 80017fc:	4b46      	ldr	r3, [pc, #280]	@ (8001918 <BLE_Control+0x250>)
 80017fe:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11b      	bne.n	800183e <BLE_Control+0x176>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <BLE_Control+0x250>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
				 IMU_StreamDataPack ( Accelerometer, IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 800180e:	4b43      	ldr	r3, [pc, #268]	@ (800191c <BLE_Control+0x254>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <BLE_Control+0x258>)
 8001814:	4a43      	ldr	r2, [pc, #268]	@ (8001924 <BLE_Control+0x25c>)
 8001816:	4944      	ldr	r1, [pc, #272]	@ (8001928 <BLE_Control+0x260>)
 8001818:	2000      	movs	r0, #0
 800181a:	f000 fa37 	bl	8001c8c <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 800181e:	4b43      	ldr	r3, [pc, #268]	@ (800192c <BLE_Control+0x264>)
 8001820:	2200      	movs	r2, #0
 8001822:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <BLE_Control+0x264>)
 8001826:	2200      	movs	r2, #0
 8001828:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 800182a:	4b40      	ldr	r3, [pc, #256]	@ (800192c <BLE_Control+0x264>)
 800182c:	2200      	movs	r2, #0
 800182e:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 8001830:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <BLE_Control+0x22c>)
 8001832:	2201      	movs	r2, #1
 8001834:	731a      	strb	r2, [r3, #12]

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <BLE_Control+0x228>)
 8001838:	2208      	movs	r2, #8
 800183a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 800183c:	e055      	b.n	80018ea <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 800183e:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <BLE_Control+0x228>)
 8001840:	2207      	movs	r2, #7
 8001842:	701a      	strb	r2, [r3, #0]
		 break;
 8001844:	e051      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_IDLE;
 8001846:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <BLE_Control+0x228>)
 8001848:	220b      	movs	r2, #11
 800184a:	701a      	strb	r2, [r3, #0]
		 break;
 800184c:	e04d      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 800184e:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <BLE_Control+0x22c>)
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <BLE_Control+0x1a2>
		 {
			 tsBle.ACCEL_XferComplete = false;
 8001856:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <BLE_Control+0x22c>)
 8001858:	2200      	movs	r2, #0
 800185a:	70da      	strb	r2, [r3, #3]

			 eBLE_STATE = BLE_STATE_IDLE;
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <BLE_Control+0x228>)
 800185e:	220b      	movs	r2, #11
 8001860:	701a      	strb	r2, [r3, #0]
			 #ifdef GYRO_ENABLE
			 	 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <BLE_Control+0x228>)
 8001864:	2209      	movs	r2, #9
 8001866:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 8001868:	e03f      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <BLE_Control+0x228>)
 800186c:	2208      	movs	r2, #8
 800186e:	701a      	strb	r2, [r3, #0]
		 break;
 8001870:	e03b      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 8001872:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <BLE_Control+0x250>)
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
		 if ( tsStreamIMU.bReleaseGyroData == true )
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <BLE_Control+0x250>)
 800187c:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001880:	2b01      	cmp	r3, #1
 8001882:	d110      	bne.n	80018a6 <BLE_Control+0x1de>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <BLE_Control+0x264>)
 8001886:	2200      	movs	r2, #0
 8001888:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 800188a:	4b28      	ldr	r3, [pc, #160]	@ (800192c <BLE_Control+0x264>)
 800188c:	2200      	movs	r2, #0
 800188e:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <BLE_Control+0x264>)
 8001892:	2200      	movs	r2, #0
 8001894:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <BLE_Control+0x250>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <BLE_Control+0x228>)
 80018a0:	220a      	movs	r2, #10
 80018a2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 80018a4:	e021      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <BLE_Control+0x228>)
 80018a8:	2209      	movs	r2, #9
 80018aa:	701a      	strb	r2, [r3, #0]
		 break;
 80018ac:	e01d      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <BLE_Control+0x22c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <BLE_Control+0x22c>)
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <BLE_Control+0x202>
		 {
			 tsBle.GYRO_XferComplete = false;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <BLE_Control+0x22c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <BLE_Control+0x228>)
 80018c4:	220b      	movs	r2, #11
 80018c6:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 80018c8:	e00f      	b.n	80018ea <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <BLE_Control+0x228>)
 80018cc:	2209      	movs	r2, #9
 80018ce:	701a      	strb	r2, [r3, #0]
		 break;
 80018d0:	e00b      	b.n	80018ea <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <BLE_Control+0x228>)
 80018d4:	2203      	movs	r2, #3
 80018d6:	701a      	strb	r2, [r3, #0]
		 break;
 80018d8:	e007      	b.n	80018ea <BLE_Control+0x222>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <BLE_Control+0x228>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
		 break;
 80018e0:	e003      	b.n	80018ea <BLE_Control+0x222>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 80018e2:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <BLE_Control+0x228>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
		 break;
 80018e8:	bf00      	nop

	 }
// ---------------------------------------------

 }
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000e83 	.word	0x20000e83
 80018f4:	200019e0 	.word	0x200019e0
 80018f8:	20000b24 	.word	0x20000b24
 80018fc:	20000218 	.word	0x20000218
 8001900:	2000051c 	.word	0x2000051c
 8001904:	20000820 	.word	0x20000820
 8001908:	20000b2a 	.word	0x20000b2a
 800190c:	20000cba 	.word	0x20000cba
 8001910:	20000c72 	.word	0x20000c72
 8001914:	20000c2a 	.word	0x20000c2a
 8001918:	2000104c 	.word	0x2000104c
 800191c:	20001052 	.word	0x20001052
 8001920:	20000f26 	.word	0x20000f26
 8001924:	20000ede 	.word	0x20000ede
 8001928:	20000e96 	.word	0x20000e96
 800192c:	20000e84 	.word	0x20000e84

08001930 <init_combined_filter>:
//--------------------------------------------------------------------------------------------


// Function to initialize Bandpass Filter
void init_combined_filter( Filter *filter, double low_fc, double high_fc, double notch_fc )
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b098      	sub	sp, #96	@ 0x60
 8001934:	af00      	add	r7, sp, #0
 8001936:	61f8      	str	r0, [r7, #28]
 8001938:	ed87 0b04 	vstr	d0, [r7, #16]
 800193c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001940:	ed87 2b00 	vstr	d2, [r7]
    // Bandpass Filter initialization
    double nyquist = SAMPLE_RATE / 2.0;
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b97      	ldr	r3, [pc, #604]	@ (8001ba8 <init_combined_filter+0x278>)
 800194a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double low = low_fc / nyquist;
 800194e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001952:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001956:	f7fe ff51 	bl	80007fc <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double high = high_fc / nyquist;
 8001962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196a:	f7fe ff47 	bl	80007fc <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double W0 = 2 * PI * (high + low) / 2.0;  // Center frequency
 8001976:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800197a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800197e:	f7fe fc5d 	bl	800023c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	a385      	add	r3, pc, #532	@ (adr r3, 8001ba0 <init_combined_filter+0x270>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe0a 	bl	80005a8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a4:	f7fe ff2a 	bl	80007fc <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double BW = high - low;                  // Bandwidth
 80019b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80019b8:	f7fe fc3e 	bl	8000238 <__aeabi_dsub>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double Q = W0 / BW;                      // Quality factor
 80019c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019cc:	f7fe ff16 	bl	80007fc <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Bandpass filter coefficients for a second-order Butterworth filter (simplified)
    filter->b_bpf[0] = BW / 2.0;
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019e4:	f7fe ff0a 	bl	80007fc <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	69f9      	ldr	r1, [r7, #28]
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
    filter->b_bpf[1] = 0.0;
 80019f2:	69f9      	ldr	r1, [r7, #28]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    filter->b_bpf[2] = -BW / 2.0;
 8001a00:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8001a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a04:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fef2 	bl	80007fc <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    filter->a_bpf[0] = 1.0 + BW / Q;
 8001a22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a2a:	f7fe fee7 	bl	80007fc <__aeabi_ddiv>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bac <init_combined_filter+0x27c>)
 8001a3c:	f7fe fbfe 	bl	800023c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	69f9      	ldr	r1, [r7, #28]
 8001a46:	e9c1 2306 	strd	r2, r3, [r1, #24]
    filter->a_bpf[1] = -2.0 * cos(W0);
 8001a4a:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001a4e:	f015 f81f 	bl	8016a90 <cos>
 8001a52:	ec51 0b10 	vmov	r0, r1, d0
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001a5e:	f7fe fda3 	bl	80005a8 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	69f9      	ldr	r1, [r7, #28]
 8001a68:	e9c1 2308 	strd	r2, r3, [r1, #32]
    filter->a_bpf[2] = 1.0 - BW / Q;
 8001a6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a74:	f7fe fec2 	bl	80007fc <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	494a      	ldr	r1, [pc, #296]	@ (8001bac <init_combined_filter+0x27c>)
 8001a82:	f7fe fbd9 	bl	8000238 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	69f9      	ldr	r1, [r7, #28]
 8001a8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // Initialize bandpass filter state to zero
    filter->z_bpf[0] = filter->z_bpf[1] = filter->z_bpf[2] = 0.0;
 8001a90:	69f9      	ldr	r1, [r7, #28]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ab0:	69f9      	ldr	r1, [r7, #28]
 8001ab2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Notch Filter initialization
    double W0_notch = 2 * PI * notch_fc / nyquist;
 8001ab6:	a33a      	add	r3, pc, #232	@ (adr r3, 8001ba0 <init_combined_filter+0x270>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac0:	f7fe fd72 	bl	80005a8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ad0:	f7fe fe94 	bl	80007fc <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double BW_notch = 5.0;  // Bandwidth of the notch (adjustable)
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <init_combined_filter+0x280>)
 8001ae2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Notch filter coefficients (second-order IIR)
    filter->b_notch[0] = 1.0;
 8001ae6:	69f9      	ldr	r1, [r7, #28]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <init_combined_filter+0x27c>)
 8001aee:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    filter->b_notch[1] = -2.0 * cos(W0_notch);
 8001af2:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001af6:	f014 ffcb 	bl	8016a90 <cos>
 8001afa:	ec51 0b10 	vmov	r0, r1, d0
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b06:	f7fe fd4f 	bl	80005a8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	69f9      	ldr	r1, [r7, #28]
 8001b10:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    filter->b_notch[2] = 1.0;
 8001b14:	69f9      	ldr	r1, [r7, #28]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <init_combined_filter+0x27c>)
 8001b1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

    filter->a_notch[0] = 1.0 + BW_notch;
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <init_combined_filter+0x27c>)
 8001b26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b2a:	f7fe fb87 	bl	800023c <__adddf3>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	69f9      	ldr	r1, [r7, #28]
 8001b34:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    filter->a_notch[1] = -2.0 * cos(W0_notch);
 8001b38:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001b3c:	f014 ffa8 	bl	8016a90 <cos>
 8001b40:	ec51 0b10 	vmov	r0, r1, d0
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b4c:	f7fe fd2c 	bl	80005a8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	69f9      	ldr	r1, [r7, #28]
 8001b56:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    filter->a_notch[2] = 1.0 - BW_notch;
 8001b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	4912      	ldr	r1, [pc, #72]	@ (8001bac <init_combined_filter+0x27c>)
 8001b64:	f7fe fb68 	bl	8000238 <__aeabi_dsub>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	69f9      	ldr	r1, [r7, #28]
 8001b6e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    // Initialize notch filter state to zero
    filter->z_notch[0] = filter->z_notch[1] = filter->z_notch[2] = 0.0;
 8001b72:	69f9      	ldr	r1, [r7, #28]
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001b86:	69f9      	ldr	r1, [r7, #28]
 8001b88:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001b92:	69f9      	ldr	r1, [r7, #28]
 8001b94:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
}
 8001b98:	bf00      	nop
 8001b9a:	3760      	adds	r7, #96	@ 0x60
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba0:	54442d18 	.word	0x54442d18
 8001ba4:	401921fb 	.word	0x401921fb
 8001ba8:	4080ac00 	.word	0x4080ac00
 8001bac:	3ff00000 	.word	0x3ff00000
 8001bb0:	40140000 	.word	0x40140000

08001bb4 <IMU_Init>:

#define 	M_PI 			3.14159265358979323846
#define		IMU_SPS			1067
//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <IMU_Init+0xc0>)
 8001bbe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bc2:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001bc8:	2340      	movs	r3, #64	@ 0x40
 8001bca:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	21d4      	movs	r1, #212	@ 0xd4
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f003 fedf 	bl	800599c <HAL_I2C_Master_Transmit>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <IMU_Init+0x34>
    {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e041      	b.n	8001c6c <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001be8:	2311      	movs	r3, #17
 8001bea:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001bec:	2340      	movs	r3, #64	@ 0x40
 8001bee:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001bf0:	f107 020c 	add.w	r2, r7, #12
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	21d4      	movs	r1, #212	@ 0xd4
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f003 fecd 	bl	800599c <HAL_I2C_Master_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <IMU_Init+0x58>
    {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e02f      	b.n	8001c6c <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 8001c10:	2344      	movs	r3, #68	@ 0x44
 8001c12:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	230a      	movs	r3, #10
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	21d4      	movs	r1, #212	@ 0xd4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f003 febb 	bl	800599c <HAL_I2C_Master_Transmit>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e01d      	b.n	8001c6c <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, IMU_SPS );
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <IMU_Init+0xc4>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001c7c <IMU_Init+0xc8>
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	480e      	ldr	r0, [pc, #56]	@ (8001c80 <IMU_Init+0xcc>)
 8001c46:	f000 f91f 	bl	8001e88 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, IMU_SPS );
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <IMU_Init+0xc4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c56:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001c7c <IMU_Init+0xc8>
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	4809      	ldr	r0, [pc, #36]	@ (8001c84 <IMU_Init+0xd0>)
 8001c60:	f000 f912 	bl	8001e88 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 8001c64:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <IMU_Init+0xd4>)
 8001c66:	f000 fecb 	bl	8002a00 <DIAG>

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	48000400 	.word	0x48000400
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	44856000 	.word	0x44856000
 8001c80:	20001308 	.word	0x20001308
 8001c84:	20001318 	.word	0x20001318
 8001c88:	08018630 	.word	0x08018630

08001c8c <IMU_StreamDataPack>:
	//tsSystem.u8Error |= eBus_Error;
}
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t sensor, uint8_t *x_pData, uint8_t *y_pData, uint8_t *z_pData, uint8_t *outputString   )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 	uint8_t index=0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4875      	ldr	r0, [pc, #468]	@ (8001e7c <IMU_StreamDataPack+0x1f0>)
 8001ca8:	f013 ff60 	bl	8015b6c <memset>

 	outputString [index++] = 'S';
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	75fa      	strb	r2, [r7, #23]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2253      	movs	r2, #83	@ 0x53
 8001cba:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	75fa      	strb	r2, [r7, #23]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8001e80 <IMU_StreamDataPack+0x1f4>)
 8001cca:	7952      	ldrb	r2, [r2, #5]
 8001ccc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	75fa      	strb	r2, [r7, #23]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	4413      	add	r3, r2
 8001cda:	222c      	movs	r2, #44	@ 0x2c
 8001cdc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	75fa      	strb	r2, [r7, #23]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2243      	movs	r2, #67	@ 0x43
 8001cec:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <IMU_StreamDataPack+0x7a>
 	{
 		outputString [index++] = '3';
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	75fa      	strb	r2, [r7, #23]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	4413      	add	r3, r2
 8001d00:	2233      	movs	r2, #51	@ 0x33
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <IMU_StreamDataPack+0x8a>
 	}
 	else
 	{
 		outputString [index++] = '6';
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	75fa      	strb	r2, [r7, #23]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	4413      	add	r3, r2
 8001d12:	2236      	movs	r2, #54	@ 0x36
 8001d14:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	75fa      	strb	r2, [r7, #23]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	4413      	add	r3, r2
 8001d22:	222c      	movs	r2, #44	@ 0x2c
 8001d24:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	75fa      	strb	r2, [r7, #23]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	4413      	add	r3, r2
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	75fa      	strb	r2, [r7, #23]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	4413      	add	r3, r2
 8001d42:	222c      	movs	r2, #44	@ 0x2c
 8001d44:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, x_pData, 64 );
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f013 ff9c 	bl	8015c8e <memcpy>
 	index += 64;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	3340      	adds	r3, #64	@ 0x40
 8001d5a:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	75fa      	strb	r2, [r7, #23]
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	4413      	add	r3, r2
 8001d68:	222c      	movs	r2, #44	@ 0x2c
 8001d6a:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	75fa      	strb	r2, [r7, #23]
 8001d72:	461a      	mov	r2, r3
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	4413      	add	r3, r2
 8001d78:	2243      	movs	r2, #67	@ 0x43
 8001d7a:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <IMU_StreamDataPack+0x108>
 	{
 		outputString [index++] = '4';
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	75fa      	strb	r2, [r7, #23]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2234      	movs	r2, #52	@ 0x34
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	e007      	b.n	8001da4 <IMU_StreamDataPack+0x118>
 	}
 	else
 	{
 		outputString [index++] = '7';
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	75fa      	strb	r2, [r7, #23]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	4413      	add	r3, r2
 8001da0:	2237      	movs	r2, #55	@ 0x37
 8001da2:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	75fa      	strb	r2, [r7, #23]
 8001daa:	461a      	mov	r2, r3
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	4413      	add	r3, r2
 8001db0:	222c      	movs	r2, #44	@ 0x2c
 8001db2:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	75fa      	strb	r2, [r7, #23]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2240      	movs	r2, #64	@ 0x40
 8001dc2:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	75fa      	strb	r2, [r7, #23]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	4413      	add	r3, r2
 8001dd0:	222c      	movs	r2, #44	@ 0x2c
 8001dd2:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, y_pData, 64 );
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	6a3a      	ldr	r2, [r7, #32]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f013 ff55 	bl	8015c8e <memcpy>
 	index += 64;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	3340      	adds	r3, #64	@ 0x40
 8001de8:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	75fa      	strb	r2, [r7, #23]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	4413      	add	r3, r2
 8001df6:	222c      	movs	r2, #44	@ 0x2c
 8001df8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	75fa      	strb	r2, [r7, #23]
 8001e00:	461a      	mov	r2, r3
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	4413      	add	r3, r2
 8001e06:	2243      	movs	r2, #67	@ 0x43
 8001e08:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d108      	bne.n	8001e22 <IMU_StreamDataPack+0x196>
 	{
 		outputString [index++] = '5';
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	75fa      	strb	r2, [r7, #23]
 8001e16:	461a      	mov	r2, r3
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2235      	movs	r2, #53	@ 0x35
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e007      	b.n	8001e32 <IMU_StreamDataPack+0x1a6>
 	}
 	else
 	{
 		outputString [index++] = '8';
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	75fa      	strb	r2, [r7, #23]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	2238      	movs	r2, #56	@ 0x38
 8001e30:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	75fa      	strb	r2, [r7, #23]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	222c      	movs	r2, #44	@ 0x2c
 8001e40:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	75fa      	strb	r2, [r7, #23]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2240      	movs	r2, #64	@ 0x40
 8001e50:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	75fa      	strb	r2, [r7, #23]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	222c      	movs	r2, #44	@ 0x2c
 8001e60:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, z_pData, 64 );
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	4413      	add	r3, r2
 8001e68:	2240      	movs	r2, #64	@ 0x40
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f013 ff0e 	bl	8015c8e <memcpy>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20001052 	.word	0x20001052
 8001e80:	200019e0 	.word	0x200019e0
 8001e84:	00000000 	.word	0x00000000

08001e88 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e94:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f7fe fb2d 	bl	80004f8 <__aeabi_f2d>
 8001e9e:	a321      	add	r3, pc, #132	@ (adr r3, 8001f24 <HighPassFilter_Init+0x9c>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fb80 	bl	80005a8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	f04f 0000 	mov.w	r0, #0
 8001eb0:	491b      	ldr	r1, [pc, #108]	@ (8001f20 <HighPassFilter_Init+0x98>)
 8001eb2:	f7fe fca3 	bl	80007fc <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe35 	bl	8000b2c <__aeabi_d2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 8001ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed2:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 8001ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	81da      	strh	r2, [r3, #14]
}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f3af 8000 	nop.w
 8001f20:	3ff00000 	.word	0x3ff00000
 8001f24:	54442d18 	.word	0x54442d18
 8001f28:	401921fb 	.word	0x401921fb

08001f2c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <APPD_EnableCPU2+0x34>)
 8001f34:	1d3c      	adds	r4, r7, #4
 8001f36:	461d      	mov	r5, r3
 8001f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f40:	c403      	stmia	r4!, {r0, r1}
 8001f42:	8022      	strh	r2, [r4, #0]
 8001f44:	3402      	adds	r4, #2
 8001f46:	0c13      	lsrs	r3, r2, #16
 8001f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001f4a:	f00f fcff 	bl	801194c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00e ff90 	bl	8010e76 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001f56:	bf00      	nop
}
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	08018654 	.word	0x08018654

08001f64 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001f72:	897a      	ldrh	r2, [r7, #10]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f001 fb9d 	bl	80036b8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001f7e:	bf00      	nop
}
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <LL_PWR_SMPS_Enable+0x1c>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <LL_PWR_SMPS_Enable+0x1c>)
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f96:	61d3      	str	r3, [r2, #28]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	58000400 	.word	0x58000400

08001fa8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb8:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	58000400 	.word	0x58000400

08001fd0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001fd8:	4b18      	ldr	r3, [pc, #96]	@ (800203c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f023 020f 	bic.w	r2, r3, #15
 8001ff2:	4913      	ldr	r1, [pc, #76]	@ (8002040 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001ffa:	e019      	b.n	8002030 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b06      	subs	r3, #6
 8002000:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da02      	bge.n	8002016 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e004      	b.n	8002020 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	dd01      	ble.n	8002020 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800201c:	230f      	movs	r3, #15
 800201e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f023 020f 	bic.w	r2, r3, #15
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	4905      	ldr	r1, [pc, #20]	@ (8002040 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]
}
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	1fff7558 	.word	0x1fff7558
 8002040:	58000400 	.word	0x58000400

08002044 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <LL_C2_PWR_SetPowerMode+0x28>)
 800204e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4905      	ldr	r1, [pc, #20]	@ (800206c <LL_C2_PWR_SetPowerMode+0x28>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	58000400 	.word	0x58000400

08002070 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <LL_EXTI_EnableIT_32_63+0x24>)
 800207a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800207e:	4905      	ldr	r1, [pc, #20]	@ (8002094 <LL_EXTI_EnableIT_32_63+0x24>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58000800 	.word	0x58000800

08002098 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020b2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	cafecafe 	.word	0xcafecafe

080020d4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800210c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800212e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002154:	d101      	bne.n	800215a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800217a:	d101      	bne.n	8002180 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <LL_DBGMCU_GetDeviceID+0x18>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e0042000 	.word	0xe0042000

080021dc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <LL_DBGMCU_GetRevisionID+0x18>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b29b      	uxth	r3, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e0042000 	.word	0xe0042000

080021f8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	615a      	str	r2, [r3, #20]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	619a      	str	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <LL_LPM_EnableSleep+0x1c>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <LL_LPM_EnableSleep+0x1c>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6113      	str	r3, [r2, #16]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	22ca      	movs	r2, #202	@ 0xca
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2253      	movs	r2, #83	@ 0x53
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 0207 	bic.w	r2, r3, #7
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <MX_APPE_Config+0x18>)
 8002342:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002346:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002348:	f000 f829 	bl	800239e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800234c:	f000 f868 	bl	8002420 <Config_HSE>

  return;
 8002350:	bf00      	nop
}
 8002352:	bd80      	pop	{r7, pc}
 8002354:	58004000 	.word	0x58004000

08002358 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800235c:	f000 f874 	bl	8002448 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002360:	f000 f88c 	bl	800247c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <MX_APPE_Init+0x1c>)
 8002366:	2000      	movs	r0, #0
 8002368:	f000 ffb4 	bl	80032d4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800236c:	f000 f896 	bl	800249c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002370:	bf00      	nop
}
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20001710 	.word	0x20001710

08002378 <Init_Smps>:

void Init_Smps(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800237c:	2000      	movs	r0, #0
 800237e:	f7ff fe13 	bl	8001fa8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8002382:	2004      	movs	r0, #4
 8002384:	f7ff fe24 	bl	8001fd0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8002388:	f7ff fdfe 	bl	8001f88 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800238c:	bf00      	nop
}
 800238e:	bd80      	pop	{r7, pc}

08002390 <Init_Exti>:

void Init_Exti(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002394:	2050      	movs	r0, #80	@ 0x50
 8002396:	f7ff fe6b 	bl	8002070 <LL_EXTI_EnableIT_32_63>

  return;
 800239a:	bf00      	nop
}
 800239c:	bd80      	pop	{r7, pc}

0800239e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80023a2:	f000 f804 	bl	80023ae <Reset_BackupDomain>

  Reset_IPCC();
 80023a6:	f000 f819 	bl	80023dc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80023aa:	bf00      	nop
}
 80023ac:	bd80      	pop	{r7, pc}

080023ae <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80023b2:	f7ff fec5 	bl	8002140 <LL_RCC_IsActiveFlag_PINRST>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <Reset_BackupDomain+0x2a>
 80023bc:	f7ff fed3 	bl	8002166 <LL_RCC_IsActiveFlag_SFTRST>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80023c6:	f005 fc4d 	bl	8007c64 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80023ca:	f005 fc4b 	bl	8007c64 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80023ce:	f7ff fe95 	bl	80020fc <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80023d2:	f7ff fea4 	bl	800211e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
}
 80023da:	bd80      	pop	{r7, pc}

080023dc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80023e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80023e4:	f7ff fed2 	bl	800218c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80023e8:	213f      	movs	r1, #63	@ 0x3f
 80023ea:	480c      	ldr	r0, [pc, #48]	@ (800241c <Reset_IPCC+0x40>)
 80023ec:	f7ff ff4a 	bl	8002284 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80023f0:	213f      	movs	r1, #63	@ 0x3f
 80023f2:	480a      	ldr	r0, [pc, #40]	@ (800241c <Reset_IPCC+0x40>)
 80023f4:	f7ff ff54 	bl	80022a0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80023f8:	213f      	movs	r1, #63	@ 0x3f
 80023fa:	4808      	ldr	r0, [pc, #32]	@ (800241c <Reset_IPCC+0x40>)
 80023fc:	f7ff fefc 	bl	80021f8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002400:	213f      	movs	r1, #63	@ 0x3f
 8002402:	4806      	ldr	r0, [pc, #24]	@ (800241c <Reset_IPCC+0x40>)
 8002404:	f7ff ff1b 	bl	800223e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002408:	213f      	movs	r1, #63	@ 0x3f
 800240a:	4804      	ldr	r0, [pc, #16]	@ (800241c <Reset_IPCC+0x40>)
 800240c:	f7ff ff06 	bl	800221c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002410:	213f      	movs	r1, #63	@ 0x3f
 8002412:	4802      	ldr	r0, [pc, #8]	@ (800241c <Reset_IPCC+0x40>)
 8002414:	f7ff ff25 	bl	8002262 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002418:	bf00      	nop
}
 800241a:	bd80      	pop	{r7, pc}
 800241c:	58000c00 	.word	0x58000c00

08002420 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002426:	2000      	movs	r0, #0
 8002428:	f00f fbe4 	bl	8011bf4 <OTP_Read>
 800242c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	799b      	ldrb	r3, [r3, #6]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fe2d 	bl	8002098 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800243e:	bf00      	nop
 8002440:	bf00      	nop
}
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <System_Init>:

static void System_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  Init_Smps();
 800244c:	f7ff ff94 	bl	8002378 <Init_Smps>

  Init_Exti();
 8002450:	f7ff ff9e 	bl	8002390 <Init_Exti>

  Init_Rtc();
 8002454:	f000 f802 	bl	800245c <Init_Rtc>

  return;
 8002458:	bf00      	nop
}
 800245a:	bd80      	pop	{r7, pc}

0800245c <Init_Rtc>:

static void Init_Rtc(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002460:	4805      	ldr	r0, [pc, #20]	@ (8002478 <Init_Rtc+0x1c>)
 8002462:	f7ff ff48 	bl	80022f6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002466:	2100      	movs	r1, #0
 8002468:	4803      	ldr	r0, [pc, #12]	@ (8002478 <Init_Rtc+0x1c>)
 800246a:	f7ff ff54 	bl	8002316 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800246e:	4802      	ldr	r0, [pc, #8]	@ (8002478 <Init_Rtc+0x1c>)
 8002470:	f7ff ff34 	bl	80022dc <LL_RTC_EnableWriteProtection>

  return;
 8002474:	bf00      	nop
}
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40002800 	.word	0x40002800

0800247c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002480:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002484:	f7ff fe26 	bl	80020d4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002488:	f012 feca 	bl	8015220 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800248c:	2004      	movs	r0, #4
 800248e:	f7ff fdd9 	bl	8002044 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8002492:	f005 fc05 	bl	8007ca0 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002496:	bf00      	nop
}
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80024a2:	f00f f89d 	bl	80115e0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80024a6:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <appe_Tl_Init+0x50>)
 80024a8:	2100      	movs	r1, #0
 80024aa:	2040      	movs	r0, #64	@ 0x40
 80024ac:	f012 fff6 	bl	801549c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <appe_Tl_Init+0x54>)
 80024b2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <appe_Tl_Init+0x58>)
 80024b6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	480e      	ldr	r0, [pc, #56]	@ (80024f8 <appe_Tl_Init+0x5c>)
 80024be:	f00e ff51 	bl	8011364 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <appe_Tl_Init+0x60>)
 80024c4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <appe_Tl_Init+0x64>)
 80024c8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <appe_Tl_Init+0x68>)
 80024cc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80024ce:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 80024d2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4618      	mov	r0, r3
 80024da:	f00f f9c3 	bl	8011864 <TL_MM_Init>

  TL_Enable();
 80024de:	f00f f879 	bl	80115d4 <TL_Enable>

  return;
 80024e2:	bf00      	nop
}
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0801139d 	.word	0x0801139d
 80024f0:	20031c24 	.word	0x20031c24
 80024f4:	08002509 	.word	0x08002509
 80024f8:	08002521 	.word	0x08002521
 80024fc:	20031e3c 	.word	0x20031e3c
 8002500:	20031d30 	.word	0x20031d30
 8002504:	200301f8 	.word	0x200301f8

08002508 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002512:	bf00      	nop
}
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	330b      	adds	r3, #11
 800252e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800253a:	2b07      	cmp	r3, #7
 800253c:	f200 80d0 	bhi.w	80026e0 <APPE_SysUserEvtRx+0x1c0>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <APPE_SysUserEvtRx+0x28>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002569 	.word	0x08002569
 800254c:	080025fb 	.word	0x080025fb
 8002550:	0800261d 	.word	0x0800261d
 8002554:	080026e1 	.word	0x080026e1
 8002558:	08002661 	.word	0x08002661
 800255c:	08002685 	.word	0x08002685
 8002560:	080026a1 	.word	0x080026a1
 8002564:	080026c5 	.word	0x080026c5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4618      	mov	r0, r3
 800256e:	f00e fcaf 	bl	8010ed0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8002572:	485e      	ldr	r0, [pc, #376]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 8002574:	f00f fa76 	bl	8011a64 <DbgTraceGetFileName>
 8002578:	4601      	mov	r1, r0
 800257a:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 800257e:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 8002580:	485c      	ldr	r0, [pc, #368]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 8002582:	f013 f96b 	bl	801585c <iprintf>
 8002586:	7b3b      	ldrb	r3, [r7, #12]
 8002588:	4619      	mov	r1, r3
 800258a:	7b7b      	ldrb	r3, [r7, #13]
 800258c:	461a      	mov	r2, r3
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	4859      	ldr	r0, [pc, #356]	@ (80026f8 <APPE_SysUserEvtRx+0x1d8>)
 8002592:	f013 f963 	bl	801585c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8002596:	4855      	ldr	r0, [pc, #340]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 8002598:	f00f fa64 	bl	8011a64 <DbgTraceGetFileName>
 800259c:	4601      	mov	r1, r0
 800259e:	f240 136b 	movw	r3, #363	@ 0x16b
 80025a2:	4a53      	ldr	r2, [pc, #332]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 80025a4:	4853      	ldr	r0, [pc, #332]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 80025a6:	f013 f959 	bl	801585c <iprintf>
 80025aa:	7c3b      	ldrb	r3, [r7, #16]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4853      	ldr	r0, [pc, #332]	@ (80026fc <APPE_SysUserEvtRx+0x1dc>)
 80025b0:	f013 f954 	bl	801585c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80025b4:	484d      	ldr	r0, [pc, #308]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 80025b6:	f00f fa55 	bl	8011a64 <DbgTraceGetFileName>
 80025ba:	4601      	mov	r1, r0
 80025bc:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80025c0:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 80025c2:	484c      	ldr	r0, [pc, #304]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 80025c4:	f013 f94a 	bl	801585c <iprintf>
 80025c8:	7dbb      	ldrb	r3, [r7, #22]
 80025ca:	4619      	mov	r1, r3
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	461a      	mov	r2, r3
 80025d0:	7e3b      	ldrb	r3, [r7, #24]
 80025d2:	484b      	ldr	r0, [pc, #300]	@ (8002700 <APPE_SysUserEvtRx+0x1e0>)
 80025d4:	f013 f942 	bl	801585c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80025d8:	4844      	ldr	r0, [pc, #272]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 80025da:	f00f fa43 	bl	8011a64 <DbgTraceGetFileName>
 80025de:	4601      	mov	r1, r0
 80025e0:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80025e4:	4a42      	ldr	r2, [pc, #264]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 80025e6:	4843      	ldr	r0, [pc, #268]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 80025e8:	f013 f938 	bl	801585c <iprintf>
 80025ec:	4845      	ldr	r0, [pc, #276]	@ (8002704 <APPE_SysUserEvtRx+0x1e4>)
 80025ee:	f013 f935 	bl	801585c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8e0 	bl	80027b8 <APPE_SysEvtReadyProcessing>
    break;
 80025f8:	e073      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80025fa:	483c      	ldr	r0, [pc, #240]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 80025fc:	f00f fa32 	bl	8011a64 <DbgTraceGetFileName>
 8002600:	4601      	mov	r1, r0
 8002602:	f240 1373 	movw	r3, #371	@ 0x173
 8002606:	4a3a      	ldr	r2, [pc, #232]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 8002608:	483a      	ldr	r0, [pc, #232]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 800260a:	f013 f927 	bl	801585c <iprintf>
 800260e:	483e      	ldr	r0, [pc, #248]	@ (8002708 <APPE_SysUserEvtRx+0x1e8>)
 8002610:	f013 f924 	bl	801585c <iprintf>
    APPE_SysEvtError(pPayload);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f885 	bl	8002724 <APPE_SysEvtError>
    break;
 800261a:	e062      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800261c:	4833      	ldr	r0, [pc, #204]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 800261e:	f00f fa21 	bl	8011a64 <DbgTraceGetFileName>
 8002622:	4601      	mov	r1, r0
 8002624:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 800262a:	4832      	ldr	r0, [pc, #200]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 800262c:	f013 f916 	bl	801585c <iprintf>
 8002630:	4836      	ldr	r0, [pc, #216]	@ (800270c <APPE_SysUserEvtRx+0x1ec>)
 8002632:	f013 f983 	bl	801593c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8002636:	482d      	ldr	r0, [pc, #180]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 8002638:	f00f fa14 	bl	8011a64 <DbgTraceGetFileName>
 800263c:	4601      	mov	r1, r0
 800263e:	f240 1379 	movw	r3, #377	@ 0x179
 8002642:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 8002644:	482b      	ldr	r0, [pc, #172]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 8002646:	f013 f909 	bl	801585c <iprintf>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3302      	adds	r3, #2
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3302      	adds	r3, #2
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	482d      	ldr	r0, [pc, #180]	@ (8002710 <APPE_SysUserEvtRx+0x1f0>)
 800265a:	f013 f8ff 	bl	801585c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800265e:	e040      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002660:	4822      	ldr	r0, [pc, #136]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 8002662:	f00f f9ff 	bl	8011a64 <DbgTraceGetFileName>
 8002666:	4601      	mov	r1, r0
 8002668:	f240 137f 	movw	r3, #383	@ 0x17f
 800266c:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 800266e:	4821      	ldr	r0, [pc, #132]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 8002670:	f013 f8f4 	bl	801585c <iprintf>
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3302      	adds	r3, #2
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4825      	ldr	r0, [pc, #148]	@ (8002714 <APPE_SysUserEvtRx+0x1f4>)
 800267e:	f013 f8ed 	bl	801585c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8002682:	e02e      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8002684:	4819      	ldr	r0, [pc, #100]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 8002686:	f00f f9ed 	bl	8011a64 <DbgTraceGetFileName>
 800268a:	4601      	mov	r1, r0
 800268c:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002690:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 8002694:	f013 f8e2 	bl	801585c <iprintf>
 8002698:	481f      	ldr	r0, [pc, #124]	@ (8002718 <APPE_SysUserEvtRx+0x1f8>)
 800269a:	f013 f8df 	bl	801585c <iprintf>
    break;
 800269e:	e020      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80026a0:	4812      	ldr	r0, [pc, #72]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 80026a2:	f00f f9df 	bl	8011a64 <DbgTraceGetFileName>
 80026a6:	4601      	mov	r1, r0
 80026a8:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80026ac:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 80026ae:	4811      	ldr	r0, [pc, #68]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 80026b0:	f013 f8d4 	bl	801585c <iprintf>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3302      	adds	r3, #2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4817      	ldr	r0, [pc, #92]	@ (800271c <APPE_SysUserEvtRx+0x1fc>)
 80026be:	f013 f8cd 	bl	801585c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80026c2:	e00e      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80026c4:	4809      	ldr	r0, [pc, #36]	@ (80026ec <APPE_SysUserEvtRx+0x1cc>)
 80026c6:	f00f f9cd 	bl	8011a64 <DbgTraceGetFileName>
 80026ca:	4601      	mov	r1, r0
 80026cc:	f240 138d 	movw	r3, #397	@ 0x18d
 80026d0:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <APPE_SysUserEvtRx+0x1d0>)
 80026d2:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <APPE_SysUserEvtRx+0x1d4>)
 80026d4:	f013 f8c2 	bl	801585c <iprintf>
 80026d8:	4811      	ldr	r0, [pc, #68]	@ (8002720 <APPE_SysUserEvtRx+0x200>)
 80026da:	f013 f8bf 	bl	801585c <iprintf>
    break;
 80026de:	e000      	b.n	80026e2 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80026e0:	bf00      	nop
  }

  return;
 80026e2:	bf00      	nop
}
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	08018670 	.word	0x08018670
 80026f0:	0801a38c 	.word	0x0801a38c
 80026f4:	08018688 	.word	0x08018688
 80026f8:	0801869c 	.word	0x0801869c
 80026fc:	080186c0 	.word	0x080186c0
 8002700:	080186dc 	.word	0x080186dc
 8002704:	080186f4 	.word	0x080186f4
 8002708:	08018714 	.word	0x08018714
 800270c:	08018738 	.word	0x08018738
 8002710:	08018788 	.word	0x08018788
 8002714:	080187b0 	.word	0x080187b0
 8002718:	080187ec 	.word	0x080187ec
 800271c:	08018810 	.word	0x08018810
 8002720:	0801884c 	.word	0x0801884c

08002724 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	330b      	adds	r3, #11
 8002732:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3302      	adds	r3, #2
 8002738:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800273a:	4819      	ldr	r0, [pc, #100]	@ (80027a0 <APPE_SysEvtError+0x7c>)
 800273c:	f00f f992 	bl	8011a64 <DbgTraceGetFileName>
 8002740:	4601      	mov	r1, r0
 8002742:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <APPE_SysEvtError+0x80>)
 8002748:	4817      	ldr	r0, [pc, #92]	@ (80027a8 <APPE_SysEvtError+0x84>)
 800274a:	f013 f887 	bl	801585c <iprintf>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	4815      	ldr	r0, [pc, #84]	@ (80027ac <APPE_SysEvtError+0x88>)
 8002756:	f013 f881 	bl	801585c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8002762:	480f      	ldr	r0, [pc, #60]	@ (80027a0 <APPE_SysEvtError+0x7c>)
 8002764:	f00f f97e 	bl	8011a64 <DbgTraceGetFileName>
 8002768:	4601      	mov	r1, r0
 800276a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800276e:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <APPE_SysEvtError+0x80>)
 8002770:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <APPE_SysEvtError+0x84>)
 8002772:	f013 f873 	bl	801585c <iprintf>
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <APPE_SysEvtError+0x8c>)
 8002778:	f013 f8e0 	bl	801593c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800277c:	e00d      	b.n	800279a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800277e:	4808      	ldr	r0, [pc, #32]	@ (80027a0 <APPE_SysEvtError+0x7c>)
 8002780:	f00f f970 	bl	8011a64 <DbgTraceGetFileName>
 8002784:	4601      	mov	r1, r0
 8002786:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800278a:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <APPE_SysEvtError+0x80>)
 800278c:	4806      	ldr	r0, [pc, #24]	@ (80027a8 <APPE_SysEvtError+0x84>)
 800278e:	f013 f865 	bl	801585c <iprintf>
 8002792:	4808      	ldr	r0, [pc, #32]	@ (80027b4 <APPE_SysEvtError+0x90>)
 8002794:	f013 f8d2 	bl	801593c <puts>
  return;
 8002798:	bf00      	nop
}
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	08018670 	.word	0x08018670
 80027a4:	0801a3a0 	.word	0x0801a3a0
 80027a8:	08018688 	.word	0x08018688
 80027ac:	08018870 	.word	0x08018870
 80027b0:	080188a0 	.word	0x080188a0
 80027b4:	080188dc 	.word	0x080188dc

080027b8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	330b      	adds	r3, #11
 80027dc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3302      	adds	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d146      	bne.n	800287a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80027ec:	4836      	ldr	r0, [pc, #216]	@ (80028c8 <APPE_SysEvtReadyProcessing+0x110>)
 80027ee:	f00f f939 	bl	8011a64 <DbgTraceGetFileName>
 80027f2:	4601      	mov	r1, r0
 80027f4:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80027f8:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <APPE_SysEvtReadyProcessing+0x114>)
 80027fa:	4835      	ldr	r0, [pc, #212]	@ (80028d0 <APPE_SysEvtReadyProcessing+0x118>)
 80027fc:	f013 f82e 	bl	801585c <iprintf>
 8002800:	4834      	ldr	r0, [pc, #208]	@ (80028d4 <APPE_SysEvtReadyProcessing+0x11c>)
 8002802:	f013 f89b 	bl	801593c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002806:	f7ff fb91 	bl	8001f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800280a:	230f      	movs	r3, #15
 800280c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800280e:	237f      	movs	r3, #127	@ 0x7f
 8002810:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002812:	f7ff fce3 	bl	80021dc <LL_DBGMCU_GetRevisionID>
 8002816:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002818:	482b      	ldr	r0, [pc, #172]	@ (80028c8 <APPE_SysEvtReadyProcessing+0x110>)
 800281a:	f00f f923 	bl	8011a64 <DbgTraceGetFileName>
 800281e:	4601      	mov	r1, r0
 8002820:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002824:	4a29      	ldr	r2, [pc, #164]	@ (80028cc <APPE_SysEvtReadyProcessing+0x114>)
 8002826:	482a      	ldr	r0, [pc, #168]	@ (80028d0 <APPE_SysEvtReadyProcessing+0x118>)
 8002828:	f013 f818 	bl	801585c <iprintf>
 800282c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800282e:	482a      	ldr	r0, [pc, #168]	@ (80028d8 <APPE_SysEvtReadyProcessing+0x120>)
 8002830:	f013 f814 	bl	801585c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	b29b      	uxth	r3, r3
 8002838:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800283a:	f7ff fcc1 	bl	80021c0 <LL_DBGMCU_GetDeviceID>
 800283e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002840:	4821      	ldr	r0, [pc, #132]	@ (80028c8 <APPE_SysEvtReadyProcessing+0x110>)
 8002842:	f00f f90f 	bl	8011a64 <DbgTraceGetFileName>
 8002846:	4601      	mov	r1, r0
 8002848:	f240 13e1 	movw	r3, #481	@ 0x1e1
 800284c:	4a1f      	ldr	r2, [pc, #124]	@ (80028cc <APPE_SysEvtReadyProcessing+0x114>)
 800284e:	4820      	ldr	r0, [pc, #128]	@ (80028d0 <APPE_SysEvtReadyProcessing+0x118>)
 8002850:	f013 f804 	bl	801585c <iprintf>
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	4821      	ldr	r0, [pc, #132]	@ (80028dc <APPE_SysEvtReadyProcessing+0x124>)
 8002858:	f013 f800 	bl	801585c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	b29b      	uxth	r3, r3
 8002860:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4618      	mov	r0, r3
 8002868:	f00e fb1c 	bl	8010ea4 <SHCI_C2_Config>

    APP_BLE_Init();
 800286c:	f00f feac 	bl	80125c8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002870:	2100      	movs	r1, #0
 8002872:	2001      	movs	r0, #1
 8002874:	f012 fce6 	bl	8015244 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002878:	e022      	b.n	80028c0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d110      	bne.n	80028a4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8002882:	4811      	ldr	r0, [pc, #68]	@ (80028c8 <APPE_SysEvtReadyProcessing+0x110>)
 8002884:	f00f f8ee 	bl	8011a64 <DbgTraceGetFileName>
 8002888:	4601      	mov	r1, r0
 800288a:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 800288e:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <APPE_SysEvtReadyProcessing+0x114>)
 8002890:	480f      	ldr	r0, [pc, #60]	@ (80028d0 <APPE_SysEvtReadyProcessing+0x118>)
 8002892:	f012 ffe3 	bl	801585c <iprintf>
 8002896:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <APPE_SysEvtReadyProcessing+0x128>)
 8002898:	f012 ffe0 	bl	801585c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
  return;
 80028a2:	e00d      	b.n	80028c0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80028a4:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <APPE_SysEvtReadyProcessing+0x110>)
 80028a6:	f00f f8dd 	bl	8011a64 <DbgTraceGetFileName>
 80028aa:	4601      	mov	r1, r0
 80028ac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80028b0:	4a06      	ldr	r2, [pc, #24]	@ (80028cc <APPE_SysEvtReadyProcessing+0x114>)
 80028b2:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <APPE_SysEvtReadyProcessing+0x118>)
 80028b4:	f012 ffd2 	bl	801585c <iprintf>
 80028b8:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x12c>)
 80028ba:	f012 ffcf 	bl	801585c <iprintf>
  return;
 80028be:	bf00      	nop
}
 80028c0:	3728      	adds	r7, #40	@ 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	08018670 	.word	0x08018670
 80028cc:	0801a3b4 	.word	0x0801a3b4
 80028d0:	08018688 	.word	0x08018688
 80028d4:	08018914 	.word	0x08018914
 80028d8:	08018930 	.word	0x08018930
 80028dc:	08018954 	.word	0x08018954
 80028e0:	08018974 	.word	0x08018974
 80028e4:	080189a8 	.word	0x080189a8

080028e8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f002 f9f8 	bl	8004ce4 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d00a      	beq.n	8002918 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002902:	f002 fa07 	bl	8004d14 <HAL_GetTickFreq>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002910:	e002      	b.n	8002918 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002912:	f7ff fcd3 	bl	80022bc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002916:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002918:	f002 f9e4 	bl	8004ce4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d8f4      	bhi.n	8002912 <HAL_Delay+0x2a>
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002936:	f04f 30ff 	mov.w	r0, #4294967295
 800293a:	f012 fcb3 	bl	80152a4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002946:	bf00      	nop
}
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800295a:	f04f 30ff 	mov.w	r0, #4294967295
 800295e:	f012 fca1 	bl	80152a4 <UTIL_SEQ_Run>
  return;
 8002962:	bf00      	nop
}
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002972:	2100      	movs	r1, #0
 8002974:	2040      	movs	r0, #64	@ 0x40
 8002976:	f012 fdb3 	bl	80154e0 <UTIL_SEQ_SetTask>
  return;
 800297a:	bf00      	nop
}
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800298a:	2002      	movs	r0, #2
 800298c:	f012 fe14 	bl	80155b8 <UTIL_SEQ_SetEvt>
  return;
 8002990:	bf00      	nop
}
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029a0:	2002      	movs	r0, #2
 80029a2:	f012 fe29 	bl	80155f8 <UTIL_SEQ_WaitEvt>
  return;
 80029a6:	bf00      	nop
}
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <Debug_Init>:
uint16_t u16dummy =0;


//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <Debug_Init+0x14>)
 80029b6:	f000 f823 	bl	8002a00 <DIAG>
	HAL_Delay(10);
 80029ba:	200a      	movs	r0, #10
 80029bc:	f7ff ff94 	bl	80028e8 <HAL_Delay>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	080189dc 	.word	0x080189dc

080029c8 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0

#ifndef BLE_Debug
#ifdef DATA_DEBUG_EN

		#ifndef IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <Debug_Control+0x30>)
 80029ce:	f893 3266 	ldrb.w	r3, [r3, #614]	@ 0x266
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <Debug_Control+0x2c>
			{
				DIAG ( "%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2 );
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <Debug_Control+0x30>)
 80029d8:	f9b3 3260 	ldrsh.w	r3, [r3, #608]	@ 0x260
 80029dc:	4619      	mov	r1, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <Debug_Control+0x30>)
 80029e0:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 80029e4:	461a      	mov	r2, r3
 80029e6:	4805      	ldr	r0, [pc, #20]	@ (80029fc <Debug_Control+0x34>)
 80029e8:	f000 f80a 	bl	8002a00 <DIAG>
//				DIAG ( "%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG );
//				DIAG ( "%d,%d,%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG, tsDebug.u8PacketCount[0], tsDebug.u8PacketCount[1] );

//				DIAG (  "[%d - %d]-%d,%d\r\n", AFE.u16SPS, IMU.u16SPS, tsDebug.i16TxTMR1, tsDebug.i16TxTMR2 );

				tsDebug.bReleaseAFEData= false;
 80029ec:	4b02      	ldr	r3, [pc, #8]	@ (80029f8 <Debug_Control+0x30>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
			}
		#endif

#endif
#endif
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20001328 	.word	0x20001328
 80029fc:	080189f4 	.word	0x080189f4

08002a00 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002a00:	b40f      	push	{r0, r1, r2, r3}
 8002a02:	b580      	push	{r7, lr}
 8002a04:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002a08:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002a0a:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002a0e:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a12:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a16:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002a18:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a1c:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a20:	f107 0008 	add.w	r0, r7, #8
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002a2a:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002a2e:	f012 fffb 	bl	8015a28 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fba2 	bl	8000180 <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f011 ff48 	bl	80148dc <CDC_Transmit_FS>
}
 8002a4c:	bf00      	nop
 8002a4e:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a58:	b004      	add	sp, #16
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b80      	cmp	r3, #128	@ 0x80
 8002a6a:	d105      	bne.n	8002a78 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_GPIO_EXTI_Callback+0x40>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d109      	bne.n	8002a92 <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_GPIO_EXTI_Callback+0x48>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 21c6 	strb.w	r2, [r3, #454]	@ 0x1c6
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a88:	2210      	movs	r2, #16
 8002a8a:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002a8c:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a8e:	f7ff ffb7 	bl	8002a00 <DIAG>
//		tsSystem.OFF = true;
//		__HAL_GPIO_EXTI_CLEAR_IT(PWR_ON_Pin);
//		DIAG (" PWR SW Pressed \r\n");
	}

}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000214 	.word	0x20000214
 8002aa0:	58000800 	.word	0x58000800
 8002aa4:	20000e84 	.word	0x20000e84
 8002aa8:	08018a14 	.word	0x08018a14

08002aac <LL_EXTI_EnableIT_0_31>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ab6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002aba:	4905      	ldr	r1, [pc, #20]	@ (8002ad0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	58000800 	.word	0x58000800

08002ad4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]

}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	58000800 	.word	0x58000800

08002af8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <ReadRtcSsrValue+0x3c>)
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <ReadRtcSsrValue+0x3c>)
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b0e:	e005      	b.n	8002b1c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b14:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <ReadRtcSsrValue+0x3c>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1f5      	bne.n	8002b10 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b24:	683b      	ldr	r3, [r7, #0]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40002800 	.word	0x40002800

08002b38 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460a      	mov	r2, r1
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b48:	79ba      	ldrb	r2, [r7, #6]
 8002b4a:	491d      	ldr	r1, [pc, #116]	@ (8002bc0 <LinkTimerAfter+0x88>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3315      	adds	r3, #21
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d009      	beq.n	8002b76 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	4916      	ldr	r1, [pc, #88]	@ (8002bc0 <LinkTimerAfter+0x88>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3314      	adds	r3, #20
 8002b72:	79fa      	ldrb	r2, [r7, #7]
 8002b74:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002b76:	79fa      	ldrb	r2, [r7, #7]
 8002b78:	4911      	ldr	r1, [pc, #68]	@ (8002bc0 <LinkTimerAfter+0x88>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3315      	adds	r3, #21
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002b8a:	79fa      	ldrb	r2, [r7, #7]
 8002b8c:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <LinkTimerAfter+0x88>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3314      	adds	r3, #20
 8002b9a:	79ba      	ldrb	r2, [r7, #6]
 8002b9c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002b9e:	79ba      	ldrb	r2, [r7, #6]
 8002ba0:	4907      	ldr	r1, [pc, #28]	@ (8002bc0 <LinkTimerAfter+0x88>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3315      	adds	r3, #21
 8002bae:	79fa      	ldrb	r2, [r7, #7]
 8002bb0:	701a      	strb	r2, [r3, #0]

  return;
 8002bb2:	bf00      	nop
}
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20001594 	.word	0x20001594

08002bc4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460a      	mov	r2, r1
 8002bce:	71fb      	strb	r3, [r7, #7]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002bd4:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <LinkTimerBefore+0xb8>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	79ba      	ldrb	r2, [r7, #6]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d032      	beq.n	8002c46 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002be0:	79ba      	ldrb	r2, [r7, #6]
 8002be2:	4927      	ldr	r1, [pc, #156]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3314      	adds	r3, #20
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	4922      	ldr	r1, [pc, #136]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3315      	adds	r3, #21
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c08:	79fa      	ldrb	r2, [r7, #7]
 8002c0a:	491d      	ldr	r1, [pc, #116]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3315      	adds	r3, #21
 8002c18:	79ba      	ldrb	r2, [r7, #6]
 8002c1a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c1c:	79fa      	ldrb	r2, [r7, #7]
 8002c1e:	4918      	ldr	r1, [pc, #96]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c30:	79ba      	ldrb	r2, [r7, #6]
 8002c32:	4913      	ldr	r1, [pc, #76]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3314      	adds	r3, #20
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c44:	e014      	b.n	8002c70 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3315      	adds	r3, #21
 8002c56:	79ba      	ldrb	r2, [r7, #6]
 8002c58:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c5a:	79ba      	ldrb	r2, [r7, #6]
 8002c5c:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <LinkTimerBefore+0xbc>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	3314      	adds	r3, #20
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	701a      	strb	r2, [r3, #0]
  return;
 8002c6e:	bf00      	nop
}
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20001624 	.word	0x20001624
 8002c80:	20001594 	.word	0x20001594

08002c84 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <linkTimer+0x144>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d118      	bne.n	8002cca <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002c98:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc8 <linkTimer+0x144>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002dcc <linkTimer+0x148>)
 8002ca0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002ca2:	4a49      	ldr	r2, [pc, #292]	@ (8002dc8 <linkTimer+0x144>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002ca8:	79fa      	ldrb	r2, [r7, #7]
 8002caa:	4949      	ldr	r1, [pc, #292]	@ (8002dd0 <linkTimer+0x14c>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3315      	adds	r3, #21
 8002cb8:	2206      	movs	r2, #6
 8002cba:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002cbc:	4b45      	ldr	r3, [pc, #276]	@ (8002dd4 <linkTimer+0x150>)
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	81fb      	strh	r3, [r7, #14]
 8002cc8:	e078      	b.n	8002dbc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002cca:	f000 f909 	bl	8002ee0 <ReturnTimeElapsed>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002cd2:	79fa      	ldrb	r2, [r7, #7]
 8002cd4:	493e      	ldr	r1, [pc, #248]	@ (8002dd0 <linkTimer+0x14c>)
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	79fa      	ldrb	r2, [r7, #7]
 8002ce8:	4419      	add	r1, r3
 8002cea:	4839      	ldr	r0, [pc, #228]	@ (8002dd0 <linkTimer+0x14c>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	4934      	ldr	r1, [pc, #208]	@ (8002dd0 <linkTimer+0x14c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3308      	adds	r3, #8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <linkTimer+0x144>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4619      	mov	r1, r3
 8002d16:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <linkTimer+0x14c>)
 8002d18:	460b      	mov	r3, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	3308      	adds	r3, #8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d337      	bcc.n	8002d9c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d2c:	4b26      	ldr	r3, [pc, #152]	@ (8002dc8 <linkTimer+0x144>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d32:	7b7a      	ldrb	r2, [r7, #13]
 8002d34:	4926      	ldr	r1, [pc, #152]	@ (8002dd0 <linkTimer+0x14c>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3315      	adds	r3, #21
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d46:	e013      	b.n	8002d70 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d48:	7b7a      	ldrb	r2, [r7, #13]
 8002d4a:	4921      	ldr	r1, [pc, #132]	@ (8002dd0 <linkTimer+0x14c>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3315      	adds	r3, #21
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002d5c:	7b7a      	ldrb	r2, [r7, #13]
 8002d5e:	491c      	ldr	r1, [pc, #112]	@ (8002dd0 <linkTimer+0x14c>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3315      	adds	r3, #21
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d70:	7b3b      	ldrb	r3, [r7, #12]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d00b      	beq.n	8002d8e <linkTimer+0x10a>
 8002d76:	7b3a      	ldrb	r2, [r7, #12]
 8002d78:	4915      	ldr	r1, [pc, #84]	@ (8002dd0 <linkTimer+0x14c>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	3308      	adds	r3, #8
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d2dc      	bcs.n	8002d48 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002d8e:	7b7a      	ldrb	r2, [r7, #13]
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fecf 	bl	8002b38 <LinkTimerAfter>
 8002d9a:	e00f      	b.n	8002dbc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <linkTimer+0x144>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff0c 	bl	8002bc4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <linkTimer+0x144>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <linkTimer+0x148>)
 8002db4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <linkTimer+0x144>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20001624 	.word	0x20001624
 8002dcc:	20001625 	.word	0x20001625
 8002dd0:	20001594 	.word	0x20001594
 8002dd4:	20001628 	.word	0x20001628

08002dd8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	460a      	mov	r2, r1
 8002de2:	71fb      	strb	r3, [r7, #7]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002de8:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <UnlinkTimer+0xf8>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d111      	bne.n	8002e18 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002df4:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <UnlinkTimer+0xf8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <UnlinkTimer+0xfc>)
 8002dfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	4935      	ldr	r1, [pc, #212]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3315      	adds	r3, #21
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed0 <UnlinkTimer+0xf8>)
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e03e      	b.n	8002e96 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e18:	79fa      	ldrb	r2, [r7, #7]
 8002e1a:	492f      	ldr	r1, [pc, #188]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3314      	adds	r3, #20
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e2c:	79fa      	ldrb	r2, [r7, #7]
 8002e2e:	492a      	ldr	r1, [pc, #168]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	3315      	adds	r3, #21
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e40:	79f9      	ldrb	r1, [r7, #7]
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	4824      	ldr	r0, [pc, #144]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4403      	add	r3, r0
 8002e50:	3315      	adds	r3, #21
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2d8      	uxtb	r0, r3
 8002e56:	4920      	ldr	r1, [pc, #128]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3315      	adds	r3, #21
 8002e64:	4602      	mov	r2, r0
 8002e66:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d013      	beq.n	8002e96 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002e6e:	79f9      	ldrb	r1, [r7, #7]
 8002e70:	7bba      	ldrb	r2, [r7, #14]
 8002e72:	4819      	ldr	r0, [pc, #100]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e74:	460b      	mov	r3, r1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	440b      	add	r3, r1
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4403      	add	r3, r0
 8002e7e:	3314      	adds	r3, #20
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	4914      	ldr	r1, [pc, #80]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3314      	adds	r3, #20
 8002e92:	4602      	mov	r2, r0
 8002e94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	490f      	ldr	r1, [pc, #60]	@ (8002ed8 <UnlinkTimer+0x100>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <UnlinkTimer+0xf8>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d107      	bne.n	8002ec4 <UnlinkTimer+0xec>
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <UnlinkTimer+0x104>)
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  return;
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
}
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	20001624 	.word	0x20001624
 8002ed4:	20001625 	.word	0x20001625
 8002ed8:	20001594 	.word	0x20001594
 8002edc:	20001628 	.word	0x20001628

08002ee0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <ReturnTimeElapsed+0x70>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d026      	beq.n	8002f3e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002ef0:	f7ff fe02 	bl	8002af8 <ReadRtcSsrValue>
 8002ef4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002ef6:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <ReturnTimeElapsed+0x70>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d805      	bhi.n	8002f0c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <ReturnTimeElapsed+0x70>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	e00a      	b.n	8002f22 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <ReturnTimeElapsed+0x74>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f18:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <ReturnTimeElapsed+0x70>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <ReturnTimeElapsed+0x78>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f30:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <ReturnTimeElapsed+0x7c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	40d3      	lsrs	r3, r2
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e001      	b.n	8002f42 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	b29b      	uxth	r3, r3
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20001628 	.word	0x20001628
 8002f54:	20001630 	.word	0x20001630
 8002f58:	2000162e 	.word	0x2000162e
 8002f5c:	2000162d 	.word	0x2000162d

08002f60 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f70:	f7ff fdc2 	bl	8002af8 <ReadRtcSsrValue>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a21      	ldr	r2, [pc, #132]	@ (8002ffc <RestartWakeupCounter+0x9c>)
 8002f78:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	f002 f853 	bl	8005026 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002f80:	e039      	b.n	8002ff6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d803      	bhi.n	8002f90 <RestartWakeupCounter+0x30>
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <RestartWakeupCounter+0xa0>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d002      	beq.n	8002f96 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002f96:	bf00      	nop
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <RestartWakeupCounter+0xa4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f8      	beq.n	8002f98 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fa6:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <RestartWakeupCounter+0xa4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <RestartWakeupCounter+0xa4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002fb6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <RestartWakeupCounter+0xa8>)
 8002fba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002fbe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f002 f83e 	bl	8005042 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <RestartWakeupCounter+0xac>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	490e      	ldr	r1, [pc, #56]	@ (800300c <RestartWakeupCounter+0xac>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002fd6:	f7ff fd8f 	bl	8002af8 <ReadRtcSsrValue>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <RestartWakeupCounter+0x9c>)
 8002fde:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <RestartWakeupCounter+0xa4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <RestartWakeupCounter+0xa4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fee:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002ff0:	f3af 8000 	nop.w
  return ;
 8002ff4:	bf00      	nop
}
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20001628 	.word	0x20001628
 8003000:	2000162d 	.word	0x2000162d
 8003004:	20001710 	.word	0x20001710
 8003008:	58000800 	.word	0x58000800
 800300c:	40002800 	.word	0x40002800

08003010 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003016:	4b45      	ldr	r3, [pc, #276]	@ (800312c <RescheduleTimerList+0x11c>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d107      	bne.n	8003034 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003024:	bf00      	nop
 8003026:	4b42      	ldr	r3, [pc, #264]	@ (8003130 <RescheduleTimerList+0x120>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f8      	bne.n	8003026 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003034:	4b3e      	ldr	r3, [pc, #248]	@ (8003130 <RescheduleTimerList+0x120>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b3d      	ldr	r3, [pc, #244]	@ (8003130 <RescheduleTimerList+0x120>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003042:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003044:	4b3b      	ldr	r3, [pc, #236]	@ (8003134 <RescheduleTimerList+0x124>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	493a      	ldr	r1, [pc, #232]	@ (8003138 <RescheduleTimerList+0x128>)
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	3308      	adds	r3, #8
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800305e:	f7ff ff3f 	bl	8002ee0 <ReturnTimeElapsed>
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d205      	bcs.n	800307a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003072:	4b32      	ldr	r3, [pc, #200]	@ (800313c <RescheduleTimerList+0x12c>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e04d      	b.n	8003116 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	4a30      	ldr	r2, [pc, #192]	@ (8003140 <RescheduleTimerList+0x130>)
 800307e:	8812      	ldrh	r2, [r2, #0]
 8003080:	b292      	uxth	r2, r2
 8003082:	4413      	add	r3, r2
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4293      	cmp	r3, r2
 800308a:	d906      	bls.n	800309a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800308c:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <RescheduleTimerList+0x130>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <RescheduleTimerList+0x12c>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e03d      	b.n	8003116 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	b29a      	uxth	r2, r3
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <RescheduleTimerList+0x12c>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030aa:	e034      	b.n	8003116 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	4922      	ldr	r1, [pc, #136]	@ (8003138 <RescheduleTimerList+0x128>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3308      	adds	r3, #8
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d20a      	bcs.n	80030da <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	491c      	ldr	r1, [pc, #112]	@ (8003138 <RescheduleTimerList+0x128>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3308      	adds	r3, #8
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e013      	b.n	8003102 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	4916      	ldr	r1, [pc, #88]	@ (8003138 <RescheduleTimerList+0x128>)
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3308      	adds	r3, #8
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	1ac9      	subs	r1, r1, r3
 80030f2:	4811      	ldr	r0, [pc, #68]	@ (8003138 <RescheduleTimerList+0x128>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4403      	add	r3, r0
 80030fe:	3308      	adds	r3, #8
 8003100:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	490c      	ldr	r1, [pc, #48]	@ (8003138 <RescheduleTimerList+0x128>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3315      	adds	r3, #21
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d1c7      	bne.n	80030ac <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800311c:	89bb      	ldrh	r3, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff1e 	bl	8002f60 <RestartWakeupCounter>

  return ;
 8003124:	bf00      	nop
}
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40002800 	.word	0x40002800
 8003130:	20001710 	.word	0x20001710
 8003134:	20001624 	.word	0x20001624
 8003138:	20001594 	.word	0x20001594
 800313c:	2000162c 	.word	0x2000162c
 8003140:	20001632 	.word	0x20001632

08003144 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	@ 0x28
 8003148:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8310 	mrs	r3, PRIMASK
 800314e:	617b      	str	r3, [r7, #20]
  return(result);
 8003150:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003154:	b672      	cpsid	i
}
 8003156:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	22ca      	movs	r2, #202	@ 0xca
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003160:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2253      	movs	r2, #83	@ 0x53
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003168:	4b55      	ldr	r3, [pc, #340]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b54      	ldr	r3, [pc, #336]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003176:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003178:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003180:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003184:	4950      	ldr	r1, [pc, #320]	@ (80032c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	330c      	adds	r3, #12
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d16e      	bne.n	8003278 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800319a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800319e:	494a      	ldr	r1, [pc, #296]	@ (80032c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80031ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031b2:	4945      	ldr	r1, [pc, #276]	@ (80032c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3310      	adds	r3, #16
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04c      	beq.n	8003268 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80031ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031d2:	493d      	ldr	r1, [pc, #244]	@ (80032c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	330d      	adds	r3, #13
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d124      	bne.n	8003232 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80031e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fdf2 	bl	8002dd8 <UnlinkTimer>
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f383 8810 	msr	PRIMASK, r3
}
 80031fe:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003200:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003204:	4930      	ldr	r1, [pc, #192]	@ (80032c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	3304      	adds	r3, #4
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f9b8 	bl	8003590 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003220:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	22ca      	movs	r2, #202	@ 0xca
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24
 8003228:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2253      	movs	r2, #83	@ 0x53
 800322e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003230:	e012      	b.n	8003258 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800323e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f920 	bl	8003488 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003248:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22ca      	movs	r2, #202	@ 0xca
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2253      	movs	r2, #83	@ 0x53
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	4619      	mov	r1, r3
 8003260:	69b8      	ldr	r0, [r7, #24]
 8003262:	f000 fa1b 	bl	800369c <HW_TS_RTC_Int_AppNot>
 8003266:	e022      	b.n	80032ae <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003268:	f7ff fed2 	bl	8003010 <RescheduleTimerList>
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	e01a      	b.n	80032ae <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003278:	bf00      	nop
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f8      	beq.n	800327a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003288:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003298:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800329c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80032ae:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	22ff      	movs	r2, #255	@ 0xff
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80032b6:	bf00      	nop
}
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20001710 	.word	0x20001710
 80032c4:	20001624 	.word	0x20001624
 80032c8:	20001594 	.word	0x20001594
 80032cc:	2000162c 	.word	0x2000162c
 80032d0:	58000800 	.word	0x58000800

080032d4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032e0:	4b5e      	ldr	r3, [pc, #376]	@ (800345c <HW_TS_Init+0x188>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	22ca      	movs	r2, #202	@ 0xca
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80032e8:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <HW_TS_Init+0x188>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2253      	movs	r2, #83	@ 0x53
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003460 <HW_TS_Init+0x18c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003460 <HW_TS_Init+0x18c>)
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032fc:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HW_TS_Init+0x18c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f1c3 0304 	rsb	r3, r3, #4
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <HW_TS_Init+0x190>)
 8003310:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003312:	4b53      	ldr	r3, [pc, #332]	@ (8003460 <HW_TS_Init+0x18c>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800331a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800331e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	2a00      	cmp	r2, #0
 8003330:	d101      	bne.n	8003336 <HW_TS_Init+0x62>
  {
    return 32U;
 8003332:	2220      	movs	r2, #32
 8003334:	e003      	b.n	800333e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	40d3      	lsrs	r3, r2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b48      	ldr	r3, [pc, #288]	@ (8003468 <HW_TS_Init+0x194>)
 8003348:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800334a:	4b45      	ldr	r3, [pc, #276]	@ (8003460 <HW_TS_Init+0x18c>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003354:	b29b      	uxth	r3, r3
 8003356:	3301      	adds	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b44      	ldr	r3, [pc, #272]	@ (800346c <HW_TS_Init+0x198>)
 800335c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800335e:	4b43      	ldr	r3, [pc, #268]	@ (800346c <HW_TS_Init+0x198>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <HW_TS_Init+0x194>)
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003370:	4a3c      	ldr	r2, [pc, #240]	@ (8003464 <HW_TS_Init+0x190>)
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	40d3      	lsrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800337e:	4293      	cmp	r3, r2
 8003380:	d904      	bls.n	800338c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HW_TS_Init+0x19c>)
 8003384:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e003      	b.n	8003394 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b37      	ldr	r3, [pc, #220]	@ (8003470 <HW_TS_Init+0x19c>)
 8003392:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003394:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003398:	f7ff fb9c 	bl	8002ad4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800339c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033a0:	f7ff fb84 	bl	8002aac <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d13d      	bne.n	8003426 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HW_TS_Init+0x1a0>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80033b0:	4b31      	ldr	r3, [pc, #196]	@ (8003478 <HW_TS_Init+0x1a4>)
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e00c      	b.n	80033d8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80033be:	7ffa      	ldrb	r2, [r7, #31]
 80033c0:	492e      	ldr	r1, [pc, #184]	@ (800347c <HW_TS_Init+0x1a8>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	330c      	adds	r3, #12
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	3301      	adds	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d9ef      	bls.n	80033be <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80033de:	4b28      	ldr	r3, [pc, #160]	@ (8003480 <HW_TS_Init+0x1ac>)
 80033e0:	2206      	movs	r2, #6
 80033e2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HW_TS_Init+0x188>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <HW_TS_Init+0x188>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HW_TS_Init+0x188>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HW_TS_Init+0x188>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003404:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003406:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <HW_TS_Init+0x1b0>)
 8003408:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800340c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800340e:	2003      	movs	r0, #3
 8003410:	f001 fe17 	bl	8005042 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <HW_TS_Init+0x188>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HW_TS_Init+0x188>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e009      	b.n	800343a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HW_TS_Init+0x188>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003434:	2003      	movs	r0, #3
 8003436:	f001 fdf6 	bl	8005026 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HW_TS_Init+0x188>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	22ff      	movs	r2, #255	@ 0xff
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003442:	2200      	movs	r2, #0
 8003444:	2103      	movs	r1, #3
 8003446:	2003      	movs	r0, #3
 8003448:	f001 fdab 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800344c:	2003      	movs	r0, #3
 800344e:	f001 fdc2 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  return;
 8003452:	bf00      	nop
}
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20001710 	.word	0x20001710
 8003460:	40002800 	.word	0x40002800
 8003464:	2000162d 	.word	0x2000162d
 8003468:	2000162e 	.word	0x2000162e
 800346c:	20001630 	.word	0x20001630
 8003470:	20001632 	.word	0x20001632
 8003474:	2000162c 	.word	0x2000162c
 8003478:	20001628 	.word	0x20001628
 800347c:	20001594 	.word	0x20001594
 8003480:	20001624 	.word	0x20001624
 8003484:	58000800 	.word	0x58000800

08003488 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	60fb      	str	r3, [r7, #12]
  return(result);
 8003498:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800349a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800349c:	b672      	cpsid	i
}
 800349e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80034a0:	2003      	movs	r0, #3
 80034a2:	f001 fda6 	bl	8004ff2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034a6:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <HW_TS_Stop+0xf0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	22ca      	movs	r2, #202	@ 0xca
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80034ae:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HW_TS_Stop+0xf0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2253      	movs	r2, #83	@ 0x53
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	4930      	ldr	r1, [pc, #192]	@ (800357c <HW_TS_Stop+0xf4>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	330c      	adds	r3, #12
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d142      	bne.n	8003554 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fc80 	bl	8002dd8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80034d8:	4b29      	ldr	r3, [pc, #164]	@ (8003580 <HW_TS_Stop+0xf8>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d12f      	bne.n	8003544 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80034e4:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <HW_TS_Stop+0xfc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f0:	d107      	bne.n	8003502 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80034f2:	bf00      	nop
 80034f4:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <HW_TS_Stop+0xf0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f8      	bne.n	80034f4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003502:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HW_TS_Stop+0xf0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HW_TS_Stop+0xf0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003510:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003512:	bf00      	nop
 8003514:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <HW_TS_Stop+0xf0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f8      	beq.n	8003514 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <HW_TS_Stop+0xf0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <HW_TS_Stop+0xf0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003532:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003534:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <HW_TS_Stop+0x100>)
 8003536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800353a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800353c:	2003      	movs	r0, #3
 800353e:	f001 fd80 	bl	8005042 <HAL_NVIC_ClearPendingIRQ>
 8003542:	e007      	b.n	8003554 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HW_TS_Stop+0x104>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	7cfa      	ldrb	r2, [r7, #19]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003550:	f7ff fd5e 	bl	8003010 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003554:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <HW_TS_Stop+0xf0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	22ff      	movs	r2, #255	@ 0xff
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800355c:	2003      	movs	r0, #3
 800355e:	f001 fd3a 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f383 8810 	msr	PRIMASK, r3
}
 800356c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800356e:	bf00      	nop
}
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20001710 	.word	0x20001710
 800357c:	20001594 	.word	0x20001594
 8003580:	20001624 	.word	0x20001624
 8003584:	40002800 	.word	0x40002800
 8003588:	58000800 	.word	0x58000800
 800358c:	20001625 	.word	0x20001625

08003590 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	493b      	ldr	r1, [pc, #236]	@ (800368c <HW_TS_Start+0xfc>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	330c      	adds	r3, #12
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d103      	bne.n	80035bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff66 	bl	8003488 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035bc:	f3ef 8310 	mrs	r3, PRIMASK
 80035c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80035c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80035c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80035c6:	b672      	cpsid	i
}
 80035c8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80035ca:	2003      	movs	r0, #3
 80035cc:	f001 fd11 	bl	8004ff2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80035d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003690 <HW_TS_Start+0x100>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	22ca      	movs	r2, #202	@ 0xca
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80035d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HW_TS_Start+0x100>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2253      	movs	r2, #83	@ 0x53
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	492a      	ldr	r1, [pc, #168]	@ (800368c <HW_TS_Start+0xfc>)
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	330c      	adds	r3, #12
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4925      	ldr	r1, [pc, #148]	@ (800368c <HW_TS_Start+0xfc>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	3308      	adds	r3, #8
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	4920      	ldr	r1, [pc, #128]	@ (800368c <HW_TS_Start+0xfc>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3304      	adds	r3, #4
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fb30 	bl	8002c84 <linkTimer>
 8003624:	4603      	mov	r3, r0
 8003626:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003628:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <HW_TS_Start+0x104>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800362e:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HW_TS_Start+0x108>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	7c7a      	ldrb	r2, [r7, #17]
 8003636:	429a      	cmp	r2, r3
 8003638:	d002      	beq.n	8003640 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800363a:	f7ff fce9 	bl	8003010 <RescheduleTimerList>
 800363e:	e013      	b.n	8003668 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003640:	79fa      	ldrb	r2, [r7, #7]
 8003642:	4912      	ldr	r1, [pc, #72]	@ (800368c <HW_TS_Start+0xfc>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3308      	adds	r3, #8
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	8a7b      	ldrh	r3, [r7, #18]
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	1ac9      	subs	r1, r1, r3
 8003658:	480c      	ldr	r0, [pc, #48]	@ (800368c <HW_TS_Start+0xfc>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4403      	add	r3, r0
 8003664:	3308      	adds	r3, #8
 8003666:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003668:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <HW_TS_Start+0x100>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	22ff      	movs	r2, #255	@ 0xff
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003670:	2003      	movs	r0, #3
 8003672:	f001 fcb0 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003682:	bf00      	nop
}
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20001594 	.word	0x20001594
 8003690:	20001710 	.word	0x20001710
 8003694:	20001624 	.word	0x20001624
 8003698:	20001625 	.word	0x20001625

0800369c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	460b      	mov	r3, r1
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4798      	blx	r3

  return;
 80036ae:	bf00      	nop
}
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	4603      	mov	r3, r0
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	4613      	mov	r3, r2
 80036c8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10e      	bne.n	80036f6 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80036d8:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HW_UART_Transmit_DMA+0x80>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80036de:	4b17      	ldr	r3, [pc, #92]	@ (800373c <HW_UART_Transmit_DMA+0x84>)
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HW_UART_Transmit_DMA+0x88>)
 80036e2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80036e4:	89bb      	ldrh	r3, [r7, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	4814      	ldr	r0, [pc, #80]	@ (800373c <HW_UART_Transmit_DMA+0x84>)
 80036ec:	f007 fcd0 	bl	800b090 <HAL_UART_Transmit_DMA>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]
            break;
 80036f4:	e000      	b.n	80036f8 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80036f6:	bf00      	nop
    }

    switch (hal_status)
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d816      	bhi.n	800372c <HW_UART_Transmit_DMA+0x74>
 80036fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <HW_UART_Transmit_DMA+0x4c>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	0800371b 	.word	0x0800371b
 800370c:	08003721 	.word	0x08003721
 8003710:	08003727 	.word	0x08003727
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003714:	2300      	movs	r3, #0
 8003716:	75bb      	strb	r3, [r7, #22]
            break;
 8003718:	e009      	b.n	800372e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800371a:	2301      	movs	r3, #1
 800371c:	75bb      	strb	r3, [r7, #22]
            break;
 800371e:	e006      	b.n	800372e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003720:	2302      	movs	r3, #2
 8003722:	75bb      	strb	r3, [r7, #22]
            break;
 8003724:	e003      	b.n	800372e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003726:	2303      	movs	r3, #3
 8003728:	75bb      	strb	r3, [r7, #22]
            break;
 800372a:	e000      	b.n	800372e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800372c:	bf00      	nop
    }

    return hw_status;
 800372e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20001634 	.word	0x20001634
 800373c:	20001830 	.word	0x20001830
 8003740:	40013800 	.word	0x40013800

08003744 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_UART_TxCpltCallback+0x34>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003758:	4b08      	ldr	r3, [pc, #32]	@ (800377c <HAL_UART_TxCpltCallback+0x38>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_UART_TxCpltCallback+0x38>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4798      	blx	r3
            }
            break;
 8003766:	e001      	b.n	800376c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800376c:	bf00      	nop
    }

    return;
 800376e:	bf00      	nop
}
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40013800 	.word	0x40013800
 800377c:	20001634 	.word	0x20001634

08003780 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0

	tsSystem.bPowerOnFlag = false;
 8003784:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <Kernel_Init+0x130>)
 8003786:	2200      	movs	r2, #0
 8003788:	715a      	strb	r2, [r3, #5]
	HAL_Delay(250);
 800378a:	20fa      	movs	r0, #250	@ 0xfa
 800378c:	f7ff f8ac 	bl	80028e8 <HAL_Delay>
	ENABLE_PWR;
 8003790:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003798:	619a      	str	r2, [r3, #24]

	tsSystem.ON = true;
 800379a:	4b45      	ldr	r3, [pc, #276]	@ (80038b0 <Kernel_Init+0x130>)
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]

	SET_RGB_COLOR(GREEN);
 80037a0:	2201      	movs	r2, #1
 80037a2:	2110      	movs	r1, #16
 80037a4:	4843      	ldr	r0, [pc, #268]	@ (80038b4 <Kernel_Init+0x134>)
 80037a6:	f002 f809 	bl	80057bc <HAL_GPIO_WritePin>
 80037aa:	2200      	movs	r2, #0
 80037ac:	2102      	movs	r1, #2
 80037ae:	4842      	ldr	r0, [pc, #264]	@ (80038b8 <Kernel_Init+0x138>)
 80037b0:	f002 f804 	bl	80057bc <HAL_GPIO_WritePin>
 80037b4:	2201      	movs	r2, #1
 80037b6:	2101      	movs	r1, #1
 80037b8:	483f      	ldr	r0, [pc, #252]	@ (80038b8 <Kernel_Init+0x138>)
 80037ba:	f001 ffff 	bl	80057bc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80037be:	20fa      	movs	r0, #250	@ 0xfa
 80037c0:	f7ff f892 	bl	80028e8 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 80037c4:	2201      	movs	r2, #1
 80037c6:	2110      	movs	r1, #16
 80037c8:	483a      	ldr	r0, [pc, #232]	@ (80038b4 <Kernel_Init+0x134>)
 80037ca:	f001 fff7 	bl	80057bc <HAL_GPIO_WritePin>
 80037ce:	2201      	movs	r2, #1
 80037d0:	2102      	movs	r1, #2
 80037d2:	4839      	ldr	r0, [pc, #228]	@ (80038b8 <Kernel_Init+0x138>)
 80037d4:	f001 fff2 	bl	80057bc <HAL_GPIO_WritePin>
 80037d8:	2201      	movs	r2, #1
 80037da:	2101      	movs	r1, #1
 80037dc:	4836      	ldr	r0, [pc, #216]	@ (80038b8 <Kernel_Init+0x138>)
 80037de:	f001 ffed 	bl	80057bc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80037e2:	20fa      	movs	r0, #250	@ 0xfa
 80037e4:	f7ff f880 	bl	80028e8 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 80037e8:	2201      	movs	r2, #1
 80037ea:	2110      	movs	r1, #16
 80037ec:	4831      	ldr	r0, [pc, #196]	@ (80038b4 <Kernel_Init+0x134>)
 80037ee:	f001 ffe5 	bl	80057bc <HAL_GPIO_WritePin>
 80037f2:	2200      	movs	r2, #0
 80037f4:	2102      	movs	r1, #2
 80037f6:	4830      	ldr	r0, [pc, #192]	@ (80038b8 <Kernel_Init+0x138>)
 80037f8:	f001 ffe0 	bl	80057bc <HAL_GPIO_WritePin>
 80037fc:	2201      	movs	r2, #1
 80037fe:	2101      	movs	r1, #1
 8003800:	482d      	ldr	r0, [pc, #180]	@ (80038b8 <Kernel_Init+0x138>)
 8003802:	f001 ffdb 	bl	80057bc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003806:	20fa      	movs	r0, #250	@ 0xfa
 8003808:	f7ff f86e 	bl	80028e8 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 800380c:	2201      	movs	r2, #1
 800380e:	2110      	movs	r1, #16
 8003810:	4828      	ldr	r0, [pc, #160]	@ (80038b4 <Kernel_Init+0x134>)
 8003812:	f001 ffd3 	bl	80057bc <HAL_GPIO_WritePin>
 8003816:	2201      	movs	r2, #1
 8003818:	2102      	movs	r1, #2
 800381a:	4827      	ldr	r0, [pc, #156]	@ (80038b8 <Kernel_Init+0x138>)
 800381c:	f001 ffce 	bl	80057bc <HAL_GPIO_WritePin>
 8003820:	2201      	movs	r2, #1
 8003822:	2101      	movs	r1, #1
 8003824:	4824      	ldr	r0, [pc, #144]	@ (80038b8 <Kernel_Init+0x138>)
 8003826:	f001 ffc9 	bl	80057bc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800382a:	20fa      	movs	r0, #250	@ 0xfa
 800382c:	f7ff f85c 	bl	80028e8 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 8003830:	2201      	movs	r2, #1
 8003832:	2110      	movs	r1, #16
 8003834:	481f      	ldr	r0, [pc, #124]	@ (80038b4 <Kernel_Init+0x134>)
 8003836:	f001 ffc1 	bl	80057bc <HAL_GPIO_WritePin>
 800383a:	2200      	movs	r2, #0
 800383c:	2102      	movs	r1, #2
 800383e:	481e      	ldr	r0, [pc, #120]	@ (80038b8 <Kernel_Init+0x138>)
 8003840:	f001 ffbc 	bl	80057bc <HAL_GPIO_WritePin>
 8003844:	2201      	movs	r2, #1
 8003846:	2101      	movs	r1, #1
 8003848:	481b      	ldr	r0, [pc, #108]	@ (80038b8 <Kernel_Init+0x138>)
 800384a:	f001 ffb7 	bl	80057bc <HAL_GPIO_WritePin>

	tsCmd.MODE		= Start;
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <Kernel_Init+0x13c>)
 8003850:	2201      	movs	r2, #1
 8003852:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <Kernel_Init+0x13c>)
 8003856:	2201      	movs	r2, #1
 8003858:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 800385a:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <Kernel_Init+0x13c>)
 800385c:	2201      	movs	r2, #1
 800385e:	759a      	strb	r2, [r3, #22]

	tsCmd.TMR 		= true;
 8003860:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <Kernel_Init+0x13c>)
 8003862:	2201      	movs	r2, #1
 8003864:	761a      	strb	r2, [r3, #24]
	tsCmd.TMR_N50 	= true;
 8003866:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <Kernel_Init+0x13c>)
 8003868:	2201      	movs	r2, #1
 800386a:	765a      	strb	r2, [r3, #25]
	tsCmd.TMR_HPF	= true;
 800386c:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <Kernel_Init+0x13c>)
 800386e:	2201      	movs	r2, #1
 8003870:	769a      	strb	r2, [r3, #26]

	tsCmd.EMG		= true;
 8003872:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <Kernel_Init+0x13c>)
 8003874:	2201      	movs	r2, #1
 8003876:	76da      	strb	r2, [r3, #27]
	tsCmd.EMG_N50	= true;
 8003878:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <Kernel_Init+0x13c>)
 800387a:	2201      	movs	r2, #1
 800387c:	771a      	strb	r2, [r3, #28]
	tsCmd.EMG_HPF	= true;
 800387e:	4b0f      	ldr	r3, [pc, #60]	@ (80038bc <Kernel_Init+0x13c>)
 8003880:	2201      	movs	r2, #1
 8003882:	775a      	strb	r2, [r3, #29]


	DIAG ("-----------------------------------------\r\n");
 8003884:	480e      	ldr	r0, [pc, #56]	@ (80038c0 <Kernel_Init+0x140>)
 8003886:	f7ff f8bb 	bl	8002a00 <DIAG>
	HAL_Delay(1);
 800388a:	2001      	movs	r0, #1
 800388c:	f7ff f82c 	bl	80028e8 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003890:	490c      	ldr	r1, [pc, #48]	@ (80038c4 <Kernel_Init+0x144>)
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <Kernel_Init+0x148>)
 8003894:	f7ff f8b4 	bl	8002a00 <DIAG>
	HAL_Delay(500);
 8003898:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800389c:	f7ff f824 	bl	80028e8 <HAL_Delay>

	// Wait until USB being recognised by the PC.


	tsBle.Connected	= false;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <Kernel_Init+0x14c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
	tsSystem.Power	= true;
 80038a6:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <Kernel_Init+0x130>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]

}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	2000165c 	.word	0x2000165c
 80038b4:	48001000 	.word	0x48001000
 80038b8:	48000400 	.word	0x48000400
 80038bc:	2000163c 	.word	0x2000163c
 80038c0:	08018a24 	.word	0x08018a24
 80038c4:	08018a50 	.word	0x08018a50
 80038c8:	08018a64 	.word	0x08018a64
 80038cc:	200019e0 	.word	0x200019e0

080038d0 <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 80038d4:	4bb0      	ldr	r3, [pc, #704]	@ (8003b98 <Main_Process+0x2c8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d80f      	bhi.n	80038fc <Main_Process+0x2c>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <Main_Process+0x14>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003905 	.word	0x08003905
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003933 	.word	0x08003933
 80038f4:	08003ac3 	.word	0x08003ac3
 80038f8:	08003b35 	.word	0x08003b35
	{

	default:


		eSYS_STATE = SYS_STATE_INIT;
 80038fc:	4ba6      	ldr	r3, [pc, #664]	@ (8003b98 <Main_Process+0x2c8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
		break;
 8003902:	e146      	b.n	8003b92 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 8003904:	f7fd fa64 	bl	8000dd0 <AFE_Init>
		IMU_Init( &hi2c1 );
 8003908:	48a4      	ldr	r0, [pc, #656]	@ (8003b9c <Main_Process+0x2cc>)
 800390a:	f7fe f953 	bl	8001bb4 <IMU_Init>
		BLE_Init();
 800390e:	f7fd fec3 	bl	8001698 <BLE_Init>
		Debug_Init();
 8003912:	f7ff f84d 	bl	80029b0 <Debug_Init>
		Timer_Init();
 8003916:	f001 f89f 	bl	8004a58 <Timer_Init>
		BLE_Init();
 800391a:	f7fd febd 	bl	8001698 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 800391e:	48a0      	ldr	r0, [pc, #640]	@ (8003ba0 <Main_Process+0x2d0>)
 8003920:	f7ff f86e 	bl	8002a00 <DIAG>
		HAL_Delay(1);
 8003924:	2001      	movs	r0, #1
 8003926:	f7fe ffdf 	bl	80028e8 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 800392a:	4b9b      	ldr	r3, [pc, #620]	@ (8003b98 <Main_Process+0x2c8>)
 800392c:	2203      	movs	r2, #3
 800392e:	701a      	strb	r2, [r3, #0]
		break;
 8003930:	e12f      	b.n	8003b92 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 8003932:	4b9c      	ldr	r3, [pc, #624]	@ (8003ba4 <Main_Process+0x2d4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80b0 	beq.w	8003a9c <Main_Process+0x1cc>
		{

			AFE_Control();
 800393c:	f7fd fa6c 	bl	8000e18 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
	        #endif

			Debug_Control();
 8003940:	f7ff f842 	bl	80029c8 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 8003944:	f7fd fec0 	bl	80016c8 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 8003948:	4b97      	ldr	r3, [pc, #604]	@ (8003ba8 <Main_Process+0x2d8>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d112      	bne.n	8003978 <Main_Process+0xa8>
			{
				SET_RGB_COLOR(GREEN);
 8003952:	2201      	movs	r2, #1
 8003954:	2110      	movs	r1, #16
 8003956:	4895      	ldr	r0, [pc, #596]	@ (8003bac <Main_Process+0x2dc>)
 8003958:	f001 ff30 	bl	80057bc <HAL_GPIO_WritePin>
 800395c:	2200      	movs	r2, #0
 800395e:	2102      	movs	r1, #2
 8003960:	4893      	ldr	r0, [pc, #588]	@ (8003bb0 <Main_Process+0x2e0>)
 8003962:	f001 ff2b 	bl	80057bc <HAL_GPIO_WritePin>
 8003966:	2201      	movs	r2, #1
 8003968:	2101      	movs	r1, #1
 800396a:	4891      	ldr	r0, [pc, #580]	@ (8003bb0 <Main_Process+0x2e0>)
 800396c:	f001 ff26 	bl	80057bc <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 8003970:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <Main_Process+0x2d8>)
 8003972:	2200      	movs	r2, #0
 8003974:	715a      	strb	r2, [r3, #5]
 8003976:	e0a0      	b.n	8003aba <Main_Process+0x1ea>
			}
			else
			{
				if (tsTimer.u8TimeFlag)
 8003978:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb4 <Main_Process+0x2e4>)
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 809b 	beq.w	8003aba <Main_Process+0x1ea>
				{
					tsTimer.u8TimeFlag = false;
 8003984:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb4 <Main_Process+0x2e4>)
 8003986:	2200      	movs	r2, #0
 8003988:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 800398a:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb8 <Main_Process+0x2e8>)
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	2b07      	cmp	r3, #7
 8003990:	d812      	bhi.n	80039b8 <Main_Process+0xe8>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <Main_Process+0xc8>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039df 	.word	0x080039df
 800399c:	08003a77 	.word	0x08003a77
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	08003a2b 	.word	0x08003a2b
 80039a8:	08003a05 	.word	0x08003a05
 80039ac:	080039b9 	.word	0x080039b9
 80039b0:	080039b9 	.word	0x080039b9
 80039b4:	08003a51 	.word	0x08003a51
					{
					default:
						SET_RGB_COLOR(OFF);
 80039b8:	2201      	movs	r2, #1
 80039ba:	2110      	movs	r1, #16
 80039bc:	487b      	ldr	r0, [pc, #492]	@ (8003bac <Main_Process+0x2dc>)
 80039be:	f001 fefd 	bl	80057bc <HAL_GPIO_WritePin>
 80039c2:	2201      	movs	r2, #1
 80039c4:	2102      	movs	r1, #2
 80039c6:	487a      	ldr	r0, [pc, #488]	@ (8003bb0 <Main_Process+0x2e0>)
 80039c8:	f001 fef8 	bl	80057bc <HAL_GPIO_WritePin>
 80039cc:	2201      	movs	r2, #1
 80039ce:	2101      	movs	r1, #1
 80039d0:	4877      	ldr	r0, [pc, #476]	@ (8003bb0 <Main_Process+0x2e0>)
 80039d2:	f001 fef3 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80039d6:	4b78      	ldr	r3, [pc, #480]	@ (8003bb8 <Main_Process+0x2e8>)
 80039d8:	2204      	movs	r2, #4
 80039da:	711a      	strb	r2, [r3, #4]
						break;
 80039dc:	e06d      	b.n	8003aba <Main_Process+0x1ea>

					case OFF:
						SET_RGB_COLOR(OFF);
 80039de:	2201      	movs	r2, #1
 80039e0:	2110      	movs	r1, #16
 80039e2:	4872      	ldr	r0, [pc, #456]	@ (8003bac <Main_Process+0x2dc>)
 80039e4:	f001 feea 	bl	80057bc <HAL_GPIO_WritePin>
 80039e8:	2201      	movs	r2, #1
 80039ea:	2102      	movs	r1, #2
 80039ec:	4870      	ldr	r0, [pc, #448]	@ (8003bb0 <Main_Process+0x2e0>)
 80039ee:	f001 fee5 	bl	80057bc <HAL_GPIO_WritePin>
 80039f2:	2201      	movs	r2, #1
 80039f4:	2101      	movs	r1, #1
 80039f6:	486e      	ldr	r0, [pc, #440]	@ (8003bb0 <Main_Process+0x2e0>)
 80039f8:	f001 fee0 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80039fc:	4b6e      	ldr	r3, [pc, #440]	@ (8003bb8 <Main_Process+0x2e8>)
 80039fe:	2204      	movs	r2, #4
 8003a00:	711a      	strb	r2, [r3, #4]
						break;
 8003a02:	e05a      	b.n	8003aba <Main_Process+0x1ea>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 8003a04:	2201      	movs	r2, #1
 8003a06:	2110      	movs	r1, #16
 8003a08:	4868      	ldr	r0, [pc, #416]	@ (8003bac <Main_Process+0x2dc>)
 8003a0a:	f001 fed7 	bl	80057bc <HAL_GPIO_WritePin>
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2102      	movs	r1, #2
 8003a12:	4867      	ldr	r0, [pc, #412]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a14:	f001 fed2 	bl	80057bc <HAL_GPIO_WritePin>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4864      	ldr	r0, [pc, #400]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a1e:	f001 fecd 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 8003a22:	4b65      	ldr	r3, [pc, #404]	@ (8003bb8 <Main_Process+0x2e8>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	711a      	strb	r2, [r3, #4]
						break;
 8003a28:	e047      	b.n	8003aba <Main_Process+0x1ea>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2110      	movs	r1, #16
 8003a2e:	485f      	ldr	r0, [pc, #380]	@ (8003bac <Main_Process+0x2dc>)
 8003a30:	f001 fec4 	bl	80057bc <HAL_GPIO_WritePin>
 8003a34:	2201      	movs	r2, #1
 8003a36:	2102      	movs	r1, #2
 8003a38:	485d      	ldr	r0, [pc, #372]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a3a:	f001 febf 	bl	80057bc <HAL_GPIO_WritePin>
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2101      	movs	r1, #1
 8003a42:	485b      	ldr	r0, [pc, #364]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a44:	f001 feba 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 8003a48:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb8 <Main_Process+0x2e8>)
 8003a4a:	2207      	movs	r2, #7
 8003a4c:	711a      	strb	r2, [r3, #4]
						break;
 8003a4e:	e034      	b.n	8003aba <Main_Process+0x1ea>

					case WHITE:
						SET_RGB_COLOR(OFF);
 8003a50:	2201      	movs	r2, #1
 8003a52:	2110      	movs	r1, #16
 8003a54:	4855      	ldr	r0, [pc, #340]	@ (8003bac <Main_Process+0x2dc>)
 8003a56:	f001 feb1 	bl	80057bc <HAL_GPIO_WritePin>
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4854      	ldr	r0, [pc, #336]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a60:	f001 feac 	bl	80057bc <HAL_GPIO_WritePin>
 8003a64:	2201      	movs	r2, #1
 8003a66:	2101      	movs	r1, #1
 8003a68:	4851      	ldr	r0, [pc, #324]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a6a:	f001 fea7 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 8003a6e:	4b52      	ldr	r3, [pc, #328]	@ (8003bb8 <Main_Process+0x2e8>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	711a      	strb	r2, [r3, #4]
						break;
 8003a74:	e021      	b.n	8003aba <Main_Process+0x1ea>

					case RED:
						SET_RGB_COLOR(OFF);
 8003a76:	2201      	movs	r2, #1
 8003a78:	2110      	movs	r1, #16
 8003a7a:	484c      	ldr	r0, [pc, #304]	@ (8003bac <Main_Process+0x2dc>)
 8003a7c:	f001 fe9e 	bl	80057bc <HAL_GPIO_WritePin>
 8003a80:	2201      	movs	r2, #1
 8003a82:	2102      	movs	r1, #2
 8003a84:	484a      	ldr	r0, [pc, #296]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a86:	f001 fe99 	bl	80057bc <HAL_GPIO_WritePin>
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4848      	ldr	r0, [pc, #288]	@ (8003bb0 <Main_Process+0x2e0>)
 8003a90:	f001 fe94 	bl	80057bc <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003a94:	4b48      	ldr	r3, [pc, #288]	@ (8003bb8 <Main_Process+0x2e8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	711a      	strb	r2, [r3, #4]
						break;
 8003a9a:	e00e      	b.n	8003aba <Main_Process+0x1ea>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	4842      	ldr	r0, [pc, #264]	@ (8003bac <Main_Process+0x2dc>)
 8003aa2:	f001 fe8b 	bl	80057bc <HAL_GPIO_WritePin>
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4841      	ldr	r0, [pc, #260]	@ (8003bb0 <Main_Process+0x2e0>)
 8003aac:	f001 fe86 	bl	80057bc <HAL_GPIO_WritePin>
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	483e      	ldr	r0, [pc, #248]	@ (8003bb0 <Main_Process+0x2e0>)
 8003ab6:	f001 fe81 	bl	80057bc <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <Main_Process+0x2c8>)
 8003abc:	2204      	movs	r2, #4
 8003abe:	701a      	strb	r2, [r3, #0]
		break;
 8003ac0:	e067      	b.n	8003b92 <Main_Process+0x2c2>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bbc <Main_Process+0x2ec>)
 8003ac4:	7d5b      	ldrb	r3, [r3, #21]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <Main_Process+0x208>
		{
			tsCmd.MODE = Idle;
 8003aca:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <Main_Process+0x2ec>)
 8003acc:	22ff      	movs	r2, #255	@ 0xff
 8003ace:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fd f914 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003ad8:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <Main_Process+0x2ec>)
 8003ada:	7d5b      	ldrb	r3, [r3, #21]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <Main_Process+0x21e>
		{
			tsCmd.MODE = Idle;
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <Main_Process+0x2ec>)
 8003ae2:	22ff      	movs	r2, #255	@ 0xff
 8003ae4:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7fd f909 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 8003aee:	4b33      	ldr	r3, [pc, #204]	@ (8003bbc <Main_Process+0x2ec>)
 8003af0:	7d5b      	ldrb	r3, [r3, #21]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d104      	bne.n	8003b00 <Main_Process+0x230>
		{
			tsCmd.MODE = Idle;
 8003af6:	4b31      	ldr	r3, [pc, #196]	@ (8003bbc <Main_Process+0x2ec>)
 8003af8:	22ff      	movs	r2, #255	@ 0xff
 8003afa:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 8003afc:	f000 f867 	bl	8003bce <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003b00:	4b2e      	ldr	r3, [pc, #184]	@ (8003bbc <Main_Process+0x2ec>)
 8003b02:	7d9b      	ldrb	r3, [r3, #22]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d104      	bne.n	8003b12 <Main_Process+0x242>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003b08:	f000 f85a 	bl	8003bc0 <Print_Help>
			tsCmd.HLP = false;
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <Main_Process+0x2ec>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	759a      	strb	r2, [r3, #22]
		}
					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 8003b12:	4b25      	ldr	r3, [pc, #148]	@ (8003ba8 <Main_Process+0x2d8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <Main_Process+0x25c>
						{
							 if ( tsBle.App.AfeNotification )
 8003b1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <Main_Process+0x2d8>)
 8003b1e:	7a1b      	ldrb	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <Main_Process+0x25c>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 8003b24:	2100      	movs	r1, #0
 8003b26:	2020      	movs	r0, #32
 8003b28:	f011 fcda 	bl	80154e0 <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_OBSERVE_POWER;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <Main_Process+0x2c8>)
 8003b2e:	2205      	movs	r2, #5
 8003b30:	701a      	strb	r2, [r3, #0]
		break;
 8003b32:	e02e      	b.n	8003b92 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_OBSERVE_POWER:

		if (tsSystem.ON)
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <Main_Process+0x2d4>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d026      	beq.n	8003b8a <Main_Process+0x2ba>
		{
			if ( tsSystem.OFF)
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <Main_Process+0x2d4>)
 8003b3e:	789b      	ldrb	r3, [r3, #2]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <Main_Process+0x2a4>
			{
				SET_RGB_COLOR(RED);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2110      	movs	r1, #16
 8003b48:	4818      	ldr	r0, [pc, #96]	@ (8003bac <Main_Process+0x2dc>)
 8003b4a:	f001 fe37 	bl	80057bc <HAL_GPIO_WritePin>
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2102      	movs	r1, #2
 8003b52:	4817      	ldr	r0, [pc, #92]	@ (8003bb0 <Main_Process+0x2e0>)
 8003b54:	f001 fe32 	bl	80057bc <HAL_GPIO_WritePin>
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4814      	ldr	r0, [pc, #80]	@ (8003bb0 <Main_Process+0x2e0>)
 8003b5e:	f001 fe2d 	bl	80057bc <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8003b62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b66:	f7fe febf 	bl	80028e8 <HAL_Delay>
				DISABLE_PWR;
 8003b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b72:	619a      	str	r2, [r3, #24]
			}

			if ( HAL_GPIO_ReadPin( GPIOA, PWR_SW_Pin ) == true )
 8003b74:	2120      	movs	r1, #32
 8003b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b7a:	f001 fe07 	bl	800578c <HAL_GPIO_ReadPin>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <Main_Process+0x2ba>
			{
				tsSystem.bPowerOnFlag = true;
 8003b84:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <Main_Process+0x2d4>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	715a      	strb	r2, [r3, #5]
			}
		}

		eSYS_STATE = SYS_STATE_NORMAL;
 8003b8a:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <Main_Process+0x2c8>)
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	701a      	strb	r2, [r3, #0]
		break;
 8003b90:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20001638 	.word	0x20001638
 8003b9c:	2000166c 	.word	0x2000166c
 8003ba0:	08018a78 	.word	0x08018a78
 8003ba4:	2000165c 	.word	0x2000165c
 8003ba8:	200019e0 	.word	0x200019e0
 8003bac:	48001000 	.word	0x48001000
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	20001928 	.word	0x20001928
 8003bb8:	20001664 	.word	0x20001664
 8003bbc:	2000163c 	.word	0x2000163c

08003bc0 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_HSI48_Enable>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_HSI48_IsReady>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d101      	bne.n	8003c16 <LL_RCC_HSI48_IsReady+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_RCC_HSI48_IsReady+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_LSE_SetDriveCapability>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f023 0218 	bic.w	r2, r3, #24
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_AHB1_GRP1_EnableClock>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_AHB2_GRP1_EnableClock>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cbe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	3220      	adds	r2, #32
 8003cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf8:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <LL_HSEM_1StepLock+0x2c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d001      	beq.n	8003d02 <LL_HSEM_1StepLock+0x1e>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_HSEM_1StepLock+0x20>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	80000400 	.word	0x80000400

08003d14 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b09a      	sub	sp, #104	@ 0x68
 8003d18:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003d1a:	f107 0318 	add.w	r3, r7, #24
 8003d1e:	2250      	movs	r2, #80	@ 0x50
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f011 ff22 	bl	8015b6c <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003d28:	463b      	mov	r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	611a      	str	r2, [r3, #16]
 8003d36:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8003d38:	2105      	movs	r1, #5
 8003d3a:	4817      	ldr	r0, [pc, #92]	@ (8003d98 <PeriphUsbClock_Config+0x84>)
 8003d3c:	f7ff ffd2 	bl	8003ce4 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8003d40:	f7ff ff4c 	bl	8003bdc <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8003d44:	bf00      	nop
 8003d46:	f7ff ff5a 	bl	8003bfe <LL_RCC_HSI48_IsReady>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0fa      	beq.n	8003d46 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d54:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003d56:	2300      	movs	r3, #0
 8003d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003d5a:	f107 0318 	add.w	r3, r7, #24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 fab6 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8003d64:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003d68:	f7ff ffa3 	bl	8003cb2 <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8003d70:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003d74:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8003d76:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8003d7a:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8003d7c:	2322      	movs	r3, #34	@ 0x22
 8003d7e:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8003d84:	2320      	movs	r3, #32
 8003d86:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f005 fc16 	bl	80095bc <HAL_RCCEx_CRSConfig>

#endif

	return;
 8003d90:	bf00      	nop
}
 8003d92:	3768      	adds	r7, #104	@ 0x68
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	58001400 	.word	0x58001400

08003d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003da0:	f000 ff32 	bl	8004c08 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003da4:	f7fe faca 	bl	800233c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003da8:	f000 f824 	bl	8003df4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003dac:	f000 f88e 	bl	8003ecc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003db0:	f000 f8f0 	bl	8003f94 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8003db4:	f000 f902 	bl	8003fbc <MX_RF_Init>
  MX_GPIO_Init();
 8003db8:	f000 fa44 	bl	8004244 <MX_GPIO_Init>
  MX_DMA_Init();
 8003dbc:	f000 fa30 	bl	8004220 <MX_DMA_Init>
  MX_TIM2_Init();
 8003dc0:	f000 f9e0 	bl	8004184 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003dc4:	f000 f94c 	bl	8004060 <MX_SPI1_Init>
  MX_RTC_Init();
 8003dc8:	f000 f916 	bl	8003ff8 <MX_RTC_Init>
  MX_USB_Device_Init();
 8003dcc:	f010 fcc8 	bl	8014760 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003dd0:	f000 f89c 	bl	8003f0c <MX_I2C1_Init>
  MX_RNG_Init();
 8003dd4:	f000 f8fa 	bl	8003fcc <MX_RNG_Init>
  MX_TIM1_Init();
 8003dd8:	f000 f980 	bl	80040dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8003ddc:	f7ff fcd0 	bl	8003780 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003de0:	f7fe faba 	bl	8002358 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 8003de4:	f7ff ff96 	bl	8003d14 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003de8:	f7fe fda3 	bl	8002932 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8003dec:	f7ff fd70 	bl	80038d0 <Main_Process>
    MX_APPE_Process();
 8003df0:	bf00      	nop
 8003df2:	e7f9      	b.n	8003de8 <main+0x4c>

08003df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b09a      	sub	sp, #104	@ 0x68
 8003df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dfa:	f107 0320 	add.w	r3, r7, #32
 8003dfe:	2248      	movs	r2, #72	@ 0x48
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f011 feb2 	bl	8015b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	611a      	str	r2, [r3, #16]
 8003e16:	615a      	str	r2, [r3, #20]
 8003e18:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003e1a:	f003 ff23 	bl	8007c64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7ff feff 	bl	8003c22 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e24:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <SystemClock_Config+0xd4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e2c:	4a26      	ldr	r2, [pc, #152]	@ (8003ec8 <SystemClock_Config+0xd4>)
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <SystemClock_Config+0xd4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003e40:	2307      	movs	r3, #7
 8003e42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e54:	2340      	movs	r3, #64	@ 0x40
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003e60:	2310      	movs	r3, #16
 8003e62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e64:	2308      	movs	r3, #8
 8003e66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e6e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003e72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e7a:	f107 0320 	add.w	r3, r7, #32
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 fa7c 	bl	800837c <HAL_RCC_OscConfig>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e8a:	f000 fa9b 	bl	80043c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003e8e:	236f      	movs	r3, #111	@ 0x6f
 8003e90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e92:	2303      	movs	r3, #3
 8003e94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2103      	movs	r1, #3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 fdd8 	bl	8008a64 <HAL_RCC_ClockConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003eba:	f000 fa83 	bl	80043c4 <Error_Handler>
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3768      	adds	r7, #104	@ 0x68
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	58000400 	.word	0x58000400

08003ecc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b094      	sub	sp, #80	@ 0x50
 8003ed0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	2250      	movs	r2, #80	@ 0x50
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f011 fe47 	bl	8015b6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003ede:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003ee2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003ee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003eea:	2302      	movs	r3, #2
 8003eec:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003eee:	2310      	movs	r3, #16
 8003ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f005 f9eb 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003f00:	f000 fa60 	bl	80043c4 <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 8003f04:	bf00      	nop
 8003f06:	3750      	adds	r7, #80	@ 0x50
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f12:	4a1e      	ldr	r2, [pc, #120]	@ (8003f8c <MX_I2C1_Init+0x80>)
 8003f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00910B1C;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <MX_I2C1_Init+0x84>)
 8003f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f22:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f28:	4b17      	ldr	r3, [pc, #92]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f34:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f40:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f46:	4810      	ldr	r0, [pc, #64]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f48:	f001 fc8c 	bl	8005864 <HAL_I2C_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f52:	f000 fa37 	bl	80043c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f56:	2100      	movs	r1, #0
 8003f58:	480b      	ldr	r0, [pc, #44]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f5a:	f002 f851 	bl	8006000 <HAL_I2CEx_ConfigAnalogFilter>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003f64:	f000 fa2e 	bl	80043c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4807      	ldr	r0, [pc, #28]	@ (8003f88 <MX_I2C1_Init+0x7c>)
 8003f6c:	f002 f893 	bl	8006096 <HAL_I2CEx_ConfigDigitalFilter>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003f76:	f000 fa25 	bl	80043c4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003f7a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003f7e:	f002 f8d7 	bl	8006130 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000166c 	.word	0x2000166c
 8003f8c:	40005400 	.word	0x40005400
 8003f90:	00910b1c 	.word	0x00910b1c

08003f94 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003f98:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <MX_IPCC_Init+0x20>)
 8003f9a:	4a07      	ldr	r2, [pc, #28]	@ (8003fb8 <MX_IPCC_Init+0x24>)
 8003f9c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003f9e:	4805      	ldr	r0, [pc, #20]	@ (8003fb4 <MX_IPCC_Init+0x20>)
 8003fa0:	f002 f8d8 	bl	8006154 <HAL_IPCC_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003faa:	f000 fa0b 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200016c0 	.word	0x200016c0
 8003fb8:	58000c00 	.word	0x58000c00

08003fbc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003fd0:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <MX_RNG_Init+0x24>)
 8003fd2:	4a08      	ldr	r2, [pc, #32]	@ (8003ff4 <MX_RNG_Init+0x28>)
 8003fd4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <MX_RNG_Init+0x24>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003fdc:	4804      	ldr	r0, [pc, #16]	@ (8003ff0 <MX_RNG_Init+0x24>)
 8003fde:	f005 fc38 	bl	8009852 <HAL_RNG_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003fe8:	f000 f9ec 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200016fc 	.word	0x200016fc
 8003ff4:	58001000 	.word	0x58001000

08003ff8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <MX_RTC_Init+0x60>)
 8003ffe:	4a17      	ldr	r2, [pc, #92]	@ (800405c <MX_RTC_Init+0x64>)
 8004000:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004002:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <MX_RTC_Init+0x60>)
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004008:	4b13      	ldr	r3, [pc, #76]	@ (8004058 <MX_RTC_Init+0x60>)
 800400a:	220f      	movs	r2, #15
 800400c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800400e:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <MX_RTC_Init+0x60>)
 8004010:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004014:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004016:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <MX_RTC_Init+0x60>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800401c:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <MX_RTC_Init+0x60>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <MX_RTC_Init+0x60>)
 8004024:	2200      	movs	r2, #0
 8004026:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004028:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <MX_RTC_Init+0x60>)
 800402a:	2200      	movs	r2, #0
 800402c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800402e:	480a      	ldr	r0, [pc, #40]	@ (8004058 <MX_RTC_Init+0x60>)
 8004030:	f005 fcae 	bl	8009990 <HAL_RTC_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800403a:	f000 f9c3 	bl	80043c4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	4805      	ldr	r0, [pc, #20]	@ (8004058 <MX_RTC_Init+0x60>)
 8004044:	f005 fda4 	bl	8009b90 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800404e:	f000 f9b9 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20001710 	.word	0x20001710
 800405c:	40002800 	.word	0x40002800

08004060 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004064:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <MX_SPI1_Init+0x74>)
 8004066:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <MX_SPI1_Init+0x78>)
 8004068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <MX_SPI1_Init+0x74>)
 800406c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004072:	4b18      	ldr	r3, [pc, #96]	@ (80040d4 <MX_SPI1_Init+0x74>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004078:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <MX_SPI1_Init+0x74>)
 800407a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800407e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_SPI1_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_SPI1_Init+0x74>)
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <MX_SPI1_Init+0x74>)
 800408e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004092:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <MX_SPI1_Init+0x74>)
 8004096:	2208      	movs	r2, #8
 8004098:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <MX_SPI1_Init+0x74>)
 800409c:	2200      	movs	r2, #0
 800409e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040ae:	2207      	movs	r2, #7
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040ba:	2208      	movs	r2, #8
 80040bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <MX_SPI1_Init+0x74>)
 80040c0:	f005 fe22 	bl	8009d08 <HAL_SPI_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80040ca:	f000 f97b 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20001734 	.word	0x20001734
 80040d8:	40013000 	.word	0x40013000

080040dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040fa:	4b20      	ldr	r3, [pc, #128]	@ (800417c <MX_TIM1_Init+0xa0>)
 80040fc:	4a20      	ldr	r2, [pc, #128]	@ (8004180 <MX_TIM1_Init+0xa4>)
 80040fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3199;
 8004100:	4b1e      	ldr	r3, [pc, #120]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004102:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8004106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004108:	4b1c      	ldr	r3, [pc, #112]	@ (800417c <MX_TIM1_Init+0xa0>)
 800410a:	2210      	movs	r2, #16
 800410c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800410e:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004110:	2209      	movs	r2, #9
 8004112:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004114:	4b19      	ldr	r3, [pc, #100]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800411a:	4b18      	ldr	r3, [pc, #96]	@ (800417c <MX_TIM1_Init+0xa0>)
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004120:	4b16      	ldr	r3, [pc, #88]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004126:	4815      	ldr	r0, [pc, #84]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004128:	f006 fb8a 	bl	800a840 <HAL_TIM_Base_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004132:	f000 f947 	bl	80043c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800413a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	4619      	mov	r1, r3
 8004142:	480e      	ldr	r0, [pc, #56]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004144:	f006 fd29 	bl	800ab9a <HAL_TIM_ConfigClockSource>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800414e:	f000 f939 	bl	80043c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4806      	ldr	r0, [pc, #24]	@ (800417c <MX_TIM1_Init+0xa0>)
 8004164:	f006 ff16 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800416e:	f000 f929 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004172:	bf00      	nop
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20001798 	.word	0x20001798
 8004180:	40012c00 	.word	0x40012c00

08004184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800418a:	f107 0310 	add.w	r3, r7, #16
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_TIM2_Init+0x98>)
 80041a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80041aa:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <MX_TIM2_Init+0x98>)
 80041ac:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80041b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <MX_TIM2_Init+0x98>)
 80041b4:	2210      	movs	r2, #16
 80041b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <MX_TIM2_Init+0x98>)
 80041ba:	2264      	movs	r2, #100	@ 0x64
 80041bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041ca:	4814      	ldr	r0, [pc, #80]	@ (800421c <MX_TIM2_Init+0x98>)
 80041cc:	f006 fb38 	bl	800a840 <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80041d6:	f000 f8f5 	bl	80043c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	4619      	mov	r1, r3
 80041e6:	480d      	ldr	r0, [pc, #52]	@ (800421c <MX_TIM2_Init+0x98>)
 80041e8:	f006 fcd7 	bl	800ab9a <HAL_TIM_ConfigClockSource>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80041f2:	f000 f8e7 	bl	80043c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <MX_TIM2_Init+0x98>)
 8004204:	f006 fec6 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800420e:	f000 f8d9 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200017e4 	.word	0x200017e4

08004220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004224:	2004      	movs	r0, #4
 8004226:	f7ff fd12 	bl	8003c4e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800422a:	2001      	movs	r0, #1
 800422c:	f7ff fd0f 	bl	8003c4e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	200b      	movs	r0, #11
 8004236:	f000 feb4 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800423a:	200b      	movs	r0, #11
 800423c:	f000 fecb 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004258:	2004      	movs	r0, #4
 800425a:	f7ff fd11 	bl	8003c80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	2002      	movs	r0, #2
 8004260:	f7ff fd0e 	bl	8003c80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004264:	2001      	movs	r0, #1
 8004266:	f7ff fd0b 	bl	8003c80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800426a:	2010      	movs	r0, #16
 800426c:	f7ff fd08 	bl	8003c80 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8004270:	2201      	movs	r2, #1
 8004272:	2103      	movs	r1, #3
 8004274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004278:	f001 faa0 	bl	80057bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMU_CS_Pin|PWR_ON_Pin, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	f248 0140 	movw	r1, #32832	@ 0x8040
 8004282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004286:	f001 fa99 	bl	80057bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 800428a:	2200      	movs	r2, #0
 800428c:	2104      	movs	r1, #4
 800428e:	484b      	ldr	r0, [pc, #300]	@ (80043bc <MX_GPIO_Init+0x178>)
 8004290:	f001 fa94 	bl	80057bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8004294:	2201      	movs	r2, #1
 8004296:	2103      	movs	r1, #3
 8004298:	4848      	ldr	r0, [pc, #288]	@ (80043bc <MX_GPIO_Init+0x178>)
 800429a:	f001 fa8f 	bl	80057bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	2110      	movs	r1, #16
 80042a2:	4847      	ldr	r0, [pc, #284]	@ (80043c0 <MX_GPIO_Init+0x17c>)
 80042a4:	f001 fa8a 	bl	80057bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 80042a8:	2303      	movs	r3, #3
 80042aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042b0:	2301      	movs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042c0:	f001 f8f4 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80042c4:	2310      	movs	r3, #16
 80042c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80042cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ce:	2301      	movs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042da:	f001 f8e7 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_SW_Pin */
  GPIO_InitStruct.Pin = PWR_SW_Pin;
 80042de:	2320      	movs	r3, #32
 80042e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80042e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PWR_SW_GPIO_Port, &GPIO_InitStruct);
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042f4:	f001 f8da 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80042f8:	2340      	movs	r3, #64	@ 0x40
 80042fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	4619      	mov	r1, r3
 800430c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004310:	f001 f8cc 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 8004314:	2307      	movs	r3, #7
 8004316:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004318:	2301      	movs	r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004324:	1d3b      	adds	r3, r7, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4824      	ldr	r0, [pc, #144]	@ (80043bc <MX_GPIO_Init+0x178>)
 800432a:	f001 f8bf 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 800432e:	2310      	movs	r3, #16
 8004330:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004332:	2301      	movs	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	4619      	mov	r1, r3
 8004342:	481f      	ldr	r0, [pc, #124]	@ (80043c0 <MX_GPIO_Init+0x17c>)
 8004344:	f001 f8b2 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_ON_Pin */
  GPIO_InitStruct.Pin = PWR_ON_Pin;
 8004348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434e:	2301      	movs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004352:	2302      	movs	r3, #2
 8004354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PWR_ON_GPIO_Port, &GPIO_InitStruct);
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	4619      	mov	r1, r3
 800435e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004362:	f001 f8a3 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 8004366:	2340      	movs	r3, #64	@ 0x40
 8004368:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800436e:	2301      	movs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4811      	ldr	r0, [pc, #68]	@ (80043bc <MX_GPIO_Init+0x178>)
 8004378:	f001 f898 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004380:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	4619      	mov	r1, r3
 800438e:	480b      	ldr	r0, [pc, #44]	@ (80043bc <MX_GPIO_Init+0x178>)
 8004390:	f001 f88c 	bl	80054ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004394:	2200      	movs	r2, #0
 8004396:	2100      	movs	r1, #0
 8004398:	200a      	movs	r0, #10
 800439a:	f000 fe02 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800439e:	200a      	movs	r0, #10
 80043a0:	f000 fe19 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	2017      	movs	r0, #23
 80043aa:	f000 fdfa 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043ae:	2017      	movs	r0, #23
 80043b0:	f000 fe11 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80043b4:	bf00      	nop
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	48000400 	.word	0x48000400
 80043c0:	48001000 	.word	0x48001000

080043c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043c8:	b672      	cpsid	i
}
 80043ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2110      	movs	r1, #16
 80043d0:	4806      	ldr	r0, [pc, #24]	@ (80043ec <Error_Handler+0x28>)
 80043d2:	f001 f9f3 	bl	80057bc <HAL_GPIO_WritePin>
 80043d6:	2201      	movs	r2, #1
 80043d8:	2102      	movs	r1, #2
 80043da:	4805      	ldr	r0, [pc, #20]	@ (80043f0 <Error_Handler+0x2c>)
 80043dc:	f001 f9ee 	bl	80057bc <HAL_GPIO_WritePin>
 80043e0:	2201      	movs	r2, #1
 80043e2:	2101      	movs	r1, #1
 80043e4:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <Error_Handler+0x2c>)
 80043e6:	f001 f9e9 	bl	80057bc <HAL_GPIO_WritePin>
 80043ea:	e7ef      	b.n	80043cc <Error_Handler+0x8>
 80043ec:	48001000 	.word	0x48001000
 80043f0:	48000400 	.word	0x48000400

080043f4 <LL_RCC_EnableRTC>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_AHB2_GRP1_EnableClock>:
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4313      	orrs	r3, r2
 800442c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_AHB3_GRP1_EnableClock>:
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4313      	orrs	r3, r2
 800445e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800446c:	68fb      	ldr	r3, [r7, #12]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_APB1_GRP1_EnableClock>:
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004486:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004488:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004496:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4013      	ands	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80044e2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80044e6:	f7ff ffaf 	bl	8004448 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	2005      	movs	r0, #5
 80044f0:	f000 fd57 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80044f4:	2005      	movs	r0, #5
 80044f6:	f000 fd6e 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	202e      	movs	r0, #46	@ 0x2e
 8004500:	f000 fd4f 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004504:	202e      	movs	r0, #46	@ 0x2e
 8004506:	f000 fd66 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b09c      	sub	sp, #112	@ 0x70
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	2250      	movs	r2, #80	@ 0x50
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f011 fb1b 	bl	8015b6c <memset>
  if(hi2c->Instance==I2C1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a17      	ldr	r2, [pc, #92]	@ (8004598 <HAL_I2C_MspInit+0x88>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d126      	bne.n	800458e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004540:	2304      	movs	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004544:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454a:	f107 030c 	add.w	r3, r7, #12
 800454e:	4618      	mov	r0, r3
 8004550:	f004 febe 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800455a:	f7ff ff33 	bl	80043c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455e:	2002      	movs	r0, #2
 8004560:	f7ff ff59 	bl	8004416 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004564:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004568:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800456a:	2312      	movs	r3, #18
 800456c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004572:	2300      	movs	r3, #0
 8004574:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004576:	2304      	movs	r3, #4
 8004578:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800457e:	4619      	mov	r1, r3
 8004580:	4806      	ldr	r0, [pc, #24]	@ (800459c <HAL_I2C_MspInit+0x8c>)
 8004582:	f000 ff93 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004586:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800458a:	f7ff ff76 	bl	800447a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800458e:	bf00      	nop
 8004590:	3770      	adds	r7, #112	@ 0x70
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40005400 	.word	0x40005400
 800459c:	48000400 	.word	0x48000400

080045a0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_IPCC_MspInit+0x44>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d113      	bne.n	80045da <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80045b2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80045b6:	f7ff ff47 	bl	8004448 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	202c      	movs	r0, #44	@ 0x2c
 80045c0:	f000 fcef 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80045c4:	202c      	movs	r0, #44	@ 0x2c
 80045c6:	f000 fd06 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	202d      	movs	r0, #45	@ 0x2d
 80045d0:	f000 fce7 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80045d4:	202d      	movs	r0, #45	@ 0x2d
 80045d6:	f000 fcfe 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	58000c00 	.word	0x58000c00

080045e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b096      	sub	sp, #88	@ 0x58
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	2250      	movs	r2, #80	@ 0x50
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f011 fab7 	bl	8015b6c <memset>
  if(hrng->Instance==RNG)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a11      	ldr	r2, [pc, #68]	@ (8004648 <HAL_RNG_MspInit+0x60>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d11b      	bne.n	8004640 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800460c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 800460e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004612:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	4618      	mov	r0, r3
 800461a:	f004 fe59 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004624:	f7ff fece 	bl	80043c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004628:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800462c:	f7ff ff0c 	bl	8004448 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8004630:	2200      	movs	r2, #0
 8004632:	2100      	movs	r1, #0
 8004634:	2035      	movs	r0, #53	@ 0x35
 8004636:	f000 fcb4 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800463a:	2035      	movs	r0, #53	@ 0x35
 800463c:	f000 fccb 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004640:	bf00      	nop
 8004642:	3758      	adds	r7, #88	@ 0x58
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	58001000 	.word	0x58001000

0800464c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b096      	sub	sp, #88	@ 0x58
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	2250      	movs	r2, #80	@ 0x50
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f011 fa85 	bl	8015b6c <memset>
  if(hrtc->Instance==RTC)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <HAL_RTC_MspInit+0x64>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d11d      	bne.n	80046a8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800466c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004670:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4618      	mov	r0, r3
 800467e:	f004 fe27 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004688:	f7ff fe9c 	bl	80043c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800468c:	f7ff feb2 	bl	80043f4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004690:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004694:	f7ff fef1 	bl	800447a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004698:	2200      	movs	r2, #0
 800469a:	2100      	movs	r1, #0
 800469c:	2003      	movs	r0, #3
 800469e:	f000 fc80 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80046a2:	2003      	movs	r0, #3
 80046a4:	f000 fc97 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80046a8:	bf00      	nop
 80046aa:	3758      	adds	r7, #88	@ 0x58
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40002800 	.word	0x40002800

080046b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046bc:	f107 030c 	add.w	r3, r7, #12
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0e      	ldr	r2, [pc, #56]	@ (800470c <HAL_SPI_MspInit+0x58>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d116      	bne.n	8004704 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046d6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046da:	f7ff fee7 	bl	80044ac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046de:	2002      	movs	r0, #2
 80046e0:	f7ff fe99 	bl	8004416 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80046e4:	2338      	movs	r3, #56	@ 0x38
 80046e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046f4:	2305      	movs	r3, #5
 80046f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	4619      	mov	r1, r3
 80046fe:	4804      	ldr	r0, [pc, #16]	@ (8004710 <HAL_SPI_MspInit+0x5c>)
 8004700:	f000 fed4 	bl	80054ac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004704:	bf00      	nop
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40013000 	.word	0x40013000
 8004710:	48000400 	.word	0x48000400

08004714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <HAL_TIM_Base_MspInit+0x54>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10c      	bne.n	8004740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004726:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800472a:	f7ff febf 	bl	80044ac <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	2019      	movs	r0, #25
 8004734:	f000 fc35 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004738:	2019      	movs	r0, #25
 800473a:	f000 fc4c 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800473e:	e00f      	b.n	8004760 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004748:	d10a      	bne.n	8004760 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800474a:	2001      	movs	r0, #1
 800474c:	f7ff fe95 	bl	800447a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	201c      	movs	r0, #28
 8004756:	f000 fc24 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800475a:	201c      	movs	r0, #28
 800475c:	f000 fc3b 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40012c00 	.word	0x40012c00

0800476c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <NMI_Handler+0x4>

08004774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <HardFault_Handler+0x4>

0800477c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <MemManage_Handler+0x4>

08004784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <BusFault_Handler+0x4>

0800478c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <UsageFault_Handler+0x4>

08004794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a2:	b480      	push	{r7}
 80047a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c2:	f000 fa7b 	bl	8004cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}

080047ca <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80047ce:	f7fe fcb9 	bl	8003144 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 80047e8:	2010      	movs	r0, #16
 80047ea:	f000 ffff 	bl	80057ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047f8:	4802      	ldr	r0, [pc, #8]	@ (8004804 <DMA1_Channel1_IRQHandler+0x10>)
 80047fa:	f000 fd69 	bl	80052d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200018c4 	.word	0x200018c4

08004808 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800480c:	4802      	ldr	r0, [pc, #8]	@ (8004818 <USB_LP_IRQHandler+0x10>)
 800480e:	f001 fe17 	bl	8006440 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20002f70 	.word	0x20002f70

0800481c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWR_SW_Pin);
 8004820:	2020      	movs	r0, #32
 8004822:	f000 ffe3 	bl	80057ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004826:	2080      	movs	r0, #128	@ 0x80
 8004828:	f000 ffe0 	bl	80057ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800482c:	bf00      	nop
 800482e:	bd80      	pop	{r7, pc}

08004830 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004834:	4802      	ldr	r0, [pc, #8]	@ (8004840 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004836:	f006 f8a9 	bl	800a98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20001798 	.word	0x20001798

08004844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004848:	4802      	ldr	r0, [pc, #8]	@ (8004854 <TIM2_IRQHandler+0x10>)
 800484a:	f006 f89f 	bl	800a98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200017e4 	.word	0x200017e4

08004858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800485c:	4802      	ldr	r0, [pc, #8]	@ (8004868 <USART1_IRQHandler+0x10>)
 800485e:	f006 fc97 	bl	800b190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20001830 	.word	0x20001830

0800486c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004870:	f00f fe38 	bl	80144e4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}

08004878 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800487c:	f00f fe68 	bl	8014550 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}

08004884 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004888:	f000 ffc8 	bl	800581c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}

08004890 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8004894:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <RNG_IRQHandler+0x10>)
 8004896:	f005 f811 	bl	80098bc <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200016fc 	.word	0x200016fc

080048a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e00a      	b.n	80048cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048b6:	f3af 8000 	nop.w
 80048ba:	4601      	mov	r1, r0
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	60ba      	str	r2, [r7, #8]
 80048c2:	b2ca      	uxtb	r2, r1
 80048c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	3301      	adds	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	dbf0      	blt.n	80048b6 <_read+0x12>
  }

  return len;
 80048d4:	687b      	ldr	r3, [r7, #4]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_close>:
  }
  return len;
}

int _close(int file)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004906:	605a      	str	r2, [r3, #4]
  return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <_isatty>:

int _isatty(int file)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <_sbrk+0x5c>)
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <_sbrk+0x60>)
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <_sbrk+0x64>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004964:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <_sbrk+0x64>)
 8004966:	4a12      	ldr	r2, [pc, #72]	@ (80049b0 <_sbrk+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496a:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <_sbrk+0x64>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d207      	bcs.n	8004988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004978:	f011 f95c 	bl	8015c34 <__errno>
 800497c:	4603      	mov	r3, r0
 800497e:	220c      	movs	r2, #12
 8004980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e009      	b.n	800499c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <_sbrk+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800498e:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <_sbrk+0x64>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <_sbrk+0x64>)
 8004998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800499a:	68fb      	ldr	r3, [r7, #12]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20030000 	.word	0x20030000
 80049a8:	00000600 	.word	0x00000600
 80049ac:	20001924 	.word	0x20001924
 80049b0:	20003678 	.word	0x20003678

080049b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80049b8:	4b24      	ldr	r3, [pc, #144]	@ (8004a4c <SystemInit+0x98>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049be:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <SystemInit+0x98>)
 80049c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049dc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80049e0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ec:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <SystemInit+0x9c>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049fe:	f023 0305 	bic.w	r3, r3, #5
 8004a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a54 <SystemInit+0xa0>)
 8004a20:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a26:	4a0b      	ldr	r2, [pc, #44]	@ (8004a54 <SystemInit+0xa0>)
 8004a28:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000ed00 	.word	0xe000ed00
 8004a50:	faf6fefb 	.word	0xfaf6fefb
 8004a54:	22041000 	.word	0x22041000

08004a58 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 8004a5c:	4806      	ldr	r0, [pc, #24]	@ (8004a78 <Timer_Init+0x20>)
 8004a5e:	f7fd ffcf 	bl	8002a00 <DIAG>
	HAL_Delay (10);
 8004a62:	200a      	movs	r0, #10
 8004a64:	f7fd ff40 	bl	80028e8 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 8004a68:	4804      	ldr	r0, [pc, #16]	@ (8004a7c <Timer_Init+0x24>)
 8004a6a:	f005 ff41 	bl	800a8f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8004a6e:	4804      	ldr	r0, [pc, #16]	@ (8004a80 <Timer_Init+0x28>)
 8004a70:	f005 ff3e 	bl	800a8f0 <HAL_TIM_Base_Start_IT>
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	08018aa8 	.word	0x08018aa8
 8004a7c:	200017e4 	.word	0x200017e4
 8004a80:	20001798 	.word	0x20001798

08004a84 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a94:	d130      	bne.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0201 	mvn.w	r2, #1
 8004a9e:	611a      	str	r2, [r3, #16]
		tsTimer.u8TimeFlag = true;
 8004aa0:	4b33      	ldr	r3, [pc, #204]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	709a      	strb	r2, [r3, #2]
		htim2.Init.Period = Interrupt_ms;
 8004aa6:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004aa8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004aac:	60da      	str	r2, [r3, #12]

		// Detecting Power Button
		if ( HAL_GPIO_ReadPin( GPIOA, PWR_SW_Pin ) == false && tsSystem.bPowerOnFlag == true )
 8004aae:	2120      	movs	r1, #32
 8004ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ab4:	f000 fe6a 	bl	800578c <HAL_GPIO_ReadPin>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_TIM_PeriodElapsedCallback+0x68>
 8004abe:	4b2e      	ldr	r3, [pc, #184]	@ (8004b78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004ac0:	795b      	ldrb	r3, [r3, #5]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d112      	bne.n	8004aec <HAL_TIM_PeriodElapsedCallback+0x68>
		{

			tsTimer.u16PwrCount++;
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ac8:	895b      	ldrh	r3, [r3, #10]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3301      	adds	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ad2:	815a      	strh	r2, [r3, #10]
			if ( tsTimer.u16PwrCount >= PowerOffTime )
 8004ad4:	4b26      	ldr	r3, [pc, #152]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ad6:	895b      	ldrh	r3, [r3, #10]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b1d      	cmp	r3, #29
 8004adc:	d90c      	bls.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				tsSystem.OFF = true;
 8004ade:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	709a      	strb	r2, [r3, #2]
				tsTimer.u16PwrCount = PowerOffTime + 1;
 8004ae4:	4b22      	ldr	r3, [pc, #136]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ae6:	221f      	movs	r2, #31
 8004ae8:	815a      	strh	r2, [r3, #10]
			if ( tsTimer.u16PwrCount >= PowerOffTime )
 8004aea:	e005      	b.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x74>
			}
		}
		else
		{
			tsTimer.u16PwrCount = 0;
 8004aec:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	815a      	strh	r2, [r3, #10]
			tsSystem.OFF = false;
 8004af2:	4b21      	ldr	r3, [pc, #132]	@ (8004b78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	709a      	strb	r2, [r3, #2]
		}
	}

	// Calculating AFE sampling rate
	if (htim->Instance == TIM1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b7c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d132      	bne.n	8004b68 <HAL_TIM_PeriodElapsedCallback+0xe4>
	{
		tsTimer1.u16Count++;
 8004b02:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004b04:	891b      	ldrh	r3, [r3, #8]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004b0e:	811a      	strh	r2, [r3, #8]

		if ( tsTimer1.u16Count > 1999)
 8004b10:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004b12:	891b      	ldrh	r3, [r3, #8]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004b1a:	d325      	bcc.n	8004b68 <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			tsTimer1.u16Count = 0;
 8004b1c:	4b18      	ldr	r3, [pc, #96]	@ (8004b80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	811a      	strh	r2, [r3, #8]
			AFE.u16SPS = AFE.u16SampleCount;
 8004b22:	4b18      	ldr	r3, [pc, #96]	@ (8004b84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	4b16      	ldr	r3, [pc, #88]	@ (8004b84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004b2a:	805a      	strh	r2, [r3, #2]
			AFE.u16SampleCount =0;
 8004b2c:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	801a      	strh	r2, [r3, #0]
			tsDebug.u8PacketCount[0]= tsBle.u8PacketCount[0];
 8004b32:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004b34:	799a      	ldrb	r2, [r3, #6]
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004b38:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
			tsDebug.u8PacketCount[1]= tsBle.u8PacketCount[1];
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004b3e:	79da      	ldrb	r2, [r3, #7]
 8004b40:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004b42:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
			tsBle.u8PacketCount[0] = 0;
 8004b46:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	719a      	strb	r2, [r3, #6]
			tsBle.u8PacketCount[1] = 0;
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	71da      	strb	r2, [r3, #7]

			IMU.u16SPS = IMU.u16SampleCount;
 8004b52:	4b0f      	ldr	r3, [pc, #60]	@ (8004b90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004b54:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004b5c:	f8a3 21c4 	strh.w	r2, [r3, #452]	@ 0x1c4
			IMU.u16SampleCount =0;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2
		}
	}



}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20001928 	.word	0x20001928
 8004b74:	200017e4 	.word	0x200017e4
 8004b78:	2000165c 	.word	0x2000165c
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	20001934 	.word	0x20001934
 8004b84:	20001940 	.word	0x20001940
 8004b88:	200019e0 	.word	0x200019e0
 8004b8c:	20001328 	.word	0x20001328
 8004b90:	20000e84 	.word	0x20000e84

08004b94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004b94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b98:	3304      	adds	r3, #4

08004b9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004b9e:	d3f9      	bcc.n	8004b94 <CopyDataInit>
  bx lr
 8004ba0:	4770      	bx	lr

08004ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004ba2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004ba4:	3004      	adds	r0, #4

08004ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004ba6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004ba8:	d3fb      	bcc.n	8004ba2 <FillZerobss>
  bx lr
 8004baa:	4770      	bx	lr

08004bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bac:	480c      	ldr	r0, [pc, #48]	@ (8004be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bb0:	f7ff ff00 	bl	80049b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004bb4:	480b      	ldr	r0, [pc, #44]	@ (8004be4 <LoopForever+0x6>)
 8004bb6:	490c      	ldr	r1, [pc, #48]	@ (8004be8 <LoopForever+0xa>)
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bec <LoopForever+0xe>)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f7ff ffed 	bl	8004b9a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004bc0:	480b      	ldr	r0, [pc, #44]	@ (8004bf0 <LoopForever+0x12>)
 8004bc2:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <LoopForever+0x16>)
 8004bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <LoopForever+0x1a>)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f7ff ffe7 	bl	8004b9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004bcc:	480b      	ldr	r0, [pc, #44]	@ (8004bfc <LoopForever+0x1e>)
 8004bce:	490c      	ldr	r1, [pc, #48]	@ (8004c00 <LoopForever+0x22>)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f7ff ffe8 	bl	8004ba6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bd6:	f011 f833 	bl	8015c40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004bda:	f7ff f8df 	bl	8003d9c <main>

08004bde <LoopForever>:

LoopForever:
  b LoopForever
 8004bde:	e7fe      	b.n	8004bde <LoopForever>
  ldr   r0, =_estack
 8004be0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004be4:	20000008 	.word	0x20000008
 8004be8:	20000194 	.word	0x20000194
 8004bec:	0801ab10 	.word	0x0801ab10
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004bf0:	200301e4 	.word	0x200301e4
 8004bf4:	20031f57 	.word	0x20031f57
 8004bf8:	0801ace2 	.word	0x0801ace2
  INIT_BSS _sbss, _ebss
 8004bfc:	200001e0 	.word	0x200001e0
 8004c00:	20003678 	.word	0x20003678

08004c04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c04:	e7fe      	b.n	8004c04 <ADC1_IRQHandler>
	...

08004c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c12:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <HAL_Init+0x3c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0b      	ldr	r2, [pc, #44]	@ (8004c44 <HAL_Init+0x3c>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c1e:	2003      	movs	r0, #3
 8004c20:	f000 f9b4 	bl	8004f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c24:	2000      	movs	r0, #0
 8004c26:	f000 f80f 	bl	8004c48 <HAL_InitTick>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	71fb      	strb	r3, [r7, #7]
 8004c34:	e001      	b.n	8004c3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c36:	f7ff fc52 	bl	80044de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	58004000 	.word	0x58004000

08004c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004c54:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <HAL_InitTick+0x6c>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d024      	beq.n	8004ca6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004c5c:	f004 f8ae 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <HAL_InitTick+0x6c>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f9ca 	bl	800500e <HAL_SYSTICK_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d809      	bhi.n	8004c9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c86:	2200      	movs	r2, #0
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	f000 f988 	bl	8004fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c92:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <HAL_InitTick+0x70>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e007      	b.n	8004caa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e004      	b.n	8004caa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e001      	b.n	8004caa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000018 	.word	0x20000018
 8004cb8:	20000014 	.word	0x20000014

08004cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_IncTick+0x20>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_IncTick+0x24>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4413      	add	r3, r2
 8004ccc:	4a04      	ldr	r2, [pc, #16]	@ (8004ce0 <HAL_IncTick+0x24>)
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000018 	.word	0x20000018
 8004ce0:	20001944 	.word	0x20001944

08004ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	@ (8004cf8 <HAL_GetTick+0x14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20001944 	.word	0x20001944

08004cfc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004d00:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_GetTickPrio+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000014 	.word	0x20000014

08004d14 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004d18:	4b03      	ldr	r3, [pc, #12]	@ (8004d28 <HAL_GetTickFreq+0x14>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000018 	.word	0x20000018

08004d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <__NVIC_SetPriorityGrouping+0x44>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d5e:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <__NVIC_SetPriorityGrouping+0x44>)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	60d3      	str	r3, [r2, #12]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d78:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <__NVIC_GetPriorityGrouping+0x18>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 0307 	and.w	r3, r3, #7
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	db0b      	blt.n	8004dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	f003 021f 	and.w	r2, r3, #31
 8004da8:	4907      	ldr	r1, [pc, #28]	@ (8004dc8 <__NVIC_EnableIRQ+0x38>)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2001      	movs	r0, #1
 8004db2:	fa00 f202 	lsl.w	r2, r0, r2
 8004db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000e100 	.word	0xe000e100

08004dcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db12      	blt.n	8004e04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	f003 021f 	and.w	r2, r3, #31
 8004de4:	490a      	ldr	r1, [pc, #40]	@ (8004e10 <__NVIC_DisableIRQ+0x44>)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2001      	movs	r0, #1
 8004dee:	fa00 f202 	lsl.w	r2, r0, r2
 8004df2:	3320      	adds	r3, #32
 8004df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004df8:	f3bf 8f4f 	dsb	sy
}
 8004dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004dfe:	f3bf 8f6f 	isb	sy
}
 8004e02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000e100 	.word	0xe000e100

08004e14 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	db0c      	blt.n	8004e40 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	f003 021f 	and.w	r2, r3, #31
 8004e2c:	4907      	ldr	r1, [pc, #28]	@ (8004e4c <__NVIC_SetPendingIRQ+0x38>)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2001      	movs	r0, #1
 8004e36:	fa00 f202 	lsl.w	r2, r0, r2
 8004e3a:	3340      	adds	r3, #64	@ 0x40
 8004e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000e100 	.word	0xe000e100

08004e50 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	db0c      	blt.n	8004e7c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	f003 021f 	and.w	r2, r3, #31
 8004e68:	4907      	ldr	r1, [pc, #28]	@ (8004e88 <__NVIC_ClearPendingIRQ+0x38>)
 8004e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2001      	movs	r0, #1
 8004e72:	fa00 f202 	lsl.w	r2, r0, r2
 8004e76:	3360      	adds	r3, #96	@ 0x60
 8004e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000e100 	.word	0xe000e100

08004e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	6039      	str	r1, [r7, #0]
 8004e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	db0a      	blt.n	8004eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	490c      	ldr	r1, [pc, #48]	@ (8004ed8 <__NVIC_SetPriority+0x4c>)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eb4:	e00a      	b.n	8004ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4908      	ldr	r1, [pc, #32]	@ (8004edc <__NVIC_SetPriority+0x50>)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	3b04      	subs	r3, #4
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	440b      	add	r3, r1
 8004eca:	761a      	strb	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	e000e100 	.word	0xe000e100
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	@ 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f1c3 0307 	rsb	r3, r3, #7
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	bf28      	it	cs
 8004efe:	2304      	movcs	r3, #4
 8004f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d902      	bls.n	8004f10 <NVIC_EncodePriority+0x30>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3b03      	subs	r3, #3
 8004f0e:	e000      	b.n	8004f12 <NVIC_EncodePriority+0x32>
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	401a      	ands	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f28:	f04f 31ff 	mov.w	r1, #4294967295
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	43d9      	mvns	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f38:	4313      	orrs	r3, r2
         );
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	@ 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f58:	d301      	bcc.n	8004f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e00f      	b.n	8004f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f88 <SysTick_Config+0x40>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f66:	210f      	movs	r1, #15
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	f7ff ff8e 	bl	8004e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <SysTick_Config+0x40>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f76:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <SysTick_Config+0x40>)
 8004f78:	2207      	movs	r2, #7
 8004f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	e000e010 	.word	0xe000e010

08004f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fec9 	bl	8004d2c <__NVIC_SetPriorityGrouping>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb0:	f7ff fee0 	bl	8004d74 <__NVIC_GetPriorityGrouping>
 8004fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	6978      	ldr	r0, [r7, #20]
 8004fbc:	f7ff ff90 	bl	8004ee0 <NVIC_EncodePriority>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff5f 	bl	8004e8c <__NVIC_SetPriority>
}
 8004fce:	bf00      	nop
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fed3 	bl	8004d90 <__NVIC_EnableIRQ>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fee3 	bl	8004dcc <__NVIC_DisableIRQ>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff96 	bl	8004f48 <SysTick_Config>
 800501c:	4603      	mov	r3, r0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff feed 	bl	8004e14 <__NVIC_SetPendingIRQ>
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fefd 	bl	8004e50 <__NVIC_ClearPendingIRQ>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_DMA_Start_IT+0x20>
 800507a:	2302      	movs	r3, #2
 800507c:	e066      	b.n	800514c <HAL_DMA_Start_IT+0xee>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d155      	bne.n	800513e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f9b9 	bl	800542e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 020e 	orr.w	r2, r2, #14
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e00f      	b.n	80050f6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0204 	bic.w	r2, r2, #4
 80050e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 020a 	orr.w	r2, r2, #10
 80050f4:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005112:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800512a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e005      	b.n	800514a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e04f      	b.n	8005206 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d008      	beq.n	8005184 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e040      	b.n	8005206 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 020e 	bic.w	r2, r2, #14
 8005192:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b8:	f003 021c 	and.w	r2, r3, #28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f202 	lsl.w	r2, r1, r2
 80051c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d005      	beq.n	8005236 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2204      	movs	r2, #4
 800522e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e047      	b.n	80052c6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 020e 	bic.w	r2, r2, #14
 8005244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f003 021c 	and.w	r2, r3, #28
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	2101      	movs	r1, #1
 8005274:	fa01 f202 	lsl.w	r2, r1, r2
 8005278:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005282:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800529a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
    }
  }
  return status;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	f003 031c 	and.w	r3, r3, #28
 80052f0:	2204      	movs	r2, #4
 80052f2:	409a      	lsls	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d026      	beq.n	800534a <HAL_DMA_IRQHandler+0x7a>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d021      	beq.n	800534a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0204 	bic.w	r2, r2, #4
 8005322:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	f003 021c 	and.w	r2, r3, #28
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	2104      	movs	r1, #4
 8005332:	fa01 f202 	lsl.w	r2, r1, r2
 8005336:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d071      	beq.n	8005424 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005348:	e06c      	b.n	8005424 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	f003 031c 	and.w	r3, r3, #28
 8005352:	2202      	movs	r2, #2
 8005354:	409a      	lsls	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02e      	beq.n	80053bc <HAL_DMA_IRQHandler+0xec>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d029      	beq.n	80053bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 020a 	bic.w	r2, r2, #10
 8005384:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f003 021c 	and.w	r2, r3, #28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	2102      	movs	r1, #2
 800539c:	fa01 f202 	lsl.w	r2, r1, r2
 80053a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d038      	beq.n	8005424 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053ba:	e033      	b.n	8005424 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	f003 031c 	and.w	r3, r3, #28
 80053c4:	2208      	movs	r2, #8
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02a      	beq.n	8005426 <HAL_DMA_IRQHandler+0x156>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d025      	beq.n	8005426 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 020e 	bic.w	r2, r2, #14
 80053e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f003 021c 	and.w	r2, r3, #28
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f202 	lsl.w	r2, r1, r2
 80053fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005424:	bf00      	nop
 8005426:	bf00      	nop
}
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005444:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f003 021c 	and.w	r2, r3, #28
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d108      	bne.n	800548e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800548c:	e007      	b.n	800549e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ba:	e14c      	b.n	8005756 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	2101      	movs	r1, #1
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 813e 	beq.w	8005750 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d005      	beq.n	80054ec <HAL_GPIO_Init+0x40>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d130      	bne.n	800554e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	2203      	movs	r2, #3
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005522:	2201      	movs	r2, #1
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 0201 	and.w	r2, r3, #1
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d017      	beq.n	800558a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d123      	bne.n	80055de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	08da      	lsrs	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3208      	adds	r2, #8
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	220f      	movs	r2, #15
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	08da      	lsrs	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3208      	adds	r2, #8
 80055d8:	6939      	ldr	r1, [r7, #16]
 80055da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0203 	and.w	r2, r3, #3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8098 	beq.w	8005750 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005620:	4a54      	ldr	r2, [pc, #336]	@ (8005774 <HAL_GPIO_Init+0x2c8>)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	3302      	adds	r3, #2
 8005628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	220f      	movs	r2, #15
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	43db      	mvns	r3, r3
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800564a:	d019      	beq.n	8005680 <HAL_GPIO_Init+0x1d4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a4a      	ldr	r2, [pc, #296]	@ (8005778 <HAL_GPIO_Init+0x2cc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <HAL_GPIO_Init+0x1d0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a49      	ldr	r2, [pc, #292]	@ (800577c <HAL_GPIO_Init+0x2d0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00d      	beq.n	8005678 <HAL_GPIO_Init+0x1cc>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a48      	ldr	r2, [pc, #288]	@ (8005780 <HAL_GPIO_Init+0x2d4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <HAL_GPIO_Init+0x1c8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a47      	ldr	r2, [pc, #284]	@ (8005784 <HAL_GPIO_Init+0x2d8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_GPIO_Init+0x1c4>
 800566c:	2304      	movs	r3, #4
 800566e:	e008      	b.n	8005682 <HAL_GPIO_Init+0x1d6>
 8005670:	2307      	movs	r3, #7
 8005672:	e006      	b.n	8005682 <HAL_GPIO_Init+0x1d6>
 8005674:	2303      	movs	r3, #3
 8005676:	e004      	b.n	8005682 <HAL_GPIO_Init+0x1d6>
 8005678:	2302      	movs	r3, #2
 800567a:	e002      	b.n	8005682 <HAL_GPIO_Init+0x1d6>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_GPIO_Init+0x1d6>
 8005680:	2300      	movs	r3, #0
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	f002 0203 	and.w	r2, r2, #3
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	4093      	lsls	r3, r2
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005692:	4938      	ldr	r1, [pc, #224]	@ (8005774 <HAL_GPIO_Init+0x2c8>)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	3302      	adds	r3, #2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056a0:	4b39      	ldr	r3, [pc, #228]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4013      	ands	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056c4:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056ee:	4a26      	ldr	r2, [pc, #152]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056f4:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	43db      	mvns	r3, r3
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4013      	ands	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800571a:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005722:	4b19      	ldr	r3, [pc, #100]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005748:	4a0f      	ldr	r2, [pc, #60]	@ (8005788 <HAL_GPIO_Init+0x2dc>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	f47f aeab 	bne.w	80054bc <HAL_GPIO_Init+0x10>
  }
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40010000 	.word	0x40010000
 8005778:	48000400 	.word	0x48000400
 800577c:	48000800 	.word	0x48000800
 8005780:	48000c00 	.word	0x48000c00
 8005784:	48001000 	.word	0x48001000
 8005788:	58000800 	.word	0x58000800

0800578c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	e001      	b.n	80057ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
 80057c8:	4613      	mov	r3, r2
 80057ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057cc:	787b      	ldrb	r3, [r7, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057d8:	e002      	b.n	80057e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057da:	887a      	ldrh	r2, [r7, #2]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057f6:	4b08      	ldr	r3, [pc, #32]	@ (8005818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005802:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd f926 	bl	8002a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	58000800 	.word	0x58000800

0800581c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005822:	4b0a      	ldr	r3, [pc, #40]	@ (800584c <HAL_HSEM_IRQHandler+0x30>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005828:	4b08      	ldr	r3, [pc, #32]	@ (800584c <HAL_HSEM_IRQHandler+0x30>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	43db      	mvns	r3, r3
 8005830:	4906      	ldr	r1, [pc, #24]	@ (800584c <HAL_HSEM_IRQHandler+0x30>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005836:	4a05      	ldr	r2, [pc, #20]	@ (800584c <HAL_HSEM_IRQHandler+0x30>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f807 	bl	8005850 <HAL_HSEM_FreeCallback>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	58001500 	.word	0x58001500

08005850 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e08d      	b.n	8005992 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fe fe40 	bl	8004510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	@ 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d107      	bne.n	80058de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	e006      	b.n	80058ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d108      	bne.n	8005906 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	e007      	b.n	8005916 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
 80059ac:	4613      	mov	r3, r2
 80059ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 80fd 	bne.w	8005bb8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_Master_Transmit+0x30>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0f6      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d4:	f7ff f986 	bl	8004ce4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2319      	movs	r3, #25
 80059e0:	2201      	movs	r2, #1
 80059e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f914 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0e1      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2221      	movs	r2, #33	@ 0x21
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2210      	movs	r2, #16
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2bff      	cmp	r3, #255	@ 0xff
 8005a26:	d906      	bls.n	8005a36 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	@ 0xff
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e007      	b.n	8005a46 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a44:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d024      	beq.n	8005a98 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc4 <HAL_I2C_Master_Transmit+0x228>)
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa83 	bl	8005f9c <I2C_TransferConfig>
 8005a96:	e066      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	8979      	ldrh	r1, [r7, #10]
 8005aa0:	4b48      	ldr	r3, [pc, #288]	@ (8005bc4 <HAL_I2C_Master_Transmit+0x228>)
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fa78 	bl	8005f9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005aac:	e05b      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	6a39      	ldr	r1, [r7, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f907 	bl	8005cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07b      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d034      	beq.n	8005b66 <HAL_I2C_Master_Transmit+0x1ca>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d130      	bne.n	8005b66 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2180      	movs	r1, #128	@ 0x80
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f880 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e04d      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2bff      	cmp	r3, #255	@ 0xff
 8005b26:	d90e      	bls.n	8005b46 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	22ff      	movs	r2, #255	@ 0xff
 8005b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	8979      	ldrh	r1, [r7, #10]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fa2c 	bl	8005f9c <I2C_TransferConfig>
 8005b44:	e00f      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	8979      	ldrh	r1, [r7, #10]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fa1b 	bl	8005f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d19e      	bne.n	8005aae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	6a39      	ldr	r1, [r7, #32]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f8ed 	bl	8005d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e01a      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <HAL_I2C_Master_Transmit+0x22c>)
 8005b98:	400b      	ands	r3, r1
 8005b9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e000      	b.n	8005bba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
  }
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	80002000 	.word	0x80002000
 8005bc8:	fe00e800 	.word	0xfe00e800

08005bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d103      	bne.n	8005bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d007      	beq.n	8005c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	619a      	str	r2, [r3, #24]
  }
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c24:	e03b      	b.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8d6 	bl	8005ddc <I2C_IsErrorOccurred>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e041      	b.n	8005cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d02d      	beq.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7ff f84f 	bl	8004ce4 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d122      	bne.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d113      	bne.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e00f      	b.n	8005cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d0b4      	beq.n	8005c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cd2:	e033      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f87f 	bl	8005ddc <I2C_IsErrorOccurred>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e031      	b.n	8005d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d025      	beq.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf0:	f7fe fff8 	bl	8004ce4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11a      	bne.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d013      	beq.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d1c4      	bne.n	8005cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d60:	e02f      	b.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f838 	bl	8005ddc <I2C_IsErrorOccurred>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e02d      	b.n	8005dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fe ffb5 	bl	8004ce4 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11a      	bne.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d013      	beq.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e007      	b.n	8005dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d1c8      	bne.n	8005d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d068      	beq.n	8005eda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e10:	e049      	b.n	8005ea6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d045      	beq.n	8005ea6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fe ff63 	bl	8004ce4 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <I2C_IsErrorOccurred+0x54>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d13a      	bne.n	8005ea6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e52:	d121      	bne.n	8005e98 <I2C_IsErrorOccurred+0xbc>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e5a:	d01d      	beq.n	8005e98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d01a      	beq.n	8005e98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e72:	f7fe ff37 	bl	8004ce4 <HAL_GetTick>
 8005e76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e78:	e00e      	b.n	8005e98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e7a:	f7fe ff33 	bl	8004ce4 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b19      	cmp	r3, #25
 8005e86:	d907      	bls.n	8005e98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	f043 0320 	orr.w	r3, r3, #32
 8005e8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e96:	e006      	b.n	8005ea6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d1e9      	bne.n	8005e7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d003      	beq.n	8005ebc <I2C_IsErrorOccurred+0xe0>
 8005eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0aa      	beq.n	8005e12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f043 0308 	orr.w	r3, r3, #8
 8005f14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	f043 0302 	orr.w	r3, r3, #2
 8005f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01c      	beq.n	8005f8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fe3b 	bl	8005bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <I2C_IsErrorOccurred+0x1bc>)
 8005f62:	400b      	ands	r3, r1
 8005f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	fe00e800 	.word	0xfe00e800

08005f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	817b      	strh	r3, [r7, #10]
 8005faa:	4613      	mov	r3, r2
 8005fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fae:	897b      	ldrh	r3, [r7, #10]
 8005fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fb4:	7a7b      	ldrb	r3, [r7, #9]
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	0d5b      	lsrs	r3, r3, #21
 8005fd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005fda:	4b08      	ldr	r3, [pc, #32]	@ (8005ffc <I2C_TransferConfig+0x60>)
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	ea02 0103 	and.w	r1, r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	03ff63ff 	.word	0x03ff63ff

08006000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b20      	cmp	r3, #32
 8006014:	d138      	bne.n	8006088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006020:	2302      	movs	r3, #2
 8006022:	e032      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2224      	movs	r2, #36	@ 0x24
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d139      	bne.n	8006120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e033      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2224      	movs	r2, #36	@ 0x24
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4904      	ldr	r1, [pc, #16]	@ (8006150 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40010000 	.word	0x40010000

08006154 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01e      	beq.n	80061a4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006166:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <HAL_IPCC_Init+0x60>)
 8006168:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fe fa12 	bl	80045a0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800617c:	68b8      	ldr	r0, [r7, #8]
 800617e:	f000 f85b 	bl	8006238 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f82c 	bl	80061ec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80061a2:	e001      	b.n	80061a8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	58000c00 	.word	0x58000c00

080061b8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e00f      	b.n	800621a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	4a0b      	ldr	r2, [pc, #44]	@ (8006230 <IPCC_SetDefaultCallbacks+0x44>)
 8006204:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3306      	adds	r3, #6
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	4a08      	ldr	r2, [pc, #32]	@ (8006234 <IPCC_SetDefaultCallbacks+0x48>)
 8006212:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d9ec      	bls.n	80061fa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	080061b9 	.word	0x080061b9
 8006234:	080061d3 	.word	0x080061d3

08006238 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800624c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	223f      	movs	r2, #63	@ 0x3f
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0c0      	b.n	80063f4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f00e fca2 	bl	8014bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2203      	movs	r2, #3
 8006290:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f005 fc8f 	bl	800bbbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e03e      	b.n	8006322 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	3311      	adds	r3, #17
 80062b4:	2201      	movs	r2, #1
 80062b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	440b      	add	r3, r1
 80062c6:	3310      	adds	r3, #16
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	440b      	add	r3, r1
 80062da:	3313      	adds	r3, #19
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062e0:	7bfa      	ldrb	r2, [r7, #15]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	440b      	add	r3, r1
 80062ee:	3320      	adds	r3, #32
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062f4:	7bfa      	ldrb	r2, [r7, #15]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	440b      	add	r3, r1
 8006302:	3324      	adds	r3, #36	@ 0x24
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	440b      	add	r3, r1
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	3301      	adds	r3, #1
 8006320:	73fb      	strb	r3, [r7, #15]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	791b      	ldrb	r3, [r3, #4]
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	429a      	cmp	r2, r3
 800632a:	d3bb      	bcc.n	80062a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e044      	b.n	80063bc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	440b      	add	r3, r1
 8006340:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	440b      	add	r3, r1
 8006356:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	440b      	add	r3, r1
 800636c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006374:	7bfa      	ldrb	r2, [r7, #15]
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	440b      	add	r3, r1
 8006382:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800638a:	7bfa      	ldrb	r2, [r7, #15]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	440b      	add	r3, r1
 8006398:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	440b      	add	r3, r1
 80063ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	3301      	adds	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	791b      	ldrb	r3, [r3, #4]
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3b5      	bcc.n	8006332 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80063d2:	f005 fc0e 	bl	800bbf2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7a9b      	ldrb	r3, [r3, #10]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fc0e 	bl	8007c0e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_PCD_Start+0x16>
 800640e:	2302      	movs	r3, #2
 8006410:	e012      	b.n	8006438 <HAL_PCD_Start+0x3c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f005 fbb5 	bl	800bb8e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f007 f993 	bl	800d754 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f007 f998 	bl	800d782 <USB_ReadInterrupts>
 8006452:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fb06 	bl	8006a70 <PCD_EP_ISR_Handler>

    return;
 8006464:	e110      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006482:	b292      	uxth	r2, r2
 8006484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f00e fc54 	bl	8014d36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800648e:	2100      	movs	r1, #0
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8fc 	bl	800668e <HAL_PCD_SetAddress>

    return;
 8006496:	e0f7      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064b4:	b292      	uxth	r2, r2
 80064b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80064ba:	e0e5      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d8:	b292      	uxth	r2, r2
 80064da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80064de:	e0d3      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d034      	beq.n	8006554 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0204 	bic.w	r2, r2, #4
 80064fc:	b292      	uxth	r2, r2
 80064fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0208 	bic.w	r2, r2, #8
 8006514:	b292      	uxth	r2, r2
 8006516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800652c:	2100      	movs	r1, #0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f00e fdf6 	bl	8015120 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00e fc37 	bl	8014da8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800654c:	b292      	uxth	r2, r2
 800654e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006552:	e099      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800655a:	2b00      	cmp	r3, #0
 800655c:	d027      	beq.n	80065ae <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0208 	orr.w	r2, r2, #8
 8006570:	b292      	uxth	r2, r2
 8006572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006588:	b292      	uxth	r2, r2
 800658a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0204 	orr.w	r2, r2, #4
 80065a0:	b292      	uxth	r2, r2
 80065a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f00e fbe4 	bl	8014d74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80065ac:	e06c      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d040      	beq.n	800663a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ca:	b292      	uxth	r2, r2
 80065cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d12b      	bne.n	8006632 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0204 	orr.w	r2, r2, #4
 80065ec:	b292      	uxth	r2, r2
 80065ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0208 	orr.w	r2, r2, #8
 8006604:	b292      	uxth	r2, r2
 8006606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800661a:	b29b      	uxth	r3, r3
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f00e fd78 	bl	8015120 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006630:	e02a      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f00e fb9e 	bl	8014d74 <HAL_PCD_SuspendCallback>
    return;
 8006638:	e026      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00f      	beq.n	8006664 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006656:	b292      	uxth	r2, r2
 8006658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f00e fb5c 	bl	8014d1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006662:	e011      	b.n	8006688 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006680:	b292      	uxth	r2, r2
 8006682:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006686:	bf00      	nop
  }
}
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_PCD_SetAddress+0x1a>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e012      	b.n	80066ce <HAL_PCD_SetAddress+0x40>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f007 f834 	bl	800d72c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	4608      	mov	r0, r1
 80066e0:	4611      	mov	r1, r2
 80066e2:	461a      	mov	r2, r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	70fb      	strb	r3, [r7, #3]
 80066e8:	460b      	mov	r3, r1
 80066ea:	803b      	strh	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da0e      	bge.n	800671a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f003 0207 	and.w	r2, r3, #7
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	3310      	adds	r3, #16
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	705a      	strb	r2, [r3, #1]
 8006718:	e00e      	b.n	8006738 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 0207 	and.w	r2, r3, #7
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	b2da      	uxtb	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006744:	883b      	ldrh	r3, [r7, #0]
 8006746:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	78ba      	ldrb	r2, [r7, #2]
 8006752:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006754:	78bb      	ldrb	r3, [r7, #2]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d102      	bne.n	8006760 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_PCD_EP_Open+0x98>
 800676a:	2302      	movs	r3, #2
 800676c:	e00e      	b.n	800678c <HAL_PCD_EP_Open+0xb6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f005 fa57 	bl	800bc30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800678a:	7afb      	ldrb	r3, [r7, #11]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0e      	bge.n	80067c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0207 	and.w	r2, r3, #7
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	3310      	adds	r3, #16
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	705a      	strb	r2, [r3, #1]
 80067c4:	e00e      	b.n	80067e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 0207 	and.w	r2, r3, #7
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_PCD_EP_Close+0x6a>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e00e      	b.n	800681c <HAL_PCD_EP_Close+0x88>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	4618      	mov	r0, r3
 800680e:	f005 fef7 	bl	800c600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	460b      	mov	r3, r1
 8006832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	f003 0207 	and.w	r2, r3, #7
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	b2da      	uxtb	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	4618      	mov	r0, r3
 8006878:	f006 f8af 	bl	800c9da <USB_EPStartXfer>

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	f003 0207 	and.w	r2, r3, #7
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	440b      	add	r3, r1
 80068a4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80068a8:	681b      	ldr	r3, [r3, #0]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	460b      	mov	r3, r1
 80068c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	f003 0207 	and.w	r2, r3, #7
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	3310      	adds	r3, #16
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2201      	movs	r2, #1
 8006900:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	b2da      	uxtb	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6979      	ldr	r1, [r7, #20]
 8006914:	4618      	mov	r0, r3
 8006916:	f006 f860 	bl	800c9da <USB_EPStartXfer>

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	7912      	ldrb	r2, [r2, #4]
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e03e      	b.n	80069c0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da0e      	bge.n	8006968 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	f003 0207 	and.w	r2, r3, #7
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	3310      	adds	r3, #16
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	705a      	strb	r2, [r3, #1]
 8006966:	e00c      	b.n	8006982 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_PCD_EP_SetStall+0x7e>
 800699e:	2302      	movs	r3, #2
 80069a0:	e00e      	b.n	80069c0 <HAL_PCD_EP_SetStall+0x9c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f006 fdc1 	bl	800d538 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	7912      	ldrb	r2, [r2, #4]
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e040      	b.n	8006a68 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da0e      	bge.n	8006a0c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	f003 0207 	and.w	r2, r3, #7
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	3310      	adds	r3, #16
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	705a      	strb	r2, [r3, #1]
 8006a0a:	e00e      	b.n	8006a2a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 0207 	and.w	r2, r3, #7
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_PCD_EP_ClrStall+0x82>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e00e      	b.n	8006a68 <HAL_PCD_EP_ClrStall+0xa0>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f006 fdbe 	bl	800d5da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b092      	sub	sp, #72	@ 0x48
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a78:	e333      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a82:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006a90:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 8108 	bne.w	8006caa <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d14c      	bne.n	8006b3e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab4:	813b      	strh	r3, [r7, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	893b      	ldrh	r3, [r7, #8]
 8006abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3310      	adds	r3, #16
 8006acc:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	441a      	add	r2, r3
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006b04:	2100      	movs	r1, #0
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f00e f8ed 	bl	8014ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7b1b      	ldrb	r3, [r3, #12]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 82e5 	beq.w	80070e2 <PCD_EP_ISR_Handler+0x672>
 8006b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 82e0 	bne.w	80070e2 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7b1b      	ldrb	r3, [r3, #12]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	731a      	strb	r2, [r3, #12]
 8006b3c:	e2d1      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b44:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006b4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d032      	beq.n	8006bbe <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f006 fe47 	bl	800d826 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	817b      	strh	r3, [r7, #10]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	897a      	ldrh	r2, [r7, #10]
 8006bae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f00e f868 	bl	8014c8c <HAL_PCD_SetupStageCallback>
 8006bbc:	e291      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bbe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f280 828d 	bge.w	80070e2 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	81fb      	strh	r3, [r7, #14]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	89fa      	ldrh	r2, [r7, #14]
 8006bde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006be2:	b292      	uxth	r2, r2
 8006be4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d019      	beq.n	8006c4a <PCD_EP_ISR_Handler+0x1da>
 8006c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d015      	beq.n	8006c4a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c24:	6959      	ldr	r1, [r3, #20]
 8006c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f006 fdf9 	bl	800d826 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f00e f833 	bl	8014cb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006c52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 8242 	bne.w	80070e2 <PCD_EP_ISR_Handler+0x672>
 8006c5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c60:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006c64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c68:	f000 823b 	beq.w	80070e2 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7c:	81bb      	strh	r3, [r7, #12]
 8006c7e:	89bb      	ldrh	r3, [r7, #12]
 8006c80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c84:	81bb      	strh	r3, [r7, #12]
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c8c:	81bb      	strh	r3, [r7, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	89bb      	ldrh	r3, [r7, #12]
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
 8006ca8:	e21b      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006cbc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f280 80f1 	bge.w	8006ea8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006cdc:	4013      	ands	r3, r2
 8006cde:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006cf0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006cf8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d10:	7b1b      	ldrb	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d123      	bne.n	8006d5e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4413      	add	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006d3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 808b 	beq.w	8006e5e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4e:	6959      	ldr	r1, [r3, #20]
 8006d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d52:	88da      	ldrh	r2, [r3, #6]
 8006d54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d58:	f006 fd65 	bl	800d826 <USB_ReadPMA>
 8006d5c:	e07f      	b.n	8006e5e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d60:	78db      	ldrb	r3, [r3, #3]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d109      	bne.n	8006d7a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9c6 	bl	80070fe <HAL_PCD_EP_DB_Receive>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d78:	e071      	b.n	8006e5e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d022      	beq.n	8006e1a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	4413      	add	r3, r2
 8006dee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006dfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02c      	beq.n	8006e5e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0a:	6959      	ldr	r1, [r3, #20]
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0e:	891a      	ldrh	r2, [r3, #8]
 8006e10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e14:	f006 fd07 	bl	800d826 <USB_ReadPMA>
 8006e18:	e021      	b.n	8006e5e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006e42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e54:	895a      	ldrh	r2, [r3, #10]
 8006e56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e5a:	f006 fce4 	bl	800d826 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e66:	441a      	add	r2, r3
 8006e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e74:	441a      	add	r2, r3
 8006e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e78:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <PCD_EP_ISR_Handler+0x41e>
 8006e82:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d206      	bcs.n	8006e9c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f00d ff0b 	bl	8014cb0 <HAL_PCD_DataOutStageCallback>
 8006e9a:	e005      	b.n	8006ea8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f005 fd99 	bl	800c9da <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006ea8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8117 	beq.w	80070e2 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006eb4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	3310      	adds	r3, #16
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f02:	78db      	ldrb	r3, [r3, #3]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	f040 80a1 	bne.w	800704c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f12:	7b1b      	ldrb	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8092 	beq.w	800703e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d046      	beq.n	8006fb2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d126      	bne.n	8006f7a <PCD_EP_ISR_Handler+0x50a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	4413      	add	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	00da      	lsls	r2, r3, #3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e061      	b.n	800703e <PCD_EP_ISR_Handler+0x5ce>
 8006f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d15d      	bne.n	800703e <PCD_EP_ISR_Handler+0x5ce>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	00da      	lsls	r2, r3, #3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2200      	movs	r2, #0
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e045      	b.n	800703e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d126      	bne.n	800700e <PCD_EP_ISR_Handler+0x59e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	4413      	add	r3, r2
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00da      	lsls	r2, r3, #3
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fe6:	623b      	str	r3, [r7, #32]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007006:	b29a      	uxth	r2, r3
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	e017      	b.n	800703e <PCD_EP_ISR_Handler+0x5ce>
 800700e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d113      	bne.n	800703e <PCD_EP_ISR_Handler+0x5ce>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800701e:	b29b      	uxth	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007024:	4413      	add	r3, r2
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	00da      	lsls	r2, r3, #3
 800702e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007030:	4413      	add	r3, r2
 8007032:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	2200      	movs	r2, #0
 800703c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800703e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f00d fe4e 	bl	8014ce6 <HAL_PCD_DataInStageCallback>
 800704a:	e04a      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800704c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800704e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d13f      	bne.n	80070d6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	4413      	add	r3, r2
 8007070:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800707c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007082:	429a      	cmp	r2, r3
 8007084:	d906      	bls.n	8007094 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800708c:	1ad2      	subs	r2, r2, r3
 800708e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007090:	619a      	str	r2, [r3, #24]
 8007092:	e002      	b.n	800709a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800709a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f00d fe1c 	bl	8014ce6 <HAL_PCD_DataInStageCallback>
 80070ae:	e018      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80070b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80070b6:	441a      	add	r2, r3
 80070b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80070bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80070c2:	441a      	add	r2, r3
 80070c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070ce:	4618      	mov	r0, r3
 80070d0:	f005 fc83 	bl	800c9da <USB_EPStartXfer>
 80070d4:	e005      	b.n	80070e2 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80070d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070d8:	461a      	mov	r2, r3
 80070da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f917 	bl	8007310 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	b21b      	sxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f6ff acc3 	blt.w	8006a7a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3748      	adds	r7, #72	@ 0x48
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d07c      	beq.n	8007210 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	4413      	add	r3, r2
 8007130:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	8b7b      	ldrh	r3, [r7, #26]
 8007142:	429a      	cmp	r2, r3
 8007144:	d306      	bcc.n	8007154 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	8b7b      	ldrh	r3, [r7, #26]
 800714c:	1ad2      	subs	r2, r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	619a      	str	r2, [r3, #24]
 8007152:	e002      	b.n	800715a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d123      	bne.n	80071aa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717c:	833b      	strh	r3, [r7, #24]
 800717e:	8b3b      	ldrh	r3, [r7, #24]
 8007180:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007184:	833b      	strh	r3, [r7, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	441a      	add	r2, r3
 8007194:	8b3b      	ldrh	r3, [r7, #24]
 8007196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800719a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800719e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01f      	beq.n	80071f4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ce:	82fb      	strh	r3, [r7, #22]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	8afb      	ldrh	r3, [r7, #22]
 80071e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80071f4:	8b7b      	ldrh	r3, [r7, #26]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8085 	beq.w	8007306 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6959      	ldr	r1, [r3, #20]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	891a      	ldrh	r2, [r3, #8]
 8007208:	8b7b      	ldrh	r3, [r7, #26]
 800720a:	f006 fb0c 	bl	800d826 <USB_ReadPMA>
 800720e:	e07a      	b.n	8007306 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4413      	add	r3, r2
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	4413      	add	r3, r2
 800722a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007234:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	429a      	cmp	r2, r3
 800723e:	d306      	bcc.n	800724e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	8b7b      	ldrh	r3, [r7, #26]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	619a      	str	r2, [r3, #24]
 800724c:	e002      	b.n	8007254 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d123      	bne.n	80072a4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007276:	83fb      	strh	r3, [r7, #30]
 8007278:	8bfb      	ldrh	r3, [r7, #30]
 800727a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800727e:	83fb      	strh	r3, [r7, #30]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	8bfb      	ldrh	r3, [r7, #30]
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d11f      	bne.n	80072ee <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c8:	83bb      	strh	r3, [r7, #28]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	8bbb      	ldrh	r3, [r7, #28]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80072ee:	8b7b      	ldrh	r3, [r7, #26]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	6959      	ldr	r1, [r3, #20]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	895a      	ldrh	r2, [r3, #10]
 8007300:	8b7b      	ldrh	r3, [r7, #26]
 8007302:	f006 fa90 	bl	800d826 <USB_ReadPMA>
    }
  }

  return count;
 8007306:	8b7b      	ldrh	r3, [r7, #26]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b0a6      	sub	sp, #152	@ 0x98
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 81f7 	beq.w	8007718 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	4413      	add	r3, r2
 8007344:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800735a:	429a      	cmp	r2, r3
 800735c:	d907      	bls.n	800736e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	619a      	str	r2, [r3, #24]
 800736c:	e002      	b.n	8007374 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 80e1 	bne.w	8007540 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d126      	bne.n	80073d4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007394:	b29b      	uxth	r3, r3
 8007396:	461a      	mov	r2, r3
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	4413      	add	r3, r2
 800739c:	633b      	str	r3, [r7, #48]	@ 0x30
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	00da      	lsls	r2, r3, #3
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e01a      	b.n	800740a <HAL_PCD_EP_DB_Transmit+0xfa>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d116      	bne.n	800740a <HAL_PCD_EP_DB_Transmit+0xfa>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	4413      	add	r3, r2
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	00da      	lsls	r2, r3, #3
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	4413      	add	r3, r2
 80073fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
 8007404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007406:	2200      	movs	r2, #0
 8007408:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d126      	bne.n	8007466 <HAL_PCD_EP_DB_Transmit+0x156>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	4413      	add	r3, r2
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	00da      	lsls	r2, r3, #3
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	4413      	add	r3, r2
 800743a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800744a:	b29a      	uxth	r2, r3
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e017      	b.n	8007496 <HAL_PCD_EP_DB_Transmit+0x186>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d113      	bne.n	8007496 <HAL_PCD_EP_DB_Transmit+0x186>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	4413      	add	r3, r2
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	00da      	lsls	r2, r3, #3
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	4413      	add	r3, r2
 800748a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	2200      	movs	r2, #0
 8007494:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d123      	bne.n	80074e6 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b8:	837b      	strh	r3, [r7, #26]
 80074ba:	8b7b      	ldrh	r3, [r7, #26]
 80074bc:	f083 0320 	eor.w	r3, r3, #32
 80074c0:	837b      	strh	r3, [r7, #26]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	8b7b      	ldrh	r3, [r7, #26]
 80074d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f00d fbfa 	bl	8014ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01f      	beq.n	800753c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007516:	833b      	strh	r3, [r7, #24]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	8b3b      	ldrh	r3, [r7, #24]
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e31f      	b.n	8007b80 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d021      	beq.n	800758e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007564:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800757a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800757e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800758a:	b29b      	uxth	r3, r3
 800758c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007594:	2b01      	cmp	r3, #1
 8007596:	f040 82ca 	bne.w	8007b2e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075a2:	441a      	add	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075b0:	441a      	add	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6a1a      	ldr	r2, [r3, #32]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d309      	bcc.n	80075d6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	621a      	str	r2, [r3, #32]
 80075d4:	e015      	b.n	8007602 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80075de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075e2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80075ec:	e009      	b.n	8007602 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d15f      	bne.n	80076ca <HAL_PCD_EP_DB_Transmit+0x3ba>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761e:	4413      	add	r3, r2
 8007620:	643b      	str	r3, [r7, #64]	@ 0x40
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	00da      	lsls	r2, r3, #3
 8007628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762a:	4413      	add	r3, r2
 800762c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800763c:	b29a      	uxth	r2, r3
 800763e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <HAL_PCD_EP_DB_Transmit+0x34e>
 8007648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e051      	b.n	8007702 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800765e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007660:	2b3e      	cmp	r3, #62	@ 0x3e
 8007662:	d816      	bhi.n	8007692 <HAL_PCD_EP_DB_Transmit+0x382>
 8007664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	653b      	str	r3, [r7, #80]	@ 0x50
 800766a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_PCD_EP_DB_Transmit+0x36a>
 8007674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007676:	3301      	adds	r3, #1
 8007678:	653b      	str	r3, [r7, #80]	@ 0x50
 800767a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29a      	uxth	r2, r3
 8007680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	029b      	lsls	r3, r3, #10
 8007686:	b29b      	uxth	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b29a      	uxth	r2, r3
 800768c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	e037      	b.n	8007702 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	653b      	str	r3, [r7, #80]	@ 0x50
 8007698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <HAL_PCD_EP_DB_Transmit+0x398>
 80076a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a4:	3b01      	subs	r3, #1
 80076a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e01b      	b.n	8007702 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d117      	bne.n	8007702 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e6:	4413      	add	r3, r2
 80076e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	00da      	lsls	r2, r3, #3
 80076f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f2:	4413      	add	r3, r2
 80076f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007700:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	891a      	ldrh	r2, [r3, #8]
 800770e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007710:	b29b      	uxth	r3, r3
 8007712:	f006 f846 	bl	800d7a2 <USB_WritePMA>
 8007716:	e20a      	b.n	8007b2e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4413      	add	r3, r2
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	4413      	add	r3, r2
 8007732:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800773c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007748:	429a      	cmp	r2, r3
 800774a:	d307      	bcc.n	800775c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007754:	1ad2      	subs	r2, r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	619a      	str	r2, [r3, #24]
 800775a:	e002      	b.n	8007762 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 80f6 	bne.w	8007958 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d126      	bne.n	80077c2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	677b      	str	r3, [r7, #116]	@ 0x74
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007788:	4413      	add	r3, r2
 800778a:	677b      	str	r3, [r7, #116]	@ 0x74
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00da      	lsls	r2, r3, #3
 8007792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007794:	4413      	add	r3, r2
 8007796:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800779a:	673b      	str	r3, [r7, #112]	@ 0x70
 800779c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e01a      	b.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d116      	bne.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077de:	4413      	add	r3, r2
 80077e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	00da      	lsls	r2, r3, #3
 80077e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ea:	4413      	add	r3, r2
 80077ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077f4:	2200      	movs	r2, #0
 80077f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d12f      	bne.n	8007868 <HAL_PCD_EP_DB_Transmit+0x558>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007818:	b29b      	uxth	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007820:	4413      	add	r3, r2
 8007822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	00da      	lsls	r2, r3, #3
 800782c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007830:	4413      	add	r3, r2
 8007832:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007836:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800783a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e01c      	b.n	80078a2 <HAL_PCD_EP_DB_Transmit+0x592>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d118      	bne.n	80078a2 <HAL_PCD_EP_DB_Transmit+0x592>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007880:	4413      	add	r3, r2
 8007882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	00da      	lsls	r2, r3, #3
 800788c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007890:	4413      	add	r3, r2
 8007892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007896:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800789a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800789e:	2200      	movs	r2, #0
 80078a0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d127      	bne.n	80078fa <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80078c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078cc:	f083 0320 	eor.w	r3, r3, #32
 80078d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	441a      	add	r2, r3
 80078e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f00d f9f0 	bl	8014ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d121      	bne.n	8007954 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	441a      	add	r2, r3
 800793c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800794c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007950:	b29b      	uxth	r3, r3
 8007952:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	e113      	b.n	8007b80 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d121      	bne.n	80079a6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800799a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	f040 80be 	bne.w	8007b2e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80079ba:	441a      	add	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80079c8:	441a      	add	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6a1a      	ldr	r2, [r3, #32]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d309      	bcc.n	80079ee <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	621a      	str	r2, [r3, #32]
 80079ec:	e015      	b.n	8007a1a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d107      	bne.n	8007a06 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80079f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80079fa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007a04:	e009      	b.n	8007a1a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d15f      	bne.n	8007ae8 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a3c:	4413      	add	r3, r2
 8007a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	00da      	lsls	r2, r3, #3
 8007a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a48:	4413      	add	r3, r2
 8007a4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <HAL_PCD_EP_DB_Transmit+0x76c>
 8007a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e04e      	b.n	8007b1a <HAL_PCD_EP_DB_Transmit+0x80a>
 8007a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a80:	d816      	bhi.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_PCD_EP_DB_Transmit+0x788>
 8007a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a94:	3301      	adds	r3, #1
 8007a96:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e034      	b.n	8007b1a <HAL_PCD_EP_DB_Transmit+0x80a>
 8007ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	029b      	lsls	r3, r3, #10
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	e018      	b.n	8007b1a <HAL_PCD_EP_DB_Transmit+0x80a>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d114      	bne.n	8007b1a <HAL_PCD_EP_DB_Transmit+0x80a>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007afe:	4413      	add	r3, r2
 8007b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00da      	lsls	r2, r3, #3
 8007b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b18:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6959      	ldr	r1, [r3, #20]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	895a      	ldrh	r2, [r3, #10]
 8007b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f005 fe3a 	bl	800d7a2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b48:	82fb      	strh	r3, [r7, #22]
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	f083 0310 	eor.w	r3, r3, #16
 8007b50:	82fb      	strh	r3, [r7, #22]
 8007b52:	8afb      	ldrh	r3, [r7, #22]
 8007b54:	f083 0320 	eor.w	r3, r3, #32
 8007b58:	82fb      	strh	r3, [r7, #22]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	8afb      	ldrh	r3, [r7, #22]
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3798      	adds	r7, #152	@ 0x98
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	817b      	strh	r3, [r7, #10]
 8007b96:	4613      	mov	r3, r2
 8007b98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007b9a:	897b      	ldrh	r3, [r7, #10]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ba6:	897b      	ldrh	r3, [r7, #10]
 8007ba8:	f003 0207 	and.w	r2, r3, #7
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	3310      	adds	r3, #16
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e009      	b.n	8007bd2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007bbe:	897a      	ldrh	r2, [r7, #10]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	80da      	strh	r2, [r3, #6]
 8007be6:	e00b      	b.n	8007c00 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2201      	movs	r2, #1
 8007bec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c68:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	@ (8007c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c72:	6013      	str	r3, [r2, #0]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	58000400 	.word	0x58000400

08007c84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007c88:	4b04      	ldr	r3, [pc, #16]	@ (8007c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	58000400 	.word	0x58000400

08007ca0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007ca4:	4b05      	ldr	r3, [pc, #20]	@ (8007cbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a04      	ldr	r2, [pc, #16]	@ (8007cbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cae:	6053      	str	r3, [r2, #4]
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	58000400 	.word	0x58000400

08007cc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cd2:	d101      	bne.n	8007cd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e000      	b.n	8007cda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <LL_RCC_HSE_Enable>:
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf6:	6013      	str	r3, [r2, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <LL_RCC_HSE_Disable>:
{
 8007d02:	b480      	push	{r7}
 8007d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d14:	6013      	str	r3, [r2, #0]
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <LL_RCC_HSE_IsReady>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d32:	d101      	bne.n	8007d38 <LL_RCC_HSE_IsReady+0x18>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <LL_RCC_HSE_IsReady+0x1a>
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LL_RCC_HSI_Enable>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d56:	6013      	str	r3, [r2, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <LL_RCC_HSI_Disable>:
{
 8007d62:	b480      	push	{r7}
 8007d64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d74:	6013      	str	r3, [r2, #0]
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <LL_RCC_HSI_IsReady>:
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d92:	d101      	bne.n	8007d98 <LL_RCC_HSI_IsReady+0x18>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <LL_RCC_HSI_IsReady+0x1a>
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	061b      	lsls	r3, r3, #24
 8007dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	604b      	str	r3, [r1, #4]
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <LL_RCC_HSI48_Enable>:
{
 8007dce:	b480      	push	{r7}
 8007dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007de6:	bf00      	nop
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <LL_RCC_HSI48_Disable>:
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <LL_RCC_HSI48_IsReady>:
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d101      	bne.n	8007e2a <LL_RCC_HSI48_IsReady+0x18>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <LL_RCC_HSI48_IsReady+0x1a>
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <LL_RCC_LSE_Enable>:
{
 8007e36:	b480      	push	{r7}
 8007e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e4e:	bf00      	nop
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_RCC_LSE_Disable>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <LL_RCC_LSE_EnableBypass>:
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e8a:	f043 0304 	orr.w	r3, r3, #4
 8007e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e92:	bf00      	nop
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <LL_RCC_LSE_DisableBypass>:
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eac:	f023 0304 	bic.w	r3, r3, #4
 8007eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <LL_RCC_LSE_IsReady>:
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d101      	bne.n	8007ed6 <LL_RCC_LSE_IsReady+0x18>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <LL_RCC_LSE_IsReady+0x1a>
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <LL_RCC_LSI1_Enable>:
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <LL_RCC_LSI1_Disable>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007f1c:	bf00      	nop
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <LL_RCC_LSI1_IsReady>:
{
 8007f26:	b480      	push	{r7}
 8007f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d101      	bne.n	8007f3e <LL_RCC_LSI1_IsReady+0x18>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <LL_RCC_LSI1_IsReady+0x1a>
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <LL_RCC_LSI2_Enable>:
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f5a:	f043 0304 	orr.w	r3, r3, #4
 8007f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007f62:	bf00      	nop
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <LL_RCC_LSI2_Disable>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f7c:	f023 0304 	bic.w	r3, r3, #4
 8007f80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <LL_RCC_LSI2_IsReady>:
{
 8007f8e:	b480      	push	{r7}
 8007f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d101      	bne.n	8007fa6 <LL_RCC_LSI2_IsReady+0x18>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <LL_RCC_LSI2_IsReady+0x1a>
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <LL_RCC_LSI2_SetTrimming>:
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <LL_RCC_MSI_Enable>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	6013      	str	r3, [r2, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <LL_RCC_MSI_Disable>:
{
 8007ffe:	b480      	push	{r7}
 8008000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	6013      	str	r3, [r2, #0]
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_RCC_MSI_IsReady>:
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b02      	cmp	r3, #2
 800802c:	d101      	bne.n	8008032 <LL_RCC_MSI_IsReady+0x16>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <LL_RCC_MSI_IsReady+0x18>
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <LL_RCC_MSI_SetRange>:
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4313      	orrs	r3, r2
 8008058:	600b      	str	r3, [r1, #0]
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <LL_RCC_MSI_GetRange>:
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800806c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008076:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2bb0      	cmp	r3, #176	@ 0xb0
 800807c:	d901      	bls.n	8008082 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800807e:	23b0      	movs	r3, #176	@ 0xb0
 8008080:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008082:	687b      	ldr	r3, [r7, #4]
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080aa:	4313      	orrs	r3, r2
 80080ac:	604b      	str	r3, [r1, #4]
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <LL_RCC_SetSysClkSource>:
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f023 0203 	bic.w	r2, r3, #3
 80080cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	608b      	str	r3, [r1, #8]
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <LL_RCC_GetSysClkSource>:
{
 80080e2:	b480      	push	{r7}
 80080e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80080e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 030c 	and.w	r3, r3, #12
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <LL_RCC_SetAHBPrescaler>:
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800810c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4313      	orrs	r3, r2
 8008114:	608b      	str	r3, [r1, #8]
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008132:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <LL_RCC_SetAHB4Prescaler>:
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800815a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800815e:	f023 020f 	bic.w	r2, r3, #15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	091b      	lsrs	r3, r3, #4
 8008166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <LL_RCC_SetAPB1Prescaler>:
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800818e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4313      	orrs	r3, r2
 8008196:	608b      	str	r3, [r1, #8]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <LL_RCC_SetAPB2Prescaler>:
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80081ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80081b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4313      	orrs	r3, r2
 80081be:	608b      	str	r3, [r1, #8]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <LL_RCC_GetAHBPrescaler>:
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80081d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <LL_RCC_GetAHB4Prescaler>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80081e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <LL_RCC_PLL_Enable>:
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800820e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008212:	6013      	str	r3, [r2, #0]
}
 8008214:	bf00      	nop
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <LL_RCC_PLL_Disable>:
{
 800821e:	b480      	push	{r7}
 8008220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800822c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008230:	6013      	str	r3, [r2, #0]
}
 8008232:	bf00      	nop
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_RCC_PLL_IsReady>:
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800824a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800824e:	d101      	bne.n	8008254 <LL_RCC_PLL_IsReady+0x18>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <LL_RCC_PLL_IsReady+0x1a>
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <LL_RCC_PLL_GetN>:
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <LL_RCC_PLL_GetR>:
{
 800827a:	b480      	push	{r7}
 800827c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800827e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008288:	4618      	mov	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <LL_RCC_PLL_GetDivider>:
{
 8008292:	b480      	push	{r7}
 8008294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <LL_RCC_PLL_GetMainSource>:
{
 80082aa:	b480      	push	{r7}
 80082ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80082ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0303 	and.w	r3, r3, #3
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80082c2:	b480      	push	{r7}
 80082c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80082c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d4:	d101      	bne.n	80082da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80082e6:	b480      	push	{r7}
 80082e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80082ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80082f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fa:	d101      	bne.n	8008300 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008314:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008320:	d101      	bne.n	8008326 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008332:	b480      	push	{r7}
 8008334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008344:	d101      	bne.n	800834a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008356:	b480      	push	{r7}
 8008358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800835a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008364:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008368:	d101      	bne.n	800836e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b08d      	sub	sp, #52	@ 0x34
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e363      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 808d 	beq.w	80084b6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800839c:	f7ff fea1 	bl	80080e2 <LL_RCC_GetSysClkSource>
 80083a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083a2:	f7ff ff82 	bl	80082aa <LL_RCC_PLL_GetMainSource>
 80083a6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80083a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_RCC_OscConfig+0x3e>
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	2b0c      	cmp	r3, #12
 80083b2:	d147      	bne.n	8008444 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d144      	bne.n	8008444 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e347      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80083ca:	f7ff fe4c 	bl	8008066 <LL_RCC_MSI_GetRange>
 80083ce:	4603      	mov	r3, r0
 80083d0:	429c      	cmp	r4, r3
 80083d2:	d914      	bls.n	80083fe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fd03 	bl	8008de4 <RCC_SetFlashLatencyFromMSIRange>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e336      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fe26 	bl	800803e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fe4a 	bl	8008090 <LL_RCC_MSI_SetCalibTrimming>
 80083fc:	e013      	b.n	8008426 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fe1b 	bl	800803e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fe3f 	bl	8008090 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fce4 	bl	8008de4 <RCC_SetFlashLatencyFromMSIRange>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e317      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008426:	f000 fcc9 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 800842a:	4603      	mov	r3, r0
 800842c:	4aa4      	ldr	r2, [pc, #656]	@ (80086c0 <HAL_RCC_OscConfig+0x344>)
 800842e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008430:	4ba4      	ldr	r3, [pc, #656]	@ (80086c4 <HAL_RCC_OscConfig+0x348>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f7fc fc07 	bl	8004c48 <HAL_InitTick>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d039      	beq.n	80084b4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e308      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800844c:	f7ff fdc8 	bl	8007fe0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008450:	f7fc fc48 	bl	8004ce4 <HAL_GetTick>
 8008454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008458:	f7fc fc44 	bl	8004ce4 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e2f5      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800846a:	f7ff fdd7 	bl	800801c <LL_RCC_MSI_IsReady>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0f1      	beq.n	8008458 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fde0 	bl	800803e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fe04 	bl	8008090 <LL_RCC_MSI_SetCalibTrimming>
 8008488:	e015      	b.n	80084b6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800848a:	f7ff fdb8 	bl	8007ffe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800848e:	f7fc fc29 	bl	8004ce4 <HAL_GetTick>
 8008492:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008494:	e008      	b.n	80084a8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008496:	f7fc fc25 	bl	8004ce4 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e2d6      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80084a8:	f7ff fdb8 	bl	800801c <LL_RCC_MSI_IsReady>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f1      	bne.n	8008496 <HAL_RCC_OscConfig+0x11a>
 80084b2:	e000      	b.n	80084b6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80084b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d047      	beq.n	8008552 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084c2:	f7ff fe0e 	bl	80080e2 <LL_RCC_GetSysClkSource>
 80084c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084c8:	f7ff feef 	bl	80082aa <LL_RCC_PLL_GetMainSource>
 80084cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d005      	beq.n	80084e0 <HAL_RCC_OscConfig+0x164>
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	2b0c      	cmp	r3, #12
 80084d8:	d108      	bne.n	80084ec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d105      	bne.n	80084ec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d134      	bne.n	8008552 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e2b4      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084f4:	d102      	bne.n	80084fc <HAL_RCC_OscConfig+0x180>
 80084f6:	f7ff fbf5 	bl	8007ce4 <LL_RCC_HSE_Enable>
 80084fa:	e001      	b.n	8008500 <HAL_RCC_OscConfig+0x184>
 80084fc:	f7ff fc01 	bl	8007d02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d012      	beq.n	800852e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fc fbec 	bl	8004ce4 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008510:	f7fc fbe8 	bl	8004ce4 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	@ 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e299      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008522:	f7ff fbfd 	bl	8007d20 <LL_RCC_HSE_IsReady>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0f1      	beq.n	8008510 <HAL_RCC_OscConfig+0x194>
 800852c:	e011      	b.n	8008552 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852e:	f7fc fbd9 	bl	8004ce4 <HAL_GetTick>
 8008532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008536:	f7fc fbd5 	bl	8004ce4 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b64      	cmp	r3, #100	@ 0x64
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e286      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008548:	f7ff fbea 	bl	8007d20 <LL_RCC_HSE_IsReady>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f1      	bne.n	8008536 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d04c      	beq.n	80085f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800855e:	f7ff fdc0 	bl	80080e2 <LL_RCC_GetSysClkSource>
 8008562:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008564:	f7ff fea1 	bl	80082aa <LL_RCC_PLL_GetMainSource>
 8008568:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b04      	cmp	r3, #4
 800856e:	d005      	beq.n	800857c <HAL_RCC_OscConfig+0x200>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d10e      	bne.n	8008594 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d10b      	bne.n	8008594 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e266      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fc09 	bl	8007da4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008592:	e031      	b.n	80085f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d019      	beq.n	80085d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800859c:	f7ff fbd2 	bl	8007d44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a0:	f7fc fba0 	bl	8004ce4 <HAL_GetTick>
 80085a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085a8:	f7fc fb9c 	bl	8004ce4 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e24d      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80085ba:	f7ff fbe1 	bl	8007d80 <LL_RCC_HSI_IsReady>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0f1      	beq.n	80085a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fbeb 	bl	8007da4 <LL_RCC_HSI_SetCalibTrimming>
 80085ce:	e013      	b.n	80085f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085d0:	f7ff fbc7 	bl	8007d62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d4:	f7fc fb86 	bl	8004ce4 <HAL_GetTick>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085dc:	f7fc fb82 	bl	8004ce4 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e233      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80085ee:	f7ff fbc7 	bl	8007d80 <LL_RCC_HSI_IsReady>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1f1      	bne.n	80085dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80a3 	beq.w	8008758 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d076      	beq.n	8008708 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b00      	cmp	r3, #0
 8008624:	d046      	beq.n	80086b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008626:	f7ff fc7e 	bl	8007f26 <LL_RCC_LSI1_IsReady>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008630:	f7ff fc57 	bl	8007ee2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008634:	f7fc fb56 	bl	8004ce4 <HAL_GetTick>
 8008638:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800863c:	f7fc fb52 	bl	8004ce4 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e203      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800864e:	f7ff fc6a 	bl	8007f26 <LL_RCC_LSI1_IsReady>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0f1      	beq.n	800863c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008658:	f7ff fc77 	bl	8007f4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865c:	f7fc fb42 	bl	8004ce4 <HAL_GetTick>
 8008660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008664:	f7fc fb3e 	bl	8004ce4 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b03      	cmp	r3, #3
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e1ef      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008676:	f7ff fc8a 	bl	8007f8e <LL_RCC_LSI2_IsReady>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f1      	beq.n	8008664 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fc94 	bl	8007fb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800868a:	f7ff fc3b 	bl	8007f04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868e:	f7fc fb29 	bl	8004ce4 <HAL_GetTick>
 8008692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008696:	f7fc fb25 	bl	8004ce4 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e1d6      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80086a8:	f7ff fc3d 	bl	8007f26 <LL_RCC_LSI1_IsReady>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f1      	bne.n	8008696 <HAL_RCC_OscConfig+0x31a>
 80086b2:	e051      	b.n	8008758 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80086b4:	f7ff fc15 	bl	8007ee2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b8:	f7fc fb14 	bl	8004ce4 <HAL_GetTick>
 80086bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80086be:	e00c      	b.n	80086da <HAL_RCC_OscConfig+0x35e>
 80086c0:	20000010 	.word	0x20000010
 80086c4:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80086c8:	f7fc fb0c 	bl	8004ce4 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e1bd      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80086da:	f7ff fc24 	bl	8007f26 <LL_RCC_LSI1_IsReady>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f1      	beq.n	80086c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80086e4:	f7ff fc42 	bl	8007f6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80086e8:	e008      	b.n	80086fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80086ea:	f7fc fafb 	bl	8004ce4 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d901      	bls.n	80086fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e1ac      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80086fc:	f7ff fc47 	bl	8007f8e <LL_RCC_LSI2_IsReady>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f1      	bne.n	80086ea <HAL_RCC_OscConfig+0x36e>
 8008706:	e027      	b.n	8008758 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008708:	f7ff fc30 	bl	8007f6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fc faea 	bl	8004ce4 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008714:	f7fc fae6 	bl	8004ce4 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e197      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008726:	f7ff fc32 	bl	8007f8e <LL_RCC_LSI2_IsReady>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f1      	bne.n	8008714 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008730:	f7ff fbe8 	bl	8007f04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008734:	f7fc fad6 	bl	8004ce4 <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800873c:	f7fc fad2 	bl	8004ce4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e183      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800874e:	f7ff fbea 	bl	8007f26 <LL_RCC_LSI1_IsReady>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f1      	bne.n	800873c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d05b      	beq.n	800881c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008764:	4ba7      	ldr	r3, [pc, #668]	@ (8008a04 <HAL_RCC_OscConfig+0x688>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d114      	bne.n	800879a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008770:	f7ff fa78 	bl	8007c64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008774:	f7fc fab6 	bl	8004ce4 <HAL_GetTick>
 8008778:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800877c:	f7fc fab2 	bl	8004ce4 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e163      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800878e:	4b9d      	ldr	r3, [pc, #628]	@ (8008a04 <HAL_RCC_OscConfig+0x688>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d102      	bne.n	80087a8 <HAL_RCC_OscConfig+0x42c>
 80087a2:	f7ff fb48 	bl	8007e36 <LL_RCC_LSE_Enable>
 80087a6:	e00c      	b.n	80087c2 <HAL_RCC_OscConfig+0x446>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d104      	bne.n	80087ba <HAL_RCC_OscConfig+0x43e>
 80087b0:	f7ff fb63 	bl	8007e7a <LL_RCC_LSE_EnableBypass>
 80087b4:	f7ff fb3f 	bl	8007e36 <LL_RCC_LSE_Enable>
 80087b8:	e003      	b.n	80087c2 <HAL_RCC_OscConfig+0x446>
 80087ba:	f7ff fb4d 	bl	8007e58 <LL_RCC_LSE_Disable>
 80087be:	f7ff fb6d 	bl	8007e9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d014      	beq.n	80087f4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ca:	f7fc fa8b 	bl	8004ce4 <HAL_GetTick>
 80087ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80087d0:	e00a      	b.n	80087e8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d2:	f7fc fa87 	bl	8004ce4 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e136      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80087e8:	f7ff fb69 	bl	8007ebe <LL_RCC_LSE_IsReady>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ef      	beq.n	80087d2 <HAL_RCC_OscConfig+0x456>
 80087f2:	e013      	b.n	800881c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fc fa76 	bl	8004ce4 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087fc:	f7fc fa72 	bl	8004ce4 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e121      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008812:	f7ff fb54 	bl	8007ebe <LL_RCC_LSE_IsReady>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1ef      	bne.n	80087fc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02c      	beq.n	8008882 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d014      	beq.n	800885a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008830:	f7ff facd 	bl	8007dce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008834:	f7fc fa56 	bl	8004ce4 <HAL_GetTick>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800883c:	f7fc fa52 	bl	8004ce4 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e103      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800884e:	f7ff fae0 	bl	8007e12 <LL_RCC_HSI48_IsReady>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f1      	beq.n	800883c <HAL_RCC_OscConfig+0x4c0>
 8008858:	e013      	b.n	8008882 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800885a:	f7ff fac9 	bl	8007df0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885e:	f7fc fa41 	bl	8004ce4 <HAL_GetTick>
 8008862:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008864:	e008      	b.n	8008878 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008866:	f7fc fa3d 	bl	8004ce4 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e0ee      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008878:	f7ff facb 	bl	8007e12 <LL_RCC_HSI48_IsReady>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f1      	bne.n	8008866 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80e4 	beq.w	8008a54 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800888c:	f7ff fc29 	bl	80080e2 <LL_RCC_GetSysClkSource>
 8008890:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889e:	2b02      	cmp	r3, #2
 80088a0:	f040 80b4 	bne.w	8008a0c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0203 	and.w	r2, r3, #3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d123      	bne.n	80088fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088bc:	429a      	cmp	r2, r3
 80088be:	d11c      	bne.n	80088fa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	0a1b      	lsrs	r3, r3, #8
 80088c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d114      	bne.n	80088fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80088da:	429a      	cmp	r2, r3
 80088dc:	d10d      	bne.n	80088fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d106      	bne.n	80088fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d05d      	beq.n	80089b6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d058      	beq.n	80089b2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e0a1      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008912:	f7ff fc84 	bl	800821e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008916:	f7fc f9e5 	bl	8004ce4 <HAL_GetTick>
 800891a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800891e:	f7fc f9e1 	bl	8004ce4 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e092      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ef      	bne.n	800891e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800893e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	4b30      	ldr	r3, [pc, #192]	@ (8008a08 <HAL_RCC_OscConfig+0x68c>)
 8008946:	4013      	ands	r3, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008950:	4311      	orrs	r1, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008956:	0212      	lsls	r2, r2, #8
 8008958:	4311      	orrs	r1, r2
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800895e:	4311      	orrs	r1, r2
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008964:	4311      	orrs	r1, r2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800896a:	430a      	orrs	r2, r1
 800896c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008970:	4313      	orrs	r3, r2
 8008972:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008974:	f7ff fc44 	bl	8008200 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008988:	f7fc f9ac 	bl	8004ce4 <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008990:	f7fc f9a8 	bl	8004ce4 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e059      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0ef      	beq.n	8008990 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089b0:	e050      	b.n	8008a54 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e04f      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d147      	bne.n	8008a54 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80089c4:	f7ff fc1c 	bl	8008200 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089d8:	f7fc f984 	bl	8004ce4 <HAL_GetTick>
 80089dc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e0:	f7fc f980 	bl	8004ce4 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e031      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0ef      	beq.n	80089e0 <HAL_RCC_OscConfig+0x664>
 8008a00:	e028      	b.n	8008a54 <HAL_RCC_OscConfig+0x6d8>
 8008a02:	bf00      	nop
 8008a04:	58000400 	.word	0x58000400
 8008a08:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2b0c      	cmp	r3, #12
 8008a10:	d01e      	beq.n	8008a50 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a12:	f7ff fc04 	bl	800821e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a16:	f7fc f965 	bl	8004ce4 <HAL_GetTick>
 8008a1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1e:	f7fc f961 	bl	8004ce4 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e012      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1ef      	bne.n	8008a1e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a48:	4b05      	ldr	r3, [pc, #20]	@ (8008a60 <HAL_RCC_OscConfig+0x6e4>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	60cb      	str	r3, [r1, #12]
 8008a4e:	e001      	b.n	8008a54 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e000      	b.n	8008a56 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3734      	adds	r7, #52	@ 0x34
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd90      	pop	{r4, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	eefefffc 	.word	0xeefefffc

08008a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e12d      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a78:	4b98      	ldr	r3, [pc, #608]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d91b      	bls.n	8008abe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a86:	4b95      	ldr	r3, [pc, #596]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f023 0207 	bic.w	r2, r3, #7
 8008a8e:	4993      	ldr	r1, [pc, #588]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a96:	f7fc f925 	bl	8004ce4 <HAL_GetTick>
 8008a9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a9e:	f7fc f921 	bl	8004ce4 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d901      	bls.n	8008ab0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e111      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d1ef      	bne.n	8008a9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d016      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fb13 	bl	80080fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ad4:	f7fc f906 	bl	8004ce4 <HAL_GetTick>
 8008ad8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008adc:	f7fc f902 	bl	8004ce4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e0f2      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008aee:	f7ff fbe8 	bl	80082c2 <LL_RCC_IsActiveFlag_HPRE>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f1      	beq.n	8008adc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d016      	beq.n	8008b32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fb0a 	bl	8008122 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b0e:	f7fc f8e9 	bl	8004ce4 <HAL_GetTick>
 8008b12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b16:	f7fc f8e5 	bl	8004ce4 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e0d5      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008b28:	f7ff fbdd 	bl	80082e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f1      	beq.n	8008b16 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff fb03 	bl	800814e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b48:	f7fc f8cc 	bl	8004ce4 <HAL_GetTick>
 8008b4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b50:	f7fc f8c8 	bl	8004ce4 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e0b8      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008b62:	f7ff fbd3 	bl	800830c <LL_RCC_IsActiveFlag_SHDHPRE>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0f1      	beq.n	8008b50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d016      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fafd 	bl	800817c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b82:	f7fc f8af 	bl	8004ce4 <HAL_GetTick>
 8008b86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008b88:	e008      	b.n	8008b9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b8a:	f7fc f8ab 	bl	8004ce4 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d901      	bls.n	8008b9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e09b      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008b9c:	f7ff fbc9 	bl	8008332 <LL_RCC_IsActiveFlag_PPRE1>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f1      	beq.n	8008b8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d017      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff faf3 	bl	80081a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008bbe:	f7fc f891 	bl	8004ce4 <HAL_GetTick>
 8008bc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008bc4:	e008      	b.n	8008bd8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008bc6:	f7fc f88d 	bl	8004ce4 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d901      	bls.n	8008bd8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e07d      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008bd8:	f7ff fbbd 	bl	8008356 <LL_RCC_IsActiveFlag_PPRE2>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f1      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d043      	beq.n	8008c76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d106      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008bf6:	f7ff f893 	bl	8007d20 <LL_RCC_HSE_IsReady>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11e      	bne.n	8008c3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e067      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d106      	bne.n	8008c1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008c0c:	f7ff fb16 	bl	800823c <LL_RCC_PLL_IsReady>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d113      	bne.n	8008c3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e05c      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008c22:	f7ff f9fb 	bl	800801c <LL_RCC_MSI_IsReady>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d108      	bne.n	8008c3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e051      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008c30:	f7ff f8a6 	bl	8007d80 <LL_RCC_HSI_IsReady>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e04a      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fa39 	bl	80080ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c48:	f7fc f84c 	bl	8004ce4 <HAL_GetTick>
 8008c4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4e:	e00a      	b.n	8008c66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c50:	f7fc f848 	bl	8004ce4 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e036      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c66:	f7ff fa3c 	bl	80080e2 <LL_RCC_GetSysClkSource>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1ec      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c76:	4b19      	ldr	r3, [pc, #100]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d21b      	bcs.n	8008cbc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c84:	4b15      	ldr	r3, [pc, #84]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f023 0207 	bic.w	r2, r3, #7
 8008c8c:	4913      	ldr	r1, [pc, #76]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c94:	f7fc f826 	bl	8004ce4 <HAL_GetTick>
 8008c98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c9c:	f7fc f822 	bl	8004ce4 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e012      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cae:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <HAL_RCC_ClockConfig+0x278>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d1ef      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008cbc:	f000 f87e 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	4a07      	ldr	r2, [pc, #28]	@ (8008ce0 <HAL_RCC_ClockConfig+0x27c>)
 8008cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008cc6:	f7fc f819 	bl	8004cfc <HAL_GetTickPrio>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fb ffbb 	bl	8004c48 <HAL_InitTick>
 8008cd2:	4603      	mov	r3, r0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	58004000 	.word	0x58004000
 8008ce0:	20000010 	.word	0x20000010

08008ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cea:	f7ff f9fa 	bl	80080e2 <LL_RCC_GetSysClkSource>
 8008cee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008cf6:	f7ff f9b6 	bl	8008066 <LL_RCC_MSI_GetRange>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	091b      	lsrs	r3, r3, #4
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	4a2b      	ldr	r2, [pc, #172]	@ (8008db0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e04b      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d102      	bne.n	8008d18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008d12:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e045      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d10a      	bne.n	8008d34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008d1e:	f7fe ffcf 	bl	8007cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d102      	bne.n	8008d2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008d28:	4b22      	ldr	r3, [pc, #136]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e03a      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008d2e:	4b22      	ldr	r3, [pc, #136]	@ (8008db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	e037      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008d34:	f7ff fab9 	bl	80082aa <LL_RCC_PLL_GetMainSource>
 8008d38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d003      	beq.n	8008d48 <HAL_RCC_GetSysClockFreq+0x64>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d003      	beq.n	8008d4e <HAL_RCC_GetSysClockFreq+0x6a>
 8008d46:	e00d      	b.n	8008d64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008d48:	4b1a      	ldr	r3, [pc, #104]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d4a:	60bb      	str	r3, [r7, #8]
        break;
 8008d4c:	e015      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008d4e:	f7fe ffb7 	bl	8007cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008d58:	4b16      	ldr	r3, [pc, #88]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008d5c:	e00d      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008d5e:	4b16      	ldr	r3, [pc, #88]	@ (8008db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008d60:	60bb      	str	r3, [r7, #8]
        break;
 8008d62:	e00a      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008d64:	f7ff f97f 	bl	8008066 <LL_RCC_MSI_GetRange>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	4a0f      	ldr	r2, [pc, #60]	@ (8008db0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d76:	60bb      	str	r3, [r7, #8]
        break;
 8008d78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008d7a:	f7ff fa71 	bl	8008260 <LL_RCC_PLL_GetN>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	fb03 f402 	mul.w	r4, r3, r2
 8008d86:	f7ff fa84 	bl	8008292 <LL_RCC_PLL_GetDivider>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	091b      	lsrs	r3, r3, #4
 8008d8e:	3301      	adds	r3, #1
 8008d90:	fbb4 f4f3 	udiv	r4, r4, r3
 8008d94:	f7ff fa71 	bl	800827a <LL_RCC_PLL_GetR>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	0f5b      	lsrs	r3, r3, #29
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008da2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}
 8008dae:	bf00      	nop
 8008db0:	0801a410 	.word	0x0801a410
 8008db4:	00f42400 	.word	0x00f42400
 8008db8:	01e84800 	.word	0x01e84800

08008dbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dbc:	b598      	push	{r3, r4, r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008dc0:	f7ff ff90 	bl	8008ce4 <HAL_RCC_GetSysClockFreq>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f7ff fa01 	bl	80081cc <LL_RCC_GetAHBPrescaler>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	4a03      	ldr	r2, [pc, #12]	@ (8008de0 <HAL_RCC_GetHCLKFreq+0x24>)
 8008dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	bd98      	pop	{r3, r4, r7, pc}
 8008de0:	0801a3d0 	.word	0x0801a3d0

08008de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2bb0      	cmp	r3, #176	@ 0xb0
 8008df0:	d903      	bls.n	8008dfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008df2:	4b15      	ldr	r3, [pc, #84]	@ (8008e48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	e007      	b.n	8008e0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	091b      	lsrs	r3, r3, #4
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	4a11      	ldr	r2, [pc, #68]	@ (8008e48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008e0a:	f7ff f9eb 	bl	80081e4 <LL_RCC_GetAHB4Prescaler>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	091b      	lsrs	r3, r3, #4
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	4a0d      	ldr	r2, [pc, #52]	@ (8008e4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	4a0a      	ldr	r2, [pc, #40]	@ (8008e50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	0c9c      	lsrs	r4, r3, #18
 8008e2e:	f7fe ff29 	bl	8007c84 <HAL_PWREx_GetVoltageRange>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4619      	mov	r1, r3
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f80c 	bl	8008e54 <RCC_SetFlashLatency>
 8008e3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd90      	pop	{r4, r7, pc}
 8008e46:	bf00      	nop
 8008e48:	0801a410 	.word	0x0801a410
 8008e4c:	0801a3d0 	.word	0x0801a3d0
 8008e50:	431bde83 	.word	0x431bde83

08008e54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008e54:	b590      	push	{r4, r7, lr}
 8008e56:	b093      	sub	sp, #76	@ 0x4c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008e5e:	4b37      	ldr	r3, [pc, #220]	@ (8008f3c <RCC_SetFlashLatency+0xe8>)
 8008e60:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008e6a:	4a35      	ldr	r2, [pc, #212]	@ (8008f40 <RCC_SetFlashLatency+0xec>)
 8008e6c:	f107 031c 	add.w	r3, r7, #28
 8008e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008e76:	4b33      	ldr	r3, [pc, #204]	@ (8008f44 <RCC_SetFlashLatency+0xf0>)
 8008e78:	f107 040c 	add.w	r4, r7, #12
 8008e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008e82:	2300      	movs	r3, #0
 8008e84:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8c:	d11a      	bne.n	8008ec4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e92:	e013      	b.n	8008ebc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	3348      	adds	r3, #72	@ 0x48
 8008e9a:	443b      	add	r3, r7
 8008e9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d807      	bhi.n	8008eb6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	3348      	adds	r3, #72	@ 0x48
 8008eac:	443b      	add	r3, r7
 8008eae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008eb2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008eb4:	e020      	b.n	8008ef8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb8:	3301      	adds	r3, #1
 8008eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d9e8      	bls.n	8008e94 <RCC_SetFlashLatency+0x40>
 8008ec2:	e019      	b.n	8008ef8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec8:	e013      	b.n	8008ef2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	3348      	adds	r3, #72	@ 0x48
 8008ed0:	443b      	add	r3, r7
 8008ed2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d807      	bhi.n	8008eec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	3348      	adds	r3, #72	@ 0x48
 8008ee2:	443b      	add	r3, r7
 8008ee4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ee8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008eea:	e005      	b.n	8008ef8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eee:	3301      	adds	r3, #1
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d9e8      	bls.n	8008eca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008ef8:	4b13      	ldr	r3, [pc, #76]	@ (8008f48 <RCC_SetFlashLatency+0xf4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f023 0207 	bic.w	r2, r3, #7
 8008f00:	4911      	ldr	r1, [pc, #68]	@ (8008f48 <RCC_SetFlashLatency+0xf4>)
 8008f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f04:	4313      	orrs	r3, r2
 8008f06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f08:	f7fb feec 	bl	8004ce4 <HAL_GetTick>
 8008f0c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008f0e:	e008      	b.n	8008f22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f10:	f7fb fee8 	bl	8004ce4 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e007      	b.n	8008f32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008f22:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <RCC_SetFlashLatency+0xf4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d1ef      	bne.n	8008f10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	374c      	adds	r7, #76	@ 0x4c
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08018ac0 	.word	0x08018ac0
 8008f40:	08018ad0 	.word	0x08018ad0
 8008f44:	08018adc 	.word	0x08018adc
 8008f48:	58004000 	.word	0x58004000

08008f4c <LL_RCC_LSE_IsEnabled>:
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <LL_RCC_LSE_IsEnabled+0x18>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <LL_RCC_LSE_IsEnabled+0x1a>
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <LL_RCC_LSE_IsReady>:
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d101      	bne.n	8008f88 <LL_RCC_LSE_IsReady+0x18>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e000      	b.n	8008f8a <LL_RCC_LSE_IsReady+0x1a>
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <LL_RCC_SetRFWKPClockSource>:
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fa4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <LL_RCC_SetSMPSClockSource>:
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fce:	f023 0203 	bic.w	r2, r3, #3
 8008fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <LL_RCC_SetSMPSPrescaler>:
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4313      	orrs	r3, r2
 8009002:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <LL_RCC_SetUSARTClockSource>:
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800901c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009020:	f023 0203 	bic.w	r2, r3, #3
 8009024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4313      	orrs	r3, r2
 800902c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <LL_RCC_SetLPUARTClockSource>:
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800904c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4313      	orrs	r3, r2
 8009058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <LL_RCC_SetI2CClockSource>:
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009074:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	091b      	lsrs	r3, r3, #4
 800907c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800908c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009090:	4313      	orrs	r3, r2
 8009092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <LL_RCC_SetLPTIMClockSource>:
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80090aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	43db      	mvns	r3, r3
 80090ba:	401a      	ands	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	041b      	lsls	r3, r3, #16
 80090c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <LL_RCC_SetSAIClockSource>:
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80090de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <LL_RCC_SetRNGClockSource>:
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800910a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009112:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009122:	bf00      	nop
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <LL_RCC_SetCLK48ClockSource>:
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800913a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800913e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <LL_RCC_SetUSBClockSource>:
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ffe3 	bl	800912e <LL_RCC_SetCLK48ClockSource>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <LL_RCC_SetADCClockSource>:
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800917c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009180:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009184:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <LL_RCC_SetRTCClockSource>:
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80091a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <LL_RCC_GetRTCClockSource>:
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80091cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80091d8:	4618      	mov	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <LL_RCC_ForceBackupDomainReset>:
{
 80091e2:	b480      	push	{r7}
 80091e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80091e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800921c:	bf00      	nop
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <LL_RCC_PLLSAI1_Enable>:
{
 8009226:	b480      	push	{r7}
 8009228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800922a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009234:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009238:	6013      	str	r3, [r2, #0]
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_RCC_PLLSAI1_Disable>:
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009252:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009256:	6013      	str	r3, [r2, #0]
}
 8009258:	bf00      	nop
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <LL_RCC_PLLSAI1_IsReady>:
{
 8009262:	b480      	push	{r7}
 8009264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009274:	d101      	bne.n	800927a <LL_RCC_PLLSAI1_IsReady+0x18>
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <LL_APB1_GRP1_ForceReset>:
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800928e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009294:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4313      	orrs	r3, r2
 800929c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <LL_APB1_GRP1_ReleaseReset>:
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80092b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092c0:	4013      	ands	r3, r2
 80092c2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80092d8:	2300      	movs	r3, #0
 80092da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80092dc:	2300      	movs	r3, #0
 80092de:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d034      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80092f4:	d021      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80092f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80092fa:	d81b      	bhi.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009300:	d01d      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009306:	d815      	bhi.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800930c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009310:	d110      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800931c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009320:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009322:	e00d      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f981 	bl	8009630 <RCCEx_PLLSAI1_ConfigNP>
 800932e:	4603      	mov	r3, r0
 8009330:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009332:	e005      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	77fb      	strb	r3, [r7, #31]
        break;
 8009338:	e002      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800933a:	bf00      	nop
 800933c:	e000      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800933e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009340:	7ffb      	ldrb	r3, [r7, #31]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fec3 	bl	80090d6 <LL_RCC_SetSAIClockSource>
 8009350:	e001      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009352:	7ffb      	ldrb	r3, [r7, #31]
 8009354:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800935e:	2b00      	cmp	r3, #0
 8009360:	d046      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009362:	f7ff ff31 	bl	80091c8 <LL_RCC_GetRTCClockSource>
 8009366:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	429a      	cmp	r2, r3
 8009370:	d03c      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009372:	f7fe fc77 	bl	8007c64 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff ff0b 	bl	800919c <LL_RCC_SetRTCClockSource>
 8009386:	e02e      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009392:	f7ff ff26 	bl	80091e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009396:	f7ff ff35 	bl	8009204 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a4:	4313      	orrs	r3, r2
 80093a6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80093a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80093b2:	f7ff fdcb 	bl	8008f4c <LL_RCC_LSE_IsEnabled>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d114      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093bc:	f7fb fc92 	bl	8004ce4 <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80093c2:	e00b      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c4:	f7fb fc8e 	bl	8004ce4 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d902      	bls.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	77fb      	strb	r3, [r7, #31]
              break;
 80093da:	e004      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80093dc:	f7ff fdc8 	bl	8008f70 <LL_RCC_LSE_IsReady>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d1ee      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80093e6:	7ffb      	ldrb	r3, [r7, #31]
 80093e8:	77bb      	strb	r3, [r7, #30]
 80093ea:	e001      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	7ffb      	ldrb	r3, [r7, #31]
 80093ee:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fe05 	bl	8009010 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fe10 	bl	800903c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fe38 	bl	80090a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fe2d 	bl	80090a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff fe05 	bl	8009068 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff fdfa 	bl	8009068 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d022      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff fe68 	bl	800915a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009492:	d107      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800949e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094a2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094ac:	d10b      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f917 	bl	80096e6 <RCCEx_PLLSAI1_ConfigNQ>
 80094b8:	4603      	mov	r3, r0
 80094ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80094bc:	7ffb      	ldrb	r3, [r7, #31]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d02b      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094da:	d008      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094e4:	d003      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fe05 	bl	8009102 <LL_RCC_SetRNGClockSource>
 80094f8:	e00a      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	2000      	movs	r0, #0
 8009506:	f7ff fdfc 	bl	8009102 <LL_RCC_SetRNGClockSource>
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe0f 	bl	800912e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009518:	d107      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800951a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009528:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009532:	2b00      	cmp	r3, #0
 8009534:	d022      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fe18 	bl	8009170 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009548:	d107      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800954a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009558:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009562:	d10b      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f917 	bl	800979c <RCCEx_PLLSAI1_ConfigNR>
 800956e:	4603      	mov	r3, r0
 8009570:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009572:	7ffb      	ldrb	r3, [r7, #31]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009578:	7ffb      	ldrb	r3, [r7, #31]
 800957a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fd01 	bl	8008f94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff fd20 	bl	8008fe8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fd07 	bl	8008fc0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80095b2:	7fbb      	ldrb	r3, [r7, #30]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80095c4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80095c8:	f7ff fe5d 	bl	8009286 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80095cc:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80095d0:	f7ff fe6b 	bl	80092aa <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	431a      	orrs	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80095fc:	4a0b      	ldr	r2, [pc, #44]	@ (800962c <HAL_RCCEx_CRSConfig+0x70>)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <HAL_RCCEx_CRSConfig+0x70>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	4906      	ldr	r1, [pc, #24]	@ (800962c <HAL_RCCEx_CRSConfig+0x70>)
 8009612:	4313      	orrs	r3, r2
 8009614:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009616:	4b05      	ldr	r3, [pc, #20]	@ (800962c <HAL_RCCEx_CRSConfig+0x70>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a04      	ldr	r2, [pc, #16]	@ (800962c <HAL_RCCEx_CRSConfig+0x70>)
 800961c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009620:	6013      	str	r3, [r2, #0]
}
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	40006000 	.word	0x40006000

08009630 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800963c:	f7ff fe02 	bl	8009244 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009640:	f7fb fb50 	bl	8004ce4 <HAL_GetTick>
 8009644:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009646:	e009      	b.n	800965c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009648:	f7fb fb4c 	bl	8004ce4 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d902      	bls.n	800965c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	73fb      	strb	r3, [r7, #15]
      break;
 800965a:	e004      	b.n	8009666 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800965c:	f7ff fe01 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1f0      	bne.n	8009648 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d137      	bne.n	80096dc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800966c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009680:	4313      	orrs	r3, r2
 8009682:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009696:	4313      	orrs	r3, r2
 8009698:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800969a:	f7ff fdc4 	bl	8009226 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969e:	f7fb fb21 	bl	8004ce4 <HAL_GetTick>
 80096a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80096a4:	e009      	b.n	80096ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096a6:	f7fb fb1d 	bl	8004ce4 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d902      	bls.n	80096ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	73fb      	strb	r3, [r7, #15]
        break;
 80096b8:	e004      	b.n	80096c4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80096ba:	f7ff fdd2 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d1f0      	bne.n	80096a6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d108      	bne.n	80096dc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80096ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096d8:	4313      	orrs	r3, r2
 80096da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80096f2:	f7ff fda7 	bl	8009244 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80096f6:	f7fb faf5 	bl	8004ce4 <HAL_GetTick>
 80096fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80096fc:	e009      	b.n	8009712 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096fe:	f7fb faf1 	bl	8004ce4 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	2b02      	cmp	r3, #2
 800970a:	d902      	bls.n	8009712 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	73fb      	strb	r3, [r7, #15]
      break;
 8009710:	e004      	b.n	800971c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009712:	f7ff fda6 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f0      	bne.n	80096fe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d137      	bne.n	8009792 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009736:	4313      	orrs	r3, r2
 8009738:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800973a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800974c:	4313      	orrs	r3, r2
 800974e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009750:	f7ff fd69 	bl	8009226 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009754:	f7fb fac6 	bl	8004ce4 <HAL_GetTick>
 8009758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800975a:	e009      	b.n	8009770 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800975c:	f7fb fac2 	bl	8004ce4 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d902      	bls.n	8009770 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	73fb      	strb	r3, [r7, #15]
        break;
 800976e:	e004      	b.n	800977a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009770:	f7ff fd77 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 8009774:	4603      	mov	r3, r0
 8009776:	2b01      	cmp	r3, #1
 8009778:	d1f0      	bne.n	800975c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d108      	bne.n	8009792 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800978e:	4313      	orrs	r3, r2
 8009790:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80097a8:	f7ff fd4c 	bl	8009244 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80097ac:	f7fb fa9a 	bl	8004ce4 <HAL_GetTick>
 80097b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097b2:	e009      	b.n	80097c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097b4:	f7fb fa96 	bl	8004ce4 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d902      	bls.n	80097c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
      break;
 80097c6:	e004      	b.n	80097d2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097c8:	f7ff fd4b 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f0      	bne.n	80097b4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d137      	bne.n	8009848 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80097d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80097ec:	4313      	orrs	r3, r2
 80097ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80097f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009802:	4313      	orrs	r3, r2
 8009804:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009806:	f7ff fd0e 	bl	8009226 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980a:	f7fb fa6b 	bl	8004ce4 <HAL_GetTick>
 800980e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009810:	e009      	b.n	8009826 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009812:	f7fb fa67 	bl	8004ce4 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d902      	bls.n	8009826 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	73fb      	strb	r3, [r7, #15]
        break;
 8009824:	e004      	b.n	8009830 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009826:	f7ff fd1c 	bl	8009262 <LL_RCC_PLLSAI1_IsReady>
 800982a:	4603      	mov	r3, r0
 800982c:	2b01      	cmp	r3, #1
 800982e:	d1f0      	bne.n	8009812 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009844:	4313      	orrs	r3, r2
 8009846:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e027      	b.n	80098b4 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7a5b      	ldrb	r3, [r3, #9]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7fa feb7 	bl	80045e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 0120 	bic.w	r1, r3, #32
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0204 	orr.w	r2, r2, #4
 80098a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2210      	movs	r2, #16
 80098de:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 80098e0:	2301      	movs	r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	e009      	b.n	80098fa <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2208      	movs	r2, #8
 80098f4:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 80098f6:	2301      	movs	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10b      	bne.n	8009918 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2204      	movs	r2, #4
 8009904:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f837 	bl	800997a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009914:	605a      	str	r2, [r3, #4]

    return;
 8009916:	e022      	b.n	800995e <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01d      	beq.n	800995e <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0208 	bic.w	r2, r2, #8
 8009930:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7a5b      	ldrb	r3, [r3, #9]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b04      	cmp	r3, #4
 8009944:	d00b      	beq.n	800995e <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f803 	bl	8009964 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e09f      	b.n	8009ae2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fa fe48 	bl	800464c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80099c4:	4b49      	ldr	r3, [pc, #292]	@ (8009aec <HAL_RTC_Init+0x15c>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b10      	cmp	r3, #16
 80099ce:	d07e      	beq.n	8009ace <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	22ca      	movs	r2, #202	@ 0xca
 80099d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2253      	movs	r2, #83	@ 0x53
 80099de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8ab 	bl	8009b3c <RTC_EnterInitMode>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	22ff      	movs	r2, #255	@ 0xff
 80099f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2204      	movs	r2, #4
 80099f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
 8009a00:	e067      	b.n	8009ad2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a14:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6899      	ldr	r1, [r3, #8]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	68d2      	ldr	r2, [r2, #12]
 8009a3c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6919      	ldr	r1, [r3, #16]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	041a      	lsls	r2, r3, #16
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a60:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0203 	bic.w	r2, r2, #3
 8009a70:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d113      	bne.n	8009ac0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f829 	bl	8009af0 <HAL_RTC_WaitForSynchro>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00d      	beq.n	8009ac0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	22ff      	movs	r2, #255	@ 0xff
 8009aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e010      	b.n	8009ae2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	22ff      	movs	r2, #255	@ 0xff
 8009ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
 8009acc:	e001      	b.n	8009ad2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d103      	bne.n	8009ae0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40002800 	.word	0x40002800

08009af0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009b06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009b08:	f7fb f8ec 	bl	8004ce4 <HAL_GetTick>
 8009b0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b0e:	e009      	b.n	8009b24 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b10:	f7fb f8e8 	bl	8004ce4 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b1e:	d901      	bls.n	8009b24 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e007      	b.n	8009b34 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0ee      	beq.n	8009b10 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d119      	bne.n	8009b86 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b5c:	f7fb f8c2 	bl	8004ce4 <HAL_GetTick>
 8009b60:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b62:	e009      	b.n	8009b78 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b64:	f7fb f8be 	bl	8004ce4 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b72:	d901      	bls.n	8009b78 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e007      	b.n	8009b88 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0ee      	beq.n	8009b64 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e0a8      	b.n	8009cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	22ca      	movs	r2, #202	@ 0xca
 8009bc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2253      	movs	r2, #83	@ 0x53
 8009bc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d020      	beq.n	8009c1a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009bd8:	f7fb f884 	bl	8004ce4 <HAL_GetTick>
 8009bdc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009bde:	e015      	b.n	8009c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009be0:	f7fb f880 	bl	8004ce4 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bee:	d90d      	bls.n	8009c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	22ff      	movs	r2, #255	@ 0xff
 8009bf6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2203      	movs	r2, #3
 8009bfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e077      	b.n	8009cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e2      	bne.n	8009be0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c28:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009c3a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009c3c:	f7fb f852 	bl	8004ce4 <HAL_GetTick>
 8009c40:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009c42:	e015      	b.n	8009c70 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c44:	f7fb f84e 	bl	8004ce4 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c52:	d90d      	bls.n	8009c70 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	22ff      	movs	r2, #255	@ 0xff
 8009c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e045      	b.n	8009cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0304 	and.w	r3, r3, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0e2      	beq.n	8009c44 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0207 	bic.w	r2, r2, #7
 8009c94:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6899      	ldr	r1, [r3, #8]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009ca6:	4b17      	ldr	r3, [pc, #92]	@ (8009d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cac:	4a15      	ldr	r2, [pc, #84]	@ (8009d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cb2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009cb6:	4b13      	ldr	r3, [pc, #76]	@ (8009d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a12      	ldr	r2, [pc, #72]	@ (8009d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cc0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cd0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ce0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	22ff      	movs	r2, #255	@ 0xff
 8009ce8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	58000800 	.word	0x58000800

08009d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e095      	b.n	8009e46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d108      	bne.n	8009d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d2a:	d009      	beq.n	8009d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	61da      	str	r2, [r3, #28]
 8009d32:	e005      	b.n	8009d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fa fcaa 	bl	80046b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d80:	d902      	bls.n	8009d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e002      	b.n	8009d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009d96:	d007      	beq.n	8009da8 <HAL_SPI_Init+0xa0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009da0:	d002      	beq.n	8009da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009de0:	431a      	orrs	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	ea42 0103 	orr.w	r1, r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	0c1b      	lsrs	r3, r3, #16
 8009e04:	f003 0204 	and.w	r2, r3, #4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0c:	f003 0310 	and.w	r3, r3, #16
 8009e10:	431a      	orrs	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009e24:	ea42 0103 	orr.w	r1, r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b088      	sub	sp, #32
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	603b      	str	r3, [r7, #0]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e5e:	f7fa ff41 	bl	8004ce4 <HAL_GetTick>
 8009e62:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d001      	beq.n	8009e78 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009e74:	2302      	movs	r3, #2
 8009e76:	e15c      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_SPI_Transmit+0x36>
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e154      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d101      	bne.n	8009e96 <HAL_SPI_Transmit+0x48>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e14d      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	88fa      	ldrh	r2, [r7, #6]
 8009eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	88fa      	ldrh	r2, [r7, #6]
 8009ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee8:	d10f      	bne.n	8009f0a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f14:	2b40      	cmp	r3, #64	@ 0x40
 8009f16:	d007      	beq.n	8009f28 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f30:	d952      	bls.n	8009fd8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <HAL_SPI_Transmit+0xf2>
 8009f3a:	8b7b      	ldrh	r3, [r7, #26]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d145      	bne.n	8009fcc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f44:	881a      	ldrh	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	1c9a      	adds	r2, r3, #2
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009f64:	e032      	b.n	8009fcc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d112      	bne.n	8009f9a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	881a      	ldrh	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f84:	1c9a      	adds	r2, r3, #2
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f98:	e018      	b.n	8009fcc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f9a:	f7fa fea3 	bl	8004ce4 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d803      	bhi.n	8009fb2 <HAL_SPI_Transmit+0x164>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d102      	bne.n	8009fb8 <HAL_SPI_Transmit+0x16a>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d109      	bne.n	8009fcc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e0b2      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1c7      	bne.n	8009f66 <HAL_SPI_Transmit+0x118>
 8009fd6:	e083      	b.n	800a0e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <HAL_SPI_Transmit+0x198>
 8009fe0:	8b7b      	ldrh	r3, [r7, #26]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d177      	bne.n	800a0d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d912      	bls.n	800a016 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff4:	881a      	ldrh	r2, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a000:	1c9a      	adds	r2, r3, #2
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b02      	subs	r3, #2
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a014:	e05f      	b.n	800a0d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	330c      	adds	r3, #12
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a03c:	e04b      	b.n	800a0d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d12b      	bne.n	800a0a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a050:	b29b      	uxth	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d912      	bls.n	800a07c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05a:	881a      	ldrh	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a066:	1c9a      	adds	r2, r3, #2
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b02      	subs	r3, #2
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a07a:	e02c      	b.n	800a0d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	330c      	adds	r3, #12
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a098:	b29b      	uxth	r3, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a0a2:	e018      	b.n	800a0d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0a4:	f7fa fe1e 	bl	8004ce4 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d803      	bhi.n	800a0bc <HAL_SPI_Transmit+0x26e>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ba:	d102      	bne.n	800a0c2 <HAL_SPI_Transmit+0x274>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d109      	bne.n	800a0d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e02d      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1ae      	bne.n	800a03e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fb65 	bl	800a7b4 <SPI_EndRxTxTransaction>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0fe:	2300      	movs	r3, #0
 800a100:	617b      	str	r3, [r7, #20]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e000      	b.n	800a132 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a130:	2300      	movs	r3, #0
  }
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b08a      	sub	sp, #40	@ 0x28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a148:	2301      	movs	r3, #1
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a14c:	f7fa fdca 	bl	8004ce4 <HAL_GetTick>
 800a150:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a158:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a160:	887b      	ldrh	r3, [r7, #2]
 800a162:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a164:	887b      	ldrh	r3, [r7, #2]
 800a166:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a168:	7ffb      	ldrb	r3, [r7, #31]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d00c      	beq.n	800a188 <HAL_SPI_TransmitReceive+0x4e>
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a174:	d106      	bne.n	800a184 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <HAL_SPI_TransmitReceive+0x4a>
 800a17e:	7ffb      	ldrb	r3, [r7, #31]
 800a180:	2b04      	cmp	r3, #4
 800a182:	d001      	beq.n	800a188 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
 800a186:	e1f3      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_SPI_TransmitReceive+0x60>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <HAL_SPI_TransmitReceive+0x60>
 800a194:	887b      	ldrh	r3, [r7, #2]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e1e8      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d101      	bne.n	800a1ac <HAL_SPI_TransmitReceive+0x72>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e1e1      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d003      	beq.n	800a1c8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2205      	movs	r2, #5
 800a1c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	887a      	ldrh	r2, [r7, #2]
 800a1d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	887a      	ldrh	r2, [r7, #2]
 800a1e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	887a      	ldrh	r2, [r7, #2]
 800a1ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	887a      	ldrh	r2, [r7, #2]
 800a1f4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a20a:	d802      	bhi.n	800a212 <HAL_SPI_TransmitReceive+0xd8>
 800a20c:	8abb      	ldrh	r3, [r7, #20]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d908      	bls.n	800a224 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a220:	605a      	str	r2, [r3, #4]
 800a222:	e007      	b.n	800a234 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a232:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23e:	2b40      	cmp	r3, #64	@ 0x40
 800a240:	d007      	beq.n	800a252 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a25a:	f240 8083 	bls.w	800a364 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_SPI_TransmitReceive+0x132>
 800a266:	8afb      	ldrh	r3, [r7, #22]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d16f      	bne.n	800a34c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a270:	881a      	ldrh	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b01      	subs	r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a290:	e05c      	b.n	800a34c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d11b      	bne.n	800a2d8 <HAL_SPI_TransmitReceive+0x19e>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d016      	beq.n	800a2d8 <HAL_SPI_TransmitReceive+0x19e>
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d113      	bne.n	800a2d8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d11c      	bne.n	800a320 <HAL_SPI_TransmitReceive+0x1e6>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d016      	beq.n	800a320 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2fc:	b292      	uxth	r2, r2
 800a2fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a304:	1c9a      	adds	r2, r3, #2
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a310:	b29b      	uxth	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a31c:	2301      	movs	r3, #1
 800a31e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a320:	f7fa fce0 	bl	8004ce4 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d80d      	bhi.n	800a34c <HAL_SPI_TransmitReceive+0x212>
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d009      	beq.n	800a34c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e111      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d19d      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x158>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d197      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x158>
 800a362:	e0e5      	b.n	800a530 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_SPI_TransmitReceive+0x23a>
 800a36c:	8afb      	ldrh	r3, [r7, #22]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	f040 80d1 	bne.w	800a516 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a378:	b29b      	uxth	r3, r3
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d912      	bls.n	800a3a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	881a      	ldrh	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38e:	1c9a      	adds	r2, r3, #2
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	3b02      	subs	r3, #2
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a3a2:	e0b8      	b.n	800a516 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ca:	e0a4      	b.n	800a516 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d134      	bne.n	800a444 <HAL_SPI_TransmitReceive+0x30a>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d02f      	beq.n	800a444 <HAL_SPI_TransmitReceive+0x30a>
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d12c      	bne.n	800a444 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d912      	bls.n	800a41a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f8:	881a      	ldrh	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a404:	1c9a      	adds	r2, r3, #2
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a40e:	b29b      	uxth	r3, r3
 800a410:	3b02      	subs	r3, #2
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a418:	e012      	b.n	800a440 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	330c      	adds	r3, #12
 800a424:	7812      	ldrb	r2, [r2, #0]
 800a426:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42c:	1c5a      	adds	r2, r3, #1
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a436:	b29b      	uxth	r3, r3
 800a438:	3b01      	subs	r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d148      	bne.n	800a4e4 <HAL_SPI_TransmitReceive+0x3aa>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a458:	b29b      	uxth	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d042      	beq.n	800a4e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a464:	b29b      	uxth	r3, r3
 800a466:	2b01      	cmp	r3, #1
 800a468:	d923      	bls.n	800a4b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a474:	b292      	uxth	r2, r2
 800a476:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47c:	1c9a      	adds	r2, r3, #2
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b02      	subs	r3, #2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d81f      	bhi.n	800a4e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4ae:	605a      	str	r2, [r3, #4]
 800a4b0:	e016      	b.n	800a4e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f103 020c 	add.w	r2, r3, #12
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4be:	7812      	ldrb	r2, [r2, #0]
 800a4c0:	b2d2      	uxtb	r2, r2
 800a4c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4e4:	f7fa fbfe 	bl	8004ce4 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d803      	bhi.n	800a4fc <HAL_SPI_TransmitReceive+0x3c2>
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fa:	d102      	bne.n	800a502 <HAL_SPI_TransmitReceive+0x3c8>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e02c      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f47f af55 	bne.w	800a3cc <HAL_SPI_TransmitReceive+0x292>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f47f af4e 	bne.w	800a3cc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a530:	6a3a      	ldr	r2, [r7, #32]
 800a532:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 f93d 	bl	800a7b4 <SPI_EndRxTxTransaction>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d008      	beq.n	800a552 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2220      	movs	r2, #32
 800a544:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e00e      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a56e:	2300      	movs	r3, #0
  }
}
 800a570:	4618      	mov	r0, r3
 800a572:	3728      	adds	r7, #40	@ 0x28
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a588:	f7fa fbac 	bl	8004ce4 <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	1a9b      	subs	r3, r3, r2
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4413      	add	r3, r2
 800a596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a598:	f7fa fba4 	bl	8004ce4 <HAL_GetTick>
 800a59c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a59e:	4b39      	ldr	r3, [pc, #228]	@ (800a684 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	015b      	lsls	r3, r3, #5
 800a5a4:	0d1b      	lsrs	r3, r3, #20
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	fb02 f303 	mul.w	r3, r2, r3
 800a5ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ae:	e054      	b.n	800a65a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d050      	beq.n	800a65a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5b8:	f7fa fb94 	bl	8004ce4 <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d902      	bls.n	800a5ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d13d      	bne.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a5dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5e6:	d111      	bne.n	800a60c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5f0:	d004      	beq.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5fa:	d107      	bne.n	800a60c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a60a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a614:	d10f      	bne.n	800a636 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e017      	b.n	800a67a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	3b01      	subs	r3, #1
 800a658:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4013      	ands	r3, r2
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	bf0c      	ite	eq
 800a66a:	2301      	moveq	r3, #1
 800a66c:	2300      	movne	r3, #0
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	461a      	mov	r2, r3
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	429a      	cmp	r2, r3
 800a676:	d19b      	bne.n	800a5b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000010 	.word	0x20000010

0800a688 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	@ 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a69a:	f7fa fb23 	bl	8004ce4 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a6aa:	f7fa fb1b 	bl	8004ce4 <HAL_GetTick>
 800a6ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	330c      	adds	r3, #12
 800a6b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a6b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a7b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	00da      	lsls	r2, r3, #3
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	0d1b      	lsrs	r3, r3, #20
 800a6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ca:	fb02 f303 	mul.w	r3, r2, r3
 800a6ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a6d0:	e060      	b.n	800a794 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6d8:	d107      	bne.n	800a6ea <SPI_WaitFifoStateUntilTimeout+0x62>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d050      	beq.n	800a794 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6f2:	f7fa faf7 	bl	8004ce4 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d902      	bls.n	800a708 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d13d      	bne.n	800a784 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a716:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a720:	d111      	bne.n	800a746 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a72a:	d004      	beq.n	800a736 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a734:	d107      	bne.n	800a746 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a744:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a74e:	d10f      	bne.n	800a770 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a76e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e010      	b.n	800a7a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	3b01      	subs	r3, #1
 800a792:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	4013      	ands	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d196      	bne.n	800a6d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3728      	adds	r7, #40	@ 0x28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000010 	.word	0x20000010

0800a7b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7ff ff5b 	bl	800a688 <SPI_WaitFifoStateUntilTimeout>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d007      	beq.n	800a7e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7dc:	f043 0220 	orr.w	r2, r3, #32
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e027      	b.n	800a838 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2180      	movs	r1, #128	@ 0x80
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fec0 	bl	800a578 <SPI_WaitFlagStateUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a802:	f043 0220 	orr.w	r2, r3, #32
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e014      	b.n	800a838 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff ff34 	bl	800a688 <SPI_WaitFifoStateUntilTimeout>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d007      	beq.n	800a836 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a82a:	f043 0220 	orr.w	r2, r3, #32
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e000      	b.n	800a838 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e049      	b.n	800a8e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f9 ff54 	bl	8004714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3304      	adds	r3, #4
 800a87c:	4619      	mov	r1, r3
 800a87e:	4610      	mov	r0, r2
 800a880:	f000 fa7c 	bl	800ad7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b01      	cmp	r3, #1
 800a902:	d001      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e036      	b.n	800a976 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0201 	orr.w	r2, r2, #1
 800a91e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a17      	ldr	r2, [pc, #92]	@ (800a984 <HAL_TIM_Base_Start_IT+0x94>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <HAL_TIM_Base_Start_IT+0x44>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a932:	d115      	bne.n	800a960 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	4b13      	ldr	r3, [pc, #76]	@ (800a988 <HAL_TIM_Base_Start_IT+0x98>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b06      	cmp	r3, #6
 800a944:	d015      	beq.n	800a972 <HAL_TIM_Base_Start_IT+0x82>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a94c:	d011      	beq.n	800a972 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0201 	orr.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	e008      	b.n	800a972 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e000      	b.n	800a974 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40012c00 	.word	0x40012c00
 800a988:	00010007 	.word	0x00010007

0800a98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d020      	beq.n	800a9f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01b      	beq.n	800a9f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0202 	mvn.w	r2, #2
 800a9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f9b2 	bl	800ad40 <HAL_TIM_IC_CaptureCallback>
 800a9dc:	e005      	b.n	800a9ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f9a4 	bl	800ad2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f9b5 	bl	800ad54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d020      	beq.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01b      	beq.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0204 	mvn.w	r2, #4
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2202      	movs	r2, #2
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f98c 	bl	800ad40 <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f97e 	bl	800ad2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f98f 	bl	800ad54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d020      	beq.n	800aa88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f003 0308 	and.w	r3, r3, #8
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01b      	beq.n	800aa88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0208 	mvn.w	r2, #8
 800aa58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2204      	movs	r2, #4
 800aa5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f966 	bl	800ad40 <HAL_TIM_IC_CaptureCallback>
 800aa74:	e005      	b.n	800aa82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f958 	bl	800ad2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f969 	bl	800ad54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f003 0310 	and.w	r3, r3, #16
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d020      	beq.n	800aad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01b      	beq.n	800aad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f06f 0210 	mvn.w	r2, #16
 800aaa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f940 	bl	800ad40 <HAL_TIM_IC_CaptureCallback>
 800aac0:	e005      	b.n	800aace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f932 	bl	800ad2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f943 	bl	800ad54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00c      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0201 	mvn.w	r2, #1
 800aaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7f9 ffc6 	bl	8004a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d104      	bne.n	800ab0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00c      	beq.n	800ab26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d007      	beq.n	800ab26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 faa1 	bl	800b068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00c      	beq.n	800ab4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa99 	bl	800b07c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f8fd 	bl	800ad68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f003 0320 	and.w	r3, r3, #32
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00c      	beq.n	800ab92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f003 0320 	and.w	r3, r3, #32
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d007      	beq.n	800ab92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f06f 0220 	mvn.w	r2, #32
 800ab8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fa61 	bl	800b054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d101      	bne.n	800abb6 <HAL_TIM_ConfigClockSource+0x1c>
 800abb2:	2302      	movs	r3, #2
 800abb4:	e0b6      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x18a>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2202      	movs	r2, #2
 800abc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800abd4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800abd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800abe0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abf2:	d03e      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0xd8>
 800abf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abf8:	f200 8087 	bhi.w	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800abfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac00:	f000 8086 	beq.w	800ad10 <HAL_TIM_ConfigClockSource+0x176>
 800ac04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac08:	d87f      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac0a:	2b70      	cmp	r3, #112	@ 0x70
 800ac0c:	d01a      	beq.n	800ac44 <HAL_TIM_ConfigClockSource+0xaa>
 800ac0e:	2b70      	cmp	r3, #112	@ 0x70
 800ac10:	d87b      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac12:	2b60      	cmp	r3, #96	@ 0x60
 800ac14:	d050      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0x11e>
 800ac16:	2b60      	cmp	r3, #96	@ 0x60
 800ac18:	d877      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac1a:	2b50      	cmp	r3, #80	@ 0x50
 800ac1c:	d03c      	beq.n	800ac98 <HAL_TIM_ConfigClockSource+0xfe>
 800ac1e:	2b50      	cmp	r3, #80	@ 0x50
 800ac20:	d873      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac22:	2b40      	cmp	r3, #64	@ 0x40
 800ac24:	d058      	beq.n	800acd8 <HAL_TIM_ConfigClockSource+0x13e>
 800ac26:	2b40      	cmp	r3, #64	@ 0x40
 800ac28:	d86f      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac2a:	2b30      	cmp	r3, #48	@ 0x30
 800ac2c:	d064      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x15e>
 800ac2e:	2b30      	cmp	r3, #48	@ 0x30
 800ac30:	d86b      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d060      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x15e>
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	d867      	bhi.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d05c      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x15e>
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d05a      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x15e>
 800ac42:	e062      	b.n	800ad0a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac54:	f000 f97e 	bl	800af54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ac66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	609a      	str	r2, [r3, #8]
      break;
 800ac70:	e04f      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac82:	f000 f967 	bl	800af54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac94:	609a      	str	r2, [r3, #8]
      break;
 800ac96:	e03c      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aca4:	461a      	mov	r2, r3
 800aca6:	f000 f8d9 	bl	800ae5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2150      	movs	r1, #80	@ 0x50
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f932 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800acb6:	e02c      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800acc4:	461a      	mov	r2, r3
 800acc6:	f000 f8f8 	bl	800aeba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2160      	movs	r1, #96	@ 0x60
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 f922 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800acd6:	e01c      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ace4:	461a      	mov	r2, r3
 800ace6:	f000 f8b9 	bl	800ae5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2140      	movs	r1, #64	@ 0x40
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 f912 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800acf6:	e00c      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f000 f909 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800ad08:	e003      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad0e:	e000      	b.n	800ad12 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ad10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a30      	ldr	r2, [pc, #192]	@ (800ae50 <TIM_Base_SetConfig+0xd4>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d003      	beq.n	800ad9c <TIM_Base_SetConfig+0x20>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad9a:	d108      	bne.n	800adae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ada2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a27      	ldr	r2, [pc, #156]	@ (800ae50 <TIM_Base_SetConfig+0xd4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d00b      	beq.n	800adce <TIM_Base_SetConfig+0x52>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adbc:	d007      	beq.n	800adce <TIM_Base_SetConfig+0x52>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a24      	ldr	r2, [pc, #144]	@ (800ae54 <TIM_Base_SetConfig+0xd8>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d003      	beq.n	800adce <TIM_Base_SetConfig+0x52>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a23      	ldr	r2, [pc, #140]	@ (800ae58 <TIM_Base_SetConfig+0xdc>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d108      	bne.n	800ade0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800add4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	4313      	orrs	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a12      	ldr	r2, [pc, #72]	@ (800ae50 <TIM_Base_SetConfig+0xd4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d007      	beq.n	800ae1c <TIM_Base_SetConfig+0xa0>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a11      	ldr	r2, [pc, #68]	@ (800ae54 <TIM_Base_SetConfig+0xd8>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d003      	beq.n	800ae1c <TIM_Base_SetConfig+0xa0>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a10      	ldr	r2, [pc, #64]	@ (800ae58 <TIM_Base_SetConfig+0xdc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d103      	bne.n	800ae24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d105      	bne.n	800ae42 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f023 0201 	bic.w	r2, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	611a      	str	r2, [r3, #16]
  }
}
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40012c00 	.word	0x40012c00
 800ae54:	40014400 	.word	0x40014400
 800ae58:	40014800 	.word	0x40014800

0800ae5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	f023 0201 	bic.w	r2, r3, #1
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f023 030a 	bic.w	r3, r3, #10
 800ae98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b087      	sub	sp, #28
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	f023 0210 	bic.w	r2, r3, #16
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	031b      	lsls	r3, r3, #12
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f043 0307 	orr.w	r3, r3, #7
 800af40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	609a      	str	r2, [r3, #8]
}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	021a      	lsls	r2, r3, #8
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	431a      	orrs	r2, r3
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	609a      	str	r2, [r3, #8]
}
 800af88:	bf00      	nop
 800af8a:	371c      	adds	r7, #28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e04a      	b.n	800b042 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a1f      	ldr	r2, [pc, #124]	@ (800b050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d108      	bne.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a12      	ldr	r2, [pc, #72]	@ (800b050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d004      	beq.n	800b016 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b014:	d10c      	bne.n	800b030 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b01c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	4313      	orrs	r3, r2
 800b026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	40012c00 	.word	0x40012c00

0800b054 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	@ 0x28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	d167      	bne.n	800b178 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <HAL_UART_Transmit_DMA+0x24>
 800b0ae:	88fb      	ldrh	r3, [r7, #6]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e060      	b.n	800b17a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	88fa      	ldrh	r2, [r7, #6]
 800b0c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	88fa      	ldrh	r2, [r7, #6]
 800b0ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2221      	movs	r2, #33	@ 0x21
 800b0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d028      	beq.n	800b138 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0ea:	4a26      	ldr	r2, [pc, #152]	@ (800b184 <HAL_UART_Transmit_DMA+0xf4>)
 800b0ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0f2:	4a25      	ldr	r2, [pc, #148]	@ (800b188 <HAL_UART_Transmit_DMA+0xf8>)
 800b0f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0fa:	4a24      	ldr	r2, [pc, #144]	@ (800b18c <HAL_UART_Transmit_DMA+0xfc>)
 800b0fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b102:	2200      	movs	r2, #0
 800b104:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10e:	4619      	mov	r1, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3328      	adds	r3, #40	@ 0x28
 800b116:	461a      	mov	r2, r3
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	f7f9 ffa0 	bl	800505e <HAL_DMA_Start_IT>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2210      	movs	r2, #16
 800b128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2220      	movs	r2, #32
 800b130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e020      	b.n	800b17a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2240      	movs	r2, #64	@ 0x40
 800b13e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3308      	adds	r3, #8
 800b146:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	613b      	str	r3, [r7, #16]
   return(result);
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	627b      	str	r3, [r7, #36]	@ 0x24
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3308      	adds	r3, #8
 800b15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b160:	623a      	str	r2, [r7, #32]
 800b162:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	6a3a      	ldr	r2, [r7, #32]
 800b168:	e841 2300 	strex	r3, r2, [r1]
 800b16c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e5      	bne.n	800b140 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	e000      	b.n	800b17a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b178:	2302      	movs	r3, #2
  }
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3728      	adds	r7, #40	@ 0x28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	0800b9a3 	.word	0x0800b9a3
 800b188:	0800ba3d 	.word	0x0800ba3d
 800b18c:	0800ba59 	.word	0x0800ba59

0800b190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b0ba      	sub	sp, #232	@ 0xe8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1be:	4013      	ands	r3, r2
 800b1c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b1c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11b      	bne.n	800b204 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d015      	beq.n	800b204 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1dc:	f003 0320 	and.w	r3, r3, #32
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d105      	bne.n	800b1f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8300 	beq.w	800b7fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
      }
      return;
 800b202:	e2fa      	b.n	800b7fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 8123 	beq.w	800b454 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b20e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b212:	4b8d      	ldr	r3, [pc, #564]	@ (800b448 <HAL_UART_IRQHandler+0x2b8>)
 800b214:	4013      	ands	r3, r2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b21a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b21e:	4b8b      	ldr	r3, [pc, #556]	@ (800b44c <HAL_UART_IRQHandler+0x2bc>)
 800b220:	4013      	ands	r3, r2
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 8116 	beq.w	800b454 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d011      	beq.n	800b258 <HAL_UART_IRQHandler+0xc8>
 800b234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2201      	movs	r2, #1
 800b246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b24e:	f043 0201 	orr.w	r2, r3, #1
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d011      	beq.n	800b288 <HAL_UART_IRQHandler+0xf8>
 800b264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2202      	movs	r2, #2
 800b276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b27e:	f043 0204 	orr.w	r2, r3, #4
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d011      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x128>
 800b294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ae:	f043 0202 	orr.w	r2, r3, #2
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d017      	beq.n	800b2f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d105      	bne.n	800b2dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b448 <HAL_UART_IRQHandler+0x2b8>)
 800b2d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ea:	f043 0208 	orr.w	r2, r3, #8
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d012      	beq.n	800b326 <HAL_UART_IRQHandler+0x196>
 800b300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00c      	beq.n	800b326 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b31c:	f043 0220 	orr.w	r2, r3, #32
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 8266 	beq.w	800b7fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b336:	f003 0320 	and.w	r3, r3, #32
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d013      	beq.n	800b366 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b34e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d007      	beq.n	800b366 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b37a:	2b40      	cmp	r3, #64	@ 0x40
 800b37c:	d005      	beq.n	800b38a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b382:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b386:	2b00      	cmp	r3, #0
 800b388:	d054      	beq.n	800b434 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 faa3 	bl	800b8d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39a:	2b40      	cmp	r3, #64	@ 0x40
 800b39c:	d146      	bne.n	800b42c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3da:	e841 2300 	strex	r3, r2, [r1]
 800b3de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1d9      	bne.n	800b39e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d017      	beq.n	800b424 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fa:	4a15      	ldr	r2, [pc, #84]	@ (800b450 <HAL_UART_IRQHandler+0x2c0>)
 800b3fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b404:	4618      	mov	r0, r3
 800b406:	f7f9 ff04 	bl	8005212 <HAL_DMA_Abort_IT>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d019      	beq.n	800b444 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b422:	e00f      	b.n	800b444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f9ff 	bl	800b828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42a:	e00b      	b.n	800b444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f9fb 	bl	800b828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b432:	e007      	b.n	800b444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f9f7 	bl	800b828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b442:	e1dc      	b.n	800b7fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	bf00      	nop
    return;
 800b446:	e1da      	b.n	800b7fe <HAL_UART_IRQHandler+0x66e>
 800b448:	10000001 	.word	0x10000001
 800b44c:	04000120 	.word	0x04000120
 800b450:	0800bad9 	.word	0x0800bad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	f040 8170 	bne.w	800b73e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b462:	f003 0310 	and.w	r3, r3, #16
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 8169 	beq.w	800b73e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b470:	f003 0310 	and.w	r3, r3, #16
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 8162 	beq.w	800b73e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2210      	movs	r2, #16
 800b480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b48c:	2b40      	cmp	r3, #64	@ 0x40
 800b48e:	f040 80d8 	bne.w	800b642 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80af 	beq.w	800b608 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	f080 80a7 	bcs.w	800b608 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f040 8087 	bne.w	800b5e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b506:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b50e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b51a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1da      	bne.n	800b4d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3308      	adds	r3, #8
 800b528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b534:	f023 0301 	bic.w	r3, r3, #1
 800b538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3308      	adds	r3, #8
 800b542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b546:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b54a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b54e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e1      	bne.n	800b522 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3308      	adds	r3, #8
 800b57e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b582:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b584:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b588:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e3      	bne.n	800b55e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2220      	movs	r2, #32
 800b59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5b4:	f023 0310 	bic.w	r3, r3, #16
 800b5b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1e4      	bne.n	800b5a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f9 fdb7 	bl	8005154 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f91b 	bl	800b83c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b606:	e0fc      	b.n	800b802 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b612:	429a      	cmp	r2, r3
 800b614:	f040 80f5 	bne.w	800b802 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0320 	and.w	r3, r3, #32
 800b626:	2b20      	cmp	r3, #32
 800b628:	f040 80eb 	bne.w	800b802 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f8fe 	bl	800b83c <HAL_UARTEx_RxEventCallback>
      return;
 800b640:	e0df      	b.n	800b802 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b64e:	b29b      	uxth	r3, r3
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80d1 	beq.w	800b806 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 80cc 	beq.w	800b806 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b676:	e853 3f00 	ldrex	r3, [r3]
 800b67a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b690:	647b      	str	r3, [r7, #68]	@ 0x44
 800b692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e4      	bne.n	800b66e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	623b      	str	r3, [r7, #32]
   return(result);
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6ba:	f023 0301 	bic.w	r3, r3, #1
 800b6be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b6cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6d4:	e841 2300 	strex	r3, r2, [r1]
 800b6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e1      	bne.n	800b6a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	60fb      	str	r3, [r7, #12]
   return(result);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f023 0310 	bic.w	r3, r3, #16
 800b708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	69b9      	ldr	r1, [r7, #24]
 800b71c:	69fa      	ldr	r2, [r7, #28]
 800b71e:	e841 2300 	strex	r3, r2, [r1]
 800b722:	617b      	str	r3, [r7, #20]
   return(result);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1e4      	bne.n	800b6f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2202      	movs	r2, #2
 800b72e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f880 	bl	800b83c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b73c:	e063      	b.n	800b806 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00e      	beq.n	800b768 <HAL_UART_IRQHandler+0x5d8>
 800b74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b74e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d008      	beq.n	800b768 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b75e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f9f6 	bl	800bb52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b766:	e051      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b76c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b770:	2b00      	cmp	r3, #0
 800b772:	d014      	beq.n	800b79e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d105      	bne.n	800b78c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d008      	beq.n	800b79e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b790:	2b00      	cmp	r3, #0
 800b792:	d03a      	beq.n	800b80a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
    }
    return;
 800b79c:	e035      	b.n	800b80a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d009      	beq.n	800b7be <HAL_UART_IRQHandler+0x62e>
 800b7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f9a0 	bl	800bafc <UART_EndTransmit_IT>
    return;
 800b7bc:	e026      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <HAL_UART_IRQHandler+0x64e>
 800b7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f9cf 	bl	800bb7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7dc:	e016      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d010      	beq.n	800b80c <HAL_UART_IRQHandler+0x67c>
 800b7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da0c      	bge.n	800b80c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f9b7 	bl	800bb66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7f8:	e008      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
      return;
 800b7fa:	bf00      	nop
 800b7fc:	e006      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
    return;
 800b7fe:	bf00      	nop
 800b800:	e004      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
      return;
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
      return;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <HAL_UART_IRQHandler+0x67c>
    return;
 800b80a:	bf00      	nop
  }
}
 800b80c:	37e8      	adds	r7, #232	@ 0xe8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop

0800b814 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b854:	b480      	push	{r7}
 800b856:	b08f      	sub	sp, #60	@ 0x3c
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	61fb      	str	r3, [r7, #28]
   return(result);
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b87c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e6      	bne.n	800b85c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ae:	61ba      	str	r2, [r7, #24]
 800b8b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	6979      	ldr	r1, [r7, #20]
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e5      	bne.n	800b88e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b8ca:	bf00      	nop
 800b8cc:	373c      	adds	r7, #60	@ 0x3c
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b095      	sub	sp, #84	@ 0x54
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b902:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3308      	adds	r3, #8
 800b916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b926:	f023 0301 	bic.w	r3, r3, #1
 800b92a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e3      	bne.n	800b910 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d118      	bne.n	800b982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	e853 3f00 	ldrex	r3, [r3]
 800b95c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f023 0310 	bic.w	r3, r3, #16
 800b964:	647b      	str	r3, [r7, #68]	@ 0x44
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b96e:	61bb      	str	r3, [r7, #24]
 800b970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b972:	6979      	ldr	r1, [r7, #20]
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	e841 2300 	strex	r3, r2, [r1]
 800b97a:	613b      	str	r3, [r7, #16]
   return(result);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1e6      	bne.n	800b950 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2220      	movs	r2, #32
 800b986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b996:	bf00      	nop
 800b998:	3754      	adds	r7, #84	@ 0x54
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b090      	sub	sp, #64	@ 0x40
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0320 	and.w	r3, r3, #32
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d137      	bne.n	800ba2e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e5      	bne.n	800b9c6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	461a      	mov	r2, r3
 800ba16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba18:	61fb      	str	r3, [r7, #28]
 800ba1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	69b9      	ldr	r1, [r7, #24]
 800ba1e:	69fa      	ldr	r2, [r7, #28]
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	617b      	str	r3, [r7, #20]
   return(result);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e6      	bne.n	800b9fa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba2c:	e002      	b.n	800ba34 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba2e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba30:	f7f7 fe88 	bl	8003744 <HAL_UART_TxCpltCallback>
}
 800ba34:	bf00      	nop
 800ba36:	3740      	adds	r7, #64	@ 0x40
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f7ff fee2 	bl	800b814 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba80:	2b80      	cmp	r3, #128	@ 0x80
 800ba82:	d109      	bne.n	800ba98 <UART_DMAError+0x40>
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	2b21      	cmp	r3, #33	@ 0x21
 800ba88:	d106      	bne.n	800ba98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ba92:	6978      	ldr	r0, [r7, #20]
 800ba94:	f7ff fede 	bl	800b854 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa2:	2b40      	cmp	r3, #64	@ 0x40
 800baa4:	d109      	bne.n	800baba <UART_DMAError+0x62>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b22      	cmp	r3, #34	@ 0x22
 800baaa:	d106      	bne.n	800baba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bab4:	6978      	ldr	r0, [r7, #20]
 800bab6:	f7ff ff0e 	bl	800b8d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bac0:	f043 0210 	orr.w	r2, r3, #16
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800baca:	6978      	ldr	r0, [r7, #20]
 800bacc:	f7ff feac 	bl	800b828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bad0:	bf00      	nop
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f7ff fe9a 	bl	800b828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baf4:	bf00      	nop
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb18:	61fb      	str	r3, [r7, #28]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	61bb      	str	r3, [r7, #24]
 800bb24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6979      	ldr	r1, [r7, #20]
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e6      	bne.n	800bb04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7f7 fdfd 	bl	8003744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb4a:	bf00      	nop
 800bb4c:	3720      	adds	r7, #32
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb6e:	bf00      	nop
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b085      	sub	sp, #20
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb9e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bba2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bbc4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bbc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	43db      	mvns	r3, r3
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4013      	ands	r3, r2
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	1d3b      	adds	r3, r7, #4
 800bbfc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b0a7      	sub	sp, #156	@ 0x9c
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bc52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc56:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	78db      	ldrb	r3, [r3, #3]
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d81f      	bhi.n	800bca2 <USB_ActivateEndpoint+0x72>
 800bc62:	a201      	add	r2, pc, #4	@ (adr r2, 800bc68 <USB_ActivateEndpoint+0x38>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc95 	.word	0x0800bc95
 800bc70:	0800bcab 	.word	0x0800bcab
 800bc74:	0800bc87 	.word	0x0800bc87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bc78:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bc7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc80:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bc84:	e012      	b.n	800bcac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bc86:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bc8a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bc8e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bc92:	e00b      	b.n	800bcac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bc94:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bc98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bc9c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bca0:	e004      	b.n	800bcac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800bca8:	e000      	b.n	800bcac <USB_ActivateEndpoint+0x7c>
      break;
 800bcaa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	441a      	add	r2, r3
 800bcb6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bcba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	b21b      	sxth	r3, r3
 800bcde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	b21b      	sxth	r3, r3
 800bcf2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	441a      	add	r2, r3
 800bd00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bd04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	7b1b      	ldrb	r3, [r3, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 8180 	bne.w	800c022 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8084 	beq.w	800be34 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	61bb      	str	r3, [r7, #24]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	00da      	lsls	r2, r3, #3
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	88db      	ldrh	r3, [r3, #6]
 800bd54:	085b      	lsrs	r3, r3, #1
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	827b      	strh	r3, [r7, #18]
 800bd6e:	8a7b      	ldrh	r3, [r7, #18]
 800bd70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01b      	beq.n	800bdb0 <USB_ActivateEndpoint+0x180>
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd8e:	823b      	strh	r3, [r7, #16]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	441a      	add	r2, r3
 800bd9a:	8a3b      	ldrh	r3, [r7, #16]
 800bd9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bda0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bda4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bda8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	78db      	ldrb	r3, [r3, #3]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d020      	beq.n	800bdfa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdce:	81bb      	strh	r3, [r7, #12]
 800bdd0:	89bb      	ldrh	r3, [r7, #12]
 800bdd2:	f083 0320 	eor.w	r3, r3, #32
 800bdd6:	81bb      	strh	r3, [r7, #12]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	441a      	add	r2, r3
 800bde2:	89bb      	ldrh	r3, [r7, #12]
 800bde4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bde8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	8013      	strh	r3, [r2, #0]
 800bdf8:	e3f9      	b.n	800c5ee <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29b      	uxth	r3, r3
 800be08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be10:	81fb      	strh	r3, [r7, #14]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	441a      	add	r2, r3
 800be1c:	89fb      	ldrh	r3, [r7, #14]
 800be1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2e:	b29b      	uxth	r3, r3
 800be30:	8013      	strh	r3, [r2, #0]
 800be32:	e3dc      	b.n	800c5ee <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	633b      	str	r3, [r7, #48]	@ 0x30
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be3e:	b29b      	uxth	r3, r3
 800be40:	461a      	mov	r2, r3
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	4413      	add	r3, r2
 800be46:	633b      	str	r3, [r7, #48]	@ 0x30
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	00da      	lsls	r2, r3, #3
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	4413      	add	r3, r2
 800be52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800be56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	88db      	ldrh	r3, [r3, #6]
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	b29b      	uxth	r3, r3
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	b29a      	uxth	r2, r3
 800be64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be72:	b29b      	uxth	r3, r3
 800be74:	461a      	mov	r2, r3
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	4413      	add	r3, r2
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	00da      	lsls	r2, r3, #3
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	4413      	add	r3, r2
 800be86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	b29b      	uxth	r3, r3
 800be92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be96:	b29a      	uxth	r2, r3
 800be98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9a:	801a      	strh	r2, [r3, #0]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10a      	bne.n	800beba <USB_ActivateEndpoint+0x28a>
 800bea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	801a      	strh	r2, [r3, #0]
 800beb8:	e041      	b.n	800bf3e <USB_ActivateEndpoint+0x30e>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b3e      	cmp	r3, #62	@ 0x3e
 800bec0:	d81c      	bhi.n	800befc <USB_ActivateEndpoint+0x2cc>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	085b      	lsrs	r3, r3, #1
 800bec8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <USB_ActivateEndpoint+0x2b2>
 800bed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bedc:	3301      	adds	r3, #1
 800bede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800beec:	b29b      	uxth	r3, r3
 800beee:	029b      	lsls	r3, r3, #10
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	4313      	orrs	r3, r2
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef8:	801a      	strh	r2, [r3, #0]
 800befa:	e020      	b.n	800bf3e <USB_ActivateEndpoint+0x30e>
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	095b      	lsrs	r3, r3, #5
 800bf02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	f003 031f 	and.w	r3, r3, #31
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d104      	bne.n	800bf1c <USB_ActivateEndpoint+0x2ec>
 800bf12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf16:	3b01      	subs	r3, #1
 800bf18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	029b      	lsls	r3, r3, #10
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bf4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d01b      	beq.n	800bf8e <USB_ActivateEndpoint+0x35e>
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf6c:	843b      	strh	r3, [r7, #32]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	441a      	add	r2, r3
 800bf78:	8c3b      	ldrh	r3, [r7, #32]
 800bf7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d124      	bne.n	800bfe0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bfa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfac:	83bb      	strh	r3, [r7, #28]
 800bfae:	8bbb      	ldrh	r3, [r7, #28]
 800bfb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bfb4:	83bb      	strh	r3, [r7, #28]
 800bfb6:	8bbb      	ldrh	r3, [r7, #28]
 800bfb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bfbc:	83bb      	strh	r3, [r7, #28]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	441a      	add	r2, r3
 800bfc8:	8bbb      	ldrh	r3, [r7, #28]
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
 800bfde:	e306      	b.n	800c5ee <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff6:	83fb      	strh	r3, [r7, #30]
 800bff8:	8bfb      	ldrh	r3, [r7, #30]
 800bffa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bffe:	83fb      	strh	r3, [r7, #30]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	441a      	add	r2, r3
 800c00a:	8bfb      	ldrh	r3, [r7, #30]
 800c00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	8013      	strh	r3, [r2, #0]
 800c020:	e2e5      	b.n	800c5ee <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	78db      	ldrb	r3, [r3, #3]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d11e      	bne.n	800c068 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	b29b      	uxth	r3, r3
 800c038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c03c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c040:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	441a      	add	r2, r3
 800c04e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c05a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c062:	b29b      	uxth	r3, r3
 800c064:	8013      	strh	r3, [r2, #0]
 800c066:	e01d      	b.n	800c0a4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c07e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	441a      	add	r2, r3
 800c08c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0b4:	4413      	add	r3, r2
 800c0b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00da      	lsls	r2, r3, #3
 800c0be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	891b      	ldrh	r3, [r3, #8]
 800c0cc:	085b      	lsrs	r3, r3, #1
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0d6:	801a      	strh	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0e8:	4413      	add	r3, r2
 800c0ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	00da      	lsls	r2, r3, #3
 800c0f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c0fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	895b      	ldrh	r3, [r3, #10]
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	b29b      	uxth	r3, r3
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	b29a      	uxth	r2, r3
 800c108:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c10a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f040 81af 	bne.w	800c474 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c126:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c12a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01d      	beq.n	800c16e <USB_ActivateEndpoint+0x53e>
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c148:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	441a      	add	r2, r3
 800c156:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c15a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c15e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c162:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c17e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c186:	2b00      	cmp	r3, #0
 800c188:	d01d      	beq.n	800c1c6 <USB_ActivateEndpoint+0x596>
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	b29b      	uxth	r3, r3
 800c198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c19c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	441a      	add	r2, r3
 800c1ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c1b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	785b      	ldrb	r3, [r3, #1]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d16b      	bne.n	800c2a6 <USB_ActivateEndpoint+0x676>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	461a      	mov	r2, r3
 800c1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1de:	4413      	add	r3, r2
 800c1e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	00da      	lsls	r2, r3, #3
 800c1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10a      	bne.n	800c220 <USB_ActivateEndpoint+0x5f0>
 800c20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c218:	b29a      	uxth	r2, r3
 800c21a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c21c:	801a      	strh	r2, [r3, #0]
 800c21e:	e05d      	b.n	800c2dc <USB_ActivateEndpoint+0x6ac>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b3e      	cmp	r3, #62	@ 0x3e
 800c226:	d81c      	bhi.n	800c262 <USB_ActivateEndpoint+0x632>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d004      	beq.n	800c248 <USB_ActivateEndpoint+0x618>
 800c23e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c242:	3301      	adds	r3, #1
 800c244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c252:	b29b      	uxth	r3, r3
 800c254:	029b      	lsls	r3, r3, #10
 800c256:	b29b      	uxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	e03c      	b.n	800c2dc <USB_ActivateEndpoint+0x6ac>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	095b      	lsrs	r3, r3, #5
 800c268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f003 031f 	and.w	r3, r3, #31
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <USB_ActivateEndpoint+0x652>
 800c278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c27c:	3b01      	subs	r3, #1
 800c27e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29a      	uxth	r2, r3
 800c288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	029b      	lsls	r3, r3, #10
 800c290:	b29b      	uxth	r3, r3
 800c292:	4313      	orrs	r3, r2
 800c294:	b29b      	uxth	r3, r3
 800c296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c29a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2a2:	801a      	strh	r2, [r3, #0]
 800c2a4:	e01a      	b.n	800c2dc <USB_ActivateEndpoint+0x6ac>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	785b      	ldrb	r3, [r3, #1]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d116      	bne.n	800c2dc <USB_ActivateEndpoint+0x6ac>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2be:	4413      	add	r3, r2
 800c2c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	00da      	lsls	r2, r3, #3
 800c2c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2da:	801a      	strh	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	785b      	ldrb	r3, [r3, #1]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d16b      	bne.n	800c3c0 <USB_ActivateEndpoint+0x790>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f8:	4413      	add	r3, r2
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	00da      	lsls	r2, r3, #3
 800c302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c304:	4413      	add	r3, r2
 800c306:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c30a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c316:	b29a      	uxth	r2, r3
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	801a      	strh	r2, [r3, #0]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <USB_ActivateEndpoint+0x70a>
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	881b      	ldrh	r3, [r3, #0]
 800c328:	b29b      	uxth	r3, r3
 800c32a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c32e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c332:	b29a      	uxth	r2, r3
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	801a      	strh	r2, [r3, #0]
 800c338:	e05b      	b.n	800c3f2 <USB_ActivateEndpoint+0x7c2>
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c340:	d81c      	bhi.n	800c37c <USB_ActivateEndpoint+0x74c>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	085b      	lsrs	r3, r3, #1
 800c348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d004      	beq.n	800c362 <USB_ActivateEndpoint+0x732>
 800c358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c35c:	3301      	adds	r3, #1
 800c35e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	b29a      	uxth	r2, r3
 800c368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	029b      	lsls	r3, r3, #10
 800c370:	b29b      	uxth	r3, r3
 800c372:	4313      	orrs	r3, r2
 800c374:	b29a      	uxth	r2, r3
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	801a      	strh	r2, [r3, #0]
 800c37a:	e03a      	b.n	800c3f2 <USB_ActivateEndpoint+0x7c2>
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	095b      	lsrs	r3, r3, #5
 800c382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	f003 031f 	and.w	r3, r3, #31
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d104      	bne.n	800c39c <USB_ActivateEndpoint+0x76c>
 800c392:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c396:	3b01      	subs	r3, #1
 800c398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	029b      	lsls	r3, r3, #10
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3bc:	801a      	strh	r2, [r3, #0]
 800c3be:	e018      	b.n	800c3f2 <USB_ActivateEndpoint+0x7c2>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d114      	bne.n	800c3f2 <USB_ActivateEndpoint+0x7c2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3d4:	4413      	add	r3, r2
 800c3d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	00da      	lsls	r2, r3, #3
 800c3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c408:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c40a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c40c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c410:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c412:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c414:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c418:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	441a      	add	r2, r3
 800c424:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c42a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c42e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c436:	b29b      	uxth	r3, r3
 800c438:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	b29b      	uxth	r3, r3
 800c448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c44c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c450:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	441a      	add	r2, r3
 800c45c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c45e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c46e:	b29b      	uxth	r3, r3
 800c470:	8013      	strh	r3, [r2, #0]
 800c472:	e0bc      	b.n	800c5ee <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c484:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d01d      	beq.n	800c4cc <USB_ActivateEndpoint+0x89c>
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	441a      	add	r2, r3
 800c4b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c4dc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01d      	beq.n	800c524 <USB_ActivateEndpoint+0x8f4>
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4fe:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	441a      	add	r2, r3
 800c50c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c51c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c520:	b29b      	uxth	r3, r3
 800c522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	78db      	ldrb	r3, [r3, #3]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d024      	beq.n	800c576 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c53e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c542:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c546:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c54a:	f083 0320 	eor.w	r3, r3, #32
 800c54e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	441a      	add	r2, r3
 800c55c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c56c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c570:	b29b      	uxth	r3, r3
 800c572:	8013      	strh	r3, [r2, #0]
 800c574:	e01d      	b.n	800c5b2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	b29b      	uxth	r3, r3
 800c584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c58c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	441a      	add	r2, r3
 800c59a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c59e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5c8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	441a      	add	r2, r3
 800c5d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c5da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c5ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	379c      	adds	r7, #156	@ 0x9c
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop

0800c600 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c600:	b480      	push	{r7}
 800c602:	b08d      	sub	sp, #52	@ 0x34
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	7b1b      	ldrb	r3, [r3, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 808e 	bne.w	800c730 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d044      	beq.n	800c6a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	81bb      	strh	r3, [r7, #12]
 800c62a:	89bb      	ldrh	r3, [r7, #12]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	d01b      	beq.n	800c66c <USB_DeactivateEndpoint+0x6c>
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	b29b      	uxth	r3, r3
 800c642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c64a:	817b      	strh	r3, [r7, #10]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	441a      	add	r2, r3
 800c656:	897b      	ldrh	r3, [r7, #10]
 800c658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c65c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c668:	b29b      	uxth	r3, r3
 800c66a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c67e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c682:	813b      	strh	r3, [r7, #8]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	441a      	add	r2, r3
 800c68e:	893b      	ldrh	r3, [r7, #8]
 800c690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c69c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	8013      	strh	r3, [r2, #0]
 800c6a4:	e192      	b.n	800c9cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	827b      	strh	r3, [r7, #18]
 800c6b4:	8a7b      	ldrh	r3, [r7, #18]
 800c6b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d01b      	beq.n	800c6f6 <USB_DeactivateEndpoint+0xf6>
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	881b      	ldrh	r3, [r3, #0]
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d4:	823b      	strh	r3, [r7, #16]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	441a      	add	r2, r3
 800c6e0:	8a3b      	ldrh	r3, [r7, #16]
 800c6e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70c:	81fb      	strh	r3, [r7, #14]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	441a      	add	r2, r3
 800c718:	89fb      	ldrh	r3, [r7, #14]
 800c71a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	8013      	strh	r3, [r2, #0]
 800c72e:	e14d      	b.n	800c9cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	785b      	ldrb	r3, [r3, #1]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f040 80a5 	bne.w	800c884 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	843b      	strh	r3, [r7, #32]
 800c748:	8c3b      	ldrh	r3, [r7, #32]
 800c74a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01b      	beq.n	800c78a <USB_DeactivateEndpoint+0x18a>
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c768:	83fb      	strh	r3, [r7, #30]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	441a      	add	r2, r3
 800c774:	8bfb      	ldrh	r3, [r7, #30]
 800c776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c77a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c77e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c786:	b29b      	uxth	r3, r3
 800c788:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	83bb      	strh	r3, [r7, #28]
 800c798:	8bbb      	ldrh	r3, [r7, #28]
 800c79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d01b      	beq.n	800c7da <USB_DeactivateEndpoint+0x1da>
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7b8:	837b      	strh	r3, [r7, #26]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	441a      	add	r2, r3
 800c7c4:	8b7b      	ldrh	r3, [r7, #26]
 800c7c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f0:	833b      	strh	r3, [r7, #24]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	441a      	add	r2, r3
 800c7fc:	8b3b      	ldrh	r3, [r7, #24]
 800c7fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c80e:	b29b      	uxth	r3, r3
 800c810:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c828:	82fb      	strh	r3, [r7, #22]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	441a      	add	r2, r3
 800c834:	8afb      	ldrh	r3, [r7, #22]
 800c836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c83a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c83e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c846:	b29b      	uxth	r3, r3
 800c848:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c85c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c860:	82bb      	strh	r3, [r7, #20]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	441a      	add	r2, r3
 800c86c:	8abb      	ldrh	r3, [r7, #20]
 800c86e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c87e:	b29b      	uxth	r3, r3
 800c880:	8013      	strh	r3, [r2, #0]
 800c882:	e0a3      	b.n	800c9cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c892:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01b      	beq.n	800c8d4 <USB_DeactivateEndpoint+0x2d4>
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	441a      	add	r2, r3
 800c8be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c8c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c8e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01b      	beq.n	800c924 <USB_DeactivateEndpoint+0x324>
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c902:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	441a      	add	r2, r3
 800c90e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c91c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c920:	b29b      	uxth	r3, r3
 800c922:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c93a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	441a      	add	r2, r3
 800c946:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c94c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c958:	b29b      	uxth	r3, r3
 800c95a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c96e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c972:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	441a      	add	r2, r3
 800c97e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c990:	b29b      	uxth	r3, r3
 800c992:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	441a      	add	r2, r3
 800c9b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3734      	adds	r7, #52	@ 0x34
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b0ac      	sub	sp, #176	@ 0xb0
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	f040 84ca 	bne.w	800d382 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	699a      	ldr	r2, [r3, #24]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d904      	bls.n	800ca04 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca02:	e003      	b.n	800ca0c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	7b1b      	ldrb	r3, [r3, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d122      	bne.n	800ca5a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6959      	ldr	r1, [r3, #20]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88da      	ldrh	r2, [r3, #6]
 800ca1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 febd 	bl	800d7a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	461a      	mov	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4413      	add	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	00da      	lsls	r2, r3, #3
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	4413      	add	r3, r2
 800ca46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	801a      	strh	r2, [r3, #0]
 800ca56:	f000 bc6f 	b.w	800d338 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	78db      	ldrb	r3, [r3, #3]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	f040 831e 	bne.w	800d0a0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	6a1a      	ldr	r2, [r3, #32]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	f240 82cf 	bls.w	800d010 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca88:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	441a      	add	r2, r3
 800ca96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caa2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800caa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caaa:	b29b      	uxth	r3, r3
 800caac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	6a1a      	ldr	r2, [r3, #32]
 800cab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 814f 	beq.w	800cd72 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d16b      	bne.n	800cbb8 <USB_EPStartXfer+0x1de>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800caea:	b29b      	uxth	r3, r3
 800caec:	461a      	mov	r2, r3
 800caee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf0:	4413      	add	r3, r2
 800caf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	00da      	lsls	r2, r3, #3
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	4413      	add	r3, r2
 800cafe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb12:	801a      	strh	r2, [r3, #0]
 800cb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10a      	bne.n	800cb32 <USB_EPStartXfer+0x158>
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	801a      	strh	r2, [r3, #0]
 800cb30:	e05b      	b.n	800cbea <USB_EPStartXfer+0x210>
 800cb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb36:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb38:	d81c      	bhi.n	800cb74 <USB_EPStartXfer+0x19a>
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb3e:	085b      	lsrs	r3, r3, #1
 800cb40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d004      	beq.n	800cb5a <USB_EPStartXfer+0x180>
 800cb50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb54:	3301      	adds	r3, #1
 800cb56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	029b      	lsls	r3, r3, #10
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	801a      	strh	r2, [r3, #0]
 800cb72:	e03a      	b.n	800cbea <USB_EPStartXfer+0x210>
 800cb74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb78:	095b      	lsrs	r3, r3, #5
 800cb7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb82:	f003 031f 	and.w	r3, r3, #31
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d104      	bne.n	800cb94 <USB_EPStartXfer+0x1ba>
 800cb8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	029b      	lsls	r3, r3, #10
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	4313      	orrs	r3, r2
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	e018      	b.n	800cbea <USB_EPStartXfer+0x210>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d114      	bne.n	800cbea <USB_EPStartXfer+0x210>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	4413      	add	r3, r2
 800cbce:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	00da      	lsls	r2, r3, #3
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	4413      	add	r3, r2
 800cbda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	895b      	ldrh	r3, [r3, #10]
 800cbee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	6959      	ldr	r1, [r3, #20]
 800cbf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fdce 	bl	800d7a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	695a      	ldr	r2, [r3, #20]
 800cc0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc0e:	441a      	add	r2, r3
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	6a1a      	ldr	r2, [r3, #32]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d907      	bls.n	800cc30 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc28:	1ad2      	subs	r2, r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	621a      	str	r2, [r3, #32]
 800cc2e:	e006      	b.n	800cc3e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	785b      	ldrb	r3, [r3, #1]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d16b      	bne.n	800cd1e <USB_EPStartXfer+0x344>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	61bb      	str	r3, [r7, #24]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	461a      	mov	r2, r3
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	4413      	add	r3, r2
 800cc58:	61bb      	str	r3, [r7, #24]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	00da      	lsls	r2, r3, #3
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	4413      	add	r3, r2
 800cc64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	801a      	strh	r2, [r3, #0]
 800cc7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10a      	bne.n	800cc98 <USB_EPStartXfer+0x2be>
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	e05d      	b.n	800cd54 <USB_EPStartXfer+0x37a>
 800cc98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc9c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc9e:	d81c      	bhi.n	800ccda <USB_EPStartXfer+0x300>
 800cca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cca4:	085b      	lsrs	r3, r3, #1
 800cca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ccaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d004      	beq.n	800ccc0 <USB_EPStartXfer+0x2e6>
 800ccb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ccba:	3301      	adds	r3, #1
 800ccbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	881b      	ldrh	r3, [r3, #0]
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	029b      	lsls	r3, r3, #10
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	801a      	strh	r2, [r3, #0]
 800ccd8:	e03c      	b.n	800cd54 <USB_EPStartXfer+0x37a>
 800ccda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccde:	095b      	lsrs	r3, r3, #5
 800cce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce8:	f003 031f 	and.w	r3, r3, #31
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d104      	bne.n	800ccfa <USB_EPStartXfer+0x320>
 800ccf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	029b      	lsls	r3, r3, #10
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	801a      	strh	r2, [r3, #0]
 800cd1c:	e01a      	b.n	800cd54 <USB_EPStartXfer+0x37a>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	785b      	ldrb	r3, [r3, #1]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d116      	bne.n	800cd54 <USB_EPStartXfer+0x37a>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	623b      	str	r3, [r7, #32]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	461a      	mov	r2, r3
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	4413      	add	r3, r2
 800cd38:	623b      	str	r3, [r7, #32]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	00da      	lsls	r2, r3, #3
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	4413      	add	r3, r2
 800cd44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	891b      	ldrh	r3, [r3, #8]
 800cd58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	6959      	ldr	r1, [r3, #20]
 800cd60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fd19 	bl	800d7a2 <USB_WritePMA>
 800cd70:	e2e2      	b.n	800d338 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	785b      	ldrb	r3, [r3, #1]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d16b      	bne.n	800ce52 <USB_EPStartXfer+0x478>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	461a      	mov	r2, r3
 800cd88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd8a:	4413      	add	r3, r2
 800cd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	00da      	lsls	r2, r3, #3
 800cd94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd96:	4413      	add	r3, r2
 800cd98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdac:	801a      	strh	r2, [r3, #0]
 800cdae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10a      	bne.n	800cdcc <USB_EPStartXfer+0x3f2>
 800cdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdc8:	801a      	strh	r2, [r3, #0]
 800cdca:	e05d      	b.n	800ce88 <USB_EPStartXfer+0x4ae>
 800cdcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdd0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdd2:	d81c      	bhi.n	800ce0e <USB_EPStartXfer+0x434>
 800cdd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdd8:	085b      	lsrs	r3, r3, #1
 800cdda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <USB_EPStartXfer+0x41a>
 800cdea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdee:	3301      	adds	r3, #1
 800cdf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	029b      	lsls	r3, r3, #10
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4313      	orrs	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce0a:	801a      	strh	r2, [r3, #0]
 800ce0c:	e03c      	b.n	800ce88 <USB_EPStartXfer+0x4ae>
 800ce0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce1c:	f003 031f 	and.w	r3, r3, #31
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <USB_EPStartXfer+0x454>
 800ce24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	029b      	lsls	r3, r3, #10
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	e01a      	b.n	800ce88 <USB_EPStartXfer+0x4ae>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d116      	bne.n	800ce88 <USB_EPStartXfer+0x4ae>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	461a      	mov	r2, r3
 800ce68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce6a:	4413      	add	r3, r2
 800ce6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	00da      	lsls	r2, r3, #3
 800ce74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce76:	4413      	add	r3, r2
 800ce78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	891b      	ldrh	r3, [r3, #8]
 800ce8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	6959      	ldr	r1, [r3, #20]
 800ce94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fc7f 	bl	800d7a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	695a      	ldr	r2, [r3, #20]
 800cea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceac:	441a      	add	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	6a1a      	ldr	r2, [r3, #32]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d907      	bls.n	800cece <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	6a1a      	ldr	r2, [r3, #32]
 800cec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	621a      	str	r2, [r3, #32]
 800cecc:	e006      	b.n	800cedc <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2200      	movs	r2, #0
 800ceda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	643b      	str	r3, [r7, #64]	@ 0x40
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	785b      	ldrb	r3, [r3, #1]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d16b      	bne.n	800cfc0 <USB_EPStartXfer+0x5e6>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	461a      	mov	r2, r3
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	4413      	add	r3, r2
 800cefa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	00da      	lsls	r2, r3, #3
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	4413      	add	r3, r2
 800cf06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1a:	801a      	strh	r2, [r3, #0]
 800cf1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <USB_EPStartXfer+0x560>
 800cf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf36:	801a      	strh	r2, [r3, #0]
 800cf38:	e05b      	b.n	800cff2 <USB_EPStartXfer+0x618>
 800cf3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf40:	d81c      	bhi.n	800cf7c <USB_EPStartXfer+0x5a2>
 800cf42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf46:	085b      	lsrs	r3, r3, #1
 800cf48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <USB_EPStartXfer+0x588>
 800cf58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	029b      	lsls	r3, r3, #10
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	4313      	orrs	r3, r2
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf78:	801a      	strh	r2, [r3, #0]
 800cf7a:	e03a      	b.n	800cff2 <USB_EPStartXfer+0x618>
 800cf7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf80:	095b      	lsrs	r3, r3, #5
 800cf82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf8a:	f003 031f 	and.w	r3, r3, #31
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d104      	bne.n	800cf9c <USB_EPStartXfer+0x5c2>
 800cf92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf96:	3b01      	subs	r3, #1
 800cf98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	029b      	lsls	r3, r3, #10
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4313      	orrs	r3, r2
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfbc:	801a      	strh	r2, [r3, #0]
 800cfbe:	e018      	b.n	800cff2 <USB_EPStartXfer+0x618>
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	785b      	ldrb	r3, [r3, #1]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d114      	bne.n	800cff2 <USB_EPStartXfer+0x618>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfd4:	4413      	add	r3, r2
 800cfd6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	00da      	lsls	r2, r3, #3
 800cfde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cff0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	895b      	ldrh	r3, [r3, #10]
 800cff6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	6959      	ldr	r1, [r3, #20]
 800cffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d002:	b29b      	uxth	r3, r3
 800d004:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fbca 	bl	800d7a2 <USB_WritePMA>
 800d00e:	e193      	b.n	800d338 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	6a1b      	ldr	r3, [r3, #32]
 800d014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	b29b      	uxth	r3, r3
 800d026:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d02e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	441a      	add	r2, r3
 800d03c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d050:	b29b      	uxth	r3, r3
 800d052:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d05e:	b29b      	uxth	r3, r3
 800d060:	461a      	mov	r2, r3
 800d062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d064:	4413      	add	r3, r2
 800d066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	00da      	lsls	r2, r3, #3
 800d06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d070:	4413      	add	r3, r2
 800d072:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d076:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d080:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	891b      	ldrh	r3, [r3, #8]
 800d086:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	6959      	ldr	r1, [r3, #20]
 800d08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d092:	b29b      	uxth	r3, r3
 800d094:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fb82 	bl	800d7a2 <USB_WritePMA>
 800d09e:	e14b      	b.n	800d338 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	6a1a      	ldr	r2, [r3, #32]
 800d0a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0a8:	1ad2      	subs	r2, r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f000 809a 	beq.w	800d1fa <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	785b      	ldrb	r3, [r3, #1]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d16b      	bne.n	800d1aa <USB_EPStartXfer+0x7d0>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0e2:	4413      	add	r3, r2
 800d0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	00da      	lsls	r2, r3, #3
 800d0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d0f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d100:	b29a      	uxth	r2, r3
 800d102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d104:	801a      	strh	r2, [r3, #0]
 800d106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10a      	bne.n	800d124 <USB_EPStartXfer+0x74a>
 800d10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	b29b      	uxth	r3, r3
 800d114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d120:	801a      	strh	r2, [r3, #0]
 800d122:	e05b      	b.n	800d1dc <USB_EPStartXfer+0x802>
 800d124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d128:	2b3e      	cmp	r3, #62	@ 0x3e
 800d12a:	d81c      	bhi.n	800d166 <USB_EPStartXfer+0x78c>
 800d12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d130:	085b      	lsrs	r3, r3, #1
 800d132:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <USB_EPStartXfer+0x772>
 800d142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d146:	3301      	adds	r3, #1
 800d148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d14c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	b29a      	uxth	r2, r3
 800d152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d156:	b29b      	uxth	r3, r3
 800d158:	029b      	lsls	r3, r3, #10
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	4313      	orrs	r3, r2
 800d15e:	b29a      	uxth	r2, r3
 800d160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d162:	801a      	strh	r2, [r3, #0]
 800d164:	e03a      	b.n	800d1dc <USB_EPStartXfer+0x802>
 800d166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d16a:	095b      	lsrs	r3, r3, #5
 800d16c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d174:	f003 031f 	and.w	r3, r3, #31
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d104      	bne.n	800d186 <USB_EPStartXfer+0x7ac>
 800d17c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d180:	3b01      	subs	r3, #1
 800d182:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d190:	b29b      	uxth	r3, r3
 800d192:	029b      	lsls	r3, r3, #10
 800d194:	b29b      	uxth	r3, r3
 800d196:	4313      	orrs	r3, r2
 800d198:	b29b      	uxth	r3, r3
 800d19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1a6:	801a      	strh	r2, [r3, #0]
 800d1a8:	e018      	b.n	800d1dc <USB_EPStartXfer+0x802>
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	785b      	ldrb	r3, [r3, #1]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d114      	bne.n	800d1dc <USB_EPStartXfer+0x802>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1be:	4413      	add	r3, r2
 800d1c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	00da      	lsls	r2, r3, #3
 800d1c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	895b      	ldrh	r3, [r3, #10]
 800d1e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	6959      	ldr	r1, [r3, #20]
 800d1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fad5 	bl	800d7a2 <USB_WritePMA>
 800d1f8:	e09e      	b.n	800d338 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d16b      	bne.n	800d2da <USB_EPStartXfer+0x900>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	461a      	mov	r2, r3
 800d210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d212:	4413      	add	r3, r2
 800d214:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	00da      	lsls	r2, r3, #3
 800d21c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d21e:	4413      	add	r3, r2
 800d220:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d224:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d230:	b29a      	uxth	r2, r3
 800d232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d234:	801a      	strh	r2, [r3, #0]
 800d236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <USB_EPStartXfer+0x87a>
 800d23e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	b29b      	uxth	r3, r3
 800d244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	e063      	b.n	800d31c <USB_EPStartXfer+0x942>
 800d254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d258:	2b3e      	cmp	r3, #62	@ 0x3e
 800d25a:	d81c      	bhi.n	800d296 <USB_EPStartXfer+0x8bc>
 800d25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d260:	085b      	lsrs	r3, r3, #1
 800d262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <USB_EPStartXfer+0x8a2>
 800d272:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d276:	3301      	adds	r3, #1
 800d278:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d27c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	b29a      	uxth	r2, r3
 800d282:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d286:	b29b      	uxth	r3, r3
 800d288:	029b      	lsls	r3, r3, #10
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	4313      	orrs	r3, r2
 800d28e:	b29a      	uxth	r2, r3
 800d290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d292:	801a      	strh	r2, [r3, #0]
 800d294:	e042      	b.n	800d31c <USB_EPStartXfer+0x942>
 800d296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d29a:	095b      	lsrs	r3, r3, #5
 800d29c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2a4:	f003 031f 	and.w	r3, r3, #31
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <USB_EPStartXfer+0x8dc>
 800d2ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	029b      	lsls	r3, r3, #10
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2d6:	801a      	strh	r2, [r3, #0]
 800d2d8:	e020      	b.n	800d31c <USB_EPStartXfer+0x942>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	785b      	ldrb	r3, [r3, #1]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d11c      	bne.n	800d31c <USB_EPStartXfer+0x942>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	00da      	lsls	r2, r3, #3
 800d302:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d306:	4413      	add	r3, r2
 800d308:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d30c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d314:	b29a      	uxth	r2, r3
 800d316:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d31a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	891b      	ldrh	r3, [r3, #8]
 800d320:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	6959      	ldr	r1, [r3, #20]
 800d328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fa35 	bl	800d7a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	b29b      	uxth	r3, r3
 800d346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d34a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d34e:	817b      	strh	r3, [r7, #10]
 800d350:	897b      	ldrh	r3, [r7, #10]
 800d352:	f083 0310 	eor.w	r3, r3, #16
 800d356:	817b      	strh	r3, [r7, #10]
 800d358:	897b      	ldrh	r3, [r7, #10]
 800d35a:	f083 0320 	eor.w	r3, r3, #32
 800d35e:	817b      	strh	r3, [r7, #10]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	441a      	add	r2, r3
 800d36a:	897b      	ldrh	r3, [r7, #10]
 800d36c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	8013      	strh	r3, [r2, #0]
 800d380:	e0d5      	b.n	800d52e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	7b1b      	ldrb	r3, [r3, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d156      	bne.n	800d438 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d122      	bne.n	800d3d8 <USB_EPStartXfer+0x9fe>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	78db      	ldrb	r3, [r3, #3]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d11e      	bne.n	800d3d8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3b0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	441a      	add	r2, r3
 800d3be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d3c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	8013      	strh	r3, [r2, #0]
 800d3d6:	e01d      	b.n	800d414 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3ee:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	441a      	add	r2, r3
 800d3fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d40c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d410:	b29b      	uxth	r3, r3
 800d412:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	699a      	ldr	r2, [r3, #24]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d907      	bls.n	800d430 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	699a      	ldr	r2, [r3, #24]
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	1ad2      	subs	r2, r2, r3
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	619a      	str	r2, [r3, #24]
 800d42e:	e054      	b.n	800d4da <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	2200      	movs	r2, #0
 800d434:	619a      	str	r2, [r3, #24]
 800d436:	e050      	b.n	800d4da <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	78db      	ldrb	r3, [r3, #3]
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d142      	bne.n	800d4c6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d048      	beq.n	800d4da <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d458:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d45c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <USB_EPStartXfer+0xa96>
 800d464:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d470:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d12e      	bne.n	800d4da <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d47c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d128      	bne.n	800d4da <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	b29b      	uxth	r3, r3
 800d496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d49a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d49e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	441a      	add	r2, r3
 800d4ac:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d4b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	8013      	strh	r3, [r2, #0]
 800d4c4:	e009      	b.n	800d4da <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	78db      	ldrb	r3, [r3, #3]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d103      	bne.n	800d4d6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	619a      	str	r2, [r3, #24]
 800d4d4:	e001      	b.n	800d4da <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e02a      	b.n	800d530 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d4f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d4f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d4fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d500:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d504:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d508:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	441a      	add	r2, r3
 800d516:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d51a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d51e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	37b0      	adds	r7, #176	@ 0xb0
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	785b      	ldrb	r3, [r3, #1]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d020      	beq.n	800d58c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	b29b      	uxth	r3, r3
 800d558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d55c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d560:	81bb      	strh	r3, [r7, #12]
 800d562:	89bb      	ldrh	r3, [r7, #12]
 800d564:	f083 0310 	eor.w	r3, r3, #16
 800d568:	81bb      	strh	r3, [r7, #12]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	441a      	add	r2, r3
 800d574:	89bb      	ldrh	r3, [r7, #12]
 800d576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d57a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d57e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d586:	b29b      	uxth	r3, r3
 800d588:	8013      	strh	r3, [r2, #0]
 800d58a:	e01f      	b.n	800d5cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5a2:	81fb      	strh	r3, [r7, #14]
 800d5a4:	89fb      	ldrh	r3, [r7, #14]
 800d5a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5aa:	81fb      	strh	r3, [r7, #14]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	441a      	add	r2, r3
 800d5b6:	89fb      	ldrh	r3, [r7, #14]
 800d5b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3714      	adds	r7, #20
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5da:	b480      	push	{r7}
 800d5dc:	b087      	sub	sp, #28
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d04c      	beq.n	800d686 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	4413      	add	r3, r2
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	823b      	strh	r3, [r7, #16]
 800d5fa:	8a3b      	ldrh	r3, [r7, #16]
 800d5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d600:	2b00      	cmp	r3, #0
 800d602:	d01b      	beq.n	800d63c <USB_EPClearStall+0x62>
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	b29b      	uxth	r3, r3
 800d612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d61a:	81fb      	strh	r3, [r7, #14]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	441a      	add	r2, r3
 800d626:	89fb      	ldrh	r3, [r7, #14]
 800d628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d62c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d634:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d638:	b29b      	uxth	r3, r3
 800d63a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	78db      	ldrb	r3, [r3, #3]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d06c      	beq.n	800d71e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	b29b      	uxth	r3, r3
 800d652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d65a:	81bb      	strh	r3, [r7, #12]
 800d65c:	89bb      	ldrh	r3, [r7, #12]
 800d65e:	f083 0320 	eor.w	r3, r3, #32
 800d662:	81bb      	strh	r3, [r7, #12]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	441a      	add	r2, r3
 800d66e:	89bb      	ldrh	r3, [r7, #12]
 800d670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d680:	b29b      	uxth	r3, r3
 800d682:	8013      	strh	r3, [r2, #0]
 800d684:	e04b      	b.n	800d71e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	82fb      	strh	r3, [r7, #22]
 800d694:	8afb      	ldrh	r3, [r7, #22]
 800d696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d01b      	beq.n	800d6d6 <USB_EPClearStall+0xfc>
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6b4:	82bb      	strh	r3, [r7, #20]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	441a      	add	r2, r3
 800d6c0:	8abb      	ldrh	r3, [r7, #20]
 800d6c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d6ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4413      	add	r3, r2
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ec:	827b      	strh	r3, [r7, #18]
 800d6ee:	8a7b      	ldrh	r3, [r7, #18]
 800d6f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6f4:	827b      	strh	r3, [r7, #18]
 800d6f6:	8a7b      	ldrh	r3, [r7, #18]
 800d6f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d6fc:	827b      	strh	r3, [r7, #18]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	441a      	add	r2, r3
 800d708:	8a7b      	ldrh	r3, [r7, #18]
 800d70a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d70e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	371c      	adds	r7, #28
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d103      	bne.n	800d746 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2280      	movs	r2, #128	@ 0x80
 800d742:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d762:	b29b      	uxth	r3, r3
 800d764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d782:	b480      	push	{r7}
 800d784:	b085      	sub	sp, #20
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d790:	b29b      	uxth	r3, r3
 800d792:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d794:	68fb      	ldr	r3, [r7, #12]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b08b      	sub	sp, #44	@ 0x2c
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	80fb      	strh	r3, [r7, #6]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d7b8:	88bb      	ldrh	r3, [r7, #4]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	085b      	lsrs	r3, r3, #1
 800d7be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d7d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7d8:	e01b      	b.n	800d812 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	021b      	lsls	r3, r3, #8
 800d7e8:	b21a      	sxth	r2, r3
 800d7ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	b21b      	sxth	r3, r3
 800d7f2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	8a7a      	ldrh	r2, [r7, #18]
 800d7f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	3302      	adds	r3, #2
 800d7fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	3301      	adds	r3, #1
 800d804:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	3301      	adds	r3, #1
 800d80a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80e:	3b01      	subs	r3, #1
 800d810:	627b      	str	r3, [r7, #36]	@ 0x24
 800d812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e0      	bne.n	800d7da <USB_WritePMA+0x38>
  }
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	372c      	adds	r7, #44	@ 0x2c
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d826:	b480      	push	{r7}
 800d828:	b08b      	sub	sp, #44	@ 0x2c
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	4611      	mov	r1, r2
 800d832:	461a      	mov	r2, r3
 800d834:	460b      	mov	r3, r1
 800d836:	80fb      	strh	r3, [r7, #6]
 800d838:	4613      	mov	r3, r2
 800d83a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d83c:	88bb      	ldrh	r3, [r7, #4]
 800d83e:	085b      	lsrs	r3, r3, #1
 800d840:	b29b      	uxth	r3, r3
 800d842:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d84c:	88fa      	ldrh	r2, [r7, #6]
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	4413      	add	r3, r2
 800d852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d856:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d85c:	e018      	b.n	800d890 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	b29b      	uxth	r3, r3
 800d864:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	3302      	adds	r3, #2
 800d86a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	3301      	adds	r3, #1
 800d878:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	0a1b      	lsrs	r3, r3, #8
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	3301      	adds	r3, #1
 800d888:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88c:	3b01      	subs	r3, #1
 800d88e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e3      	bne.n	800d85e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d896:	88bb      	ldrh	r3, [r7, #4]
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	701a      	strb	r2, [r3, #0]
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	372c      	adds	r7, #44	@ 0x2c
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d8cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d8d0:	f007 fc5c 	bl	801518c <USBD_static_malloc>
 800d8d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d109      	bne.n	800d8f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	32b0      	adds	r2, #176	@ 0xb0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e0d4      	b.n	800da9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d8f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f008 f938 	bl	8015b6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	32b0      	adds	r2, #176	@ 0xb0
 800d906:	68f9      	ldr	r1, [r7, #12]
 800d908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	32b0      	adds	r2, #176	@ 0xb0
 800d916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	7c1b      	ldrb	r3, [r3, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d138      	bne.n	800d99a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d928:	4b5e      	ldr	r3, [pc, #376]	@ (800daa4 <USBD_CDC_Init+0x1e4>)
 800d92a:	7819      	ldrb	r1, [r3, #0]
 800d92c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d930:	2202      	movs	r2, #2
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f007 fad1 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d938:	4b5a      	ldr	r3, [pc, #360]	@ (800daa4 <USBD_CDC_Init+0x1e4>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 020f 	and.w	r2, r3, #15
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	440b      	add	r3, r1
 800d94c:	3324      	adds	r3, #36	@ 0x24
 800d94e:	2201      	movs	r2, #1
 800d950:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d952:	4b55      	ldr	r3, [pc, #340]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800d954:	7819      	ldrb	r1, [r3, #0]
 800d956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d95a:	2202      	movs	r2, #2
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f007 fabc 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d962:	4b51      	ldr	r3, [pc, #324]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	f003 020f 	and.w	r2, r3, #15
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	4613      	mov	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4413      	add	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	440b      	add	r3, r1
 800d976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d97a:	2201      	movs	r2, #1
 800d97c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d97e:	4b4b      	ldr	r3, [pc, #300]	@ (800daac <USBD_CDC_Init+0x1ec>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	f003 020f 	and.w	r2, r3, #15
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	3326      	adds	r3, #38	@ 0x26
 800d994:	2210      	movs	r2, #16
 800d996:	801a      	strh	r2, [r3, #0]
 800d998:	e035      	b.n	800da06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d99a:	4b42      	ldr	r3, [pc, #264]	@ (800daa4 <USBD_CDC_Init+0x1e4>)
 800d99c:	7819      	ldrb	r1, [r3, #0]
 800d99e:	2340      	movs	r3, #64	@ 0x40
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f007 fa99 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d9a8:	4b3e      	ldr	r3, [pc, #248]	@ (800daa4 <USBD_CDC_Init+0x1e4>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 020f 	and.w	r2, r3, #15
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3324      	adds	r3, #36	@ 0x24
 800d9be:	2201      	movs	r2, #1
 800d9c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d9c2:	4b39      	ldr	r3, [pc, #228]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800d9c4:	7819      	ldrb	r1, [r3, #0]
 800d9c6:	2340      	movs	r3, #64	@ 0x40
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f007 fa85 	bl	8014eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d9d0:	4b35      	ldr	r3, [pc, #212]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	f003 020f 	and.w	r2, r3, #15
 800d9d8:	6879      	ldr	r1, [r7, #4]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	440b      	add	r3, r1
 800d9e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d9ec:	4b2f      	ldr	r3, [pc, #188]	@ (800daac <USBD_CDC_Init+0x1ec>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f003 020f 	and.w	r2, r3, #15
 800d9f4:	6879      	ldr	r1, [r7, #4]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4413      	add	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	440b      	add	r3, r1
 800da00:	3326      	adds	r3, #38	@ 0x26
 800da02:	2210      	movs	r2, #16
 800da04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da06:	4b29      	ldr	r3, [pc, #164]	@ (800daac <USBD_CDC_Init+0x1ec>)
 800da08:	7819      	ldrb	r1, [r3, #0]
 800da0a:	2308      	movs	r3, #8
 800da0c:	2203      	movs	r2, #3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f007 fa63 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800da14:	4b25      	ldr	r3, [pc, #148]	@ (800daac <USBD_CDC_Init+0x1ec>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	f003 020f 	and.w	r2, r3, #15
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	440b      	add	r3, r1
 800da28:	3324      	adds	r3, #36	@ 0x24
 800da2a:	2201      	movs	r2, #1
 800da2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2200      	movs	r2, #0
 800da32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	33b0      	adds	r3, #176	@ 0xb0
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4413      	add	r3, r2
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800da64:	2302      	movs	r3, #2
 800da66:	e018      	b.n	800da9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7c1b      	ldrb	r3, [r3, #16]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da70:	4b0d      	ldr	r3, [pc, #52]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800da72:	7819      	ldrb	r1, [r3, #0]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f007 fb1a 	bl	80150b8 <USBD_LL_PrepareReceive>
 800da84:	e008      	b.n	800da98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da86:	4b08      	ldr	r3, [pc, #32]	@ (800daa8 <USBD_CDC_Init+0x1e8>)
 800da88:	7819      	ldrb	r1, [r3, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da90:	2340      	movs	r3, #64	@ 0x40
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f007 fb10 	bl	80150b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	200000a3 	.word	0x200000a3
 800daa8:	200000a4 	.word	0x200000a4
 800daac:	200000a5 	.word	0x200000a5

0800dab0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dabc:	4b3a      	ldr	r3, [pc, #232]	@ (800dba8 <USBD_CDC_DeInit+0xf8>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f007 fa2f 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dac8:	4b37      	ldr	r3, [pc, #220]	@ (800dba8 <USBD_CDC_DeInit+0xf8>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	f003 020f 	and.w	r2, r3, #15
 800dad0:	6879      	ldr	r1, [r7, #4]
 800dad2:	4613      	mov	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	440b      	add	r3, r1
 800dadc:	3324      	adds	r3, #36	@ 0x24
 800dade:	2200      	movs	r2, #0
 800dae0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dae2:	4b32      	ldr	r3, [pc, #200]	@ (800dbac <USBD_CDC_DeInit+0xfc>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f007 fa1c 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800daee:	4b2f      	ldr	r3, [pc, #188]	@ (800dbac <USBD_CDC_DeInit+0xfc>)
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	f003 020f 	and.w	r2, r3, #15
 800daf6:	6879      	ldr	r1, [r7, #4]
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	440b      	add	r3, r1
 800db02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db06:	2200      	movs	r2, #0
 800db08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800db0a:	4b29      	ldr	r3, [pc, #164]	@ (800dbb0 <USBD_CDC_DeInit+0x100>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f007 fa08 	bl	8014f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800db16:	4b26      	ldr	r3, [pc, #152]	@ (800dbb0 <USBD_CDC_DeInit+0x100>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	f003 020f 	and.w	r2, r3, #15
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	3324      	adds	r3, #36	@ 0x24
 800db2c:	2200      	movs	r2, #0
 800db2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800db30:	4b1f      	ldr	r3, [pc, #124]	@ (800dbb0 <USBD_CDC_DeInit+0x100>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f003 020f 	and.w	r2, r3, #15
 800db38:	6879      	ldr	r1, [r7, #4]
 800db3a:	4613      	mov	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	440b      	add	r3, r1
 800db44:	3326      	adds	r3, #38	@ 0x26
 800db46:	2200      	movs	r2, #0
 800db48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	32b0      	adds	r2, #176	@ 0xb0
 800db54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01f      	beq.n	800db9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	33b0      	adds	r3, #176	@ 0xb0
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4413      	add	r3, r2
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	32b0      	adds	r2, #176	@ 0xb0
 800db7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7e:	4618      	mov	r0, r3
 800db80:	f007 fb12 	bl	80151a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	32b0      	adds	r2, #176	@ 0xb0
 800db8e:	2100      	movs	r1, #0
 800db90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	200000a3 	.word	0x200000a3
 800dbac:	200000a4 	.word	0x200000a4
 800dbb0:	200000a5 	.word	0x200000a5

0800dbb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	32b0      	adds	r2, #176	@ 0xb0
 800dbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	e0bf      	b.n	800dd64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d050      	beq.n	800dc92 <USBD_CDC_Setup+0xde>
 800dbf0:	2b20      	cmp	r3, #32
 800dbf2:	f040 80af 	bne.w	800dd54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	88db      	ldrh	r3, [r3, #6]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d03a      	beq.n	800dc74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	b25b      	sxtb	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	da1b      	bge.n	800dc40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	33b0      	adds	r3, #176	@ 0xb0
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800dc1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	88d2      	ldrh	r2, [r2, #6]
 800dc24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	88db      	ldrh	r3, [r3, #6]
 800dc2a:	2b07      	cmp	r3, #7
 800dc2c:	bf28      	it	cs
 800dc2e:	2307      	movcs	r3, #7
 800dc30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	89fa      	ldrh	r2, [r7, #14]
 800dc36:	4619      	mov	r1, r3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f001 fd2b 	bl	800f694 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800dc3e:	e090      	b.n	800dd62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	785a      	ldrb	r2, [r3, #1]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	88db      	ldrh	r3, [r3, #6]
 800dc4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800dc50:	d803      	bhi.n	800dc5a <USBD_CDC_Setup+0xa6>
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	88db      	ldrh	r3, [r3, #6]
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	e000      	b.n	800dc5c <USBD_CDC_Setup+0xa8>
 800dc5a:	2240      	movs	r2, #64	@ 0x40
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dc62:	6939      	ldr	r1, [r7, #16]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f001 fd3d 	bl	800f6ec <USBD_CtlPrepareRx>
      break;
 800dc72:	e076      	b.n	800dd62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	33b0      	adds	r3, #176	@ 0xb0
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	7850      	ldrb	r0, [r2, #1]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	4798      	blx	r3
      break;
 800dc90:	e067      	b.n	800dd62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	785b      	ldrb	r3, [r3, #1]
 800dc96:	2b0b      	cmp	r3, #11
 800dc98:	d851      	bhi.n	800dd3e <USBD_CDC_Setup+0x18a>
 800dc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dca0 <USBD_CDC_Setup+0xec>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dcd1 	.word	0x0800dcd1
 800dca4:	0800dd4d 	.word	0x0800dd4d
 800dca8:	0800dd3f 	.word	0x0800dd3f
 800dcac:	0800dd3f 	.word	0x0800dd3f
 800dcb0:	0800dd3f 	.word	0x0800dd3f
 800dcb4:	0800dd3f 	.word	0x0800dd3f
 800dcb8:	0800dd3f 	.word	0x0800dd3f
 800dcbc:	0800dd3f 	.word	0x0800dd3f
 800dcc0:	0800dd3f 	.word	0x0800dd3f
 800dcc4:	0800dd3f 	.word	0x0800dd3f
 800dcc8:	0800dcfb 	.word	0x0800dcfb
 800dccc:	0800dd25 	.word	0x0800dd25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d107      	bne.n	800dcec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dcdc:	f107 030a 	add.w	r3, r7, #10
 800dce0:	2202      	movs	r2, #2
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 fcd5 	bl	800f694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dcea:	e032      	b.n	800dd52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f001 fc53 	bl	800f59a <USBD_CtlError>
            ret = USBD_FAIL;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	75fb      	strb	r3, [r7, #23]
          break;
 800dcf8:	e02b      	b.n	800dd52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d107      	bne.n	800dd16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dd06:	f107 030d 	add.w	r3, r7, #13
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f001 fcc0 	bl	800f694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dd14:	e01d      	b.n	800dd52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 fc3e 	bl	800f59a <USBD_CtlError>
            ret = USBD_FAIL;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	75fb      	strb	r3, [r7, #23]
          break;
 800dd22:	e016      	b.n	800dd52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d00f      	beq.n	800dd50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 fc31 	bl	800f59a <USBD_CtlError>
            ret = USBD_FAIL;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dd3c:	e008      	b.n	800dd50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f001 fc2a 	bl	800f59a <USBD_CtlError>
          ret = USBD_FAIL;
 800dd46:	2303      	movs	r3, #3
 800dd48:	75fb      	strb	r3, [r7, #23]
          break;
 800dd4a:	e002      	b.n	800dd52 <USBD_CDC_Setup+0x19e>
          break;
 800dd4c:	bf00      	nop
 800dd4e:	e008      	b.n	800dd62 <USBD_CDC_Setup+0x1ae>
          break;
 800dd50:	bf00      	nop
      }
      break;
 800dd52:	e006      	b.n	800dd62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f001 fc1f 	bl	800f59a <USBD_CtlError>
      ret = USBD_FAIL;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	75fb      	strb	r3, [r7, #23]
      break;
 800dd60:	bf00      	nop
  }

  return (uint8_t)ret;
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3718      	adds	r7, #24
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	460b      	mov	r3, r1
 800dd76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	32b0      	adds	r2, #176	@ 0xb0
 800dd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dd92:	2303      	movs	r3, #3
 800dd94:	e065      	b.n	800de62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	32b0      	adds	r2, #176	@ 0xb0
 800dda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dda6:	78fb      	ldrb	r3, [r7, #3]
 800dda8:	f003 020f 	and.w	r2, r3, #15
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	440b      	add	r3, r1
 800ddb8:	3318      	adds	r3, #24
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d02f      	beq.n	800de20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	f003 020f 	and.w	r2, r3, #15
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	440b      	add	r3, r1
 800ddd2:	3318      	adds	r3, #24
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	78fb      	ldrb	r3, [r7, #3]
 800ddd8:	f003 010f 	and.w	r1, r3, #15
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	460b      	mov	r3, r1
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	440b      	add	r3, r1
 800dde4:	00db      	lsls	r3, r3, #3
 800dde6:	4403      	add	r3, r0
 800dde8:	3320      	adds	r3, #32
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	fbb2 f1f3 	udiv	r1, r2, r3
 800ddf0:	fb01 f303 	mul.w	r3, r1, r3
 800ddf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d112      	bne.n	800de20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ddfa:	78fb      	ldrb	r3, [r7, #3]
 800ddfc:	f003 020f 	and.w	r2, r3, #15
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	440b      	add	r3, r1
 800de0c:	3318      	adds	r3, #24
 800de0e:	2200      	movs	r2, #0
 800de10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800de12:	78f9      	ldrb	r1, [r7, #3]
 800de14:	2300      	movs	r3, #0
 800de16:	2200      	movs	r2, #0
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f007 f92c 	bl	8015076 <USBD_LL_Transmit>
 800de1e:	e01f      	b.n	800de60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2200      	movs	r2, #0
 800de24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	33b0      	adds	r3, #176	@ 0xb0
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d010      	beq.n	800de60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	33b0      	adds	r3, #176	@ 0xb0
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800de5c:	78fa      	ldrb	r2, [r7, #3]
 800de5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	460b      	mov	r3, r1
 800de74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	32b0      	adds	r2, #176	@ 0xb0
 800de80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	32b0      	adds	r2, #176	@ 0xb0
 800de90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800de98:	2303      	movs	r3, #3
 800de9a:	e01a      	b.n	800ded2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f007 f92a 	bl	80150fa <USBD_LL_GetRxDataSize>
 800dea6:	4602      	mov	r2, r0
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	33b0      	adds	r3, #176	@ 0xb0
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800decc:	4611      	mov	r1, r2
 800dece:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	32b0      	adds	r2, #176	@ 0xb0
 800deec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800def8:	2303      	movs	r3, #3
 800defa:	e024      	b.n	800df46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	33b0      	adds	r3, #176	@ 0xb0
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d019      	beq.n	800df44 <USBD_CDC_EP0_RxReady+0x6a>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800df16:	2bff      	cmp	r3, #255	@ 0xff
 800df18:	d014      	beq.n	800df44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	33b0      	adds	r3, #176	@ 0xb0
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4413      	add	r3, r2
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800df32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800df3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	22ff      	movs	r2, #255	@ 0xff
 800df40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df58:	2182      	movs	r1, #130	@ 0x82
 800df5a:	4818      	ldr	r0, [pc, #96]	@ (800dfbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800df5c:	f000 fcbd 	bl	800e8da <USBD_GetEpDesc>
 800df60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df62:	2101      	movs	r1, #1
 800df64:	4815      	ldr	r0, [pc, #84]	@ (800dfbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800df66:	f000 fcb8 	bl	800e8da <USBD_GetEpDesc>
 800df6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800df6c:	2181      	movs	r1, #129	@ 0x81
 800df6e:	4813      	ldr	r0, [pc, #76]	@ (800dfbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800df70:	f000 fcb3 	bl	800e8da <USBD_GetEpDesc>
 800df74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2210      	movs	r2, #16
 800df80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df90:	711a      	strb	r2, [r3, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d006      	beq.n	800dfaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfa4:	711a      	strb	r2, [r3, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2243      	movs	r2, #67	@ 0x43
 800dfae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dfb0:	4b02      	ldr	r3, [pc, #8]	@ (800dfbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000060 	.word	0x20000060

0800dfc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dfc8:	2182      	movs	r1, #130	@ 0x82
 800dfca:	4818      	ldr	r0, [pc, #96]	@ (800e02c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dfcc:	f000 fc85 	bl	800e8da <USBD_GetEpDesc>
 800dfd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	4815      	ldr	r0, [pc, #84]	@ (800e02c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dfd6:	f000 fc80 	bl	800e8da <USBD_GetEpDesc>
 800dfda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dfdc:	2181      	movs	r1, #129	@ 0x81
 800dfde:	4813      	ldr	r0, [pc, #76]	@ (800e02c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dfe0:	f000 fc7b 	bl	800e8da <USBD_GetEpDesc>
 800dfe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2210      	movs	r2, #16
 800dff0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d006      	beq.n	800e006 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	2200      	movs	r2, #0
 800dffc:	711a      	strb	r2, [r3, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f042 0202 	orr.w	r2, r2, #2
 800e004:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d006      	beq.n	800e01a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	711a      	strb	r2, [r3, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	f042 0202 	orr.w	r2, r2, #2
 800e018:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2243      	movs	r2, #67	@ 0x43
 800e01e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e020:	4b02      	ldr	r3, [pc, #8]	@ (800e02c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000060 	.word	0x20000060

0800e030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e038:	2182      	movs	r1, #130	@ 0x82
 800e03a:	4818      	ldr	r0, [pc, #96]	@ (800e09c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e03c:	f000 fc4d 	bl	800e8da <USBD_GetEpDesc>
 800e040:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e042:	2101      	movs	r1, #1
 800e044:	4815      	ldr	r0, [pc, #84]	@ (800e09c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e046:	f000 fc48 	bl	800e8da <USBD_GetEpDesc>
 800e04a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e04c:	2181      	movs	r1, #129	@ 0x81
 800e04e:	4813      	ldr	r0, [pc, #76]	@ (800e09c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e050:	f000 fc43 	bl	800e8da <USBD_GetEpDesc>
 800e054:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2210      	movs	r2, #16
 800e060:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d006      	beq.n	800e076 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e070:	711a      	strb	r2, [r3, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d006      	beq.n	800e08a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e084:	711a      	strb	r2, [r3, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2243      	movs	r2, #67	@ 0x43
 800e08e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e090:	4b02      	ldr	r3, [pc, #8]	@ (800e09c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000060 	.word	0x20000060

0800e0a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	220a      	movs	r2, #10
 800e0ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e0ae:	4b03      	ldr	r3, [pc, #12]	@ (800e0bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	2000001c 	.word	0x2000001c

0800e0c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e009      	b.n	800e0e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	33b0      	adds	r3, #176	@ 0xb0
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	32b0      	adds	r2, #176	@ 0xb0
 800e10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e116:	2303      	movs	r3, #3
 800e118:	e008      	b.n	800e12c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	371c      	adds	r7, #28
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	32b0      	adds	r2, #176	@ 0xb0
 800e14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e158:	2303      	movs	r3, #3
 800e15a:	e004      	b.n	800e166 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
	...

0800e174 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	32b0      	adds	r2, #176	@ 0xb0
 800e186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e18c:	2301      	movs	r3, #1
 800e18e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e196:	2303      	movs	r3, #3
 800e198:	e025      	b.n	800e1e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d11f      	bne.n	800e1e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e1ac:	4b10      	ldr	r3, [pc, #64]	@ (800e1f0 <USBD_CDC_TransmitPacket+0x7c>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	f003 020f 	and.w	r2, r3, #15
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4403      	add	r3, r0
 800e1c6:	3318      	adds	r3, #24
 800e1c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e1ca:	4b09      	ldr	r3, [pc, #36]	@ (800e1f0 <USBD_CDC_TransmitPacket+0x7c>)
 800e1cc:	7819      	ldrb	r1, [r3, #0]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f006 ff4b 	bl	8015076 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	200000a3 	.word	0x200000a3

0800e1f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	32b0      	adds	r2, #176	@ 0xb0
 800e206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	32b0      	adds	r2, #176	@ 0xb0
 800e216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d101      	bne.n	800e222 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e21e:	2303      	movs	r3, #3
 800e220:	e018      	b.n	800e254 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	7c1b      	ldrb	r3, [r3, #16]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d10a      	bne.n	800e240 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e22a:	4b0c      	ldr	r3, [pc, #48]	@ (800e25c <USBD_CDC_ReceivePacket+0x68>)
 800e22c:	7819      	ldrb	r1, [r3, #0]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f006 ff3d 	bl	80150b8 <USBD_LL_PrepareReceive>
 800e23e:	e008      	b.n	800e252 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e240:	4b06      	ldr	r3, [pc, #24]	@ (800e25c <USBD_CDC_ReceivePacket+0x68>)
 800e242:	7819      	ldrb	r1, [r3, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e24a:	2340      	movs	r3, #64	@ 0x40
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f006 ff33 	bl	80150b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	200000a4 	.word	0x200000a4

0800e260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	4613      	mov	r3, r2
 800e26c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e274:	2303      	movs	r3, #3
 800e276:	e01f      	b.n	800e2b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	79fa      	ldrb	r2, [r7, #7]
 800e2aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f006 fd97 	bl	8014de0 <USBD_LL_Init>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d101      	bne.n	800e2d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e2d4:	2303      	movs	r3, #3
 800e2d6:	e025      	b.n	800e324 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	32ae      	adds	r2, #174	@ 0xae
 800e2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00f      	beq.n	800e314 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	32ae      	adds	r2, #174	@ 0xae
 800e2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e304:	f107 020e 	add.w	r2, r7, #14
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
 800e30c:	4602      	mov	r2, r0
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f006 fdb5 	bl	8014ea4 <USBD_LL_Start>
 800e33a:	4603      	mov	r3, r0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e34c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e34e:	4618      	mov	r0, r3
 800e350:	370c      	adds	r7, #12
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr

0800e35a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b084      	sub	sp, #16
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	460b      	mov	r3, r1
 800e364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e370:	2b00      	cmp	r3, #0
 800e372:	d009      	beq.n	800e388 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	78fa      	ldrb	r2, [r7, #3]
 800e37e:	4611      	mov	r1, r2
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	4798      	blx	r3
 800e384:	4603      	mov	r3, r0
 800e386:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e388:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	4798      	blx	r3
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f001 f8a4 	bl	800f526 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3fa:	f003 031f 	and.w	r3, r3, #31
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d01a      	beq.n	800e438 <USBD_LL_SetupStage+0x72>
 800e402:	2b02      	cmp	r3, #2
 800e404:	d822      	bhi.n	800e44c <USBD_LL_SetupStage+0x86>
 800e406:	2b00      	cmp	r3, #0
 800e408:	d002      	beq.n	800e410 <USBD_LL_SetupStage+0x4a>
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d00a      	beq.n	800e424 <USBD_LL_SetupStage+0x5e>
 800e40e:	e01d      	b.n	800e44c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fad1 	bl	800e9c0 <USBD_StdDevReq>
 800e41e:	4603      	mov	r3, r0
 800e420:	73fb      	strb	r3, [r7, #15]
      break;
 800e422:	e020      	b.n	800e466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fb39 	bl	800eaa4 <USBD_StdItfReq>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
      break;
 800e436:	e016      	b.n	800e466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e43e:	4619      	mov	r1, r3
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fb9b 	bl	800eb7c <USBD_StdEPReq>
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]
      break;
 800e44a:	e00c      	b.n	800e466 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e452:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e456:	b2db      	uxtb	r3, r3
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f006 fd82 	bl	8014f64 <USBD_LL_StallEP>
 800e460:	4603      	mov	r3, r0
 800e462:	73fb      	strb	r3, [r7, #15]
      break;
 800e464:	bf00      	nop
  }

  return ret;
 800e466:	7bfb      	ldrb	r3, [r7, #15]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	460b      	mov	r3, r1
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e482:	7afb      	ldrb	r3, [r7, #11]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d16e      	bne.n	800e566 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e48e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e496:	2b03      	cmp	r3, #3
 800e498:	f040 8098 	bne.w	800e5cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	689a      	ldr	r2, [r3, #8]
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d913      	bls.n	800e4d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	689a      	ldr	r2, [r3, #8]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	1ad2      	subs	r2, r2, r3
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	68da      	ldr	r2, [r3, #12]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	bf28      	it	cs
 800e4c2:	4613      	movcs	r3, r2
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f001 f92c 	bl	800f726 <USBD_CtlContinueRx>
 800e4ce:	e07d      	b.n	800e5cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e4d6:	f003 031f 	and.w	r3, r3, #31
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d014      	beq.n	800e508 <USBD_LL_DataOutStage+0x98>
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d81d      	bhi.n	800e51e <USBD_LL_DataOutStage+0xae>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d002      	beq.n	800e4ec <USBD_LL_DataOutStage+0x7c>
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d003      	beq.n	800e4f2 <USBD_LL_DataOutStage+0x82>
 800e4ea:	e018      	b.n	800e51e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	75bb      	strb	r3, [r7, #22]
            break;
 800e4f0:	e018      	b.n	800e524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f000 f9d2 	bl	800e8a6 <USBD_CoreFindIF>
 800e502:	4603      	mov	r3, r0
 800e504:	75bb      	strb	r3, [r7, #22]
            break;
 800e506:	e00d      	b.n	800e524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	4619      	mov	r1, r3
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f000 f9d4 	bl	800e8c0 <USBD_CoreFindEP>
 800e518:	4603      	mov	r3, r0
 800e51a:	75bb      	strb	r3, [r7, #22]
            break;
 800e51c:	e002      	b.n	800e524 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e51e:	2300      	movs	r3, #0
 800e520:	75bb      	strb	r3, [r7, #22]
            break;
 800e522:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e524:	7dbb      	ldrb	r3, [r7, #22]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d119      	bne.n	800e55e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b03      	cmp	r3, #3
 800e534:	d113      	bne.n	800e55e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e536:	7dba      	ldrb	r2, [r7, #22]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	32ae      	adds	r2, #174	@ 0xae
 800e53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00b      	beq.n	800e55e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e546:	7dba      	ldrb	r2, [r7, #22]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e54e:	7dba      	ldrb	r2, [r7, #22]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	32ae      	adds	r2, #174	@ 0xae
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f001 f8f2 	bl	800f748 <USBD_CtlSendStatus>
 800e564:	e032      	b.n	800e5cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e566:	7afb      	ldrb	r3, [r7, #11]
 800e568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	4619      	mov	r1, r3
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f000 f9a5 	bl	800e8c0 <USBD_CoreFindEP>
 800e576:	4603      	mov	r3, r0
 800e578:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e57a:	7dbb      	ldrb	r3, [r7, #22]
 800e57c:	2bff      	cmp	r3, #255	@ 0xff
 800e57e:	d025      	beq.n	800e5cc <USBD_LL_DataOutStage+0x15c>
 800e580:	7dbb      	ldrb	r3, [r7, #22]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d122      	bne.n	800e5cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2b03      	cmp	r3, #3
 800e590:	d117      	bne.n	800e5c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e592:	7dba      	ldrb	r2, [r7, #22]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	32ae      	adds	r2, #174	@ 0xae
 800e598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00f      	beq.n	800e5c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e5a2:	7dba      	ldrb	r2, [r7, #22]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e5aa:	7dba      	ldrb	r2, [r7, #22]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	32ae      	adds	r2, #174	@ 0xae
 800e5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	7afa      	ldrb	r2, [r7, #11]
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	4798      	blx	r3
 800e5be:	4603      	mov	r3, r0
 800e5c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ca:	e000      	b.n	800e5ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b086      	sub	sp, #24
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	607a      	str	r2, [r7, #4]
 800e5e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d16f      	bne.n	800e6ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3314      	adds	r3, #20
 800e5ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d15a      	bne.n	800e6b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	689a      	ldr	r2, [r3, #8]
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	429a      	cmp	r2, r3
 800e604:	d914      	bls.n	800e630 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	461a      	mov	r2, r3
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f001 f854 	bl	800f6ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e622:	2300      	movs	r3, #0
 800e624:	2200      	movs	r2, #0
 800e626:	2100      	movs	r1, #0
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f006 fd45 	bl	80150b8 <USBD_LL_PrepareReceive>
 800e62e:	e03f      	b.n	800e6b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	68da      	ldr	r2, [r3, #12]
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d11c      	bne.n	800e676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e644:	429a      	cmp	r2, r3
 800e646:	d316      	bcc.n	800e676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e652:	429a      	cmp	r2, r3
 800e654:	d20f      	bcs.n	800e676 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e656:	2200      	movs	r2, #0
 800e658:	2100      	movs	r1, #0
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f001 f835 	bl	800f6ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e668:	2300      	movs	r3, #0
 800e66a:	2200      	movs	r2, #0
 800e66c:	2100      	movs	r1, #0
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f006 fd22 	bl	80150b8 <USBD_LL_PrepareReceive>
 800e674:	e01c      	b.n	800e6b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d10f      	bne.n	800e6a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d009      	beq.n	800e6a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6a2:	2180      	movs	r1, #128	@ 0x80
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f006 fc5d 	bl	8014f64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f001 f85f 	bl	800f76e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d03a      	beq.n	800e730 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f7ff fe42 	bl	800e344 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e6c8:	e032      	b.n	800e730 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e6ca:	7afb      	ldrb	r3, [r7, #11]
 800e6cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f000 f8f3 	bl	800e8c0 <USBD_CoreFindEP>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
 800e6e0:	2bff      	cmp	r3, #255	@ 0xff
 800e6e2:	d025      	beq.n	800e730 <USBD_LL_DataInStage+0x15a>
 800e6e4:	7dfb      	ldrb	r3, [r7, #23]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d122      	bne.n	800e730 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b03      	cmp	r3, #3
 800e6f4:	d11c      	bne.n	800e730 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e6f6:	7dfa      	ldrb	r2, [r7, #23]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	32ae      	adds	r2, #174	@ 0xae
 800e6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d014      	beq.n	800e730 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e706:	7dfa      	ldrb	r2, [r7, #23]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e70e:	7dfa      	ldrb	r2, [r7, #23]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	32ae      	adds	r2, #174	@ 0xae
 800e714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e718:	695b      	ldr	r3, [r3, #20]
 800e71a:	7afa      	ldrb	r2, [r7, #11]
 800e71c:	4611      	mov	r1, r2
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	4798      	blx	r3
 800e722:	4603      	mov	r3, r0
 800e724:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e726:	7dbb      	ldrb	r3, [r7, #22]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e72c:	7dbb      	ldrb	r3, [r7, #22]
 800e72e:	e000      	b.n	800e732 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3718      	adds	r7, #24
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b084      	sub	sp, #16
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e772:	2b00      	cmp	r3, #0
 800e774:	d014      	beq.n	800e7a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00e      	beq.n	800e7a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	6852      	ldr	r2, [r2, #4]
 800e78e:	b2d2      	uxtb	r2, r2
 800e790:	4611      	mov	r1, r2
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	4798      	blx	r3
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e79c:	2303      	movs	r3, #3
 800e79e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7a0:	2340      	movs	r3, #64	@ 0x40
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f006 fb97 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2240      	movs	r2, #64	@ 0x40
 800e7b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7bc:	2340      	movs	r3, #64	@ 0x40
 800e7be:	2200      	movs	r2, #0
 800e7c0:	2180      	movs	r1, #128	@ 0x80
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f006 fb89 	bl	8014eda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2240      	movs	r2, #64	@ 0x40
 800e7d2:	621a      	str	r2, [r3, #32]

  return ret;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	78fa      	ldrb	r2, [r7, #3]
 800e7ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b04      	cmp	r3, #4
 800e810:	d006      	beq.n	800e820 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2204      	movs	r2, #4
 800e824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e836:	b480      	push	{r7}
 800e838:	b083      	sub	sp, #12
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b04      	cmp	r3, #4
 800e848:	d106      	bne.n	800e858 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e850:	b2da      	uxtb	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	370c      	adds	r7, #12
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr

0800e866 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b082      	sub	sp, #8
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b03      	cmp	r3, #3
 800e878:	d110      	bne.n	800e89c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e88a:	69db      	ldr	r3, [r3, #28]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d005      	beq.n	800e89c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e896:	69db      	ldr	r3, [r3, #28]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b083      	sub	sp, #12
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e8b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e8cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b086      	sub	sp, #24
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	885b      	ldrh	r3, [r3, #2]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d91f      	bls.n	800e940 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e906:	e013      	b.n	800e930 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e908:	f107 030a 	add.w	r3, r7, #10
 800e90c:	4619      	mov	r1, r3
 800e90e:	6978      	ldr	r0, [r7, #20]
 800e910:	f000 f81b 	bl	800e94a <USBD_GetNextDesc>
 800e914:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	785b      	ldrb	r3, [r3, #1]
 800e91a:	2b05      	cmp	r3, #5
 800e91c:	d108      	bne.n	800e930 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	789b      	ldrb	r3, [r3, #2]
 800e926:	78fa      	ldrb	r2, [r7, #3]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d008      	beq.n	800e93e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	885b      	ldrh	r3, [r3, #2]
 800e934:	b29a      	uxth	r2, r3
 800e936:	897b      	ldrh	r3, [r7, #10]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d8e5      	bhi.n	800e908 <USBD_GetEpDesc+0x2e>
 800e93c:	e000      	b.n	800e940 <USBD_GetEpDesc+0x66>
          break;
 800e93e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e940:	693b      	ldr	r3, [r7, #16]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b085      	sub	sp, #20
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	7812      	ldrb	r2, [r2, #0]
 800e960:	4413      	add	r3, r2
 800e962:	b29a      	uxth	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	461a      	mov	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4413      	add	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e974:	68fb      	ldr	r3, [r7, #12]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e982:	b480      	push	{r7}
 800e984:	b087      	sub	sp, #28
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	3301      	adds	r3, #1
 800e998:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e9a0:	8a3b      	ldrh	r3, [r7, #16]
 800e9a2:	021b      	lsls	r3, r3, #8
 800e9a4:	b21a      	sxth	r2, r3
 800e9a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	b21b      	sxth	r3, r3
 800e9ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e9b0:	89fb      	ldrh	r3, [r7, #14]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	371c      	adds	r7, #28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9d6:	2b40      	cmp	r3, #64	@ 0x40
 800e9d8:	d005      	beq.n	800e9e6 <USBD_StdDevReq+0x26>
 800e9da:	2b40      	cmp	r3, #64	@ 0x40
 800e9dc:	d857      	bhi.n	800ea8e <USBD_StdDevReq+0xce>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00f      	beq.n	800ea02 <USBD_StdDevReq+0x42>
 800e9e2:	2b20      	cmp	r3, #32
 800e9e4:	d153      	bne.n	800ea8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	32ae      	adds	r2, #174	@ 0xae
 800e9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9f4:	689b      	ldr	r3, [r3, #8]
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	4798      	blx	r3
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ea00:	e04a      	b.n	800ea98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	785b      	ldrb	r3, [r3, #1]
 800ea06:	2b09      	cmp	r3, #9
 800ea08:	d83b      	bhi.n	800ea82 <USBD_StdDevReq+0xc2>
 800ea0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea10 <USBD_StdDevReq+0x50>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea65 	.word	0x0800ea65
 800ea14:	0800ea79 	.word	0x0800ea79
 800ea18:	0800ea83 	.word	0x0800ea83
 800ea1c:	0800ea6f 	.word	0x0800ea6f
 800ea20:	0800ea83 	.word	0x0800ea83
 800ea24:	0800ea43 	.word	0x0800ea43
 800ea28:	0800ea39 	.word	0x0800ea39
 800ea2c:	0800ea83 	.word	0x0800ea83
 800ea30:	0800ea5b 	.word	0x0800ea5b
 800ea34:	0800ea4d 	.word	0x0800ea4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea38:	6839      	ldr	r1, [r7, #0]
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fa3c 	bl	800eeb8 <USBD_GetDescriptor>
          break;
 800ea40:	e024      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fbcb 	bl	800f1e0 <USBD_SetAddress>
          break;
 800ea4a:	e01f      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fc0a 	bl	800f268 <USBD_SetConfig>
 800ea54:	4603      	mov	r3, r0
 800ea56:	73fb      	strb	r3, [r7, #15]
          break;
 800ea58:	e018      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fcad 	bl	800f3bc <USBD_GetConfig>
          break;
 800ea62:	e013      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fcde 	bl	800f428 <USBD_GetStatus>
          break;
 800ea6c:	e00e      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fd0d 	bl	800f490 <USBD_SetFeature>
          break;
 800ea76:	e009      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea78:	6839      	ldr	r1, [r7, #0]
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 fd31 	bl	800f4e2 <USBD_ClrFeature>
          break;
 800ea80:	e004      	b.n	800ea8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fd88 	bl	800f59a <USBD_CtlError>
          break;
 800ea8a:	bf00      	nop
      }
      break;
 800ea8c:	e004      	b.n	800ea98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fd82 	bl	800f59a <USBD_CtlError>
      break;
 800ea96:	bf00      	nop
  }

  return ret;
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop

0800eaa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eaba:	2b40      	cmp	r3, #64	@ 0x40
 800eabc:	d005      	beq.n	800eaca <USBD_StdItfReq+0x26>
 800eabe:	2b40      	cmp	r3, #64	@ 0x40
 800eac0:	d852      	bhi.n	800eb68 <USBD_StdItfReq+0xc4>
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <USBD_StdItfReq+0x26>
 800eac6:	2b20      	cmp	r3, #32
 800eac8:	d14e      	bne.n	800eb68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	3b01      	subs	r3, #1
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d840      	bhi.n	800eb5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	889b      	ldrh	r3, [r3, #4]
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d836      	bhi.n	800eb50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	889b      	ldrh	r3, [r3, #4]
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	4619      	mov	r1, r3
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff fedb 	bl	800e8a6 <USBD_CoreFindIF>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eaf4:	7bbb      	ldrb	r3, [r7, #14]
 800eaf6:	2bff      	cmp	r3, #255	@ 0xff
 800eaf8:	d01d      	beq.n	800eb36 <USBD_StdItfReq+0x92>
 800eafa:	7bbb      	ldrb	r3, [r7, #14]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d11a      	bne.n	800eb36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eb00:	7bba      	ldrb	r2, [r7, #14]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	32ae      	adds	r2, #174	@ 0xae
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00f      	beq.n	800eb30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800eb10:	7bba      	ldrb	r2, [r7, #14]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eb18:	7bba      	ldrb	r2, [r7, #14]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	32ae      	adds	r2, #174	@ 0xae
 800eb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	4798      	blx	r3
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb2e:	e004      	b.n	800eb3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800eb30:	2303      	movs	r3, #3
 800eb32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eb34:	e001      	b.n	800eb3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800eb36:	2303      	movs	r3, #3
 800eb38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	88db      	ldrh	r3, [r3, #6]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d110      	bne.n	800eb64 <USBD_StdItfReq+0xc0>
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10d      	bne.n	800eb64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fdfd 	bl	800f748 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb4e:	e009      	b.n	800eb64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd21 	bl	800f59a <USBD_CtlError>
          break;
 800eb58:	e004      	b.n	800eb64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fd1c 	bl	800f59a <USBD_CtlError>
          break;
 800eb62:	e000      	b.n	800eb66 <USBD_StdItfReq+0xc2>
          break;
 800eb64:	bf00      	nop
      }
      break;
 800eb66:	e004      	b.n	800eb72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 fd15 	bl	800f59a <USBD_CtlError>
      break;
 800eb70:	bf00      	nop
  }

  return ret;
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	889b      	ldrh	r3, [r3, #4]
 800eb8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb98:	2b40      	cmp	r3, #64	@ 0x40
 800eb9a:	d007      	beq.n	800ebac <USBD_StdEPReq+0x30>
 800eb9c:	2b40      	cmp	r3, #64	@ 0x40
 800eb9e:	f200 817f 	bhi.w	800eea0 <USBD_StdEPReq+0x324>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d02a      	beq.n	800ebfc <USBD_StdEPReq+0x80>
 800eba6:	2b20      	cmp	r3, #32
 800eba8:	f040 817a 	bne.w	800eea0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ebac:	7bbb      	ldrb	r3, [r7, #14]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff fe85 	bl	800e8c0 <USBD_CoreFindEP>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebba:	7b7b      	ldrb	r3, [r7, #13]
 800ebbc:	2bff      	cmp	r3, #255	@ 0xff
 800ebbe:	f000 8174 	beq.w	800eeaa <USBD_StdEPReq+0x32e>
 800ebc2:	7b7b      	ldrb	r3, [r7, #13]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f040 8170 	bne.w	800eeaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ebca:	7b7a      	ldrb	r2, [r7, #13]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ebd2:	7b7a      	ldrb	r2, [r7, #13]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	32ae      	adds	r2, #174	@ 0xae
 800ebd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f000 8163 	beq.w	800eeaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ebe4:	7b7a      	ldrb	r2, [r7, #13]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	32ae      	adds	r2, #174	@ 0xae
 800ebea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	6839      	ldr	r1, [r7, #0]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ebfa:	e156      	b.n	800eeaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	785b      	ldrb	r3, [r3, #1]
 800ec00:	2b03      	cmp	r3, #3
 800ec02:	d008      	beq.n	800ec16 <USBD_StdEPReq+0x9a>
 800ec04:	2b03      	cmp	r3, #3
 800ec06:	f300 8145 	bgt.w	800ee94 <USBD_StdEPReq+0x318>
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 809b 	beq.w	800ed46 <USBD_StdEPReq+0x1ca>
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d03c      	beq.n	800ec8e <USBD_StdEPReq+0x112>
 800ec14:	e13e      	b.n	800ee94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d002      	beq.n	800ec28 <USBD_StdEPReq+0xac>
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d016      	beq.n	800ec54 <USBD_StdEPReq+0xd8>
 800ec26:	e02c      	b.n	800ec82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00d      	beq.n	800ec4a <USBD_StdEPReq+0xce>
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	2b80      	cmp	r3, #128	@ 0x80
 800ec32:	d00a      	beq.n	800ec4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec34:	7bbb      	ldrb	r3, [r7, #14]
 800ec36:	4619      	mov	r1, r3
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f006 f993 	bl	8014f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec3e:	2180      	movs	r1, #128	@ 0x80
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f006 f98f 	bl	8014f64 <USBD_LL_StallEP>
 800ec46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec48:	e020      	b.n	800ec8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fca4 	bl	800f59a <USBD_CtlError>
              break;
 800ec52:	e01b      	b.n	800ec8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	885b      	ldrh	r3, [r3, #2]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10e      	bne.n	800ec7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec5c:	7bbb      	ldrb	r3, [r7, #14]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00b      	beq.n	800ec7a <USBD_StdEPReq+0xfe>
 800ec62:	7bbb      	ldrb	r3, [r7, #14]
 800ec64:	2b80      	cmp	r3, #128	@ 0x80
 800ec66:	d008      	beq.n	800ec7a <USBD_StdEPReq+0xfe>
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	88db      	ldrh	r3, [r3, #6]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d104      	bne.n	800ec7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec70:	7bbb      	ldrb	r3, [r7, #14]
 800ec72:	4619      	mov	r1, r3
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f006 f975 	bl	8014f64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fd64 	bl	800f748 <USBD_CtlSendStatus>

              break;
 800ec80:	e004      	b.n	800ec8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fc88 	bl	800f59a <USBD_CtlError>
              break;
 800ec8a:	bf00      	nop
          }
          break;
 800ec8c:	e107      	b.n	800ee9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	d002      	beq.n	800eca0 <USBD_StdEPReq+0x124>
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d016      	beq.n	800eccc <USBD_StdEPReq+0x150>
 800ec9e:	e04b      	b.n	800ed38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00d      	beq.n	800ecc2 <USBD_StdEPReq+0x146>
 800eca6:	7bbb      	ldrb	r3, [r7, #14]
 800eca8:	2b80      	cmp	r3, #128	@ 0x80
 800ecaa:	d00a      	beq.n	800ecc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecac:	7bbb      	ldrb	r3, [r7, #14]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f006 f957 	bl	8014f64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecb6:	2180      	movs	r1, #128	@ 0x80
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f006 f953 	bl	8014f64 <USBD_LL_StallEP>
 800ecbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ecc0:	e040      	b.n	800ed44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 fc68 	bl	800f59a <USBD_CtlError>
              break;
 800ecca:	e03b      	b.n	800ed44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	885b      	ldrh	r3, [r3, #2]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d136      	bne.n	800ed42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ecd4:	7bbb      	ldrb	r3, [r7, #14]
 800ecd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d004      	beq.n	800ece8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecde:	7bbb      	ldrb	r3, [r7, #14]
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f006 f95d 	bl	8014fa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 fd2d 	bl	800f748 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7ff fde4 	bl	800e8c0 <USBD_CoreFindEP>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecfc:	7b7b      	ldrb	r3, [r7, #13]
 800ecfe:	2bff      	cmp	r3, #255	@ 0xff
 800ed00:	d01f      	beq.n	800ed42 <USBD_StdEPReq+0x1c6>
 800ed02:	7b7b      	ldrb	r3, [r7, #13]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d11c      	bne.n	800ed42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ed08:	7b7a      	ldrb	r2, [r7, #13]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ed10:	7b7a      	ldrb	r2, [r7, #13]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	32ae      	adds	r2, #174	@ 0xae
 800ed16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d010      	beq.n	800ed42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ed20:	7b7a      	ldrb	r2, [r7, #13]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	32ae      	adds	r2, #174	@ 0xae
 800ed26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	4798      	blx	r3
 800ed32:	4603      	mov	r3, r0
 800ed34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ed36:	e004      	b.n	800ed42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fc2d 	bl	800f59a <USBD_CtlError>
              break;
 800ed40:	e000      	b.n	800ed44 <USBD_StdEPReq+0x1c8>
              break;
 800ed42:	bf00      	nop
          }
          break;
 800ed44:	e0ab      	b.n	800ee9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d002      	beq.n	800ed58 <USBD_StdEPReq+0x1dc>
 800ed52:	2b03      	cmp	r3, #3
 800ed54:	d032      	beq.n	800edbc <USBD_StdEPReq+0x240>
 800ed56:	e097      	b.n	800ee88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d007      	beq.n	800ed6e <USBD_StdEPReq+0x1f2>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	2b80      	cmp	r3, #128	@ 0x80
 800ed62:	d004      	beq.n	800ed6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ed64:	6839      	ldr	r1, [r7, #0]
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 fc17 	bl	800f59a <USBD_CtlError>
                break;
 800ed6c:	e091      	b.n	800ee92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	da0b      	bge.n	800ed8e <USBD_StdEPReq+0x212>
 800ed76:	7bbb      	ldrb	r3, [r7, #14]
 800ed78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	3310      	adds	r3, #16
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4413      	add	r3, r2
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	e00b      	b.n	800eda6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed8e:	7bbb      	ldrb	r3, [r7, #14]
 800ed90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed94:	4613      	mov	r3, r2
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4413      	add	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	4413      	add	r3, r2
 800eda4:	3304      	adds	r3, #4
 800eda6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2200      	movs	r2, #0
 800edac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	2202      	movs	r2, #2
 800edb2:	4619      	mov	r1, r3
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fc6d 	bl	800f694 <USBD_CtlSendData>
              break;
 800edba:	e06a      	b.n	800ee92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800edbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	da11      	bge.n	800ede8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
 800edc6:	f003 020f 	and.w	r2, r3, #15
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	4613      	mov	r3, r2
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	440b      	add	r3, r1
 800edd6:	3324      	adds	r3, #36	@ 0x24
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d117      	bne.n	800ee0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 fbda 	bl	800f59a <USBD_CtlError>
                  break;
 800ede6:	e054      	b.n	800ee92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	f003 020f 	and.w	r2, r3, #15
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4613      	mov	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4413      	add	r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	440b      	add	r3, r1
 800edfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d104      	bne.n	800ee0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 fbc7 	bl	800f59a <USBD_CtlError>
                  break;
 800ee0c:	e041      	b.n	800ee92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	da0b      	bge.n	800ee2e <USBD_StdEPReq+0x2b2>
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
 800ee18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	3310      	adds	r3, #16
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	4413      	add	r3, r2
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	e00b      	b.n	800ee46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee2e:	7bbb      	ldrb	r3, [r7, #14]
 800ee30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee34:	4613      	mov	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	4413      	add	r3, r2
 800ee44:	3304      	adds	r3, #4
 800ee46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee48:	7bbb      	ldrb	r3, [r7, #14]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <USBD_StdEPReq+0x2d8>
 800ee4e:	7bbb      	ldrb	r3, [r7, #14]
 800ee50:	2b80      	cmp	r3, #128	@ 0x80
 800ee52:	d103      	bne.n	800ee5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2200      	movs	r2, #0
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	e00e      	b.n	800ee7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee5c:	7bbb      	ldrb	r3, [r7, #14]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f006 f8bd 	bl	8014fe0 <USBD_LL_IsStallEP>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	e002      	b.n	800ee7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	2200      	movs	r2, #0
 800ee78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fc07 	bl	800f694 <USBD_CtlSendData>
              break;
 800ee86:	e004      	b.n	800ee92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fb85 	bl	800f59a <USBD_CtlError>
              break;
 800ee90:	bf00      	nop
          }
          break;
 800ee92:	e004      	b.n	800ee9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fb7f 	bl	800f59a <USBD_CtlError>
          break;
 800ee9c:	bf00      	nop
      }
      break;
 800ee9e:	e005      	b.n	800eeac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fb79 	bl	800f59a <USBD_CtlError>
      break;
 800eea8:	e000      	b.n	800eeac <USBD_StdEPReq+0x330>
      break;
 800eeaa:	bf00      	nop
  }

  return ret;
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eec2:	2300      	movs	r3, #0
 800eec4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	885b      	ldrh	r3, [r3, #2]
 800eed2:	0a1b      	lsrs	r3, r3, #8
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	3b01      	subs	r3, #1
 800eed8:	2b0e      	cmp	r3, #14
 800eeda:	f200 8152 	bhi.w	800f182 <USBD_GetDescriptor+0x2ca>
 800eede:	a201      	add	r2, pc, #4	@ (adr r2, 800eee4 <USBD_GetDescriptor+0x2c>)
 800eee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee4:	0800ef55 	.word	0x0800ef55
 800eee8:	0800ef6d 	.word	0x0800ef6d
 800eeec:	0800efad 	.word	0x0800efad
 800eef0:	0800f183 	.word	0x0800f183
 800eef4:	0800f183 	.word	0x0800f183
 800eef8:	0800f123 	.word	0x0800f123
 800eefc:	0800f14f 	.word	0x0800f14f
 800ef00:	0800f183 	.word	0x0800f183
 800ef04:	0800f183 	.word	0x0800f183
 800ef08:	0800f183 	.word	0x0800f183
 800ef0c:	0800f183 	.word	0x0800f183
 800ef10:	0800f183 	.word	0x0800f183
 800ef14:	0800f183 	.word	0x0800f183
 800ef18:	0800f183 	.word	0x0800f183
 800ef1c:	0800ef21 	.word	0x0800ef21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00b      	beq.n	800ef44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef32:	69db      	ldr	r3, [r3, #28]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	7c12      	ldrb	r2, [r2, #16]
 800ef38:	f107 0108 	add.w	r1, r7, #8
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	4798      	blx	r3
 800ef40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef42:	e126      	b.n	800f192 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 fb27 	bl	800f59a <USBD_CtlError>
        err++;
 800ef4c:	7afb      	ldrb	r3, [r7, #11]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	72fb      	strb	r3, [r7, #11]
      break;
 800ef52:	e11e      	b.n	800f192 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	7c12      	ldrb	r2, [r2, #16]
 800ef60:	f107 0108 	add.w	r1, r7, #8
 800ef64:	4610      	mov	r0, r2
 800ef66:	4798      	blx	r3
 800ef68:	60f8      	str	r0, [r7, #12]
      break;
 800ef6a:	e112      	b.n	800f192 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	7c1b      	ldrb	r3, [r3, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10d      	bne.n	800ef90 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef7c:	f107 0208 	add.w	r2, r7, #8
 800ef80:	4610      	mov	r0, r2
 800ef82:	4798      	blx	r3
 800ef84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ef8e:	e100      	b.n	800f192 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef98:	f107 0208 	add.w	r2, r7, #8
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	4798      	blx	r3
 800efa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3301      	adds	r3, #1
 800efa6:	2202      	movs	r2, #2
 800efa8:	701a      	strb	r2, [r3, #0]
      break;
 800efaa:	e0f2      	b.n	800f192 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	885b      	ldrh	r3, [r3, #2]
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b05      	cmp	r3, #5
 800efb4:	f200 80ac 	bhi.w	800f110 <USBD_GetDescriptor+0x258>
 800efb8:	a201      	add	r2, pc, #4	@ (adr r2, 800efc0 <USBD_GetDescriptor+0x108>)
 800efba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbe:	bf00      	nop
 800efc0:	0800efd9 	.word	0x0800efd9
 800efc4:	0800f00d 	.word	0x0800f00d
 800efc8:	0800f041 	.word	0x0800f041
 800efcc:	0800f075 	.word	0x0800f075
 800efd0:	0800f0a9 	.word	0x0800f0a9
 800efd4:	0800f0dd 	.word	0x0800f0dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	7c12      	ldrb	r2, [r2, #16]
 800eff0:	f107 0108 	add.w	r1, r7, #8
 800eff4:	4610      	mov	r0, r2
 800eff6:	4798      	blx	r3
 800eff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800effa:	e091      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800effc:	6839      	ldr	r1, [r7, #0]
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 facb 	bl	800f59a <USBD_CtlError>
            err++;
 800f004:	7afb      	ldrb	r3, [r7, #11]
 800f006:	3301      	adds	r3, #1
 800f008:	72fb      	strb	r3, [r7, #11]
          break;
 800f00a:	e089      	b.n	800f120 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00b      	beq.n	800f030 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	7c12      	ldrb	r2, [r2, #16]
 800f024:	f107 0108 	add.w	r1, r7, #8
 800f028:	4610      	mov	r0, r2
 800f02a:	4798      	blx	r3
 800f02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f02e:	e077      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f030:	6839      	ldr	r1, [r7, #0]
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fab1 	bl	800f59a <USBD_CtlError>
            err++;
 800f038:	7afb      	ldrb	r3, [r7, #11]
 800f03a:	3301      	adds	r3, #1
 800f03c:	72fb      	strb	r3, [r7, #11]
          break;
 800f03e:	e06f      	b.n	800f120 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00b      	beq.n	800f064 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	7c12      	ldrb	r2, [r2, #16]
 800f058:	f107 0108 	add.w	r1, r7, #8
 800f05c:	4610      	mov	r0, r2
 800f05e:	4798      	blx	r3
 800f060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f062:	e05d      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fa97 	bl	800f59a <USBD_CtlError>
            err++;
 800f06c:	7afb      	ldrb	r3, [r7, #11]
 800f06e:	3301      	adds	r3, #1
 800f070:	72fb      	strb	r3, [r7, #11]
          break;
 800f072:	e055      	b.n	800f120 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00b      	beq.n	800f098 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	7c12      	ldrb	r2, [r2, #16]
 800f08c:	f107 0108 	add.w	r1, r7, #8
 800f090:	4610      	mov	r0, r2
 800f092:	4798      	blx	r3
 800f094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f096:	e043      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fa7d 	bl	800f59a <USBD_CtlError>
            err++;
 800f0a0:	7afb      	ldrb	r3, [r7, #11]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800f0a6:	e03b      	b.n	800f120 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00b      	beq.n	800f0cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	7c12      	ldrb	r2, [r2, #16]
 800f0c0:	f107 0108 	add.w	r1, r7, #8
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	4798      	blx	r3
 800f0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0ca:	e029      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0cc:	6839      	ldr	r1, [r7, #0]
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 fa63 	bl	800f59a <USBD_CtlError>
            err++;
 800f0d4:	7afb      	ldrb	r3, [r7, #11]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f0da:	e021      	b.n	800f120 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0e2:	699b      	ldr	r3, [r3, #24]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00b      	beq.n	800f100 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	7c12      	ldrb	r2, [r2, #16]
 800f0f4:	f107 0108 	add.w	r1, r7, #8
 800f0f8:	4610      	mov	r0, r2
 800f0fa:	4798      	blx	r3
 800f0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0fe:	e00f      	b.n	800f120 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fa49 	bl	800f59a <USBD_CtlError>
            err++;
 800f108:	7afb      	ldrb	r3, [r7, #11]
 800f10a:	3301      	adds	r3, #1
 800f10c:	72fb      	strb	r3, [r7, #11]
          break;
 800f10e:	e007      	b.n	800f120 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fa41 	bl	800f59a <USBD_CtlError>
          err++;
 800f118:	7afb      	ldrb	r3, [r7, #11]
 800f11a:	3301      	adds	r3, #1
 800f11c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f11e:	bf00      	nop
      }
      break;
 800f120:	e037      	b.n	800f192 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7c1b      	ldrb	r3, [r3, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f132:	f107 0208 	add.w	r2, r7, #8
 800f136:	4610      	mov	r0, r2
 800f138:	4798      	blx	r3
 800f13a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f13c:	e029      	b.n	800f192 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fa2a 	bl	800f59a <USBD_CtlError>
        err++;
 800f146:	7afb      	ldrb	r3, [r7, #11]
 800f148:	3301      	adds	r3, #1
 800f14a:	72fb      	strb	r3, [r7, #11]
      break;
 800f14c:	e021      	b.n	800f192 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	7c1b      	ldrb	r3, [r3, #16]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10d      	bne.n	800f172 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f15e:	f107 0208 	add.w	r2, r7, #8
 800f162:	4610      	mov	r0, r2
 800f164:	4798      	blx	r3
 800f166:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	3301      	adds	r3, #1
 800f16c:	2207      	movs	r2, #7
 800f16e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f170:	e00f      	b.n	800f192 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fa10 	bl	800f59a <USBD_CtlError>
        err++;
 800f17a:	7afb      	ldrb	r3, [r7, #11]
 800f17c:	3301      	adds	r3, #1
 800f17e:	72fb      	strb	r3, [r7, #11]
      break;
 800f180:	e007      	b.n	800f192 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fa08 	bl	800f59a <USBD_CtlError>
      err++;
 800f18a:	7afb      	ldrb	r3, [r7, #11]
 800f18c:	3301      	adds	r3, #1
 800f18e:	72fb      	strb	r3, [r7, #11]
      break;
 800f190:	bf00      	nop
  }

  if (err != 0U)
 800f192:	7afb      	ldrb	r3, [r7, #11]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d11e      	bne.n	800f1d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	88db      	ldrh	r3, [r3, #6]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d016      	beq.n	800f1ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f1a0:	893b      	ldrh	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00e      	beq.n	800f1c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	88da      	ldrh	r2, [r3, #6]
 800f1aa:	893b      	ldrh	r3, [r7, #8]
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	bf28      	it	cs
 800f1b0:	4613      	movcs	r3, r2
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f1b6:	893b      	ldrh	r3, [r7, #8]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fa69 	bl	800f694 <USBD_CtlSendData>
 800f1c2:	e009      	b.n	800f1d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f9e7 	bl	800f59a <USBD_CtlError>
 800f1cc:	e004      	b.n	800f1d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 faba 	bl	800f748 <USBD_CtlSendStatus>
 800f1d4:	e000      	b.n	800f1d8 <USBD_GetDescriptor+0x320>
    return;
 800f1d6:	bf00      	nop
  }
}
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop

0800f1e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	889b      	ldrh	r3, [r3, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d131      	bne.n	800f256 <USBD_SetAddress+0x76>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	88db      	ldrh	r3, [r3, #6]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d12d      	bne.n	800f256 <USBD_SetAddress+0x76>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	885b      	ldrh	r3, [r3, #2]
 800f1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800f200:	d829      	bhi.n	800f256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	885b      	ldrh	r3, [r3, #2]
 800f206:	b2db      	uxtb	r3, r3
 800f208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f20c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b03      	cmp	r3, #3
 800f218:	d104      	bne.n	800f224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f9bc 	bl	800f59a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f222:	e01d      	b.n	800f260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	7bfa      	ldrb	r2, [r7, #15]
 800f228:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
 800f22e:	4619      	mov	r1, r3
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f005 ff01 	bl	8015038 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 fa86 	bl	800f748 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d004      	beq.n	800f24c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2202      	movs	r2, #2
 800f246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f24a:	e009      	b.n	800f260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f254:	e004      	b.n	800f260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f99e 	bl	800f59a <USBD_CtlError>
  }
}
 800f25e:	bf00      	nop
 800f260:	bf00      	nop
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f272:	2300      	movs	r3, #0
 800f274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	885b      	ldrh	r3, [r3, #2]
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	4b4e      	ldr	r3, [pc, #312]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f27e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f280:	4b4d      	ldr	r3, [pc, #308]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d905      	bls.n	800f294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f985 	bl	800f59a <USBD_CtlError>
    return USBD_FAIL;
 800f290:	2303      	movs	r3, #3
 800f292:	e08c      	b.n	800f3ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d002      	beq.n	800f2a6 <USBD_SetConfig+0x3e>
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	d029      	beq.n	800f2f8 <USBD_SetConfig+0x90>
 800f2a4:	e075      	b.n	800f392 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f2a6:	4b44      	ldr	r3, [pc, #272]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d020      	beq.n	800f2f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f2ae:	4b42      	ldr	r3, [pc, #264]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2b8:	4b3f      	ldr	r3, [pc, #252]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff f84b 	bl	800e35a <USBD_SetClassConfig>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d008      	beq.n	800f2e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 f962 	bl	800f59a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2202      	movs	r2, #2
 800f2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f2de:	e065      	b.n	800f3ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fa31 	bl	800f748 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2203      	movs	r2, #3
 800f2ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f2ee:	e05d      	b.n	800f3ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fa29 	bl	800f748 <USBD_CtlSendStatus>
      break;
 800f2f6:	e059      	b.n	800f3ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f2f8:	4b2f      	ldr	r3, [pc, #188]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d112      	bne.n	800f326 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2202      	movs	r2, #2
 800f304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f308:	4b2b      	ldr	r3, [pc, #172]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	461a      	mov	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f312:	4b29      	ldr	r3, [pc, #164]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	4619      	mov	r1, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff f83a 	bl	800e392 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fa12 	bl	800f748 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f324:	e042      	b.n	800f3ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f326:	4b24      	ldr	r3, [pc, #144]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d02a      	beq.n	800f38a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7ff f828 	bl	800e392 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f342:	4b1d      	ldr	r3, [pc, #116]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f34c:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7ff f801 	bl	800e35a <USBD_SetClassConfig>
 800f358:	4603      	mov	r3, r0
 800f35a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00f      	beq.n	800f382 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f362:	6839      	ldr	r1, [r7, #0]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 f918 	bl	800f59a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	4619      	mov	r1, r3
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7ff f80d 	bl	800e392 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2202      	movs	r2, #2
 800f37c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f380:	e014      	b.n	800f3ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f9e0 	bl	800f748 <USBD_CtlSendStatus>
      break;
 800f388:	e010      	b.n	800f3ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f9dc 	bl	800f748 <USBD_CtlSendStatus>
      break;
 800f390:	e00c      	b.n	800f3ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f900 	bl	800f59a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f39a:	4b07      	ldr	r3, [pc, #28]	@ (800f3b8 <USBD_SetConfig+0x150>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7fe fff6 	bl	800e392 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f3a6:	2303      	movs	r3, #3
 800f3a8:	73fb      	strb	r3, [r7, #15]
      break;
 800f3aa:	bf00      	nop
  }

  return ret;
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20001948 	.word	0x20001948

0800f3bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	88db      	ldrh	r3, [r3, #6]
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d004      	beq.n	800f3d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f8e2 	bl	800f59a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f3d6:	e023      	b.n	800f420 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	dc02      	bgt.n	800f3ea <USBD_GetConfig+0x2e>
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dc03      	bgt.n	800f3f0 <USBD_GetConfig+0x34>
 800f3e8:	e015      	b.n	800f416 <USBD_GetConfig+0x5a>
 800f3ea:	2b03      	cmp	r3, #3
 800f3ec:	d00b      	beq.n	800f406 <USBD_GetConfig+0x4a>
 800f3ee:	e012      	b.n	800f416 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3308      	adds	r3, #8
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f948 	bl	800f694 <USBD_CtlSendData>
        break;
 800f404:	e00c      	b.n	800f420 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3304      	adds	r3, #4
 800f40a:	2201      	movs	r2, #1
 800f40c:	4619      	mov	r1, r3
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f940 	bl	800f694 <USBD_CtlSendData>
        break;
 800f414:	e004      	b.n	800f420 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 f8be 	bl	800f59a <USBD_CtlError>
        break;
 800f41e:	bf00      	nop
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	3b01      	subs	r3, #1
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	d81e      	bhi.n	800f47e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	88db      	ldrh	r3, [r3, #6]
 800f444:	2b02      	cmp	r3, #2
 800f446:	d004      	beq.n	800f452 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f8a5 	bl	800f59a <USBD_CtlError>
        break;
 800f450:	e01a      	b.n	800f488 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d005      	beq.n	800f46e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	f043 0202 	orr.w	r2, r3, #2
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	330c      	adds	r3, #12
 800f472:	2202      	movs	r2, #2
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f90c 	bl	800f694 <USBD_CtlSendData>
      break;
 800f47c:	e004      	b.n	800f488 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f47e:	6839      	ldr	r1, [r7, #0]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 f88a 	bl	800f59a <USBD_CtlError>
      break;
 800f486:	bf00      	nop
  }
}
 800f488:	bf00      	nop
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	885b      	ldrh	r3, [r3, #2]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d107      	bne.n	800f4b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f94c 	bl	800f748 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f4b0:	e013      	b.n	800f4da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	885b      	ldrh	r3, [r3, #2]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d10b      	bne.n	800f4d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	889b      	ldrh	r3, [r3, #4]
 800f4be:	0a1b      	lsrs	r3, r3, #8
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	b2da      	uxtb	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f93c 	bl	800f748 <USBD_CtlSendStatus>
}
 800f4d0:	e003      	b.n	800f4da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f860 	bl	800f59a <USBD_CtlError>
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	d80b      	bhi.n	800f512 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	885b      	ldrh	r3, [r3, #2]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d10c      	bne.n	800f51c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2200      	movs	r2, #0
 800f506:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f91c 	bl	800f748 <USBD_CtlSendStatus>
      }
      break;
 800f510:	e004      	b.n	800f51c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f512:	6839      	ldr	r1, [r7, #0]
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f840 	bl	800f59a <USBD_CtlError>
      break;
 800f51a:	e000      	b.n	800f51e <USBD_ClrFeature+0x3c>
      break;
 800f51c:	bf00      	nop
  }
}
 800f51e:	bf00      	nop
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b084      	sub	sp, #16
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	781a      	ldrb	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3301      	adds	r3, #1
 800f540:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	781a      	ldrb	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3301      	adds	r3, #1
 800f54e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff fa16 	bl	800e982 <SWAPBYTE>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3301      	adds	r3, #1
 800f562:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3301      	adds	r3, #1
 800f568:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f7ff fa09 	bl	800e982 <SWAPBYTE>
 800f570:	4603      	mov	r3, r0
 800f572:	461a      	mov	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	3301      	adds	r3, #1
 800f57c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3301      	adds	r3, #1
 800f582:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff f9fc 	bl	800e982 <SWAPBYTE>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461a      	mov	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	80da      	strh	r2, [r3, #6]
}
 800f592:	bf00      	nop
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b082      	sub	sp, #8
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5a4:	2180      	movs	r1, #128	@ 0x80
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f005 fcdc 	bl	8014f64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f005 fcd8 	bl	8014f64 <USBD_LL_StallEP>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d042      	beq.n	800f658 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f5d6:	6938      	ldr	r0, [r7, #16]
 800f5d8:	f000 f842 	bl	800f660 <USBD_GetLen>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	3301      	adds	r3, #1
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5e6:	d808      	bhi.n	800f5fa <USBD_GetString+0x3e>
 800f5e8:	6938      	ldr	r0, [r7, #16]
 800f5ea:	f000 f839 	bl	800f660 <USBD_GetLen>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	e001      	b.n	800f5fe <USBD_GetString+0x42>
 800f5fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f602:	7dfb      	ldrb	r3, [r7, #23]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	4413      	add	r3, r2
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	7812      	ldrb	r2, [r2, #0]
 800f60c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	3301      	adds	r3, #1
 800f612:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f614:	7dfb      	ldrb	r3, [r7, #23]
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	4413      	add	r3, r2
 800f61a:	2203      	movs	r2, #3
 800f61c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	3301      	adds	r3, #1
 800f622:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f624:	e013      	b.n	800f64e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	4413      	add	r3, r2
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	7812      	ldrb	r2, [r2, #0]
 800f630:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	3301      	adds	r3, #1
 800f636:	613b      	str	r3, [r7, #16]
    idx++;
 800f638:	7dfb      	ldrb	r3, [r7, #23]
 800f63a:	3301      	adds	r3, #1
 800f63c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	4413      	add	r3, r2
 800f644:	2200      	movs	r2, #0
 800f646:	701a      	strb	r2, [r3, #0]
    idx++;
 800f648:	7dfb      	ldrb	r3, [r7, #23]
 800f64a:	3301      	adds	r3, #1
 800f64c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1e7      	bne.n	800f626 <USBD_GetString+0x6a>
 800f656:	e000      	b.n	800f65a <USBD_GetString+0x9e>
    return;
 800f658:	bf00      	nop
  }
}
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f670:	e005      	b.n	800f67e <USBD_GetLen+0x1e>
  {
    len++;
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	3301      	adds	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	3301      	adds	r3, #1
 800f67c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1f5      	bne.n	800f672 <USBD_GetLen+0x12>
  }

  return len;
 800f686:	7bfb      	ldrb	r3, [r7, #15]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f005 fcdb 	bl	8015076 <USBD_LL_Transmit>

  return USBD_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b084      	sub	sp, #16
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	2100      	movs	r1, #0
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f005 fcca 	bl	8015076 <USBD_LL_Transmit>

  return USBD_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2203      	movs	r2, #3
 800f6fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	2100      	movs	r1, #0
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f005 fcce 	bl	80150b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	60f8      	str	r0, [r7, #12]
 800f72e:	60b9      	str	r1, [r7, #8]
 800f730:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	2100      	movs	r1, #0
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f005 fcbd 	bl	80150b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2204      	movs	r2, #4
 800f754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f758:	2300      	movs	r3, #0
 800f75a:	2200      	movs	r2, #0
 800f75c:	2100      	movs	r1, #0
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f005 fc89 	bl	8015076 <USBD_LL_Transmit>

  return USBD_OK;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b082      	sub	sp, #8
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2205      	movs	r2, #5
 800f77a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f77e:	2300      	movs	r3, #0
 800f780:	2200      	movs	r2, #0
 800f782:	2100      	movs	r1, #0
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f005 fc97 	bl	80150b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f79e:	f107 0308 	add.w	r3, r7, #8
 800f7a2:	2218      	movs	r2, #24
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f001 fa21 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7ac:	233f      	movs	r3, #63	@ 0x3f
 800f7ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800f7b0:	2381      	movs	r3, #129	@ 0x81
 800f7b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f7b4:	1dfb      	adds	r3, r7, #7
 800f7b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f7bc:	f107 0308 	add.w	r3, r7, #8
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f001 fc9c 	bl	8011100 <hci_send_req>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	da01      	bge.n	800f7d2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f7ce:	23ff      	movs	r3, #255	@ 0xff
 800f7d0:	e000      	b.n	800f7d4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3720      	adds	r7, #32
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800f7dc:	b5b0      	push	{r4, r5, r7, lr}
 800f7de:	b0ce      	sub	sp, #312	@ 0x138
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f7ee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f7f2:	462a      	mov	r2, r5
 800f7f4:	701a      	strb	r2, [r3, #0]
 800f7f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f7fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f7fe:	4622      	mov	r2, r4
 800f800:	801a      	strh	r2, [r3, #0]
 800f802:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f806:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f80a:	4602      	mov	r2, r0
 800f80c:	801a      	strh	r2, [r3, #0]
 800f80e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f812:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f816:	460a      	mov	r2, r1
 800f818:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800f81a:	f107 0310 	add.w	r3, r7, #16
 800f81e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f822:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800f826:	3308      	adds	r3, #8
 800f828:	f107 0210 	add.w	r2, r7, #16
 800f82c:	4413      	add	r3, r2
 800f82e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f832:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f836:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f83a:	4413      	add	r3, r2
 800f83c:	3309      	adds	r3, #9
 800f83e:	f107 0210 	add.w	r2, r7, #16
 800f842:	4413      	add	r3, r2
 800f844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f848:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f84c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f850:	2200      	movs	r2, #0
 800f852:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800f85a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f85e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f862:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f866:	7812      	ldrb	r2, [r2, #0]
 800f868:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f86a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f86e:	3301      	adds	r3, #1
 800f870:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800f874:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f878:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f87c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800f880:	8812      	ldrh	r2, [r2, #0]
 800f882:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800f886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f88a:	3302      	adds	r3, #2
 800f88c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800f890:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f894:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f898:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800f89c:	8812      	ldrh	r2, [r2, #0]
 800f89e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800f8a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8a6:	3302      	adds	r3, #2
 800f8a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800f8ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f8b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f8b4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f8b8:	7812      	ldrb	r2, [r2, #0]
 800f8ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f8bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800f8c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f8ca:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800f8ce:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800f8da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f8de:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f8e2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800f8e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800f8ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f8f8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f001 f966 	bl	8010bce <Osal_MemCpy>
    index_input += Local_Name_Length;
 800f902:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800f906:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f90a:	4413      	add	r3, r2
 800f90c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800f910:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f914:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f918:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f91a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f91e:	3301      	adds	r3, #1
 800f920:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800f924:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f928:	3301      	adds	r3, #1
 800f92a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f92e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800f932:	4618      	mov	r0, r3
 800f934:	f001 f94b 	bl	8010bce <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800f938:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f93c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f940:	4413      	add	r3, r2
 800f942:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800f946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f94a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800f94e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f950:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f954:	3302      	adds	r3, #2
 800f956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800f95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f95e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800f962:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800f964:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f968:	3302      	adds	r3, #2
 800f96a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f96e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f972:	2218      	movs	r2, #24
 800f974:	2100      	movs	r1, #0
 800f976:	4618      	mov	r0, r3
 800f978:	f001 f939 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800f97c:	233f      	movs	r3, #63	@ 0x3f
 800f97e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800f982:	2383      	movs	r3, #131	@ 0x83
 800f984:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f990:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f994:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f998:	f107 030f 	add.w	r3, r7, #15
 800f99c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f9a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f001 fba7 	bl	8011100 <hci_send_req>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	da01      	bge.n	800f9bc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800f9b8:	23ff      	movs	r3, #255	@ 0xff
 800f9ba:	e004      	b.n	800f9c6 <aci_gap_set_discoverable+0x1ea>
  return status;
 800f9bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f9c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f9c4:	781b      	ldrb	r3, [r3, #0]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bdb0      	pop	{r4, r5, r7, pc}

0800f9d0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b0cc      	sub	sp, #304	@ 0x130
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f9e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800f9e2:	f107 0310 	add.w	r3, r7, #16
 800f9e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f9ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800f9fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fa04:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fa08:	7812      	ldrb	r2, [r2, #0]
 800fa0a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fa0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa10:	3301      	adds	r3, #1
 800fa12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa1a:	2218      	movs	r2, #24
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f001 f8e5 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa24:	233f      	movs	r3, #63	@ 0x3f
 800fa26:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800fa2a:	2385      	movs	r3, #133	@ 0x85
 800fa2c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fa30:	f107 0310 	add.w	r3, r7, #16
 800fa34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fa38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fa40:	f107 030f 	add.w	r3, r7, #15
 800fa44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa52:	2100      	movs	r1, #0
 800fa54:	4618      	mov	r0, r3
 800fa56:	f001 fb53 	bl	8011100 <hci_send_req>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	da01      	bge.n	800fa64 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800fa60:	23ff      	movs	r3, #255	@ 0xff
 800fa62:	e004      	b.n	800fa6e <aci_gap_set_io_capability+0x9e>
  return status;
 800fa64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa68:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa6c:	781b      	ldrb	r3, [r3, #0]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800fa78:	b5b0      	push	{r4, r5, r7, lr}
 800fa7a:	b0cc      	sub	sp, #304	@ 0x130
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	4605      	mov	r5, r0
 800fa80:	460c      	mov	r4, r1
 800fa82:	4610      	mov	r0, r2
 800fa84:	4619      	mov	r1, r3
 800fa86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa8a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fa8e:	462a      	mov	r2, r5
 800fa90:	701a      	strb	r2, [r3, #0]
 800fa92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa96:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	701a      	strb	r2, [r3, #0]
 800fa9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800faa2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800faa6:	4602      	mov	r2, r0
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800faae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fab2:	460a      	mov	r2, r1
 800fab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800fab6:	f107 0310 	add.w	r3, r7, #16
 800faba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fabe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fac2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fac6:	2200      	movs	r2, #0
 800fac8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800fad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fad4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fad8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fadc:	7812      	ldrb	r2, [r2, #0]
 800fade:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fae4:	3301      	adds	r3, #1
 800fae6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800faea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800faee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800faf2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800faf6:	7812      	ldrb	r2, [r2, #0]
 800faf8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fafa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fafe:	3301      	adds	r3, #1
 800fb00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800fb04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb0c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fb10:	7812      	ldrb	r2, [r2, #0]
 800fb12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fb14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb18:	3301      	adds	r3, #1
 800fb1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800fb1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb26:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fb2a:	7812      	ldrb	r2, [r2, #0]
 800fb2c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800fb2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb32:	3301      	adds	r3, #1
 800fb34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800fb38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb3c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800fb40:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fb42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb46:	3301      	adds	r3, #1
 800fb48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800fb4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb50:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800fb54:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fb56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800fb60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb64:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fb68:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fb6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb6e:	3301      	adds	r3, #1
 800fb70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800fb74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb78:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800fb7c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800fb80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb84:	3304      	adds	r3, #4
 800fb86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800fb8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb8e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800fb92:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800fb94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fba2:	2218      	movs	r2, #24
 800fba4:	2100      	movs	r1, #0
 800fba6:	4618      	mov	r0, r3
 800fba8:	f001 f821 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800fbac:	233f      	movs	r3, #63	@ 0x3f
 800fbae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800fbb2:	2386      	movs	r3, #134	@ 0x86
 800fbb4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fbb8:	f107 0310 	add.w	r3, r7, #16
 800fbbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fbc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbc4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fbc8:	f107 030f 	add.w	r3, r7, #15
 800fbcc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fbd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fbda:	2100      	movs	r1, #0
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f001 fa8f 	bl	8011100 <hci_send_req>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	da01      	bge.n	800fbec <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800fbe8:	23ff      	movs	r3, #255	@ 0xff
 800fbea:	e004      	b.n	800fbf6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800fbec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbf0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fbf4:	781b      	ldrb	r3, [r3, #0]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bdb0      	pop	{r4, r5, r7, pc}

0800fc00 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b0cc      	sub	sp, #304	@ 0x130
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4602      	mov	r2, r0
 800fc08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fc10:	6019      	str	r1, [r3, #0]
 800fc12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc16:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fc1a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800fc1c:	f107 0310 	add.w	r3, r7, #16
 800fc20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fc24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fc30:	2300      	movs	r3, #0
 800fc32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fc36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc3e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fc42:	8812      	ldrh	r2, [r2, #0]
 800fc44:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fc46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc4a:	3302      	adds	r3, #2
 800fc4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800fc50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc54:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc58:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fc5c:	6812      	ldr	r2, [r2, #0]
 800fc5e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800fc62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc66:	3304      	adds	r3, #4
 800fc68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc70:	2218      	movs	r2, #24
 800fc72:	2100      	movs	r1, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f000 ffba 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc7a:	233f      	movs	r3, #63	@ 0x3f
 800fc7c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800fc80:	2388      	movs	r3, #136	@ 0x88
 800fc82:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fc86:	f107 0310 	add.w	r3, r7, #16
 800fc8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fc8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fc96:	f107 030f 	add.w	r3, r7, #15
 800fc9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fca4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fca8:	2100      	movs	r1, #0
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f001 fa28 	bl	8011100 <hci_send_req>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	da01      	bge.n	800fcba <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800fcb6:	23ff      	movs	r3, #255	@ 0xff
 800fcb8:	e004      	b.n	800fcc4 <aci_gap_pass_key_resp+0xc4>
  return status;
 800fcba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fcc2:	781b      	ldrb	r3, [r3, #0]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800fcce:	b590      	push	{r4, r7, lr}
 800fcd0:	b0cd      	sub	sp, #308	@ 0x134
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	4608      	mov	r0, r1
 800fcd8:	4611      	mov	r1, r2
 800fcda:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fcde:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fce8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fcec:	4622      	mov	r2, r4
 800fcee:	701a      	strb	r2, [r3, #0]
 800fcf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcf4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	701a      	strb	r2, [r3, #0]
 800fcfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd00:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fd04:	460a      	mov	r2, r1
 800fd06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800fd08:	f107 0310 	add.w	r3, r7, #16
 800fd0c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fd10:	f107 0308 	add.w	r3, r7, #8
 800fd14:	2207      	movs	r2, #7
 800fd16:	2100      	movs	r1, #0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f000 ff68 	bl	8010bee <Osal_MemSet>
  int index_input = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800fd24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd2c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fd30:	7812      	ldrb	r2, [r2, #0]
 800fd32:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fd34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd38:	3301      	adds	r3, #1
 800fd3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800fd3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd46:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fd4a:	7812      	ldrb	r2, [r2, #0]
 800fd4c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fd4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd52:	3301      	adds	r3, #1
 800fd54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800fd58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd60:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fd64:	7812      	ldrb	r2, [r2, #0]
 800fd66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fd68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd76:	2218      	movs	r2, #24
 800fd78:	2100      	movs	r1, #0
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 ff37 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd80:	233f      	movs	r3, #63	@ 0x3f
 800fd82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800fd86:	238a      	movs	r3, #138	@ 0x8a
 800fd88:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fd8c:	f107 0310 	add.w	r3, r7, #16
 800fd90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fd94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800fd9c:	f107 0308 	add.w	r3, r7, #8
 800fda0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800fda4:	2307      	movs	r3, #7
 800fda6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fdaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fdae:	2100      	movs	r1, #0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f001 f9a5 	bl	8011100 <hci_send_req>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	da01      	bge.n	800fdc0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800fdbc:	23ff      	movs	r3, #255	@ 0xff
 800fdbe:	e02e      	b.n	800fe1e <aci_gap_init+0x150>
  if ( resp.Status )
 800fdc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdc4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d005      	beq.n	800fdda <aci_gap_init+0x10c>
    return resp.Status;
 800fdce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	e021      	b.n	800fe1e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800fdda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fde2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800fdf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdf8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fdfc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800fe06:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800fe08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fe10:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800fe1a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd90      	pop	{r4, r7, pc}

0800fe28 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b0cc      	sub	sp, #304	@ 0x130
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4602      	mov	r2, r0
 800fe30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fe38:	6019      	str	r1, [r3, #0]
 800fe3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe3e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fe42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800fe44:	f107 0310 	add.w	r3, r7, #16
 800fe48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fe4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fe54:	2200      	movs	r2, #0
 800fe56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800fe5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fe6a:	7812      	ldrb	r2, [r2, #0]
 800fe6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fe6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe72:	3301      	adds	r3, #1
 800fe74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800fe78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe7c:	1c58      	adds	r0, r3, #1
 800fe7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fe86:	781a      	ldrb	r2, [r3, #0]
 800fe88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe8c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fe90:	6819      	ldr	r1, [r3, #0]
 800fe92:	f000 fe9c 	bl	8010bce <Osal_MemCpy>
  index_input += AdvDataLen;
 800fe96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe9a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fea4:	4413      	add	r3, r2
 800fea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800feaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feae:	2218      	movs	r2, #24
 800feb0:	2100      	movs	r1, #0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 fe9b 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800feb8:	233f      	movs	r3, #63	@ 0x3f
 800feba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800febe:	238e      	movs	r3, #142	@ 0x8e
 800fec0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fec4:	f107 0310 	add.w	r3, r7, #16
 800fec8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fed0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fed4:	f107 030f 	add.w	r3, r7, #15
 800fed8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fedc:	2301      	movs	r3, #1
 800fede:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fee6:	2100      	movs	r1, #0
 800fee8:	4618      	mov	r0, r3
 800feea:	f001 f909 	bl	8011100 <hci_send_req>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	da01      	bge.n	800fef8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800fef4:	23ff      	movs	r3, #255	@ 0xff
 800fef6:	e004      	b.n	800ff02 <aci_gap_update_adv_data+0xda>
  return status;
 800fef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fefc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ff00:	781b      	ldrb	r3, [r3, #0]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b088      	sub	sp, #32
 800ff10:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff16:	f107 0308 	add.w	r3, r7, #8
 800ff1a:	2218      	movs	r2, #24
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 fe65 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800ff24:	233f      	movs	r3, #63	@ 0x3f
 800ff26:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ff28:	2392      	movs	r3, #146	@ 0x92
 800ff2a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ff2c:	1dfb      	adds	r3, r7, #7
 800ff2e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ff30:	2301      	movs	r3, #1
 800ff32:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff34:	f107 0308 	add.w	r3, r7, #8
 800ff38:	2100      	movs	r1, #0
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f001 f8e0 	bl	8011100 <hci_send_req>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	da01      	bge.n	800ff4a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ff46:	23ff      	movs	r3, #255	@ 0xff
 800ff48:	e000      	b.n	800ff4c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3720      	adds	r7, #32
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b0cc      	sub	sp, #304	@ 0x130
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff60:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ff64:	801a      	strh	r2, [r3, #0]
 800ff66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff6a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ff6e:	460a      	mov	r2, r1
 800ff70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800ff72:	f107 0310 	add.w	r3, r7, #16
 800ff76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ff7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ff82:	2200      	movs	r2, #0
 800ff84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ff8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff94:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ff98:	8812      	ldrh	r2, [r2, #0]
 800ff9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ff9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ffa0:	3302      	adds	r3, #2
 800ffa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ffa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ffaa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ffae:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ffb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ffba:	3301      	adds	r3, #1
 800ffbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ffc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffc4:	2218      	movs	r2, #24
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 fe10 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 800ffce:	233f      	movs	r3, #63	@ 0x3f
 800ffd0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800ffd4:	23a5      	movs	r3, #165	@ 0xa5
 800ffd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ffda:	f107 0310 	add.w	r3, r7, #16
 800ffde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ffe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ffe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ffea:	f107 030f 	add.w	r3, r7, #15
 800ffee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fff2:	2301      	movs	r3, #1
 800fff4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fffc:	2100      	movs	r1, #0
 800fffe:	4618      	mov	r0, r3
 8010000:	f001 f87e 	bl	8011100 <hci_send_req>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	da01      	bge.n	801000e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 801000a:	23ff      	movs	r3, #255	@ 0xff
 801000c:	e004      	b.n	8010018 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 801000e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010012:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010016:	781b      	ldrb	r3, [r3, #0]
}
 8010018:	4618      	mov	r0, r3
 801001a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b088      	sub	sp, #32
 8010026:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801002c:	f107 0308 	add.w	r3, r7, #8
 8010030:	2218      	movs	r2, #24
 8010032:	2100      	movs	r1, #0
 8010034:	4618      	mov	r0, r3
 8010036:	f000 fdda 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 801003a:	233f      	movs	r3, #63	@ 0x3f
 801003c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801003e:	f240 1301 	movw	r3, #257	@ 0x101
 8010042:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010044:	1dfb      	adds	r3, r7, #7
 8010046:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010048:	2301      	movs	r3, #1
 801004a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801004c:	f107 0308 	add.w	r3, r7, #8
 8010050:	2100      	movs	r1, #0
 8010052:	4618      	mov	r0, r3
 8010054:	f001 f854 	bl	8011100 <hci_send_req>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	da01      	bge.n	8010062 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801005e:	23ff      	movs	r3, #255	@ 0xff
 8010060:	e000      	b.n	8010064 <aci_gatt_init+0x42>
  return status;
 8010062:	79fb      	ldrb	r3, [r7, #7]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3720      	adds	r7, #32
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b0cf      	sub	sp, #316	@ 0x13c
 8010070:	af00      	add	r7, sp, #0
 8010072:	4604      	mov	r4, r0
 8010074:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010078:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801007c:	6001      	str	r1, [r0, #0]
 801007e:	4610      	mov	r0, r2
 8010080:	4619      	mov	r1, r3
 8010082:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010086:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801008a:	4622      	mov	r2, r4
 801008c:	701a      	strb	r2, [r3, #0]
 801008e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010092:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010096:	4602      	mov	r2, r0
 8010098:	701a      	strb	r2, [r3, #0]
 801009a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801009e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80100a2:	460a      	mov	r2, r1
 80100a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80100a6:	f107 0310 	add.w	r3, r7, #16
 80100aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80100ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80100b2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d00a      	beq.n	80100d2 <aci_gatt_add_service+0x66>
 80100bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80100c0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d101      	bne.n	80100ce <aci_gatt_add_service+0x62>
 80100ca:	2311      	movs	r3, #17
 80100cc:	e002      	b.n	80100d4 <aci_gatt_add_service+0x68>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <aci_gatt_add_service+0x68>
 80100d2:	2303      	movs	r3, #3
 80100d4:	f107 0210 	add.w	r2, r7, #16
 80100d8:	4413      	add	r3, r2
 80100da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	2203      	movs	r2, #3
 80100e4:	2100      	movs	r1, #0
 80100e6:	4618      	mov	r0, r3
 80100e8:	f000 fd81 	bl	8010bee <Osal_MemSet>
  int index_input = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80100f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80100f6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80100fa:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80100fe:	7812      	ldrb	r2, [r2, #0]
 8010100:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010102:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010106:	3301      	adds	r3, #1
 8010108:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 801010c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010110:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b01      	cmp	r3, #1
 8010118:	d002      	beq.n	8010120 <aci_gatt_add_service+0xb4>
 801011a:	2b02      	cmp	r3, #2
 801011c:	d004      	beq.n	8010128 <aci_gatt_add_service+0xbc>
 801011e:	e007      	b.n	8010130 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8010120:	2302      	movs	r3, #2
 8010122:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010126:	e005      	b.n	8010134 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010128:	2310      	movs	r3, #16
 801012a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801012e:	e001      	b.n	8010134 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010130:	2397      	movs	r3, #151	@ 0x97
 8010132:	e06c      	b.n	801020e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010134:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010138:	1c58      	adds	r0, r3, #1
 801013a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 801013e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010142:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010146:	6819      	ldr	r1, [r3, #0]
 8010148:	f000 fd41 	bl	8010bce <Osal_MemCpy>
    index_input += size;
 801014c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010150:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010154:	4413      	add	r3, r2
 8010156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801015a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801015e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010162:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010166:	7812      	ldrb	r2, [r2, #0]
 8010168:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801016a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801016e:	3301      	adds	r3, #1
 8010170:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010178:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801017c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010180:	7812      	ldrb	r2, [r2, #0]
 8010182:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010184:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010188:	3301      	adds	r3, #1
 801018a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801018e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010192:	2218      	movs	r2, #24
 8010194:	2100      	movs	r1, #0
 8010196:	4618      	mov	r0, r3
 8010198:	f000 fd29 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 801019c:	233f      	movs	r3, #63	@ 0x3f
 801019e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80101a2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80101a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80101aa:	f107 0310 	add.w	r3, r7, #16
 80101ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80101b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80101b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80101ba:	f107 030c 	add.w	r3, r7, #12
 80101be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80101c2:	2303      	movs	r3, #3
 80101c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80101c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80101cc:	2100      	movs	r1, #0
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 ff96 	bl	8011100 <hci_send_req>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	da01      	bge.n	80101de <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80101da:	23ff      	movs	r3, #255	@ 0xff
 80101dc:	e017      	b.n	801020e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80101de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d005      	beq.n	80101f8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80101ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	e00a      	b.n	801020e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80101f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010200:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010204:	b29a      	uxth	r2, r3
 8010206:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801020a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}

08010218 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010218:	b590      	push	{r4, r7, lr}
 801021a:	b0d1      	sub	sp, #324	@ 0x144
 801021c:	af00      	add	r7, sp, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8010226:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 801022a:	600a      	str	r2, [r1, #0]
 801022c:	4619      	mov	r1, r3
 801022e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010232:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010236:	4622      	mov	r2, r4
 8010238:	801a      	strh	r2, [r3, #0]
 801023a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801023e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010242:	4602      	mov	r2, r0
 8010244:	701a      	strb	r2, [r3, #0]
 8010246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801024a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801024e:	460a      	mov	r2, r1
 8010250:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010252:	f107 0318 	add.w	r3, r7, #24
 8010256:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801025a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801025e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d00a      	beq.n	801027e <aci_gatt_add_char+0x66>
 8010268:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801026c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b02      	cmp	r3, #2
 8010274:	d101      	bne.n	801027a <aci_gatt_add_char+0x62>
 8010276:	2313      	movs	r3, #19
 8010278:	e002      	b.n	8010280 <aci_gatt_add_char+0x68>
 801027a:	2303      	movs	r3, #3
 801027c:	e000      	b.n	8010280 <aci_gatt_add_char+0x68>
 801027e:	2305      	movs	r3, #5
 8010280:	f107 0218 	add.w	r2, r7, #24
 8010284:	4413      	add	r3, r2
 8010286:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801028a:	f107 0314 	add.w	r3, r7, #20
 801028e:	2203      	movs	r2, #3
 8010290:	2100      	movs	r1, #0
 8010292:	4618      	mov	r0, r3
 8010294:	f000 fcab 	bl	8010bee <Osal_MemSet>
  int index_input = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801029e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80102a2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80102a6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80102aa:	8812      	ldrh	r2, [r2, #0]
 80102ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80102ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102b2:	3302      	adds	r3, #2
 80102b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80102b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80102bc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80102c0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80102c4:	7812      	ldrb	r2, [r2, #0]
 80102c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80102c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102cc:	3301      	adds	r3, #1
 80102ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80102d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80102d6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d002      	beq.n	80102e6 <aci_gatt_add_char+0xce>
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d004      	beq.n	80102ee <aci_gatt_add_char+0xd6>
 80102e4:	e007      	b.n	80102f6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80102e6:	2302      	movs	r3, #2
 80102e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80102ec:	e005      	b.n	80102fa <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80102ee:	2310      	movs	r3, #16
 80102f0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80102f4:	e001      	b.n	80102fa <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80102f6:	2397      	movs	r3, #151	@ 0x97
 80102f8:	e091      	b.n	801041e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80102fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80102fe:	1cd8      	adds	r0, r3, #3
 8010300:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8010304:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010308:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801030c:	6819      	ldr	r1, [r3, #0]
 801030e:	f000 fc5e 	bl	8010bce <Osal_MemCpy>
    index_input += size;
 8010312:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8010316:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801031a:	4413      	add	r3, r2
 801031c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010320:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010324:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010328:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 801032c:	8812      	ldrh	r2, [r2, #0]
 801032e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010330:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010334:	3302      	adds	r3, #2
 8010336:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 801033a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801033e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010342:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010344:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010348:	3301      	adds	r3, #1
 801034a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801034e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010352:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010356:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010358:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801035c:	3301      	adds	r3, #1
 801035e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010362:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010366:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801036a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 801036c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010370:	3301      	adds	r3, #1
 8010372:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010376:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801037a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 801037e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010380:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010384:	3301      	adds	r3, #1
 8010386:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801038a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801038e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010392:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010394:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010398:	3301      	adds	r3, #1
 801039a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801039e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80103a2:	2218      	movs	r2, #24
 80103a4:	2100      	movs	r1, #0
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fc21 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80103ac:	233f      	movs	r3, #63	@ 0x3f
 80103ae:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80103b2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80103b6:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80103ba:	f107 0318 	add.w	r3, r7, #24
 80103be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80103c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80103c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80103ca:	f107 0314 	add.w	r3, r7, #20
 80103ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80103d2:	2303      	movs	r3, #3
 80103d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80103d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80103dc:	2100      	movs	r1, #0
 80103de:	4618      	mov	r0, r3
 80103e0:	f000 fe8e 	bl	8011100 <hci_send_req>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	da01      	bge.n	80103ee <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80103ea:	23ff      	movs	r3, #255	@ 0xff
 80103ec:	e017      	b.n	801041e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80103ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d005      	beq.n	8010408 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80103fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010400:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	e00a      	b.n	801041e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010408:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801040c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010410:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010414:	b29a      	uxth	r2, r3
 8010416:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801041a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010424:	46bd      	mov	sp, r7
 8010426:	bd90      	pop	{r4, r7, pc}

08010428 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010428:	b5b0      	push	{r4, r5, r7, lr}
 801042a:	b0cc      	sub	sp, #304	@ 0x130
 801042c:	af00      	add	r7, sp, #0
 801042e:	4605      	mov	r5, r0
 8010430:	460c      	mov	r4, r1
 8010432:	4610      	mov	r0, r2
 8010434:	4619      	mov	r1, r3
 8010436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801043a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801043e:	462a      	mov	r2, r5
 8010440:	801a      	strh	r2, [r3, #0]
 8010442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010446:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801044a:	4622      	mov	r2, r4
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010452:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010456:	4602      	mov	r2, r0
 8010458:	701a      	strb	r2, [r3, #0]
 801045a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801045e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010462:	460a      	mov	r2, r1
 8010464:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010466:	f107 0310 	add.w	r3, r7, #16
 801046a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801046e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010472:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801047a:	2300      	movs	r3, #0
 801047c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010480:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010484:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010488:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801048c:	8812      	ldrh	r2, [r2, #0]
 801048e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010490:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010494:	3302      	adds	r3, #2
 8010496:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801049a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801049e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104a2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80104a6:	8812      	ldrh	r2, [r2, #0]
 80104a8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80104aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104ae:	3302      	adds	r3, #2
 80104b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80104b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104bc:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80104c0:	7812      	ldrb	r2, [r2, #0]
 80104c2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80104c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104c8:	3301      	adds	r3, #1
 80104ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80104ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104d6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80104da:	7812      	ldrb	r2, [r2, #0]
 80104dc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80104de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104e2:	3301      	adds	r3, #1
 80104e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80104e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104ec:	1d98      	adds	r0, r3, #6
 80104ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80104f2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	461a      	mov	r2, r3
 80104fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80104fe:	f000 fb66 	bl	8010bce <Osal_MemCpy>
  index_input += Char_Value_Length;
 8010502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010506:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010510:	4413      	add	r3, r2
 8010512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801051a:	2218      	movs	r2, #24
 801051c:	2100      	movs	r1, #0
 801051e:	4618      	mov	r0, r3
 8010520:	f000 fb65 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8010524:	233f      	movs	r3, #63	@ 0x3f
 8010526:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 801052a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 801052e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010532:	f107 0310 	add.w	r3, r7, #16
 8010536:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801053a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801053e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010542:	f107 030f 	add.w	r3, r7, #15
 8010546:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801054a:	2301      	movs	r3, #1
 801054c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010550:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010554:	2100      	movs	r1, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f000 fdd2 	bl	8011100 <hci_send_req>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	da01      	bge.n	8010566 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010562:	23ff      	movs	r3, #255	@ 0xff
 8010564:	e004      	b.n	8010570 <aci_gatt_update_char_value+0x148>
  return status;
 8010566:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801056a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801056e:	781b      	ldrb	r3, [r3, #0]
}
 8010570:	4618      	mov	r0, r3
 8010572:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010576:	46bd      	mov	sp, r7
 8010578:	bdb0      	pop	{r4, r5, r7, pc}

0801057a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b0cc      	sub	sp, #304	@ 0x130
 801057e:	af00      	add	r7, sp, #0
 8010580:	4602      	mov	r2, r0
 8010582:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010586:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801058a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 801058c:	f107 0310 	add.w	r3, r7, #16
 8010590:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010594:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010598:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801059c:	2200      	movs	r2, #0
 801059e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80105a0:	2300      	movs	r3, #0
 80105a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80105a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80105aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80105ae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80105b2:	8812      	ldrh	r2, [r2, #0]
 80105b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80105b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105ba:	3302      	adds	r3, #2
 80105bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80105c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80105c4:	2218      	movs	r2, #24
 80105c6:	2100      	movs	r1, #0
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 fb10 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80105ce:	233f      	movs	r3, #63	@ 0x3f
 80105d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80105d4:	f240 1325 	movw	r3, #293	@ 0x125
 80105d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80105dc:	f107 0310 	add.w	r3, r7, #16
 80105e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80105e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80105ec:	f107 030f 	add.w	r3, r7, #15
 80105f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80105f4:	2301      	movs	r3, #1
 80105f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80105fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80105fe:	2100      	movs	r1, #0
 8010600:	4618      	mov	r0, r3
 8010602:	f000 fd7d 	bl	8011100 <hci_send_req>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	da01      	bge.n	8010610 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 801060c:	23ff      	movs	r3, #255	@ 0xff
 801060e:	e004      	b.n	801061a <aci_gatt_confirm_indication+0xa0>
  return status;
 8010610:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010614:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010618:	781b      	ldrb	r3, [r3, #0]
}
 801061a:	4618      	mov	r0, r3
 801061c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b0cc      	sub	sp, #304	@ 0x130
 8010628:	af00      	add	r7, sp, #0
 801062a:	4602      	mov	r2, r0
 801062c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010630:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010634:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8010636:	f107 0310 	add.w	r3, r7, #16
 801063a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801063e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010642:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010646:	2200      	movs	r2, #0
 8010648:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010650:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010654:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010658:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801065c:	8812      	ldrh	r2, [r2, #0]
 801065e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010664:	3302      	adds	r3, #2
 8010666:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801066a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801066e:	2218      	movs	r2, #24
 8010670:	2100      	movs	r1, #0
 8010672:	4618      	mov	r0, r3
 8010674:	f000 fabb 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8010678:	233f      	movs	r3, #63	@ 0x3f
 801067a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801067e:	f240 1327 	movw	r3, #295	@ 0x127
 8010682:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010686:	f107 0310 	add.w	r3, r7, #16
 801068a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801068e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010692:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010696:	f107 030f 	add.w	r3, r7, #15
 801069a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801069e:	2301      	movs	r3, #1
 80106a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80106a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106a8:	2100      	movs	r1, #0
 80106aa:	4618      	mov	r0, r3
 80106ac:	f000 fd28 	bl	8011100 <hci_send_req>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	da01      	bge.n	80106ba <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80106b6:	23ff      	movs	r3, #255	@ 0xff
 80106b8:	e004      	b.n	80106c4 <aci_gatt_allow_read+0xa0>
  return status;
 80106ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80106c2:	781b      	ldrb	r3, [r3, #0]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b0cc      	sub	sp, #304	@ 0x130
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80106dc:	601a      	str	r2, [r3, #0]
 80106de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80106e6:	4602      	mov	r2, r0
 80106e8:	701a      	strb	r2, [r3, #0]
 80106ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80106f2:	460a      	mov	r2, r1
 80106f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80106f6:	f107 0310 	add.w	r3, r7, #16
 80106fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80106fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010702:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010706:	2200      	movs	r2, #0
 8010708:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8010710:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010714:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010718:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801071c:	7812      	ldrb	r2, [r2, #0]
 801071e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010720:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010724:	3301      	adds	r3, #1
 8010726:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 801072a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801072e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010732:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010736:	7812      	ldrb	r2, [r2, #0]
 8010738:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801073a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801073e:	3301      	adds	r3, #1
 8010740:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010744:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010748:	1c98      	adds	r0, r3, #2
 801074a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801074e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010752:	781a      	ldrb	r2, [r3, #0]
 8010754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010758:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801075c:	6819      	ldr	r1, [r3, #0]
 801075e:	f000 fa36 	bl	8010bce <Osal_MemCpy>
  index_input += Length;
 8010762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010766:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010770:	4413      	add	r3, r2
 8010772:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010776:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801077a:	2218      	movs	r2, #24
 801077c:	2100      	movs	r1, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f000 fa35 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8010784:	233f      	movs	r3, #63	@ 0x3f
 8010786:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 801078a:	230c      	movs	r3, #12
 801078c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010790:	f107 0310 	add.w	r3, r7, #16
 8010794:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801079c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80107a0:	f107 030f 	add.w	r3, r7, #15
 80107a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80107a8:	2301      	movs	r3, #1
 80107aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107b2:	2100      	movs	r1, #0
 80107b4:	4618      	mov	r0, r3
 80107b6:	f000 fca3 	bl	8011100 <hci_send_req>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	da01      	bge.n	80107c4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80107c0:	23ff      	movs	r3, #255	@ 0xff
 80107c2:	e004      	b.n	80107ce <aci_hal_write_config_data+0x100>
  return status;
 80107c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80107cc:	781b      	ldrb	r3, [r3, #0]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b0cc      	sub	sp, #304	@ 0x130
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4602      	mov	r2, r0
 80107e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80107e8:	701a      	strb	r2, [r3, #0]
 80107ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80107f2:	460a      	mov	r2, r1
 80107f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80107f6:	f107 0310 	add.w	r3, r7, #16
 80107fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80107fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010802:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010806:	2200      	movs	r2, #0
 8010808:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8010810:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010814:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010818:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801081c:	7812      	ldrb	r2, [r2, #0]
 801081e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010824:	3301      	adds	r3, #1
 8010826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 801082a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801082e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010832:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010836:	7812      	ldrb	r2, [r2, #0]
 8010838:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801083a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801083e:	3301      	adds	r3, #1
 8010840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010848:	2218      	movs	r2, #24
 801084a:	2100      	movs	r1, #0
 801084c:	4618      	mov	r0, r3
 801084e:	f000 f9ce 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8010852:	233f      	movs	r3, #63	@ 0x3f
 8010854:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8010858:	230f      	movs	r3, #15
 801085a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801085e:	f107 0310 	add.w	r3, r7, #16
 8010862:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010866:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801086a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801086e:	f107 030f 	add.w	r3, r7, #15
 8010872:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010876:	2301      	movs	r3, #1
 8010878:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801087c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010880:	2100      	movs	r1, #0
 8010882:	4618      	mov	r0, r3
 8010884:	f000 fc3c 	bl	8011100 <hci_send_req>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	da01      	bge.n	8010892 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 801088e:	23ff      	movs	r3, #255	@ 0xff
 8010890:	e004      	b.n	801089c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8010892:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010896:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801089a:	781b      	ldrb	r3, [r3, #0]
}
 801089c:	4618      	mov	r0, r3
 801089e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b0cc      	sub	sp, #304	@ 0x130
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	4602      	mov	r2, r0
 80108ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80108b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80108b8:	f107 0310 	add.w	r3, r7, #16
 80108bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80108c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80108c8:	2200      	movs	r2, #0
 80108ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80108d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80108de:	8812      	ldrh	r2, [r2, #0]
 80108e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80108e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108e6:	3302      	adds	r3, #2
 80108e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80108ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108f0:	2218      	movs	r2, #24
 80108f2:	2100      	movs	r1, #0
 80108f4:	4618      	mov	r0, r3
 80108f6:	f000 f97a 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 80108fa:	233f      	movs	r3, #63	@ 0x3f
 80108fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8010900:	2318      	movs	r3, #24
 8010902:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010906:	f107 0310 	add.w	r3, r7, #16
 801090a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801090e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010912:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010916:	f107 030f 	add.w	r3, r7, #15
 801091a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801091e:	2301      	movs	r3, #1
 8010920:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010928:	2100      	movs	r1, #0
 801092a:	4618      	mov	r0, r3
 801092c:	f000 fbe8 	bl	8011100 <hci_send_req>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	da01      	bge.n	801093a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010936:	23ff      	movs	r3, #255	@ 0xff
 8010938:	e004      	b.n	8010944 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 801093a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801093e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010942:	781b      	ldrb	r3, [r3, #0]
}
 8010944:	4618      	mov	r0, r3
 8010946:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}

0801094e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b088      	sub	sp, #32
 8010952:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010958:	f107 0308 	add.w	r3, r7, #8
 801095c:	2218      	movs	r2, #24
 801095e:	2100      	movs	r1, #0
 8010960:	4618      	mov	r0, r3
 8010962:	f000 f944 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x03;
 8010966:	2303      	movs	r3, #3
 8010968:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 801096a:	2303      	movs	r3, #3
 801096c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801096e:	1dfb      	adds	r3, r7, #7
 8010970:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010972:	2301      	movs	r3, #1
 8010974:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010976:	f107 0308 	add.w	r3, r7, #8
 801097a:	2100      	movs	r1, #0
 801097c:	4618      	mov	r0, r3
 801097e:	f000 fbbf 	bl	8011100 <hci_send_req>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	da01      	bge.n	801098c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010988:	23ff      	movs	r3, #255	@ 0xff
 801098a:	e000      	b.n	801098e <hci_reset+0x40>
  return status;
 801098c:	79fb      	ldrb	r3, [r7, #7]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3720      	adds	r7, #32
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010996:	b590      	push	{r4, r7, lr}
 8010998:	b0cd      	sub	sp, #308	@ 0x134
 801099a:	af00      	add	r7, sp, #0
 801099c:	4604      	mov	r4, r0
 801099e:	4608      	mov	r0, r1
 80109a0:	4611      	mov	r1, r2
 80109a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109aa:	4622      	mov	r2, r4
 80109ac:	701a      	strb	r2, [r3, #0]
 80109ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80109b6:	4602      	mov	r2, r0
 80109b8:	701a      	strb	r2, [r3, #0]
 80109ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80109c2:	460a      	mov	r2, r1
 80109c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80109c6:	f107 0310 	add.w	r3, r7, #16
 80109ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109d6:	2200      	movs	r2, #0
 80109d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80109e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109e8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80109ec:	7812      	ldrb	r2, [r2, #0]
 80109ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109f4:	3301      	adds	r3, #1
 80109f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80109fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010a02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010a06:	7812      	ldrb	r2, [r2, #0]
 8010a08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a0e:	3301      	adds	r3, #1
 8010a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8010a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010a18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010a1c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010a20:	7812      	ldrb	r2, [r2, #0]
 8010a22:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a28:	3301      	adds	r3, #1
 8010a2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a32:	2218      	movs	r2, #24
 8010a34:	2100      	movs	r1, #0
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 f8d9 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x08;
 8010a3c:	2308      	movs	r3, #8
 8010a3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8010a42:	2331      	movs	r3, #49	@ 0x31
 8010a44:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a48:	f107 0310 	add.w	r3, r7, #16
 8010a4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a58:	f107 030f 	add.w	r3, r7, #15
 8010a5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a60:	2301      	movs	r3, #1
 8010a62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fb47 	bl	8011100 <hci_send_req>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	da01      	bge.n	8010a7c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8010a78:	23ff      	movs	r3, #255	@ 0xff
 8010a7a:	e004      	b.n	8010a86 <hci_le_set_default_phy+0xf0>
  return status;
 8010a7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a80:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a84:	781b      	ldrb	r3, [r3, #0]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd90      	pop	{r4, r7, pc}

08010a90 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8010a90:	b5b0      	push	{r4, r5, r7, lr}
 8010a92:	b0cc      	sub	sp, #304	@ 0x130
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4605      	mov	r5, r0
 8010a98:	460c      	mov	r4, r1
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aa2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010aa6:	462a      	mov	r2, r5
 8010aa8:	801a      	strh	r2, [r3, #0]
 8010aaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ab2:	4622      	mov	r2, r4
 8010ab4:	801a      	strh	r2, [r3, #0]
 8010ab6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aba:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010abe:	4602      	mov	r2, r0
 8010ac0:	801a      	strh	r2, [r3, #0]
 8010ac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ac6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010aca:	460a      	mov	r2, r1
 8010acc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8010ace:	f107 0310 	add.w	r3, r7, #16
 8010ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ada:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010ade:	2200      	movs	r2, #0
 8010ae0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010aec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010af0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010af4:	8812      	ldrh	r2, [r2, #0]
 8010af6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010afc:	3302      	adds	r3, #2
 8010afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8010b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b0a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010b0e:	8812      	ldrh	r2, [r2, #0]
 8010b10:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b16:	3302      	adds	r3, #2
 8010b18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8010b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b24:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8010b28:	8812      	ldrh	r2, [r2, #0]
 8010b2a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8010b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b30:	3302      	adds	r3, #2
 8010b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8010b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b3e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010b42:	8812      	ldrh	r2, [r2, #0]
 8010b44:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8010b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b4a:	3302      	adds	r3, #2
 8010b4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8010b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b54:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8010b58:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8010b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b5e:	3302      	adds	r3, #2
 8010b60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b68:	2218      	movs	r2, #24
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f000 f83e 	bl	8010bee <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b72:	233f      	movs	r3, #63	@ 0x3f
 8010b74:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8010b78:	f240 1381 	movw	r3, #385	@ 0x181
 8010b7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8010b80:	230f      	movs	r3, #15
 8010b82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8010b86:	f107 0310 	add.w	r3, r7, #16
 8010b8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010b96:	f107 030f 	add.w	r3, r7, #15
 8010b9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ba4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ba8:	2100      	movs	r1, #0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f000 faa8 	bl	8011100 <hci_send_req>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	da01      	bge.n	8010bba <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8010bb6:	23ff      	movs	r3, #255	@ 0xff
 8010bb8:	e004      	b.n	8010bc4 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8010bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010bbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010bc2:	781b      	ldrb	r3, [r3, #0]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bdb0      	pop	{r4, r5, r7, pc}

08010bce <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	60b9      	str	r1, [r7, #8]
 8010bd8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	68b9      	ldr	r1, [r7, #8]
 8010bde:	68f8      	ldr	r0, [r7, #12]
 8010be0:	f005 f855 	bl	8015c8e <memcpy>
 8010be4:	4603      	mov	r3, r0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b084      	sub	sp, #16
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	60f8      	str	r0, [r7, #12]
 8010bf6:	60b9      	str	r1, [r7, #8]
 8010bf8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	68b9      	ldr	r1, [r7, #8]
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f004 ffb4 	bl	8015b6c <memset>
 8010c04:	4603      	mov	r3, r0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010c0e:	b480      	push	{r7}
 8010c10:	af00      	add	r7, sp, #0
  return;
 8010c12:	bf00      	nop
}
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	af00      	add	r7, sp, #0
  return;
 8010c20:	bf00      	nop
}
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	af00      	add	r7, sp, #0
  return;
 8010c2e:	bf00      	nop
}
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8010c38:	b480      	push	{r7}
 8010c3a:	af00      	add	r7, sp, #0
  return;
 8010c3c:	bf00      	nop
}
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr

08010c46 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8010c46:	b480      	push	{r7}
 8010c48:	af00      	add	r7, sp, #0
  return;
 8010c4a:	bf00      	nop
}
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8010c54:	b480      	push	{r7}
 8010c56:	af00      	add	r7, sp, #0
  return;
 8010c58:	bf00      	nop
}
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010c62:	b480      	push	{r7}
 8010c64:	af00      	add	r7, sp, #0
  return;
 8010c66:	bf00      	nop
}
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010c70:	b480      	push	{r7}
 8010c72:	af00      	add	r7, sp, #0
  return;
 8010c74:	bf00      	nop
}
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010c7e:	b480      	push	{r7}
 8010c80:	af00      	add	r7, sp, #0
  return;
 8010c82:	bf00      	nop
}
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	af00      	add	r7, sp, #0
  return;
 8010c90:	bf00      	nop
}
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr

08010c9a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010c9a:	b480      	push	{r7}
 8010c9c:	af00      	add	r7, sp, #0
  return;
 8010c9e:	bf00      	nop
}
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010ca8:	b480      	push	{r7}
 8010caa:	af00      	add	r7, sp, #0
  return;
 8010cac:	bf00      	nop
}
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr

08010cb6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010cb6:	b480      	push	{r7}
 8010cb8:	af00      	add	r7, sp, #0
  return;
 8010cba:	bf00      	nop
}
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	af00      	add	r7, sp, #0
  return;
 8010cc8:	bf00      	nop
}
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr

08010cd2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	af00      	add	r7, sp, #0
  return;
 8010cd6:	bf00      	nop
}
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	af00      	add	r7, sp, #0
  return;
 8010ce4:	bf00      	nop
}
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr

08010cee <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010cee:	b480      	push	{r7}
 8010cf0:	af00      	add	r7, sp, #0
  return;
 8010cf2:	bf00      	nop
}
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010d00:	4b04      	ldr	r3, [pc, #16]	@ (8010d14 <SVCCTL_Init+0x18>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010d06:	4b04      	ldr	r3, [pc, #16]	@ (8010d18 <SVCCTL_Init+0x1c>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010d0c:	f000 f806 	bl	8010d1c <SVCCTL_SvcInit>

  return;
 8010d10:	bf00      	nop
}
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	20000194 	.word	0x20000194
 8010d18:	200001b4 	.word	0x200001b4

08010d1c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	af00      	add	r7, sp, #0
  BAS_Init();
 8010d20:	f7ff ff75 	bl	8010c0e <BAS_Init>

  BLS_Init();
 8010d24:	f7ff ff7a 	bl	8010c1c <BLS_Init>

  CRS_STM_Init();
 8010d28:	f7ff ff7f 	bl	8010c2a <CRS_STM_Init>

  DIS_Init();
 8010d2c:	f7ff ff84 	bl	8010c38 <DIS_Init>

  EDS_STM_Init();
 8010d30:	f7ff ff89 	bl	8010c46 <EDS_STM_Init>

  HIDS_Init();
 8010d34:	f7ff ff8e 	bl	8010c54 <HIDS_Init>

  HRS_Init();
 8010d38:	f7ff ff93 	bl	8010c62 <HRS_Init>

  HTS_Init();
 8010d3c:	f7ff ff98 	bl	8010c70 <HTS_Init>

  IAS_Init();
 8010d40:	f7ff ff9d 	bl	8010c7e <IAS_Init>

  LLS_Init();
 8010d44:	f7ff ffa2 	bl	8010c8c <LLS_Init>

  TPS_Init();
 8010d48:	f7ff ffa7 	bl	8010c9a <TPS_Init>

  MOTENV_STM_Init();
 8010d4c:	f7ff ffac 	bl	8010ca8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8010d50:	f7ff ffb1 	bl	8010cb6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8010d54:	f7ff ffb6 	bl	8010cc4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8010d58:	f7ff ffbb 	bl	8010cd2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8010d5c:	f7ff ffc7 	bl	8010cee <BVOPUS_STM_Init>

  MESH_Init();
 8010d60:	f7ff ffbe 	bl	8010ce0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8010d64:	f002 ff16 	bl	8013b94 <SVCCTL_InitCustomSvc>
  
  return;
 8010d68:	bf00      	nop
}
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8010d74:	4b09      	ldr	r3, [pc, #36]	@ (8010d9c <SVCCTL_RegisterSvcHandler+0x30>)
 8010d76:	7f1b      	ldrb	r3, [r3, #28]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	4a08      	ldr	r2, [pc, #32]	@ (8010d9c <SVCCTL_RegisterSvcHandler+0x30>)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8010d82:	4b06      	ldr	r3, [pc, #24]	@ (8010d9c <SVCCTL_RegisterSvcHandler+0x30>)
 8010d84:	7f1b      	ldrb	r3, [r3, #28]
 8010d86:	3301      	adds	r3, #1
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	4b04      	ldr	r3, [pc, #16]	@ (8010d9c <SVCCTL_RegisterSvcHandler+0x30>)
 8010d8c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010d8e:	bf00      	nop
}
 8010d90:	370c      	adds	r7, #12
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	20000194 	.word	0x20000194

08010da0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3301      	adds	r3, #1
 8010dac:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010dae:	2300      	movs	r3, #0
 8010db0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	2bff      	cmp	r3, #255	@ 0xff
 8010db8:	d125      	bne.n	8010e06 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	3302      	adds	r3, #2
 8010dbe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	881b      	ldrh	r3, [r3, #0]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010dce:	d118      	bne.n	8010e02 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	757b      	strb	r3, [r7, #21]
 8010dd4:	e00d      	b.n	8010df2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8010dd6:	7d7b      	ldrb	r3, [r7, #21]
 8010dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8010e44 <SVCCTL_UserEvtRx+0xa4>)
 8010dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	4798      	blx	r3
 8010de2:	4603      	mov	r3, r0
 8010de4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8010de6:	7dfb      	ldrb	r3, [r7, #23]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d108      	bne.n	8010dfe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010dec:	7d7b      	ldrb	r3, [r7, #21]
 8010dee:	3301      	adds	r3, #1
 8010df0:	757b      	strb	r3, [r7, #21]
 8010df2:	4b14      	ldr	r3, [pc, #80]	@ (8010e44 <SVCCTL_UserEvtRx+0xa4>)
 8010df4:	7f1b      	ldrb	r3, [r3, #28]
 8010df6:	7d7a      	ldrb	r2, [r7, #21]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d3ec      	bcc.n	8010dd6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010dfc:	e002      	b.n	8010e04 <SVCCTL_UserEvtRx+0x64>
              break;
 8010dfe:	bf00      	nop
          break;
 8010e00:	e000      	b.n	8010e04 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8010e02:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8010e04:	e000      	b.n	8010e08 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8010e06:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8010e08:	7dfb      	ldrb	r3, [r7, #23]
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	d00f      	beq.n	8010e2e <SVCCTL_UserEvtRx+0x8e>
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	dc10      	bgt.n	8010e34 <SVCCTL_UserEvtRx+0x94>
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d002      	beq.n	8010e1c <SVCCTL_UserEvtRx+0x7c>
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d006      	beq.n	8010e28 <SVCCTL_UserEvtRx+0x88>
 8010e1a:	e00b      	b.n	8010e34 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f001 fc93 	bl	8012748 <SVCCTL_App_Notification>
 8010e22:	4603      	mov	r3, r0
 8010e24:	75bb      	strb	r3, [r7, #22]
      break;
 8010e26:	e008      	b.n	8010e3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	75bb      	strb	r3, [r7, #22]
      break;
 8010e2c:	e005      	b.n	8010e3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75bb      	strb	r3, [r7, #22]
      break;
 8010e32:	e002      	b.n	8010e3a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010e34:	2301      	movs	r3, #1
 8010e36:	75bb      	strb	r3, [r7, #22]
      break;
 8010e38:	bf00      	nop
  }

  return (return_status);
 8010e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20000194 	.word	0x20000194

08010e48 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010e50:	f107 030c 	add.w	r3, r7, #12
 8010e54:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	212e      	movs	r1, #46	@ 0x2e
 8010e60:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8010e64:	f000 fae8 	bl	8011438 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	330b      	adds	r3, #11
 8010e6c:	78db      	ldrb	r3, [r3, #3]
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3720      	adds	r7, #32
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b088      	sub	sp, #32
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010e7e:	f107 030c 	add.w	r3, r7, #12
 8010e82:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	210f      	movs	r1, #15
 8010e8e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8010e92:	f000 fad1 	bl	8011438 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	330b      	adds	r3, #11
 8010e9a:	78db      	ldrb	r3, [r3, #3]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3720      	adds	r7, #32
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b088      	sub	sp, #32
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010eac:	f107 030c 	add.w	r3, r7, #12
 8010eb0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	2110      	movs	r1, #16
 8010eb8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8010ebc:	f000 fabc 	bl	8011438 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	330b      	adds	r3, #11
 8010ec4:	78db      	ldrb	r3, [r3, #3]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3720      	adds	r7, #32
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
	...

08010ed0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b08b      	sub	sp, #44	@ 0x2c
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010edc:	2300      	movs	r3, #0
 8010ede:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010eec:	2300      	movs	r3, #0
 8010eee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8011024 <SHCI_GetWirelessFwInfo+0x154>)
 8010efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010efc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f00:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8010f0a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a44      	ldr	r2, [pc, #272]	@ (8011028 <SHCI_GetWirelessFwInfo+0x158>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d10f      	bne.n	8010f3c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	695b      	ldr	r3, [r3, #20]
 8010f20:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	699b      	ldr	r3, [r3, #24]
 8010f26:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	69db      	ldr	r3, [r3, #28]
 8010f2c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	617b      	str	r3, [r7, #20]
 8010f3a:	e01a      	b.n	8010f72 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8010f44:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8010f48:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	695b      	ldr	r3, [r3, #20]
 8010f58:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f74:	0e1b      	lsrs	r3, r3, #24
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f7e:	0c1b      	lsrs	r3, r3, #16
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f88:	0a1b      	lsrs	r3, r3, #8
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f92:	091b      	lsrs	r3, r3, #4
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	f003 030f 	and.w	r3, r3, #15
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	f003 030f 	and.w	r3, r3, #15
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010fae:	6a3b      	ldr	r3, [r7, #32]
 8010fb0:	0e1b      	lsrs	r3, r3, #24
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	0c1b      	lsrs	r3, r3, #16
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010fc2:	6a3b      	ldr	r3, [r7, #32]
 8010fc4:	0a1b      	lsrs	r3, r3, #8
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010fcc:	6a3b      	ldr	r3, [r7, #32]
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	0e1b      	lsrs	r3, r3, #24
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	0c1b      	lsrs	r3, r3, #16
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	0a1b      	lsrs	r3, r3, #8
 8010ff4:	b2da      	uxtb	r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	0e1b      	lsrs	r3, r3, #24
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	0c1b      	lsrs	r3, r3, #16
 8011008:	b2da      	uxtb	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	b2da      	uxtb	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8011016:	2300      	movs	r3, #0
}
 8011018:	4618      	mov	r0, r3
 801101a:	372c      	adds	r7, #44	@ 0x2c
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	58004000 	.word	0x58004000
 8011028:	a94656b9 	.word	0xa94656b9

0801102c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	4a08      	ldr	r2, [pc, #32]	@ (801105c <hci_init+0x30>)
 801103c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801103e:	4a08      	ldr	r2, [pc, #32]	@ (8011060 <hci_init+0x34>)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011044:	4806      	ldr	r0, [pc, #24]	@ (8011060 <hci_init+0x34>)
 8011046:	f000 f979 	bl	801133c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4618      	mov	r0, r3
 8011050:	f000 f8da 	bl	8011208 <TlInit>

  return;
 8011054:	bf00      	nop
}
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20001974 	.word	0x20001974
 8011060:	2000194c 	.word	0x2000194c

08011064 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801106a:	4822      	ldr	r0, [pc, #136]	@ (80110f4 <hci_user_evt_proc+0x90>)
 801106c:	f000 fdfa 	bl	8011c64 <LST_is_empty>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d12b      	bne.n	80110ce <hci_user_evt_proc+0x6a>
 8011076:	4b20      	ldr	r3, [pc, #128]	@ (80110f8 <hci_user_evt_proc+0x94>)
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d027      	beq.n	80110ce <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801107e:	f107 030c 	add.w	r3, r7, #12
 8011082:	4619      	mov	r1, r3
 8011084:	481b      	ldr	r0, [pc, #108]	@ (80110f4 <hci_user_evt_proc+0x90>)
 8011086:	f000 fe7c 	bl	8011d82 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801108a:	4b1c      	ldr	r3, [pc, #112]	@ (80110fc <hci_user_evt_proc+0x98>)
 801108c:	69db      	ldr	r3, [r3, #28]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00c      	beq.n	80110ac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011096:	2301      	movs	r3, #1
 8011098:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801109a:	4b18      	ldr	r3, [pc, #96]	@ (80110fc <hci_user_evt_proc+0x98>)
 801109c:	69db      	ldr	r3, [r3, #28]
 801109e:	1d3a      	adds	r2, r7, #4
 80110a0:	4610      	mov	r0, r2
 80110a2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80110a4:	793a      	ldrb	r2, [r7, #4]
 80110a6:	4b14      	ldr	r3, [pc, #80]	@ (80110f8 <hci_user_evt_proc+0x94>)
 80110a8:	701a      	strb	r2, [r3, #0]
 80110aa:	e002      	b.n	80110b2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80110ac:	4b12      	ldr	r3, [pc, #72]	@ (80110f8 <hci_user_evt_proc+0x94>)
 80110ae:	2201      	movs	r2, #1
 80110b0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80110b2:	4b11      	ldr	r3, [pc, #68]	@ (80110f8 <hci_user_evt_proc+0x94>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d004      	beq.n	80110c4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	4618      	mov	r0, r3
 80110be:	f000 fc0d 	bl	80118dc <TL_MM_EvtDone>
 80110c2:	e004      	b.n	80110ce <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	4619      	mov	r1, r3
 80110c8:	480a      	ldr	r0, [pc, #40]	@ (80110f4 <hci_user_evt_proc+0x90>)
 80110ca:	f000 fded 	bl	8011ca8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80110ce:	4809      	ldr	r0, [pc, #36]	@ (80110f4 <hci_user_evt_proc+0x90>)
 80110d0:	f000 fdc8 	bl	8011c64 <LST_is_empty>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d107      	bne.n	80110ea <hci_user_evt_proc+0x86>
 80110da:	4b07      	ldr	r3, [pc, #28]	@ (80110f8 <hci_user_evt_proc+0x94>)
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d003      	beq.n	80110ea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80110e2:	4804      	ldr	r0, [pc, #16]	@ (80110f4 <hci_user_evt_proc+0x90>)
 80110e4:	f002 fb2c 	bl	8013740 <hci_notify_asynch_evt>
  }


  return;
 80110e8:	bf00      	nop
 80110ea:	bf00      	nop
}
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	200001bc 	.word	0x200001bc
 80110f8:	200001c8 	.word	0x200001c8
 80110fc:	2000194c 	.word	0x2000194c

08011100 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b088      	sub	sp, #32
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801110c:	2000      	movs	r0, #0
 801110e:	f000 f8d1 	bl	80112b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8011112:	2300      	movs	r3, #0
 8011114:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	885b      	ldrh	r3, [r3, #2]
 801111a:	b21b      	sxth	r3, r3
 801111c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011120:	b21a      	sxth	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	029b      	lsls	r3, r3, #10
 8011128:	b21b      	sxth	r3, r3
 801112a:	4313      	orrs	r3, r2
 801112c:	b21b      	sxth	r3, r3
 801112e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8011130:	4b33      	ldr	r3, [pc, #204]	@ (8011200 <hci_send_req+0x100>)
 8011132:	2201      	movs	r2, #1
 8011134:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	b2d9      	uxtb	r1, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	689a      	ldr	r2, [r3, #8]
 8011140:	8bbb      	ldrh	r3, [r7, #28]
 8011142:	4618      	mov	r0, r3
 8011144:	f000 f890 	bl	8011268 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011148:	e04e      	b.n	80111e8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801114a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801114e:	f002 fb0e 	bl	801376e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011152:	e043      	b.n	80111dc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011154:	f107 030c 	add.w	r3, r7, #12
 8011158:	4619      	mov	r1, r3
 801115a:	482a      	ldr	r0, [pc, #168]	@ (8011204 <hci_send_req+0x104>)
 801115c:	f000 fe11 	bl	8011d82 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	7a5b      	ldrb	r3, [r3, #9]
 8011164:	2b0f      	cmp	r3, #15
 8011166:	d114      	bne.n	8011192 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	330b      	adds	r3, #11
 801116c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	885b      	ldrh	r3, [r3, #2]
 8011172:	b29b      	uxth	r3, r3
 8011174:	8bba      	ldrh	r2, [r7, #28]
 8011176:	429a      	cmp	r2, r3
 8011178:	d104      	bne.n	8011184 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	693a      	ldr	r2, [r7, #16]
 8011180:	7812      	ldrb	r2, [r2, #0]
 8011182:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	785b      	ldrb	r3, [r3, #1]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d027      	beq.n	80111dc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801118c:	2301      	movs	r3, #1
 801118e:	77fb      	strb	r3, [r7, #31]
 8011190:	e024      	b.n	80111dc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	330b      	adds	r3, #11
 8011196:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801119e:	b29b      	uxth	r3, r3
 80111a0:	8bba      	ldrh	r2, [r7, #28]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d114      	bne.n	80111d0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	7a9b      	ldrb	r3, [r3, #10]
 80111aa:	3b03      	subs	r3, #3
 80111ac:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	695a      	ldr	r2, [r3, #20]
 80111b2:	7dfb      	ldrb	r3, [r7, #23]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	bfa8      	it	ge
 80111b8:	461a      	movge	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6918      	ldr	r0, [r3, #16]
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	1cd9      	adds	r1, r3, #3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	695b      	ldr	r3, [r3, #20]
 80111ca:	461a      	mov	r2, r3
 80111cc:	f004 fd5f 	bl	8015c8e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d001      	beq.n	80111dc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80111d8:	2301      	movs	r3, #1
 80111da:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80111dc:	4809      	ldr	r0, [pc, #36]	@ (8011204 <hci_send_req+0x104>)
 80111de:	f000 fd41 	bl	8011c64 <LST_is_empty>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d0b5      	beq.n	8011154 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80111e8:	7ffb      	ldrb	r3, [r7, #31]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0ad      	beq.n	801114a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80111ee:	2001      	movs	r0, #1
 80111f0:	f000 f860 	bl	80112b4 <NotifyCmdStatus>

  return 0;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3720      	adds	r7, #32
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	20001978 	.word	0x20001978
 8011204:	2000196c 	.word	0x2000196c

08011208 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8011210:	480f      	ldr	r0, [pc, #60]	@ (8011250 <TlInit+0x48>)
 8011212:	f000 fd17 	bl	8011c44 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011216:	4a0f      	ldr	r2, [pc, #60]	@ (8011254 <TlInit+0x4c>)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801121c:	480e      	ldr	r0, [pc, #56]	@ (8011258 <TlInit+0x50>)
 801121e:	f000 fd11 	bl	8011c44 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011222:	4b0e      	ldr	r3, [pc, #56]	@ (801125c <TlInit+0x54>)
 8011224:	2201      	movs	r2, #1
 8011226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011228:	4b0d      	ldr	r3, [pc, #52]	@ (8011260 <TlInit+0x58>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00a      	beq.n	8011246 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011234:	4b0b      	ldr	r3, [pc, #44]	@ (8011264 <TlInit+0x5c>)
 8011236:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011238:	4b09      	ldr	r3, [pc, #36]	@ (8011260 <TlInit+0x58>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f107 0208 	add.w	r2, r7, #8
 8011240:	4610      	mov	r0, r2
 8011242:	4798      	blx	r3
  }

  return;
 8011244:	bf00      	nop
 8011246:	bf00      	nop
}
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	2000196c 	.word	0x2000196c
 8011254:	200001c4 	.word	0x200001c4
 8011258:	200001bc 	.word	0x200001bc
 801125c:	200001c8 	.word	0x200001c8
 8011260:	2000194c 	.word	0x2000194c
 8011264:	080112f5 	.word	0x080112f5

08011268 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	4603      	mov	r3, r0
 8011270:	603a      	str	r2, [r7, #0]
 8011272:	80fb      	strh	r3, [r7, #6]
 8011274:	460b      	mov	r3, r1
 8011276:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011278:	4b0c      	ldr	r3, [pc, #48]	@ (80112ac <SendCmd+0x44>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	88fa      	ldrh	r2, [r7, #6]
 801127e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011282:	4b0a      	ldr	r3, [pc, #40]	@ (80112ac <SendCmd+0x44>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	797a      	ldrb	r2, [r7, #5]
 8011288:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801128a:	4b08      	ldr	r3, [pc, #32]	@ (80112ac <SendCmd+0x44>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	330c      	adds	r3, #12
 8011290:	797a      	ldrb	r2, [r7, #5]
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	4618      	mov	r0, r3
 8011296:	f004 fcfa 	bl	8015c8e <memcpy>

  hciContext.io.Send(0,0);
 801129a:	4b05      	ldr	r3, [pc, #20]	@ (80112b0 <SendCmd+0x48>)
 801129c:	691b      	ldr	r3, [r3, #16]
 801129e:	2100      	movs	r1, #0
 80112a0:	2000      	movs	r0, #0
 80112a2:	4798      	blx	r3

  return;
 80112a4:	bf00      	nop
}
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	200001c4 	.word	0x200001c4
 80112b0:	2000194c 	.word	0x2000194c

080112b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80112be:	79fb      	ldrb	r3, [r7, #7]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d108      	bne.n	80112d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80112c4:	4b0a      	ldr	r3, [pc, #40]	@ (80112f0 <NotifyCmdStatus+0x3c>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d00d      	beq.n	80112e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80112cc:	4b08      	ldr	r3, [pc, #32]	@ (80112f0 <NotifyCmdStatus+0x3c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2000      	movs	r0, #0
 80112d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80112d4:	e008      	b.n	80112e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80112d6:	4b06      	ldr	r3, [pc, #24]	@ (80112f0 <NotifyCmdStatus+0x3c>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d004      	beq.n	80112e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80112de:	4b04      	ldr	r3, [pc, #16]	@ (80112f0 <NotifyCmdStatus+0x3c>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2001      	movs	r0, #1
 80112e4:	4798      	blx	r3
  return;
 80112e6:	bf00      	nop
 80112e8:	bf00      	nop
}
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	20001974 	.word	0x20001974

080112f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	7a5b      	ldrb	r3, [r3, #9]
 8011300:	2b0f      	cmp	r3, #15
 8011302:	d003      	beq.n	801130c <TlEvtReceived+0x18>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	7a5b      	ldrb	r3, [r3, #9]
 8011308:	2b0e      	cmp	r3, #14
 801130a:	d107      	bne.n	801131c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	4809      	ldr	r0, [pc, #36]	@ (8011334 <TlEvtReceived+0x40>)
 8011310:	f000 fcf0 	bl	8011cf4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011314:	2000      	movs	r0, #0
 8011316:	f002 fa1f 	bl	8013758 <hci_cmd_resp_release>
 801131a:	e006      	b.n	801132a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	4806      	ldr	r0, [pc, #24]	@ (8011338 <TlEvtReceived+0x44>)
 8011320:	f000 fce8 	bl	8011cf4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011324:	4804      	ldr	r0, [pc, #16]	@ (8011338 <TlEvtReceived+0x44>)
 8011326:	f002 fa0b 	bl	8013740 <hci_notify_asynch_evt>
  }

  return;
 801132a:	bf00      	nop
}
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	2000196c 	.word	0x2000196c
 8011338:	200001bc 	.word	0x200001bc

0801133c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a05      	ldr	r2, [pc, #20]	@ (801135c <hci_register_io_bus+0x20>)
 8011348:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4a04      	ldr	r2, [pc, #16]	@ (8011360 <hci_register_io_bus+0x24>)
 801134e:	611a      	str	r2, [r3, #16]

  return;
 8011350:	bf00      	nop
}
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr
 801135c:	08011655 	.word	0x08011655
 8011360:	080116bd 	.word	0x080116bd

08011364 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4a08      	ldr	r2, [pc, #32]	@ (8011394 <shci_init+0x30>)
 8011374:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011376:	4a08      	ldr	r2, [pc, #32]	@ (8011398 <shci_init+0x34>)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801137c:	4806      	ldr	r0, [pc, #24]	@ (8011398 <shci_init+0x34>)
 801137e:	f000 f915 	bl	80115ac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4618      	mov	r0, r3
 8011388:	f000 f898 	bl	80114bc <TlInit>

  return;
 801138c:	bf00      	nop
}
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	2000199c 	.word	0x2000199c
 8011398:	2000197c 	.word	0x2000197c

0801139c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80113a2:	4822      	ldr	r0, [pc, #136]	@ (801142c <shci_user_evt_proc+0x90>)
 80113a4:	f000 fc5e 	bl	8011c64 <LST_is_empty>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d12b      	bne.n	8011406 <shci_user_evt_proc+0x6a>
 80113ae:	4b20      	ldr	r3, [pc, #128]	@ (8011430 <shci_user_evt_proc+0x94>)
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d027      	beq.n	8011406 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80113b6:	f107 030c 	add.w	r3, r7, #12
 80113ba:	4619      	mov	r1, r3
 80113bc:	481b      	ldr	r0, [pc, #108]	@ (801142c <shci_user_evt_proc+0x90>)
 80113be:	f000 fce0 	bl	8011d82 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80113c2:	4b1c      	ldr	r3, [pc, #112]	@ (8011434 <shci_user_evt_proc+0x98>)
 80113c4:	69db      	ldr	r3, [r3, #28]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00c      	beq.n	80113e4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80113ce:	2301      	movs	r3, #1
 80113d0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80113d2:	4b18      	ldr	r3, [pc, #96]	@ (8011434 <shci_user_evt_proc+0x98>)
 80113d4:	69db      	ldr	r3, [r3, #28]
 80113d6:	1d3a      	adds	r2, r7, #4
 80113d8:	4610      	mov	r0, r2
 80113da:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80113dc:	793a      	ldrb	r2, [r7, #4]
 80113de:	4b14      	ldr	r3, [pc, #80]	@ (8011430 <shci_user_evt_proc+0x94>)
 80113e0:	701a      	strb	r2, [r3, #0]
 80113e2:	e002      	b.n	80113ea <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80113e4:	4b12      	ldr	r3, [pc, #72]	@ (8011430 <shci_user_evt_proc+0x94>)
 80113e6:	2201      	movs	r2, #1
 80113e8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80113ea:	4b11      	ldr	r3, [pc, #68]	@ (8011430 <shci_user_evt_proc+0x94>)
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d004      	beq.n	80113fc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f000 fa71 	bl	80118dc <TL_MM_EvtDone>
 80113fa:	e004      	b.n	8011406 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4619      	mov	r1, r3
 8011400:	480a      	ldr	r0, [pc, #40]	@ (801142c <shci_user_evt_proc+0x90>)
 8011402:	f000 fc51 	bl	8011ca8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011406:	4809      	ldr	r0, [pc, #36]	@ (801142c <shci_user_evt_proc+0x90>)
 8011408:	f000 fc2c 	bl	8011c64 <LST_is_empty>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d107      	bne.n	8011422 <shci_user_evt_proc+0x86>
 8011412:	4b07      	ldr	r3, [pc, #28]	@ (8011430 <shci_user_evt_proc+0x94>)
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d003      	beq.n	8011422 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801141a:	4804      	ldr	r0, [pc, #16]	@ (801142c <shci_user_evt_proc+0x90>)
 801141c:	f7f1 faa5 	bl	800296a <shci_notify_asynch_evt>
  }


  return;
 8011420:	bf00      	nop
 8011422:	bf00      	nop
}
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	200001cc 	.word	0x200001cc
 8011430:	200001dc 	.word	0x200001dc
 8011434:	2000197c 	.word	0x2000197c

08011438 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	60ba      	str	r2, [r7, #8]
 8011440:	607b      	str	r3, [r7, #4]
 8011442:	4603      	mov	r3, r0
 8011444:	81fb      	strh	r3, [r7, #14]
 8011446:	460b      	mov	r3, r1
 8011448:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801144a:	2000      	movs	r0, #0
 801144c:	f000 f868 	bl	8011520 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011450:	4b17      	ldr	r3, [pc, #92]	@ (80114b0 <shci_send+0x78>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	89fa      	ldrh	r2, [r7, #14]
 8011456:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801145a:	4b15      	ldr	r3, [pc, #84]	@ (80114b0 <shci_send+0x78>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	7b7a      	ldrb	r2, [r7, #13]
 8011460:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011462:	4b13      	ldr	r3, [pc, #76]	@ (80114b0 <shci_send+0x78>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	330c      	adds	r3, #12
 8011468:	7b7a      	ldrb	r2, [r7, #13]
 801146a:	68b9      	ldr	r1, [r7, #8]
 801146c:	4618      	mov	r0, r3
 801146e:	f004 fc0e 	bl	8015c8e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011472:	4b10      	ldr	r3, [pc, #64]	@ (80114b4 <shci_send+0x7c>)
 8011474:	2201      	movs	r2, #1
 8011476:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011478:	4b0f      	ldr	r3, [pc, #60]	@ (80114b8 <shci_send+0x80>)
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	2100      	movs	r1, #0
 801147e:	2000      	movs	r0, #0
 8011480:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011482:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011486:	f7f1 fa87 	bl	8002998 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f103 0008 	add.w	r0, r3, #8
 8011490:	4b07      	ldr	r3, [pc, #28]	@ (80114b0 <shci_send+0x78>)
 8011492:	6819      	ldr	r1, [r3, #0]
 8011494:	4b06      	ldr	r3, [pc, #24]	@ (80114b0 <shci_send+0x78>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	789b      	ldrb	r3, [r3, #2]
 801149a:	3303      	adds	r3, #3
 801149c:	461a      	mov	r2, r3
 801149e:	f004 fbf6 	bl	8015c8e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80114a2:	2001      	movs	r0, #1
 80114a4:	f000 f83c 	bl	8011520 <Cmd_SetStatus>

  return;
 80114a8:	bf00      	nop
}
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	200001d8 	.word	0x200001d8
 80114b4:	200019a0 	.word	0x200019a0
 80114b8:	2000197c 	.word	0x2000197c

080114bc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b086      	sub	sp, #24
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80114c4:	4a10      	ldr	r2, [pc, #64]	@ (8011508 <TlInit+0x4c>)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80114ca:	4810      	ldr	r0, [pc, #64]	@ (801150c <TlInit+0x50>)
 80114cc:	f000 fbba 	bl	8011c44 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80114d0:	2001      	movs	r0, #1
 80114d2:	f000 f825 	bl	8011520 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80114d6:	4b0e      	ldr	r3, [pc, #56]	@ (8011510 <TlInit+0x54>)
 80114d8:	2201      	movs	r2, #1
 80114da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80114dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011514 <TlInit+0x58>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00c      	beq.n	80114fe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80114e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011518 <TlInit+0x5c>)
 80114ea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80114ec:	4b0b      	ldr	r3, [pc, #44]	@ (801151c <TlInit+0x60>)
 80114ee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80114f0:	4b08      	ldr	r3, [pc, #32]	@ (8011514 <TlInit+0x58>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f107 020c 	add.w	r2, r7, #12
 80114f8:	4610      	mov	r0, r2
 80114fa:	4798      	blx	r3
  }

  return;
 80114fc:	bf00      	nop
 80114fe:	bf00      	nop
}
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	200001d8 	.word	0x200001d8
 801150c:	200001cc 	.word	0x200001cc
 8011510:	200001dc 	.word	0x200001dc
 8011514:	2000197c 	.word	0x2000197c
 8011518:	08011571 	.word	0x08011571
 801151c:	08011589 	.word	0x08011589

08011520 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d10b      	bne.n	8011548 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011530:	4b0d      	ldr	r3, [pc, #52]	@ (8011568 <Cmd_SetStatus+0x48>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d003      	beq.n	8011540 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011538:	4b0b      	ldr	r3, [pc, #44]	@ (8011568 <Cmd_SetStatus+0x48>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2000      	movs	r0, #0
 801153e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011540:	4b0a      	ldr	r3, [pc, #40]	@ (801156c <Cmd_SetStatus+0x4c>)
 8011542:	2200      	movs	r2, #0
 8011544:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011546:	e00b      	b.n	8011560 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011548:	4b08      	ldr	r3, [pc, #32]	@ (801156c <Cmd_SetStatus+0x4c>)
 801154a:	2201      	movs	r2, #1
 801154c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801154e:	4b06      	ldr	r3, [pc, #24]	@ (8011568 <Cmd_SetStatus+0x48>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d004      	beq.n	8011560 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011556:	4b04      	ldr	r3, [pc, #16]	@ (8011568 <Cmd_SetStatus+0x48>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2001      	movs	r0, #1
 801155c:	4798      	blx	r3
  return;
 801155e:	bf00      	nop
 8011560:	bf00      	nop
}
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	2000199c 	.word	0x2000199c
 801156c:	200001d4 	.word	0x200001d4

08011570 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011578:	2000      	movs	r0, #0
 801157a:	f7f1 fa02 	bl	8002982 <shci_cmd_resp_release>

  return;
 801157e:	bf00      	nop
}
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
	...

08011588 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011590:	6879      	ldr	r1, [r7, #4]
 8011592:	4805      	ldr	r0, [pc, #20]	@ (80115a8 <TlUserEvtReceived+0x20>)
 8011594:	f000 fbae 	bl	8011cf4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011598:	4803      	ldr	r0, [pc, #12]	@ (80115a8 <TlUserEvtReceived+0x20>)
 801159a:	f7f1 f9e6 	bl	800296a <shci_notify_asynch_evt>

  return;
 801159e:	bf00      	nop
}
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	200001cc 	.word	0x200001cc

080115ac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a05      	ldr	r2, [pc, #20]	@ (80115cc <shci_register_io_bus+0x20>)
 80115b8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4a04      	ldr	r2, [pc, #16]	@ (80115d0 <shci_register_io_bus+0x24>)
 80115be:	611a      	str	r2, [r3, #16]

  return;
 80115c0:	bf00      	nop
}
 80115c2:	370c      	adds	r7, #12
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr
 80115cc:	08011769 	.word	0x08011769
 80115d0:	080117bd 	.word	0x080117bd

080115d4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80115d8:	f002 fff0 	bl	80145bc <HW_IPCC_Enable>

  return;
 80115dc:	bf00      	nop
}
 80115de:	bd80      	pop	{r7, pc}

080115e0 <TL_Init>:


void TL_Init( void )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80115e4:	4b10      	ldr	r3, [pc, #64]	@ (8011628 <TL_Init+0x48>)
 80115e6:	4a11      	ldr	r2, [pc, #68]	@ (801162c <TL_Init+0x4c>)
 80115e8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80115ea:	4b0f      	ldr	r3, [pc, #60]	@ (8011628 <TL_Init+0x48>)
 80115ec:	4a10      	ldr	r2, [pc, #64]	@ (8011630 <TL_Init+0x50>)
 80115ee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80115f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011628 <TL_Init+0x48>)
 80115f2:	4a10      	ldr	r2, [pc, #64]	@ (8011634 <TL_Init+0x54>)
 80115f4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80115f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011628 <TL_Init+0x48>)
 80115f8:	4a0f      	ldr	r2, [pc, #60]	@ (8011638 <TL_Init+0x58>)
 80115fa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80115fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011628 <TL_Init+0x48>)
 80115fe:	4a0f      	ldr	r2, [pc, #60]	@ (801163c <TL_Init+0x5c>)
 8011600:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8011602:	4b09      	ldr	r3, [pc, #36]	@ (8011628 <TL_Init+0x48>)
 8011604:	4a0e      	ldr	r2, [pc, #56]	@ (8011640 <TL_Init+0x60>)
 8011606:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011608:	4b07      	ldr	r3, [pc, #28]	@ (8011628 <TL_Init+0x48>)
 801160a:	4a0e      	ldr	r2, [pc, #56]	@ (8011644 <TL_Init+0x64>)
 801160c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801160e:	4b06      	ldr	r3, [pc, #24]	@ (8011628 <TL_Init+0x48>)
 8011610:	4a0d      	ldr	r2, [pc, #52]	@ (8011648 <TL_Init+0x68>)
 8011612:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011614:	4b04      	ldr	r3, [pc, #16]	@ (8011628 <TL_Init+0x48>)
 8011616:	4a0d      	ldr	r2, [pc, #52]	@ (801164c <TL_Init+0x6c>)
 8011618:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801161a:	4b03      	ldr	r3, [pc, #12]	@ (8011628 <TL_Init+0x48>)
 801161c:	4a0c      	ldr	r2, [pc, #48]	@ (8011650 <TL_Init+0x70>)
 801161e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8011620:	f002 ffe0 	bl	80145e4 <HW_IPCC_Init>

  return;
 8011624:	bf00      	nop
}
 8011626:	bd80      	pop	{r7, pc}
 8011628:	20030000 	.word	0x20030000
 801162c:	20030028 	.word	0x20030028
 8011630:	20030048 	.word	0x20030048
 8011634:	20030058 	.word	0x20030058
 8011638:	20030068 	.word	0x20030068
 801163c:	20030070 	.word	0x20030070
 8011640:	20030078 	.word	0x20030078
 8011644:	20030080 	.word	0x20030080
 8011648:	2003009c 	.word	0x2003009c
 801164c:	200300a0 	.word	0x200300a0
 8011650:	200300ac 	.word	0x200300ac

08011654 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8011660:	4811      	ldr	r0, [pc, #68]	@ (80116a8 <TL_BLE_Init+0x54>)
 8011662:	f000 faef 	bl	8011c44 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011666:	4b11      	ldr	r3, [pc, #68]	@ (80116ac <TL_BLE_Init+0x58>)
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	689a      	ldr	r2, [r3, #8]
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	68da      	ldr	r2, [r3, #12]
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	4a0c      	ldr	r2, [pc, #48]	@ (80116b0 <TL_BLE_Init+0x5c>)
 8011680:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	4a08      	ldr	r2, [pc, #32]	@ (80116a8 <TL_BLE_Init+0x54>)
 8011686:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011688:	f002 ffc2 	bl	8014610 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a08      	ldr	r2, [pc, #32]	@ (80116b4 <TL_BLE_Init+0x60>)
 8011692:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	4a07      	ldr	r2, [pc, #28]	@ (80116b8 <TL_BLE_Init+0x64>)
 801169a:	6013      	str	r3, [r2, #0]

  return 0;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	200300c8 	.word	0x200300c8
 80116ac:	20030000 	.word	0x20030000
 80116b0:	20031f48 	.word	0x20031f48
 80116b4:	200019ac 	.word	0x200019ac
 80116b8:	200019b0 	.word	0x200019b0

080116bc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80116c8:	4b09      	ldr	r3, [pc, #36]	@ (80116f0 <TL_BLE_SendCmd+0x34>)
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2201      	movs	r2, #1
 80116d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80116d2:	4b07      	ldr	r3, [pc, #28]	@ (80116f0 <TL_BLE_SendCmd+0x34>)
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4619      	mov	r1, r3
 80116da:	2001      	movs	r0, #1
 80116dc:	f000 f96c 	bl	80119b8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80116e0:	f002 ffa0 	bl	8014624 <HW_IPCC_BLE_SendCmd>

  return 0;
 80116e4:	2300      	movs	r3, #0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	20030000 	.word	0x20030000

080116f4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80116fa:	e01c      	b.n	8011736 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80116fc:	1d3b      	adds	r3, r7, #4
 80116fe:	4619      	mov	r1, r3
 8011700:	4812      	ldr	r0, [pc, #72]	@ (801174c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011702:	f000 fb3e 	bl	8011d82 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	7a5b      	ldrb	r3, [r3, #9]
 801170a:	2b0f      	cmp	r3, #15
 801170c:	d003      	beq.n	8011716 <HW_IPCC_BLE_RxEvtNot+0x22>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	7a5b      	ldrb	r3, [r3, #9]
 8011712:	2b0e      	cmp	r3, #14
 8011714:	d105      	bne.n	8011722 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	4619      	mov	r1, r3
 801171a:	2002      	movs	r0, #2
 801171c:	f000 f94c 	bl	80119b8 <OutputDbgTrace>
 8011720:	e004      	b.n	801172c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4619      	mov	r1, r3
 8011726:	2003      	movs	r0, #3
 8011728:	f000 f946 	bl	80119b8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801172c:	4b08      	ldr	r3, [pc, #32]	@ (8011750 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	4610      	mov	r0, r2
 8011734:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8011736:	4805      	ldr	r0, [pc, #20]	@ (801174c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011738:	f000 fa94 	bl	8011c64 <LST_is_empty>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d0dc      	beq.n	80116fc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8011742:	bf00      	nop
}
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	200300c8 	.word	0x200300c8
 8011750:	200019ac 	.word	0x200019ac

08011754 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011758:	4b02      	ldr	r3, [pc, #8]	@ (8011764 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4798      	blx	r3

  return;
 801175e:	bf00      	nop
}
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	200019b0 	.word	0x200019b0

08011768 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011774:	480d      	ldr	r0, [pc, #52]	@ (80117ac <TL_SYS_Init+0x44>)
 8011776:	f000 fa65 	bl	8011c44 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801177a:	4b0d      	ldr	r3, [pc, #52]	@ (80117b0 <TL_SYS_Init+0x48>)
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	689a      	ldr	r2, [r3, #8]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	4a08      	ldr	r2, [pc, #32]	@ (80117ac <TL_SYS_Init+0x44>)
 801178c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801178e:	f002 ff6b 	bl	8014668 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a07      	ldr	r2, [pc, #28]	@ (80117b4 <TL_SYS_Init+0x4c>)
 8011798:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	4a06      	ldr	r2, [pc, #24]	@ (80117b8 <TL_SYS_Init+0x50>)
 80117a0:	6013      	str	r3, [r2, #0]

  return 0;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3710      	adds	r7, #16
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	200300d0 	.word	0x200300d0
 80117b0:	20030000 	.word	0x20030000
 80117b4:	200019b4 	.word	0x200019b4
 80117b8:	200019b8 	.word	0x200019b8

080117bc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	460b      	mov	r3, r1
 80117c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80117c8:	4b09      	ldr	r3, [pc, #36]	@ (80117f0 <TL_SYS_SendCmd+0x34>)
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2210      	movs	r2, #16
 80117d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80117d2:	4b07      	ldr	r3, [pc, #28]	@ (80117f0 <TL_SYS_SendCmd+0x34>)
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4619      	mov	r1, r3
 80117da:	2004      	movs	r0, #4
 80117dc:	f000 f8ec 	bl	80119b8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80117e0:	f002 ff4c 	bl	801467c <HW_IPCC_SYS_SendCmd>

  return 0;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3708      	adds	r7, #8
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	bf00      	nop
 80117f0:	20030000 	.word	0x20030000

080117f4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80117f8:	4b07      	ldr	r3, [pc, #28]	@ (8011818 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	4619      	mov	r1, r3
 8011800:	2005      	movs	r0, #5
 8011802:	f000 f8d9 	bl	80119b8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011806:	4b05      	ldr	r3, [pc, #20]	@ (801181c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4a03      	ldr	r2, [pc, #12]	@ (8011818 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801180c:	68d2      	ldr	r2, [r2, #12]
 801180e:	6812      	ldr	r2, [r2, #0]
 8011810:	4610      	mov	r0, r2
 8011812:	4798      	blx	r3

  return;
 8011814:	bf00      	nop
}
 8011816:	bd80      	pop	{r7, pc}
 8011818:	20030000 	.word	0x20030000
 801181c:	200019b4 	.word	0x200019b4

08011820 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011826:	e00e      	b.n	8011846 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8011828:	1d3b      	adds	r3, r7, #4
 801182a:	4619      	mov	r1, r3
 801182c:	480b      	ldr	r0, [pc, #44]	@ (801185c <HW_IPCC_SYS_EvtNot+0x3c>)
 801182e:	f000 faa8 	bl	8011d82 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4619      	mov	r1, r3
 8011836:	2006      	movs	r0, #6
 8011838:	f000 f8be 	bl	80119b8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801183c:	4b08      	ldr	r3, [pc, #32]	@ (8011860 <HW_IPCC_SYS_EvtNot+0x40>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	4610      	mov	r0, r2
 8011844:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011846:	4805      	ldr	r0, [pc, #20]	@ (801185c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011848:	f000 fa0c 	bl	8011c64 <LST_is_empty>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0ea      	beq.n	8011828 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8011852:	bf00      	nop
}
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	200300d0 	.word	0x200300d0
 8011860:	200019b8 	.word	0x200019b8

08011864 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801186c:	4817      	ldr	r0, [pc, #92]	@ (80118cc <TL_MM_Init+0x68>)
 801186e:	f000 f9e9 	bl	8011c44 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8011872:	4817      	ldr	r0, [pc, #92]	@ (80118d0 <TL_MM_Init+0x6c>)
 8011874:	f000 f9e6 	bl	8011c44 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011878:	4b16      	ldr	r3, [pc, #88]	@ (80118d4 <TL_MM_Init+0x70>)
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	4a16      	ldr	r2, [pc, #88]	@ (80118d8 <TL_MM_Init+0x74>)
 801187e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8011880:	4b15      	ldr	r3, [pc, #84]	@ (80118d8 <TL_MM_Init+0x74>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	6892      	ldr	r2, [r2, #8]
 8011888:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801188a:	4b13      	ldr	r3, [pc, #76]	@ (80118d8 <TL_MM_Init+0x74>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	68d2      	ldr	r2, [r2, #12]
 8011892:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011894:	4b10      	ldr	r3, [pc, #64]	@ (80118d8 <TL_MM_Init+0x74>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a0c      	ldr	r2, [pc, #48]	@ (80118cc <TL_MM_Init+0x68>)
 801189a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801189c:	4b0e      	ldr	r3, [pc, #56]	@ (80118d8 <TL_MM_Init+0x74>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	6812      	ldr	r2, [r2, #0]
 80118a4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80118a6:	4b0c      	ldr	r3, [pc, #48]	@ (80118d8 <TL_MM_Init+0x74>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	6852      	ldr	r2, [r2, #4]
 80118ae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80118b0:	4b09      	ldr	r3, [pc, #36]	@ (80118d8 <TL_MM_Init+0x74>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	6912      	ldr	r2, [r2, #16]
 80118b8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80118ba:	4b07      	ldr	r3, [pc, #28]	@ (80118d8 <TL_MM_Init+0x74>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	6952      	ldr	r2, [r2, #20]
 80118c2:	619a      	str	r2, [r3, #24]

  return;
 80118c4:	bf00      	nop
}
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	200300b8 	.word	0x200300b8
 80118d0:	200019a4 	.word	0x200019a4
 80118d4:	20030000 	.word	0x20030000
 80118d8:	200019bc 	.word	0x200019bc

080118dc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80118e4:	6879      	ldr	r1, [r7, #4]
 80118e6:	4807      	ldr	r0, [pc, #28]	@ (8011904 <TL_MM_EvtDone+0x28>)
 80118e8:	f000 fa04 	bl	8011cf4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80118ec:	6879      	ldr	r1, [r7, #4]
 80118ee:	2000      	movs	r0, #0
 80118f0:	f000 f862 	bl	80119b8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80118f4:	4804      	ldr	r0, [pc, #16]	@ (8011908 <TL_MM_EvtDone+0x2c>)
 80118f6:	f002 fee7 	bl	80146c8 <HW_IPCC_MM_SendFreeBuf>

  return;
 80118fa:	bf00      	nop
}
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	200019a4 	.word	0x200019a4
 8011908:	0801190d 	.word	0x0801190d

0801190c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011912:	e00c      	b.n	801192e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011914:	1d3b      	adds	r3, r7, #4
 8011916:	4619      	mov	r1, r3
 8011918:	480a      	ldr	r0, [pc, #40]	@ (8011944 <SendFreeBuf+0x38>)
 801191a:	f000 fa32 	bl	8011d82 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801191e:	4b0a      	ldr	r3, [pc, #40]	@ (8011948 <SendFreeBuf+0x3c>)
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	4611      	mov	r1, r2
 8011928:	4618      	mov	r0, r3
 801192a:	f000 f9e3 	bl	8011cf4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801192e:	4805      	ldr	r0, [pc, #20]	@ (8011944 <SendFreeBuf+0x38>)
 8011930:	f000 f998 	bl	8011c64 <LST_is_empty>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d0ec      	beq.n	8011914 <SendFreeBuf+0x8>
  }

  return;
 801193a:	bf00      	nop
}
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	200019a4 	.word	0x200019a4
 8011948:	20030000 	.word	0x20030000

0801194c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011950:	4805      	ldr	r0, [pc, #20]	@ (8011968 <TL_TRACES_Init+0x1c>)
 8011952:	f000 f977 	bl	8011c44 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011956:	4b05      	ldr	r3, [pc, #20]	@ (801196c <TL_TRACES_Init+0x20>)
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	4a03      	ldr	r2, [pc, #12]	@ (8011968 <TL_TRACES_Init+0x1c>)
 801195c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801195e:	f002 fee9 	bl	8014734 <HW_IPCC_TRACES_Init>

  return;
 8011962:	bf00      	nop
}
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	200300c0 	.word	0x200300c0
 801196c:	20030000 	.word	0x20030000

08011970 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011976:	e008      	b.n	801198a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011978:	1d3b      	adds	r3, r7, #4
 801197a:	4619      	mov	r1, r3
 801197c:	4808      	ldr	r0, [pc, #32]	@ (80119a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801197e:	f000 fa00 	bl	8011d82 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	f000 f80d 	bl	80119a4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801198a:	4805      	ldr	r0, [pc, #20]	@ (80119a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801198c:	f000 f96a 	bl	8011c64 <LST_is_empty>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0f0      	beq.n	8011978 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011996:	bf00      	nop
}
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	200300c0 	.word	0x200300c0

080119a4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80119a4:	b480      	push	{r7}
 80119a6:	b083      	sub	sp, #12
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	4603      	mov	r3, r0
 80119c0:	6039      	str	r1, [r7, #0]
 80119c2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80119c4:	79fb      	ldrb	r3, [r7, #7]
 80119c6:	2b06      	cmp	r3, #6
 80119c8:	d845      	bhi.n	8011a56 <OutputDbgTrace+0x9e>
 80119ca:	a201      	add	r2, pc, #4	@ (adr r2, 80119d0 <OutputDbgTrace+0x18>)
 80119cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d0:	080119ed 	.word	0x080119ed
 80119d4:	08011a11 	.word	0x08011a11
 80119d8:	08011a17 	.word	0x08011a17
 80119dc:	08011a2b 	.word	0x08011a2b
 80119e0:	08011a37 	.word	0x08011a37
 80119e4:	08011a3d 	.word	0x08011a3d
 80119e8:	08011a4b 	.word	0x08011a4b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	7a5b      	ldrb	r3, [r3, #9]
 80119f4:	2bff      	cmp	r3, #255	@ 0xff
 80119f6:	d005      	beq.n	8011a04 <OutputDbgTrace+0x4c>
 80119f8:	2bff      	cmp	r3, #255	@ 0xff
 80119fa:	dc05      	bgt.n	8011a08 <OutputDbgTrace+0x50>
 80119fc:	2b0e      	cmp	r3, #14
 80119fe:	d005      	beq.n	8011a0c <OutputDbgTrace+0x54>
 8011a00:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011a02:	e001      	b.n	8011a08 <OutputDbgTrace+0x50>
          break;
 8011a04:	bf00      	nop
 8011a06:	e027      	b.n	8011a58 <OutputDbgTrace+0xa0>
          break;
 8011a08:	bf00      	nop
 8011a0a:	e025      	b.n	8011a58 <OutputDbgTrace+0xa0>
          break;
 8011a0c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011a0e:	e023      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011a14:	e020      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	7a5b      	ldrb	r3, [r3, #9]
 8011a1e:	2b0e      	cmp	r3, #14
 8011a20:	d001      	beq.n	8011a26 <OutputDbgTrace+0x6e>
 8011a22:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011a24:	e000      	b.n	8011a28 <OutputDbgTrace+0x70>
          break;
 8011a26:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011a28:	e016      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	7a5b      	ldrb	r3, [r3, #9]
 8011a32:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011a34:	e010      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011a3a:	e00d      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	785b      	ldrb	r3, [r3, #1]
 8011a44:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8011a46:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011a48:	e006      	b.n	8011a58 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	7a5b      	ldrb	r3, [r3, #9]
 8011a52:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011a54:	e000      	b.n	8011a58 <OutputDbgTrace+0xa0>

    default:
      break;
 8011a56:	bf00      	nop
  }

  return;
 8011a58:	bf00      	nop
}
 8011a5a:	371c      	adds	r7, #28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8011a70:	215c      	movs	r1, #92	@ 0x5c
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f004 f882 	bl	8015b7c <strrchr>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d007      	beq.n	8011a8e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8011a7e:	215c      	movs	r1, #92	@ 0x5c
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f004 f87b 	bl	8015b7c <strrchr>
 8011a86:	4603      	mov	r3, r0
 8011a88:	3301      	adds	r3, #1
 8011a8a:	60fb      	str	r3, [r7, #12]
 8011a8c:	e00d      	b.n	8011aaa <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011a8e:	212f      	movs	r1, #47	@ 0x2f
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f004 f873 	bl	8015b7c <strrchr>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d006      	beq.n	8011aaa <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011a9c:	212f      	movs	r1, #47	@ 0x2f
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f004 f86c 	bl	8015b7c <strrchr>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3710      	adds	r7, #16
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aba:	f3ef 8310 	mrs	r3, PRIMASK
 8011abe:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011ac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ac4:	b672      	cpsid	i
}
 8011ac6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011ac8:	1cbb      	adds	r3, r7, #2
 8011aca:	4619      	mov	r1, r3
 8011acc:	4812      	ldr	r0, [pc, #72]	@ (8011b18 <DbgTrace_TxCpltCallback+0x64>)
 8011ace:	f000 fb9d 	bl	801220c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011ad2:	1cbb      	adds	r3, r7, #2
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	4810      	ldr	r0, [pc, #64]	@ (8011b18 <DbgTrace_TxCpltCallback+0x64>)
 8011ad8:	f000 fc87 	bl	80123ea <CircularQueue_Sense>
 8011adc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d00c      	beq.n	8011afe <DbgTrace_TxCpltCallback+0x4a>
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	f383 8810 	msr	PRIMASK, r3
}
 8011aee:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011af0:	887b      	ldrh	r3, [r7, #2]
 8011af2:	4a0a      	ldr	r2, [pc, #40]	@ (8011b1c <DbgTrace_TxCpltCallback+0x68>)
 8011af4:	4619      	mov	r1, r3
 8011af6:	6938      	ldr	r0, [r7, #16]
 8011af8:	f7f0 fa34 	bl	8001f64 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011afc:	e008      	b.n	8011b10 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011afe:	4b08      	ldr	r3, [pc, #32]	@ (8011b20 <DbgTrace_TxCpltCallback+0x6c>)
 8011b00:	2201      	movs	r2, #1
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f383 8810 	msr	PRIMASK, r3
}
 8011b0e:	bf00      	nop
}
 8011b10:	bf00      	nop
 8011b12:	3718      	adds	r7, #24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	200019c0 	.word	0x200019c0
 8011b1c:	08011ab5 	.word	0x08011ab5
 8011b20:	200000a6 	.word	0x200000a6

08011b24 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	68b9      	ldr	r1, [r7, #8]
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f805 	bl	8011b44 <DbgTraceWrite>
 8011b3a:	4603      	mov	r3, r0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	@ 0x28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8011b50:	2300      	movs	r3, #0
 8011b52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b54:	f3ef 8310 	mrs	r3, PRIMASK
 8011b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8011b5a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8011b5c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	d102      	bne.n	8011b6c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b6a:	e037      	b.n	8011bdc <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d006      	beq.n	8011b80 <DbgTraceWrite+0x3c>
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d003      	beq.n	8011b80 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8011b78:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b7e:	e02d      	b.n	8011bdc <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d02a      	beq.n	8011bdc <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8011b8a:	b672      	cpsid	i
}
 8011b8c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	2301      	movs	r3, #1
 8011b94:	68b9      	ldr	r1, [r7, #8]
 8011b96:	4814      	ldr	r0, [pc, #80]	@ (8011be8 <DbgTraceWrite+0xa4>)
 8011b98:	f000 f912 	bl	8011dc0 <CircularQueue_Add>
 8011b9c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d015      	beq.n	8011bd0 <DbgTraceWrite+0x8c>
 8011ba4:	4b11      	ldr	r3, [pc, #68]	@ (8011bec <DbgTraceWrite+0xa8>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d010      	beq.n	8011bd0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8011bae:	4b0f      	ldr	r3, [pc, #60]	@ (8011bec <DbgTraceWrite+0xa8>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	701a      	strb	r2, [r3, #0]
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	f383 8810 	msr	PRIMASK, r3
}
 8011bbe:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8011bf0 <DbgTraceWrite+0xac>)
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	69f8      	ldr	r0, [r7, #28]
 8011bca:	f7f0 f9cb 	bl	8001f64 <DbgOutputTraces>
 8011bce:	e005      	b.n	8011bdc <DbgTraceWrite+0x98>
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	f383 8810 	msr	PRIMASK, r3
}
 8011bda:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3728      	adds	r7, #40	@ 0x28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	200019c0 	.word	0x200019c0
 8011bec:	200000a6 	.word	0x200000a6
 8011bf0:	08011ab5 	.word	0x08011ab5

08011bf4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8011c3c <OTP_Read+0x48>)
 8011c00:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011c02:	e002      	b.n	8011c0a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	3b08      	subs	r3, #8
 8011c08:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	3307      	adds	r3, #7
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	79fa      	ldrb	r2, [r7, #7]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d003      	beq.n	8011c1e <OTP_Read+0x2a>
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	4a09      	ldr	r2, [pc, #36]	@ (8011c40 <OTP_Read+0x4c>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d1f2      	bne.n	8011c04 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	3307      	adds	r3, #7
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	79fa      	ldrb	r2, [r7, #7]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d001      	beq.n	8011c2e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3714      	adds	r7, #20
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	1fff73f8 	.word	0x1fff73f8
 8011c40:	1fff7000 	.word	0x1fff7000

08011c44 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	605a      	str	r2, [r3, #4]
}
 8011c58:	bf00      	nop
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b087      	sub	sp, #28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8011c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c76:	b672      	cpsid	i
}
 8011c78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d102      	bne.n	8011c8a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011c84:	2301      	movs	r3, #1
 8011c86:	75fb      	strb	r3, [r7, #23]
 8011c88:	e001      	b.n	8011c8e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	75fb      	strb	r3, [r7, #23]
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	f383 8810 	msr	PRIMASK, r3
}
 8011c98:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	371c      	adds	r7, #28
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b087      	sub	sp, #28
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8011cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011cbc:	b672      	cpsid	i
}
 8011cbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	683a      	ldr	r2, [r7, #0]
 8011cd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	605a      	str	r2, [r3, #4]
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	f383 8810 	msr	PRIMASK, r3
}
 8011ce6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011ce8:	bf00      	nop
 8011cea:	371c      	adds	r7, #28
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b087      	sub	sp, #28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8011d02:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d08:	b672      	cpsid	i
}
 8011d0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	685a      	ldr	r2, [r3, #4]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	683a      	ldr	r2, [r7, #0]
 8011d26:	601a      	str	r2, [r3, #0]
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	f383 8810 	msr	PRIMASK, r3
}
 8011d32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011d34:	bf00      	nop
 8011d36:	371c      	adds	r7, #28
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d48:	f3ef 8310 	mrs	r3, PRIMASK
 8011d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011d50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d52:	b672      	cpsid	i
}
 8011d54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	6812      	ldr	r2, [r2, #0]
 8011d5e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	6852      	ldr	r2, [r2, #4]
 8011d68:	605a      	str	r2, [r3, #4]
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	f383 8810 	msr	PRIMASK, r3
}
 8011d74:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011d76:	bf00      	nop
 8011d78:	371c      	adds	r7, #28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b086      	sub	sp, #24
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8011d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d92:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011d94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d96:	b672      	cpsid	i
}
 8011d98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7ff ffca 	bl	8011d40 <LST_remove_node>
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	f383 8810 	msr	PRIMASK, r3
}
 8011db6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011db8:	bf00      	nop
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b08e      	sub	sp, #56	@ 0x38
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	603b      	str	r3, [r7, #0]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8011dd8:	2300      	movs	r3, #0
 8011dda:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8011ddc:	2300      	movs	r3, #0
 8011dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011de0:	2300      	movs	r3, #0
 8011de2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8011de4:	2300      	movs	r3, #0
 8011de6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8011de8:	2300      	movs	r3, #0
 8011dea:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	891b      	ldrh	r3, [r3, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d101      	bne.n	8011df8 <CircularQueue_Add+0x38>
 8011df4:	2302      	movs	r3, #2
 8011df6:	e000      	b.n	8011dfa <CircularQueue_Add+0x3a>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d029      	beq.n	8011e58 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	891b      	ldrh	r3, [r3, #8]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d122      	bne.n	8011e52 <CircularQueue_Add+0x92>
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	691b      	ldr	r3, [r3, #16]
 8011e14:	4413      	add	r3, r2
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	1c59      	adds	r1, r3, #1
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	4299      	cmp	r1, r3
 8011e2a:	d306      	bcc.n	8011e3a <CircularQueue_Add+0x7a>
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	6919      	ldr	r1, [r3, #16]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	1acb      	subs	r3, r1, r3
 8011e36:	3301      	adds	r3, #1
 8011e38:	e002      	b.n	8011e40 <CircularQueue_Add+0x80>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	021b      	lsls	r3, r3, #8
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	4403      	add	r3, r0
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	3302      	adds	r3, #2
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	e001      	b.n	8011e56 <CircularQueue_Add+0x96>
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	891b      	ldrh	r3, [r3, #8]
 8011e56:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	891b      	ldrh	r3, [r3, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d002      	beq.n	8011e66 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	891b      	ldrh	r3, [r3, #8]
 8011e64:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	691a      	ldr	r2, [r3, #16]
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d307      	bcc.n	8011e82 <CircularQueue_Add+0xc2>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	685a      	ldr	r2, [r3, #4]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6919      	ldr	r1, [r3, #16]
 8011e7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011e7c:	440b      	add	r3, r1
 8011e7e:	1ad3      	subs	r3, r2, r3
 8011e80:	e000      	b.n	8011e84 <CircularQueue_Add+0xc4>
 8011e82:	2300      	movs	r3, #0
 8011e84:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8011e86:	88fa      	ldrh	r2, [r7, #6]
 8011e88:	7ffb      	ldrb	r3, [r7, #31]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	fb02 f303 	mul.w	r3, r2, r3
 8011e94:	69ba      	ldr	r2, [r7, #24]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d80b      	bhi.n	8011eb2 <CircularQueue_Add+0xf2>
 8011e9a:	88fa      	ldrh	r2, [r7, #6]
 8011e9c:	7ffb      	ldrb	r3, [r7, #31]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ea8:	fb01 f202 	mul.w	r2, r1, r2
 8011eac:	1a9b      	subs	r3, r3, r2
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	e000      	b.n	8011eb4 <CircularQueue_Add+0xf4>
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8011eb6:	7dfa      	ldrb	r2, [r7, #23]
 8011eb8:	7ffb      	ldrb	r3, [r7, #31]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	bf8c      	ite	hi
 8011ebe:	2301      	movhi	r3, #1
 8011ec0:	2300      	movls	r3, #0
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8011ec6:	7fbb      	ldrb	r3, [r7, #30]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d008      	beq.n	8011ede <CircularQueue_Add+0x11e>
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	7f1b      	ldrb	r3, [r3, #28]
 8011ed0:	f003 0301 	and.w	r3, r3, #1
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d002      	beq.n	8011ede <CircularQueue_Add+0x11e>
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	e000      	b.n	8011ee0 <CircularQueue_Add+0x120>
 8011ede:	8bbb      	ldrh	r3, [r7, #28]
 8011ee0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8011ee2:	7fbb      	ldrb	r3, [r7, #30]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d008      	beq.n	8011efa <CircularQueue_Add+0x13a>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	7f1b      	ldrb	r3, [r3, #28]
 8011eec:	f003 0302 	and.w	r3, r3, #2
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d002      	beq.n	8011efa <CircularQueue_Add+0x13a>
 8011ef4:	7ffb      	ldrb	r3, [r7, #31]
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	e000      	b.n	8011efc <CircularQueue_Add+0x13c>
 8011efa:	8bbb      	ldrh	r3, [r7, #28]
 8011efc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8011efe:	88fb      	ldrh	r3, [r7, #6]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f000 817e 	beq.w	8012202 <CircularQueue_Add+0x442>
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	695a      	ldr	r2, [r3, #20]
 8011f0a:	88f9      	ldrh	r1, [r7, #6]
 8011f0c:	7ffb      	ldrb	r3, [r7, #31]
 8011f0e:	440b      	add	r3, r1
 8011f10:	4619      	mov	r1, r3
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	fb01 f303 	mul.w	r3, r1, r3
 8011f18:	441a      	add	r2, r3
 8011f1a:	8bbb      	ldrh	r3, [r7, #28]
 8011f1c:	441a      	add	r2, r3
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	f200 816d 	bhi.w	8012202 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8011f28:	2300      	movs	r3, #0
 8011f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f2c:	e14a      	b.n	80121c4 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	691a      	ldr	r2, [r3, #16]
 8011f32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f34:	441a      	add	r2, r3
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d307      	bcc.n	8011f4e <CircularQueue_Add+0x18e>
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	691a      	ldr	r2, [r3, #16]
 8011f42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f44:	441a      	add	r2, r3
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	e003      	b.n	8011f56 <CircularQueue_Add+0x196>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	691a      	ldr	r2, [r3, #16]
 8011f52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f54:	4413      	add	r3, r2
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	891b      	ldrh	r3, [r3, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d130      	bne.n	8011fca <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f6e:	1c59      	adds	r1, r3, #1
 8011f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8011f72:	4413      	add	r3, r2
 8011f74:	88fa      	ldrh	r2, [r7, #6]
 8011f76:	b2d2      	uxtb	r2, r2
 8011f78:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d304      	bcc.n	8011f8e <CircularQueue_Add+0x1ce>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	e000      	b.n	8011f90 <CircularQueue_Add+0x1d0>
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f90:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8011f92:	88fb      	ldrh	r3, [r7, #6]
 8011f94:	0a1b      	lsrs	r3, r3, #8
 8011f96:	b298      	uxth	r0, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f9e:	1c59      	adds	r1, r3, #1
 8011fa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8011fa2:	4413      	add	r3, r2
 8011fa4:	b2c2      	uxtb	r2, r0
 8011fa6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d304      	bcc.n	8011fbc <CircularQueue_Add+0x1fc>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	e000      	b.n	8011fbe <CircularQueue_Add+0x1fe>
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fbe:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	695b      	ldr	r3, [r3, #20]
 8011fc4:	1c9a      	adds	r2, r3, #2
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8011fca:	88fa      	ldrh	r2, [r7, #6]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6859      	ldr	r1, [r3, #4]
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fd2:	1acb      	subs	r3, r1, r3
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	bf28      	it	cs
 8011fd8:	4613      	movcs	r3, r2
 8011fda:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8011fdc:	88fb      	ldrh	r3, [r7, #6]
 8011fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d007      	beq.n	8011ff4 <CircularQueue_Add+0x234>
 8011fe4:	88fb      	ldrh	r3, [r7, #6]
 8011fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d225      	bcs.n	8012038 <CircularQueue_Add+0x278>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	7f1b      	ldrb	r3, [r3, #28]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d121      	bne.n	8012038 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ffa:	18d0      	adds	r0, r2, r3
 8011ffc:	88fb      	ldrh	r3, [r7, #6]
 8011ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012000:	fb02 f303 	mul.w	r3, r2, r3
 8012004:	68ba      	ldr	r2, [r7, #8]
 8012006:	4413      	add	r3, r2
 8012008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801200a:	4619      	mov	r1, r3
 801200c:	f003 fe3f 	bl	8015c8e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	695a      	ldr	r2, [r3, #20]
 8012014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012016:	441a      	add	r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 801201c:	2300      	movs	r3, #0
 801201e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012022:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012024:	88fa      	ldrh	r2, [r7, #6]
 8012026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801202c:	7ffb      	ldrb	r3, [r7, #31]
 801202e:	b29a      	uxth	r2, r3
 8012030:	88fb      	ldrh	r3, [r7, #6]
 8012032:	4413      	add	r3, r2
 8012034:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012036:	e0a4      	b.n	8012182 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801203a:	2b00      	cmp	r3, #0
 801203c:	f000 80a1 	beq.w	8012182 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	7f1b      	ldrb	r3, [r3, #28]
 8012044:	f003 0301 	and.w	r3, r3, #1
 8012048:	2b00      	cmp	r3, #0
 801204a:	d03a      	beq.n	80120c2 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	891b      	ldrh	r3, [r3, #8]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10d      	bne.n	8012070 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801205a:	3b02      	subs	r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	22ff      	movs	r2, #255	@ 0xff
 8012060:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012068:	3b01      	subs	r3, #1
 801206a:	4413      	add	r3, r2
 801206c:	22ff      	movs	r2, #255	@ 0xff
 801206e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	695a      	ldr	r2, [r3, #20]
 8012074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012076:	441a      	add	r2, r3
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012080:	88fb      	ldrh	r3, [r7, #6]
 8012082:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012084:	2300      	movs	r3, #0
 8012086:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	891b      	ldrh	r3, [r3, #8]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d16f      	bne.n	8012170 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012096:	1c59      	adds	r1, r3, #1
 8012098:	6339      	str	r1, [r7, #48]	@ 0x30
 801209a:	4413      	add	r3, r2
 801209c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801209e:	b2d2      	uxtb	r2, r2
 80120a0:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80120a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a4:	0a18      	lsrs	r0, r3, #8
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ac:	1c59      	adds	r1, r3, #1
 80120ae:	6339      	str	r1, [r7, #48]	@ 0x30
 80120b0:	4413      	add	r3, r2
 80120b2:	b2c2      	uxtb	r2, r0
 80120b4:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	1c9a      	adds	r2, r3, #2
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	615a      	str	r2, [r3, #20]
 80120c0:	e056      	b.n	8012170 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	7f1b      	ldrb	r3, [r3, #28]
 80120c6:	f003 0302 	and.w	r3, r3, #2
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d050      	beq.n	8012170 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	891b      	ldrh	r3, [r3, #8]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d14a      	bne.n	801216c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120dc:	3b02      	subs	r3, #2
 80120de:	4413      	add	r3, r2
 80120e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120e2:	b2d2      	uxtb	r2, r2
 80120e4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80120e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e8:	0a19      	lsrs	r1, r3, #8
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120f0:	3b01      	subs	r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	b2ca      	uxtb	r2, r1
 80120f6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120fe:	18d0      	adds	r0, r2, r3
 8012100:	88fb      	ldrh	r3, [r7, #6]
 8012102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012104:	fb02 f303 	mul.w	r3, r2, r3
 8012108:	68ba      	ldr	r2, [r7, #8]
 801210a:	4413      	add	r3, r2
 801210c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801210e:	4619      	mov	r1, r3
 8012110:	f003 fdbd 	bl	8015c8e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	695a      	ldr	r2, [r3, #20]
 8012118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211a:	441a      	add	r2, r3
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8012120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012122:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012124:	88fa      	ldrh	r2, [r7, #6]
 8012126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012128:	1ad3      	subs	r3, r2, r3
 801212a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	699b      	ldr	r3, [r3, #24]
 8012130:	1c5a      	adds	r2, r3, #1
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012136:	2300      	movs	r3, #0
 8012138:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681a      	ldr	r2, [r3, #0]
 801213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012140:	1c59      	adds	r1, r3, #1
 8012142:	6339      	str	r1, [r7, #48]	@ 0x30
 8012144:	4413      	add	r3, r2
 8012146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012148:	b2d2      	uxtb	r2, r2
 801214a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	0a18      	lsrs	r0, r3, #8
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012156:	1c59      	adds	r1, r3, #1
 8012158:	6339      	str	r1, [r7, #48]	@ 0x30
 801215a:	4413      	add	r3, r2
 801215c:	b2c2      	uxtb	r2, r0
 801215e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	1c9a      	adds	r2, r3, #2
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	615a      	str	r2, [r3, #20]
 801216a:	e001      	b.n	8012170 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801216c:	2300      	movs	r3, #0
 801216e:	e049      	b.n	8012204 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012170:	7ffb      	ldrb	r3, [r7, #31]
 8012172:	b29a      	uxth	r2, r3
 8012174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012176:	b29b      	uxth	r3, r3
 8012178:	4413      	add	r3, r2
 801217a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2200      	movs	r2, #0
 8012180:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012184:	2b00      	cmp	r3, #0
 8012186:	d015      	beq.n	80121b4 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801218e:	18d0      	adds	r0, r2, r3
 8012190:	88fb      	ldrh	r3, [r7, #6]
 8012192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012194:	fb03 f202 	mul.w	r2, r3, r2
 8012198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219a:	4413      	add	r3, r2
 801219c:	68ba      	ldr	r2, [r7, #8]
 801219e:	4413      	add	r3, r2
 80121a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a2:	4619      	mov	r1, r3
 80121a4:	f003 fd73 	bl	8015c8e <memcpy>
        q->byteCount += NbBytesToCopy;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	695a      	ldr	r2, [r3, #20]
 80121ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ae:	441a      	add	r2, r3
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80121be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c0:	3301      	adds	r3, #1
 80121c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	f4ff aeb0 	bcc.w	8011f2e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6919      	ldr	r1, [r3, #16]
 80121d6:	7ffb      	ldrb	r3, [r7, #31]
 80121d8:	4419      	add	r1, r3
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	4299      	cmp	r1, r3
 80121e0:	d307      	bcc.n	80121f2 <CircularQueue_Add+0x432>
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	6919      	ldr	r1, [r3, #16]
 80121e6:	7ffb      	ldrb	r3, [r7, #31]
 80121e8:	4419      	add	r1, r3
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	1acb      	subs	r3, r1, r3
 80121f0:	e003      	b.n	80121fa <CircularQueue_Add+0x43a>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	6919      	ldr	r1, [r3, #16]
 80121f6:	7ffb      	ldrb	r3, [r7, #31]
 80121f8:	440b      	add	r3, r1
 80121fa:	4413      	add	r3, r2
 80121fc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	e000      	b.n	8012204 <CircularQueue_Add+0x444>
    return NULL;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3738      	adds	r7, #56	@ 0x38
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 801221a:	2300      	movs	r3, #0
 801221c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	891b      	ldrh	r3, [r3, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <CircularQueue_Remove+0x1e>
 8012226:	2302      	movs	r3, #2
 8012228:	e000      	b.n	801222c <CircularQueue_Remove+0x20>
 801222a:	2300      	movs	r3, #0
 801222c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801222e:	2300      	movs	r3, #0
 8012230:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	2b00      	cmp	r3, #0
 8012238:	f000 80ca 	beq.w	80123d0 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	891b      	ldrh	r3, [r3, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d120      	bne.n	8012286 <CircularQueue_Remove+0x7a>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	4413      	add	r3, r2
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	4618      	mov	r0, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	1c59      	adds	r1, r3, #1
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4299      	cmp	r1, r3
 8012262:	d306      	bcc.n	8012272 <CircularQueue_Remove+0x66>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	68d9      	ldr	r1, [r3, #12]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	1acb      	subs	r3, r1, r3
 801226e:	3301      	adds	r3, #1
 8012270:	e002      	b.n	8012278 <CircularQueue_Remove+0x6c>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	3301      	adds	r3, #1
 8012278:	4413      	add	r3, r2
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	021b      	lsls	r3, r3, #8
 801227e:	b29b      	uxth	r3, r3
 8012280:	4403      	add	r3, r0
 8012282:	b29b      	uxth	r3, r3
 8012284:	e001      	b.n	801228a <CircularQueue_Remove+0x7e>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	891b      	ldrh	r3, [r3, #8]
 801228a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7f1b      	ldrb	r3, [r3, #28]
 8012290:	f003 0301 	and.w	r3, r3, #1
 8012294:	2b00      	cmp	r3, #0
 8012296:	d056      	beq.n	8012346 <CircularQueue_Remove+0x13a>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7f1b      	ldrb	r3, [r3, #28]
 801229c:	f003 0302 	and.w	r3, r3, #2
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d150      	bne.n	8012346 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80122a4:	897b      	ldrh	r3, [r7, #10]
 80122a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d103      	bne.n	80122b6 <CircularQueue_Remove+0xaa>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	891b      	ldrh	r3, [r3, #8]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d012      	beq.n	80122dc <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	68da      	ldr	r2, [r3, #12]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80122be:	429a      	cmp	r2, r3
 80122c0:	d941      	bls.n	8012346 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	891b      	ldrh	r3, [r3, #8]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d03d      	beq.n	8012346 <CircularQueue_Remove+0x13a>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	8912      	ldrh	r2, [r2, #8]
 80122d8:	4293      	cmp	r3, r2
 80122da:	d234      	bcs.n	8012346 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	695a      	ldr	r2, [r3, #20]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	68d9      	ldr	r1, [r3, #12]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	1acb      	subs	r3, r1, r3
 80122ea:	441a      	add	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	891b      	ldrh	r3, [r3, #8]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d120      	bne.n	8012340 <CircularQueue_Remove+0x134>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	4413      	add	r3, r2
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	4618      	mov	r0, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	1c59      	adds	r1, r3, #1
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	4299      	cmp	r1, r3
 801231c:	d306      	bcc.n	801232c <CircularQueue_Remove+0x120>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	68d9      	ldr	r1, [r3, #12]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	1acb      	subs	r3, r1, r3
 8012328:	3301      	adds	r3, #1
 801232a:	e002      	b.n	8012332 <CircularQueue_Remove+0x126>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	3301      	adds	r3, #1
 8012332:	4413      	add	r3, r2
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	021b      	lsls	r3, r3, #8
 8012338:	b29b      	uxth	r3, r3
 801233a:	4403      	add	r3, r0
 801233c:	b29b      	uxth	r3, r3
 801233e:	e001      	b.n	8012344 <CircularQueue_Remove+0x138>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	68d9      	ldr	r1, [r3, #12]
 801234e:	7a7b      	ldrb	r3, [r7, #9]
 8012350:	4419      	add	r1, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	4299      	cmp	r1, r3
 8012358:	d307      	bcc.n	801236a <CircularQueue_Remove+0x15e>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68d9      	ldr	r1, [r3, #12]
 801235e:	7a7b      	ldrb	r3, [r7, #9]
 8012360:	4419      	add	r1, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	1acb      	subs	r3, r1, r3
 8012368:	e003      	b.n	8012372 <CircularQueue_Remove+0x166>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68d9      	ldr	r1, [r3, #12]
 801236e:	7a7b      	ldrb	r3, [r7, #9]
 8012370:	440b      	add	r3, r1
 8012372:	4413      	add	r3, r2
 8012374:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	695b      	ldr	r3, [r3, #20]
 801237a:	8979      	ldrh	r1, [r7, #10]
 801237c:	7a7a      	ldrb	r2, [r7, #9]
 801237e:	440a      	add	r2, r1
 8012380:	1a9a      	subs	r2, r3, r2
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d01b      	beq.n	80123c6 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	68da      	ldr	r2, [r3, #12]
 8012392:	897b      	ldrh	r3, [r7, #10]
 8012394:	441a      	add	r2, r3
 8012396:	7a7b      	ldrb	r3, [r7, #9]
 8012398:	441a      	add	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d309      	bcc.n	80123b6 <CircularQueue_Remove+0x1aa>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	68da      	ldr	r2, [r3, #12]
 80123a6:	897b      	ldrh	r3, [r7, #10]
 80123a8:	441a      	add	r2, r3
 80123aa:	7a7b      	ldrb	r3, [r7, #9]
 80123ac:	441a      	add	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	e005      	b.n	80123c2 <CircularQueue_Remove+0x1b6>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68da      	ldr	r2, [r3, #12]
 80123ba:	897b      	ldrh	r3, [r7, #10]
 80123bc:	441a      	add	r2, r3
 80123be:	7a7b      	ldrb	r3, [r7, #9]
 80123c0:	4413      	add	r3, r2
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	699b      	ldr	r3, [r3, #24]
 80123ca:	1e5a      	subs	r2, r3, #1
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d002      	beq.n	80123dc <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	897a      	ldrh	r2, [r7, #10]
 80123da:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80123dc:	68fb      	ldr	r3, [r7, #12]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3714      	adds	r7, #20
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80123ea:	b480      	push	{r7}
 80123ec:	b087      	sub	sp, #28
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80123f4:	2300      	movs	r3, #0
 80123f6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80123f8:	2300      	movs	r3, #0
 80123fa:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d101      	bne.n	8012408 <CircularQueue_Sense+0x1e>
 8012404:	2302      	movs	r3, #2
 8012406:	e000      	b.n	801240a <CircularQueue_Sense+0x20>
 8012408:	2300      	movs	r3, #0
 801240a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801240c:	2300      	movs	r3, #0
 801240e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 808e 	beq.w	801253a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	891b      	ldrh	r3, [r3, #8]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d120      	bne.n	801246e <CircularQueue_Sense+0x84>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	4413      	add	r3, r2
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	4618      	mov	r0, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	1c59      	adds	r1, r3, #1
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	4299      	cmp	r1, r3
 801244a:	d306      	bcc.n	801245a <CircularQueue_Sense+0x70>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	68d9      	ldr	r1, [r3, #12]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	1acb      	subs	r3, r1, r3
 8012456:	3301      	adds	r3, #1
 8012458:	e002      	b.n	8012460 <CircularQueue_Sense+0x76>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	3301      	adds	r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	021b      	lsls	r3, r3, #8
 8012466:	b29b      	uxth	r3, r3
 8012468:	4403      	add	r3, r0
 801246a:	b29b      	uxth	r3, r3
 801246c:	e001      	b.n	8012472 <CircularQueue_Sense+0x88>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	891b      	ldrh	r3, [r3, #8]
 8012472:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7f1b      	ldrb	r3, [r3, #28]
 8012478:	f003 0301 	and.w	r3, r3, #1
 801247c:	2b00      	cmp	r3, #0
 801247e:	d047      	beq.n	8012510 <CircularQueue_Sense+0x126>
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	7f1b      	ldrb	r3, [r3, #28]
 8012484:	f003 0302 	and.w	r3, r3, #2
 8012488:	2b00      	cmp	r3, #0
 801248a:	d141      	bne.n	8012510 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801248c:	8a7b      	ldrh	r3, [r7, #18]
 801248e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012492:	4293      	cmp	r3, r2
 8012494:	d103      	bne.n	801249e <CircularQueue_Sense+0xb4>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d012      	beq.n	80124c4 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68da      	ldr	r2, [r3, #12]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d932      	bls.n	8012510 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	891b      	ldrh	r3, [r3, #8]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d02e      	beq.n	8012510 <CircularQueue_Sense+0x126>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	685a      	ldr	r2, [r3, #4]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	1ad3      	subs	r3, r2, r3
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	8912      	ldrh	r2, [r2, #8]
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d225      	bcs.n	8012510 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80124c4:	2300      	movs	r3, #0
 80124c6:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	891b      	ldrh	r3, [r3, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d11c      	bne.n	801250a <CircularQueue_Sense+0x120>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	4413      	add	r3, r2
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	4618      	mov	r0, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	1c59      	adds	r1, r3, #1
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	4299      	cmp	r1, r3
 80124ea:	d305      	bcc.n	80124f8 <CircularQueue_Sense+0x10e>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	68f9      	ldr	r1, [r7, #12]
 80124f2:	1acb      	subs	r3, r1, r3
 80124f4:	3301      	adds	r3, #1
 80124f6:	e001      	b.n	80124fc <CircularQueue_Sense+0x112>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	3301      	adds	r3, #1
 80124fc:	4413      	add	r3, r2
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	021b      	lsls	r3, r3, #8
 8012502:	b29b      	uxth	r3, r3
 8012504:	4403      	add	r3, r0
 8012506:	b29b      	uxth	r3, r3
 8012508:	e001      	b.n	801250e <CircularQueue_Sense+0x124>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	891b      	ldrh	r3, [r3, #8]
 801250e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	7af9      	ldrb	r1, [r7, #11]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	4419      	add	r1, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	4299      	cmp	r1, r3
 8012520:	d306      	bcc.n	8012530 <CircularQueue_Sense+0x146>
 8012522:	7af9      	ldrb	r1, [r7, #11]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	4419      	add	r1, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	1acb      	subs	r3, r1, r3
 801252e:	e002      	b.n	8012536 <CircularQueue_Sense+0x14c>
 8012530:	7af9      	ldrb	r1, [r7, #11]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	440b      	add	r3, r1
 8012536:	4413      	add	r3, r2
 8012538:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d002      	beq.n	8012546 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	8a7a      	ldrh	r2, [r7, #18]
 8012544:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8012546:	697b      	ldr	r3, [r7, #20]
}
 8012548:	4618      	mov	r0, r3
 801254a:	371c      	adds	r7, #28
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <__NVIC_SystemReset>:
{
 8012554:	b480      	push	{r7}
 8012556:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012558:	f3bf 8f4f 	dsb	sy
}
 801255c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801255e:	4b06      	ldr	r3, [pc, #24]	@ (8012578 <__NVIC_SystemReset+0x24>)
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012566:	4904      	ldr	r1, [pc, #16]	@ (8012578 <__NVIC_SystemReset+0x24>)
 8012568:	4b04      	ldr	r3, [pc, #16]	@ (801257c <__NVIC_SystemReset+0x28>)
 801256a:	4313      	orrs	r3, r2
 801256c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801256e:	f3bf 8f4f 	dsb	sy
}
 8012572:	bf00      	nop
    __NOP();
 8012574:	bf00      	nop
 8012576:	e7fd      	b.n	8012574 <__NVIC_SystemReset+0x20>
 8012578:	e000ed00 	.word	0xe000ed00
 801257c:	05fa0004 	.word	0x05fa0004

08012580 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012580:	b480      	push	{r7}
 8012582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012584:	4b03      	ldr	r3, [pc, #12]	@ (8012594 <LL_FLASH_GetUDN+0x14>)
 8012586:	681b      	ldr	r3, [r3, #0]
}
 8012588:	4618      	mov	r0, r3
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	1fff7580 	.word	0x1fff7580

08012598 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012598:	b480      	push	{r7}
 801259a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801259c:	4b03      	ldr	r3, [pc, #12]	@ (80125ac <LL_FLASH_GetDeviceID+0x14>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	b2db      	uxtb	r3, r3
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	1fff7584 	.word	0x1fff7584

080125b0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80125b0:	b480      	push	{r7}
 80125b2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80125b4:	4b03      	ldr	r3, [pc, #12]	@ (80125c4 <LL_FLASH_GetSTCompanyID+0x14>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	0a1b      	lsrs	r3, r3, #8
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	1fff7584 	.word	0x1fff7584

080125c8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80125c8:	b5b0      	push	{r4, r5, r7, lr}
 80125ca:	b090      	sub	sp, #64	@ 0x40
 80125cc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80125ce:	2392      	movs	r3, #146	@ 0x92
 80125d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 80125d4:	4a4d      	ldr	r2, [pc, #308]	@ (801270c <APP_BLE_Init+0x144>)
 80125d6:	2100      	movs	r1, #0
 80125d8:	2020      	movs	r0, #32
 80125da:	f002 ff5f 	bl	801549c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 80125de:	4a4c      	ldr	r2, [pc, #304]	@ (8012710 <APP_BLE_Init+0x148>)
 80125e0:	2100      	movs	r1, #0
 80125e2:	2008      	movs	r0, #8
 80125e4:	f002 ff5a 	bl	801549c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80125e8:	4b4a      	ldr	r3, [pc, #296]	@ (8012714 <APP_BLE_Init+0x14c>)
 80125ea:	1d3c      	adds	r4, r7, #4
 80125ec:	461d      	mov	r5, r3
 80125ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80125fe:	c403      	stmia	r4!, {r0, r1}
 8012600:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8012602:	f000 fbfb 	bl	8012dfc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8012606:	2101      	movs	r1, #1
 8012608:	2002      	movs	r0, #2
 801260a:	f002 fe1b 	bl	8015244 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801260e:	4a42      	ldr	r2, [pc, #264]	@ (8012718 <APP_BLE_Init+0x150>)
 8012610:	2100      	movs	r1, #0
 8012612:	2004      	movs	r0, #4
 8012614:	f002 ff42 	bl	801549c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8012618:	1d3b      	adds	r3, r7, #4
 801261a:	4618      	mov	r0, r3
 801261c:	f7fe fc14 	bl	8010e48 <SHCI_C2_BLE_Init>
 8012620:	4603      	mov	r3, r0
 8012622:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8012626:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801262a:	2b00      	cmp	r3, #0
 801262c:	d012      	beq.n	8012654 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 801262e:	483b      	ldr	r0, [pc, #236]	@ (801271c <APP_BLE_Init+0x154>)
 8012630:	f7ff fa18 	bl	8011a64 <DbgTraceGetFileName>
 8012634:	4601      	mov	r1, r0
 8012636:	f240 1375 	movw	r3, #373	@ 0x175
 801263a:	4a39      	ldr	r2, [pc, #228]	@ (8012720 <APP_BLE_Init+0x158>)
 801263c:	4839      	ldr	r0, [pc, #228]	@ (8012724 <APP_BLE_Init+0x15c>)
 801263e:	f003 f90d 	bl	801585c <iprintf>
 8012642:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8012646:	4619      	mov	r1, r3
 8012648:	4837      	ldr	r0, [pc, #220]	@ (8012728 <APP_BLE_Init+0x160>)
 801264a:	f003 f907 	bl	801585c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801264e:	f7f1 feb9 	bl	80043c4 <Error_Handler>
 8012652:	e00c      	b.n	801266e <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8012654:	4831      	ldr	r0, [pc, #196]	@ (801271c <APP_BLE_Init+0x154>)
 8012656:	f7ff fa05 	bl	8011a64 <DbgTraceGetFileName>
 801265a:	4601      	mov	r1, r0
 801265c:	f240 137b 	movw	r3, #379	@ 0x17b
 8012660:	4a2f      	ldr	r2, [pc, #188]	@ (8012720 <APP_BLE_Init+0x158>)
 8012662:	4830      	ldr	r0, [pc, #192]	@ (8012724 <APP_BLE_Init+0x15c>)
 8012664:	f003 f8fa 	bl	801585c <iprintf>
 8012668:	4830      	ldr	r0, [pc, #192]	@ (801272c <APP_BLE_Init+0x164>)
 801266a:	f003 f8f7 	bl	801585c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801266e:	f000 fbdb 	bl	8012e28 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8012672:	f7fe fb43 	bl	8010cfc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012676:	4b2e      	ldr	r3, [pc, #184]	@ (8012730 <APP_BLE_Init+0x168>)
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801267e:	4b2c      	ldr	r3, [pc, #176]	@ (8012730 <APP_BLE_Init+0x168>)
 8012680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012684:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8012686:	4a2b      	ldr	r2, [pc, #172]	@ (8012734 <APP_BLE_Init+0x16c>)
 8012688:	2100      	movs	r1, #0
 801268a:	2001      	movs	r0, #1
 801268c:	f002 ff06 	bl	801549c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8012690:	2006      	movs	r0, #6
 8012692:	f7fe f908 	bl	80108a6 <aci_hal_set_radio_activity_mask>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 801269c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d010      	beq.n	80126c6 <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80126a4:	481d      	ldr	r0, [pc, #116]	@ (801271c <APP_BLE_Init+0x154>)
 80126a6:	f7ff f9dd 	bl	8011a64 <DbgTraceGetFileName>
 80126aa:	4601      	mov	r1, r0
 80126ac:	f240 139f 	movw	r3, #415	@ 0x19f
 80126b0:	4a1b      	ldr	r2, [pc, #108]	@ (8012720 <APP_BLE_Init+0x158>)
 80126b2:	481c      	ldr	r0, [pc, #112]	@ (8012724 <APP_BLE_Init+0x15c>)
 80126b4:	f003 f8d2 	bl	801585c <iprintf>
 80126b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80126bc:	4619      	mov	r1, r3
 80126be:	481e      	ldr	r0, [pc, #120]	@ (8012738 <APP_BLE_Init+0x170>)
 80126c0:	f003 f8cc 	bl	801585c <iprintf>
 80126c4:	e00c      	b.n	80126e0 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 80126c6:	4815      	ldr	r0, [pc, #84]	@ (801271c <APP_BLE_Init+0x154>)
 80126c8:	f7ff f9cc 	bl	8011a64 <DbgTraceGetFileName>
 80126cc:	4601      	mov	r1, r0
 80126ce:	f240 13a3 	movw	r3, #419	@ 0x1a3
 80126d2:	4a13      	ldr	r2, [pc, #76]	@ (8012720 <APP_BLE_Init+0x158>)
 80126d4:	4813      	ldr	r0, [pc, #76]	@ (8012724 <APP_BLE_Init+0x15c>)
 80126d6:	f003 f8c1 	bl	801585c <iprintf>
 80126da:	4818      	ldr	r0, [pc, #96]	@ (801273c <APP_BLE_Init+0x174>)
 80126dc:	f003 f8be 	bl	801585c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 80126e0:	4b17      	ldr	r3, [pc, #92]	@ (8012740 <APP_BLE_Init+0x178>)
 80126e2:	2200      	movs	r2, #0
 80126e4:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80126e6:	4b17      	ldr	r3, [pc, #92]	@ (8012744 <APP_BLE_Init+0x17c>)
 80126e8:	2201      	movs	r2, #1
 80126ea:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80126ec:	f001 f916 	bl	801391c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80126f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012730 <APP_BLE_Init+0x168>)
 80126f2:	2200      	movs	r2, #0
 80126f4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80126f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012730 <APP_BLE_Init+0x168>)
 80126f8:	2200      	movs	r2, #0
 80126fa:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80126fc:	2001      	movs	r0, #1
 80126fe:	f000 fe27 	bl	8013350 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8012702:	bf00      	nop
}
 8012704:	3740      	adds	r7, #64	@ 0x40
 8012706:	46bd      	mov	sp, r7
 8012708:	bdb0      	pop	{r4, r5, r7, pc}
 801270a:	bf00      	nop
 801270c:	080137f5 	.word	0x080137f5
 8012710:	08013829 	.word	0x08013829
 8012714:	08018bf8 	.word	0x08018bf8
 8012718:	08011065 	.word	0x08011065
 801271c:	08018aec 	.word	0x08018aec
 8012720:	0801a478 	.word	0x0801a478
 8012724:	08018b08 	.word	0x08018b08
 8012728:	08018b1c 	.word	0x08018b1c
 801272c:	08018b54 	.word	0x08018b54
 8012730:	200019f8 	.word	0x200019f8
 8012734:	080134d5 	.word	0x080134d5
 8012738:	08018b7c 	.word	0x08018b7c
 801273c:	08018bc0 	.word	0x08018bc0
 8012740:	20001a80 	.word	0x20001a80
 8012744:	20001a81 	.word	0x20001a81

08012748 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8012748:	b5b0      	push	{r4, r5, r7, lr}
 801274a:	b090      	sub	sp, #64	@ 0x40
 801274c:	af04      	add	r7, sp, #16
 801274e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8012750:	2392      	movs	r3, #146	@ 0x92
 8012752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	3301      	adds	r3, #1
 801275a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 801275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	2bff      	cmp	r3, #255	@ 0xff
 8012762:	f000 81a5 	beq.w	8012ab0 <SVCCTL_App_Notification+0x368>
 8012766:	2bff      	cmp	r3, #255	@ 0xff
 8012768:	f300 8313 	bgt.w	8012d92 <SVCCTL_App_Notification+0x64a>
 801276c:	2b3e      	cmp	r3, #62	@ 0x3e
 801276e:	d077      	beq.n	8012860 <SVCCTL_App_Notification+0x118>
 8012770:	2b3e      	cmp	r3, #62	@ 0x3e
 8012772:	f300 830e 	bgt.w	8012d92 <SVCCTL_App_Notification+0x64a>
 8012776:	2b05      	cmp	r3, #5
 8012778:	d002      	beq.n	8012780 <SVCCTL_App_Notification+0x38>
 801277a:	2b10      	cmp	r3, #16
 801277c:	d04f      	beq.n	801281e <SVCCTL_App_Notification+0xd6>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801277e:	e308      	b.n	8012d92 <SVCCTL_App_Notification+0x64a>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8012780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012782:	3302      	adds	r3, #2
 8012784:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801278c:	b29a      	uxth	r2, r3
 801278e:	4bb6      	ldr	r3, [pc, #728]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012790:	8adb      	ldrh	r3, [r3, #22]
 8012792:	429a      	cmp	r2, r3
 8012794:	d132      	bne.n	80127fc <SVCCTL_App_Notification+0xb4>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8012796:	4bb4      	ldr	r3, [pc, #720]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012798:	2200      	movs	r2, #0
 801279a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801279c:	4bb2      	ldr	r3, [pc, #712]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80127a4:	48b1      	ldr	r0, [pc, #708]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 80127a6:	f7ff f95d 	bl	8011a64 <DbgTraceGetFileName>
 80127aa:	4601      	mov	r1, r0
 80127ac:	f240 13e7 	movw	r3, #487	@ 0x1e7
 80127b0:	4aaf      	ldr	r2, [pc, #700]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 80127b2:	48b0      	ldr	r0, [pc, #704]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 80127b4:	f003 f852 	bl	801585c <iprintf>
 80127b8:	48af      	ldr	r0, [pc, #700]	@ (8012a78 <SVCCTL_App_Notification+0x330>)
 80127ba:	f003 f8bf 	bl	801593c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80127be:	48ab      	ldr	r0, [pc, #684]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 80127c0:	f7ff f950 	bl	8011a64 <DbgTraceGetFileName>
 80127c4:	4601      	mov	r1, r0
 80127c6:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80127ca:	4aa9      	ldr	r2, [pc, #676]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 80127cc:	48a9      	ldr	r0, [pc, #676]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 80127ce:	f003 f845 	bl	801585c <iprintf>
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80127d8:	b29b      	uxth	r3, r3
 80127da:	4619      	mov	r1, r3
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	78db      	ldrb	r3, [r3, #3]
 80127e0:	461a      	mov	r2, r3
 80127e2:	48a6      	ldr	r0, [pc, #664]	@ (8012a7c <SVCCTL_App_Notification+0x334>)
 80127e4:	f003 f83a 	bl	801585c <iprintf>
        tsBle.Connected = false;
 80127e8:	4ba5      	ldr	r3, [pc, #660]	@ (8012a80 <SVCCTL_App_Notification+0x338>)
 80127ea:	2200      	movs	r2, #0
 80127ec:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 80127ee:	f7ff feeb 	bl	80125c8 <APP_BLE_Init>
			HAL_Delay(250);
 80127f2:	20fa      	movs	r0, #250	@ 0xfa
 80127f4:	f7f0 f878 	bl	80028e8 <HAL_Delay>
			NVIC_SystemReset();
 80127f8:	f7ff feac 	bl	8012554 <__NVIC_SystemReset>
      Adv_Request(APP_BLE_FAST_ADV);
 80127fc:	2001      	movs	r0, #1
 80127fe:	f000 fda7 	bl	8013350 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8012802:	4ba0      	ldr	r3, [pc, #640]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 8012804:	2201      	movs	r2, #1
 8012806:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012808:	4b97      	ldr	r3, [pc, #604]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 801280a:	8ada      	ldrh	r2, [r3, #22]
 801280c:	4b9d      	ldr	r3, [pc, #628]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 801280e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8012810:	489c      	ldr	r0, [pc, #624]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 8012812:	f001 f86f 	bl	80138f4 <Custom_APP_Notification>
      tsCmd.LED = false;
 8012816:	4b9c      	ldr	r3, [pc, #624]	@ (8012a88 <SVCCTL_App_Notification+0x340>)
 8012818:	2200      	movs	r2, #0
 801281a:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801281c:	e2bc      	b.n	8012d98 <SVCCTL_App_Notification+0x650>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 801281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012820:	3302      	adds	r3, #2
 8012822:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 8012824:	4891      	ldr	r0, [pc, #580]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 8012826:	f7ff f91d 	bl	8011a64 <DbgTraceGetFileName>
 801282a:	4601      	mov	r1, r0
 801282c:	f240 231a 	movw	r3, #538	@ 0x21a
 8012830:	4a8f      	ldr	r2, [pc, #572]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 8012832:	4890      	ldr	r0, [pc, #576]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 8012834:	f003 f812 	bl	801585c <iprintf>
 8012838:	4894      	ldr	r0, [pc, #592]	@ (8012a8c <SVCCTL_App_Notification+0x344>)
 801283a:	f003 f87f 	bl	801593c <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 801283e:	488b      	ldr	r0, [pc, #556]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 8012840:	f7ff f910 	bl	8011a64 <DbgTraceGetFileName>
 8012844:	4601      	mov	r1, r0
 8012846:	f240 231b 	movw	r3, #539	@ 0x21b
 801284a:	4a89      	ldr	r2, [pc, #548]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 801284c:	4889      	ldr	r0, [pc, #548]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 801284e:	f003 f805 	bl	801585c <iprintf>
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	4619      	mov	r1, r3
 8012858:	488d      	ldr	r0, [pc, #564]	@ (8012a90 <SVCCTL_App_Notification+0x348>)
 801285a:	f002 ffff 	bl	801585c <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 801285e:	e29b      	b.n	8012d98 <SVCCTL_App_Notification+0x650>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8012860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012862:	3302      	adds	r3, #2
 8012864:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d06a      	beq.n	8012944 <SVCCTL_App_Notification+0x1fc>
 801286e:	2b03      	cmp	r3, #3
 8012870:	f040 80f7 	bne.w	8012a62 <SVCCTL_App_Notification+0x31a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	3301      	adds	r3, #1
 8012878:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 801287a:	487c      	ldr	r0, [pc, #496]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 801287c:	f7ff f8f2 	bl	8011a64 <DbgTraceGetFileName>
 8012880:	4601      	mov	r1, r0
 8012882:	f240 232d 	movw	r3, #557	@ 0x22d
 8012886:	4a7a      	ldr	r2, [pc, #488]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 8012888:	487a      	ldr	r0, [pc, #488]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 801288a:	f002 ffe7 	bl	801585c <iprintf>
 801288e:	4881      	ldr	r0, [pc, #516]	@ (8012a94 <SVCCTL_App_Notification+0x34c>)
 8012890:	f003 f854 	bl	801593c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012894:	4875      	ldr	r0, [pc, #468]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 8012896:	f7ff f8e5 	bl	8011a64 <DbgTraceGetFileName>
 801289a:	4601      	mov	r1, r0
 801289c:	f240 232e 	movw	r3, #558	@ 0x22e
 80128a0:	4a73      	ldr	r2, [pc, #460]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 80128a2:	4874      	ldr	r0, [pc, #464]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 80128a4:	f002 ffda 	bl	801585c <iprintf>
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ed fe0f 	bl	80004d4 <__aeabi_i2d>
 80128b6:	f04f 0200 	mov.w	r2, #0
 80128ba:	4b77      	ldr	r3, [pc, #476]	@ (8012a98 <SVCCTL_App_Notification+0x350>)
 80128bc:	f7ed fe74 	bl	80005a8 <__aeabi_dmul>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4610      	mov	r0, r2
 80128c6:	4619      	mov	r1, r3
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	461c      	mov	r4, r3
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	461a      	mov	r2, r3
 80128dc:	4613      	mov	r3, r2
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	4413      	add	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	9301      	str	r3, [sp, #4]
 80128e6:	9400      	str	r4, [sp, #0]
 80128e8:	4602      	mov	r2, r0
 80128ea:	460b      	mov	r3, r1
 80128ec:	486b      	ldr	r0, [pc, #428]	@ (8012a9c <SVCCTL_App_Notification+0x354>)
 80128ee:	f002 ffb5 	bl	801585c <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80128f2:	486b      	ldr	r0, [pc, #428]	@ (8012aa0 <SVCCTL_App_Notification+0x358>)
 80128f4:	f7f0 f884 	bl	8002a00 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80128fe:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012900:	4618      	mov	r0, r3
 8012902:	f7ed fde7 	bl	80004d4 <__aeabi_i2d>
 8012906:	f04f 0200 	mov.w	r2, #0
 801290a:	4b63      	ldr	r3, [pc, #396]	@ (8012a98 <SVCCTL_App_Notification+0x350>)
 801290c:	f7ed fe4c 	bl	80005a8 <__aeabi_dmul>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4610      	mov	r0, r2
 8012916:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801291e:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012920:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012928:	b29b      	uxth	r3, r3
 801292a:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801292c:	4613      	mov	r3, r2
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	4413      	add	r3, r2
 8012932:	005b      	lsls	r3, r3, #1
 8012934:	9301      	str	r3, [sp, #4]
 8012936:	9400      	str	r4, [sp, #0]
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4859      	ldr	r0, [pc, #356]	@ (8012aa4 <SVCCTL_App_Notification+0x35c>)
 801293e:	f7f0 f85f 	bl	8002a00 <DIAG>
          break;
 8012942:	e08f      	b.n	8012a64 <SVCCTL_App_Notification+0x31c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	3301      	adds	r3, #1
 8012948:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 801294a:	4848      	ldr	r0, [pc, #288]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 801294c:	f7ff f88a 	bl	8011a64 <DbgTraceGetFileName>
 8012950:	4601      	mov	r1, r0
 8012952:	f240 234b 	movw	r3, #587	@ 0x24b
 8012956:	4a46      	ldr	r2, [pc, #280]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 8012958:	4846      	ldr	r0, [pc, #280]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 801295a:	f002 ff7f 	bl	801585c <iprintf>
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012964:	b29b      	uxth	r3, r3
 8012966:	4619      	mov	r1, r3
 8012968:	484f      	ldr	r0, [pc, #316]	@ (8012aa8 <SVCCTL_App_Notification+0x360>)
 801296a:	f002 ff77 	bl	801585c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 801296e:	483f      	ldr	r0, [pc, #252]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 8012970:	f7ff f878 	bl	8011a64 <DbgTraceGetFileName>
 8012974:	4601      	mov	r1, r0
 8012976:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 801297a:	4a3d      	ldr	r2, [pc, #244]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 801297c:	483d      	ldr	r0, [pc, #244]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 801297e:	f002 ff6d 	bl	801585c <iprintf>
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	7a9b      	ldrb	r3, [r3, #10]
 8012986:	4618      	mov	r0, r3
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	7a5b      	ldrb	r3, [r3, #9]
 801298c:	461c      	mov	r4, r3
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	7a1b      	ldrb	r3, [r3, #8]
 8012992:	461d      	mov	r5, r3
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	79db      	ldrb	r3, [r3, #7]
 8012998:	461a      	mov	r2, r3
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	799b      	ldrb	r3, [r3, #6]
 801299e:	4619      	mov	r1, r3
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	795b      	ldrb	r3, [r3, #5]
 80129a4:	9302      	str	r3, [sp, #8]
 80129a6:	9101      	str	r1, [sp, #4]
 80129a8:	9200      	str	r2, [sp, #0]
 80129aa:	462b      	mov	r3, r5
 80129ac:	4622      	mov	r2, r4
 80129ae:	4601      	mov	r1, r0
 80129b0:	483e      	ldr	r0, [pc, #248]	@ (8012aac <SVCCTL_App_Notification+0x364>)
 80129b2:	f002 ff53 	bl	801585c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80129b6:	482d      	ldr	r0, [pc, #180]	@ (8012a6c <SVCCTL_App_Notification+0x324>)
 80129b8:	f7ff f854 	bl	8011a64 <DbgTraceGetFileName>
 80129bc:	4601      	mov	r1, r0
 80129be:	f240 2353 	movw	r3, #595	@ 0x253
 80129c2:	4a2b      	ldr	r2, [pc, #172]	@ (8012a70 <SVCCTL_App_Notification+0x328>)
 80129c4:	482b      	ldr	r0, [pc, #172]	@ (8012a74 <SVCCTL_App_Notification+0x32c>)
 80129c6:	f002 ff49 	bl	801585c <iprintf>
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ed fd7e 	bl	80004d4 <__aeabi_i2d>
 80129d8:	f04f 0200 	mov.w	r2, #0
 80129dc:	4b2e      	ldr	r3, [pc, #184]	@ (8012a98 <SVCCTL_App_Notification+0x350>)
 80129de:	f7ed fde3 	bl	80005a8 <__aeabi_dmul>
 80129e2:	4602      	mov	r2, r0
 80129e4:	460b      	mov	r3, r1
 80129e6:	4610      	mov	r0, r2
 80129e8:	4619      	mov	r1, r3
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	461c      	mov	r4, r3
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	461a      	mov	r2, r3
 80129fe:	4613      	mov	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	4413      	add	r3, r2
 8012a04:	005b      	lsls	r3, r3, #1
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	9400      	str	r4, [sp, #0]
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	4823      	ldr	r0, [pc, #140]	@ (8012a9c <SVCCTL_App_Notification+0x354>)
 8012a10:	f002 ff24 	bl	801585c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8012a14:	4b14      	ldr	r3, [pc, #80]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012a16:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012a1a:	2b04      	cmp	r3, #4
 8012a1c:	d104      	bne.n	8012a28 <SVCCTL_App_Notification+0x2e0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8012a1e:	4b12      	ldr	r3, [pc, #72]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012a20:	2206      	movs	r2, #6
 8012a22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012a26:	e003      	b.n	8012a30 <SVCCTL_App_Notification+0x2e8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8012a28:	4b0f      	ldr	r3, [pc, #60]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012a2a:	2205      	movs	r2, #5
 8012a2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	4b0b      	ldr	r3, [pc, #44]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012a3a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8012a3c:	4b11      	ldr	r3, [pc, #68]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 8012a3e:	2200      	movs	r2, #0
 8012a40:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012a42:	4b09      	ldr	r3, [pc, #36]	@ (8012a68 <SVCCTL_App_Notification+0x320>)
 8012a44:	8ada      	ldrh	r2, [r3, #22]
 8012a46:	4b0f      	ldr	r3, [pc, #60]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 8012a48:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8012a4a:	480e      	ldr	r0, [pc, #56]	@ (8012a84 <SVCCTL_App_Notification+0x33c>)
 8012a4c:	f000 ff52 	bl	80138f4 <Custom_APP_Notification>
          tsBle.Connected = true;
 8012a50:	4b0b      	ldr	r3, [pc, #44]	@ (8012a80 <SVCCTL_App_Notification+0x338>)
 8012a52:	2201      	movs	r2, #1
 8012a54:	701a      	strb	r2, [r3, #0]
		          HAL_Delay (250);
 8012a56:	20fa      	movs	r0, #250	@ 0xfa
 8012a58:	f7ef ff46 	bl	80028e8 <HAL_Delay>
		          Connection_Interval_Update_Req();
 8012a5c:	f000 fe5a 	bl	8013714 <Connection_Interval_Update_Req>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8012a60:	e000      	b.n	8012a64 <SVCCTL_App_Notification+0x31c>
          break;
 8012a62:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8012a64:	e198      	b.n	8012d98 <SVCCTL_App_Notification+0x650>
 8012a66:	bf00      	nop
 8012a68:	200019f8 	.word	0x200019f8
 8012a6c:	08018aec 	.word	0x08018aec
 8012a70:	0801a488 	.word	0x0801a488
 8012a74:	08018b08 	.word	0x08018b08
 8012a78:	08018c34 	.word	0x08018c34
 8012a7c:	08018c60 	.word	0x08018c60
 8012a80:	200019e0 	.word	0x200019e0
 8012a84:	20001a7c 	.word	0x20001a7c
 8012a88:	2000163c 	.word	0x2000163c
 8012a8c:	08018c9c 	.word	0x08018c9c
 8012a90:	08018cc0 	.word	0x08018cc0
 8012a94:	08018cd8 	.word	0x08018cd8
 8012a98:	3ff40000 	.word	0x3ff40000
 8012a9c:	08018d0c 	.word	0x08018d0c
 8012aa0:	08018d78 	.word	0x08018d78
 8012aa4:	08018dbc 	.word	0x08018dbc
 8012aa8:	08018e1c 	.word	0x08018e1c
 8012aac:	08018e64 	.word	0x08018e64
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab2:	3302      	adds	r3, #2
 8012ab4:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	f000 8130 	beq.w	8012d26 <SVCCTL_App_Notification+0x5de>
 8012ac6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012aca:	4293      	cmp	r3, r2
 8012acc:	f300 8163 	bgt.w	8012d96 <SVCCTL_App_Notification+0x64e>
 8012ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012ad4:	d02e      	beq.n	8012b34 <SVCCTL_App_Notification+0x3ec>
 8012ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012ada:	f300 815c 	bgt.w	8012d96 <SVCCTL_App_Notification+0x64e>
 8012ade:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	f300 8157 	bgt.w	8012d96 <SVCCTL_App_Notification+0x64e>
 8012ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012aec:	dc06      	bgt.n	8012afc <SVCCTL_App_Notification+0x3b4>
 8012aee:	2b04      	cmp	r3, #4
 8012af0:	f000 814d 	beq.w	8012d8e <SVCCTL_App_Notification+0x646>
 8012af4:	2b06      	cmp	r3, #6
 8012af6:	f000 8129 	beq.w	8012d4c <SVCCTL_App_Notification+0x604>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012afa:	e14c      	b.n	8012d96 <SVCCTL_App_Notification+0x64e>
 8012afc:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8012b00:	2b09      	cmp	r3, #9
 8012b02:	f200 8148 	bhi.w	8012d96 <SVCCTL_App_Notification+0x64e>
 8012b06:	a201      	add	r2, pc, #4	@ (adr r2, 8012b0c <SVCCTL_App_Notification+0x3c4>)
 8012b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0c:	08012ca1 	.word	0x08012ca1
 8012b10:	08012b75 	.word	0x08012b75
 8012b14:	08012d97 	.word	0x08012d97
 8012b18:	08012d97 	.word	0x08012d97
 8012b1c:	08012d97 	.word	0x08012d97
 8012b20:	08012d97 	.word	0x08012d97
 8012b24:	08012b3d 	.word	0x08012b3d
 8012b28:	08012d97 	.word	0x08012d97
 8012b2c:	08012be7 	.word	0x08012be7
 8012b30:	08012b59 	.word	0x08012b59
          mutex = 1;
 8012b34:	4b9b      	ldr	r3, [pc, #620]	@ (8012da4 <SVCCTL_App_Notification+0x65c>)
 8012b36:	2201      	movs	r2, #1
 8012b38:	701a      	strb	r2, [r3, #0]
          break;
 8012b3a:	e129      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8012b3c:	489a      	ldr	r0, [pc, #616]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012b3e:	f7fe ff91 	bl	8011a64 <DbgTraceGetFileName>
 8012b42:	4601      	mov	r1, r0
 8012b44:	f240 23af 	movw	r3, #687	@ 0x2af
 8012b48:	4a98      	ldr	r2, [pc, #608]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012b4a:	4899      	ldr	r0, [pc, #612]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012b4c:	f002 fe86 	bl	801585c <iprintf>
 8012b50:	4898      	ldr	r0, [pc, #608]	@ (8012db4 <SVCCTL_App_Notification+0x66c>)
 8012b52:	f002 fe83 	bl	801585c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8012b56:	e11b      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8012b58:	4893      	ldr	r0, [pc, #588]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012b5a:	f7fe ff83 	bl	8011a64 <DbgTraceGetFileName>
 8012b5e:	4601      	mov	r1, r0
 8012b60:	f240 23bf 	movw	r3, #703	@ 0x2bf
 8012b64:	4a91      	ldr	r2, [pc, #580]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012b66:	4892      	ldr	r0, [pc, #584]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012b68:	f002 fe78 	bl	801585c <iprintf>
 8012b6c:	4892      	ldr	r0, [pc, #584]	@ (8012db8 <SVCCTL_App_Notification+0x670>)
 8012b6e:	f002 fee5 	bl	801593c <puts>
          break;
 8012b72:	e10d      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8012b74:	488c      	ldr	r0, [pc, #560]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012b76:	f7fe ff75 	bl	8011a64 <DbgTraceGetFileName>
 8012b7a:	4601      	mov	r1, r0
 8012b7c:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8012b80:	4a8a      	ldr	r2, [pc, #552]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012b82:	488b      	ldr	r0, [pc, #556]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012b84:	f002 fe6a 	bl	801585c <iprintf>
 8012b88:	488c      	ldr	r0, [pc, #560]	@ (8012dbc <SVCCTL_App_Notification+0x674>)
 8012b8a:	f002 fed7 	bl	801593c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012b8e:	4b8c      	ldr	r3, [pc, #560]	@ (8012dc0 <SVCCTL_App_Notification+0x678>)
 8012b90:	8adb      	ldrh	r3, [r3, #22]
 8012b92:	498c      	ldr	r1, [pc, #560]	@ (8012dc4 <SVCCTL_App_Notification+0x67c>)
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7fd f833 	bl	800fc00 <aci_gap_pass_key_resp>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8012ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d010      	beq.n	8012bca <SVCCTL_App_Notification+0x482>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8012ba8:	487f      	ldr	r0, [pc, #508]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012baa:	f7fe ff5b 	bl	8011a64 <DbgTraceGetFileName>
 8012bae:	4601      	mov	r1, r0
 8012bb0:	f240 23cb 	movw	r3, #715	@ 0x2cb
 8012bb4:	4a7d      	ldr	r2, [pc, #500]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012bb6:	487e      	ldr	r0, [pc, #504]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012bb8:	f002 fe50 	bl	801585c <iprintf>
 8012bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	4881      	ldr	r0, [pc, #516]	@ (8012dc8 <SVCCTL_App_Notification+0x680>)
 8012bc4:	f002 fe4a 	bl	801585c <iprintf>
          break;
 8012bc8:	e0e2      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8012bca:	4877      	ldr	r0, [pc, #476]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012bcc:	f7fe ff4a 	bl	8011a64 <DbgTraceGetFileName>
 8012bd0:	4601      	mov	r1, r0
 8012bd2:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8012bd6:	4a75      	ldr	r2, [pc, #468]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012bd8:	4875      	ldr	r0, [pc, #468]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012bda:	f002 fe3f 	bl	801585c <iprintf>
 8012bde:	487b      	ldr	r0, [pc, #492]	@ (8012dcc <SVCCTL_App_Notification+0x684>)
 8012be0:	f002 feac 	bl	801593c <puts>
          break;
 8012be4:	e0d4      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8012be6:	4870      	ldr	r0, [pc, #448]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012be8:	f7fe ff3c 	bl	8011a64 <DbgTraceGetFileName>
 8012bec:	4601      	mov	r1, r0
 8012bee:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8012bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012bf4:	486e      	ldr	r0, [pc, #440]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012bf6:	f002 fe31 	bl	801585c <iprintf>
 8012bfa:	4875      	ldr	r0, [pc, #468]	@ (8012dd0 <SVCCTL_App_Notification+0x688>)
 8012bfc:	f002 fe9e 	bl	801593c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8012c00:	4869      	ldr	r0, [pc, #420]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012c02:	f7fe ff2f 	bl	8011a64 <DbgTraceGetFileName>
 8012c06:	4601      	mov	r1, r0
 8012c08:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8012c0c:	4a67      	ldr	r2, [pc, #412]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012c0e:	4868      	ldr	r0, [pc, #416]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012c10:	f002 fe24 	bl	801585c <iprintf>
 8012c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c16:	3302      	adds	r3, #2
 8012c18:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	486d      	ldr	r0, [pc, #436]	@ (8012dd4 <SVCCTL_App_Notification+0x68c>)
 8012c20:	f002 fe1c 	bl	801585c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8012c24:	4860      	ldr	r0, [pc, #384]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012c26:	f7fe ff1d 	bl	8011a64 <DbgTraceGetFileName>
 8012c2a:	4601      	mov	r1, r0
 8012c2c:	f240 23da 	movw	r3, #730	@ 0x2da
 8012c30:	4a5e      	ldr	r2, [pc, #376]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012c32:	485f      	ldr	r0, [pc, #380]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012c34:	f002 fe12 	bl	801585c <iprintf>
 8012c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c3a:	3302      	adds	r3, #2
 8012c3c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012c40:	4619      	mov	r1, r3
 8012c42:	4865      	ldr	r0, [pc, #404]	@ (8012dd8 <SVCCTL_App_Notification+0x690>)
 8012c44:	f002 fe0a 	bl	801585c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8012c48:	4b5d      	ldr	r3, [pc, #372]	@ (8012dc0 <SVCCTL_App_Notification+0x678>)
 8012c4a:	8adb      	ldrh	r3, [r3, #22]
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7fd f980 	bl	800ff54 <aci_gap_numeric_comparison_value_confirm_yesno>
 8012c54:	4603      	mov	r3, r0
 8012c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8012c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d010      	beq.n	8012c84 <SVCCTL_App_Notification+0x53c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8012c62:	4851      	ldr	r0, [pc, #324]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012c64:	f7fe fefe 	bl	8011a64 <DbgTraceGetFileName>
 8012c68:	4601      	mov	r1, r0
 8012c6a:	f240 23df 	movw	r3, #735	@ 0x2df
 8012c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012c70:	484f      	ldr	r0, [pc, #316]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012c72:	f002 fdf3 	bl	801585c <iprintf>
 8012c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4857      	ldr	r0, [pc, #348]	@ (8012ddc <SVCCTL_App_Notification+0x694>)
 8012c7e:	f002 fded 	bl	801585c <iprintf>
          break;
 8012c82:	e085      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8012c84:	4848      	ldr	r0, [pc, #288]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012c86:	f7fe feed 	bl	8011a64 <DbgTraceGetFileName>
 8012c8a:	4601      	mov	r1, r0
 8012c8c:	f240 23e3 	movw	r3, #739	@ 0x2e3
 8012c90:	4a46      	ldr	r2, [pc, #280]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012c92:	4847      	ldr	r0, [pc, #284]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012c94:	f002 fde2 	bl	801585c <iprintf>
 8012c98:	4851      	ldr	r0, [pc, #324]	@ (8012de0 <SVCCTL_App_Notification+0x698>)
 8012c9a:	f002 fe4f 	bl	801593c <puts>
          break;
 8012c9e:	e077      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ca2:	3302      	adds	r3, #2
 8012ca4:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8012ca6:	4840      	ldr	r0, [pc, #256]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012ca8:	f7fe fedc 	bl	8011a64 <DbgTraceGetFileName>
 8012cac:	4601      	mov	r1, r0
 8012cae:	f240 23ed 	movw	r3, #749	@ 0x2ed
 8012cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012cb4:	483e      	ldr	r0, [pc, #248]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012cb6:	f002 fdd1 	bl	801585c <iprintf>
 8012cba:	484a      	ldr	r0, [pc, #296]	@ (8012de4 <SVCCTL_App_Notification+0x69c>)
 8012cbc:	f002 fe3e 	bl	801593c <puts>
          if (p_pairing_complete->Status != 0)
 8012cc0:	6a3b      	ldr	r3, [r7, #32]
 8012cc2:	789b      	ldrb	r3, [r3, #2]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d013      	beq.n	8012cf0 <SVCCTL_App_Notification+0x5a8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8012cc8:	4837      	ldr	r0, [pc, #220]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012cca:	f7fe fecb 	bl	8011a64 <DbgTraceGetFileName>
 8012cce:	4601      	mov	r1, r0
 8012cd0:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8012cd4:	4a35      	ldr	r2, [pc, #212]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012cd6:	4836      	ldr	r0, [pc, #216]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012cd8:	f002 fdc0 	bl	801585c <iprintf>
 8012cdc:	6a3b      	ldr	r3, [r7, #32]
 8012cde:	789b      	ldrb	r3, [r3, #2]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6a3b      	ldr	r3, [r7, #32]
 8012ce4:	78db      	ldrb	r3, [r3, #3]
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	483f      	ldr	r0, [pc, #252]	@ (8012de8 <SVCCTL_App_Notification+0x6a0>)
 8012cea:	f002 fdb7 	bl	801585c <iprintf>
 8012cee:	e00c      	b.n	8012d0a <SVCCTL_App_Notification+0x5c2>
            APP_DBG_MSG("     - Pairing Success\n");
 8012cf0:	482d      	ldr	r0, [pc, #180]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012cf2:	f7fe feb7 	bl	8011a64 <DbgTraceGetFileName>
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 8012cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012cfe:	482c      	ldr	r0, [pc, #176]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012d00:	f002 fdac 	bl	801585c <iprintf>
 8012d04:	4839      	ldr	r0, [pc, #228]	@ (8012dec <SVCCTL_App_Notification+0x6a4>)
 8012d06:	f002 fe19 	bl	801593c <puts>
          APP_DBG_MSG("\n");
 8012d0a:	4827      	ldr	r0, [pc, #156]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012d0c:	f7fe feaa 	bl	8011a64 <DbgTraceGetFileName>
 8012d10:	4601      	mov	r1, r0
 8012d12:	f240 23f6 	movw	r3, #758	@ 0x2f6
 8012d16:	4a25      	ldr	r2, [pc, #148]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012d18:	4825      	ldr	r0, [pc, #148]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012d1a:	f002 fd9f 	bl	801585c <iprintf>
 8012d1e:	200a      	movs	r0, #10
 8012d20:	f002 fdae 	bl	8015880 <putchar>
          break;
 8012d24:	e034      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8012d26:	4820      	ldr	r0, [pc, #128]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012d28:	f7fe fe9c 	bl	8011a64 <DbgTraceGetFileName>
 8012d2c:	4601      	mov	r1, r0
 8012d2e:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8012d32:	4a1e      	ldr	r2, [pc, #120]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012d34:	481e      	ldr	r0, [pc, #120]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012d36:	f002 fd91 	bl	801585c <iprintf>
 8012d3a:	482d      	ldr	r0, [pc, #180]	@ (8012df0 <SVCCTL_App_Notification+0x6a8>)
 8012d3c:	f002 fd8e 	bl	801585c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8012d40:	4b1f      	ldr	r3, [pc, #124]	@ (8012dc0 <SVCCTL_App_Notification+0x678>)
 8012d42:	8adb      	ldrh	r3, [r3, #22]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fd fc18 	bl	801057a <aci_gatt_confirm_indication>
        break;
 8012d4a:	e021      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d4e:	3302      	adds	r3, #2
 8012d50:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 8012d52:	4815      	ldr	r0, [pc, #84]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012d54:	f7fe fe86 	bl	8011a64 <DbgTraceGetFileName>
 8012d58:	4601      	mov	r1, r0
 8012d5a:	f240 330a 	movw	r3, #778	@ 0x30a
 8012d5e:	4a13      	ldr	r2, [pc, #76]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012d60:	4813      	ldr	r0, [pc, #76]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012d62:	f002 fd7b 	bl	801585c <iprintf>
 8012d66:	4823      	ldr	r0, [pc, #140]	@ (8012df4 <SVCCTL_App_Notification+0x6ac>)
 8012d68:	f002 fde8 	bl	801593c <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 8012d6c:	480e      	ldr	r0, [pc, #56]	@ (8012da8 <SVCCTL_App_Notification+0x660>)
 8012d6e:	f7fe fe79 	bl	8011a64 <DbgTraceGetFileName>
 8012d72:	4601      	mov	r1, r0
 8012d74:	f240 330b 	movw	r3, #779	@ 0x30b
 8012d78:	4a0c      	ldr	r2, [pc, #48]	@ (8012dac <SVCCTL_App_Notification+0x664>)
 8012d7a:	480d      	ldr	r0, [pc, #52]	@ (8012db0 <SVCCTL_App_Notification+0x668>)
 8012d7c:	f002 fd6e 	bl	801585c <iprintf>
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	4619      	mov	r1, r3
 8012d86:	481c      	ldr	r0, [pc, #112]	@ (8012df8 <SVCCTL_App_Notification+0x6b0>)
 8012d88:	f002 fd68 	bl	801585c <iprintf>
          break;
 8012d8c:	e000      	b.n	8012d90 <SVCCTL_App_Notification+0x648>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8012d8e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012d90:	e001      	b.n	8012d96 <SVCCTL_App_Notification+0x64e>
      break;
 8012d92:	bf00      	nop
 8012d94:	e000      	b.n	8012d98 <SVCCTL_App_Notification+0x650>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012d96:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8012d98:	2301      	movs	r3, #1
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3730      	adds	r7, #48	@ 0x30
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bdb0      	pop	{r4, r5, r7, pc}
 8012da2:	bf00      	nop
 8012da4:	20001a81 	.word	0x20001a81
 8012da8:	08018aec 	.word	0x08018aec
 8012dac:	0801a488 	.word	0x0801a488
 8012db0:	08018b08 	.word	0x08018b08
 8012db4:	08018eb4 	.word	0x08018eb4
 8012db8:	08018edc 	.word	0x08018edc
 8012dbc:	08018f0c 	.word	0x08018f0c
 8012dc0:	200019f8 	.word	0x200019f8
 8012dc4:	0001b207 	.word	0x0001b207
 8012dc8:	08018f34 	.word	0x08018f34
 8012dcc:	08018f68 	.word	0x08018f68
 8012dd0:	08018f90 	.word	0x08018f90
 8012dd4:	08018fc4 	.word	0x08018fc4
 8012dd8:	08018fe0 	.word	0x08018fe0
 8012ddc:	08018ff8 	.word	0x08018ff8
 8012de0:	08019048 	.word	0x08019048
 8012de4:	08019090 	.word	0x08019090
 8012de8:	080190bc 	.word	0x080190bc
 8012dec:	080190f8 	.word	0x080190f8
 8012df0:	08019110 	.word	0x08019110
 8012df4:	08019138 	.word	0x08019138
 8012df8:	0801915c 	.word	0x0801915c

08012dfc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8012e02:	4b06      	ldr	r3, [pc, #24]	@ (8012e1c <Ble_Tl_Init+0x20>)
 8012e04:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8012e06:	4b06      	ldr	r3, [pc, #24]	@ (8012e20 <Ble_Tl_Init+0x24>)
 8012e08:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8012e0a:	463b      	mov	r3, r7
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	4805      	ldr	r0, [pc, #20]	@ (8012e24 <Ble_Tl_Init+0x28>)
 8012e10:	f7fe f90c 	bl	801102c <hci_init>

  return;
 8012e14:	bf00      	nop
}
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	200300d8 	.word	0x200300d8
 8012e20:	080137bd 	.word	0x080137bd
 8012e24:	08013785 	.word	0x08013785

08012e28 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8012e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e2a:	b08d      	sub	sp, #52	@ 0x34
 8012e2c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8012e2e:	2300      	movs	r3, #0
 8012e30:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012e32:	2392      	movs	r3, #146	@ 0x92
 8012e34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8012e36:	48a3      	ldr	r0, [pc, #652]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012e38:	f7fe fe14 	bl	8011a64 <DbgTraceGetFileName>
 8012e3c:	4601      	mov	r1, r0
 8012e3e:	f240 3349 	movw	r3, #841	@ 0x349
 8012e42:	4aa1      	ldr	r2, [pc, #644]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012e44:	48a1      	ldr	r0, [pc, #644]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012e46:	f002 fd09 	bl	801585c <iprintf>
 8012e4a:	48a1      	ldr	r0, [pc, #644]	@ (80130d0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8012e4c:	f002 fd76 	bl	801593c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8012e50:	f7fd fd7d 	bl	801094e <hci_reset>
 8012e54:	4603      	mov	r3, r0
 8012e56:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012e58:	7dfb      	ldrb	r3, [r7, #23]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00f      	beq.n	8012e7e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8012e5e:	4899      	ldr	r0, [pc, #612]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012e60:	f7fe fe00 	bl	8011a64 <DbgTraceGetFileName>
 8012e64:	4601      	mov	r1, r0
 8012e66:	f240 3352 	movw	r3, #850	@ 0x352
 8012e6a:	4a97      	ldr	r2, [pc, #604]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012e6c:	4897      	ldr	r0, [pc, #604]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012e6e:	f002 fcf5 	bl	801585c <iprintf>
 8012e72:	7dfb      	ldrb	r3, [r7, #23]
 8012e74:	4619      	mov	r1, r3
 8012e76:	4897      	ldr	r0, [pc, #604]	@ (80130d4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8012e78:	f002 fcf0 	bl	801585c <iprintf>
 8012e7c:	e00c      	b.n	8012e98 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8012e7e:	4891      	ldr	r0, [pc, #580]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012e80:	f7fe fdf0 	bl	8011a64 <DbgTraceGetFileName>
 8012e84:	4601      	mov	r1, r0
 8012e86:	f240 3356 	movw	r3, #854	@ 0x356
 8012e8a:	4a8f      	ldr	r2, [pc, #572]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012e8c:	488f      	ldr	r0, [pc, #572]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012e8e:	f002 fce5 	bl	801585c <iprintf>
 8012e92:	4891      	ldr	r0, [pc, #580]	@ (80130d8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8012e94:	f002 fd52 	bl	801593c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012e98:	f000 fad8 	bl	801344c <BleGetBdAddress>
 8012e9c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8012e9e:	693a      	ldr	r2, [r7, #16]
 8012ea0:	2106      	movs	r1, #6
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	f7fd fc13 	bl	80106ce <aci_hal_write_config_data>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00f      	beq.n	8012ed2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8012eb2:	4884      	ldr	r0, [pc, #528]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012eb4:	f7fe fdd6 	bl	8011a64 <DbgTraceGetFileName>
 8012eb8:	4601      	mov	r1, r0
 8012eba:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8012ebe:	4a82      	ldr	r2, [pc, #520]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012ec0:	4882      	ldr	r0, [pc, #520]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012ec2:	f002 fccb 	bl	801585c <iprintf>
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
 8012ec8:	4619      	mov	r1, r3
 8012eca:	4884      	ldr	r0, [pc, #528]	@ (80130dc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8012ecc:	f002 fcc6 	bl	801585c <iprintf>
 8012ed0:	e035      	b.n	8012f3e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8012ed2:	487c      	ldr	r0, [pc, #496]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012ed4:	f7fe fdc6 	bl	8011a64 <DbgTraceGetFileName>
 8012ed8:	4601      	mov	r1, r0
 8012eda:	f44f 7359 	mov.w	r3, #868	@ 0x364
 8012ede:	4a7a      	ldr	r2, [pc, #488]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012ee0:	487a      	ldr	r0, [pc, #488]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012ee2:	f002 fcbb 	bl	801585c <iprintf>
 8012ee6:	487e      	ldr	r0, [pc, #504]	@ (80130e0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8012ee8:	f002 fd28 	bl	801593c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8012eec:	4875      	ldr	r0, [pc, #468]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012eee:	f7fe fdb9 	bl	8011a64 <DbgTraceGetFileName>
 8012ef2:	4601      	mov	r1, r0
 8012ef4:	f240 3365 	movw	r3, #869	@ 0x365
 8012ef8:	4a73      	ldr	r2, [pc, #460]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012efa:	4874      	ldr	r0, [pc, #464]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012efc:	f002 fcae 	bl	801585c <iprintf>
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	3305      	adds	r3, #5
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	4618      	mov	r0, r3
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	3304      	adds	r3, #4
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	461c      	mov	r4, r3
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	3303      	adds	r3, #3
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	461d      	mov	r5, r3
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	3302      	adds	r3, #2
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	3301      	adds	r3, #1
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	4619      	mov	r1, r3
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	9302      	str	r3, [sp, #8]
 8012f2e:	9101      	str	r1, [sp, #4]
 8012f30:	9200      	str	r2, [sp, #0]
 8012f32:	462b      	mov	r3, r5
 8012f34:	4622      	mov	r2, r4
 8012f36:	4601      	mov	r1, r0
 8012f38:	486a      	ldr	r0, [pc, #424]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8012f3a:	f002 fc8f 	bl	801585c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8012f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8012f40:	2110      	movs	r1, #16
 8012f42:	2018      	movs	r0, #24
 8012f44:	f7fd fbc3 	bl	80106ce <aci_hal_write_config_data>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012f4c:	7dfb      	ldrb	r3, [r7, #23]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00f      	beq.n	8012f72 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8012f52:	485c      	ldr	r0, [pc, #368]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f54:	f7fe fd86 	bl	8011a64 <DbgTraceGetFileName>
 8012f58:	4601      	mov	r1, r0
 8012f5a:	f240 3387 	movw	r3, #903	@ 0x387
 8012f5e:	4a5a      	ldr	r2, [pc, #360]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f60:	485a      	ldr	r0, [pc, #360]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f62:	f002 fc7b 	bl	801585c <iprintf>
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	4860      	ldr	r0, [pc, #384]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8012f6c:	f002 fc76 	bl	801585c <iprintf>
 8012f70:	e00c      	b.n	8012f8c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8012f72:	4854      	ldr	r0, [pc, #336]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f74:	f7fe fd76 	bl	8011a64 <DbgTraceGetFileName>
 8012f78:	4601      	mov	r1, r0
 8012f7a:	f240 338b 	movw	r3, #907	@ 0x38b
 8012f7e:	4a52      	ldr	r2, [pc, #328]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f80:	4852      	ldr	r0, [pc, #328]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f82:	f002 fc6b 	bl	801585c <iprintf>
 8012f86:	485a      	ldr	r0, [pc, #360]	@ (80130f0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8012f88:	f002 fcd8 	bl	801593c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012f8c:	4a59      	ldr	r2, [pc, #356]	@ (80130f4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8012f8e:	2110      	movs	r1, #16
 8012f90:	2008      	movs	r0, #8
 8012f92:	f7fd fb9c 	bl	80106ce <aci_hal_write_config_data>
 8012f96:	4603      	mov	r3, r0
 8012f98:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00f      	beq.n	8012fc0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8012fa0:	4848      	ldr	r0, [pc, #288]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fa2:	f7fe fd5f 	bl	8011a64 <DbgTraceGetFileName>
 8012fa6:	4601      	mov	r1, r0
 8012fa8:	f44f 7365 	mov.w	r3, #916	@ 0x394
 8012fac:	4a46      	ldr	r2, [pc, #280]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fae:	4847      	ldr	r0, [pc, #284]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fb0:	f002 fc54 	bl	801585c <iprintf>
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	484f      	ldr	r0, [pc, #316]	@ (80130f8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8012fba:	f002 fc4f 	bl	801585c <iprintf>
 8012fbe:	e00c      	b.n	8012fda <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8012fc0:	4840      	ldr	r0, [pc, #256]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fc2:	f7fe fd4f 	bl	8011a64 <DbgTraceGetFileName>
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	f44f 7366 	mov.w	r3, #920	@ 0x398
 8012fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fce:	483f      	ldr	r0, [pc, #252]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fd0:	f002 fc44 	bl	801585c <iprintf>
 8012fd4:	4849      	ldr	r0, [pc, #292]	@ (80130fc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8012fd6:	f002 fcb1 	bl	801593c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8012fda:	211c      	movs	r1, #28
 8012fdc:	2001      	movs	r0, #1
 8012fde:	f7fd fbfb 	bl	80107d8 <aci_hal_set_tx_power_level>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00f      	beq.n	801300c <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8012fec:	4835      	ldr	r0, [pc, #212]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fee:	f7fe fd39 	bl	8011a64 <DbgTraceGetFileName>
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8012ff8:	4a33      	ldr	r2, [pc, #204]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012ffa:	4834      	ldr	r0, [pc, #208]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012ffc:	f002 fc2e 	bl	801585c <iprintf>
 8013000:	7dfb      	ldrb	r3, [r7, #23]
 8013002:	4619      	mov	r1, r3
 8013004:	483e      	ldr	r0, [pc, #248]	@ (8013100 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8013006:	f002 fc29 	bl	801585c <iprintf>
 801300a:	e00c      	b.n	8013026 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 801300c:	482d      	ldr	r0, [pc, #180]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801300e:	f7fe fd29 	bl	8011a64 <DbgTraceGetFileName>
 8013012:	4601      	mov	r1, r0
 8013014:	f240 33a5 	movw	r3, #933	@ 0x3a5
 8013018:	4a2b      	ldr	r2, [pc, #172]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801301a:	482c      	ldr	r0, [pc, #176]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801301c:	f002 fc1e 	bl	801585c <iprintf>
 8013020:	4838      	ldr	r0, [pc, #224]	@ (8013104 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013022:	f002 fc8b 	bl	801593c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013026:	f7fc fffc 	bl	8010022 <aci_gatt_init>
 801302a:	4603      	mov	r3, r0
 801302c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801302e:	7dfb      	ldrb	r3, [r7, #23]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d00f      	beq.n	8013054 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013034:	4823      	ldr	r0, [pc, #140]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013036:	f7fe fd15 	bl	8011a64 <DbgTraceGetFileName>
 801303a:	4601      	mov	r1, r0
 801303c:	f240 33ae 	movw	r3, #942	@ 0x3ae
 8013040:	4a21      	ldr	r2, [pc, #132]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013042:	4822      	ldr	r0, [pc, #136]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013044:	f002 fc0a 	bl	801585c <iprintf>
 8013048:	7dfb      	ldrb	r3, [r7, #23]
 801304a:	4619      	mov	r1, r3
 801304c:	482e      	ldr	r0, [pc, #184]	@ (8013108 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801304e:	f002 fc05 	bl	801585c <iprintf>
 8013052:	e00c      	b.n	801306e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013054:	481b      	ldr	r0, [pc, #108]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013056:	f7fe fd05 	bl	8011a64 <DbgTraceGetFileName>
 801305a:	4601      	mov	r1, r0
 801305c:	f240 33b2 	movw	r3, #946	@ 0x3b2
 8013060:	4a19      	ldr	r2, [pc, #100]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013062:	481a      	ldr	r0, [pc, #104]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013064:	f002 fbfa 	bl	801585c <iprintf>
 8013068:	4828      	ldr	r0, [pc, #160]	@ (801310c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801306a:	f002 fc67 	bl	801593c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013072:	7bfb      	ldrb	r3, [r7, #15]
 8013074:	f043 0301 	orr.w	r3, r3, #1
 8013078:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801307a:	7bfb      	ldrb	r3, [r7, #15]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d069      	beq.n	8013154 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013080:	4b23      	ldr	r3, [pc, #140]	@ (8013110 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013082:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013084:	1dba      	adds	r2, r7, #6
 8013086:	7bf8      	ldrb	r0, [r7, #15]
 8013088:	1cbb      	adds	r3, r7, #2
 801308a:	9301      	str	r3, [sp, #4]
 801308c:	1d3b      	adds	r3, r7, #4
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	4613      	mov	r3, r2
 8013092:	2209      	movs	r2, #9
 8013094:	2100      	movs	r1, #0
 8013096:	f7fc fe1a 	bl	800fcce <aci_gap_init>
 801309a:	4603      	mov	r3, r0
 801309c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801309e:	7dfb      	ldrb	r3, [r7, #23]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d039      	beq.n	8013118 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80130a4:	4807      	ldr	r0, [pc, #28]	@ (80130c4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80130a6:	f7fe fcdd 	bl	8011a64 <DbgTraceGetFileName>
 80130aa:	4601      	mov	r1, r0
 80130ac:	f240 33d2 	movw	r3, #978	@ 0x3d2
 80130b0:	4a05      	ldr	r2, [pc, #20]	@ (80130c8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80130b2:	4806      	ldr	r0, [pc, #24]	@ (80130cc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80130b4:	f002 fbd2 	bl	801585c <iprintf>
 80130b8:	7dfb      	ldrb	r3, [r7, #23]
 80130ba:	4619      	mov	r1, r3
 80130bc:	4815      	ldr	r0, [pc, #84]	@ (8013114 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80130be:	f002 fbcd 	bl	801585c <iprintf>
 80130c2:	e036      	b.n	8013132 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80130c4:	08018aec 	.word	0x08018aec
 80130c8:	0801a4a0 	.word	0x0801a4a0
 80130cc:	08018b08 	.word	0x08018b08
 80130d0:	08019174 	.word	0x08019174
 80130d4:	080191a0 	.word	0x080191a0
 80130d8:	080191d0 	.word	0x080191d0
 80130dc:	080191f0 	.word	0x080191f0
 80130e0:	0801924c 	.word	0x0801924c
 80130e4:	08019298 	.word	0x08019298
 80130e8:	0801a458 	.word	0x0801a458
 80130ec:	080192d4 	.word	0x080192d4
 80130f0:	0801932c 	.word	0x0801932c
 80130f4:	0801a468 	.word	0x0801a468
 80130f8:	08019374 	.word	0x08019374
 80130fc:	080193cc 	.word	0x080193cc
 8013100:	08019414 	.word	0x08019414
 8013104:	08019454 	.word	0x08019454
 8013108:	08019484 	.word	0x08019484
 801310c:	080194b8 	.word	0x080194b8
 8013110:	080194dc 	.word	0x080194dc
 8013114:	080194e8 	.word	0x080194e8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8013118:	487e      	ldr	r0, [pc, #504]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801311a:	f7fe fca3 	bl	8011a64 <DbgTraceGetFileName>
 801311e:	4601      	mov	r1, r0
 8013120:	f240 33d6 	movw	r3, #982	@ 0x3d6
 8013124:	4a7c      	ldr	r2, [pc, #496]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013126:	487d      	ldr	r0, [pc, #500]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013128:	f002 fb98 	bl	801585c <iprintf>
 801312c:	487c      	ldr	r0, [pc, #496]	@ (8013320 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 801312e:	f002 fc05 	bl	801593c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013132:	88fc      	ldrh	r4, [r7, #6]
 8013134:	88bd      	ldrh	r5, [r7, #4]
 8013136:	68b8      	ldr	r0, [r7, #8]
 8013138:	f7ed f822 	bl	8000180 <strlen>
 801313c:	4603      	mov	r3, r0
 801313e:	b2da      	uxtb	r2, r3
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	4613      	mov	r3, r2
 8013146:	2200      	movs	r2, #0
 8013148:	4629      	mov	r1, r5
 801314a:	4620      	mov	r0, r4
 801314c:	f7fd f96c 	bl	8010428 <aci_gatt_update_char_value>
 8013150:	4603      	mov	r3, r0
 8013152:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013154:	88f8      	ldrh	r0, [r7, #6]
 8013156:	8879      	ldrh	r1, [r7, #2]
 8013158:	463b      	mov	r3, r7
 801315a:	9300      	str	r3, [sp, #0]
 801315c:	2302      	movs	r3, #2
 801315e:	2200      	movs	r2, #0
 8013160:	f7fd f962 	bl	8010428 <aci_gatt_update_char_value>
 8013164:	4603      	mov	r3, r0
 8013166:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013168:	2202      	movs	r2, #2
 801316a:	2102      	movs	r1, #2
 801316c:	2000      	movs	r0, #0
 801316e:	f7fd fc12 	bl	8010996 <hci_le_set_default_phy>
 8013172:	4603      	mov	r3, r0
 8013174:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013176:	7dfb      	ldrb	r3, [r7, #23]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d00f      	beq.n	801319c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801317c:	4865      	ldr	r0, [pc, #404]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801317e:	f7fe fc71 	bl	8011a64 <DbgTraceGetFileName>
 8013182:	4601      	mov	r1, r0
 8013184:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8013188:	4a63      	ldr	r2, [pc, #396]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801318a:	4864      	ldr	r0, [pc, #400]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801318c:	f002 fb66 	bl	801585c <iprintf>
 8013190:	7dfb      	ldrb	r3, [r7, #23]
 8013192:	4619      	mov	r1, r3
 8013194:	4863      	ldr	r0, [pc, #396]	@ (8013324 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8013196:	f002 fb61 	bl	801585c <iprintf>
 801319a:	e00c      	b.n	80131b6 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 801319c:	485d      	ldr	r0, [pc, #372]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801319e:	f7fe fc61 	bl	8011a64 <DbgTraceGetFileName>
 80131a2:	4601      	mov	r1, r0
 80131a4:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 80131a8:	4a5b      	ldr	r2, [pc, #364]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131aa:	485c      	ldr	r0, [pc, #368]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80131ac:	f002 fb56 	bl	801585c <iprintf>
 80131b0:	485d      	ldr	r0, [pc, #372]	@ (8013328 <Ble_Hci_Gap_Gatt_Init+0x500>)
 80131b2:	f002 fbc3 	bl	801593c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80131b6:	4b5d      	ldr	r3, [pc, #372]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80131b8:	2201      	movs	r2, #1
 80131ba:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80131bc:	4b5b      	ldr	r3, [pc, #364]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fc fc05 	bl	800f9d0 <aci_gap_set_io_capability>
 80131c6:	4603      	mov	r3, r0
 80131c8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80131ca:	7dfb      	ldrb	r3, [r7, #23]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00f      	beq.n	80131f0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80131d0:	4850      	ldr	r0, [pc, #320]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80131d2:	f7fe fc47 	bl	8011a64 <DbgTraceGetFileName>
 80131d6:	4601      	mov	r1, r0
 80131d8:	f240 4306 	movw	r3, #1030	@ 0x406
 80131dc:	4a4e      	ldr	r2, [pc, #312]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131de:	484f      	ldr	r0, [pc, #316]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80131e0:	f002 fb3c 	bl	801585c <iprintf>
 80131e4:	7dfb      	ldrb	r3, [r7, #23]
 80131e6:	4619      	mov	r1, r3
 80131e8:	4851      	ldr	r0, [pc, #324]	@ (8013330 <Ble_Hci_Gap_Gatt_Init+0x508>)
 80131ea:	f002 fb37 	bl	801585c <iprintf>
 80131ee:	e00c      	b.n	801320a <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80131f0:	4848      	ldr	r0, [pc, #288]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80131f2:	f7fe fc37 	bl	8011a64 <DbgTraceGetFileName>
 80131f6:	4601      	mov	r1, r0
 80131f8:	f240 430a 	movw	r3, #1034	@ 0x40a
 80131fc:	4a46      	ldr	r2, [pc, #280]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131fe:	4847      	ldr	r0, [pc, #284]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013200:	f002 fb2c 	bl	801585c <iprintf>
 8013204:	484b      	ldr	r0, [pc, #300]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8013206:	f002 fb99 	bl	801593c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801320a:	4b48      	ldr	r3, [pc, #288]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801320c:	2201      	movs	r2, #1
 801320e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013210:	4b46      	ldr	r3, [pc, #280]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013212:	2208      	movs	r2, #8
 8013214:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8013216:	4b45      	ldr	r3, [pc, #276]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013218:	2210      	movs	r2, #16
 801321a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 801321c:	4b43      	ldr	r3, [pc, #268]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801321e:	2200      	movs	r2, #0
 8013220:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013222:	4b42      	ldr	r3, [pc, #264]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013224:	4a44      	ldr	r2, [pc, #272]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8013226:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013228:	4b40      	ldr	r3, [pc, #256]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801322a:	2200      	movs	r2, #0
 801322c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801322e:	4b3f      	ldr	r3, [pc, #252]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013230:	789c      	ldrb	r4, [r3, #2]
 8013232:	4b3e      	ldr	r3, [pc, #248]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013234:	785d      	ldrb	r5, [r3, #1]
 8013236:	4b3d      	ldr	r3, [pc, #244]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013238:	791b      	ldrb	r3, [r3, #4]
 801323a:	4a3c      	ldr	r2, [pc, #240]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801323c:	7952      	ldrb	r2, [r2, #5]
 801323e:	493b      	ldr	r1, [pc, #236]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013240:	78c9      	ldrb	r1, [r1, #3]
 8013242:	483a      	ldr	r0, [pc, #232]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013244:	6880      	ldr	r0, [r0, #8]
 8013246:	2600      	movs	r6, #0
 8013248:	9604      	str	r6, [sp, #16]
 801324a:	9003      	str	r0, [sp, #12]
 801324c:	9102      	str	r1, [sp, #8]
 801324e:	9201      	str	r2, [sp, #4]
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	2300      	movs	r3, #0
 8013254:	2201      	movs	r2, #1
 8013256:	4629      	mov	r1, r5
 8013258:	4620      	mov	r0, r4
 801325a:	f7fc fc0d 	bl	800fa78 <aci_gap_set_authentication_requirement>
 801325e:	4603      	mov	r3, r0
 8013260:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013262:	7dfb      	ldrb	r3, [r7, #23]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00f      	beq.n	8013288 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013268:	482a      	ldr	r0, [pc, #168]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801326a:	f7fe fbfb 	bl	8011a64 <DbgTraceGetFileName>
 801326e:	4601      	mov	r1, r0
 8013270:	f240 4325 	movw	r3, #1061	@ 0x425
 8013274:	4a28      	ldr	r2, [pc, #160]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013276:	4829      	ldr	r0, [pc, #164]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013278:	f002 faf0 	bl	801585c <iprintf>
 801327c:	7dfb      	ldrb	r3, [r7, #23]
 801327e:	4619      	mov	r1, r3
 8013280:	482e      	ldr	r0, [pc, #184]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013282:	f002 faeb 	bl	801585c <iprintf>
 8013286:	e00c      	b.n	80132a2 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8013288:	4822      	ldr	r0, [pc, #136]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801328a:	f7fe fbeb 	bl	8011a64 <DbgTraceGetFileName>
 801328e:	4601      	mov	r1, r0
 8013290:	f240 4329 	movw	r3, #1065	@ 0x429
 8013294:	4a20      	ldr	r2, [pc, #128]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013296:	4821      	ldr	r0, [pc, #132]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013298:	f002 fae0 	bl	801585c <iprintf>
 801329c:	4828      	ldr	r0, [pc, #160]	@ (8013340 <Ble_Hci_Gap_Gatt_Init+0x518>)
 801329e:	f002 fb4d 	bl	801593c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80132a2:	4b22      	ldr	r3, [pc, #136]	@ (801332c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132a4:	789b      	ldrb	r3, [r3, #2]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d023      	beq.n	80132f2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 80132aa:	f7fc fe2f 	bl	800ff0c <aci_gap_configure_filter_accept_list>
 80132ae:	4603      	mov	r3, r0
 80132b0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80132b2:	7dfb      	ldrb	r3, [r7, #23]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00f      	beq.n	80132d8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80132b8:	4816      	ldr	r0, [pc, #88]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132ba:	f7fe fbd3 	bl	8011a64 <DbgTraceGetFileName>
 80132be:	4601      	mov	r1, r0
 80132c0:	f240 4334 	movw	r3, #1076	@ 0x434
 80132c4:	4a14      	ldr	r2, [pc, #80]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132c6:	4815      	ldr	r0, [pc, #84]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132c8:	f002 fac8 	bl	801585c <iprintf>
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	4619      	mov	r1, r3
 80132d0:	481c      	ldr	r0, [pc, #112]	@ (8013344 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80132d2:	f002 fac3 	bl	801585c <iprintf>
 80132d6:	e00c      	b.n	80132f2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80132d8:	480e      	ldr	r0, [pc, #56]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132da:	f7fe fbc3 	bl	8011a64 <DbgTraceGetFileName>
 80132de:	4601      	mov	r1, r0
 80132e0:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80132e4:	4a0c      	ldr	r2, [pc, #48]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132e6:	480d      	ldr	r0, [pc, #52]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132e8:	f002 fab8 	bl	801585c <iprintf>
 80132ec:	4816      	ldr	r0, [pc, #88]	@ (8013348 <Ble_Hci_Gap_Gatt_Init+0x520>)
 80132ee:	f002 fb25 	bl	801593c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80132f2:	4808      	ldr	r0, [pc, #32]	@ (8013314 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132f4:	f7fe fbb6 	bl	8011a64 <DbgTraceGetFileName>
 80132f8:	4601      	mov	r1, r0
 80132fa:	f240 433b 	movw	r3, #1083	@ 0x43b
 80132fe:	4a06      	ldr	r2, [pc, #24]	@ (8013318 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013300:	4806      	ldr	r0, [pc, #24]	@ (801331c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013302:	f002 faab 	bl	801585c <iprintf>
 8013306:	4811      	ldr	r0, [pc, #68]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x524>)
 8013308:	f002 faa8 	bl	801585c <iprintf>
}
 801330c:	bf00      	nop
 801330e:	371c      	adds	r7, #28
 8013310:	46bd      	mov	sp, r7
 8013312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013314:	08018aec 	.word	0x08018aec
 8013318:	0801a4a0 	.word	0x0801a4a0
 801331c:	08018b08 	.word	0x08018b08
 8013320:	08019518 	.word	0x08019518
 8013324:	08019538 	.word	0x08019538
 8013328:	08019574 	.word	0x08019574
 801332c:	200019f8 	.word	0x200019f8
 8013330:	080195a0 	.word	0x080195a0
 8013334:	080195e0 	.word	0x080195e0
 8013338:	0001b207 	.word	0x0001b207
 801333c:	08019610 	.word	0x08019610
 8013340:	0801965c 	.word	0x0801965c
 8013344:	08019698 	.word	0x08019698
 8013348:	080196d8 	.word	0x080196d8
 801334c:	08019708 	.word	0x08019708

08013350 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08c      	sub	sp, #48	@ 0x30
 8013354:	af08      	add	r7, sp, #32
 8013356:	4603      	mov	r3, r0
 8013358:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801335a:	2392      	movs	r3, #146	@ 0x92
 801335c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801335e:	4a32      	ldr	r2, [pc, #200]	@ (8013428 <Adv_Request+0xd8>)
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013366:	2300      	movs	r3, #0
 8013368:	9306      	str	r3, [sp, #24]
 801336a:	2300      	movs	r3, #0
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	2300      	movs	r3, #0
 8013370:	9304      	str	r3, [sp, #16]
 8013372:	2300      	movs	r3, #0
 8013374:	9303      	str	r3, [sp, #12]
 8013376:	2300      	movs	r3, #0
 8013378:	9302      	str	r3, [sp, #8]
 801337a:	2300      	movs	r3, #0
 801337c:	9301      	str	r3, [sp, #4]
 801337e:	2300      	movs	r3, #0
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	2300      	movs	r3, #0
 8013384:	22a0      	movs	r2, #160	@ 0xa0
 8013386:	2180      	movs	r1, #128	@ 0x80
 8013388:	2000      	movs	r0, #0
 801338a:	f7fc fa27 	bl	800f7dc <aci_gap_set_discoverable>
 801338e:	4603      	mov	r3, r0
 8013390:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013392:	7bfb      	ldrb	r3, [r7, #15]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d00f      	beq.n	80133b8 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8013398:	4824      	ldr	r0, [pc, #144]	@ (801342c <Adv_Request+0xdc>)
 801339a:	f7fe fb63 	bl	8011a64 <DbgTraceGetFileName>
 801339e:	4601      	mov	r1, r0
 80133a0:	f240 4351 	movw	r3, #1105	@ 0x451
 80133a4:	4a22      	ldr	r2, [pc, #136]	@ (8013430 <Adv_Request+0xe0>)
 80133a6:	4823      	ldr	r0, [pc, #140]	@ (8013434 <Adv_Request+0xe4>)
 80133a8:	f002 fa58 	bl	801585c <iprintf>
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
 80133ae:	4619      	mov	r1, r3
 80133b0:	4821      	ldr	r0, [pc, #132]	@ (8013438 <Adv_Request+0xe8>)
 80133b2:	f002 fa53 	bl	801585c <iprintf>
 80133b6:	e00c      	b.n	80133d2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80133b8:	481c      	ldr	r0, [pc, #112]	@ (801342c <Adv_Request+0xdc>)
 80133ba:	f7fe fb53 	bl	8011a64 <DbgTraceGetFileName>
 80133be:	4601      	mov	r1, r0
 80133c0:	f240 4355 	movw	r3, #1109	@ 0x455
 80133c4:	4a1a      	ldr	r2, [pc, #104]	@ (8013430 <Adv_Request+0xe0>)
 80133c6:	481b      	ldr	r0, [pc, #108]	@ (8013434 <Adv_Request+0xe4>)
 80133c8:	f002 fa48 	bl	801585c <iprintf>
 80133cc:	481b      	ldr	r0, [pc, #108]	@ (801343c <Adv_Request+0xec>)
 80133ce:	f002 fab5 	bl	801593c <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80133d2:	491b      	ldr	r1, [pc, #108]	@ (8013440 <Adv_Request+0xf0>)
 80133d4:	2013      	movs	r0, #19
 80133d6:	f7fc fd27 	bl	800fe28 <aci_gap_update_adv_data>
 80133da:	4603      	mov	r3, r0
 80133dc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80133de:	7bfb      	ldrb	r3, [r7, #15]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00f      	beq.n	8013404 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80133e4:	4811      	ldr	r0, [pc, #68]	@ (801342c <Adv_Request+0xdc>)
 80133e6:	f7fe fb3d 	bl	8011a64 <DbgTraceGetFileName>
 80133ea:	4601      	mov	r1, r0
 80133ec:	f240 4364 	movw	r3, #1124	@ 0x464
 80133f0:	4a0f      	ldr	r2, [pc, #60]	@ (8013430 <Adv_Request+0xe0>)
 80133f2:	4810      	ldr	r0, [pc, #64]	@ (8013434 <Adv_Request+0xe4>)
 80133f4:	f002 fa32 	bl	801585c <iprintf>
 80133f8:	7bfb      	ldrb	r3, [r7, #15]
 80133fa:	4619      	mov	r1, r3
 80133fc:	4811      	ldr	r0, [pc, #68]	@ (8013444 <Adv_Request+0xf4>)
 80133fe:	f002 fa2d 	bl	801585c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8013402:	e00d      	b.n	8013420 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8013404:	4809      	ldr	r0, [pc, #36]	@ (801342c <Adv_Request+0xdc>)
 8013406:	f7fe fb2d 	bl	8011a64 <DbgTraceGetFileName>
 801340a:	4601      	mov	r1, r0
 801340c:	f44f 638d 	mov.w	r3, #1128	@ 0x468
 8013410:	4a07      	ldr	r2, [pc, #28]	@ (8013430 <Adv_Request+0xe0>)
 8013412:	4808      	ldr	r0, [pc, #32]	@ (8013434 <Adv_Request+0xe4>)
 8013414:	f002 fa22 	bl	801585c <iprintf>
 8013418:	480b      	ldr	r0, [pc, #44]	@ (8013448 <Adv_Request+0xf8>)
 801341a:	f002 fa1f 	bl	801585c <iprintf>
  return;
 801341e:	bf00      	nop
}
 8013420:	3710      	adds	r7, #16
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	200019f8 	.word	0x200019f8
 801342c:	08018aec 	.word	0x08018aec
 8013430:	0801a4b8 	.word	0x0801a4b8
 8013434:	08018b08 	.word	0x08018b08
 8013438:	08019734 	.word	0x08019734
 801343c:	0801976c 	.word	0x0801976c
 8013440:	200000a8 	.word	0x200000a8
 8013444:	08019794 	.word	0x08019794
 8013448:	080197c8 	.word	0x080197c8

0801344c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b086      	sub	sp, #24
 8013450:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013452:	f7ff f895 	bl	8012580 <LL_FLASH_GetUDN>
 8013456:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801345e:	d023      	beq.n	80134a8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013460:	f7ff f8a6 	bl	80125b0 <LL_FLASH_GetSTCompanyID>
 8013464:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013466:	f7ff f897 	bl	8012598 <LL_FLASH_GetDeviceID>
 801346a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	b2da      	uxtb	r2, r3
 8013470:	4b16      	ldr	r3, [pc, #88]	@ (80134cc <BleGetBdAddress+0x80>)
 8013472:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	0a1b      	lsrs	r3, r3, #8
 8013478:	b2da      	uxtb	r2, r3
 801347a:	4b14      	ldr	r3, [pc, #80]	@ (80134cc <BleGetBdAddress+0x80>)
 801347c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	b2da      	uxtb	r2, r3
 8013482:	4b12      	ldr	r3, [pc, #72]	@ (80134cc <BleGetBdAddress+0x80>)
 8013484:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	b2da      	uxtb	r2, r3
 801348a:	4b10      	ldr	r3, [pc, #64]	@ (80134cc <BleGetBdAddress+0x80>)
 801348c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	0a1b      	lsrs	r3, r3, #8
 8013492:	b2da      	uxtb	r2, r3
 8013494:	4b0d      	ldr	r3, [pc, #52]	@ (80134cc <BleGetBdAddress+0x80>)
 8013496:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	0c1b      	lsrs	r3, r3, #16
 801349c:	b2da      	uxtb	r2, r3
 801349e:	4b0b      	ldr	r3, [pc, #44]	@ (80134cc <BleGetBdAddress+0x80>)
 80134a0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80134a2:	4b0a      	ldr	r3, [pc, #40]	@ (80134cc <BleGetBdAddress+0x80>)
 80134a4:	617b      	str	r3, [r7, #20]
 80134a6:	e00b      	b.n	80134c0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80134a8:	2000      	movs	r0, #0
 80134aa:	f7fe fba3 	bl	8011bf4 <OTP_Read>
 80134ae:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	617b      	str	r3, [r7, #20]
 80134ba:	e001      	b.n	80134c0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80134bc:	4b04      	ldr	r3, [pc, #16]	@ (80134d0 <BleGetBdAddress+0x84>)
 80134be:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80134c0:	697b      	ldr	r3, [r7, #20]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3718      	adds	r7, #24
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	200019f0 	.word	0x200019f0
 80134d0:	0801a450 	.word	0x0801a450

080134d4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80134da:	4b1f      	ldr	r3, [pc, #124]	@ (8013558 <Adv_Cancel+0x84>)
 80134dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80134e0:	2b05      	cmp	r3, #5
 80134e2:	d035      	beq.n	8013550 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80134e4:	2392      	movs	r3, #146	@ 0x92
 80134e6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80134e8:	f7fc f954 	bl	800f794 <aci_gap_set_non_discoverable>
 80134ec:	4603      	mov	r3, r0
 80134ee:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80134f0:	4b19      	ldr	r3, [pc, #100]	@ (8013558 <Adv_Cancel+0x84>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80134f8:	79fb      	ldrb	r3, [r7, #7]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00d      	beq.n	801351a <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80134fe:	4817      	ldr	r0, [pc, #92]	@ (801355c <Adv_Cancel+0x88>)
 8013500:	f7fe fab0 	bl	8011a64 <DbgTraceGetFileName>
 8013504:	4601      	mov	r1, r0
 8013506:	f240 43ba 	movw	r3, #1210	@ 0x4ba
 801350a:	4a15      	ldr	r2, [pc, #84]	@ (8013560 <Adv_Cancel+0x8c>)
 801350c:	4815      	ldr	r0, [pc, #84]	@ (8013564 <Adv_Cancel+0x90>)
 801350e:	f002 f9a5 	bl	801585c <iprintf>
 8013512:	4815      	ldr	r0, [pc, #84]	@ (8013568 <Adv_Cancel+0x94>)
 8013514:	f002 f9a2 	bl	801585c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8013518:	e01a      	b.n	8013550 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 801351a:	4810      	ldr	r0, [pc, #64]	@ (801355c <Adv_Cancel+0x88>)
 801351c:	f7fe faa2 	bl	8011a64 <DbgTraceGetFileName>
 8013520:	4601      	mov	r1, r0
 8013522:	f240 43be 	movw	r3, #1214	@ 0x4be
 8013526:	4a0e      	ldr	r2, [pc, #56]	@ (8013560 <Adv_Cancel+0x8c>)
 8013528:	480e      	ldr	r0, [pc, #56]	@ (8013564 <Adv_Cancel+0x90>)
 801352a:	f002 f997 	bl	801585c <iprintf>
 801352e:	480f      	ldr	r0, [pc, #60]	@ (801356c <Adv_Cancel+0x98>)
 8013530:	f002 f994 	bl	801585c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013534:	4809      	ldr	r0, [pc, #36]	@ (801355c <Adv_Cancel+0x88>)
 8013536:	f7fe fa95 	bl	8011a64 <DbgTraceGetFileName>
 801353a:	4601      	mov	r1, r0
 801353c:	f240 43bf 	movw	r3, #1215	@ 0x4bf
 8013540:	4a07      	ldr	r2, [pc, #28]	@ (8013560 <Adv_Cancel+0x8c>)
 8013542:	4808      	ldr	r0, [pc, #32]	@ (8013564 <Adv_Cancel+0x90>)
 8013544:	f002 f98a 	bl	801585c <iprintf>
 8013548:	4809      	ldr	r0, [pc, #36]	@ (8013570 <Adv_Cancel+0x9c>)
 801354a:	f002 f987 	bl	801585c <iprintf>
  return;
 801354e:	bf00      	nop
 8013550:	bf00      	nop
}
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	200019f8 	.word	0x200019f8
 801355c:	08018aec 	.word	0x08018aec
 8013560:	0801a4c4 	.word	0x0801a4c4
 8013564:	08018b08 	.word	0x08018b08
 8013568:	080197f0 	.word	0x080197f0
 801356c:	08019814 	.word	0x08019814
 8013570:	0801981c 	.word	0x0801981c

08013574 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8013574:	b590      	push	{r4, r7, lr}
 8013576:	b08d      	sub	sp, #52	@ 0x34
 8013578:	af02      	add	r7, sp, #8
 801357a:	4603      	mov	r3, r0
 801357c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {_min_interval, _max_interval}; /* ms */
 801357e:	4a59      	ldr	r2, [pc, #356]	@ (80136e4 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 8013580:	f107 030c 	add.w	r3, r7, #12
 8013584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013588:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 801358c:	4b56      	ldr	r3, [pc, #344]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	3301      	adds	r3, #1
 8013592:	2b00      	cmp	r3, #0
 8013594:	f003 0301 	and.w	r3, r3, #1
 8013598:	bfb8      	it	lt
 801359a:	425b      	neglt	r3, r3
 801359c:	b2da      	uxtb	r2, r3
 801359e:	4b52      	ldr	r3, [pc, #328]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135a0:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80135a2:	4b51      	ldr	r3, [pc, #324]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	3328      	adds	r3, #40	@ 0x28
 80135aa:	443b      	add	r3, r7
 80135ac:	3b1c      	subs	r3, #28
 80135ae:	ed93 7a00 	vldr	s14, [r3]
 80135b2:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80135b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135be:	ee17 3a90 	vmov	r3, s15
 80135c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80135c4:	4b48      	ldr	r3, [pc, #288]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	3328      	adds	r3, #40	@ 0x28
 80135cc:	443b      	add	r3, r7
 80135ce:	3b1c      	subs	r3, #28
 80135d0:	ed93 7a00 	vldr	s14, [r3]
 80135d4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80135d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135e0:	ee17 3a90 	vmov	r3, s15
 80135e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 80135e6:	2300      	movs	r3, #0
 80135e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80135ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80135ee:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80135f0:	4b3e      	ldr	r3, [pc, #248]	@ (80136ec <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d15e      	bne.n	80136b6 <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 80135f8:	4b3c      	ldr	r3, [pc, #240]	@ (80136ec <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80135fe:	4b3a      	ldr	r3, [pc, #232]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	3301      	adds	r3, #1
 8013604:	2b00      	cmp	r3, #0
 8013606:	f003 0301 	and.w	r3, r3, #1
 801360a:	bfb8      	it	lt
 801360c:	425b      	neglt	r3, r3
 801360e:	b2da      	uxtb	r2, r3
 8013610:	4b35      	ldr	r3, [pc, #212]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013612:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013614:	4b34      	ldr	r3, [pc, #208]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	009b      	lsls	r3, r3, #2
 801361a:	3328      	adds	r3, #40	@ 0x28
 801361c:	443b      	add	r3, r7
 801361e:	3b1c      	subs	r3, #28
 8013620:	ed93 7a00 	vldr	s14, [r3]
 8013624:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801362c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013630:	ee17 3a90 	vmov	r3, s15
 8013634:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013636:	4b2c      	ldr	r3, [pc, #176]	@ (80136e8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	3328      	adds	r3, #40	@ 0x28
 801363e:	443b      	add	r3, r7
 8013640:	3b1c      	subs	r3, #28
 8013642:	ed93 7a00 	vldr	s14, [r3]
 8013646:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801364a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013652:	ee17 3a90 	vmov	r3, s15
 8013656:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013658:	2300      	movs	r3, #0
 801365a:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 801365c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013660:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8013662:	4b23      	ldr	r3, [pc, #140]	@ (80136f0 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8013664:	8ad8      	ldrh	r0, [r3, #22]
 8013666:	8b7c      	ldrh	r4, [r7, #26]
 8013668:	8bba      	ldrh	r2, [r7, #28]
 801366a:	8bf9      	ldrh	r1, [r7, #30]
 801366c:	8b3b      	ldrh	r3, [r7, #24]
 801366e:	9300      	str	r3, [sp, #0]
 8013670:	4623      	mov	r3, r4
 8013672:	f7fd fa0d 	bl	8010a90 <aci_l2cap_connection_parameter_update_req>
 8013676:	4603      	mov	r3, r0
 8013678:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 801367a:	7dfb      	ldrb	r3, [r7, #23]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00d      	beq.n	801369c <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8013680:	481c      	ldr	r0, [pc, #112]	@ (80136f4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013682:	f7fe f9ef 	bl	8011a64 <DbgTraceGetFileName>
 8013686:	4601      	mov	r1, r0
 8013688:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 801368c:	4a1a      	ldr	r2, [pc, #104]	@ (80136f8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 801368e:	481b      	ldr	r0, [pc, #108]	@ (80136fc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013690:	f002 f8e4 	bl	801585c <iprintf>
 8013694:	481a      	ldr	r0, [pc, #104]	@ (8013700 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 8013696:	f002 f8e1 	bl	801585c <iprintf>
 801369a:	e00c      	b.n	80136b6 <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 801369c:	4815      	ldr	r0, [pc, #84]	@ (80136f4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 801369e:	f7fe f9e1 	bl	8011a64 <DbgTraceGetFileName>
 80136a2:	4601      	mov	r1, r0
 80136a4:	f44f 639e 	mov.w	r3, #1264	@ 0x4f0
 80136a8:	4a13      	ldr	r2, [pc, #76]	@ (80136f8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 80136aa:	4814      	ldr	r0, [pc, #80]	@ (80136fc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 80136ac:	f002 f8d6 	bl	801585c <iprintf>
 80136b0:	4814      	ldr	r0, [pc, #80]	@ (8013704 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 80136b2:	f002 f8d3 	bl	801585c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 80136b6:	7dbb      	ldrb	r3, [r7, #22]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d003      	beq.n	80136c4 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80136bc:	4812      	ldr	r0, [pc, #72]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 80136be:	f7ef f99f 	bl	8002a00 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 80136c2:	e00c      	b.n	80136de <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80136c4:	4811      	ldr	r0, [pc, #68]	@ (801370c <BLE_SVC_L2CAP_Conn_Update+0x198>)
 80136c6:	f7ef f99b 	bl	8002a00 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 80136ca:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80136cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80136ce:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80136d0:	8c3b      	ldrh	r3, [r7, #32]
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	4603      	mov	r3, r0
 80136d6:	480e      	ldr	r0, [pc, #56]	@ (8013710 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 80136d8:	f7ef f992 	bl	8002a00 <DIAG>
  return;
 80136dc:	bf00      	nop
}
 80136de:	372c      	adds	r7, #44	@ 0x2c
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd90      	pop	{r4, r7, pc}
 80136e4:	0801996c 	.word	0x0801996c
 80136e8:	20001a80 	.word	0x20001a80
 80136ec:	20001a81 	.word	0x20001a81
 80136f0:	200019f8 	.word	0x200019f8
 80136f4:	08018aec 	.word	0x08018aec
 80136f8:	0801a4d0 	.word	0x0801a4d0
 80136fc:	08018b08 	.word	0x08018b08
 8013700:	08019838 	.word	0x08019838
 8013704:	08019860 	.word	0x08019860
 8013708:	08019890 	.word	0x08019890
 801370c:	080198c8 	.word	0x080198c8
 8013710:	08019904 	.word	0x08019904

08013714 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8013718:	4b08      	ldr	r3, [pc, #32]	@ (801373c <Connection_Interval_Update_Req+0x28>)
 801371a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801371e:	2b01      	cmp	r3, #1
 8013720:	d00a      	beq.n	8013738 <Connection_Interval_Update_Req+0x24>
 8013722:	4b06      	ldr	r3, [pc, #24]	@ (801373c <Connection_Interval_Update_Req+0x28>)
 8013724:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013728:	2b00      	cmp	r3, #0
 801372a:	d005      	beq.n	8013738 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801372c:	4b03      	ldr	r3, [pc, #12]	@ (801373c <Connection_Interval_Update_Req+0x28>)
 801372e:	8adb      	ldrh	r3, [r3, #22]
 8013730:	4618      	mov	r0, r3
 8013732:	f7ff ff1f 	bl	8013574 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8013736:	bf00      	nop
 8013738:	bf00      	nop
}
 801373a:	bd80      	pop	{r7, pc}
 801373c:	200019f8 	.word	0x200019f8

08013740 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8013748:	2100      	movs	r1, #0
 801374a:	2004      	movs	r0, #4
 801374c:	f001 fec8 	bl	80154e0 <UTIL_SEQ_SetTask>

  return;
 8013750:	bf00      	nop
}
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013760:	2001      	movs	r0, #1
 8013762:	f001 ff29 	bl	80155b8 <UTIL_SEQ_SetEvt>

  return;
 8013766:	bf00      	nop
}
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}

0801376e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801376e:	b580      	push	{r7, lr}
 8013770:	b082      	sub	sp, #8
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013776:	2001      	movs	r0, #1
 8013778:	f001 ff3e 	bl	80155f8 <UTIL_SEQ_WaitEvt>

  return;
 801377c:	bf00      	nop
}
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	3308      	adds	r3, #8
 8013796:	4618      	mov	r0, r3
 8013798:	f7fd fb02 	bl	8010da0 <SVCCTL_UserEvtRx>
 801379c:	4603      	mov	r3, r0
 801379e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80137a0:	7afb      	ldrb	r3, [r7, #11]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2201      	movs	r2, #1
 80137aa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80137ac:	e003      	b.n	80137b6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2200      	movs	r2, #0
 80137b2:	701a      	strb	r2, [r3, #0]
  return;
 80137b4:	bf00      	nop
}
 80137b6:	3710      	adds	r7, #16
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80137c6:	79fb      	ldrb	r3, [r7, #7]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d002      	beq.n	80137d2 <BLE_StatusNot+0x16>
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d006      	beq.n	80137de <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80137d0:	e00b      	b.n	80137ea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80137d2:	233f      	movs	r3, #63	@ 0x3f
 80137d4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f001 feae 	bl	8015538 <UTIL_SEQ_PauseTask>
      break;
 80137dc:	e005      	b.n	80137ea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80137de:	233f      	movs	r3, #63	@ 0x3f
 80137e0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	f001 fec8 	bl	8015578 <UTIL_SEQ_ResumeTask>
      break;
 80137e8:	bf00      	nop
  }

  return;
 80137ea:	bf00      	nop
}
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
	...

080137f4 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	af00      	add	r7, sp, #0
	if ( tsBle.App.AfeSetTask )
 80137f8:	4b09      	ldr	r3, [pc, #36]	@ (8013820 <ALL_SENs_Task+0x2c>)
 80137fa:	7adb      	ldrb	r3, [r3, #11]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00c      	beq.n	801381a <ALL_SENs_Task+0x26>
	{
		tsBle.App.AfeSetTask = false;
 8013800:	4b07      	ldr	r3, [pc, #28]	@ (8013820 <ALL_SENs_Task+0x2c>)
 8013802:	2200      	movs	r2, #0
 8013804:	72da      	strb	r2, [r3, #11]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamAFE.u8TxData));
 8013806:	4907      	ldr	r1, [pc, #28]	@ (8013824 <ALL_SENs_Task+0x30>)
 8013808:	2003      	movs	r0, #3
 801380a:	f000 fc09 	bl	8014020 <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[0]++;
 801380e:	4b04      	ldr	r3, [pc, #16]	@ (8013820 <ALL_SENs_Task+0x2c>)
 8013810:	799b      	ldrb	r3, [r3, #6]
 8013812:	3301      	adds	r3, #1
 8013814:	b2da      	uxtb	r2, r3
 8013816:	4b02      	ldr	r3, [pc, #8]	@ (8013820 <ALL_SENs_Task+0x2c>)
 8013818:	719a      	strb	r2, [r3, #6]
	}
}
 801381a:	bf00      	nop
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	200019e0 	.word	0x200019e0
 8013824:	20000b2a 	.word	0x20000b2a

08013828 <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 801382c:	4b09      	ldr	r3, [pc, #36]	@ (8013854 <ACCEL_Task+0x2c>)
 801382e:	7b1b      	ldrb	r3, [r3, #12]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d00c      	beq.n	801384e <ACCEL_Task+0x26>
	{
		tsBle.App.AccelSetTask = false;
 8013834:	4b07      	ldr	r3, [pc, #28]	@ (8013854 <ACCEL_Task+0x2c>)
 8013836:	2200      	movs	r2, #0
 8013838:	731a      	strb	r2, [r3, #12]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 801383a:	4907      	ldr	r1, [pc, #28]	@ (8013858 <ACCEL_Task+0x30>)
 801383c:	2000      	movs	r0, #0
 801383e:	f000 fbef 	bl	8014020 <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[1]++;
 8013842:	4b04      	ldr	r3, [pc, #16]	@ (8013854 <ACCEL_Task+0x2c>)
 8013844:	79db      	ldrb	r3, [r3, #7]
 8013846:	3301      	adds	r3, #1
 8013848:	b2da      	uxtb	r2, r3
 801384a:	4b02      	ldr	r3, [pc, #8]	@ (8013854 <ACCEL_Task+0x2c>)
 801384c:	71da      	strb	r2, [r3, #7]
	}
}
 801384e:	bf00      	nop
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	200019e0 	.word	0x200019e0
 8013858:	20001052 	.word	0x20001052

0801385c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	2b08      	cmp	r3, #8
 801386a:	d834      	bhi.n	80138d6 <Custom_STM_App_Notification+0x7a>
 801386c:	a201      	add	r2, pc, #4	@ (adr r2, 8013874 <Custom_STM_App_Notification+0x18>)
 801386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013872:	bf00      	nop
 8013874:	08013899 	.word	0x08013899
 8013878:	080138ad 	.word	0x080138ad
 801387c:	080138d7 	.word	0x080138d7
 8013880:	080138d7 	.word	0x080138d7
 8013884:	080138d7 	.word	0x080138d7
 8013888:	080138bb 	.word	0x080138bb
 801388c:	080138c9 	.word	0x080138c9
 8013890:	080138d7 	.word	0x080138d7
 8013894:	080138d7 	.word	0x080138d7

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 8013898:	4b11      	ldr	r3, [pc, #68]	@ (80138e0 <Custom_STM_App_Notification+0x84>)
 801389a:	2201      	movs	r2, #1
 801389c:	721a      	strb	r2, [r3, #8]
    	tsBle.App.AccelNotification = true;
 801389e:	4b10      	ldr	r3, [pc, #64]	@ (80138e0 <Custom_STM_App_Notification+0x84>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 80138a4:	480f      	ldr	r0, [pc, #60]	@ (80138e4 <Custom_STM_App_Notification+0x88>)
 80138a6:	f7ef f8ab 	bl	8002a00 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 80138aa:	e015      	b.n	80138d8 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 80138ac:	4b0c      	ldr	r3, [pc, #48]	@ (80138e0 <Custom_STM_App_Notification+0x84>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 80138b2:	480d      	ldr	r0, [pc, #52]	@ (80138e8 <Custom_STM_App_Notification+0x8c>)
 80138b4:	f7ef f8a4 	bl	8002a00 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 80138b8:	e00e      	b.n	80138d8 <Custom_STM_App_Notification+0x7c>
      break;

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 80138ba:	4b09      	ldr	r3, [pc, #36]	@ (80138e0 <Custom_STM_App_Notification+0x84>)
 80138bc:	2201      	movs	r2, #1
 80138be:	721a      	strb	r2, [r3, #8]
//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 80138c0:	480a      	ldr	r0, [pc, #40]	@ (80138ec <Custom_STM_App_Notification+0x90>)
 80138c2:	f7ef f89d 	bl	8002a00 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 80138c6:	e007      	b.n	80138d8 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.AfeNotification = false;
 80138c8:	4b05      	ldr	r3, [pc, #20]	@ (80138e0 <Custom_STM_App_Notification+0x84>)
 80138ca:	2200      	movs	r2, #0
 80138cc:	721a      	strb	r2, [r3, #8]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 80138ce:	4808      	ldr	r0, [pc, #32]	@ (80138f0 <Custom_STM_App_Notification+0x94>)
 80138d0:	f7ef f896 	bl	8002a00 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 80138d4:	e000      	b.n	80138d8 <Custom_STM_App_Notification+0x7c>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80138d6:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80138d8:	bf00      	nop
}
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	200019e0 	.word	0x200019e0
 80138e4:	08019974 	.word	0x08019974
 80138e8:	080199a4 	.word	0x080199a4
 80138ec:	080199d8 	.word	0x080199d8
 80138f0:	08019a08 	.word	0x08019a08

080138f4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d002      	beq.n	801390a <Custom_APP_Notification+0x16>
 8013904:	2b01      	cmp	r3, #1
 8013906:	d002      	beq.n	801390e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8013908:	e002      	b.n	8013910 <Custom_APP_Notification+0x1c>
      break;
 801390a:	bf00      	nop
 801390c:	e000      	b.n	8013910 <Custom_APP_Notification+0x1c>
      break;
 801390e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8013910:	bf00      	nop
}
 8013912:	370c      	adds	r7, #12
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 801391c:	b480      	push	{r7}
 801391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8013920:	bf00      	nop
}
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
	...

0801392c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b090      	sub	sp, #64	@ 0x40
 8013930:	af02      	add	r7, sp, #8
 8013932:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8013934:	2300      	movs	r3, #0
 8013936:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3301      	adds	r3, #1
 801393e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8013940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2bff      	cmp	r3, #255	@ 0xff
 8013946:	f040 8113 	bne.w	8013b70 <Custom_STM_Event_Handler+0x244>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394c:	3302      	adds	r3, #2
 801394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8013950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	b29b      	uxth	r3, r3
 8013956:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801395a:	2b1a      	cmp	r3, #26
 801395c:	f200 8102 	bhi.w	8013b64 <Custom_STM_Event_Handler+0x238>
 8013960:	a201      	add	r2, pc, #4	@ (adr r2, 8013968 <Custom_STM_Event_Handler+0x3c>)
 8013962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013966:	bf00      	nop
 8013968:	080139d5 	.word	0x080139d5
 801396c:	08013b65 	.word	0x08013b65
 8013970:	08013b65 	.word	0x08013b65
 8013974:	08013b65 	.word	0x08013b65
 8013978:	08013b65 	.word	0x08013b65
 801397c:	08013b65 	.word	0x08013b65
 8013980:	08013b65 	.word	0x08013b65
 8013984:	08013b65 	.word	0x08013b65
 8013988:	08013b65 	.word	0x08013b65
 801398c:	08013b65 	.word	0x08013b65
 8013990:	08013b65 	.word	0x08013b65
 8013994:	08013b65 	.word	0x08013b65
 8013998:	08013b65 	.word	0x08013b65
 801399c:	08013b65 	.word	0x08013b65
 80139a0:	08013b65 	.word	0x08013b65
 80139a4:	08013b65 	.word	0x08013b65
 80139a8:	08013b65 	.word	0x08013b65
 80139ac:	08013b65 	.word	0x08013b65
 80139b0:	08013b65 	.word	0x08013b65
 80139b4:	08013b07 	.word	0x08013b07
 80139b8:	08013b65 	.word	0x08013b65
 80139bc:	08013b65 	.word	0x08013b65
 80139c0:	08013b65 	.word	0x08013b65
 80139c4:	08013b65 	.word	0x08013b65
 80139c8:	08013b65 	.word	0x08013b65
 80139cc:	08013b65 	.word	0x08013b65
 80139d0:	08013b47 	.word	0x08013b47
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80139d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139d6:	3302      	adds	r3, #2
 80139d8:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	885b      	ldrh	r3, [r3, #2]
 80139de:	b29b      	uxth	r3, r3
 80139e0:	461a      	mov	r2, r3
 80139e2:	4b67      	ldr	r3, [pc, #412]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 80139e4:	885b      	ldrh	r3, [r3, #2]
 80139e6:	3302      	adds	r3, #2
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d119      	bne.n	8013a20 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80139ec:	2301      	movs	r3, #1
 80139ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80139f2:	6a3b      	ldr	r3, [r7, #32]
 80139f4:	7a1b      	ldrb	r3, [r3, #8]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d002      	beq.n	8013a00 <Custom_STM_Event_Handler+0xd4>
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d008      	beq.n	8013a10 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80139fe:	e081      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 8013a00:	2301      	movs	r3, #1
 8013a02:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a04:	f107 030c 	add.w	r3, r7, #12
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7ff ff27 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013a0e:	e079      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 8013a10:	2300      	movs	r3, #0
 8013a12:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a14:	f107 030c 	add.w	r3, r7, #12
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff ff1f 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013a1e:	e071      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	885b      	ldrh	r3, [r3, #2]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	461a      	mov	r2, r3
 8013a28:	4b55      	ldr	r3, [pc, #340]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013a2a:	889b      	ldrh	r3, [r3, #4]
 8013a2c:	3302      	adds	r3, #2
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d119      	bne.n	8013a66 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013a32:	2301      	movs	r3, #1
 8013a34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8013a38:	6a3b      	ldr	r3, [r7, #32]
 8013a3a:	7a1b      	ldrb	r3, [r3, #8]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <Custom_STM_Event_Handler+0x11a>
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d008      	beq.n	8013a56 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8013a44:	e05e      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 8013a46:	2303      	movs	r3, #3
 8013a48:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a4a:	f107 030c 	add.w	r3, r7, #12
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7ff ff04 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013a54:	e056      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 8013a56:	2302      	movs	r3, #2
 8013a58:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a5a:	f107 030c 	add.w	r3, r7, #12
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff fefc 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013a64:	e04e      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	885b      	ldrh	r3, [r3, #2]
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	4b44      	ldr	r3, [pc, #272]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013a70:	891b      	ldrh	r3, [r3, #8]
 8013a72:	3302      	adds	r3, #2
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d119      	bne.n	8013aac <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8013a7e:	6a3b      	ldr	r3, [r7, #32]
 8013a80:	7a1b      	ldrb	r3, [r3, #8]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d002      	beq.n	8013a8c <Custom_STM_Event_Handler+0x160>
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d008      	beq.n	8013a9c <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8013a8a:	e03b      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8013a8c:	2306      	movs	r3, #6
 8013a8e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a90:	f107 030c 	add.w	r3, r7, #12
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7ff fee1 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013a9a:	e033      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8013a9c:	2305      	movs	r3, #5
 8013a9e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013aa0:	f107 030c 	add.w	r3, r7, #12
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7ff fed9 	bl	801385c <Custom_STM_App_Notification>
                break;
 8013aaa:	e02b      	b.n	8013b04 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013aac:	6a3b      	ldr	r3, [r7, #32]
 8013aae:	885b      	ldrh	r3, [r3, #2]
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	4b32      	ldr	r3, [pc, #200]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013ab6:	88db      	ldrh	r3, [r3, #6]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d154      	bne.n	8013b68 <Custom_STM_Event_Handler+0x23c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 8013ac4:	6a3b      	ldr	r3, [r7, #32]
 8013ac6:	f103 0208 	add.w	r2, r3, #8
 8013aca:	4b2e      	ldr	r3, [pc, #184]	@ (8013b84 <Custom_STM_Event_Handler+0x258>)
 8013acc:	3301      	adds	r3, #1
 8013ace:	6810      	ldr	r0, [r2, #0]
 8013ad0:	6851      	ldr	r1, [r2, #4]
 8013ad2:	6018      	str	r0, [r3, #0]
 8013ad4:	6059      	str	r1, [r3, #4]
 8013ad6:	8912      	ldrh	r2, [r2, #8]
 8013ad8:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 8013ada:	220a      	movs	r2, #10
 8013adc:	492a      	ldr	r1, [pc, #168]	@ (8013b88 <Custom_STM_Event_Handler+0x25c>)
 8013ade:	482b      	ldr	r0, [pc, #172]	@ (8013b8c <Custom_STM_Event_Handler+0x260>)
 8013ae0:	f001 febc 	bl	801585c <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013ae8:	2300      	movs	r3, #0
 8013aea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013aee:	e004      	b.n	8013afa <Custom_STM_Event_Handler+0x1ce>
 8013af0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013af4:	3301      	adds	r3, #1
 8013af6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013afa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013afe:	2b09      	cmp	r3, #9
 8013b00:	d9f6      	bls.n	8013af0 <Custom_STM_Event_Handler+0x1c4>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8013b02:	e031      	b.n	8013b68 <Custom_STM_Event_Handler+0x23c>
 8013b04:	e030      	b.n	8013b68 <Custom_STM_Event_Handler+0x23c>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8013b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b08:	3302      	adds	r3, #2
 8013b0a:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0e:	885b      	ldrh	r3, [r3, #2]
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	461a      	mov	r2, r3
 8013b14:	4b1a      	ldr	r3, [pc, #104]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013b16:	895b      	ldrh	r3, [r3, #10]
 8013b18:	3301      	adds	r3, #1
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d126      	bne.n	8013b6c <Custom_STM_Event_Handler+0x240>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013b1e:	2301      	movs	r3, #1
 8013b20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8013b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b26:	881b      	ldrh	r3, [r3, #0]
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fc fd7a 	bl	8010624 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 8013b30:	4b13      	ldr	r3, [pc, #76]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013b32:	8818      	ldrh	r0, [r3, #0]
 8013b34:	4b12      	ldr	r3, [pc, #72]	@ (8013b80 <Custom_STM_Event_Handler+0x254>)
 8013b36:	8959      	ldrh	r1, [r3, #10]
 8013b38:	4b15      	ldr	r3, [pc, #84]	@ (8013b90 <Custom_STM_Event_Handler+0x264>)
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	2314      	movs	r3, #20
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f7fc fc72 	bl	8010428 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8013b44:	e012      	b.n	8013b6c <Custom_STM_Event_Handler+0x240>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8013b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b48:	3302      	adds	r3, #2
 8013b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8013b4c:	2308      	movs	r3, #8
 8013b4e:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8013b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8013b58:	f107 030c 	add.w	r3, r7, #12
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff fe7d 	bl	801385c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8013b62:	e004      	b.n	8013b6e <Custom_STM_Event_Handler+0x242>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8013b64:	bf00      	nop
 8013b66:	e004      	b.n	8013b72 <Custom_STM_Event_Handler+0x246>
          break;
 8013b68:	bf00      	nop
 8013b6a:	e002      	b.n	8013b72 <Custom_STM_Event_Handler+0x246>
          break;
 8013b6c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013b6e:	e000      	b.n	8013b72 <Custom_STM_Event_Handler+0x246>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8013b70:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8013b72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8013b76:	4618      	mov	r0, r3
 8013b78:	3738      	adds	r7, #56	@ 0x38
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	20001a84 	.word	0x20001a84
 8013b84:	2000163c 	.word	0x2000163c
 8013b88:	2000163d 	.word	0x2000163d
 8013b8c:	20001647 	.word	0x20001647
 8013b90:	08019a40 	.word	0x08019a40

08013b94 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b08c      	sub	sp, #48	@ 0x30
 8013b98:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013b9a:	2392      	movs	r3, #146	@ 0x92
 8013b9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8013b9e:	48a2      	ldr	r0, [pc, #648]	@ (8013e28 <SVCCTL_InitCustomSvc+0x294>)
 8013ba0:	f7fd f8e4 	bl	8010d6c <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8013ba4:	230e      	movs	r3, #14
 8013ba6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8013ba8:	238f      	movs	r3, #143	@ 0x8f
 8013baa:	713b      	strb	r3, [r7, #4]
 8013bac:	23e5      	movs	r3, #229	@ 0xe5
 8013bae:	717b      	strb	r3, [r7, #5]
 8013bb0:	23b3      	movs	r3, #179	@ 0xb3
 8013bb2:	71bb      	strb	r3, [r7, #6]
 8013bb4:	23d5      	movs	r3, #213	@ 0xd5
 8013bb6:	71fb      	strb	r3, [r7, #7]
 8013bb8:	232e      	movs	r3, #46	@ 0x2e
 8013bba:	723b      	strb	r3, [r7, #8]
 8013bbc:	237f      	movs	r3, #127	@ 0x7f
 8013bbe:	727b      	strb	r3, [r7, #9]
 8013bc0:	234a      	movs	r3, #74	@ 0x4a
 8013bc2:	72bb      	strb	r3, [r7, #10]
 8013bc4:	2398      	movs	r3, #152	@ 0x98
 8013bc6:	72fb      	strb	r3, [r7, #11]
 8013bc8:	232a      	movs	r3, #42	@ 0x2a
 8013bca:	733b      	strb	r3, [r7, #12]
 8013bcc:	2348      	movs	r3, #72	@ 0x48
 8013bce:	737b      	strb	r3, [r7, #13]
 8013bd0:	237a      	movs	r3, #122	@ 0x7a
 8013bd2:	73bb      	strb	r3, [r7, #14]
 8013bd4:	23cc      	movs	r3, #204	@ 0xcc
 8013bd6:	73fb      	strb	r3, [r7, #15]
 8013bd8:	2300      	movs	r3, #0
 8013bda:	743b      	strb	r3, [r7, #16]
 8013bdc:	2300      	movs	r3, #0
 8013bde:	747b      	strb	r3, [r7, #17]
 8013be0:	2300      	movs	r3, #0
 8013be2:	74bb      	strb	r3, [r7, #18]
 8013be4:	2300      	movs	r3, #0
 8013be6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8013be8:	7dbb      	ldrb	r3, [r7, #22]
 8013bea:	1d39      	adds	r1, r7, #4
 8013bec:	4a8f      	ldr	r2, [pc, #572]	@ (8013e2c <SVCCTL_InitCustomSvc+0x298>)
 8013bee:	9200      	str	r2, [sp, #0]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	2002      	movs	r0, #2
 8013bf4:	f7fc fa3a 	bl	801006c <aci_gatt_add_service>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00f      	beq.n	8013c22 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 8013c02:	488b      	ldr	r0, [pc, #556]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013c04:	f7fd ff2e 	bl	8011a64 <DbgTraceGetFileName>
 8013c08:	4601      	mov	r1, r0
 8013c0a:	f240 13fd 	movw	r3, #509	@ 0x1fd
 8013c0e:	4a89      	ldr	r2, [pc, #548]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013c10:	4889      	ldr	r0, [pc, #548]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013c12:	f001 fe23 	bl	801585c <iprintf>
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
 8013c18:	4619      	mov	r1, r3
 8013c1a:	4888      	ldr	r0, [pc, #544]	@ (8013e3c <SVCCTL_InitCustomSvc+0x2a8>)
 8013c1c:	f001 fe1e 	bl	801585c <iprintf>
 8013c20:	e00c      	b.n	8013c3c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 8013c22:	4883      	ldr	r0, [pc, #524]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013c24:	f7fd ff1e 	bl	8011a64 <DbgTraceGetFileName>
 8013c28:	4601      	mov	r1, r0
 8013c2a:	f240 2301 	movw	r3, #513	@ 0x201
 8013c2e:	4a81      	ldr	r2, [pc, #516]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013c30:	4881      	ldr	r0, [pc, #516]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013c32:	f001 fe13 	bl	801585c <iprintf>
 8013c36:	4882      	ldr	r0, [pc, #520]	@ (8013e40 <SVCCTL_InitCustomSvc+0x2ac>)
 8013c38:	f001 fe10 	bl	801585c <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 8013c3c:	2319      	movs	r3, #25
 8013c3e:	713b      	strb	r3, [r7, #4]
 8013c40:	23ed      	movs	r3, #237	@ 0xed
 8013c42:	717b      	strb	r3, [r7, #5]
 8013c44:	2382      	movs	r3, #130	@ 0x82
 8013c46:	71bb      	strb	r3, [r7, #6]
 8013c48:	23ae      	movs	r3, #174	@ 0xae
 8013c4a:	71fb      	strb	r3, [r7, #7]
 8013c4c:	23ed      	movs	r3, #237	@ 0xed
 8013c4e:	723b      	strb	r3, [r7, #8]
 8013c50:	2321      	movs	r3, #33	@ 0x21
 8013c52:	727b      	strb	r3, [r7, #9]
 8013c54:	234c      	movs	r3, #76	@ 0x4c
 8013c56:	72bb      	strb	r3, [r7, #10]
 8013c58:	239d      	movs	r3, #157	@ 0x9d
 8013c5a:	72fb      	strb	r3, [r7, #11]
 8013c5c:	2341      	movs	r3, #65	@ 0x41
 8013c5e:	733b      	strb	r3, [r7, #12]
 8013c60:	2345      	movs	r3, #69	@ 0x45
 8013c62:	737b      	strb	r3, [r7, #13]
 8013c64:	2322      	movs	r3, #34	@ 0x22
 8013c66:	73bb      	strb	r3, [r7, #14]
 8013c68:	238e      	movs	r3, #142	@ 0x8e
 8013c6a:	73fb      	strb	r3, [r7, #15]
 8013c6c:	2336      	movs	r3, #54	@ 0x36
 8013c6e:	743b      	strb	r3, [r7, #16]
 8013c70:	232a      	movs	r3, #42	@ 0x2a
 8013c72:	747b      	strb	r3, [r7, #17]
 8013c74:	2300      	movs	r3, #0
 8013c76:	74bb      	strb	r3, [r7, #18]
 8013c78:	2300      	movs	r3, #0
 8013c7a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8013e2c <SVCCTL_InitCustomSvc+0x298>)
 8013c7e:	8818      	ldrh	r0, [r3, #0]
 8013c80:	4b70      	ldr	r3, [pc, #448]	@ (8013e44 <SVCCTL_InitCustomSvc+0x2b0>)
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	1d3a      	adds	r2, r7, #4
 8013c86:	4970      	ldr	r1, [pc, #448]	@ (8013e48 <SVCCTL_InitCustomSvc+0x2b4>)
 8013c88:	9105      	str	r1, [sp, #20]
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	9104      	str	r1, [sp, #16]
 8013c8e:	2110      	movs	r1, #16
 8013c90:	9103      	str	r1, [sp, #12]
 8013c92:	2107      	movs	r1, #7
 8013c94:	9102      	str	r1, [sp, #8]
 8013c96:	2100      	movs	r1, #0
 8013c98:	9101      	str	r1, [sp, #4]
 8013c9a:	2110      	movs	r1, #16
 8013c9c:	9100      	str	r1, [sp, #0]
 8013c9e:	2102      	movs	r1, #2
 8013ca0:	f7fc faba 	bl	8010218 <aci_gatt_add_char>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013ca8:	7dfb      	ldrb	r3, [r7, #23]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d00f      	beq.n	8013cce <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8013cae:	4860      	ldr	r0, [pc, #384]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013cb0:	f7fd fed8 	bl	8011a64 <DbgTraceGetFileName>
 8013cb4:	4601      	mov	r1, r0
 8013cb6:	f240 2313 	movw	r3, #531	@ 0x213
 8013cba:	4a5e      	ldr	r2, [pc, #376]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013cbc:	485e      	ldr	r0, [pc, #376]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013cbe:	f001 fdcd 	bl	801585c <iprintf>
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4861      	ldr	r0, [pc, #388]	@ (8013e4c <SVCCTL_InitCustomSvc+0x2b8>)
 8013cc8:	f001 fdc8 	bl	801585c <iprintf>
 8013ccc:	e00c      	b.n	8013ce8 <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 8013cce:	4858      	ldr	r0, [pc, #352]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013cd0:	f7fd fec8 	bl	8011a64 <DbgTraceGetFileName>
 8013cd4:	4601      	mov	r1, r0
 8013cd6:	f240 2317 	movw	r3, #535	@ 0x217
 8013cda:	4a56      	ldr	r2, [pc, #344]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013cdc:	4856      	ldr	r0, [pc, #344]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013cde:	f001 fdbd 	bl	801585c <iprintf>
 8013ce2:	485b      	ldr	r0, [pc, #364]	@ (8013e50 <SVCCTL_InitCustomSvc+0x2bc>)
 8013ce4:	f001 fdba 	bl	801585c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 8013ce8:	2319      	movs	r3, #25
 8013cea:	713b      	strb	r3, [r7, #4]
 8013cec:	23ed      	movs	r3, #237	@ 0xed
 8013cee:	717b      	strb	r3, [r7, #5]
 8013cf0:	2382      	movs	r3, #130	@ 0x82
 8013cf2:	71bb      	strb	r3, [r7, #6]
 8013cf4:	23ae      	movs	r3, #174	@ 0xae
 8013cf6:	71fb      	strb	r3, [r7, #7]
 8013cf8:	23ed      	movs	r3, #237	@ 0xed
 8013cfa:	723b      	strb	r3, [r7, #8]
 8013cfc:	2321      	movs	r3, #33	@ 0x21
 8013cfe:	727b      	strb	r3, [r7, #9]
 8013d00:	234c      	movs	r3, #76	@ 0x4c
 8013d02:	72bb      	strb	r3, [r7, #10]
 8013d04:	239d      	movs	r3, #157	@ 0x9d
 8013d06:	72fb      	strb	r3, [r7, #11]
 8013d08:	2341      	movs	r3, #65	@ 0x41
 8013d0a:	733b      	strb	r3, [r7, #12]
 8013d0c:	2345      	movs	r3, #69	@ 0x45
 8013d0e:	737b      	strb	r3, [r7, #13]
 8013d10:	2322      	movs	r3, #34	@ 0x22
 8013d12:	73bb      	strb	r3, [r7, #14]
 8013d14:	238e      	movs	r3, #142	@ 0x8e
 8013d16:	73fb      	strb	r3, [r7, #15]
 8013d18:	2337      	movs	r3, #55	@ 0x37
 8013d1a:	743b      	strb	r3, [r7, #16]
 8013d1c:	232a      	movs	r3, #42	@ 0x2a
 8013d1e:	747b      	strb	r3, [r7, #17]
 8013d20:	2300      	movs	r3, #0
 8013d22:	74bb      	strb	r3, [r7, #18]
 8013d24:	2300      	movs	r3, #0
 8013d26:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013d28:	4b40      	ldr	r3, [pc, #256]	@ (8013e2c <SVCCTL_InitCustomSvc+0x298>)
 8013d2a:	8818      	ldrh	r0, [r3, #0]
 8013d2c:	4b49      	ldr	r3, [pc, #292]	@ (8013e54 <SVCCTL_InitCustomSvc+0x2c0>)
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	1d3a      	adds	r2, r7, #4
 8013d32:	4949      	ldr	r1, [pc, #292]	@ (8013e58 <SVCCTL_InitCustomSvc+0x2c4>)
 8013d34:	9105      	str	r1, [sp, #20]
 8013d36:	2100      	movs	r1, #0
 8013d38:	9104      	str	r1, [sp, #16]
 8013d3a:	2110      	movs	r1, #16
 8013d3c:	9103      	str	r1, [sp, #12]
 8013d3e:	2107      	movs	r1, #7
 8013d40:	9102      	str	r1, [sp, #8]
 8013d42:	2100      	movs	r1, #0
 8013d44:	9101      	str	r1, [sp, #4]
 8013d46:	2110      	movs	r1, #16
 8013d48:	9100      	str	r1, [sp, #0]
 8013d4a:	2102      	movs	r1, #2
 8013d4c:	f7fc fa64 	bl	8010218 <aci_gatt_add_char>
 8013d50:	4603      	mov	r3, r0
 8013d52:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013d54:	7dfb      	ldrb	r3, [r7, #23]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d00f      	beq.n	8013d7a <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 8013d5a:	4835      	ldr	r0, [pc, #212]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013d5c:	f7fd fe82 	bl	8011a64 <DbgTraceGetFileName>
 8013d60:	4601      	mov	r1, r0
 8013d62:	f240 232d 	movw	r3, #557	@ 0x22d
 8013d66:	4a33      	ldr	r2, [pc, #204]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013d68:	4833      	ldr	r0, [pc, #204]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013d6a:	f001 fd77 	bl	801585c <iprintf>
 8013d6e:	7dfb      	ldrb	r3, [r7, #23]
 8013d70:	4619      	mov	r1, r3
 8013d72:	483a      	ldr	r0, [pc, #232]	@ (8013e5c <SVCCTL_InitCustomSvc+0x2c8>)
 8013d74:	f001 fd72 	bl	801585c <iprintf>
 8013d78:	e00c      	b.n	8013d94 <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 8013d7a:	482d      	ldr	r0, [pc, #180]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013d7c:	f7fd fe72 	bl	8011a64 <DbgTraceGetFileName>
 8013d80:	4601      	mov	r1, r0
 8013d82:	f240 2331 	movw	r3, #561	@ 0x231
 8013d86:	4a2b      	ldr	r2, [pc, #172]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013d88:	482b      	ldr	r0, [pc, #172]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013d8a:	f001 fd67 	bl	801585c <iprintf>
 8013d8e:	4834      	ldr	r0, [pc, #208]	@ (8013e60 <SVCCTL_InitCustomSvc+0x2cc>)
 8013d90:	f001 fd64 	bl	801585c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8013d94:	2319      	movs	r3, #25
 8013d96:	713b      	strb	r3, [r7, #4]
 8013d98:	23ed      	movs	r3, #237	@ 0xed
 8013d9a:	717b      	strb	r3, [r7, #5]
 8013d9c:	2382      	movs	r3, #130	@ 0x82
 8013d9e:	71bb      	strb	r3, [r7, #6]
 8013da0:	23ae      	movs	r3, #174	@ 0xae
 8013da2:	71fb      	strb	r3, [r7, #7]
 8013da4:	23ed      	movs	r3, #237	@ 0xed
 8013da6:	723b      	strb	r3, [r7, #8]
 8013da8:	2321      	movs	r3, #33	@ 0x21
 8013daa:	727b      	strb	r3, [r7, #9]
 8013dac:	234c      	movs	r3, #76	@ 0x4c
 8013dae:	72bb      	strb	r3, [r7, #10]
 8013db0:	239d      	movs	r3, #157	@ 0x9d
 8013db2:	72fb      	strb	r3, [r7, #11]
 8013db4:	2341      	movs	r3, #65	@ 0x41
 8013db6:	733b      	strb	r3, [r7, #12]
 8013db8:	2345      	movs	r3, #69	@ 0x45
 8013dba:	737b      	strb	r3, [r7, #13]
 8013dbc:	2322      	movs	r3, #34	@ 0x22
 8013dbe:	73bb      	strb	r3, [r7, #14]
 8013dc0:	238e      	movs	r3, #142	@ 0x8e
 8013dc2:	73fb      	strb	r3, [r7, #15]
 8013dc4:	2338      	movs	r3, #56	@ 0x38
 8013dc6:	743b      	strb	r3, [r7, #16]
 8013dc8:	232a      	movs	r3, #42	@ 0x2a
 8013dca:	747b      	strb	r3, [r7, #17]
 8013dcc:	2300      	movs	r3, #0
 8013dce:	74bb      	strb	r3, [r7, #18]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013dd4:	4b15      	ldr	r3, [pc, #84]	@ (8013e2c <SVCCTL_InitCustomSvc+0x298>)
 8013dd6:	8818      	ldrh	r0, [r3, #0]
 8013dd8:	4b22      	ldr	r3, [pc, #136]	@ (8013e64 <SVCCTL_InitCustomSvc+0x2d0>)
 8013dda:	881b      	ldrh	r3, [r3, #0]
 8013ddc:	1d3a      	adds	r2, r7, #4
 8013dde:	4922      	ldr	r1, [pc, #136]	@ (8013e68 <SVCCTL_InitCustomSvc+0x2d4>)
 8013de0:	9105      	str	r1, [sp, #20]
 8013de2:	2100      	movs	r1, #0
 8013de4:	9104      	str	r1, [sp, #16]
 8013de6:	2110      	movs	r1, #16
 8013de8:	9103      	str	r1, [sp, #12]
 8013dea:	2101      	movs	r1, #1
 8013dec:	9102      	str	r1, [sp, #8]
 8013dee:	2100      	movs	r1, #0
 8013df0:	9101      	str	r1, [sp, #4]
 8013df2:	2108      	movs	r1, #8
 8013df4:	9100      	str	r1, [sp, #0]
 8013df6:	2102      	movs	r1, #2
 8013df8:	f7fc fa0e 	bl	8010218 <aci_gatt_add_char>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013e00:	7dfb      	ldrb	r3, [r7, #23]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d034      	beq.n	8013e70 <SVCCTL_InitCustomSvc+0x2dc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 8013e06:	480a      	ldr	r0, [pc, #40]	@ (8013e30 <SVCCTL_InitCustomSvc+0x29c>)
 8013e08:	f7fd fe2c 	bl	8011a64 <DbgTraceGetFileName>
 8013e0c:	4601      	mov	r1, r0
 8013e0e:	f240 2347 	movw	r3, #583	@ 0x247
 8013e12:	4a08      	ldr	r2, [pc, #32]	@ (8013e34 <SVCCTL_InitCustomSvc+0x2a0>)
 8013e14:	4808      	ldr	r0, [pc, #32]	@ (8013e38 <SVCCTL_InitCustomSvc+0x2a4>)
 8013e16:	f001 fd21 	bl	801585c <iprintf>
 8013e1a:	7dfb      	ldrb	r3, [r7, #23]
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	4813      	ldr	r0, [pc, #76]	@ (8013e6c <SVCCTL_InitCustomSvc+0x2d8>)
 8013e20:	f001 fd1c 	bl	801585c <iprintf>
 8013e24:	e031      	b.n	8013e8a <SVCCTL_InitCustomSvc+0x2f6>
 8013e26:	bf00      	nop
 8013e28:	0801392d 	.word	0x0801392d
 8013e2c:	20001a84 	.word	0x20001a84
 8013e30:	08019a54 	.word	0x08019a54
 8013e34:	0801a4ec 	.word	0x0801a4ec
 8013e38:	08019a74 	.word	0x08019a74
 8013e3c:	08019a88 	.word	0x08019a88
 8013e40:	08019ad0 	.word	0x08019ad0
 8013e44:	200000bc 	.word	0x200000bc
 8013e48:	20001a86 	.word	0x20001a86
 8013e4c:	08019b04 	.word	0x08019b04
 8013e50:	08019b4c 	.word	0x08019b4c
 8013e54:	200000be 	.word	0x200000be
 8013e58:	20001a88 	.word	0x20001a88
 8013e5c:	08019b80 	.word	0x08019b80
 8013e60:	08019bc4 	.word	0x08019bc4
 8013e64:	200000c0 	.word	0x200000c0
 8013e68:	20001a8a 	.word	0x20001a8a
 8013e6c:	08019bf8 	.word	0x08019bf8
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8013e70:	485e      	ldr	r0, [pc, #376]	@ (8013fec <SVCCTL_InitCustomSvc+0x458>)
 8013e72:	f7fd fdf7 	bl	8011a64 <DbgTraceGetFileName>
 8013e76:	4601      	mov	r1, r0
 8013e78:	f240 234b 	movw	r3, #587	@ 0x24b
 8013e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8013ff0 <SVCCTL_InitCustomSvc+0x45c>)
 8013e7e:	485d      	ldr	r0, [pc, #372]	@ (8013ff4 <SVCCTL_InitCustomSvc+0x460>)
 8013e80:	f001 fcec 	bl	801585c <iprintf>
 8013e84:	485c      	ldr	r0, [pc, #368]	@ (8013ff8 <SVCCTL_InitCustomSvc+0x464>)
 8013e86:	f001 fce9 	bl	801585c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 8013e8a:	2319      	movs	r3, #25
 8013e8c:	713b      	strb	r3, [r7, #4]
 8013e8e:	23ed      	movs	r3, #237	@ 0xed
 8013e90:	717b      	strb	r3, [r7, #5]
 8013e92:	2382      	movs	r3, #130	@ 0x82
 8013e94:	71bb      	strb	r3, [r7, #6]
 8013e96:	23ae      	movs	r3, #174	@ 0xae
 8013e98:	71fb      	strb	r3, [r7, #7]
 8013e9a:	23ed      	movs	r3, #237	@ 0xed
 8013e9c:	723b      	strb	r3, [r7, #8]
 8013e9e:	2321      	movs	r3, #33	@ 0x21
 8013ea0:	727b      	strb	r3, [r7, #9]
 8013ea2:	234c      	movs	r3, #76	@ 0x4c
 8013ea4:	72bb      	strb	r3, [r7, #10]
 8013ea6:	239d      	movs	r3, #157	@ 0x9d
 8013ea8:	72fb      	strb	r3, [r7, #11]
 8013eaa:	2341      	movs	r3, #65	@ 0x41
 8013eac:	733b      	strb	r3, [r7, #12]
 8013eae:	2345      	movs	r3, #69	@ 0x45
 8013eb0:	737b      	strb	r3, [r7, #13]
 8013eb2:	2322      	movs	r3, #34	@ 0x22
 8013eb4:	73bb      	strb	r3, [r7, #14]
 8013eb6:	238e      	movs	r3, #142	@ 0x8e
 8013eb8:	73fb      	strb	r3, [r7, #15]
 8013eba:	2339      	movs	r3, #57	@ 0x39
 8013ebc:	743b      	strb	r3, [r7, #16]
 8013ebe:	232a      	movs	r3, #42	@ 0x2a
 8013ec0:	747b      	strb	r3, [r7, #17]
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	74bb      	strb	r3, [r7, #18]
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013eca:	4b4c      	ldr	r3, [pc, #304]	@ (8013ffc <SVCCTL_InitCustomSvc+0x468>)
 8013ecc:	8818      	ldrh	r0, [r3, #0]
 8013ece:	4b4c      	ldr	r3, [pc, #304]	@ (8014000 <SVCCTL_InitCustomSvc+0x46c>)
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	1d3a      	adds	r2, r7, #4
 8013ed4:	494b      	ldr	r1, [pc, #300]	@ (8014004 <SVCCTL_InitCustomSvc+0x470>)
 8013ed6:	9105      	str	r1, [sp, #20]
 8013ed8:	2100      	movs	r1, #0
 8013eda:	9104      	str	r1, [sp, #16]
 8013edc:	2110      	movs	r1, #16
 8013ede:	9103      	str	r1, [sp, #12]
 8013ee0:	2107      	movs	r1, #7
 8013ee2:	9102      	str	r1, [sp, #8]
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	9101      	str	r1, [sp, #4]
 8013ee8:	2110      	movs	r1, #16
 8013eea:	9100      	str	r1, [sp, #0]
 8013eec:	2102      	movs	r1, #2
 8013eee:	f7fc f993 	bl	8010218 <aci_gatt_add_char>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013ef6:	7dfb      	ldrb	r3, [r7, #23]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00f      	beq.n	8013f1c <SVCCTL_InitCustomSvc+0x388>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 8013efc:	483b      	ldr	r0, [pc, #236]	@ (8013fec <SVCCTL_InitCustomSvc+0x458>)
 8013efe:	f7fd fdb1 	bl	8011a64 <DbgTraceGetFileName>
 8013f02:	4601      	mov	r1, r0
 8013f04:	f240 2361 	movw	r3, #609	@ 0x261
 8013f08:	4a39      	ldr	r2, [pc, #228]	@ (8013ff0 <SVCCTL_InitCustomSvc+0x45c>)
 8013f0a:	483a      	ldr	r0, [pc, #232]	@ (8013ff4 <SVCCTL_InitCustomSvc+0x460>)
 8013f0c:	f001 fca6 	bl	801585c <iprintf>
 8013f10:	7dfb      	ldrb	r3, [r7, #23]
 8013f12:	4619      	mov	r1, r3
 8013f14:	483c      	ldr	r0, [pc, #240]	@ (8014008 <SVCCTL_InitCustomSvc+0x474>)
 8013f16:	f001 fca1 	bl	801585c <iprintf>
 8013f1a:	e00c      	b.n	8013f36 <SVCCTL_InitCustomSvc+0x3a2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 8013f1c:	4833      	ldr	r0, [pc, #204]	@ (8013fec <SVCCTL_InitCustomSvc+0x458>)
 8013f1e:	f7fd fda1 	bl	8011a64 <DbgTraceGetFileName>
 8013f22:	4601      	mov	r1, r0
 8013f24:	f240 2365 	movw	r3, #613	@ 0x265
 8013f28:	4a31      	ldr	r2, [pc, #196]	@ (8013ff0 <SVCCTL_InitCustomSvc+0x45c>)
 8013f2a:	4832      	ldr	r0, [pc, #200]	@ (8013ff4 <SVCCTL_InitCustomSvc+0x460>)
 8013f2c:	f001 fc96 	bl	801585c <iprintf>
 8013f30:	4836      	ldr	r0, [pc, #216]	@ (801400c <SVCCTL_InitCustomSvc+0x478>)
 8013f32:	f001 fc93 	bl	801585c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 8013f36:	2319      	movs	r3, #25
 8013f38:	713b      	strb	r3, [r7, #4]
 8013f3a:	23ed      	movs	r3, #237	@ 0xed
 8013f3c:	717b      	strb	r3, [r7, #5]
 8013f3e:	2382      	movs	r3, #130	@ 0x82
 8013f40:	71bb      	strb	r3, [r7, #6]
 8013f42:	23ae      	movs	r3, #174	@ 0xae
 8013f44:	71fb      	strb	r3, [r7, #7]
 8013f46:	23ed      	movs	r3, #237	@ 0xed
 8013f48:	723b      	strb	r3, [r7, #8]
 8013f4a:	2321      	movs	r3, #33	@ 0x21
 8013f4c:	727b      	strb	r3, [r7, #9]
 8013f4e:	234c      	movs	r3, #76	@ 0x4c
 8013f50:	72bb      	strb	r3, [r7, #10]
 8013f52:	239d      	movs	r3, #157	@ 0x9d
 8013f54:	72fb      	strb	r3, [r7, #11]
 8013f56:	2341      	movs	r3, #65	@ 0x41
 8013f58:	733b      	strb	r3, [r7, #12]
 8013f5a:	2345      	movs	r3, #69	@ 0x45
 8013f5c:	737b      	strb	r3, [r7, #13]
 8013f5e:	2322      	movs	r3, #34	@ 0x22
 8013f60:	73bb      	strb	r3, [r7, #14]
 8013f62:	238e      	movs	r3, #142	@ 0x8e
 8013f64:	73fb      	strb	r3, [r7, #15]
 8013f66:	2340      	movs	r3, #64	@ 0x40
 8013f68:	743b      	strb	r3, [r7, #16]
 8013f6a:	232a      	movs	r3, #42	@ 0x2a
 8013f6c:	747b      	strb	r3, [r7, #17]
 8013f6e:	2300      	movs	r3, #0
 8013f70:	74bb      	strb	r3, [r7, #18]
 8013f72:	2300      	movs	r3, #0
 8013f74:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013f76:	4b21      	ldr	r3, [pc, #132]	@ (8013ffc <SVCCTL_InitCustomSvc+0x468>)
 8013f78:	8818      	ldrh	r0, [r3, #0]
 8013f7a:	4b25      	ldr	r3, [pc, #148]	@ (8014010 <SVCCTL_InitCustomSvc+0x47c>)
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	1d3a      	adds	r2, r7, #4
 8013f80:	4924      	ldr	r1, [pc, #144]	@ (8014014 <SVCCTL_InitCustomSvc+0x480>)
 8013f82:	9105      	str	r1, [sp, #20]
 8013f84:	2100      	movs	r1, #0
 8013f86:	9104      	str	r1, [sp, #16]
 8013f88:	2110      	movs	r1, #16
 8013f8a:	9103      	str	r1, [sp, #12]
 8013f8c:	2104      	movs	r1, #4
 8013f8e:	9102      	str	r1, [sp, #8]
 8013f90:	2100      	movs	r1, #0
 8013f92:	9101      	str	r1, [sp, #4]
 8013f94:	2102      	movs	r1, #2
 8013f96:	9100      	str	r1, [sp, #0]
 8013f98:	2102      	movs	r1, #2
 8013f9a:	f7fc f93d 	bl	8010218 <aci_gatt_add_char>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013fa2:	7dfb      	ldrb	r3, [r7, #23]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d00f      	beq.n	8013fc8 <SVCCTL_InitCustomSvc+0x434>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 8013fa8:	4810      	ldr	r0, [pc, #64]	@ (8013fec <SVCCTL_InitCustomSvc+0x458>)
 8013faa:	f7fd fd5b 	bl	8011a64 <DbgTraceGetFileName>
 8013fae:	4601      	mov	r1, r0
 8013fb0:	f240 237b 	movw	r3, #635	@ 0x27b
 8013fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8013ff0 <SVCCTL_InitCustomSvc+0x45c>)
 8013fb6:	480f      	ldr	r0, [pc, #60]	@ (8013ff4 <SVCCTL_InitCustomSvc+0x460>)
 8013fb8:	f001 fc50 	bl	801585c <iprintf>
 8013fbc:	7dfb      	ldrb	r3, [r7, #23]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	4815      	ldr	r0, [pc, #84]	@ (8014018 <SVCCTL_InitCustomSvc+0x484>)
 8013fc2:	f001 fc4b 	bl	801585c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8013fc6:	e00d      	b.n	8013fe4 <SVCCTL_InitCustomSvc+0x450>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 8013fc8:	4808      	ldr	r0, [pc, #32]	@ (8013fec <SVCCTL_InitCustomSvc+0x458>)
 8013fca:	f7fd fd4b 	bl	8011a64 <DbgTraceGetFileName>
 8013fce:	4601      	mov	r1, r0
 8013fd0:	f240 237f 	movw	r3, #639	@ 0x27f
 8013fd4:	4a06      	ldr	r2, [pc, #24]	@ (8013ff0 <SVCCTL_InitCustomSvc+0x45c>)
 8013fd6:	4807      	ldr	r0, [pc, #28]	@ (8013ff4 <SVCCTL_InitCustomSvc+0x460>)
 8013fd8:	f001 fc40 	bl	801585c <iprintf>
 8013fdc:	480f      	ldr	r0, [pc, #60]	@ (801401c <SVCCTL_InitCustomSvc+0x488>)
 8013fde:	f001 fc3d 	bl	801585c <iprintf>
  return;
 8013fe2:	bf00      	nop
}
 8013fe4:	3718      	adds	r7, #24
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	08019a54 	.word	0x08019a54
 8013ff0:	0801a4ec 	.word	0x0801a4ec
 8013ff4:	08019a74 	.word	0x08019a74
 8013ff8:	08019c3c 	.word	0x08019c3c
 8013ffc:	20001a84 	.word	0x20001a84
 8014000:	200000c2 	.word	0x200000c2
 8014004:	20001a8c 	.word	0x20001a8c
 8014008:	08019c6c 	.word	0x08019c6c
 801400c:	08019cb4 	.word	0x08019cb4
 8014010:	200000c4 	.word	0x200000c4
 8014014:	20001a8e 	.word	0x20001a8e
 8014018:	08019cec 	.word	0x08019cec
 801401c:	08019d38 	.word	0x08019d38

08014020 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b086      	sub	sp, #24
 8014024:	af02      	add	r7, sp, #8
 8014026:	4603      	mov	r3, r0
 8014028:	6039      	str	r1, [r7, #0]
 801402a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801402c:	2392      	movs	r3, #146	@ 0x92
 801402e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014030:	79fb      	ldrb	r3, [r7, #7]
 8014032:	2b04      	cmp	r3, #4
 8014034:	f200 811b 	bhi.w	801426e <Custom_STM_App_Update_Char+0x24e>
 8014038:	a201      	add	r2, pc, #4	@ (adr r2, 8014040 <Custom_STM_App_Update_Char+0x20>)
 801403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801403e:	bf00      	nop
 8014040:	08014055 	.word	0x08014055
 8014044:	080140c3 	.word	0x080140c3
 8014048:	08014123 	.word	0x08014123
 801404c:	08014183 	.word	0x08014183
 8014050:	0801420f 	.word	0x0801420f
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014054:	4b8a      	ldr	r3, [pc, #552]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014056:	8818      	ldrh	r0, [r3, #0]
 8014058:	4b89      	ldr	r3, [pc, #548]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 801405a:	8859      	ldrh	r1, [r3, #2]
 801405c:	4b89      	ldr	r3, [pc, #548]	@ (8014284 <Custom_STM_App_Update_Char+0x264>)
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	b2da      	uxtb	r2, r3
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	9300      	str	r3, [sp, #0]
 8014066:	4613      	mov	r3, r2
 8014068:	2200      	movs	r2, #0
 801406a:	f7fc f9dd 	bl	8010428 <aci_gatt_update_char_value>
 801406e:	4603      	mov	r3, r0
 8014070:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014072:	7bfb      	ldrb	r3, [r7, #15]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00f      	beq.n	8014098 <Custom_STM_App_Update_Char+0x78>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014078:	4883      	ldr	r0, [pc, #524]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 801407a:	f7fd fcf3 	bl	8011a64 <DbgTraceGetFileName>
 801407e:	4601      	mov	r1, r0
 8014080:	f240 23a6 	movw	r3, #678	@ 0x2a6
 8014084:	4a81      	ldr	r2, [pc, #516]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014086:	4882      	ldr	r0, [pc, #520]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014088:	f001 fbe8 	bl	801585c <iprintf>
 801408c:	7bfb      	ldrb	r3, [r7, #15]
 801408e:	4619      	mov	r1, r3
 8014090:	4880      	ldr	r0, [pc, #512]	@ (8014294 <Custom_STM_App_Update_Char+0x274>)
 8014092:	f001 fbe3 	bl	801585c <iprintf>
 8014096:	e00c      	b.n	80140b2 <Custom_STM_App_Update_Char+0x92>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014098:	487b      	ldr	r0, [pc, #492]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 801409a:	f7fd fce3 	bl	8011a64 <DbgTraceGetFileName>
 801409e:	4601      	mov	r1, r0
 80140a0:	f240 23aa 	movw	r3, #682	@ 0x2aa
 80140a4:	4a79      	ldr	r2, [pc, #484]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 80140a6:	487a      	ldr	r0, [pc, #488]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 80140a8:	f001 fbd8 	bl	801585c <iprintf>
 80140ac:	487a      	ldr	r0, [pc, #488]	@ (8014298 <Custom_STM_App_Update_Char+0x278>)
 80140ae:	f001 fbd5 	bl	801585c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 80140b2:	7bfb      	ldrb	r3, [r7, #15]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f040 80dc 	bne.w	8014272 <Custom_STM_App_Update_Char+0x252>
      {
    	  tsBle.ACCEL_XferComplete = true;
 80140ba:	4b78      	ldr	r3, [pc, #480]	@ (801429c <Custom_STM_App_Update_Char+0x27c>)
 80140bc:	2201      	movs	r2, #1
 80140be:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80140c0:	e0d7      	b.n	8014272 <Custom_STM_App_Update_Char+0x252>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80140c2:	4b6f      	ldr	r3, [pc, #444]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 80140c4:	8818      	ldrh	r0, [r3, #0]
 80140c6:	4b6e      	ldr	r3, [pc, #440]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 80140c8:	8899      	ldrh	r1, [r3, #4]
 80140ca:	4b75      	ldr	r3, [pc, #468]	@ (80142a0 <Custom_STM_App_Update_Char+0x280>)
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	4613      	mov	r3, r2
 80140d6:	2200      	movs	r2, #0
 80140d8:	f7fc f9a6 	bl	8010428 <aci_gatt_update_char_value>
 80140dc:	4603      	mov	r3, r0
 80140de:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80140e0:	7bfb      	ldrb	r3, [r7, #15]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00f      	beq.n	8014106 <Custom_STM_App_Update_Char+0xe6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 80140e6:	4868      	ldr	r0, [pc, #416]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 80140e8:	f7fd fcbc 	bl	8011a64 <DbgTraceGetFileName>
 80140ec:	4601      	mov	r1, r0
 80140ee:	f44f 7332 	mov.w	r3, #712	@ 0x2c8
 80140f2:	4a66      	ldr	r2, [pc, #408]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 80140f4:	4866      	ldr	r0, [pc, #408]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 80140f6:	f001 fbb1 	bl	801585c <iprintf>
 80140fa:	7bfb      	ldrb	r3, [r7, #15]
 80140fc:	4619      	mov	r1, r3
 80140fe:	4869      	ldr	r0, [pc, #420]	@ (80142a4 <Custom_STM_App_Update_Char+0x284>)
 8014100:	f001 fbac 	bl	801585c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8014104:	e0b6      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 8014106:	4860      	ldr	r0, [pc, #384]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 8014108:	f7fd fcac 	bl	8011a64 <DbgTraceGetFileName>
 801410c:	4601      	mov	r1, r0
 801410e:	f44f 7333 	mov.w	r3, #716	@ 0x2cc
 8014112:	4a5e      	ldr	r2, [pc, #376]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014114:	485e      	ldr	r0, [pc, #376]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014116:	f001 fba1 	bl	801585c <iprintf>
 801411a:	4863      	ldr	r0, [pc, #396]	@ (80142a8 <Custom_STM_App_Update_Char+0x288>)
 801411c:	f001 fb9e 	bl	801585c <iprintf>
      break;
 8014120:	e0a8      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014122:	4b57      	ldr	r3, [pc, #348]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014124:	8818      	ldrh	r0, [r3, #0]
 8014126:	4b56      	ldr	r3, [pc, #344]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014128:	88d9      	ldrh	r1, [r3, #6]
 801412a:	4b60      	ldr	r3, [pc, #384]	@ (80142ac <Custom_STM_App_Update_Char+0x28c>)
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	b2da      	uxtb	r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	4613      	mov	r3, r2
 8014136:	2200      	movs	r2, #0
 8014138:	f7fc f976 	bl	8010428 <aci_gatt_update_char_value>
 801413c:	4603      	mov	r3, r0
 801413e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014140:	7bfb      	ldrb	r3, [r7, #15]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d00f      	beq.n	8014166 <Custom_STM_App_Update_Char+0x146>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014146:	4850      	ldr	r0, [pc, #320]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 8014148:	f7fd fc8c 	bl	8011a64 <DbgTraceGetFileName>
 801414c:	4601      	mov	r1, r0
 801414e:	f240 23db 	movw	r3, #731	@ 0x2db
 8014152:	4a4e      	ldr	r2, [pc, #312]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014154:	484e      	ldr	r0, [pc, #312]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014156:	f001 fb81 	bl	801585c <iprintf>
 801415a:	7bfb      	ldrb	r3, [r7, #15]
 801415c:	4619      	mov	r1, r3
 801415e:	4854      	ldr	r0, [pc, #336]	@ (80142b0 <Custom_STM_App_Update_Char+0x290>)
 8014160:	f001 fb7c 	bl	801585c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014164:	e086      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014166:	4848      	ldr	r0, [pc, #288]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 8014168:	f7fd fc7c 	bl	8011a64 <DbgTraceGetFileName>
 801416c:	4601      	mov	r1, r0
 801416e:	f240 23df 	movw	r3, #735	@ 0x2df
 8014172:	4a46      	ldr	r2, [pc, #280]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014174:	4846      	ldr	r0, [pc, #280]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014176:	f001 fb71 	bl	801585c <iprintf>
 801417a:	484e      	ldr	r0, [pc, #312]	@ (80142b4 <Custom_STM_App_Update_Char+0x294>)
 801417c:	f001 fb6e 	bl	801585c <iprintf>
      break;
 8014180:	e078      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014182:	4b3f      	ldr	r3, [pc, #252]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014184:	8818      	ldrh	r0, [r3, #0]
 8014186:	4b3e      	ldr	r3, [pc, #248]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014188:	8919      	ldrh	r1, [r3, #8]
 801418a:	4b4b      	ldr	r3, [pc, #300]	@ (80142b8 <Custom_STM_App_Update_Char+0x298>)
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	b2da      	uxtb	r2, r3
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	4613      	mov	r3, r2
 8014196:	2200      	movs	r2, #0
 8014198:	f7fc f946 	bl	8010428 <aci_gatt_update_char_value>
 801419c:	4603      	mov	r3, r0
 801419e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80141a0:	7bfb      	ldrb	r3, [r7, #15]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00f      	beq.n	80141c6 <Custom_STM_App_Update_Char+0x1a6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 80141a6:	4838      	ldr	r0, [pc, #224]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 80141a8:	f7fd fc5c 	bl	8011a64 <DbgTraceGetFileName>
 80141ac:	4601      	mov	r1, r0
 80141ae:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80141b2:	4a36      	ldr	r2, [pc, #216]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 80141b4:	4836      	ldr	r0, [pc, #216]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 80141b6:	f001 fb51 	bl	801585c <iprintf>
 80141ba:	7bfb      	ldrb	r3, [r7, #15]
 80141bc:	4619      	mov	r1, r3
 80141be:	483f      	ldr	r0, [pc, #252]	@ (80142bc <Custom_STM_App_Update_Char+0x29c>)
 80141c0:	f001 fb4c 	bl	801585c <iprintf>
 80141c4:	e00c      	b.n	80141e0 <Custom_STM_App_Update_Char+0x1c0>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 80141c6:	4830      	ldr	r0, [pc, #192]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 80141c8:	f7fd fc4c 	bl	8011a64 <DbgTraceGetFileName>
 80141cc:	4601      	mov	r1, r0
 80141ce:	f240 23f2 	movw	r3, #754	@ 0x2f2
 80141d2:	4a2e      	ldr	r2, [pc, #184]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 80141d4:	482e      	ldr	r0, [pc, #184]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 80141d6:	f001 fb41 	bl	801585c <iprintf>
 80141da:	4839      	ldr	r0, [pc, #228]	@ (80142c0 <Custom_STM_App_Update_Char+0x2a0>)
 80141dc:	f001 fb3e 	bl	801585c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 80141e0:	7bfb      	ldrb	r3, [r7, #15]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d103      	bne.n	80141ee <Custom_STM_App_Update_Char+0x1ce>
      {
    	  tsBle.AFE_XferComplete = true;
 80141e6:	4b2d      	ldr	r3, [pc, #180]	@ (801429c <Custom_STM_App_Update_Char+0x27c>)
 80141e8:	2201      	movs	r2, #1
 80141ea:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 80141ec:	e042      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80141ee:	4b24      	ldr	r3, [pc, #144]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 80141f0:	8818      	ldrh	r0, [r3, #0]
 80141f2:	4b23      	ldr	r3, [pc, #140]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 80141f4:	8919      	ldrh	r1, [r3, #8]
 80141f6:	4b30      	ldr	r3, [pc, #192]	@ (80142b8 <Custom_STM_App_Update_Char+0x298>)
 80141f8:	881b      	ldrh	r3, [r3, #0]
 80141fa:	b2da      	uxtb	r2, r3
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	4613      	mov	r3, r2
 8014202:	2200      	movs	r2, #0
 8014204:	f7fc f910 	bl	8010428 <aci_gatt_update_char_value>
 8014208:	4603      	mov	r3, r0
 801420a:	73fb      	strb	r3, [r7, #15]
      break;
 801420c:	e032      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 801420e:	4b1c      	ldr	r3, [pc, #112]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014210:	8818      	ldrh	r0, [r3, #0]
 8014212:	4b1b      	ldr	r3, [pc, #108]	@ (8014280 <Custom_STM_App_Update_Char+0x260>)
 8014214:	8959      	ldrh	r1, [r3, #10]
 8014216:	4b2b      	ldr	r3, [pc, #172]	@ (80142c4 <Custom_STM_App_Update_Char+0x2a4>)
 8014218:	881b      	ldrh	r3, [r3, #0]
 801421a:	b2da      	uxtb	r2, r3
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	4613      	mov	r3, r2
 8014222:	2200      	movs	r2, #0
 8014224:	f7fc f900 	bl	8010428 <aci_gatt_update_char_value>
 8014228:	4603      	mov	r3, r0
 801422a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801422c:	7bfb      	ldrb	r3, [r7, #15]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d00f      	beq.n	8014252 <Custom_STM_App_Update_Char+0x232>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014232:	4815      	ldr	r0, [pc, #84]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 8014234:	f7fd fc16 	bl	8011a64 <DbgTraceGetFileName>
 8014238:	4601      	mov	r1, r0
 801423a:	f240 331a 	movw	r3, #794	@ 0x31a
 801423e:	4a13      	ldr	r2, [pc, #76]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014240:	4813      	ldr	r0, [pc, #76]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014242:	f001 fb0b 	bl	801585c <iprintf>
 8014246:	7bfb      	ldrb	r3, [r7, #15]
 8014248:	4619      	mov	r1, r3
 801424a:	481f      	ldr	r0, [pc, #124]	@ (80142c8 <Custom_STM_App_Update_Char+0x2a8>)
 801424c:	f001 fb06 	bl	801585c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014250:	e010      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014252:	480d      	ldr	r0, [pc, #52]	@ (8014288 <Custom_STM_App_Update_Char+0x268>)
 8014254:	f7fd fc06 	bl	8011a64 <DbgTraceGetFileName>
 8014258:	4601      	mov	r1, r0
 801425a:	f240 331e 	movw	r3, #798	@ 0x31e
 801425e:	4a0b      	ldr	r2, [pc, #44]	@ (801428c <Custom_STM_App_Update_Char+0x26c>)
 8014260:	480b      	ldr	r0, [pc, #44]	@ (8014290 <Custom_STM_App_Update_Char+0x270>)
 8014262:	f001 fafb 	bl	801585c <iprintf>
 8014266:	4819      	ldr	r0, [pc, #100]	@ (80142cc <Custom_STM_App_Update_Char+0x2ac>)
 8014268:	f001 faf8 	bl	801585c <iprintf>
      break;
 801426c:	e002      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>

    default:
      break;
 801426e:	bf00      	nop
 8014270:	e000      	b.n	8014274 <Custom_STM_App_Update_Char+0x254>
      break;
 8014272:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014274:	7bfb      	ldrb	r3, [r7, #15]
}
 8014276:	4618      	mov	r0, r3
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	20001a84 	.word	0x20001a84
 8014284:	200000bc 	.word	0x200000bc
 8014288:	08019a54 	.word	0x08019a54
 801428c:	0801a504 	.word	0x0801a504
 8014290:	08019a74 	.word	0x08019a74
 8014294:	08019d70 	.word	0x08019d70
 8014298:	08019db8 	.word	0x08019db8
 801429c:	200019e0 	.word	0x200019e0
 80142a0:	200000be 	.word	0x200000be
 80142a4:	08019df0 	.word	0x08019df0
 80142a8:	08019e38 	.word	0x08019e38
 80142ac:	200000c0 	.word	0x200000c0
 80142b0:	08019e70 	.word	0x08019e70
 80142b4:	08019eb4 	.word	0x08019eb4
 80142b8:	200000c2 	.word	0x200000c2
 80142bc:	08019ee8 	.word	0x08019ee8
 80142c0:	08019f34 	.word	0x08019f34
 80142c4:	200000c4 	.word	0x200000c4
 80142c8:	08019f70 	.word	0x08019f70
 80142cc:	08019fbc 	.word	0x08019fbc

080142d0 <LL_PWR_EnableBootC2>:
{
 80142d0:	b480      	push	{r7}
 80142d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80142d4:	4b05      	ldr	r3, [pc, #20]	@ (80142ec <LL_PWR_EnableBootC2+0x1c>)
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	4a04      	ldr	r2, [pc, #16]	@ (80142ec <LL_PWR_EnableBootC2+0x1c>)
 80142da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80142de:	60d3      	str	r3, [r2, #12]
}
 80142e0:	bf00      	nop
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	58000400 	.word	0x58000400

080142f0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80142f8:	4b06      	ldr	r3, [pc, #24]	@ (8014314 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80142fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80142fe:	4905      	ldr	r1, [pc, #20]	@ (8014314 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	4313      	orrs	r3, r2
 8014304:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8014308:	bf00      	nop
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr
 8014314:	58000800 	.word	0x58000800

08014318 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014320:	4b05      	ldr	r3, [pc, #20]	@ (8014338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014322:	6a1a      	ldr	r2, [r3, #32]
 8014324:	4904      	ldr	r1, [pc, #16]	@ (8014338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4313      	orrs	r3, r2
 801432a:	620b      	str	r3, [r1, #32]
}
 801432c:	bf00      	nop
 801432e:	370c      	adds	r7, #12
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr
 8014338:	58000800 	.word	0x58000800

0801433c <LL_AHB3_GRP1_EnableClock>:
{
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801434a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4313      	orrs	r3, r2
 8014352:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	4013      	ands	r3, r2
 801435e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014360:	68fb      	ldr	r3, [r7, #12]
}
 8014362:	bf00      	nop
 8014364:	3714      	adds	r7, #20
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr

0801436e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801436e:	b480      	push	{r7}
 8014370:	b085      	sub	sp, #20
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801437a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801437e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	4313      	orrs	r3, r2
 8014386:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801438a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801438e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	4013      	ands	r3, r2
 8014396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014398:	68fb      	ldr	r3, [r7, #12]
}
 801439a:	bf00      	nop
 801439c:	3714      	adds	r7, #20
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <LL_C1_IPCC_EnableIT_TXF>:
{
 80143a6:	b480      	push	{r7}
 80143a8:	b083      	sub	sp, #12
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	601a      	str	r2, [r3, #0]
}
 80143ba:	bf00      	nop
 80143bc:	370c      	adds	r7, #12
 80143be:	46bd      	mov	sp, r7
 80143c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c4:	4770      	bx	lr

080143c6 <LL_C1_IPCC_EnableIT_RXO>:
{
 80143c6:	b480      	push	{r7}
 80143c8:	b083      	sub	sp, #12
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f043 0201 	orr.w	r2, r3, #1
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	601a      	str	r2, [r3, #0]
}
 80143da:	bf00      	nop
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80143e6:	b480      	push	{r7}
 80143e8:	b083      	sub	sp, #12
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
 80143ee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	685a      	ldr	r2, [r3, #4]
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	041b      	lsls	r3, r3, #16
 80143f8:	43db      	mvns	r3, r3
 80143fa:	401a      	ands	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	605a      	str	r2, [r3, #4]
}
 8014400:	bf00      	nop
 8014402:	370c      	adds	r7, #12
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <LL_C1_IPCC_DisableTransmitChannel>:
{
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	041b      	lsls	r3, r3, #16
 801441e:	431a      	orrs	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	605a      	str	r2, [r3, #4]
}
 8014424:	bf00      	nop
 8014426:	370c      	adds	r7, #12
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr

08014430 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	685a      	ldr	r2, [r3, #4]
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	43db      	mvns	r3, r3
 8014442:	401a      	ands	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	605a      	str	r2, [r3, #4]
}
 8014448:	bf00      	nop
 801444a:	370c      	adds	r7, #12
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	609a      	str	r2, [r3, #8]
}
 8014464:	bf00      	nop
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	041a      	lsls	r2, r3, #16
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	609a      	str	r2, [r3, #8]
}
 8014482:	bf00      	nop
 8014484:	370c      	adds	r7, #12
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr

0801448e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801448e:	b480      	push	{r7}
 8014490:	b083      	sub	sp, #12
 8014492:	af00      	add	r7, sp, #0
 8014494:	6078      	str	r0, [r7, #4]
 8014496:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	68da      	ldr	r2, [r3, #12]
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	4013      	ands	r3, r2
 80144a0:	683a      	ldr	r2, [r7, #0]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d101      	bne.n	80144aa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80144a6:	2301      	movs	r3, #1
 80144a8:	e000      	b.n	80144ac <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80144aa:	2300      	movs	r3, #0
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	370c      	adds	r7, #12
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr

080144b8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	69da      	ldr	r2, [r3, #28]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	4013      	ands	r3, r2
 80144ca:	683a      	ldr	r2, [r7, #0]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d101      	bne.n	80144d4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80144d0:	2301      	movs	r3, #1
 80144d2:	e000      	b.n	80144d6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80144d4:	2300      	movs	r3, #0
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	370c      	adds	r7, #12
 80144da:	46bd      	mov	sp, r7
 80144dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e0:	4770      	bx	lr
	...

080144e4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80144e8:	2102      	movs	r1, #2
 80144ea:	4818      	ldr	r0, [pc, #96]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 80144ec:	f7ff ffe4 	bl	80144b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d008      	beq.n	8014508 <HW_IPCC_Rx_Handler+0x24>
 80144f6:	4b15      	ldr	r3, [pc, #84]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	f003 0302 	and.w	r3, r3, #2
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d102      	bne.n	8014508 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014502:	f000 f8d5 	bl	80146b0 <HW_IPCC_SYS_EvtHandler>
 8014506:	e01e      	b.n	8014546 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014508:	2101      	movs	r1, #1
 801450a:	4810      	ldr	r0, [pc, #64]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 801450c:	f7ff ffd4 	bl	80144b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	d008      	beq.n	8014528 <HW_IPCC_Rx_Handler+0x44>
 8014516:	4b0d      	ldr	r3, [pc, #52]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	f003 0301 	and.w	r3, r3, #1
 801451e:	2b00      	cmp	r3, #0
 8014520:	d102      	bne.n	8014528 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8014522:	f000 f889 	bl	8014638 <HW_IPCC_BLE_EvtHandler>
 8014526:	e00e      	b.n	8014546 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014528:	2108      	movs	r1, #8
 801452a:	4808      	ldr	r0, [pc, #32]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 801452c:	f7ff ffc4 	bl	80144b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d008      	beq.n	8014548 <HW_IPCC_Rx_Handler+0x64>
 8014536:	4b05      	ldr	r3, [pc, #20]	@ (801454c <HW_IPCC_Rx_Handler+0x68>)
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	f003 0308 	and.w	r3, r3, #8
 801453e:	2b00      	cmp	r3, #0
 8014540:	d102      	bne.n	8014548 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014542:	f000 f901 	bl	8014748 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014546:	bf00      	nop
 8014548:	bf00      	nop
}
 801454a:	bd80      	pop	{r7, pc}
 801454c:	58000c00 	.word	0x58000c00

08014550 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014554:	2102      	movs	r1, #2
 8014556:	4818      	ldr	r0, [pc, #96]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 8014558:	f7ff ff99 	bl	801448e <LL_C1_IPCC_IsActiveFlag_CHx>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d108      	bne.n	8014574 <HW_IPCC_Tx_Handler+0x24>
 8014562:	4b15      	ldr	r3, [pc, #84]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801456a:	2b00      	cmp	r3, #0
 801456c:	d102      	bne.n	8014574 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801456e:	f000 f893 	bl	8014698 <HW_IPCC_SYS_CmdEvtHandler>
 8014572:	e01e      	b.n	80145b2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014574:	2108      	movs	r1, #8
 8014576:	4810      	ldr	r0, [pc, #64]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 8014578:	f7ff ff89 	bl	801448e <LL_C1_IPCC_IsActiveFlag_CHx>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d108      	bne.n	8014594 <HW_IPCC_Tx_Handler+0x44>
 8014582:	4b0d      	ldr	r3, [pc, #52]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801458a:	2b00      	cmp	r3, #0
 801458c:	d102      	bne.n	8014594 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801458e:	f000 f8bd 	bl	801470c <HW_IPCC_MM_FreeBufHandler>
 8014592:	e00e      	b.n	80145b2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014594:	2120      	movs	r1, #32
 8014596:	4808      	ldr	r0, [pc, #32]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 8014598:	f7ff ff79 	bl	801448e <LL_C1_IPCC_IsActiveFlag_CHx>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d108      	bne.n	80145b4 <HW_IPCC_Tx_Handler+0x64>
 80145a2:	4b05      	ldr	r3, [pc, #20]	@ (80145b8 <HW_IPCC_Tx_Handler+0x68>)
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d102      	bne.n	80145b4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80145ae:	f000 f84f 	bl	8014650 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80145b2:	bf00      	nop
 80145b4:	bf00      	nop
}
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	58000c00 	.word	0x58000c00

080145bc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80145c0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80145c4:	f7ff fed3 	bl	801436e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80145c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80145cc:	f7ff fea4 	bl	8014318 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80145d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80145d4:	f7ff fe8c 	bl	80142f0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80145d8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80145da:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80145dc:	f7ff fe78 	bl	80142d0 <LL_PWR_EnableBootC2>

  return;
 80145e0:	bf00      	nop
}
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80145e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80145ec:	f7ff fea6 	bl	801433c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80145f0:	4806      	ldr	r0, [pc, #24]	@ (801460c <HW_IPCC_Init+0x28>)
 80145f2:	f7ff fee8 	bl	80143c6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80145f6:	4805      	ldr	r0, [pc, #20]	@ (801460c <HW_IPCC_Init+0x28>)
 80145f8:	f7ff fed5 	bl	80143a6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80145fc:	202c      	movs	r0, #44	@ 0x2c
 80145fe:	f7f0 fcea 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014602:	202d      	movs	r0, #45	@ 0x2d
 8014604:	f7f0 fce7 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  return;
 8014608:	bf00      	nop
}
 801460a:	bd80      	pop	{r7, pc}
 801460c:	58000c00 	.word	0x58000c00

08014610 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8014610:	b580      	push	{r7, lr}
 8014612:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014614:	2101      	movs	r1, #1
 8014616:	4802      	ldr	r0, [pc, #8]	@ (8014620 <HW_IPCC_BLE_Init+0x10>)
 8014618:	f7ff ff0a 	bl	8014430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801461c:	bf00      	nop
}
 801461e:	bd80      	pop	{r7, pc}
 8014620:	58000c00 	.word	0x58000c00

08014624 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8014628:	2101      	movs	r1, #1
 801462a:	4802      	ldr	r0, [pc, #8]	@ (8014634 <HW_IPCC_BLE_SendCmd+0x10>)
 801462c:	f7ff ff20 	bl	8014470 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014630:	bf00      	nop
}
 8014632:	bd80      	pop	{r7, pc}
 8014634:	58000c00 	.word	0x58000c00

08014638 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801463c:	f7fd f85a 	bl	80116f4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014640:	2101      	movs	r1, #1
 8014642:	4802      	ldr	r0, [pc, #8]	@ (801464c <HW_IPCC_BLE_EvtHandler+0x14>)
 8014644:	f7ff ff06 	bl	8014454 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014648:	bf00      	nop
}
 801464a:	bd80      	pop	{r7, pc}
 801464c:	58000c00 	.word	0x58000c00

08014650 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014654:	2120      	movs	r1, #32
 8014656:	4803      	ldr	r0, [pc, #12]	@ (8014664 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014658:	f7ff fed8 	bl	801440c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801465c:	f7fd f87a 	bl	8011754 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014660:	bf00      	nop
}
 8014662:	bd80      	pop	{r7, pc}
 8014664:	58000c00 	.word	0x58000c00

08014668 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801466c:	2102      	movs	r1, #2
 801466e:	4802      	ldr	r0, [pc, #8]	@ (8014678 <HW_IPCC_SYS_Init+0x10>)
 8014670:	f7ff fede 	bl	8014430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014674:	bf00      	nop
}
 8014676:	bd80      	pop	{r7, pc}
 8014678:	58000c00 	.word	0x58000c00

0801467c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014680:	2102      	movs	r1, #2
 8014682:	4804      	ldr	r0, [pc, #16]	@ (8014694 <HW_IPCC_SYS_SendCmd+0x18>)
 8014684:	f7ff fef4 	bl	8014470 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014688:	2102      	movs	r1, #2
 801468a:	4802      	ldr	r0, [pc, #8]	@ (8014694 <HW_IPCC_SYS_SendCmd+0x18>)
 801468c:	f7ff feab 	bl	80143e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014690:	bf00      	nop
}
 8014692:	bd80      	pop	{r7, pc}
 8014694:	58000c00 	.word	0x58000c00

08014698 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801469c:	2102      	movs	r1, #2
 801469e:	4803      	ldr	r0, [pc, #12]	@ (80146ac <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80146a0:	f7ff feb4 	bl	801440c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80146a4:	f7fd f8a6 	bl	80117f4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80146a8:	bf00      	nop
}
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	58000c00 	.word	0x58000c00

080146b0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80146b4:	f7fd f8b4 	bl	8011820 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80146b8:	2102      	movs	r1, #2
 80146ba:	4802      	ldr	r0, [pc, #8]	@ (80146c4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80146bc:	f7ff feca 	bl	8014454 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80146c0:	bf00      	nop
}
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	58000c00 	.word	0x58000c00

080146c8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80146d0:	2108      	movs	r1, #8
 80146d2:	480c      	ldr	r0, [pc, #48]	@ (8014704 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80146d4:	f7ff fedb 	bl	801448e <LL_C1_IPCC_IsActiveFlag_CHx>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d007      	beq.n	80146ee <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80146de:	4a0a      	ldr	r2, [pc, #40]	@ (8014708 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80146e4:	2108      	movs	r1, #8
 80146e6:	4807      	ldr	r0, [pc, #28]	@ (8014704 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80146e8:	f7ff fe7d 	bl	80143e6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80146ec:	e006      	b.n	80146fc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80146f2:	2108      	movs	r1, #8
 80146f4:	4803      	ldr	r0, [pc, #12]	@ (8014704 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80146f6:	f7ff febb 	bl	8014470 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80146fa:	bf00      	nop
}
 80146fc:	3708      	adds	r7, #8
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	58000c00 	.word	0x58000c00
 8014708:	20001a90 	.word	0x20001a90

0801470c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801470c:	b580      	push	{r7, lr}
 801470e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014710:	2108      	movs	r1, #8
 8014712:	4806      	ldr	r0, [pc, #24]	@ (801472c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014714:	f7ff fe7a 	bl	801440c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014718:	4b05      	ldr	r3, [pc, #20]	@ (8014730 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801471e:	2108      	movs	r1, #8
 8014720:	4802      	ldr	r0, [pc, #8]	@ (801472c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014722:	f7ff fea5 	bl	8014470 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014726:	bf00      	nop
}
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	58000c00 	.word	0x58000c00
 8014730:	20001a90 	.word	0x20001a90

08014734 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014738:	2108      	movs	r1, #8
 801473a:	4802      	ldr	r0, [pc, #8]	@ (8014744 <HW_IPCC_TRACES_Init+0x10>)
 801473c:	f7ff fe78 	bl	8014430 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014740:	bf00      	nop
}
 8014742:	bd80      	pop	{r7, pc}
 8014744:	58000c00 	.word	0x58000c00

08014748 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801474c:	f7fd f910 	bl	8011970 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014750:	2108      	movs	r1, #8
 8014752:	4802      	ldr	r0, [pc, #8]	@ (801475c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014754:	f7ff fe7e 	bl	8014454 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014758:	bf00      	nop
}
 801475a:	bd80      	pop	{r7, pc}
 801475c:	58000c00 	.word	0x58000c00

08014760 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014764:	2200      	movs	r2, #0
 8014766:	4912      	ldr	r1, [pc, #72]	@ (80147b0 <MX_USB_Device_Init+0x50>)
 8014768:	4812      	ldr	r0, [pc, #72]	@ (80147b4 <MX_USB_Device_Init+0x54>)
 801476a:	f7f9 fd79 	bl	800e260 <USBD_Init>
 801476e:	4603      	mov	r3, r0
 8014770:	2b00      	cmp	r3, #0
 8014772:	d001      	beq.n	8014778 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014774:	f7ef fe26 	bl	80043c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014778:	490f      	ldr	r1, [pc, #60]	@ (80147b8 <MX_USB_Device_Init+0x58>)
 801477a:	480e      	ldr	r0, [pc, #56]	@ (80147b4 <MX_USB_Device_Init+0x54>)
 801477c:	f7f9 fda0 	bl	800e2c0 <USBD_RegisterClass>
 8014780:	4603      	mov	r3, r0
 8014782:	2b00      	cmp	r3, #0
 8014784:	d001      	beq.n	801478a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014786:	f7ef fe1d 	bl	80043c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801478a:	490c      	ldr	r1, [pc, #48]	@ (80147bc <MX_USB_Device_Init+0x5c>)
 801478c:	4809      	ldr	r0, [pc, #36]	@ (80147b4 <MX_USB_Device_Init+0x54>)
 801478e:	f7f9 fc97 	bl	800e0c0 <USBD_CDC_RegisterInterface>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	d001      	beq.n	801479c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014798:	f7ef fe14 	bl	80043c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801479c:	4805      	ldr	r0, [pc, #20]	@ (80147b4 <MX_USB_Device_Init+0x54>)
 801479e:	f7f9 fdc5 	bl	800e32c <USBD_Start>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d001      	beq.n	80147ac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80147a8:	f7ef fe0c 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80147ac:	bf00      	nop
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	200000dc 	.word	0x200000dc
 80147b4:	20001a94 	.word	0x20001a94
 80147b8:	20000028 	.word	0x20000028
 80147bc:	200000c8 	.word	0x200000c8

080147c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80147c4:	2200      	movs	r2, #0
 80147c6:	4905      	ldr	r1, [pc, #20]	@ (80147dc <CDC_Init_FS+0x1c>)
 80147c8:	4805      	ldr	r0, [pc, #20]	@ (80147e0 <CDC_Init_FS+0x20>)
 80147ca:	f7f9 fc93 	bl	800e0f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80147ce:	4905      	ldr	r1, [pc, #20]	@ (80147e4 <CDC_Init_FS+0x24>)
 80147d0:	4803      	ldr	r0, [pc, #12]	@ (80147e0 <CDC_Init_FS+0x20>)
 80147d2:	f7f9 fcb1 	bl	800e138 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80147d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80147d8:	4618      	mov	r0, r3
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	20002570 	.word	0x20002570
 80147e0:	20001a94 	.word	0x20001a94
 80147e4:	20001d70 	.word	0x20001d70

080147e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80147e8:	b480      	push	{r7}
 80147ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80147ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	6039      	str	r1, [r7, #0]
 8014802:	71fb      	strb	r3, [r7, #7]
 8014804:	4613      	mov	r3, r2
 8014806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014808:	79fb      	ldrb	r3, [r7, #7]
 801480a:	2b23      	cmp	r3, #35	@ 0x23
 801480c:	d84a      	bhi.n	80148a4 <CDC_Control_FS+0xac>
 801480e:	a201      	add	r2, pc, #4	@ (adr r2, 8014814 <CDC_Control_FS+0x1c>)
 8014810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014814:	080148a5 	.word	0x080148a5
 8014818:	080148a5 	.word	0x080148a5
 801481c:	080148a5 	.word	0x080148a5
 8014820:	080148a5 	.word	0x080148a5
 8014824:	080148a5 	.word	0x080148a5
 8014828:	080148a5 	.word	0x080148a5
 801482c:	080148a5 	.word	0x080148a5
 8014830:	080148a5 	.word	0x080148a5
 8014834:	080148a5 	.word	0x080148a5
 8014838:	080148a5 	.word	0x080148a5
 801483c:	080148a5 	.word	0x080148a5
 8014840:	080148a5 	.word	0x080148a5
 8014844:	080148a5 	.word	0x080148a5
 8014848:	080148a5 	.word	0x080148a5
 801484c:	080148a5 	.word	0x080148a5
 8014850:	080148a5 	.word	0x080148a5
 8014854:	080148a5 	.word	0x080148a5
 8014858:	080148a5 	.word	0x080148a5
 801485c:	080148a5 	.word	0x080148a5
 8014860:	080148a5 	.word	0x080148a5
 8014864:	080148a5 	.word	0x080148a5
 8014868:	080148a5 	.word	0x080148a5
 801486c:	080148a5 	.word	0x080148a5
 8014870:	080148a5 	.word	0x080148a5
 8014874:	080148a5 	.word	0x080148a5
 8014878:	080148a5 	.word	0x080148a5
 801487c:	080148a5 	.word	0x080148a5
 8014880:	080148a5 	.word	0x080148a5
 8014884:	080148a5 	.word	0x080148a5
 8014888:	080148a5 	.word	0x080148a5
 801488c:	080148a5 	.word	0x080148a5
 8014890:	080148a5 	.word	0x080148a5
 8014894:	080148a5 	.word	0x080148a5
 8014898:	080148a5 	.word	0x080148a5
 801489c:	080148a5 	.word	0x080148a5
 80148a0:	080148a5 	.word	0x080148a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80148a4:	bf00      	nop
  }

  return (USBD_OK);
 80148a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80148be:	6879      	ldr	r1, [r7, #4]
 80148c0:	4805      	ldr	r0, [pc, #20]	@ (80148d8 <CDC_Receive_FS+0x24>)
 80148c2:	f7f9 fc39 	bl	800e138 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80148c6:	4804      	ldr	r0, [pc, #16]	@ (80148d8 <CDC_Receive_FS+0x24>)
 80148c8:	f7f9 fc94 	bl	800e1f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80148cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3708      	adds	r7, #8
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	20001a94 	.word	0x20001a94

080148dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	460b      	mov	r3, r1
 80148e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80148ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014924 <CDC_Transmit_FS+0x48>)
 80148ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80148f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d001      	beq.n	8014902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80148fe:	2301      	movs	r3, #1
 8014900:	e00b      	b.n	801491a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014902:	887b      	ldrh	r3, [r7, #2]
 8014904:	461a      	mov	r2, r3
 8014906:	6879      	ldr	r1, [r7, #4]
 8014908:	4806      	ldr	r0, [pc, #24]	@ (8014924 <CDC_Transmit_FS+0x48>)
 801490a:	f7f9 fbf3 	bl	800e0f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801490e:	4805      	ldr	r0, [pc, #20]	@ (8014924 <CDC_Transmit_FS+0x48>)
 8014910:	f7f9 fc30 	bl	800e174 <USBD_CDC_TransmitPacket>
 8014914:	4603      	mov	r3, r0
 8014916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014918:	7bfb      	ldrb	r3, [r7, #15]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3710      	adds	r7, #16
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	bf00      	nop
 8014924:	20001a94 	.word	0x20001a94

08014928 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014928:	b480      	push	{r7}
 801492a:	b087      	sub	sp, #28
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	4613      	mov	r3, r2
 8014934:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014936:	2300      	movs	r3, #0
 8014938:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801493a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801493e:	4618      	mov	r0, r3
 8014940:	371c      	adds	r7, #28
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr
	...

0801494c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	4603      	mov	r3, r0
 8014954:	6039      	str	r1, [r7, #0]
 8014956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	2212      	movs	r2, #18
 801495c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801495e:	4b03      	ldr	r3, [pc, #12]	@ (801496c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014960:	4618      	mov	r0, r3
 8014962:	370c      	adds	r7, #12
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr
 801496c:	200000fc 	.word	0x200000fc

08014970 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	4603      	mov	r3, r0
 8014978:	6039      	str	r1, [r7, #0]
 801497a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	2204      	movs	r2, #4
 8014980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014982:	4b03      	ldr	r3, [pc, #12]	@ (8014990 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014984:	4618      	mov	r0, r3
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr
 8014990:	20000110 	.word	0x20000110

08014994 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	4603      	mov	r3, r0
 801499c:	6039      	str	r1, [r7, #0]
 801499e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80149a0:	79fb      	ldrb	r3, [r7, #7]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d105      	bne.n	80149b2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80149a6:	683a      	ldr	r2, [r7, #0]
 80149a8:	4907      	ldr	r1, [pc, #28]	@ (80149c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80149aa:	4808      	ldr	r0, [pc, #32]	@ (80149cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80149ac:	f7fa fe06 	bl	800f5bc <USBD_GetString>
 80149b0:	e004      	b.n	80149bc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80149b2:	683a      	ldr	r2, [r7, #0]
 80149b4:	4904      	ldr	r1, [pc, #16]	@ (80149c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80149b6:	4805      	ldr	r0, [pc, #20]	@ (80149cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80149b8:	f7fa fe00 	bl	800f5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80149bc:	4b02      	ldr	r3, [pc, #8]	@ (80149c8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3708      	adds	r7, #8
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	20002d70 	.word	0x20002d70
 80149cc:	0801a218 	.word	0x0801a218

080149d0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	4603      	mov	r3, r0
 80149d8:	6039      	str	r1, [r7, #0]
 80149da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80149dc:	683a      	ldr	r2, [r7, #0]
 80149de:	4904      	ldr	r1, [pc, #16]	@ (80149f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80149e0:	4804      	ldr	r0, [pc, #16]	@ (80149f4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80149e2:	f7fa fdeb 	bl	800f5bc <USBD_GetString>
  return USBD_StrDesc;
 80149e6:	4b02      	ldr	r3, [pc, #8]	@ (80149f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	20002d70 	.word	0x20002d70
 80149f4:	0801a234 	.word	0x0801a234

080149f8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	4603      	mov	r3, r0
 8014a00:	6039      	str	r1, [r7, #0]
 8014a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	221a      	movs	r2, #26
 8014a08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014a0a:	f000 f843 	bl	8014a94 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014a0e:	4b02      	ldr	r3, [pc, #8]	@ (8014a18 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	20000114 	.word	0x20000114

08014a1c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	4603      	mov	r3, r0
 8014a24:	6039      	str	r1, [r7, #0]
 8014a26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014a28:	79fb      	ldrb	r3, [r7, #7]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d105      	bne.n	8014a3a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014a2e:	683a      	ldr	r2, [r7, #0]
 8014a30:	4907      	ldr	r1, [pc, #28]	@ (8014a50 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014a32:	4808      	ldr	r0, [pc, #32]	@ (8014a54 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014a34:	f7fa fdc2 	bl	800f5bc <USBD_GetString>
 8014a38:	e004      	b.n	8014a44 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014a3a:	683a      	ldr	r2, [r7, #0]
 8014a3c:	4904      	ldr	r1, [pc, #16]	@ (8014a50 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014a3e:	4805      	ldr	r0, [pc, #20]	@ (8014a54 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014a40:	f7fa fdbc 	bl	800f5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a44:	4b02      	ldr	r3, [pc, #8]	@ (8014a50 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3708      	adds	r7, #8
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	20002d70 	.word	0x20002d70
 8014a54:	0801a240 	.word	0x0801a240

08014a58 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	4603      	mov	r3, r0
 8014a60:	6039      	str	r1, [r7, #0]
 8014a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a64:	79fb      	ldrb	r3, [r7, #7]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d105      	bne.n	8014a76 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014a6a:	683a      	ldr	r2, [r7, #0]
 8014a6c:	4907      	ldr	r1, [pc, #28]	@ (8014a8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014a6e:	4808      	ldr	r0, [pc, #32]	@ (8014a90 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014a70:	f7fa fda4 	bl	800f5bc <USBD_GetString>
 8014a74:	e004      	b.n	8014a80 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	4904      	ldr	r1, [pc, #16]	@ (8014a8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014a7a:	4805      	ldr	r0, [pc, #20]	@ (8014a90 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014a7c:	f7fa fd9e 	bl	800f5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a80:	4b02      	ldr	r3, [pc, #8]	@ (8014a8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3708      	adds	r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	20002d70 	.word	0x20002d70
 8014a90:	0801a24c 	.word	0x0801a24c

08014a94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8014ad8 <Get_SerialNum+0x44>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8014adc <Get_SerialNum+0x48>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8014ae0 <Get_SerialNum+0x4c>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d009      	beq.n	8014ace <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014aba:	2208      	movs	r2, #8
 8014abc:	4909      	ldr	r1, [pc, #36]	@ (8014ae4 <Get_SerialNum+0x50>)
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f000 f814 	bl	8014aec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014ac4:	2204      	movs	r2, #4
 8014ac6:	4908      	ldr	r1, [pc, #32]	@ (8014ae8 <Get_SerialNum+0x54>)
 8014ac8:	68b8      	ldr	r0, [r7, #8]
 8014aca:	f000 f80f 	bl	8014aec <IntToUnicode>
  }
}
 8014ace:	bf00      	nop
 8014ad0:	3710      	adds	r7, #16
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	1fff7590 	.word	0x1fff7590
 8014adc:	1fff7594 	.word	0x1fff7594
 8014ae0:	1fff7598 	.word	0x1fff7598
 8014ae4:	20000116 	.word	0x20000116
 8014ae8:	20000126 	.word	0x20000126

08014aec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b087      	sub	sp, #28
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	4613      	mov	r3, r2
 8014af8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014afe:	2300      	movs	r3, #0
 8014b00:	75fb      	strb	r3, [r7, #23]
 8014b02:	e027      	b.n	8014b54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	0f1b      	lsrs	r3, r3, #28
 8014b08:	2b09      	cmp	r3, #9
 8014b0a:	d80b      	bhi.n	8014b24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	0f1b      	lsrs	r3, r3, #28
 8014b10:	b2da      	uxtb	r2, r3
 8014b12:	7dfb      	ldrb	r3, [r7, #23]
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4619      	mov	r1, r3
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3230      	adds	r2, #48	@ 0x30
 8014b1e:	b2d2      	uxtb	r2, r2
 8014b20:	701a      	strb	r2, [r3, #0]
 8014b22:	e00a      	b.n	8014b3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	0f1b      	lsrs	r3, r3, #28
 8014b28:	b2da      	uxtb	r2, r3
 8014b2a:	7dfb      	ldrb	r3, [r7, #23]
 8014b2c:	005b      	lsls	r3, r3, #1
 8014b2e:	4619      	mov	r1, r3
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	440b      	add	r3, r1
 8014b34:	3237      	adds	r2, #55	@ 0x37
 8014b36:	b2d2      	uxtb	r2, r2
 8014b38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	011b      	lsls	r3, r3, #4
 8014b3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014b40:	7dfb      	ldrb	r3, [r7, #23]
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	3301      	adds	r3, #1
 8014b46:	68ba      	ldr	r2, [r7, #8]
 8014b48:	4413      	add	r3, r2
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014b4e:	7dfb      	ldrb	r3, [r7, #23]
 8014b50:	3301      	adds	r3, #1
 8014b52:	75fb      	strb	r3, [r7, #23]
 8014b54:	7dfa      	ldrb	r2, [r7, #23]
 8014b56:	79fb      	ldrb	r3, [r7, #7]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d3d3      	bcc.n	8014b04 <IntToUnicode+0x18>
  }
}
 8014b5c:	bf00      	nop
 8014b5e:	bf00      	nop
 8014b60:	371c      	adds	r7, #28
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <LL_AHB2_GRP1_EnableClock>:
{
 8014b6a:	b480      	push	{r7}
 8014b6c:	b085      	sub	sp, #20
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	4013      	ands	r3, r2
 8014b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
}
 8014b90:	bf00      	nop
 8014b92:	3714      	adds	r7, #20
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <LL_APB1_GRP1_EnableClock>:
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b085      	sub	sp, #20
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4313      	orrs	r3, r2
 8014bb2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014bb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4013      	ands	r3, r2
 8014bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
}
 8014bc2:	bf00      	nop
 8014bc4:	3714      	adds	r7, #20
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr
	...

08014bd0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b09c      	sub	sp, #112	@ 0x70
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014bd8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014bdc:	2200      	movs	r2, #0
 8014bde:	601a      	str	r2, [r3, #0]
 8014be0:	605a      	str	r2, [r3, #4]
 8014be2:	609a      	str	r2, [r3, #8]
 8014be4:	60da      	str	r2, [r3, #12]
 8014be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014be8:	f107 030c 	add.w	r3, r7, #12
 8014bec:	2250      	movs	r2, #80	@ 0x50
 8014bee:	2100      	movs	r1, #0
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f000 ffbb 	bl	8015b6c <memset>
  if(pcdHandle->Instance==USB)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a23      	ldr	r2, [pc, #140]	@ (8014c88 <HAL_PCD_MspInit+0xb8>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d13e      	bne.n	8014c7e <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014c04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8014c06:	2306      	movs	r3, #6
 8014c08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8014c0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8014c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8014c16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8014c1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8014c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014c20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8014c22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8014c26:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014c28:	f107 030c 	add.w	r3, r7, #12
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f4 fb4f 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d001      	beq.n	8014c3c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8014c38:	f7ef fbc4 	bl	80043c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	f7ff ff94 	bl	8014b6a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014c42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c48:	2302      	movs	r3, #2
 8014c4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c50:	2300      	movs	r3, #0
 8014c52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8014c54:	230a      	movs	r3, #10
 8014c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014c58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014c62:	f7f0 fc23 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014c66:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014c6a:	f7ff ff97 	bl	8014b9c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8014c6e:	2200      	movs	r2, #0
 8014c70:	2105      	movs	r1, #5
 8014c72:	2014      	movs	r0, #20
 8014c74:	f7f0 f995 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014c78:	2014      	movs	r0, #20
 8014c7a:	f7f0 f9ac 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014c7e:	bf00      	nop
 8014c80:	3770      	adds	r7, #112	@ 0x70
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	40006800 	.word	0x40006800

08014c8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	4610      	mov	r0, r2
 8014ca4:	f7f9 fb8f 	bl	800e3c6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014ca8:	bf00      	nop
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	460b      	mov	r3, r1
 8014cba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014cc2:	78fa      	ldrb	r2, [r7, #3]
 8014cc4:	6879      	ldr	r1, [r7, #4]
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	440b      	add	r3, r1
 8014cd0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014cd4:	681a      	ldr	r2, [r3, #0]
 8014cd6:	78fb      	ldrb	r3, [r7, #3]
 8014cd8:	4619      	mov	r1, r3
 8014cda:	f7f9 fbc9 	bl	800e470 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014cde:	bf00      	nop
 8014ce0:	3708      	adds	r7, #8
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}

08014ce6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ce6:	b580      	push	{r7, lr}
 8014ce8:	b082      	sub	sp, #8
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	460b      	mov	r3, r1
 8014cf0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014cf8:	78fa      	ldrb	r2, [r7, #3]
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	4413      	add	r3, r2
 8014d02:	00db      	lsls	r3, r3, #3
 8014d04:	440b      	add	r3, r1
 8014d06:	3324      	adds	r3, #36	@ 0x24
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	78fb      	ldrb	r3, [r7, #3]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	f7f9 fc62 	bl	800e5d6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014d12:	bf00      	nop
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b082      	sub	sp, #8
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f9 fd9c 	bl	800e866 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014d2e:	bf00      	nop
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b084      	sub	sp, #16
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	795b      	ldrb	r3, [r3, #5]
 8014d46:	2b02      	cmp	r3, #2
 8014d48:	d001      	beq.n	8014d4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014d4a:	f7ef fb3b 	bl	80043c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014d54:	7bfa      	ldrb	r2, [r7, #15]
 8014d56:	4611      	mov	r1, r2
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f9 fd40 	bl	800e7de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f9 fce8 	bl	800e73a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014d6a:	bf00      	nop
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
	...

08014d74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7f9 fd3b 	bl	800e7fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	7a5b      	ldrb	r3, [r3, #9]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d90:	4b04      	ldr	r3, [pc, #16]	@ (8014da4 <HAL_PCD_SuspendCallback+0x30>)
 8014d92:	691b      	ldr	r3, [r3, #16]
 8014d94:	4a03      	ldr	r2, [pc, #12]	@ (8014da4 <HAL_PCD_SuspendCallback+0x30>)
 8014d96:	f043 0306 	orr.w	r3, r3, #6
 8014d9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014d9c:	bf00      	nop
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	e000ed00 	.word	0xe000ed00

08014da8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	7a5b      	ldrb	r3, [r3, #9]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d007      	beq.n	8014dc8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014db8:	4b08      	ldr	r3, [pc, #32]	@ (8014ddc <HAL_PCD_ResumeCallback+0x34>)
 8014dba:	691b      	ldr	r3, [r3, #16]
 8014dbc:	4a07      	ldr	r2, [pc, #28]	@ (8014ddc <HAL_PCD_ResumeCallback+0x34>)
 8014dbe:	f023 0306 	bic.w	r3, r3, #6
 8014dc2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014dc4:	f000 f9fa 	bl	80151bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7f9 fd31 	bl	800e836 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014dd4:	bf00      	nop
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	e000ed00 	.word	0xe000ed00

08014de0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014de8:	4a2c      	ldr	r2, [pc, #176]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	4a2a      	ldr	r2, [pc, #168]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014df4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014df8:	f7f2 ff52 	bl	8007ca0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8014dfc:	4b27      	ldr	r3, [pc, #156]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014dfe:	4a28      	ldr	r2, [pc, #160]	@ (8014ea0 <USBD_LL_Init+0xc0>)
 8014e00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014e02:	4b26      	ldr	r3, [pc, #152]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e04:	2208      	movs	r2, #8
 8014e06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014e08:	4b24      	ldr	r3, [pc, #144]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e0a:	2202      	movs	r2, #2
 8014e0c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014e0e:	4b23      	ldr	r3, [pc, #140]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e10:	2202      	movs	r2, #2
 8014e12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014e14:	4b21      	ldr	r3, [pc, #132]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e16:	2200      	movs	r2, #0
 8014e18:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014e1a:	4b20      	ldr	r3, [pc, #128]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014e20:	4b1e      	ldr	r3, [pc, #120]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e22:	2200      	movs	r2, #0
 8014e24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014e26:	4b1d      	ldr	r3, [pc, #116]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e28:	2200      	movs	r2, #0
 8014e2a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014e2c:	481b      	ldr	r0, [pc, #108]	@ (8014e9c <USBD_LL_Init+0xbc>)
 8014e2e:	f7f1 fa17 	bl	8006260 <HAL_PCD_Init>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014e38:	f7ef fac4 	bl	80043c4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e42:	2318      	movs	r3, #24
 8014e44:	2200      	movs	r2, #0
 8014e46:	2100      	movs	r1, #0
 8014e48:	f7f2 fe9e 	bl	8007b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e52:	2358      	movs	r3, #88	@ 0x58
 8014e54:	2200      	movs	r2, #0
 8014e56:	2180      	movs	r1, #128	@ 0x80
 8014e58:	f7f2 fe96 	bl	8007b88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e62:	23c0      	movs	r3, #192	@ 0xc0
 8014e64:	2200      	movs	r2, #0
 8014e66:	2181      	movs	r1, #129	@ 0x81
 8014e68:	f7f2 fe8e 	bl	8007b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8014e76:	2200      	movs	r2, #0
 8014e78:	2101      	movs	r1, #1
 8014e7a:	f7f2 fe85 	bl	8007b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014e88:	2200      	movs	r2, #0
 8014e8a:	2182      	movs	r1, #130	@ 0x82
 8014e8c:	f7f2 fe7c 	bl	8007b88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014e90:	2300      	movs	r3, #0
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	20002f70 	.word	0x20002f70
 8014ea0:	40006800 	.word	0x40006800

08014ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014eac:	2300      	movs	r3, #0
 8014eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7f1 fa9e 	bl	80063fc <HAL_PCD_Start>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ec4:	7bfb      	ldrb	r3, [r7, #15]
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f000 f97e 	bl	80151c8 <USBD_Get_USB_Status>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}

08014eda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014eda:	b580      	push	{r7, lr}
 8014edc:	b084      	sub	sp, #16
 8014ede:	af00      	add	r7, sp, #0
 8014ee0:	6078      	str	r0, [r7, #4]
 8014ee2:	4608      	mov	r0, r1
 8014ee4:	4611      	mov	r1, r2
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	4603      	mov	r3, r0
 8014eea:	70fb      	strb	r3, [r7, #3]
 8014eec:	460b      	mov	r3, r1
 8014eee:	70bb      	strb	r3, [r7, #2]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f02:	78bb      	ldrb	r3, [r7, #2]
 8014f04:	883a      	ldrh	r2, [r7, #0]
 8014f06:	78f9      	ldrb	r1, [r7, #3]
 8014f08:	f7f1 fbe5 	bl	80066d6 <HAL_PCD_EP_Open>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f10:	7bfb      	ldrb	r3, [r7, #15]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 f958 	bl	80151c8 <USBD_Get_USB_Status>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3710      	adds	r7, #16
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
 8014f2e:	460b      	mov	r3, r1
 8014f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f36:	2300      	movs	r3, #0
 8014f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f40:	78fa      	ldrb	r2, [r7, #3]
 8014f42:	4611      	mov	r1, r2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7f1 fc25 	bl	8006794 <HAL_PCD_EP_Close>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f4e:	7bfb      	ldrb	r3, [r7, #15]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f000 f939 	bl	80151c8 <USBD_Get_USB_Status>
 8014f56:	4603      	mov	r3, r0
 8014f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f70:	2300      	movs	r3, #0
 8014f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f7e:	78fa      	ldrb	r2, [r7, #3]
 8014f80:	4611      	mov	r1, r2
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7f1 fcce 	bl	8006924 <HAL_PCD_EP_SetStall>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f8c:	7bfb      	ldrb	r3, [r7, #15]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f000 f91a 	bl	80151c8 <USBD_Get_USB_Status>
 8014f94:	4603      	mov	r3, r0
 8014f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3710      	adds	r7, #16
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b084      	sub	sp, #16
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
 8014faa:	460b      	mov	r3, r1
 8014fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014fbc:	78fa      	ldrb	r2, [r7, #3]
 8014fbe:	4611      	mov	r1, r2
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f1 fd01 	bl	80069c8 <HAL_PCD_EP_ClrStall>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fca:	7bfb      	ldrb	r3, [r7, #15]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f000 f8fb 	bl	80151c8 <USBD_Get_USB_Status>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3710      	adds	r7, #16
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b085      	sub	sp, #20
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	460b      	mov	r3, r1
 8014fea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014ff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	da0b      	bge.n	8015014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ffc:	78fb      	ldrb	r3, [r7, #3]
 8014ffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015002:	68f9      	ldr	r1, [r7, #12]
 8015004:	4613      	mov	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4413      	add	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	440b      	add	r3, r1
 801500e:	3312      	adds	r3, #18
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	e00b      	b.n	801502c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015014:	78fb      	ldrb	r3, [r7, #3]
 8015016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801501a:	68f9      	ldr	r1, [r7, #12]
 801501c:	4613      	mov	r3, r2
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801502a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801502c:	4618      	mov	r0, r3
 801502e:	3714      	adds	r7, #20
 8015030:	46bd      	mov	sp, r7
 8015032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015036:	4770      	bx	lr

08015038 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	460b      	mov	r3, r1
 8015042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015044:	2300      	movs	r3, #0
 8015046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015048:	2300      	movs	r3, #0
 801504a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015052:	78fa      	ldrb	r2, [r7, #3]
 8015054:	4611      	mov	r1, r2
 8015056:	4618      	mov	r0, r3
 8015058:	f7f1 fb19 	bl	800668e <HAL_PCD_SetAddress>
 801505c:	4603      	mov	r3, r0
 801505e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015060:	7bfb      	ldrb	r3, [r7, #15]
 8015062:	4618      	mov	r0, r3
 8015064:	f000 f8b0 	bl	80151c8 <USBD_Get_USB_Status>
 8015068:	4603      	mov	r3, r0
 801506a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801506c:	7bbb      	ldrb	r3, [r7, #14]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b086      	sub	sp, #24
 801507a:	af00      	add	r7, sp, #0
 801507c:	60f8      	str	r0, [r7, #12]
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	603b      	str	r3, [r7, #0]
 8015082:	460b      	mov	r3, r1
 8015084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015086:	2300      	movs	r3, #0
 8015088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801508a:	2300      	movs	r3, #0
 801508c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015094:	7af9      	ldrb	r1, [r7, #11]
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	687a      	ldr	r2, [r7, #4]
 801509a:	f7f1 fc0c 	bl	80068b6 <HAL_PCD_EP_Transmit>
 801509e:	4603      	mov	r3, r0
 80150a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150a2:	7dfb      	ldrb	r3, [r7, #23]
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 f88f 	bl	80151c8 <USBD_Get_USB_Status>
 80150aa:	4603      	mov	r3, r0
 80150ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	607a      	str	r2, [r7, #4]
 80150c2:	603b      	str	r3, [r7, #0]
 80150c4:	460b      	mov	r3, r1
 80150c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150c8:	2300      	movs	r3, #0
 80150ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150cc:	2300      	movs	r3, #0
 80150ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80150d6:	7af9      	ldrb	r1, [r7, #11]
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	f7f1 fba2 	bl	8006824 <HAL_PCD_EP_Receive>
 80150e0:	4603      	mov	r3, r0
 80150e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150e4:	7dfb      	ldrb	r3, [r7, #23]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f000 f86e 	bl	80151c8 <USBD_Get_USB_Status>
 80150ec:	4603      	mov	r3, r0
 80150ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3718      	adds	r7, #24
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b082      	sub	sp, #8
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	460b      	mov	r3, r1
 8015104:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801510c:	78fa      	ldrb	r2, [r7, #3]
 801510e:	4611      	mov	r1, r2
 8015110:	4618      	mov	r0, r3
 8015112:	f7f1 fbb8 	bl	8006886 <HAL_PCD_EP_GetRxCount>
 8015116:	4603      	mov	r3, r0
}
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	460b      	mov	r3, r1
 801512a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801512c:	78fb      	ldrb	r3, [r7, #3]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d002      	beq.n	8015138 <HAL_PCDEx_LPM_Callback+0x18>
 8015132:	2b01      	cmp	r3, #1
 8015134:	d013      	beq.n	801515e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015136:	e023      	b.n	8015180 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	7a5b      	ldrb	r3, [r3, #9]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d007      	beq.n	8015150 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015140:	f000 f83c 	bl	80151bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015144:	4b10      	ldr	r3, [pc, #64]	@ (8015188 <HAL_PCDEx_LPM_Callback+0x68>)
 8015146:	691b      	ldr	r3, [r3, #16]
 8015148:	4a0f      	ldr	r2, [pc, #60]	@ (8015188 <HAL_PCDEx_LPM_Callback+0x68>)
 801514a:	f023 0306 	bic.w	r3, r3, #6
 801514e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015156:	4618      	mov	r0, r3
 8015158:	f7f9 fb6d 	bl	800e836 <USBD_LL_Resume>
    break;
 801515c:	e010      	b.n	8015180 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015164:	4618      	mov	r0, r3
 8015166:	f7f9 fb4a 	bl	800e7fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	7a5b      	ldrb	r3, [r3, #9]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d005      	beq.n	801517e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015172:	4b05      	ldr	r3, [pc, #20]	@ (8015188 <HAL_PCDEx_LPM_Callback+0x68>)
 8015174:	691b      	ldr	r3, [r3, #16]
 8015176:	4a04      	ldr	r2, [pc, #16]	@ (8015188 <HAL_PCDEx_LPM_Callback+0x68>)
 8015178:	f043 0306 	orr.w	r3, r3, #6
 801517c:	6113      	str	r3, [r2, #16]
    break;
 801517e:	bf00      	nop
}
 8015180:	bf00      	nop
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	e000ed00 	.word	0xe000ed00

0801518c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015194:	4b03      	ldr	r3, [pc, #12]	@ (80151a4 <USBD_static_malloc+0x18>)
}
 8015196:	4618      	mov	r0, r3
 8015198:	370c      	adds	r7, #12
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	2000324c 	.word	0x2000324c

080151a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80151b0:	bf00      	nop
 80151b2:	370c      	adds	r7, #12
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr

080151bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80151c0:	f7ee fe18 	bl	8003df4 <SystemClock_Config>
}
 80151c4:	bf00      	nop
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b085      	sub	sp, #20
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	4603      	mov	r3, r0
 80151d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151d2:	2300      	movs	r3, #0
 80151d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80151d6:	79fb      	ldrb	r3, [r7, #7]
 80151d8:	2b03      	cmp	r3, #3
 80151da:	d817      	bhi.n	801520c <USBD_Get_USB_Status+0x44>
 80151dc:	a201      	add	r2, pc, #4	@ (adr r2, 80151e4 <USBD_Get_USB_Status+0x1c>)
 80151de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151e2:	bf00      	nop
 80151e4:	080151f5 	.word	0x080151f5
 80151e8:	080151fb 	.word	0x080151fb
 80151ec:	08015201 	.word	0x08015201
 80151f0:	08015207 	.word	0x08015207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	73fb      	strb	r3, [r7, #15]
    break;
 80151f8:	e00b      	b.n	8015212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80151fa:	2303      	movs	r3, #3
 80151fc:	73fb      	strb	r3, [r7, #15]
    break;
 80151fe:	e008      	b.n	8015212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015200:	2301      	movs	r3, #1
 8015202:	73fb      	strb	r3, [r7, #15]
    break;
 8015204:	e005      	b.n	8015212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015206:	2303      	movs	r3, #3
 8015208:	73fb      	strb	r3, [r7, #15]
    break;
 801520a:	e002      	b.n	8015212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801520c:	2303      	movs	r3, #3
 801520e:	73fb      	strb	r3, [r7, #15]
    break;
 8015210:	bf00      	nop
  }
  return usb_status;
 8015212:	7bfb      	ldrb	r3, [r7, #15]
}
 8015214:	4618      	mov	r0, r3
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015220:	b480      	push	{r7}
 8015222:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015224:	4b05      	ldr	r3, [pc, #20]	@ (801523c <UTIL_LPM_Init+0x1c>)
 8015226:	2200      	movs	r2, #0
 8015228:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801522a:	4b05      	ldr	r3, [pc, #20]	@ (8015240 <UTIL_LPM_Init+0x20>)
 801522c:	2200      	movs	r2, #0
 801522e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015230:	bf00      	nop
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr
 801523a:	bf00      	nop
 801523c:	2000346c 	.word	0x2000346c
 8015240:	20003470 	.word	0x20003470

08015244 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015244:	b480      	push	{r7}
 8015246:	b087      	sub	sp, #28
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015250:	f3ef 8310 	mrs	r3, PRIMASK
 8015254:	613b      	str	r3, [r7, #16]
  return(result);
 8015256:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801525a:	b672      	cpsid	i
}
 801525c:	bf00      	nop
  
  switch(state)
 801525e:	78fb      	ldrb	r3, [r7, #3]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d008      	beq.n	8015276 <UTIL_LPM_SetOffMode+0x32>
 8015264:	2b01      	cmp	r3, #1
 8015266:	d10e      	bne.n	8015286 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015268:	4b0d      	ldr	r3, [pc, #52]	@ (80152a0 <UTIL_LPM_SetOffMode+0x5c>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	4313      	orrs	r3, r2
 8015270:	4a0b      	ldr	r2, [pc, #44]	@ (80152a0 <UTIL_LPM_SetOffMode+0x5c>)
 8015272:	6013      	str	r3, [r2, #0]
      break;
 8015274:	e008      	b.n	8015288 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	43da      	mvns	r2, r3
 801527a:	4b09      	ldr	r3, [pc, #36]	@ (80152a0 <UTIL_LPM_SetOffMode+0x5c>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	4013      	ands	r3, r2
 8015280:	4a07      	ldr	r2, [pc, #28]	@ (80152a0 <UTIL_LPM_SetOffMode+0x5c>)
 8015282:	6013      	str	r3, [r2, #0]
      break;
 8015284:	e000      	b.n	8015288 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015286:	bf00      	nop
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f383 8810 	msr	PRIMASK, r3
}
 8015292:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015294:	bf00      	nop
 8015296:	371c      	adds	r7, #28
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	20003470 	.word	0x20003470

080152a4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b090      	sub	sp, #64	@ 0x40
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80152ac:	4b73      	ldr	r3, [pc, #460]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80152b2:	4b72      	ldr	r3, [pc, #456]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4013      	ands	r3, r2
 80152ba:	4a70      	ldr	r2, [pc, #448]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 80152bc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80152be:	4b70      	ldr	r3, [pc, #448]	@ (8015480 <UTIL_SEQ_Run+0x1dc>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80152c4:	4b6f      	ldr	r3, [pc, #444]	@ (8015484 <UTIL_SEQ_Run+0x1e0>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80152ca:	4b6f      	ldr	r3, [pc, #444]	@ (8015488 <UTIL_SEQ_Run+0x1e4>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80152d0:	4b6e      	ldr	r3, [pc, #440]	@ (801548c <UTIL_SEQ_Run+0x1e8>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80152d6:	e08d      	b.n	80153f4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80152d8:	2300      	movs	r3, #0
 80152da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80152dc:	e002      	b.n	80152e4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80152de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152e0:	3301      	adds	r3, #1
 80152e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80152e4:	4a6a      	ldr	r2, [pc, #424]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 80152e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80152ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152ee:	401a      	ands	r2, r3
 80152f0:	4b62      	ldr	r3, [pc, #392]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4013      	ands	r3, r2
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d0f1      	beq.n	80152de <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80152fa:	4a65      	ldr	r2, [pc, #404]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 80152fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80152fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015304:	401a      	ands	r2, r3
 8015306:	4b5d      	ldr	r3, [pc, #372]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4013      	ands	r3, r2
 801530c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801530e:	4a60      	ldr	r2, [pc, #384]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 8015310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015312:	00db      	lsls	r3, r3, #3
 8015314:	4413      	add	r3, r2
 8015316:	685a      	ldr	r2, [r3, #4]
 8015318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801531a:	4013      	ands	r3, r2
 801531c:	2b00      	cmp	r3, #0
 801531e:	d106      	bne.n	801532e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015320:	4a5b      	ldr	r2, [pc, #364]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 8015322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015324:	00db      	lsls	r3, r3, #3
 8015326:	4413      	add	r3, r2
 8015328:	f04f 32ff 	mov.w	r2, #4294967295
 801532c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801532e:	4a58      	ldr	r2, [pc, #352]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 8015330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015332:	00db      	lsls	r3, r3, #3
 8015334:	4413      	add	r3, r2
 8015336:	685a      	ldr	r2, [r3, #4]
 8015338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801533a:	4013      	ands	r3, r2
 801533c:	4618      	mov	r0, r3
 801533e:	f000 f9b3 	bl	80156a8 <SEQ_BitPosition>
 8015342:	4603      	mov	r3, r0
 8015344:	461a      	mov	r2, r3
 8015346:	4b53      	ldr	r3, [pc, #332]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 8015348:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801534a:	4a51      	ldr	r2, [pc, #324]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 801534c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801534e:	00db      	lsls	r3, r3, #3
 8015350:	4413      	add	r3, r2
 8015352:	685a      	ldr	r2, [r3, #4]
 8015354:	4b4f      	ldr	r3, [pc, #316]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2101      	movs	r1, #1
 801535a:	fa01 f303 	lsl.w	r3, r1, r3
 801535e:	43db      	mvns	r3, r3
 8015360:	401a      	ands	r2, r3
 8015362:	494b      	ldr	r1, [pc, #300]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 8015364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	440b      	add	r3, r1
 801536a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801536c:	f3ef 8310 	mrs	r3, PRIMASK
 8015370:	61bb      	str	r3, [r7, #24]
  return(result);
 8015372:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015374:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015376:	b672      	cpsid	i
}
 8015378:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801537a:	4b46      	ldr	r3, [pc, #280]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2201      	movs	r2, #1
 8015380:	fa02 f303 	lsl.w	r3, r2, r3
 8015384:	43da      	mvns	r2, r3
 8015386:	4b3e      	ldr	r3, [pc, #248]	@ (8015480 <UTIL_SEQ_Run+0x1dc>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	4013      	ands	r3, r2
 801538c:	4a3c      	ldr	r2, [pc, #240]	@ (8015480 <UTIL_SEQ_Run+0x1dc>)
 801538e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015390:	2305      	movs	r3, #5
 8015392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015394:	e013      	b.n	80153be <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015398:	3b01      	subs	r3, #1
 801539a:	4a3d      	ldr	r2, [pc, #244]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 801539c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80153a0:	4b3c      	ldr	r3, [pc, #240]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2201      	movs	r2, #1
 80153a6:	fa02 f303 	lsl.w	r3, r2, r3
 80153aa:	43da      	mvns	r2, r3
 80153ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153ae:	3b01      	subs	r3, #1
 80153b0:	400a      	ands	r2, r1
 80153b2:	4937      	ldr	r1, [pc, #220]	@ (8015490 <UTIL_SEQ_Run+0x1ec>)
 80153b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80153b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153ba:	3b01      	subs	r3, #1
 80153bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80153be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1e8      	bne.n	8015396 <UTIL_SEQ_Run+0xf2>
 80153c4:	6a3b      	ldr	r3, [r7, #32]
 80153c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	f383 8810 	msr	PRIMASK, r3
}
 80153ce:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80153d0:	4b30      	ldr	r3, [pc, #192]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	4a30      	ldr	r2, [pc, #192]	@ (8015498 <UTIL_SEQ_Run+0x1f4>)
 80153d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153da:	4798      	blx	r3

    local_taskset = TaskSet;
 80153dc:	4b28      	ldr	r3, [pc, #160]	@ (8015480 <UTIL_SEQ_Run+0x1dc>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80153e2:	4b28      	ldr	r3, [pc, #160]	@ (8015484 <UTIL_SEQ_Run+0x1e0>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80153e8:	4b27      	ldr	r3, [pc, #156]	@ (8015488 <UTIL_SEQ_Run+0x1e4>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80153ee:	4b27      	ldr	r3, [pc, #156]	@ (801548c <UTIL_SEQ_Run+0x1e8>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80153f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80153f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153f8:	401a      	ands	r2, r3
 80153fa:	4b20      	ldr	r3, [pc, #128]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	4013      	ands	r3, r2
 8015400:	2b00      	cmp	r3, #0
 8015402:	d005      	beq.n	8015410 <UTIL_SEQ_Run+0x16c>
 8015404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015408:	4013      	ands	r3, r2
 801540a:	2b00      	cmp	r3, #0
 801540c:	f43f af64 	beq.w	80152d8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015410:	4b20      	ldr	r3, [pc, #128]	@ (8015494 <UTIL_SEQ_Run+0x1f0>)
 8015412:	f04f 32ff 	mov.w	r2, #4294967295
 8015416:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015418:	f000 f938 	bl	801568c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801541c:	f3ef 8310 	mrs	r3, PRIMASK
 8015420:	613b      	str	r3, [r7, #16]
  return(result);
 8015422:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015426:	b672      	cpsid	i
}
 8015428:	bf00      	nop
  local_taskset = TaskSet;
 801542a:	4b15      	ldr	r3, [pc, #84]	@ (8015480 <UTIL_SEQ_Run+0x1dc>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015430:	4b14      	ldr	r3, [pc, #80]	@ (8015484 <UTIL_SEQ_Run+0x1e0>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015436:	4b14      	ldr	r3, [pc, #80]	@ (8015488 <UTIL_SEQ_Run+0x1e4>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801543c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015440:	401a      	ands	r2, r3
 8015442:	4b0e      	ldr	r3, [pc, #56]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4013      	ands	r3, r2
 8015448:	2b00      	cmp	r3, #0
 801544a:	d107      	bne.n	801545c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801544c:	4b0f      	ldr	r3, [pc, #60]	@ (801548c <UTIL_SEQ_Run+0x1e8>)
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015452:	4013      	ands	r3, r2
 8015454:	2b00      	cmp	r3, #0
 8015456:	d101      	bne.n	801545c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015458:	f7ed fa73 	bl	8002942 <UTIL_SEQ_Idle>
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f383 8810 	msr	PRIMASK, r3
}
 8015466:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015468:	f000 f917 	bl	801569a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801546c:	4a03      	ldr	r2, [pc, #12]	@ (801547c <UTIL_SEQ_Run+0x1d8>)
 801546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015470:	6013      	str	r3, [r2, #0]

  return;
 8015472:	bf00      	nop
}
 8015474:	3740      	adds	r7, #64	@ 0x40
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	20000134 	.word	0x20000134
 8015480:	20003474 	.word	0x20003474
 8015484:	20003478 	.word	0x20003478
 8015488:	20000130 	.word	0x20000130
 801548c:	2000347c 	.word	0x2000347c
 8015490:	20003504 	.word	0x20003504
 8015494:	20003480 	.word	0x20003480
 8015498:	20003484 	.word	0x20003484

0801549c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b088      	sub	sp, #32
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154a8:	f3ef 8310 	mrs	r3, PRIMASK
 80154ac:	617b      	str	r3, [r7, #20]
  return(result);
 80154ae:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80154b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80154b2:	b672      	cpsid	i
}
 80154b4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80154b6:	68f8      	ldr	r0, [r7, #12]
 80154b8:	f000 f8f6 	bl	80156a8 <SEQ_BitPosition>
 80154bc:	4603      	mov	r3, r0
 80154be:	4619      	mov	r1, r3
 80154c0:	4a06      	ldr	r2, [pc, #24]	@ (80154dc <UTIL_SEQ_RegTask+0x40>)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	f383 8810 	msr	PRIMASK, r3
}
 80154d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80154d4:	bf00      	nop
}
 80154d6:	3720      	adds	r7, #32
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	20003484 	.word	0x20003484

080154e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80154e0:	b480      	push	{r7}
 80154e2:	b087      	sub	sp, #28
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154ea:	f3ef 8310 	mrs	r3, PRIMASK
 80154ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80154f0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80154f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80154f4:	b672      	cpsid	i
}
 80154f6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80154f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015530 <UTIL_SEQ_SetTask+0x50>)
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	4313      	orrs	r3, r2
 8015500:	4a0b      	ldr	r2, [pc, #44]	@ (8015530 <UTIL_SEQ_SetTask+0x50>)
 8015502:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015504:	4a0b      	ldr	r2, [pc, #44]	@ (8015534 <UTIL_SEQ_SetTask+0x54>)
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	431a      	orrs	r2, r3
 8015510:	4908      	ldr	r1, [pc, #32]	@ (8015534 <UTIL_SEQ_SetTask+0x54>)
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	f383 8810 	msr	PRIMASK, r3
}
 8015522:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015524:	bf00      	nop
}
 8015526:	371c      	adds	r7, #28
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr
 8015530:	20003474 	.word	0x20003474
 8015534:	20003504 	.word	0x20003504

08015538 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015538:	b480      	push	{r7}
 801553a:	b087      	sub	sp, #28
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015540:	f3ef 8310 	mrs	r3, PRIMASK
 8015544:	60fb      	str	r3, [r7, #12]
  return(result);
 8015546:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801554a:	b672      	cpsid	i
}
 801554c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	43da      	mvns	r2, r3
 8015552:	4b08      	ldr	r3, [pc, #32]	@ (8015574 <UTIL_SEQ_PauseTask+0x3c>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	4013      	ands	r3, r2
 8015558:	4a06      	ldr	r2, [pc, #24]	@ (8015574 <UTIL_SEQ_PauseTask+0x3c>)
 801555a:	6013      	str	r3, [r2, #0]
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	f383 8810 	msr	PRIMASK, r3
}
 8015566:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015568:	bf00      	nop
}
 801556a:	371c      	adds	r7, #28
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	20000130 	.word	0x20000130

08015578 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015578:	b480      	push	{r7}
 801557a:	b087      	sub	sp, #28
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015580:	f3ef 8310 	mrs	r3, PRIMASK
 8015584:	60fb      	str	r3, [r7, #12]
  return(result);
 8015586:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801558a:	b672      	cpsid	i
}
 801558c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801558e:	4b09      	ldr	r3, [pc, #36]	@ (80155b4 <UTIL_SEQ_ResumeTask+0x3c>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	4313      	orrs	r3, r2
 8015596:	4a07      	ldr	r2, [pc, #28]	@ (80155b4 <UTIL_SEQ_ResumeTask+0x3c>)
 8015598:	6013      	str	r3, [r2, #0]
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	f383 8810 	msr	PRIMASK, r3
}
 80155a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80155a6:	bf00      	nop
}
 80155a8:	371c      	adds	r7, #28
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr
 80155b2:	bf00      	nop
 80155b4:	20000130 	.word	0x20000130

080155b8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80155b8:	b480      	push	{r7}
 80155ba:	b087      	sub	sp, #28
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80155c0:	f3ef 8310 	mrs	r3, PRIMASK
 80155c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80155c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80155c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80155ca:	b672      	cpsid	i
}
 80155cc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80155ce:	4b09      	ldr	r3, [pc, #36]	@ (80155f4 <UTIL_SEQ_SetEvt+0x3c>)
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4313      	orrs	r3, r2
 80155d6:	4a07      	ldr	r2, [pc, #28]	@ (80155f4 <UTIL_SEQ_SetEvt+0x3c>)
 80155d8:	6013      	str	r3, [r2, #0]
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	f383 8810 	msr	PRIMASK, r3
}
 80155e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80155e6:	bf00      	nop
}
 80155e8:	371c      	adds	r7, #28
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	20003478 	.word	0x20003478

080155f8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b088      	sub	sp, #32
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8015600:	4b1f      	ldr	r3, [pc, #124]	@ (8015680 <UTIL_SEQ_WaitEvt+0x88>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8015606:	4b1e      	ldr	r3, [pc, #120]	@ (8015680 <UTIL_SEQ_WaitEvt+0x88>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801560e:	d102      	bne.n	8015616 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8015610:	2300      	movs	r3, #0
 8015612:	61fb      	str	r3, [r7, #28]
 8015614:	e005      	b.n	8015622 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8015616:	4b1a      	ldr	r3, [pc, #104]	@ (8015680 <UTIL_SEQ_WaitEvt+0x88>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2201      	movs	r2, #1
 801561c:	fa02 f303 	lsl.w	r3, r2, r3
 8015620:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8015622:	4b18      	ldr	r3, [pc, #96]	@ (8015684 <UTIL_SEQ_WaitEvt+0x8c>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8015628:	4a16      	ldr	r2, [pc, #88]	@ (8015684 <UTIL_SEQ_WaitEvt+0x8c>)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801562e:	e003      	b.n	8015638 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8015630:	6879      	ldr	r1, [r7, #4]
 8015632:	69f8      	ldr	r0, [r7, #28]
 8015634:	f7ed f98c 	bl	8002950 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8015638:	4b13      	ldr	r3, [pc, #76]	@ (8015688 <UTIL_SEQ_WaitEvt+0x90>)
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	4013      	ands	r3, r2
 8015640:	2b00      	cmp	r3, #0
 8015642:	d0f5      	beq.n	8015630 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8015644:	4a0e      	ldr	r2, [pc, #56]	@ (8015680 <UTIL_SEQ_WaitEvt+0x88>)
 8015646:	69bb      	ldr	r3, [r7, #24]
 8015648:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801564a:	f3ef 8310 	mrs	r3, PRIMASK
 801564e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015650:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015654:	b672      	cpsid	i
}
 8015656:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	43da      	mvns	r2, r3
 801565c:	4b0a      	ldr	r3, [pc, #40]	@ (8015688 <UTIL_SEQ_WaitEvt+0x90>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	4013      	ands	r3, r2
 8015662:	4a09      	ldr	r2, [pc, #36]	@ (8015688 <UTIL_SEQ_WaitEvt+0x90>)
 8015664:	6013      	str	r3, [r2, #0]
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	f383 8810 	msr	PRIMASK, r3
}
 8015670:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8015672:	4a04      	ldr	r2, [pc, #16]	@ (8015684 <UTIL_SEQ_WaitEvt+0x8c>)
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	6013      	str	r3, [r2, #0]
  return;
 8015678:	bf00      	nop
}
 801567a:	3720      	adds	r7, #32
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}
 8015680:	20003480 	.word	0x20003480
 8015684:	2000347c 	.word	0x2000347c
 8015688:	20003478 	.word	0x20003478

0801568c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801568c:	b480      	push	{r7}
 801568e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8015690:	bf00      	nop
}
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr

0801569a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801569a:	b480      	push	{r7}
 801569c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801569e:	bf00      	nop
}
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b085      	sub	sp, #20
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d101      	bne.n	80156be <SEQ_BitPosition+0x16>
    return 32U;
 80156ba:	2320      	movs	r3, #32
 80156bc:	e003      	b.n	80156c6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	fab3 f383 	clz	r3, r3
 80156c4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 80156c6:	f1c3 031f 	rsb	r3, r3, #31
 80156ca:	b2db      	uxtb	r3, r3
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3714      	adds	r7, #20
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <std>:
 80156d8:	2300      	movs	r3, #0
 80156da:	b510      	push	{r4, lr}
 80156dc:	4604      	mov	r4, r0
 80156de:	e9c0 3300 	strd	r3, r3, [r0]
 80156e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80156e6:	6083      	str	r3, [r0, #8]
 80156e8:	8181      	strh	r1, [r0, #12]
 80156ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80156ec:	81c2      	strh	r2, [r0, #14]
 80156ee:	6183      	str	r3, [r0, #24]
 80156f0:	4619      	mov	r1, r3
 80156f2:	2208      	movs	r2, #8
 80156f4:	305c      	adds	r0, #92	@ 0x5c
 80156f6:	f000 fa39 	bl	8015b6c <memset>
 80156fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015730 <std+0x58>)
 80156fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80156fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015734 <std+0x5c>)
 8015700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015702:	4b0d      	ldr	r3, [pc, #52]	@ (8015738 <std+0x60>)
 8015704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015706:	4b0d      	ldr	r3, [pc, #52]	@ (801573c <std+0x64>)
 8015708:	6323      	str	r3, [r4, #48]	@ 0x30
 801570a:	4b0d      	ldr	r3, [pc, #52]	@ (8015740 <std+0x68>)
 801570c:	6224      	str	r4, [r4, #32]
 801570e:	429c      	cmp	r4, r3
 8015710:	d006      	beq.n	8015720 <std+0x48>
 8015712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015716:	4294      	cmp	r4, r2
 8015718:	d002      	beq.n	8015720 <std+0x48>
 801571a:	33d0      	adds	r3, #208	@ 0xd0
 801571c:	429c      	cmp	r4, r3
 801571e:	d105      	bne.n	801572c <std+0x54>
 8015720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015728:	f000 baae 	b.w	8015c88 <__retarget_lock_init_recursive>
 801572c:	bd10      	pop	{r4, pc}
 801572e:	bf00      	nop
 8015730:	0801594d 	.word	0x0801594d
 8015734:	0801596f 	.word	0x0801596f
 8015738:	080159a7 	.word	0x080159a7
 801573c:	080159cb 	.word	0x080159cb
 8015740:	2000352c 	.word	0x2000352c

08015744 <stdio_exit_handler>:
 8015744:	4a02      	ldr	r2, [pc, #8]	@ (8015750 <stdio_exit_handler+0xc>)
 8015746:	4903      	ldr	r1, [pc, #12]	@ (8015754 <stdio_exit_handler+0x10>)
 8015748:	4803      	ldr	r0, [pc, #12]	@ (8015758 <stdio_exit_handler+0x14>)
 801574a:	f000 b869 	b.w	8015820 <_fwalk_sglue>
 801574e:	bf00      	nop
 8015750:	20000138 	.word	0x20000138
 8015754:	080167f5 	.word	0x080167f5
 8015758:	20000148 	.word	0x20000148

0801575c <cleanup_stdio>:
 801575c:	6841      	ldr	r1, [r0, #4]
 801575e:	4b0c      	ldr	r3, [pc, #48]	@ (8015790 <cleanup_stdio+0x34>)
 8015760:	4299      	cmp	r1, r3
 8015762:	b510      	push	{r4, lr}
 8015764:	4604      	mov	r4, r0
 8015766:	d001      	beq.n	801576c <cleanup_stdio+0x10>
 8015768:	f001 f844 	bl	80167f4 <_fflush_r>
 801576c:	68a1      	ldr	r1, [r4, #8]
 801576e:	4b09      	ldr	r3, [pc, #36]	@ (8015794 <cleanup_stdio+0x38>)
 8015770:	4299      	cmp	r1, r3
 8015772:	d002      	beq.n	801577a <cleanup_stdio+0x1e>
 8015774:	4620      	mov	r0, r4
 8015776:	f001 f83d 	bl	80167f4 <_fflush_r>
 801577a:	68e1      	ldr	r1, [r4, #12]
 801577c:	4b06      	ldr	r3, [pc, #24]	@ (8015798 <cleanup_stdio+0x3c>)
 801577e:	4299      	cmp	r1, r3
 8015780:	d004      	beq.n	801578c <cleanup_stdio+0x30>
 8015782:	4620      	mov	r0, r4
 8015784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015788:	f001 b834 	b.w	80167f4 <_fflush_r>
 801578c:	bd10      	pop	{r4, pc}
 801578e:	bf00      	nop
 8015790:	2000352c 	.word	0x2000352c
 8015794:	20003594 	.word	0x20003594
 8015798:	200035fc 	.word	0x200035fc

0801579c <global_stdio_init.part.0>:
 801579c:	b510      	push	{r4, lr}
 801579e:	4b0b      	ldr	r3, [pc, #44]	@ (80157cc <global_stdio_init.part.0+0x30>)
 80157a0:	4c0b      	ldr	r4, [pc, #44]	@ (80157d0 <global_stdio_init.part.0+0x34>)
 80157a2:	4a0c      	ldr	r2, [pc, #48]	@ (80157d4 <global_stdio_init.part.0+0x38>)
 80157a4:	601a      	str	r2, [r3, #0]
 80157a6:	4620      	mov	r0, r4
 80157a8:	2200      	movs	r2, #0
 80157aa:	2104      	movs	r1, #4
 80157ac:	f7ff ff94 	bl	80156d8 <std>
 80157b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80157b4:	2201      	movs	r2, #1
 80157b6:	2109      	movs	r1, #9
 80157b8:	f7ff ff8e 	bl	80156d8 <std>
 80157bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80157c0:	2202      	movs	r2, #2
 80157c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157c6:	2112      	movs	r1, #18
 80157c8:	f7ff bf86 	b.w	80156d8 <std>
 80157cc:	20003664 	.word	0x20003664
 80157d0:	2000352c 	.word	0x2000352c
 80157d4:	08015745 	.word	0x08015745

080157d8 <__sfp_lock_acquire>:
 80157d8:	4801      	ldr	r0, [pc, #4]	@ (80157e0 <__sfp_lock_acquire+0x8>)
 80157da:	f000 ba56 	b.w	8015c8a <__retarget_lock_acquire_recursive>
 80157de:	bf00      	nop
 80157e0:	2000366d 	.word	0x2000366d

080157e4 <__sfp_lock_release>:
 80157e4:	4801      	ldr	r0, [pc, #4]	@ (80157ec <__sfp_lock_release+0x8>)
 80157e6:	f000 ba51 	b.w	8015c8c <__retarget_lock_release_recursive>
 80157ea:	bf00      	nop
 80157ec:	2000366d 	.word	0x2000366d

080157f0 <__sinit>:
 80157f0:	b510      	push	{r4, lr}
 80157f2:	4604      	mov	r4, r0
 80157f4:	f7ff fff0 	bl	80157d8 <__sfp_lock_acquire>
 80157f8:	6a23      	ldr	r3, [r4, #32]
 80157fa:	b11b      	cbz	r3, 8015804 <__sinit+0x14>
 80157fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015800:	f7ff bff0 	b.w	80157e4 <__sfp_lock_release>
 8015804:	4b04      	ldr	r3, [pc, #16]	@ (8015818 <__sinit+0x28>)
 8015806:	6223      	str	r3, [r4, #32]
 8015808:	4b04      	ldr	r3, [pc, #16]	@ (801581c <__sinit+0x2c>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d1f5      	bne.n	80157fc <__sinit+0xc>
 8015810:	f7ff ffc4 	bl	801579c <global_stdio_init.part.0>
 8015814:	e7f2      	b.n	80157fc <__sinit+0xc>
 8015816:	bf00      	nop
 8015818:	0801575d 	.word	0x0801575d
 801581c:	20003664 	.word	0x20003664

08015820 <_fwalk_sglue>:
 8015820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015824:	4607      	mov	r7, r0
 8015826:	4688      	mov	r8, r1
 8015828:	4614      	mov	r4, r2
 801582a:	2600      	movs	r6, #0
 801582c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015830:	f1b9 0901 	subs.w	r9, r9, #1
 8015834:	d505      	bpl.n	8015842 <_fwalk_sglue+0x22>
 8015836:	6824      	ldr	r4, [r4, #0]
 8015838:	2c00      	cmp	r4, #0
 801583a:	d1f7      	bne.n	801582c <_fwalk_sglue+0xc>
 801583c:	4630      	mov	r0, r6
 801583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015842:	89ab      	ldrh	r3, [r5, #12]
 8015844:	2b01      	cmp	r3, #1
 8015846:	d907      	bls.n	8015858 <_fwalk_sglue+0x38>
 8015848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801584c:	3301      	adds	r3, #1
 801584e:	d003      	beq.n	8015858 <_fwalk_sglue+0x38>
 8015850:	4629      	mov	r1, r5
 8015852:	4638      	mov	r0, r7
 8015854:	47c0      	blx	r8
 8015856:	4306      	orrs	r6, r0
 8015858:	3568      	adds	r5, #104	@ 0x68
 801585a:	e7e9      	b.n	8015830 <_fwalk_sglue+0x10>

0801585c <iprintf>:
 801585c:	b40f      	push	{r0, r1, r2, r3}
 801585e:	b507      	push	{r0, r1, r2, lr}
 8015860:	4906      	ldr	r1, [pc, #24]	@ (801587c <iprintf+0x20>)
 8015862:	ab04      	add	r3, sp, #16
 8015864:	6808      	ldr	r0, [r1, #0]
 8015866:	f853 2b04 	ldr.w	r2, [r3], #4
 801586a:	6881      	ldr	r1, [r0, #8]
 801586c:	9301      	str	r3, [sp, #4]
 801586e:	f000 fc97 	bl	80161a0 <_vfiprintf_r>
 8015872:	b003      	add	sp, #12
 8015874:	f85d eb04 	ldr.w	lr, [sp], #4
 8015878:	b004      	add	sp, #16
 801587a:	4770      	bx	lr
 801587c:	20000144 	.word	0x20000144

08015880 <putchar>:
 8015880:	4b02      	ldr	r3, [pc, #8]	@ (801588c <putchar+0xc>)
 8015882:	4601      	mov	r1, r0
 8015884:	6818      	ldr	r0, [r3, #0]
 8015886:	6882      	ldr	r2, [r0, #8]
 8015888:	f001 b83e 	b.w	8016908 <_putc_r>
 801588c:	20000144 	.word	0x20000144

08015890 <_puts_r>:
 8015890:	6a03      	ldr	r3, [r0, #32]
 8015892:	b570      	push	{r4, r5, r6, lr}
 8015894:	6884      	ldr	r4, [r0, #8]
 8015896:	4605      	mov	r5, r0
 8015898:	460e      	mov	r6, r1
 801589a:	b90b      	cbnz	r3, 80158a0 <_puts_r+0x10>
 801589c:	f7ff ffa8 	bl	80157f0 <__sinit>
 80158a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80158a2:	07db      	lsls	r3, r3, #31
 80158a4:	d405      	bmi.n	80158b2 <_puts_r+0x22>
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	0598      	lsls	r0, r3, #22
 80158aa:	d402      	bmi.n	80158b2 <_puts_r+0x22>
 80158ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80158ae:	f000 f9ec 	bl	8015c8a <__retarget_lock_acquire_recursive>
 80158b2:	89a3      	ldrh	r3, [r4, #12]
 80158b4:	0719      	lsls	r1, r3, #28
 80158b6:	d502      	bpl.n	80158be <_puts_r+0x2e>
 80158b8:	6923      	ldr	r3, [r4, #16]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d135      	bne.n	801592a <_puts_r+0x9a>
 80158be:	4621      	mov	r1, r4
 80158c0:	4628      	mov	r0, r5
 80158c2:	f000 f8fd 	bl	8015ac0 <__swsetup_r>
 80158c6:	b380      	cbz	r0, 801592a <_puts_r+0x9a>
 80158c8:	f04f 35ff 	mov.w	r5, #4294967295
 80158cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80158ce:	07da      	lsls	r2, r3, #31
 80158d0:	d405      	bmi.n	80158de <_puts_r+0x4e>
 80158d2:	89a3      	ldrh	r3, [r4, #12]
 80158d4:	059b      	lsls	r3, r3, #22
 80158d6:	d402      	bmi.n	80158de <_puts_r+0x4e>
 80158d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80158da:	f000 f9d7 	bl	8015c8c <__retarget_lock_release_recursive>
 80158de:	4628      	mov	r0, r5
 80158e0:	bd70      	pop	{r4, r5, r6, pc}
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	da04      	bge.n	80158f0 <_puts_r+0x60>
 80158e6:	69a2      	ldr	r2, [r4, #24]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	dc17      	bgt.n	801591c <_puts_r+0x8c>
 80158ec:	290a      	cmp	r1, #10
 80158ee:	d015      	beq.n	801591c <_puts_r+0x8c>
 80158f0:	6823      	ldr	r3, [r4, #0]
 80158f2:	1c5a      	adds	r2, r3, #1
 80158f4:	6022      	str	r2, [r4, #0]
 80158f6:	7019      	strb	r1, [r3, #0]
 80158f8:	68a3      	ldr	r3, [r4, #8]
 80158fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80158fe:	3b01      	subs	r3, #1
 8015900:	60a3      	str	r3, [r4, #8]
 8015902:	2900      	cmp	r1, #0
 8015904:	d1ed      	bne.n	80158e2 <_puts_r+0x52>
 8015906:	2b00      	cmp	r3, #0
 8015908:	da11      	bge.n	801592e <_puts_r+0x9e>
 801590a:	4622      	mov	r2, r4
 801590c:	210a      	movs	r1, #10
 801590e:	4628      	mov	r0, r5
 8015910:	f000 f898 	bl	8015a44 <__swbuf_r>
 8015914:	3001      	adds	r0, #1
 8015916:	d0d7      	beq.n	80158c8 <_puts_r+0x38>
 8015918:	250a      	movs	r5, #10
 801591a:	e7d7      	b.n	80158cc <_puts_r+0x3c>
 801591c:	4622      	mov	r2, r4
 801591e:	4628      	mov	r0, r5
 8015920:	f000 f890 	bl	8015a44 <__swbuf_r>
 8015924:	3001      	adds	r0, #1
 8015926:	d1e7      	bne.n	80158f8 <_puts_r+0x68>
 8015928:	e7ce      	b.n	80158c8 <_puts_r+0x38>
 801592a:	3e01      	subs	r6, #1
 801592c:	e7e4      	b.n	80158f8 <_puts_r+0x68>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	1c5a      	adds	r2, r3, #1
 8015932:	6022      	str	r2, [r4, #0]
 8015934:	220a      	movs	r2, #10
 8015936:	701a      	strb	r2, [r3, #0]
 8015938:	e7ee      	b.n	8015918 <_puts_r+0x88>
	...

0801593c <puts>:
 801593c:	4b02      	ldr	r3, [pc, #8]	@ (8015948 <puts+0xc>)
 801593e:	4601      	mov	r1, r0
 8015940:	6818      	ldr	r0, [r3, #0]
 8015942:	f7ff bfa5 	b.w	8015890 <_puts_r>
 8015946:	bf00      	nop
 8015948:	20000144 	.word	0x20000144

0801594c <__sread>:
 801594c:	b510      	push	{r4, lr}
 801594e:	460c      	mov	r4, r1
 8015950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015954:	f000 f94a 	bl	8015bec <_read_r>
 8015958:	2800      	cmp	r0, #0
 801595a:	bfab      	itete	ge
 801595c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801595e:	89a3      	ldrhlt	r3, [r4, #12]
 8015960:	181b      	addge	r3, r3, r0
 8015962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015966:	bfac      	ite	ge
 8015968:	6563      	strge	r3, [r4, #84]	@ 0x54
 801596a:	81a3      	strhlt	r3, [r4, #12]
 801596c:	bd10      	pop	{r4, pc}

0801596e <__swrite>:
 801596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015972:	461f      	mov	r7, r3
 8015974:	898b      	ldrh	r3, [r1, #12]
 8015976:	05db      	lsls	r3, r3, #23
 8015978:	4605      	mov	r5, r0
 801597a:	460c      	mov	r4, r1
 801597c:	4616      	mov	r6, r2
 801597e:	d505      	bpl.n	801598c <__swrite+0x1e>
 8015980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015984:	2302      	movs	r3, #2
 8015986:	2200      	movs	r2, #0
 8015988:	f000 f91e 	bl	8015bc8 <_lseek_r>
 801598c:	89a3      	ldrh	r3, [r4, #12]
 801598e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015996:	81a3      	strh	r3, [r4, #12]
 8015998:	4632      	mov	r2, r6
 801599a:	463b      	mov	r3, r7
 801599c:	4628      	mov	r0, r5
 801599e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159a2:	f000 b935 	b.w	8015c10 <_write_r>

080159a6 <__sseek>:
 80159a6:	b510      	push	{r4, lr}
 80159a8:	460c      	mov	r4, r1
 80159aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ae:	f000 f90b 	bl	8015bc8 <_lseek_r>
 80159b2:	1c43      	adds	r3, r0, #1
 80159b4:	89a3      	ldrh	r3, [r4, #12]
 80159b6:	bf15      	itete	ne
 80159b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80159ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80159be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80159c2:	81a3      	strheq	r3, [r4, #12]
 80159c4:	bf18      	it	ne
 80159c6:	81a3      	strhne	r3, [r4, #12]
 80159c8:	bd10      	pop	{r4, pc}

080159ca <__sclose>:
 80159ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ce:	f000 b8eb 	b.w	8015ba8 <_close_r>

080159d2 <_vsniprintf_r>:
 80159d2:	b530      	push	{r4, r5, lr}
 80159d4:	4614      	mov	r4, r2
 80159d6:	2c00      	cmp	r4, #0
 80159d8:	b09b      	sub	sp, #108	@ 0x6c
 80159da:	4605      	mov	r5, r0
 80159dc:	461a      	mov	r2, r3
 80159de:	da05      	bge.n	80159ec <_vsniprintf_r+0x1a>
 80159e0:	238b      	movs	r3, #139	@ 0x8b
 80159e2:	6003      	str	r3, [r0, #0]
 80159e4:	f04f 30ff 	mov.w	r0, #4294967295
 80159e8:	b01b      	add	sp, #108	@ 0x6c
 80159ea:	bd30      	pop	{r4, r5, pc}
 80159ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80159f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80159f4:	bf14      	ite	ne
 80159f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80159fa:	4623      	moveq	r3, r4
 80159fc:	9302      	str	r3, [sp, #8]
 80159fe:	9305      	str	r3, [sp, #20]
 8015a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015a04:	9100      	str	r1, [sp, #0]
 8015a06:	9104      	str	r1, [sp, #16]
 8015a08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a0c:	4669      	mov	r1, sp
 8015a0e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015a10:	f000 faa0 	bl	8015f54 <_svfiprintf_r>
 8015a14:	1c43      	adds	r3, r0, #1
 8015a16:	bfbc      	itt	lt
 8015a18:	238b      	movlt	r3, #139	@ 0x8b
 8015a1a:	602b      	strlt	r3, [r5, #0]
 8015a1c:	2c00      	cmp	r4, #0
 8015a1e:	d0e3      	beq.n	80159e8 <_vsniprintf_r+0x16>
 8015a20:	9b00      	ldr	r3, [sp, #0]
 8015a22:	2200      	movs	r2, #0
 8015a24:	701a      	strb	r2, [r3, #0]
 8015a26:	e7df      	b.n	80159e8 <_vsniprintf_r+0x16>

08015a28 <vsniprintf>:
 8015a28:	b507      	push	{r0, r1, r2, lr}
 8015a2a:	9300      	str	r3, [sp, #0]
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	460a      	mov	r2, r1
 8015a30:	4601      	mov	r1, r0
 8015a32:	4803      	ldr	r0, [pc, #12]	@ (8015a40 <vsniprintf+0x18>)
 8015a34:	6800      	ldr	r0, [r0, #0]
 8015a36:	f7ff ffcc 	bl	80159d2 <_vsniprintf_r>
 8015a3a:	b003      	add	sp, #12
 8015a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a40:	20000144 	.word	0x20000144

08015a44 <__swbuf_r>:
 8015a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a46:	460e      	mov	r6, r1
 8015a48:	4614      	mov	r4, r2
 8015a4a:	4605      	mov	r5, r0
 8015a4c:	b118      	cbz	r0, 8015a56 <__swbuf_r+0x12>
 8015a4e:	6a03      	ldr	r3, [r0, #32]
 8015a50:	b90b      	cbnz	r3, 8015a56 <__swbuf_r+0x12>
 8015a52:	f7ff fecd 	bl	80157f0 <__sinit>
 8015a56:	69a3      	ldr	r3, [r4, #24]
 8015a58:	60a3      	str	r3, [r4, #8]
 8015a5a:	89a3      	ldrh	r3, [r4, #12]
 8015a5c:	071a      	lsls	r2, r3, #28
 8015a5e:	d501      	bpl.n	8015a64 <__swbuf_r+0x20>
 8015a60:	6923      	ldr	r3, [r4, #16]
 8015a62:	b943      	cbnz	r3, 8015a76 <__swbuf_r+0x32>
 8015a64:	4621      	mov	r1, r4
 8015a66:	4628      	mov	r0, r5
 8015a68:	f000 f82a 	bl	8015ac0 <__swsetup_r>
 8015a6c:	b118      	cbz	r0, 8015a76 <__swbuf_r+0x32>
 8015a6e:	f04f 37ff 	mov.w	r7, #4294967295
 8015a72:	4638      	mov	r0, r7
 8015a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a76:	6823      	ldr	r3, [r4, #0]
 8015a78:	6922      	ldr	r2, [r4, #16]
 8015a7a:	1a98      	subs	r0, r3, r2
 8015a7c:	6963      	ldr	r3, [r4, #20]
 8015a7e:	b2f6      	uxtb	r6, r6
 8015a80:	4283      	cmp	r3, r0
 8015a82:	4637      	mov	r7, r6
 8015a84:	dc05      	bgt.n	8015a92 <__swbuf_r+0x4e>
 8015a86:	4621      	mov	r1, r4
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f000 feb3 	bl	80167f4 <_fflush_r>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d1ed      	bne.n	8015a6e <__swbuf_r+0x2a>
 8015a92:	68a3      	ldr	r3, [r4, #8]
 8015a94:	3b01      	subs	r3, #1
 8015a96:	60a3      	str	r3, [r4, #8]
 8015a98:	6823      	ldr	r3, [r4, #0]
 8015a9a:	1c5a      	adds	r2, r3, #1
 8015a9c:	6022      	str	r2, [r4, #0]
 8015a9e:	701e      	strb	r6, [r3, #0]
 8015aa0:	6962      	ldr	r2, [r4, #20]
 8015aa2:	1c43      	adds	r3, r0, #1
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d004      	beq.n	8015ab2 <__swbuf_r+0x6e>
 8015aa8:	89a3      	ldrh	r3, [r4, #12]
 8015aaa:	07db      	lsls	r3, r3, #31
 8015aac:	d5e1      	bpl.n	8015a72 <__swbuf_r+0x2e>
 8015aae:	2e0a      	cmp	r6, #10
 8015ab0:	d1df      	bne.n	8015a72 <__swbuf_r+0x2e>
 8015ab2:	4621      	mov	r1, r4
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	f000 fe9d 	bl	80167f4 <_fflush_r>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d0d9      	beq.n	8015a72 <__swbuf_r+0x2e>
 8015abe:	e7d6      	b.n	8015a6e <__swbuf_r+0x2a>

08015ac0 <__swsetup_r>:
 8015ac0:	b538      	push	{r3, r4, r5, lr}
 8015ac2:	4b29      	ldr	r3, [pc, #164]	@ (8015b68 <__swsetup_r+0xa8>)
 8015ac4:	4605      	mov	r5, r0
 8015ac6:	6818      	ldr	r0, [r3, #0]
 8015ac8:	460c      	mov	r4, r1
 8015aca:	b118      	cbz	r0, 8015ad4 <__swsetup_r+0x14>
 8015acc:	6a03      	ldr	r3, [r0, #32]
 8015ace:	b90b      	cbnz	r3, 8015ad4 <__swsetup_r+0x14>
 8015ad0:	f7ff fe8e 	bl	80157f0 <__sinit>
 8015ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ad8:	0719      	lsls	r1, r3, #28
 8015ada:	d422      	bmi.n	8015b22 <__swsetup_r+0x62>
 8015adc:	06da      	lsls	r2, r3, #27
 8015ade:	d407      	bmi.n	8015af0 <__swsetup_r+0x30>
 8015ae0:	2209      	movs	r2, #9
 8015ae2:	602a      	str	r2, [r5, #0]
 8015ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ae8:	81a3      	strh	r3, [r4, #12]
 8015aea:	f04f 30ff 	mov.w	r0, #4294967295
 8015aee:	e033      	b.n	8015b58 <__swsetup_r+0x98>
 8015af0:	0758      	lsls	r0, r3, #29
 8015af2:	d512      	bpl.n	8015b1a <__swsetup_r+0x5a>
 8015af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015af6:	b141      	cbz	r1, 8015b0a <__swsetup_r+0x4a>
 8015af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015afc:	4299      	cmp	r1, r3
 8015afe:	d002      	beq.n	8015b06 <__swsetup_r+0x46>
 8015b00:	4628      	mov	r0, r5
 8015b02:	f000 f8d3 	bl	8015cac <_free_r>
 8015b06:	2300      	movs	r3, #0
 8015b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b0a:	89a3      	ldrh	r3, [r4, #12]
 8015b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b10:	81a3      	strh	r3, [r4, #12]
 8015b12:	2300      	movs	r3, #0
 8015b14:	6063      	str	r3, [r4, #4]
 8015b16:	6923      	ldr	r3, [r4, #16]
 8015b18:	6023      	str	r3, [r4, #0]
 8015b1a:	89a3      	ldrh	r3, [r4, #12]
 8015b1c:	f043 0308 	orr.w	r3, r3, #8
 8015b20:	81a3      	strh	r3, [r4, #12]
 8015b22:	6923      	ldr	r3, [r4, #16]
 8015b24:	b94b      	cbnz	r3, 8015b3a <__swsetup_r+0x7a>
 8015b26:	89a3      	ldrh	r3, [r4, #12]
 8015b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b30:	d003      	beq.n	8015b3a <__swsetup_r+0x7a>
 8015b32:	4621      	mov	r1, r4
 8015b34:	4628      	mov	r0, r5
 8015b36:	f000 feab 	bl	8016890 <__smakebuf_r>
 8015b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b3e:	f013 0201 	ands.w	r2, r3, #1
 8015b42:	d00a      	beq.n	8015b5a <__swsetup_r+0x9a>
 8015b44:	2200      	movs	r2, #0
 8015b46:	60a2      	str	r2, [r4, #8]
 8015b48:	6962      	ldr	r2, [r4, #20]
 8015b4a:	4252      	negs	r2, r2
 8015b4c:	61a2      	str	r2, [r4, #24]
 8015b4e:	6922      	ldr	r2, [r4, #16]
 8015b50:	b942      	cbnz	r2, 8015b64 <__swsetup_r+0xa4>
 8015b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015b56:	d1c5      	bne.n	8015ae4 <__swsetup_r+0x24>
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	0799      	lsls	r1, r3, #30
 8015b5c:	bf58      	it	pl
 8015b5e:	6962      	ldrpl	r2, [r4, #20]
 8015b60:	60a2      	str	r2, [r4, #8]
 8015b62:	e7f4      	b.n	8015b4e <__swsetup_r+0x8e>
 8015b64:	2000      	movs	r0, #0
 8015b66:	e7f7      	b.n	8015b58 <__swsetup_r+0x98>
 8015b68:	20000144 	.word	0x20000144

08015b6c <memset>:
 8015b6c:	4402      	add	r2, r0
 8015b6e:	4603      	mov	r3, r0
 8015b70:	4293      	cmp	r3, r2
 8015b72:	d100      	bne.n	8015b76 <memset+0xa>
 8015b74:	4770      	bx	lr
 8015b76:	f803 1b01 	strb.w	r1, [r3], #1
 8015b7a:	e7f9      	b.n	8015b70 <memset+0x4>

08015b7c <strrchr>:
 8015b7c:	b538      	push	{r3, r4, r5, lr}
 8015b7e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8015b82:	4603      	mov	r3, r0
 8015b84:	d10e      	bne.n	8015ba4 <strrchr+0x28>
 8015b86:	4621      	mov	r1, r4
 8015b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b8c:	f000 bf0a 	b.w	80169a4 <strchr>
 8015b90:	1c43      	adds	r3, r0, #1
 8015b92:	4605      	mov	r5, r0
 8015b94:	4621      	mov	r1, r4
 8015b96:	4618      	mov	r0, r3
 8015b98:	f000 ff04 	bl	80169a4 <strchr>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d1f7      	bne.n	8015b90 <strrchr+0x14>
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	bd38      	pop	{r3, r4, r5, pc}
 8015ba4:	2500      	movs	r5, #0
 8015ba6:	e7f5      	b.n	8015b94 <strrchr+0x18>

08015ba8 <_close_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d06      	ldr	r5, [pc, #24]	@ (8015bc4 <_close_r+0x1c>)
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	602b      	str	r3, [r5, #0]
 8015bb4:	f7ee fe93 	bl	80048de <_close>
 8015bb8:	1c43      	adds	r3, r0, #1
 8015bba:	d102      	bne.n	8015bc2 <_close_r+0x1a>
 8015bbc:	682b      	ldr	r3, [r5, #0]
 8015bbe:	b103      	cbz	r3, 8015bc2 <_close_r+0x1a>
 8015bc0:	6023      	str	r3, [r4, #0]
 8015bc2:	bd38      	pop	{r3, r4, r5, pc}
 8015bc4:	20003668 	.word	0x20003668

08015bc8 <_lseek_r>:
 8015bc8:	b538      	push	{r3, r4, r5, lr}
 8015bca:	4d07      	ldr	r5, [pc, #28]	@ (8015be8 <_lseek_r+0x20>)
 8015bcc:	4604      	mov	r4, r0
 8015bce:	4608      	mov	r0, r1
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	602a      	str	r2, [r5, #0]
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	f7ee fea8 	bl	800492c <_lseek>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_lseek_r+0x1e>
 8015be0:	682b      	ldr	r3, [r5, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_lseek_r+0x1e>
 8015be4:	6023      	str	r3, [r4, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	20003668 	.word	0x20003668

08015bec <_read_r>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	4d07      	ldr	r5, [pc, #28]	@ (8015c0c <_read_r+0x20>)
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	4608      	mov	r0, r1
 8015bf4:	4611      	mov	r1, r2
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	602a      	str	r2, [r5, #0]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	f7ee fe52 	bl	80048a4 <_read>
 8015c00:	1c43      	adds	r3, r0, #1
 8015c02:	d102      	bne.n	8015c0a <_read_r+0x1e>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	b103      	cbz	r3, 8015c0a <_read_r+0x1e>
 8015c08:	6023      	str	r3, [r4, #0]
 8015c0a:	bd38      	pop	{r3, r4, r5, pc}
 8015c0c:	20003668 	.word	0x20003668

08015c10 <_write_r>:
 8015c10:	b538      	push	{r3, r4, r5, lr}
 8015c12:	4d07      	ldr	r5, [pc, #28]	@ (8015c30 <_write_r+0x20>)
 8015c14:	4604      	mov	r4, r0
 8015c16:	4608      	mov	r0, r1
 8015c18:	4611      	mov	r1, r2
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	602a      	str	r2, [r5, #0]
 8015c1e:	461a      	mov	r2, r3
 8015c20:	f7fb ff80 	bl	8011b24 <_write>
 8015c24:	1c43      	adds	r3, r0, #1
 8015c26:	d102      	bne.n	8015c2e <_write_r+0x1e>
 8015c28:	682b      	ldr	r3, [r5, #0]
 8015c2a:	b103      	cbz	r3, 8015c2e <_write_r+0x1e>
 8015c2c:	6023      	str	r3, [r4, #0]
 8015c2e:	bd38      	pop	{r3, r4, r5, pc}
 8015c30:	20003668 	.word	0x20003668

08015c34 <__errno>:
 8015c34:	4b01      	ldr	r3, [pc, #4]	@ (8015c3c <__errno+0x8>)
 8015c36:	6818      	ldr	r0, [r3, #0]
 8015c38:	4770      	bx	lr
 8015c3a:	bf00      	nop
 8015c3c:	20000144 	.word	0x20000144

08015c40 <__libc_init_array>:
 8015c40:	b570      	push	{r4, r5, r6, lr}
 8015c42:	4d0d      	ldr	r5, [pc, #52]	@ (8015c78 <__libc_init_array+0x38>)
 8015c44:	4c0d      	ldr	r4, [pc, #52]	@ (8015c7c <__libc_init_array+0x3c>)
 8015c46:	1b64      	subs	r4, r4, r5
 8015c48:	10a4      	asrs	r4, r4, #2
 8015c4a:	2600      	movs	r6, #0
 8015c4c:	42a6      	cmp	r6, r4
 8015c4e:	d109      	bne.n	8015c64 <__libc_init_array+0x24>
 8015c50:	4d0b      	ldr	r5, [pc, #44]	@ (8015c80 <__libc_init_array+0x40>)
 8015c52:	4c0c      	ldr	r4, [pc, #48]	@ (8015c84 <__libc_init_array+0x44>)
 8015c54:	f002 fccc 	bl	80185f0 <_init>
 8015c58:	1b64      	subs	r4, r4, r5
 8015c5a:	10a4      	asrs	r4, r4, #2
 8015c5c:	2600      	movs	r6, #0
 8015c5e:	42a6      	cmp	r6, r4
 8015c60:	d105      	bne.n	8015c6e <__libc_init_array+0x2e>
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
 8015c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c68:	4798      	blx	r3
 8015c6a:	3601      	adds	r6, #1
 8015c6c:	e7ee      	b.n	8015c4c <__libc_init_array+0xc>
 8015c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c72:	4798      	blx	r3
 8015c74:	3601      	adds	r6, #1
 8015c76:	e7f2      	b.n	8015c5e <__libc_init_array+0x1e>
 8015c78:	0801ab08 	.word	0x0801ab08
 8015c7c:	0801ab08 	.word	0x0801ab08
 8015c80:	0801ab08 	.word	0x0801ab08
 8015c84:	0801ab0c 	.word	0x0801ab0c

08015c88 <__retarget_lock_init_recursive>:
 8015c88:	4770      	bx	lr

08015c8a <__retarget_lock_acquire_recursive>:
 8015c8a:	4770      	bx	lr

08015c8c <__retarget_lock_release_recursive>:
 8015c8c:	4770      	bx	lr

08015c8e <memcpy>:
 8015c8e:	440a      	add	r2, r1
 8015c90:	4291      	cmp	r1, r2
 8015c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c96:	d100      	bne.n	8015c9a <memcpy+0xc>
 8015c98:	4770      	bx	lr
 8015c9a:	b510      	push	{r4, lr}
 8015c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ca4:	4291      	cmp	r1, r2
 8015ca6:	d1f9      	bne.n	8015c9c <memcpy+0xe>
 8015ca8:	bd10      	pop	{r4, pc}
	...

08015cac <_free_r>:
 8015cac:	b538      	push	{r3, r4, r5, lr}
 8015cae:	4605      	mov	r5, r0
 8015cb0:	2900      	cmp	r1, #0
 8015cb2:	d041      	beq.n	8015d38 <_free_r+0x8c>
 8015cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cb8:	1f0c      	subs	r4, r1, #4
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	bfb8      	it	lt
 8015cbe:	18e4      	addlt	r4, r4, r3
 8015cc0:	f000 f8e0 	bl	8015e84 <__malloc_lock>
 8015cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8015d3c <_free_r+0x90>)
 8015cc6:	6813      	ldr	r3, [r2, #0]
 8015cc8:	b933      	cbnz	r3, 8015cd8 <_free_r+0x2c>
 8015cca:	6063      	str	r3, [r4, #4]
 8015ccc:	6014      	str	r4, [r2, #0]
 8015cce:	4628      	mov	r0, r5
 8015cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cd4:	f000 b8dc 	b.w	8015e90 <__malloc_unlock>
 8015cd8:	42a3      	cmp	r3, r4
 8015cda:	d908      	bls.n	8015cee <_free_r+0x42>
 8015cdc:	6820      	ldr	r0, [r4, #0]
 8015cde:	1821      	adds	r1, r4, r0
 8015ce0:	428b      	cmp	r3, r1
 8015ce2:	bf01      	itttt	eq
 8015ce4:	6819      	ldreq	r1, [r3, #0]
 8015ce6:	685b      	ldreq	r3, [r3, #4]
 8015ce8:	1809      	addeq	r1, r1, r0
 8015cea:	6021      	streq	r1, [r4, #0]
 8015cec:	e7ed      	b.n	8015cca <_free_r+0x1e>
 8015cee:	461a      	mov	r2, r3
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	b10b      	cbz	r3, 8015cf8 <_free_r+0x4c>
 8015cf4:	42a3      	cmp	r3, r4
 8015cf6:	d9fa      	bls.n	8015cee <_free_r+0x42>
 8015cf8:	6811      	ldr	r1, [r2, #0]
 8015cfa:	1850      	adds	r0, r2, r1
 8015cfc:	42a0      	cmp	r0, r4
 8015cfe:	d10b      	bne.n	8015d18 <_free_r+0x6c>
 8015d00:	6820      	ldr	r0, [r4, #0]
 8015d02:	4401      	add	r1, r0
 8015d04:	1850      	adds	r0, r2, r1
 8015d06:	4283      	cmp	r3, r0
 8015d08:	6011      	str	r1, [r2, #0]
 8015d0a:	d1e0      	bne.n	8015cce <_free_r+0x22>
 8015d0c:	6818      	ldr	r0, [r3, #0]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	6053      	str	r3, [r2, #4]
 8015d12:	4408      	add	r0, r1
 8015d14:	6010      	str	r0, [r2, #0]
 8015d16:	e7da      	b.n	8015cce <_free_r+0x22>
 8015d18:	d902      	bls.n	8015d20 <_free_r+0x74>
 8015d1a:	230c      	movs	r3, #12
 8015d1c:	602b      	str	r3, [r5, #0]
 8015d1e:	e7d6      	b.n	8015cce <_free_r+0x22>
 8015d20:	6820      	ldr	r0, [r4, #0]
 8015d22:	1821      	adds	r1, r4, r0
 8015d24:	428b      	cmp	r3, r1
 8015d26:	bf04      	itt	eq
 8015d28:	6819      	ldreq	r1, [r3, #0]
 8015d2a:	685b      	ldreq	r3, [r3, #4]
 8015d2c:	6063      	str	r3, [r4, #4]
 8015d2e:	bf04      	itt	eq
 8015d30:	1809      	addeq	r1, r1, r0
 8015d32:	6021      	streq	r1, [r4, #0]
 8015d34:	6054      	str	r4, [r2, #4]
 8015d36:	e7ca      	b.n	8015cce <_free_r+0x22>
 8015d38:	bd38      	pop	{r3, r4, r5, pc}
 8015d3a:	bf00      	nop
 8015d3c:	20003674 	.word	0x20003674

08015d40 <sbrk_aligned>:
 8015d40:	b570      	push	{r4, r5, r6, lr}
 8015d42:	4e0f      	ldr	r6, [pc, #60]	@ (8015d80 <sbrk_aligned+0x40>)
 8015d44:	460c      	mov	r4, r1
 8015d46:	6831      	ldr	r1, [r6, #0]
 8015d48:	4605      	mov	r5, r0
 8015d4a:	b911      	cbnz	r1, 8015d52 <sbrk_aligned+0x12>
 8015d4c:	f000 fe5a 	bl	8016a04 <_sbrk_r>
 8015d50:	6030      	str	r0, [r6, #0]
 8015d52:	4621      	mov	r1, r4
 8015d54:	4628      	mov	r0, r5
 8015d56:	f000 fe55 	bl	8016a04 <_sbrk_r>
 8015d5a:	1c43      	adds	r3, r0, #1
 8015d5c:	d103      	bne.n	8015d66 <sbrk_aligned+0x26>
 8015d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8015d62:	4620      	mov	r0, r4
 8015d64:	bd70      	pop	{r4, r5, r6, pc}
 8015d66:	1cc4      	adds	r4, r0, #3
 8015d68:	f024 0403 	bic.w	r4, r4, #3
 8015d6c:	42a0      	cmp	r0, r4
 8015d6e:	d0f8      	beq.n	8015d62 <sbrk_aligned+0x22>
 8015d70:	1a21      	subs	r1, r4, r0
 8015d72:	4628      	mov	r0, r5
 8015d74:	f000 fe46 	bl	8016a04 <_sbrk_r>
 8015d78:	3001      	adds	r0, #1
 8015d7a:	d1f2      	bne.n	8015d62 <sbrk_aligned+0x22>
 8015d7c:	e7ef      	b.n	8015d5e <sbrk_aligned+0x1e>
 8015d7e:	bf00      	nop
 8015d80:	20003670 	.word	0x20003670

08015d84 <_malloc_r>:
 8015d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d88:	1ccd      	adds	r5, r1, #3
 8015d8a:	f025 0503 	bic.w	r5, r5, #3
 8015d8e:	3508      	adds	r5, #8
 8015d90:	2d0c      	cmp	r5, #12
 8015d92:	bf38      	it	cc
 8015d94:	250c      	movcc	r5, #12
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	4606      	mov	r6, r0
 8015d9a:	db01      	blt.n	8015da0 <_malloc_r+0x1c>
 8015d9c:	42a9      	cmp	r1, r5
 8015d9e:	d904      	bls.n	8015daa <_malloc_r+0x26>
 8015da0:	230c      	movs	r3, #12
 8015da2:	6033      	str	r3, [r6, #0]
 8015da4:	2000      	movs	r0, #0
 8015da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015e80 <_malloc_r+0xfc>
 8015dae:	f000 f869 	bl	8015e84 <__malloc_lock>
 8015db2:	f8d8 3000 	ldr.w	r3, [r8]
 8015db6:	461c      	mov	r4, r3
 8015db8:	bb44      	cbnz	r4, 8015e0c <_malloc_r+0x88>
 8015dba:	4629      	mov	r1, r5
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f7ff ffbf 	bl	8015d40 <sbrk_aligned>
 8015dc2:	1c43      	adds	r3, r0, #1
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	d158      	bne.n	8015e7a <_malloc_r+0xf6>
 8015dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8015dcc:	4627      	mov	r7, r4
 8015dce:	2f00      	cmp	r7, #0
 8015dd0:	d143      	bne.n	8015e5a <_malloc_r+0xd6>
 8015dd2:	2c00      	cmp	r4, #0
 8015dd4:	d04b      	beq.n	8015e6e <_malloc_r+0xea>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	4639      	mov	r1, r7
 8015dda:	4630      	mov	r0, r6
 8015ddc:	eb04 0903 	add.w	r9, r4, r3
 8015de0:	f000 fe10 	bl	8016a04 <_sbrk_r>
 8015de4:	4581      	cmp	r9, r0
 8015de6:	d142      	bne.n	8015e6e <_malloc_r+0xea>
 8015de8:	6821      	ldr	r1, [r4, #0]
 8015dea:	1a6d      	subs	r5, r5, r1
 8015dec:	4629      	mov	r1, r5
 8015dee:	4630      	mov	r0, r6
 8015df0:	f7ff ffa6 	bl	8015d40 <sbrk_aligned>
 8015df4:	3001      	adds	r0, #1
 8015df6:	d03a      	beq.n	8015e6e <_malloc_r+0xea>
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	442b      	add	r3, r5
 8015dfc:	6023      	str	r3, [r4, #0]
 8015dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8015e02:	685a      	ldr	r2, [r3, #4]
 8015e04:	bb62      	cbnz	r2, 8015e60 <_malloc_r+0xdc>
 8015e06:	f8c8 7000 	str.w	r7, [r8]
 8015e0a:	e00f      	b.n	8015e2c <_malloc_r+0xa8>
 8015e0c:	6822      	ldr	r2, [r4, #0]
 8015e0e:	1b52      	subs	r2, r2, r5
 8015e10:	d420      	bmi.n	8015e54 <_malloc_r+0xd0>
 8015e12:	2a0b      	cmp	r2, #11
 8015e14:	d917      	bls.n	8015e46 <_malloc_r+0xc2>
 8015e16:	1961      	adds	r1, r4, r5
 8015e18:	42a3      	cmp	r3, r4
 8015e1a:	6025      	str	r5, [r4, #0]
 8015e1c:	bf18      	it	ne
 8015e1e:	6059      	strne	r1, [r3, #4]
 8015e20:	6863      	ldr	r3, [r4, #4]
 8015e22:	bf08      	it	eq
 8015e24:	f8c8 1000 	streq.w	r1, [r8]
 8015e28:	5162      	str	r2, [r4, r5]
 8015e2a:	604b      	str	r3, [r1, #4]
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	f000 f82f 	bl	8015e90 <__malloc_unlock>
 8015e32:	f104 000b 	add.w	r0, r4, #11
 8015e36:	1d23      	adds	r3, r4, #4
 8015e38:	f020 0007 	bic.w	r0, r0, #7
 8015e3c:	1ac2      	subs	r2, r0, r3
 8015e3e:	bf1c      	itt	ne
 8015e40:	1a1b      	subne	r3, r3, r0
 8015e42:	50a3      	strne	r3, [r4, r2]
 8015e44:	e7af      	b.n	8015da6 <_malloc_r+0x22>
 8015e46:	6862      	ldr	r2, [r4, #4]
 8015e48:	42a3      	cmp	r3, r4
 8015e4a:	bf0c      	ite	eq
 8015e4c:	f8c8 2000 	streq.w	r2, [r8]
 8015e50:	605a      	strne	r2, [r3, #4]
 8015e52:	e7eb      	b.n	8015e2c <_malloc_r+0xa8>
 8015e54:	4623      	mov	r3, r4
 8015e56:	6864      	ldr	r4, [r4, #4]
 8015e58:	e7ae      	b.n	8015db8 <_malloc_r+0x34>
 8015e5a:	463c      	mov	r4, r7
 8015e5c:	687f      	ldr	r7, [r7, #4]
 8015e5e:	e7b6      	b.n	8015dce <_malloc_r+0x4a>
 8015e60:	461a      	mov	r2, r3
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	d1fb      	bne.n	8015e60 <_malloc_r+0xdc>
 8015e68:	2300      	movs	r3, #0
 8015e6a:	6053      	str	r3, [r2, #4]
 8015e6c:	e7de      	b.n	8015e2c <_malloc_r+0xa8>
 8015e6e:	230c      	movs	r3, #12
 8015e70:	6033      	str	r3, [r6, #0]
 8015e72:	4630      	mov	r0, r6
 8015e74:	f000 f80c 	bl	8015e90 <__malloc_unlock>
 8015e78:	e794      	b.n	8015da4 <_malloc_r+0x20>
 8015e7a:	6005      	str	r5, [r0, #0]
 8015e7c:	e7d6      	b.n	8015e2c <_malloc_r+0xa8>
 8015e7e:	bf00      	nop
 8015e80:	20003674 	.word	0x20003674

08015e84 <__malloc_lock>:
 8015e84:	4801      	ldr	r0, [pc, #4]	@ (8015e8c <__malloc_lock+0x8>)
 8015e86:	f7ff bf00 	b.w	8015c8a <__retarget_lock_acquire_recursive>
 8015e8a:	bf00      	nop
 8015e8c:	2000366c 	.word	0x2000366c

08015e90 <__malloc_unlock>:
 8015e90:	4801      	ldr	r0, [pc, #4]	@ (8015e98 <__malloc_unlock+0x8>)
 8015e92:	f7ff befb 	b.w	8015c8c <__retarget_lock_release_recursive>
 8015e96:	bf00      	nop
 8015e98:	2000366c 	.word	0x2000366c

08015e9c <__ssputs_r>:
 8015e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea0:	688e      	ldr	r6, [r1, #8]
 8015ea2:	461f      	mov	r7, r3
 8015ea4:	42be      	cmp	r6, r7
 8015ea6:	680b      	ldr	r3, [r1, #0]
 8015ea8:	4682      	mov	sl, r0
 8015eaa:	460c      	mov	r4, r1
 8015eac:	4690      	mov	r8, r2
 8015eae:	d82d      	bhi.n	8015f0c <__ssputs_r+0x70>
 8015eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015eb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015eb8:	d026      	beq.n	8015f08 <__ssputs_r+0x6c>
 8015eba:	6965      	ldr	r5, [r4, #20]
 8015ebc:	6909      	ldr	r1, [r1, #16]
 8015ebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ec2:	eba3 0901 	sub.w	r9, r3, r1
 8015ec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015eca:	1c7b      	adds	r3, r7, #1
 8015ecc:	444b      	add	r3, r9
 8015ece:	106d      	asrs	r5, r5, #1
 8015ed0:	429d      	cmp	r5, r3
 8015ed2:	bf38      	it	cc
 8015ed4:	461d      	movcc	r5, r3
 8015ed6:	0553      	lsls	r3, r2, #21
 8015ed8:	d527      	bpl.n	8015f2a <__ssputs_r+0x8e>
 8015eda:	4629      	mov	r1, r5
 8015edc:	f7ff ff52 	bl	8015d84 <_malloc_r>
 8015ee0:	4606      	mov	r6, r0
 8015ee2:	b360      	cbz	r0, 8015f3e <__ssputs_r+0xa2>
 8015ee4:	6921      	ldr	r1, [r4, #16]
 8015ee6:	464a      	mov	r2, r9
 8015ee8:	f7ff fed1 	bl	8015c8e <memcpy>
 8015eec:	89a3      	ldrh	r3, [r4, #12]
 8015eee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ef6:	81a3      	strh	r3, [r4, #12]
 8015ef8:	6126      	str	r6, [r4, #16]
 8015efa:	6165      	str	r5, [r4, #20]
 8015efc:	444e      	add	r6, r9
 8015efe:	eba5 0509 	sub.w	r5, r5, r9
 8015f02:	6026      	str	r6, [r4, #0]
 8015f04:	60a5      	str	r5, [r4, #8]
 8015f06:	463e      	mov	r6, r7
 8015f08:	42be      	cmp	r6, r7
 8015f0a:	d900      	bls.n	8015f0e <__ssputs_r+0x72>
 8015f0c:	463e      	mov	r6, r7
 8015f0e:	6820      	ldr	r0, [r4, #0]
 8015f10:	4632      	mov	r2, r6
 8015f12:	4641      	mov	r1, r8
 8015f14:	f000 fd2c 	bl	8016970 <memmove>
 8015f18:	68a3      	ldr	r3, [r4, #8]
 8015f1a:	1b9b      	subs	r3, r3, r6
 8015f1c:	60a3      	str	r3, [r4, #8]
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	4433      	add	r3, r6
 8015f22:	6023      	str	r3, [r4, #0]
 8015f24:	2000      	movs	r0, #0
 8015f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f2a:	462a      	mov	r2, r5
 8015f2c:	f000 fd7a 	bl	8016a24 <_realloc_r>
 8015f30:	4606      	mov	r6, r0
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d1e0      	bne.n	8015ef8 <__ssputs_r+0x5c>
 8015f36:	6921      	ldr	r1, [r4, #16]
 8015f38:	4650      	mov	r0, sl
 8015f3a:	f7ff feb7 	bl	8015cac <_free_r>
 8015f3e:	230c      	movs	r3, #12
 8015f40:	f8ca 3000 	str.w	r3, [sl]
 8015f44:	89a3      	ldrh	r3, [r4, #12]
 8015f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f4a:	81a3      	strh	r3, [r4, #12]
 8015f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f50:	e7e9      	b.n	8015f26 <__ssputs_r+0x8a>
	...

08015f54 <_svfiprintf_r>:
 8015f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f58:	4698      	mov	r8, r3
 8015f5a:	898b      	ldrh	r3, [r1, #12]
 8015f5c:	061b      	lsls	r3, r3, #24
 8015f5e:	b09d      	sub	sp, #116	@ 0x74
 8015f60:	4607      	mov	r7, r0
 8015f62:	460d      	mov	r5, r1
 8015f64:	4614      	mov	r4, r2
 8015f66:	d510      	bpl.n	8015f8a <_svfiprintf_r+0x36>
 8015f68:	690b      	ldr	r3, [r1, #16]
 8015f6a:	b973      	cbnz	r3, 8015f8a <_svfiprintf_r+0x36>
 8015f6c:	2140      	movs	r1, #64	@ 0x40
 8015f6e:	f7ff ff09 	bl	8015d84 <_malloc_r>
 8015f72:	6028      	str	r0, [r5, #0]
 8015f74:	6128      	str	r0, [r5, #16]
 8015f76:	b930      	cbnz	r0, 8015f86 <_svfiprintf_r+0x32>
 8015f78:	230c      	movs	r3, #12
 8015f7a:	603b      	str	r3, [r7, #0]
 8015f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f80:	b01d      	add	sp, #116	@ 0x74
 8015f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f86:	2340      	movs	r3, #64	@ 0x40
 8015f88:	616b      	str	r3, [r5, #20]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f8e:	2320      	movs	r3, #32
 8015f90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f98:	2330      	movs	r3, #48	@ 0x30
 8015f9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016138 <_svfiprintf_r+0x1e4>
 8015f9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015fa2:	f04f 0901 	mov.w	r9, #1
 8015fa6:	4623      	mov	r3, r4
 8015fa8:	469a      	mov	sl, r3
 8015faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fae:	b10a      	cbz	r2, 8015fb4 <_svfiprintf_r+0x60>
 8015fb0:	2a25      	cmp	r2, #37	@ 0x25
 8015fb2:	d1f9      	bne.n	8015fa8 <_svfiprintf_r+0x54>
 8015fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8015fb8:	d00b      	beq.n	8015fd2 <_svfiprintf_r+0x7e>
 8015fba:	465b      	mov	r3, fp
 8015fbc:	4622      	mov	r2, r4
 8015fbe:	4629      	mov	r1, r5
 8015fc0:	4638      	mov	r0, r7
 8015fc2:	f7ff ff6b 	bl	8015e9c <__ssputs_r>
 8015fc6:	3001      	adds	r0, #1
 8015fc8:	f000 80a7 	beq.w	801611a <_svfiprintf_r+0x1c6>
 8015fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fce:	445a      	add	r2, fp
 8015fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	f000 809f 	beq.w	801611a <_svfiprintf_r+0x1c6>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	f04f 32ff 	mov.w	r2, #4294967295
 8015fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fe6:	f10a 0a01 	add.w	sl, sl, #1
 8015fea:	9304      	str	r3, [sp, #16]
 8015fec:	9307      	str	r3, [sp, #28]
 8015fee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ff2:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ff4:	4654      	mov	r4, sl
 8015ff6:	2205      	movs	r2, #5
 8015ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ffc:	484e      	ldr	r0, [pc, #312]	@ (8016138 <_svfiprintf_r+0x1e4>)
 8015ffe:	f7ea f8c7 	bl	8000190 <memchr>
 8016002:	9a04      	ldr	r2, [sp, #16]
 8016004:	b9d8      	cbnz	r0, 801603e <_svfiprintf_r+0xea>
 8016006:	06d0      	lsls	r0, r2, #27
 8016008:	bf44      	itt	mi
 801600a:	2320      	movmi	r3, #32
 801600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016010:	0711      	lsls	r1, r2, #28
 8016012:	bf44      	itt	mi
 8016014:	232b      	movmi	r3, #43	@ 0x2b
 8016016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801601a:	f89a 3000 	ldrb.w	r3, [sl]
 801601e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016020:	d015      	beq.n	801604e <_svfiprintf_r+0xfa>
 8016022:	9a07      	ldr	r2, [sp, #28]
 8016024:	4654      	mov	r4, sl
 8016026:	2000      	movs	r0, #0
 8016028:	f04f 0c0a 	mov.w	ip, #10
 801602c:	4621      	mov	r1, r4
 801602e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016032:	3b30      	subs	r3, #48	@ 0x30
 8016034:	2b09      	cmp	r3, #9
 8016036:	d94b      	bls.n	80160d0 <_svfiprintf_r+0x17c>
 8016038:	b1b0      	cbz	r0, 8016068 <_svfiprintf_r+0x114>
 801603a:	9207      	str	r2, [sp, #28]
 801603c:	e014      	b.n	8016068 <_svfiprintf_r+0x114>
 801603e:	eba0 0308 	sub.w	r3, r0, r8
 8016042:	fa09 f303 	lsl.w	r3, r9, r3
 8016046:	4313      	orrs	r3, r2
 8016048:	9304      	str	r3, [sp, #16]
 801604a:	46a2      	mov	sl, r4
 801604c:	e7d2      	b.n	8015ff4 <_svfiprintf_r+0xa0>
 801604e:	9b03      	ldr	r3, [sp, #12]
 8016050:	1d19      	adds	r1, r3, #4
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	9103      	str	r1, [sp, #12]
 8016056:	2b00      	cmp	r3, #0
 8016058:	bfbb      	ittet	lt
 801605a:	425b      	neglt	r3, r3
 801605c:	f042 0202 	orrlt.w	r2, r2, #2
 8016060:	9307      	strge	r3, [sp, #28]
 8016062:	9307      	strlt	r3, [sp, #28]
 8016064:	bfb8      	it	lt
 8016066:	9204      	strlt	r2, [sp, #16]
 8016068:	7823      	ldrb	r3, [r4, #0]
 801606a:	2b2e      	cmp	r3, #46	@ 0x2e
 801606c:	d10a      	bne.n	8016084 <_svfiprintf_r+0x130>
 801606e:	7863      	ldrb	r3, [r4, #1]
 8016070:	2b2a      	cmp	r3, #42	@ 0x2a
 8016072:	d132      	bne.n	80160da <_svfiprintf_r+0x186>
 8016074:	9b03      	ldr	r3, [sp, #12]
 8016076:	1d1a      	adds	r2, r3, #4
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	9203      	str	r2, [sp, #12]
 801607c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016080:	3402      	adds	r4, #2
 8016082:	9305      	str	r3, [sp, #20]
 8016084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016148 <_svfiprintf_r+0x1f4>
 8016088:	7821      	ldrb	r1, [r4, #0]
 801608a:	2203      	movs	r2, #3
 801608c:	4650      	mov	r0, sl
 801608e:	f7ea f87f 	bl	8000190 <memchr>
 8016092:	b138      	cbz	r0, 80160a4 <_svfiprintf_r+0x150>
 8016094:	9b04      	ldr	r3, [sp, #16]
 8016096:	eba0 000a 	sub.w	r0, r0, sl
 801609a:	2240      	movs	r2, #64	@ 0x40
 801609c:	4082      	lsls	r2, r0
 801609e:	4313      	orrs	r3, r2
 80160a0:	3401      	adds	r4, #1
 80160a2:	9304      	str	r3, [sp, #16]
 80160a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160a8:	4824      	ldr	r0, [pc, #144]	@ (801613c <_svfiprintf_r+0x1e8>)
 80160aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160ae:	2206      	movs	r2, #6
 80160b0:	f7ea f86e 	bl	8000190 <memchr>
 80160b4:	2800      	cmp	r0, #0
 80160b6:	d036      	beq.n	8016126 <_svfiprintf_r+0x1d2>
 80160b8:	4b21      	ldr	r3, [pc, #132]	@ (8016140 <_svfiprintf_r+0x1ec>)
 80160ba:	bb1b      	cbnz	r3, 8016104 <_svfiprintf_r+0x1b0>
 80160bc:	9b03      	ldr	r3, [sp, #12]
 80160be:	3307      	adds	r3, #7
 80160c0:	f023 0307 	bic.w	r3, r3, #7
 80160c4:	3308      	adds	r3, #8
 80160c6:	9303      	str	r3, [sp, #12]
 80160c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ca:	4433      	add	r3, r6
 80160cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80160ce:	e76a      	b.n	8015fa6 <_svfiprintf_r+0x52>
 80160d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80160d4:	460c      	mov	r4, r1
 80160d6:	2001      	movs	r0, #1
 80160d8:	e7a8      	b.n	801602c <_svfiprintf_r+0xd8>
 80160da:	2300      	movs	r3, #0
 80160dc:	3401      	adds	r4, #1
 80160de:	9305      	str	r3, [sp, #20]
 80160e0:	4619      	mov	r1, r3
 80160e2:	f04f 0c0a 	mov.w	ip, #10
 80160e6:	4620      	mov	r0, r4
 80160e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160ec:	3a30      	subs	r2, #48	@ 0x30
 80160ee:	2a09      	cmp	r2, #9
 80160f0:	d903      	bls.n	80160fa <_svfiprintf_r+0x1a6>
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d0c6      	beq.n	8016084 <_svfiprintf_r+0x130>
 80160f6:	9105      	str	r1, [sp, #20]
 80160f8:	e7c4      	b.n	8016084 <_svfiprintf_r+0x130>
 80160fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80160fe:	4604      	mov	r4, r0
 8016100:	2301      	movs	r3, #1
 8016102:	e7f0      	b.n	80160e6 <_svfiprintf_r+0x192>
 8016104:	ab03      	add	r3, sp, #12
 8016106:	9300      	str	r3, [sp, #0]
 8016108:	462a      	mov	r2, r5
 801610a:	4b0e      	ldr	r3, [pc, #56]	@ (8016144 <_svfiprintf_r+0x1f0>)
 801610c:	a904      	add	r1, sp, #16
 801610e:	4638      	mov	r0, r7
 8016110:	f3af 8000 	nop.w
 8016114:	1c42      	adds	r2, r0, #1
 8016116:	4606      	mov	r6, r0
 8016118:	d1d6      	bne.n	80160c8 <_svfiprintf_r+0x174>
 801611a:	89ab      	ldrh	r3, [r5, #12]
 801611c:	065b      	lsls	r3, r3, #25
 801611e:	f53f af2d 	bmi.w	8015f7c <_svfiprintf_r+0x28>
 8016122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016124:	e72c      	b.n	8015f80 <_svfiprintf_r+0x2c>
 8016126:	ab03      	add	r3, sp, #12
 8016128:	9300      	str	r3, [sp, #0]
 801612a:	462a      	mov	r2, r5
 801612c:	4b05      	ldr	r3, [pc, #20]	@ (8016144 <_svfiprintf_r+0x1f0>)
 801612e:	a904      	add	r1, sp, #16
 8016130:	4638      	mov	r0, r7
 8016132:	f000 f9bb 	bl	80164ac <_printf_i>
 8016136:	e7ed      	b.n	8016114 <_svfiprintf_r+0x1c0>
 8016138:	0801a51f 	.word	0x0801a51f
 801613c:	0801a529 	.word	0x0801a529
 8016140:	00000000 	.word	0x00000000
 8016144:	08015e9d 	.word	0x08015e9d
 8016148:	0801a525 	.word	0x0801a525

0801614c <__sfputc_r>:
 801614c:	6893      	ldr	r3, [r2, #8]
 801614e:	3b01      	subs	r3, #1
 8016150:	2b00      	cmp	r3, #0
 8016152:	b410      	push	{r4}
 8016154:	6093      	str	r3, [r2, #8]
 8016156:	da08      	bge.n	801616a <__sfputc_r+0x1e>
 8016158:	6994      	ldr	r4, [r2, #24]
 801615a:	42a3      	cmp	r3, r4
 801615c:	db01      	blt.n	8016162 <__sfputc_r+0x16>
 801615e:	290a      	cmp	r1, #10
 8016160:	d103      	bne.n	801616a <__sfputc_r+0x1e>
 8016162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016166:	f7ff bc6d 	b.w	8015a44 <__swbuf_r>
 801616a:	6813      	ldr	r3, [r2, #0]
 801616c:	1c58      	adds	r0, r3, #1
 801616e:	6010      	str	r0, [r2, #0]
 8016170:	7019      	strb	r1, [r3, #0]
 8016172:	4608      	mov	r0, r1
 8016174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016178:	4770      	bx	lr

0801617a <__sfputs_r>:
 801617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801617c:	4606      	mov	r6, r0
 801617e:	460f      	mov	r7, r1
 8016180:	4614      	mov	r4, r2
 8016182:	18d5      	adds	r5, r2, r3
 8016184:	42ac      	cmp	r4, r5
 8016186:	d101      	bne.n	801618c <__sfputs_r+0x12>
 8016188:	2000      	movs	r0, #0
 801618a:	e007      	b.n	801619c <__sfputs_r+0x22>
 801618c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016190:	463a      	mov	r2, r7
 8016192:	4630      	mov	r0, r6
 8016194:	f7ff ffda 	bl	801614c <__sfputc_r>
 8016198:	1c43      	adds	r3, r0, #1
 801619a:	d1f3      	bne.n	8016184 <__sfputs_r+0xa>
 801619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080161a0 <_vfiprintf_r>:
 80161a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	460d      	mov	r5, r1
 80161a6:	b09d      	sub	sp, #116	@ 0x74
 80161a8:	4614      	mov	r4, r2
 80161aa:	4698      	mov	r8, r3
 80161ac:	4606      	mov	r6, r0
 80161ae:	b118      	cbz	r0, 80161b8 <_vfiprintf_r+0x18>
 80161b0:	6a03      	ldr	r3, [r0, #32]
 80161b2:	b90b      	cbnz	r3, 80161b8 <_vfiprintf_r+0x18>
 80161b4:	f7ff fb1c 	bl	80157f0 <__sinit>
 80161b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161ba:	07d9      	lsls	r1, r3, #31
 80161bc:	d405      	bmi.n	80161ca <_vfiprintf_r+0x2a>
 80161be:	89ab      	ldrh	r3, [r5, #12]
 80161c0:	059a      	lsls	r2, r3, #22
 80161c2:	d402      	bmi.n	80161ca <_vfiprintf_r+0x2a>
 80161c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161c6:	f7ff fd60 	bl	8015c8a <__retarget_lock_acquire_recursive>
 80161ca:	89ab      	ldrh	r3, [r5, #12]
 80161cc:	071b      	lsls	r3, r3, #28
 80161ce:	d501      	bpl.n	80161d4 <_vfiprintf_r+0x34>
 80161d0:	692b      	ldr	r3, [r5, #16]
 80161d2:	b99b      	cbnz	r3, 80161fc <_vfiprintf_r+0x5c>
 80161d4:	4629      	mov	r1, r5
 80161d6:	4630      	mov	r0, r6
 80161d8:	f7ff fc72 	bl	8015ac0 <__swsetup_r>
 80161dc:	b170      	cbz	r0, 80161fc <_vfiprintf_r+0x5c>
 80161de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161e0:	07dc      	lsls	r4, r3, #31
 80161e2:	d504      	bpl.n	80161ee <_vfiprintf_r+0x4e>
 80161e4:	f04f 30ff 	mov.w	r0, #4294967295
 80161e8:	b01d      	add	sp, #116	@ 0x74
 80161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ee:	89ab      	ldrh	r3, [r5, #12]
 80161f0:	0598      	lsls	r0, r3, #22
 80161f2:	d4f7      	bmi.n	80161e4 <_vfiprintf_r+0x44>
 80161f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161f6:	f7ff fd49 	bl	8015c8c <__retarget_lock_release_recursive>
 80161fa:	e7f3      	b.n	80161e4 <_vfiprintf_r+0x44>
 80161fc:	2300      	movs	r3, #0
 80161fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016200:	2320      	movs	r3, #32
 8016202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016206:	f8cd 800c 	str.w	r8, [sp, #12]
 801620a:	2330      	movs	r3, #48	@ 0x30
 801620c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80163bc <_vfiprintf_r+0x21c>
 8016210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016214:	f04f 0901 	mov.w	r9, #1
 8016218:	4623      	mov	r3, r4
 801621a:	469a      	mov	sl, r3
 801621c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016220:	b10a      	cbz	r2, 8016226 <_vfiprintf_r+0x86>
 8016222:	2a25      	cmp	r2, #37	@ 0x25
 8016224:	d1f9      	bne.n	801621a <_vfiprintf_r+0x7a>
 8016226:	ebba 0b04 	subs.w	fp, sl, r4
 801622a:	d00b      	beq.n	8016244 <_vfiprintf_r+0xa4>
 801622c:	465b      	mov	r3, fp
 801622e:	4622      	mov	r2, r4
 8016230:	4629      	mov	r1, r5
 8016232:	4630      	mov	r0, r6
 8016234:	f7ff ffa1 	bl	801617a <__sfputs_r>
 8016238:	3001      	adds	r0, #1
 801623a:	f000 80a7 	beq.w	801638c <_vfiprintf_r+0x1ec>
 801623e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016240:	445a      	add	r2, fp
 8016242:	9209      	str	r2, [sp, #36]	@ 0x24
 8016244:	f89a 3000 	ldrb.w	r3, [sl]
 8016248:	2b00      	cmp	r3, #0
 801624a:	f000 809f 	beq.w	801638c <_vfiprintf_r+0x1ec>
 801624e:	2300      	movs	r3, #0
 8016250:	f04f 32ff 	mov.w	r2, #4294967295
 8016254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016258:	f10a 0a01 	add.w	sl, sl, #1
 801625c:	9304      	str	r3, [sp, #16]
 801625e:	9307      	str	r3, [sp, #28]
 8016260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016264:	931a      	str	r3, [sp, #104]	@ 0x68
 8016266:	4654      	mov	r4, sl
 8016268:	2205      	movs	r2, #5
 801626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801626e:	4853      	ldr	r0, [pc, #332]	@ (80163bc <_vfiprintf_r+0x21c>)
 8016270:	f7e9 ff8e 	bl	8000190 <memchr>
 8016274:	9a04      	ldr	r2, [sp, #16]
 8016276:	b9d8      	cbnz	r0, 80162b0 <_vfiprintf_r+0x110>
 8016278:	06d1      	lsls	r1, r2, #27
 801627a:	bf44      	itt	mi
 801627c:	2320      	movmi	r3, #32
 801627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016282:	0713      	lsls	r3, r2, #28
 8016284:	bf44      	itt	mi
 8016286:	232b      	movmi	r3, #43	@ 0x2b
 8016288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801628c:	f89a 3000 	ldrb.w	r3, [sl]
 8016290:	2b2a      	cmp	r3, #42	@ 0x2a
 8016292:	d015      	beq.n	80162c0 <_vfiprintf_r+0x120>
 8016294:	9a07      	ldr	r2, [sp, #28]
 8016296:	4654      	mov	r4, sl
 8016298:	2000      	movs	r0, #0
 801629a:	f04f 0c0a 	mov.w	ip, #10
 801629e:	4621      	mov	r1, r4
 80162a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162a4:	3b30      	subs	r3, #48	@ 0x30
 80162a6:	2b09      	cmp	r3, #9
 80162a8:	d94b      	bls.n	8016342 <_vfiprintf_r+0x1a2>
 80162aa:	b1b0      	cbz	r0, 80162da <_vfiprintf_r+0x13a>
 80162ac:	9207      	str	r2, [sp, #28]
 80162ae:	e014      	b.n	80162da <_vfiprintf_r+0x13a>
 80162b0:	eba0 0308 	sub.w	r3, r0, r8
 80162b4:	fa09 f303 	lsl.w	r3, r9, r3
 80162b8:	4313      	orrs	r3, r2
 80162ba:	9304      	str	r3, [sp, #16]
 80162bc:	46a2      	mov	sl, r4
 80162be:	e7d2      	b.n	8016266 <_vfiprintf_r+0xc6>
 80162c0:	9b03      	ldr	r3, [sp, #12]
 80162c2:	1d19      	adds	r1, r3, #4
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	9103      	str	r1, [sp, #12]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	bfbb      	ittet	lt
 80162cc:	425b      	neglt	r3, r3
 80162ce:	f042 0202 	orrlt.w	r2, r2, #2
 80162d2:	9307      	strge	r3, [sp, #28]
 80162d4:	9307      	strlt	r3, [sp, #28]
 80162d6:	bfb8      	it	lt
 80162d8:	9204      	strlt	r2, [sp, #16]
 80162da:	7823      	ldrb	r3, [r4, #0]
 80162dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80162de:	d10a      	bne.n	80162f6 <_vfiprintf_r+0x156>
 80162e0:	7863      	ldrb	r3, [r4, #1]
 80162e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80162e4:	d132      	bne.n	801634c <_vfiprintf_r+0x1ac>
 80162e6:	9b03      	ldr	r3, [sp, #12]
 80162e8:	1d1a      	adds	r2, r3, #4
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	9203      	str	r2, [sp, #12]
 80162ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162f2:	3402      	adds	r4, #2
 80162f4:	9305      	str	r3, [sp, #20]
 80162f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80163cc <_vfiprintf_r+0x22c>
 80162fa:	7821      	ldrb	r1, [r4, #0]
 80162fc:	2203      	movs	r2, #3
 80162fe:	4650      	mov	r0, sl
 8016300:	f7e9 ff46 	bl	8000190 <memchr>
 8016304:	b138      	cbz	r0, 8016316 <_vfiprintf_r+0x176>
 8016306:	9b04      	ldr	r3, [sp, #16]
 8016308:	eba0 000a 	sub.w	r0, r0, sl
 801630c:	2240      	movs	r2, #64	@ 0x40
 801630e:	4082      	lsls	r2, r0
 8016310:	4313      	orrs	r3, r2
 8016312:	3401      	adds	r4, #1
 8016314:	9304      	str	r3, [sp, #16]
 8016316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801631a:	4829      	ldr	r0, [pc, #164]	@ (80163c0 <_vfiprintf_r+0x220>)
 801631c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016320:	2206      	movs	r2, #6
 8016322:	f7e9 ff35 	bl	8000190 <memchr>
 8016326:	2800      	cmp	r0, #0
 8016328:	d03f      	beq.n	80163aa <_vfiprintf_r+0x20a>
 801632a:	4b26      	ldr	r3, [pc, #152]	@ (80163c4 <_vfiprintf_r+0x224>)
 801632c:	bb1b      	cbnz	r3, 8016376 <_vfiprintf_r+0x1d6>
 801632e:	9b03      	ldr	r3, [sp, #12]
 8016330:	3307      	adds	r3, #7
 8016332:	f023 0307 	bic.w	r3, r3, #7
 8016336:	3308      	adds	r3, #8
 8016338:	9303      	str	r3, [sp, #12]
 801633a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801633c:	443b      	add	r3, r7
 801633e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016340:	e76a      	b.n	8016218 <_vfiprintf_r+0x78>
 8016342:	fb0c 3202 	mla	r2, ip, r2, r3
 8016346:	460c      	mov	r4, r1
 8016348:	2001      	movs	r0, #1
 801634a:	e7a8      	b.n	801629e <_vfiprintf_r+0xfe>
 801634c:	2300      	movs	r3, #0
 801634e:	3401      	adds	r4, #1
 8016350:	9305      	str	r3, [sp, #20]
 8016352:	4619      	mov	r1, r3
 8016354:	f04f 0c0a 	mov.w	ip, #10
 8016358:	4620      	mov	r0, r4
 801635a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801635e:	3a30      	subs	r2, #48	@ 0x30
 8016360:	2a09      	cmp	r2, #9
 8016362:	d903      	bls.n	801636c <_vfiprintf_r+0x1cc>
 8016364:	2b00      	cmp	r3, #0
 8016366:	d0c6      	beq.n	80162f6 <_vfiprintf_r+0x156>
 8016368:	9105      	str	r1, [sp, #20]
 801636a:	e7c4      	b.n	80162f6 <_vfiprintf_r+0x156>
 801636c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016370:	4604      	mov	r4, r0
 8016372:	2301      	movs	r3, #1
 8016374:	e7f0      	b.n	8016358 <_vfiprintf_r+0x1b8>
 8016376:	ab03      	add	r3, sp, #12
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	462a      	mov	r2, r5
 801637c:	4b12      	ldr	r3, [pc, #72]	@ (80163c8 <_vfiprintf_r+0x228>)
 801637e:	a904      	add	r1, sp, #16
 8016380:	4630      	mov	r0, r6
 8016382:	f3af 8000 	nop.w
 8016386:	4607      	mov	r7, r0
 8016388:	1c78      	adds	r0, r7, #1
 801638a:	d1d6      	bne.n	801633a <_vfiprintf_r+0x19a>
 801638c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801638e:	07d9      	lsls	r1, r3, #31
 8016390:	d405      	bmi.n	801639e <_vfiprintf_r+0x1fe>
 8016392:	89ab      	ldrh	r3, [r5, #12]
 8016394:	059a      	lsls	r2, r3, #22
 8016396:	d402      	bmi.n	801639e <_vfiprintf_r+0x1fe>
 8016398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801639a:	f7ff fc77 	bl	8015c8c <__retarget_lock_release_recursive>
 801639e:	89ab      	ldrh	r3, [r5, #12]
 80163a0:	065b      	lsls	r3, r3, #25
 80163a2:	f53f af1f 	bmi.w	80161e4 <_vfiprintf_r+0x44>
 80163a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163a8:	e71e      	b.n	80161e8 <_vfiprintf_r+0x48>
 80163aa:	ab03      	add	r3, sp, #12
 80163ac:	9300      	str	r3, [sp, #0]
 80163ae:	462a      	mov	r2, r5
 80163b0:	4b05      	ldr	r3, [pc, #20]	@ (80163c8 <_vfiprintf_r+0x228>)
 80163b2:	a904      	add	r1, sp, #16
 80163b4:	4630      	mov	r0, r6
 80163b6:	f000 f879 	bl	80164ac <_printf_i>
 80163ba:	e7e4      	b.n	8016386 <_vfiprintf_r+0x1e6>
 80163bc:	0801a51f 	.word	0x0801a51f
 80163c0:	0801a529 	.word	0x0801a529
 80163c4:	00000000 	.word	0x00000000
 80163c8:	0801617b 	.word	0x0801617b
 80163cc:	0801a525 	.word	0x0801a525

080163d0 <_printf_common>:
 80163d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163d4:	4616      	mov	r6, r2
 80163d6:	4698      	mov	r8, r3
 80163d8:	688a      	ldr	r2, [r1, #8]
 80163da:	690b      	ldr	r3, [r1, #16]
 80163dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80163e0:	4293      	cmp	r3, r2
 80163e2:	bfb8      	it	lt
 80163e4:	4613      	movlt	r3, r2
 80163e6:	6033      	str	r3, [r6, #0]
 80163e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80163ec:	4607      	mov	r7, r0
 80163ee:	460c      	mov	r4, r1
 80163f0:	b10a      	cbz	r2, 80163f6 <_printf_common+0x26>
 80163f2:	3301      	adds	r3, #1
 80163f4:	6033      	str	r3, [r6, #0]
 80163f6:	6823      	ldr	r3, [r4, #0]
 80163f8:	0699      	lsls	r1, r3, #26
 80163fa:	bf42      	ittt	mi
 80163fc:	6833      	ldrmi	r3, [r6, #0]
 80163fe:	3302      	addmi	r3, #2
 8016400:	6033      	strmi	r3, [r6, #0]
 8016402:	6825      	ldr	r5, [r4, #0]
 8016404:	f015 0506 	ands.w	r5, r5, #6
 8016408:	d106      	bne.n	8016418 <_printf_common+0x48>
 801640a:	f104 0a19 	add.w	sl, r4, #25
 801640e:	68e3      	ldr	r3, [r4, #12]
 8016410:	6832      	ldr	r2, [r6, #0]
 8016412:	1a9b      	subs	r3, r3, r2
 8016414:	42ab      	cmp	r3, r5
 8016416:	dc26      	bgt.n	8016466 <_printf_common+0x96>
 8016418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801641c:	6822      	ldr	r2, [r4, #0]
 801641e:	3b00      	subs	r3, #0
 8016420:	bf18      	it	ne
 8016422:	2301      	movne	r3, #1
 8016424:	0692      	lsls	r2, r2, #26
 8016426:	d42b      	bmi.n	8016480 <_printf_common+0xb0>
 8016428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801642c:	4641      	mov	r1, r8
 801642e:	4638      	mov	r0, r7
 8016430:	47c8      	blx	r9
 8016432:	3001      	adds	r0, #1
 8016434:	d01e      	beq.n	8016474 <_printf_common+0xa4>
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	6922      	ldr	r2, [r4, #16]
 801643a:	f003 0306 	and.w	r3, r3, #6
 801643e:	2b04      	cmp	r3, #4
 8016440:	bf02      	ittt	eq
 8016442:	68e5      	ldreq	r5, [r4, #12]
 8016444:	6833      	ldreq	r3, [r6, #0]
 8016446:	1aed      	subeq	r5, r5, r3
 8016448:	68a3      	ldr	r3, [r4, #8]
 801644a:	bf0c      	ite	eq
 801644c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016450:	2500      	movne	r5, #0
 8016452:	4293      	cmp	r3, r2
 8016454:	bfc4      	itt	gt
 8016456:	1a9b      	subgt	r3, r3, r2
 8016458:	18ed      	addgt	r5, r5, r3
 801645a:	2600      	movs	r6, #0
 801645c:	341a      	adds	r4, #26
 801645e:	42b5      	cmp	r5, r6
 8016460:	d11a      	bne.n	8016498 <_printf_common+0xc8>
 8016462:	2000      	movs	r0, #0
 8016464:	e008      	b.n	8016478 <_printf_common+0xa8>
 8016466:	2301      	movs	r3, #1
 8016468:	4652      	mov	r2, sl
 801646a:	4641      	mov	r1, r8
 801646c:	4638      	mov	r0, r7
 801646e:	47c8      	blx	r9
 8016470:	3001      	adds	r0, #1
 8016472:	d103      	bne.n	801647c <_printf_common+0xac>
 8016474:	f04f 30ff 	mov.w	r0, #4294967295
 8016478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801647c:	3501      	adds	r5, #1
 801647e:	e7c6      	b.n	801640e <_printf_common+0x3e>
 8016480:	18e1      	adds	r1, r4, r3
 8016482:	1c5a      	adds	r2, r3, #1
 8016484:	2030      	movs	r0, #48	@ 0x30
 8016486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801648a:	4422      	add	r2, r4
 801648c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016494:	3302      	adds	r3, #2
 8016496:	e7c7      	b.n	8016428 <_printf_common+0x58>
 8016498:	2301      	movs	r3, #1
 801649a:	4622      	mov	r2, r4
 801649c:	4641      	mov	r1, r8
 801649e:	4638      	mov	r0, r7
 80164a0:	47c8      	blx	r9
 80164a2:	3001      	adds	r0, #1
 80164a4:	d0e6      	beq.n	8016474 <_printf_common+0xa4>
 80164a6:	3601      	adds	r6, #1
 80164a8:	e7d9      	b.n	801645e <_printf_common+0x8e>
	...

080164ac <_printf_i>:
 80164ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164b0:	7e0f      	ldrb	r7, [r1, #24]
 80164b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80164b4:	2f78      	cmp	r7, #120	@ 0x78
 80164b6:	4691      	mov	r9, r2
 80164b8:	4680      	mov	r8, r0
 80164ba:	460c      	mov	r4, r1
 80164bc:	469a      	mov	sl, r3
 80164be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80164c2:	d807      	bhi.n	80164d4 <_printf_i+0x28>
 80164c4:	2f62      	cmp	r7, #98	@ 0x62
 80164c6:	d80a      	bhi.n	80164de <_printf_i+0x32>
 80164c8:	2f00      	cmp	r7, #0
 80164ca:	f000 80d2 	beq.w	8016672 <_printf_i+0x1c6>
 80164ce:	2f58      	cmp	r7, #88	@ 0x58
 80164d0:	f000 80b9 	beq.w	8016646 <_printf_i+0x19a>
 80164d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80164d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80164dc:	e03a      	b.n	8016554 <_printf_i+0xa8>
 80164de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80164e2:	2b15      	cmp	r3, #21
 80164e4:	d8f6      	bhi.n	80164d4 <_printf_i+0x28>
 80164e6:	a101      	add	r1, pc, #4	@ (adr r1, 80164ec <_printf_i+0x40>)
 80164e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80164ec:	08016545 	.word	0x08016545
 80164f0:	08016559 	.word	0x08016559
 80164f4:	080164d5 	.word	0x080164d5
 80164f8:	080164d5 	.word	0x080164d5
 80164fc:	080164d5 	.word	0x080164d5
 8016500:	080164d5 	.word	0x080164d5
 8016504:	08016559 	.word	0x08016559
 8016508:	080164d5 	.word	0x080164d5
 801650c:	080164d5 	.word	0x080164d5
 8016510:	080164d5 	.word	0x080164d5
 8016514:	080164d5 	.word	0x080164d5
 8016518:	08016659 	.word	0x08016659
 801651c:	08016583 	.word	0x08016583
 8016520:	08016613 	.word	0x08016613
 8016524:	080164d5 	.word	0x080164d5
 8016528:	080164d5 	.word	0x080164d5
 801652c:	0801667b 	.word	0x0801667b
 8016530:	080164d5 	.word	0x080164d5
 8016534:	08016583 	.word	0x08016583
 8016538:	080164d5 	.word	0x080164d5
 801653c:	080164d5 	.word	0x080164d5
 8016540:	0801661b 	.word	0x0801661b
 8016544:	6833      	ldr	r3, [r6, #0]
 8016546:	1d1a      	adds	r2, r3, #4
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	6032      	str	r2, [r6, #0]
 801654c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016554:	2301      	movs	r3, #1
 8016556:	e09d      	b.n	8016694 <_printf_i+0x1e8>
 8016558:	6833      	ldr	r3, [r6, #0]
 801655a:	6820      	ldr	r0, [r4, #0]
 801655c:	1d19      	adds	r1, r3, #4
 801655e:	6031      	str	r1, [r6, #0]
 8016560:	0606      	lsls	r6, r0, #24
 8016562:	d501      	bpl.n	8016568 <_printf_i+0xbc>
 8016564:	681d      	ldr	r5, [r3, #0]
 8016566:	e003      	b.n	8016570 <_printf_i+0xc4>
 8016568:	0645      	lsls	r5, r0, #25
 801656a:	d5fb      	bpl.n	8016564 <_printf_i+0xb8>
 801656c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016570:	2d00      	cmp	r5, #0
 8016572:	da03      	bge.n	801657c <_printf_i+0xd0>
 8016574:	232d      	movs	r3, #45	@ 0x2d
 8016576:	426d      	negs	r5, r5
 8016578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801657c:	4859      	ldr	r0, [pc, #356]	@ (80166e4 <_printf_i+0x238>)
 801657e:	230a      	movs	r3, #10
 8016580:	e011      	b.n	80165a6 <_printf_i+0xfa>
 8016582:	6821      	ldr	r1, [r4, #0]
 8016584:	6833      	ldr	r3, [r6, #0]
 8016586:	0608      	lsls	r0, r1, #24
 8016588:	f853 5b04 	ldr.w	r5, [r3], #4
 801658c:	d402      	bmi.n	8016594 <_printf_i+0xe8>
 801658e:	0649      	lsls	r1, r1, #25
 8016590:	bf48      	it	mi
 8016592:	b2ad      	uxthmi	r5, r5
 8016594:	2f6f      	cmp	r7, #111	@ 0x6f
 8016596:	4853      	ldr	r0, [pc, #332]	@ (80166e4 <_printf_i+0x238>)
 8016598:	6033      	str	r3, [r6, #0]
 801659a:	bf14      	ite	ne
 801659c:	230a      	movne	r3, #10
 801659e:	2308      	moveq	r3, #8
 80165a0:	2100      	movs	r1, #0
 80165a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80165a6:	6866      	ldr	r6, [r4, #4]
 80165a8:	60a6      	str	r6, [r4, #8]
 80165aa:	2e00      	cmp	r6, #0
 80165ac:	bfa2      	ittt	ge
 80165ae:	6821      	ldrge	r1, [r4, #0]
 80165b0:	f021 0104 	bicge.w	r1, r1, #4
 80165b4:	6021      	strge	r1, [r4, #0]
 80165b6:	b90d      	cbnz	r5, 80165bc <_printf_i+0x110>
 80165b8:	2e00      	cmp	r6, #0
 80165ba:	d04b      	beq.n	8016654 <_printf_i+0x1a8>
 80165bc:	4616      	mov	r6, r2
 80165be:	fbb5 f1f3 	udiv	r1, r5, r3
 80165c2:	fb03 5711 	mls	r7, r3, r1, r5
 80165c6:	5dc7      	ldrb	r7, [r0, r7]
 80165c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80165cc:	462f      	mov	r7, r5
 80165ce:	42bb      	cmp	r3, r7
 80165d0:	460d      	mov	r5, r1
 80165d2:	d9f4      	bls.n	80165be <_printf_i+0x112>
 80165d4:	2b08      	cmp	r3, #8
 80165d6:	d10b      	bne.n	80165f0 <_printf_i+0x144>
 80165d8:	6823      	ldr	r3, [r4, #0]
 80165da:	07df      	lsls	r7, r3, #31
 80165dc:	d508      	bpl.n	80165f0 <_printf_i+0x144>
 80165de:	6923      	ldr	r3, [r4, #16]
 80165e0:	6861      	ldr	r1, [r4, #4]
 80165e2:	4299      	cmp	r1, r3
 80165e4:	bfde      	ittt	le
 80165e6:	2330      	movle	r3, #48	@ 0x30
 80165e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165f0:	1b92      	subs	r2, r2, r6
 80165f2:	6122      	str	r2, [r4, #16]
 80165f4:	f8cd a000 	str.w	sl, [sp]
 80165f8:	464b      	mov	r3, r9
 80165fa:	aa03      	add	r2, sp, #12
 80165fc:	4621      	mov	r1, r4
 80165fe:	4640      	mov	r0, r8
 8016600:	f7ff fee6 	bl	80163d0 <_printf_common>
 8016604:	3001      	adds	r0, #1
 8016606:	d14a      	bne.n	801669e <_printf_i+0x1f2>
 8016608:	f04f 30ff 	mov.w	r0, #4294967295
 801660c:	b004      	add	sp, #16
 801660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016612:	6823      	ldr	r3, [r4, #0]
 8016614:	f043 0320 	orr.w	r3, r3, #32
 8016618:	6023      	str	r3, [r4, #0]
 801661a:	4833      	ldr	r0, [pc, #204]	@ (80166e8 <_printf_i+0x23c>)
 801661c:	2778      	movs	r7, #120	@ 0x78
 801661e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016622:	6823      	ldr	r3, [r4, #0]
 8016624:	6831      	ldr	r1, [r6, #0]
 8016626:	061f      	lsls	r7, r3, #24
 8016628:	f851 5b04 	ldr.w	r5, [r1], #4
 801662c:	d402      	bmi.n	8016634 <_printf_i+0x188>
 801662e:	065f      	lsls	r7, r3, #25
 8016630:	bf48      	it	mi
 8016632:	b2ad      	uxthmi	r5, r5
 8016634:	6031      	str	r1, [r6, #0]
 8016636:	07d9      	lsls	r1, r3, #31
 8016638:	bf44      	itt	mi
 801663a:	f043 0320 	orrmi.w	r3, r3, #32
 801663e:	6023      	strmi	r3, [r4, #0]
 8016640:	b11d      	cbz	r5, 801664a <_printf_i+0x19e>
 8016642:	2310      	movs	r3, #16
 8016644:	e7ac      	b.n	80165a0 <_printf_i+0xf4>
 8016646:	4827      	ldr	r0, [pc, #156]	@ (80166e4 <_printf_i+0x238>)
 8016648:	e7e9      	b.n	801661e <_printf_i+0x172>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	f023 0320 	bic.w	r3, r3, #32
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	e7f6      	b.n	8016642 <_printf_i+0x196>
 8016654:	4616      	mov	r6, r2
 8016656:	e7bd      	b.n	80165d4 <_printf_i+0x128>
 8016658:	6833      	ldr	r3, [r6, #0]
 801665a:	6825      	ldr	r5, [r4, #0]
 801665c:	6961      	ldr	r1, [r4, #20]
 801665e:	1d18      	adds	r0, r3, #4
 8016660:	6030      	str	r0, [r6, #0]
 8016662:	062e      	lsls	r6, r5, #24
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	d501      	bpl.n	801666c <_printf_i+0x1c0>
 8016668:	6019      	str	r1, [r3, #0]
 801666a:	e002      	b.n	8016672 <_printf_i+0x1c6>
 801666c:	0668      	lsls	r0, r5, #25
 801666e:	d5fb      	bpl.n	8016668 <_printf_i+0x1bc>
 8016670:	8019      	strh	r1, [r3, #0]
 8016672:	2300      	movs	r3, #0
 8016674:	6123      	str	r3, [r4, #16]
 8016676:	4616      	mov	r6, r2
 8016678:	e7bc      	b.n	80165f4 <_printf_i+0x148>
 801667a:	6833      	ldr	r3, [r6, #0]
 801667c:	1d1a      	adds	r2, r3, #4
 801667e:	6032      	str	r2, [r6, #0]
 8016680:	681e      	ldr	r6, [r3, #0]
 8016682:	6862      	ldr	r2, [r4, #4]
 8016684:	2100      	movs	r1, #0
 8016686:	4630      	mov	r0, r6
 8016688:	f7e9 fd82 	bl	8000190 <memchr>
 801668c:	b108      	cbz	r0, 8016692 <_printf_i+0x1e6>
 801668e:	1b80      	subs	r0, r0, r6
 8016690:	6060      	str	r0, [r4, #4]
 8016692:	6863      	ldr	r3, [r4, #4]
 8016694:	6123      	str	r3, [r4, #16]
 8016696:	2300      	movs	r3, #0
 8016698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801669c:	e7aa      	b.n	80165f4 <_printf_i+0x148>
 801669e:	6923      	ldr	r3, [r4, #16]
 80166a0:	4632      	mov	r2, r6
 80166a2:	4649      	mov	r1, r9
 80166a4:	4640      	mov	r0, r8
 80166a6:	47d0      	blx	sl
 80166a8:	3001      	adds	r0, #1
 80166aa:	d0ad      	beq.n	8016608 <_printf_i+0x15c>
 80166ac:	6823      	ldr	r3, [r4, #0]
 80166ae:	079b      	lsls	r3, r3, #30
 80166b0:	d413      	bmi.n	80166da <_printf_i+0x22e>
 80166b2:	68e0      	ldr	r0, [r4, #12]
 80166b4:	9b03      	ldr	r3, [sp, #12]
 80166b6:	4298      	cmp	r0, r3
 80166b8:	bfb8      	it	lt
 80166ba:	4618      	movlt	r0, r3
 80166bc:	e7a6      	b.n	801660c <_printf_i+0x160>
 80166be:	2301      	movs	r3, #1
 80166c0:	4632      	mov	r2, r6
 80166c2:	4649      	mov	r1, r9
 80166c4:	4640      	mov	r0, r8
 80166c6:	47d0      	blx	sl
 80166c8:	3001      	adds	r0, #1
 80166ca:	d09d      	beq.n	8016608 <_printf_i+0x15c>
 80166cc:	3501      	adds	r5, #1
 80166ce:	68e3      	ldr	r3, [r4, #12]
 80166d0:	9903      	ldr	r1, [sp, #12]
 80166d2:	1a5b      	subs	r3, r3, r1
 80166d4:	42ab      	cmp	r3, r5
 80166d6:	dcf2      	bgt.n	80166be <_printf_i+0x212>
 80166d8:	e7eb      	b.n	80166b2 <_printf_i+0x206>
 80166da:	2500      	movs	r5, #0
 80166dc:	f104 0619 	add.w	r6, r4, #25
 80166e0:	e7f5      	b.n	80166ce <_printf_i+0x222>
 80166e2:	bf00      	nop
 80166e4:	0801a530 	.word	0x0801a530
 80166e8:	0801a541 	.word	0x0801a541

080166ec <__sflush_r>:
 80166ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80166f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f4:	0716      	lsls	r6, r2, #28
 80166f6:	4605      	mov	r5, r0
 80166f8:	460c      	mov	r4, r1
 80166fa:	d454      	bmi.n	80167a6 <__sflush_r+0xba>
 80166fc:	684b      	ldr	r3, [r1, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	dc02      	bgt.n	8016708 <__sflush_r+0x1c>
 8016702:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016704:	2b00      	cmp	r3, #0
 8016706:	dd48      	ble.n	801679a <__sflush_r+0xae>
 8016708:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801670a:	2e00      	cmp	r6, #0
 801670c:	d045      	beq.n	801679a <__sflush_r+0xae>
 801670e:	2300      	movs	r3, #0
 8016710:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016714:	682f      	ldr	r7, [r5, #0]
 8016716:	6a21      	ldr	r1, [r4, #32]
 8016718:	602b      	str	r3, [r5, #0]
 801671a:	d030      	beq.n	801677e <__sflush_r+0x92>
 801671c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801671e:	89a3      	ldrh	r3, [r4, #12]
 8016720:	0759      	lsls	r1, r3, #29
 8016722:	d505      	bpl.n	8016730 <__sflush_r+0x44>
 8016724:	6863      	ldr	r3, [r4, #4]
 8016726:	1ad2      	subs	r2, r2, r3
 8016728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801672a:	b10b      	cbz	r3, 8016730 <__sflush_r+0x44>
 801672c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801672e:	1ad2      	subs	r2, r2, r3
 8016730:	2300      	movs	r3, #0
 8016732:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016734:	6a21      	ldr	r1, [r4, #32]
 8016736:	4628      	mov	r0, r5
 8016738:	47b0      	blx	r6
 801673a:	1c43      	adds	r3, r0, #1
 801673c:	89a3      	ldrh	r3, [r4, #12]
 801673e:	d106      	bne.n	801674e <__sflush_r+0x62>
 8016740:	6829      	ldr	r1, [r5, #0]
 8016742:	291d      	cmp	r1, #29
 8016744:	d82b      	bhi.n	801679e <__sflush_r+0xb2>
 8016746:	4a2a      	ldr	r2, [pc, #168]	@ (80167f0 <__sflush_r+0x104>)
 8016748:	410a      	asrs	r2, r1
 801674a:	07d6      	lsls	r6, r2, #31
 801674c:	d427      	bmi.n	801679e <__sflush_r+0xb2>
 801674e:	2200      	movs	r2, #0
 8016750:	6062      	str	r2, [r4, #4]
 8016752:	04d9      	lsls	r1, r3, #19
 8016754:	6922      	ldr	r2, [r4, #16]
 8016756:	6022      	str	r2, [r4, #0]
 8016758:	d504      	bpl.n	8016764 <__sflush_r+0x78>
 801675a:	1c42      	adds	r2, r0, #1
 801675c:	d101      	bne.n	8016762 <__sflush_r+0x76>
 801675e:	682b      	ldr	r3, [r5, #0]
 8016760:	b903      	cbnz	r3, 8016764 <__sflush_r+0x78>
 8016762:	6560      	str	r0, [r4, #84]	@ 0x54
 8016764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016766:	602f      	str	r7, [r5, #0]
 8016768:	b1b9      	cbz	r1, 801679a <__sflush_r+0xae>
 801676a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801676e:	4299      	cmp	r1, r3
 8016770:	d002      	beq.n	8016778 <__sflush_r+0x8c>
 8016772:	4628      	mov	r0, r5
 8016774:	f7ff fa9a 	bl	8015cac <_free_r>
 8016778:	2300      	movs	r3, #0
 801677a:	6363      	str	r3, [r4, #52]	@ 0x34
 801677c:	e00d      	b.n	801679a <__sflush_r+0xae>
 801677e:	2301      	movs	r3, #1
 8016780:	4628      	mov	r0, r5
 8016782:	47b0      	blx	r6
 8016784:	4602      	mov	r2, r0
 8016786:	1c50      	adds	r0, r2, #1
 8016788:	d1c9      	bne.n	801671e <__sflush_r+0x32>
 801678a:	682b      	ldr	r3, [r5, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d0c6      	beq.n	801671e <__sflush_r+0x32>
 8016790:	2b1d      	cmp	r3, #29
 8016792:	d001      	beq.n	8016798 <__sflush_r+0xac>
 8016794:	2b16      	cmp	r3, #22
 8016796:	d11e      	bne.n	80167d6 <__sflush_r+0xea>
 8016798:	602f      	str	r7, [r5, #0]
 801679a:	2000      	movs	r0, #0
 801679c:	e022      	b.n	80167e4 <__sflush_r+0xf8>
 801679e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167a2:	b21b      	sxth	r3, r3
 80167a4:	e01b      	b.n	80167de <__sflush_r+0xf2>
 80167a6:	690f      	ldr	r7, [r1, #16]
 80167a8:	2f00      	cmp	r7, #0
 80167aa:	d0f6      	beq.n	801679a <__sflush_r+0xae>
 80167ac:	0793      	lsls	r3, r2, #30
 80167ae:	680e      	ldr	r6, [r1, #0]
 80167b0:	bf08      	it	eq
 80167b2:	694b      	ldreq	r3, [r1, #20]
 80167b4:	600f      	str	r7, [r1, #0]
 80167b6:	bf18      	it	ne
 80167b8:	2300      	movne	r3, #0
 80167ba:	eba6 0807 	sub.w	r8, r6, r7
 80167be:	608b      	str	r3, [r1, #8]
 80167c0:	f1b8 0f00 	cmp.w	r8, #0
 80167c4:	dde9      	ble.n	801679a <__sflush_r+0xae>
 80167c6:	6a21      	ldr	r1, [r4, #32]
 80167c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80167ca:	4643      	mov	r3, r8
 80167cc:	463a      	mov	r2, r7
 80167ce:	4628      	mov	r0, r5
 80167d0:	47b0      	blx	r6
 80167d2:	2800      	cmp	r0, #0
 80167d4:	dc08      	bgt.n	80167e8 <__sflush_r+0xfc>
 80167d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167de:	81a3      	strh	r3, [r4, #12]
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295
 80167e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e8:	4407      	add	r7, r0
 80167ea:	eba8 0800 	sub.w	r8, r8, r0
 80167ee:	e7e7      	b.n	80167c0 <__sflush_r+0xd4>
 80167f0:	dfbffffe 	.word	0xdfbffffe

080167f4 <_fflush_r>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	690b      	ldr	r3, [r1, #16]
 80167f8:	4605      	mov	r5, r0
 80167fa:	460c      	mov	r4, r1
 80167fc:	b913      	cbnz	r3, 8016804 <_fflush_r+0x10>
 80167fe:	2500      	movs	r5, #0
 8016800:	4628      	mov	r0, r5
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	b118      	cbz	r0, 801680e <_fflush_r+0x1a>
 8016806:	6a03      	ldr	r3, [r0, #32]
 8016808:	b90b      	cbnz	r3, 801680e <_fflush_r+0x1a>
 801680a:	f7fe fff1 	bl	80157f0 <__sinit>
 801680e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d0f3      	beq.n	80167fe <_fflush_r+0xa>
 8016816:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016818:	07d0      	lsls	r0, r2, #31
 801681a:	d404      	bmi.n	8016826 <_fflush_r+0x32>
 801681c:	0599      	lsls	r1, r3, #22
 801681e:	d402      	bmi.n	8016826 <_fflush_r+0x32>
 8016820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016822:	f7ff fa32 	bl	8015c8a <__retarget_lock_acquire_recursive>
 8016826:	4628      	mov	r0, r5
 8016828:	4621      	mov	r1, r4
 801682a:	f7ff ff5f 	bl	80166ec <__sflush_r>
 801682e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016830:	07da      	lsls	r2, r3, #31
 8016832:	4605      	mov	r5, r0
 8016834:	d4e4      	bmi.n	8016800 <_fflush_r+0xc>
 8016836:	89a3      	ldrh	r3, [r4, #12]
 8016838:	059b      	lsls	r3, r3, #22
 801683a:	d4e1      	bmi.n	8016800 <_fflush_r+0xc>
 801683c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801683e:	f7ff fa25 	bl	8015c8c <__retarget_lock_release_recursive>
 8016842:	e7dd      	b.n	8016800 <_fflush_r+0xc>

08016844 <__swhatbuf_r>:
 8016844:	b570      	push	{r4, r5, r6, lr}
 8016846:	460c      	mov	r4, r1
 8016848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801684c:	2900      	cmp	r1, #0
 801684e:	b096      	sub	sp, #88	@ 0x58
 8016850:	4615      	mov	r5, r2
 8016852:	461e      	mov	r6, r3
 8016854:	da0d      	bge.n	8016872 <__swhatbuf_r+0x2e>
 8016856:	89a3      	ldrh	r3, [r4, #12]
 8016858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801685c:	f04f 0100 	mov.w	r1, #0
 8016860:	bf14      	ite	ne
 8016862:	2340      	movne	r3, #64	@ 0x40
 8016864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016868:	2000      	movs	r0, #0
 801686a:	6031      	str	r1, [r6, #0]
 801686c:	602b      	str	r3, [r5, #0]
 801686e:	b016      	add	sp, #88	@ 0x58
 8016870:	bd70      	pop	{r4, r5, r6, pc}
 8016872:	466a      	mov	r2, sp
 8016874:	f000 f8a4 	bl	80169c0 <_fstat_r>
 8016878:	2800      	cmp	r0, #0
 801687a:	dbec      	blt.n	8016856 <__swhatbuf_r+0x12>
 801687c:	9901      	ldr	r1, [sp, #4]
 801687e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016886:	4259      	negs	r1, r3
 8016888:	4159      	adcs	r1, r3
 801688a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801688e:	e7eb      	b.n	8016868 <__swhatbuf_r+0x24>

08016890 <__smakebuf_r>:
 8016890:	898b      	ldrh	r3, [r1, #12]
 8016892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016894:	079d      	lsls	r5, r3, #30
 8016896:	4606      	mov	r6, r0
 8016898:	460c      	mov	r4, r1
 801689a:	d507      	bpl.n	80168ac <__smakebuf_r+0x1c>
 801689c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80168a0:	6023      	str	r3, [r4, #0]
 80168a2:	6123      	str	r3, [r4, #16]
 80168a4:	2301      	movs	r3, #1
 80168a6:	6163      	str	r3, [r4, #20]
 80168a8:	b003      	add	sp, #12
 80168aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ac:	ab01      	add	r3, sp, #4
 80168ae:	466a      	mov	r2, sp
 80168b0:	f7ff ffc8 	bl	8016844 <__swhatbuf_r>
 80168b4:	9f00      	ldr	r7, [sp, #0]
 80168b6:	4605      	mov	r5, r0
 80168b8:	4639      	mov	r1, r7
 80168ba:	4630      	mov	r0, r6
 80168bc:	f7ff fa62 	bl	8015d84 <_malloc_r>
 80168c0:	b948      	cbnz	r0, 80168d6 <__smakebuf_r+0x46>
 80168c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168c6:	059a      	lsls	r2, r3, #22
 80168c8:	d4ee      	bmi.n	80168a8 <__smakebuf_r+0x18>
 80168ca:	f023 0303 	bic.w	r3, r3, #3
 80168ce:	f043 0302 	orr.w	r3, r3, #2
 80168d2:	81a3      	strh	r3, [r4, #12]
 80168d4:	e7e2      	b.n	801689c <__smakebuf_r+0xc>
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	6020      	str	r0, [r4, #0]
 80168da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80168de:	81a3      	strh	r3, [r4, #12]
 80168e0:	9b01      	ldr	r3, [sp, #4]
 80168e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80168e6:	b15b      	cbz	r3, 8016900 <__smakebuf_r+0x70>
 80168e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168ec:	4630      	mov	r0, r6
 80168ee:	f000 f879 	bl	80169e4 <_isatty_r>
 80168f2:	b128      	cbz	r0, 8016900 <__smakebuf_r+0x70>
 80168f4:	89a3      	ldrh	r3, [r4, #12]
 80168f6:	f023 0303 	bic.w	r3, r3, #3
 80168fa:	f043 0301 	orr.w	r3, r3, #1
 80168fe:	81a3      	strh	r3, [r4, #12]
 8016900:	89a3      	ldrh	r3, [r4, #12]
 8016902:	431d      	orrs	r5, r3
 8016904:	81a5      	strh	r5, [r4, #12]
 8016906:	e7cf      	b.n	80168a8 <__smakebuf_r+0x18>

08016908 <_putc_r>:
 8016908:	b570      	push	{r4, r5, r6, lr}
 801690a:	460d      	mov	r5, r1
 801690c:	4614      	mov	r4, r2
 801690e:	4606      	mov	r6, r0
 8016910:	b118      	cbz	r0, 801691a <_putc_r+0x12>
 8016912:	6a03      	ldr	r3, [r0, #32]
 8016914:	b90b      	cbnz	r3, 801691a <_putc_r+0x12>
 8016916:	f7fe ff6b 	bl	80157f0 <__sinit>
 801691a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801691c:	07d8      	lsls	r0, r3, #31
 801691e:	d405      	bmi.n	801692c <_putc_r+0x24>
 8016920:	89a3      	ldrh	r3, [r4, #12]
 8016922:	0599      	lsls	r1, r3, #22
 8016924:	d402      	bmi.n	801692c <_putc_r+0x24>
 8016926:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016928:	f7ff f9af 	bl	8015c8a <__retarget_lock_acquire_recursive>
 801692c:	68a3      	ldr	r3, [r4, #8]
 801692e:	3b01      	subs	r3, #1
 8016930:	2b00      	cmp	r3, #0
 8016932:	60a3      	str	r3, [r4, #8]
 8016934:	da05      	bge.n	8016942 <_putc_r+0x3a>
 8016936:	69a2      	ldr	r2, [r4, #24]
 8016938:	4293      	cmp	r3, r2
 801693a:	db12      	blt.n	8016962 <_putc_r+0x5a>
 801693c:	b2eb      	uxtb	r3, r5
 801693e:	2b0a      	cmp	r3, #10
 8016940:	d00f      	beq.n	8016962 <_putc_r+0x5a>
 8016942:	6823      	ldr	r3, [r4, #0]
 8016944:	1c5a      	adds	r2, r3, #1
 8016946:	6022      	str	r2, [r4, #0]
 8016948:	701d      	strb	r5, [r3, #0]
 801694a:	b2ed      	uxtb	r5, r5
 801694c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801694e:	07da      	lsls	r2, r3, #31
 8016950:	d405      	bmi.n	801695e <_putc_r+0x56>
 8016952:	89a3      	ldrh	r3, [r4, #12]
 8016954:	059b      	lsls	r3, r3, #22
 8016956:	d402      	bmi.n	801695e <_putc_r+0x56>
 8016958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801695a:	f7ff f997 	bl	8015c8c <__retarget_lock_release_recursive>
 801695e:	4628      	mov	r0, r5
 8016960:	bd70      	pop	{r4, r5, r6, pc}
 8016962:	4629      	mov	r1, r5
 8016964:	4622      	mov	r2, r4
 8016966:	4630      	mov	r0, r6
 8016968:	f7ff f86c 	bl	8015a44 <__swbuf_r>
 801696c:	4605      	mov	r5, r0
 801696e:	e7ed      	b.n	801694c <_putc_r+0x44>

08016970 <memmove>:
 8016970:	4288      	cmp	r0, r1
 8016972:	b510      	push	{r4, lr}
 8016974:	eb01 0402 	add.w	r4, r1, r2
 8016978:	d902      	bls.n	8016980 <memmove+0x10>
 801697a:	4284      	cmp	r4, r0
 801697c:	4623      	mov	r3, r4
 801697e:	d807      	bhi.n	8016990 <memmove+0x20>
 8016980:	1e43      	subs	r3, r0, #1
 8016982:	42a1      	cmp	r1, r4
 8016984:	d008      	beq.n	8016998 <memmove+0x28>
 8016986:	f811 2b01 	ldrb.w	r2, [r1], #1
 801698a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801698e:	e7f8      	b.n	8016982 <memmove+0x12>
 8016990:	4402      	add	r2, r0
 8016992:	4601      	mov	r1, r0
 8016994:	428a      	cmp	r2, r1
 8016996:	d100      	bne.n	801699a <memmove+0x2a>
 8016998:	bd10      	pop	{r4, pc}
 801699a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801699e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80169a2:	e7f7      	b.n	8016994 <memmove+0x24>

080169a4 <strchr>:
 80169a4:	b2c9      	uxtb	r1, r1
 80169a6:	4603      	mov	r3, r0
 80169a8:	4618      	mov	r0, r3
 80169aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169ae:	b112      	cbz	r2, 80169b6 <strchr+0x12>
 80169b0:	428a      	cmp	r2, r1
 80169b2:	d1f9      	bne.n	80169a8 <strchr+0x4>
 80169b4:	4770      	bx	lr
 80169b6:	2900      	cmp	r1, #0
 80169b8:	bf18      	it	ne
 80169ba:	2000      	movne	r0, #0
 80169bc:	4770      	bx	lr
	...

080169c0 <_fstat_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d07      	ldr	r5, [pc, #28]	@ (80169e0 <_fstat_r+0x20>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	4611      	mov	r1, r2
 80169cc:	602b      	str	r3, [r5, #0]
 80169ce:	f7ed ff92 	bl	80048f6 <_fstat>
 80169d2:	1c43      	adds	r3, r0, #1
 80169d4:	d102      	bne.n	80169dc <_fstat_r+0x1c>
 80169d6:	682b      	ldr	r3, [r5, #0]
 80169d8:	b103      	cbz	r3, 80169dc <_fstat_r+0x1c>
 80169da:	6023      	str	r3, [r4, #0]
 80169dc:	bd38      	pop	{r3, r4, r5, pc}
 80169de:	bf00      	nop
 80169e0:	20003668 	.word	0x20003668

080169e4 <_isatty_r>:
 80169e4:	b538      	push	{r3, r4, r5, lr}
 80169e6:	4d06      	ldr	r5, [pc, #24]	@ (8016a00 <_isatty_r+0x1c>)
 80169e8:	2300      	movs	r3, #0
 80169ea:	4604      	mov	r4, r0
 80169ec:	4608      	mov	r0, r1
 80169ee:	602b      	str	r3, [r5, #0]
 80169f0:	f7ed ff91 	bl	8004916 <_isatty>
 80169f4:	1c43      	adds	r3, r0, #1
 80169f6:	d102      	bne.n	80169fe <_isatty_r+0x1a>
 80169f8:	682b      	ldr	r3, [r5, #0]
 80169fa:	b103      	cbz	r3, 80169fe <_isatty_r+0x1a>
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	bd38      	pop	{r3, r4, r5, pc}
 8016a00:	20003668 	.word	0x20003668

08016a04 <_sbrk_r>:
 8016a04:	b538      	push	{r3, r4, r5, lr}
 8016a06:	4d06      	ldr	r5, [pc, #24]	@ (8016a20 <_sbrk_r+0x1c>)
 8016a08:	2300      	movs	r3, #0
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	4608      	mov	r0, r1
 8016a0e:	602b      	str	r3, [r5, #0]
 8016a10:	f7ed ff9a 	bl	8004948 <_sbrk>
 8016a14:	1c43      	adds	r3, r0, #1
 8016a16:	d102      	bne.n	8016a1e <_sbrk_r+0x1a>
 8016a18:	682b      	ldr	r3, [r5, #0]
 8016a1a:	b103      	cbz	r3, 8016a1e <_sbrk_r+0x1a>
 8016a1c:	6023      	str	r3, [r4, #0]
 8016a1e:	bd38      	pop	{r3, r4, r5, pc}
 8016a20:	20003668 	.word	0x20003668

08016a24 <_realloc_r>:
 8016a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a28:	4680      	mov	r8, r0
 8016a2a:	4615      	mov	r5, r2
 8016a2c:	460c      	mov	r4, r1
 8016a2e:	b921      	cbnz	r1, 8016a3a <_realloc_r+0x16>
 8016a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a34:	4611      	mov	r1, r2
 8016a36:	f7ff b9a5 	b.w	8015d84 <_malloc_r>
 8016a3a:	b92a      	cbnz	r2, 8016a48 <_realloc_r+0x24>
 8016a3c:	f7ff f936 	bl	8015cac <_free_r>
 8016a40:	2400      	movs	r4, #0
 8016a42:	4620      	mov	r0, r4
 8016a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a48:	f000 f81a 	bl	8016a80 <_malloc_usable_size_r>
 8016a4c:	4285      	cmp	r5, r0
 8016a4e:	4606      	mov	r6, r0
 8016a50:	d802      	bhi.n	8016a58 <_realloc_r+0x34>
 8016a52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016a56:	d8f4      	bhi.n	8016a42 <_realloc_r+0x1e>
 8016a58:	4629      	mov	r1, r5
 8016a5a:	4640      	mov	r0, r8
 8016a5c:	f7ff f992 	bl	8015d84 <_malloc_r>
 8016a60:	4607      	mov	r7, r0
 8016a62:	2800      	cmp	r0, #0
 8016a64:	d0ec      	beq.n	8016a40 <_realloc_r+0x1c>
 8016a66:	42b5      	cmp	r5, r6
 8016a68:	462a      	mov	r2, r5
 8016a6a:	4621      	mov	r1, r4
 8016a6c:	bf28      	it	cs
 8016a6e:	4632      	movcs	r2, r6
 8016a70:	f7ff f90d 	bl	8015c8e <memcpy>
 8016a74:	4621      	mov	r1, r4
 8016a76:	4640      	mov	r0, r8
 8016a78:	f7ff f918 	bl	8015cac <_free_r>
 8016a7c:	463c      	mov	r4, r7
 8016a7e:	e7e0      	b.n	8016a42 <_realloc_r+0x1e>

08016a80 <_malloc_usable_size_r>:
 8016a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a84:	1f18      	subs	r0, r3, #4
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	bfbc      	itt	lt
 8016a8a:	580b      	ldrlt	r3, [r1, r0]
 8016a8c:	18c0      	addlt	r0, r0, r3
 8016a8e:	4770      	bx	lr

08016a90 <cos>:
 8016a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a92:	ec53 2b10 	vmov	r2, r3, d0
 8016a96:	4826      	ldr	r0, [pc, #152]	@ (8016b30 <cos+0xa0>)
 8016a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016a9c:	4281      	cmp	r1, r0
 8016a9e:	d806      	bhi.n	8016aae <cos+0x1e>
 8016aa0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8016b28 <cos+0x98>
 8016aa4:	b005      	add	sp, #20
 8016aa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8016aaa:	f000 b8d1 	b.w	8016c50 <__kernel_cos>
 8016aae:	4821      	ldr	r0, [pc, #132]	@ (8016b34 <cos+0xa4>)
 8016ab0:	4281      	cmp	r1, r0
 8016ab2:	d908      	bls.n	8016ac6 <cos+0x36>
 8016ab4:	4610      	mov	r0, r2
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	f7e9 fbbe 	bl	8000238 <__aeabi_dsub>
 8016abc:	ec41 0b10 	vmov	d0, r0, r1
 8016ac0:	b005      	add	sp, #20
 8016ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ac6:	4668      	mov	r0, sp
 8016ac8:	f000 fa46 	bl	8016f58 <__ieee754_rem_pio2>
 8016acc:	f000 0003 	and.w	r0, r0, #3
 8016ad0:	2801      	cmp	r0, #1
 8016ad2:	d00b      	beq.n	8016aec <cos+0x5c>
 8016ad4:	2802      	cmp	r0, #2
 8016ad6:	d015      	beq.n	8016b04 <cos+0x74>
 8016ad8:	b9d8      	cbnz	r0, 8016b12 <cos+0x82>
 8016ada:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016ade:	ed9d 0b00 	vldr	d0, [sp]
 8016ae2:	f000 f8b5 	bl	8016c50 <__kernel_cos>
 8016ae6:	ec51 0b10 	vmov	r0, r1, d0
 8016aea:	e7e7      	b.n	8016abc <cos+0x2c>
 8016aec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016af0:	ed9d 0b00 	vldr	d0, [sp]
 8016af4:	f000 f974 	bl	8016de0 <__kernel_sin>
 8016af8:	ec53 2b10 	vmov	r2, r3, d0
 8016afc:	4610      	mov	r0, r2
 8016afe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8016b02:	e7db      	b.n	8016abc <cos+0x2c>
 8016b04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016b08:	ed9d 0b00 	vldr	d0, [sp]
 8016b0c:	f000 f8a0 	bl	8016c50 <__kernel_cos>
 8016b10:	e7f2      	b.n	8016af8 <cos+0x68>
 8016b12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016b16:	ed9d 0b00 	vldr	d0, [sp]
 8016b1a:	2001      	movs	r0, #1
 8016b1c:	f000 f960 	bl	8016de0 <__kernel_sin>
 8016b20:	e7e1      	b.n	8016ae6 <cos+0x56>
 8016b22:	bf00      	nop
 8016b24:	f3af 8000 	nop.w
	...
 8016b30:	3fe921fb 	.word	0x3fe921fb
 8016b34:	7fefffff 	.word	0x7fefffff

08016b38 <cosf>:
 8016b38:	ee10 3a10 	vmov	r3, s0
 8016b3c:	b507      	push	{r0, r1, r2, lr}
 8016b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8016bb8 <cosf+0x80>)
 8016b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d806      	bhi.n	8016b56 <cosf+0x1e>
 8016b48:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8016bbc <cosf+0x84>
 8016b4c:	b003      	add	sp, #12
 8016b4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b52:	f000 bc05 	b.w	8017360 <__kernel_cosf>
 8016b56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016b5a:	d304      	bcc.n	8016b66 <cosf+0x2e>
 8016b5c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016b60:	b003      	add	sp, #12
 8016b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b66:	4668      	mov	r0, sp
 8016b68:	f000 fc9a 	bl	80174a0 <__ieee754_rem_pio2f>
 8016b6c:	f000 0003 	and.w	r0, r0, #3
 8016b70:	2801      	cmp	r0, #1
 8016b72:	d009      	beq.n	8016b88 <cosf+0x50>
 8016b74:	2802      	cmp	r0, #2
 8016b76:	d010      	beq.n	8016b9a <cosf+0x62>
 8016b78:	b9b0      	cbnz	r0, 8016ba8 <cosf+0x70>
 8016b7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b7e:	ed9d 0a00 	vldr	s0, [sp]
 8016b82:	f000 fbed 	bl	8017360 <__kernel_cosf>
 8016b86:	e7eb      	b.n	8016b60 <cosf+0x28>
 8016b88:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b8c:	ed9d 0a00 	vldr	s0, [sp]
 8016b90:	f000 fc3e 	bl	8017410 <__kernel_sinf>
 8016b94:	eeb1 0a40 	vneg.f32	s0, s0
 8016b98:	e7e2      	b.n	8016b60 <cosf+0x28>
 8016b9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8016b9e:	ed9d 0a00 	vldr	s0, [sp]
 8016ba2:	f000 fbdd 	bl	8017360 <__kernel_cosf>
 8016ba6:	e7f5      	b.n	8016b94 <cosf+0x5c>
 8016ba8:	eddd 0a01 	vldr	s1, [sp, #4]
 8016bac:	ed9d 0a00 	vldr	s0, [sp]
 8016bb0:	2001      	movs	r0, #1
 8016bb2:	f000 fc2d 	bl	8017410 <__kernel_sinf>
 8016bb6:	e7d3      	b.n	8016b60 <cosf+0x28>
 8016bb8:	3f490fd8 	.word	0x3f490fd8
 8016bbc:	00000000 	.word	0x00000000

08016bc0 <sinf>:
 8016bc0:	ee10 3a10 	vmov	r3, s0
 8016bc4:	b507      	push	{r0, r1, r2, lr}
 8016bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8016c44 <sinf+0x84>)
 8016bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d807      	bhi.n	8016be0 <sinf+0x20>
 8016bd0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8016c48 <sinf+0x88>
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	b003      	add	sp, #12
 8016bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bdc:	f000 bc18 	b.w	8017410 <__kernel_sinf>
 8016be0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016be4:	d304      	bcc.n	8016bf0 <sinf+0x30>
 8016be6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016bea:	b003      	add	sp, #12
 8016bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bf0:	4668      	mov	r0, sp
 8016bf2:	f000 fc55 	bl	80174a0 <__ieee754_rem_pio2f>
 8016bf6:	f000 0003 	and.w	r0, r0, #3
 8016bfa:	2801      	cmp	r0, #1
 8016bfc:	d00a      	beq.n	8016c14 <sinf+0x54>
 8016bfe:	2802      	cmp	r0, #2
 8016c00:	d00f      	beq.n	8016c22 <sinf+0x62>
 8016c02:	b9c0      	cbnz	r0, 8016c36 <sinf+0x76>
 8016c04:	eddd 0a01 	vldr	s1, [sp, #4]
 8016c08:	ed9d 0a00 	vldr	s0, [sp]
 8016c0c:	2001      	movs	r0, #1
 8016c0e:	f000 fbff 	bl	8017410 <__kernel_sinf>
 8016c12:	e7ea      	b.n	8016bea <sinf+0x2a>
 8016c14:	eddd 0a01 	vldr	s1, [sp, #4]
 8016c18:	ed9d 0a00 	vldr	s0, [sp]
 8016c1c:	f000 fba0 	bl	8017360 <__kernel_cosf>
 8016c20:	e7e3      	b.n	8016bea <sinf+0x2a>
 8016c22:	eddd 0a01 	vldr	s1, [sp, #4]
 8016c26:	ed9d 0a00 	vldr	s0, [sp]
 8016c2a:	2001      	movs	r0, #1
 8016c2c:	f000 fbf0 	bl	8017410 <__kernel_sinf>
 8016c30:	eeb1 0a40 	vneg.f32	s0, s0
 8016c34:	e7d9      	b.n	8016bea <sinf+0x2a>
 8016c36:	eddd 0a01 	vldr	s1, [sp, #4]
 8016c3a:	ed9d 0a00 	vldr	s0, [sp]
 8016c3e:	f000 fb8f 	bl	8017360 <__kernel_cosf>
 8016c42:	e7f5      	b.n	8016c30 <sinf+0x70>
 8016c44:	3f490fd8 	.word	0x3f490fd8
	...

08016c50 <__kernel_cos>:
 8016c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	ec57 6b10 	vmov	r6, r7, d0
 8016c58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016c5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8016c60:	ed8d 1b00 	vstr	d1, [sp]
 8016c64:	d206      	bcs.n	8016c74 <__kernel_cos+0x24>
 8016c66:	4630      	mov	r0, r6
 8016c68:	4639      	mov	r1, r7
 8016c6a:	f7e9 ff37 	bl	8000adc <__aeabi_d2iz>
 8016c6e:	2800      	cmp	r0, #0
 8016c70:	f000 8088 	beq.w	8016d84 <__kernel_cos+0x134>
 8016c74:	4632      	mov	r2, r6
 8016c76:	463b      	mov	r3, r7
 8016c78:	4630      	mov	r0, r6
 8016c7a:	4639      	mov	r1, r7
 8016c7c:	f7e9 fc94 	bl	80005a8 <__aeabi_dmul>
 8016c80:	4b51      	ldr	r3, [pc, #324]	@ (8016dc8 <__kernel_cos+0x178>)
 8016c82:	2200      	movs	r2, #0
 8016c84:	4604      	mov	r4, r0
 8016c86:	460d      	mov	r5, r1
 8016c88:	f7e9 fc8e 	bl	80005a8 <__aeabi_dmul>
 8016c8c:	a340      	add	r3, pc, #256	@ (adr r3, 8016d90 <__kernel_cos+0x140>)
 8016c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c92:	4682      	mov	sl, r0
 8016c94:	468b      	mov	fp, r1
 8016c96:	4620      	mov	r0, r4
 8016c98:	4629      	mov	r1, r5
 8016c9a:	f7e9 fc85 	bl	80005a8 <__aeabi_dmul>
 8016c9e:	a33e      	add	r3, pc, #248	@ (adr r3, 8016d98 <__kernel_cos+0x148>)
 8016ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca4:	f7e9 faca 	bl	800023c <__adddf3>
 8016ca8:	4622      	mov	r2, r4
 8016caa:	462b      	mov	r3, r5
 8016cac:	f7e9 fc7c 	bl	80005a8 <__aeabi_dmul>
 8016cb0:	a33b      	add	r3, pc, #236	@ (adr r3, 8016da0 <__kernel_cos+0x150>)
 8016cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb6:	f7e9 fabf 	bl	8000238 <__aeabi_dsub>
 8016cba:	4622      	mov	r2, r4
 8016cbc:	462b      	mov	r3, r5
 8016cbe:	f7e9 fc73 	bl	80005a8 <__aeabi_dmul>
 8016cc2:	a339      	add	r3, pc, #228	@ (adr r3, 8016da8 <__kernel_cos+0x158>)
 8016cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc8:	f7e9 fab8 	bl	800023c <__adddf3>
 8016ccc:	4622      	mov	r2, r4
 8016cce:	462b      	mov	r3, r5
 8016cd0:	f7e9 fc6a 	bl	80005a8 <__aeabi_dmul>
 8016cd4:	a336      	add	r3, pc, #216	@ (adr r3, 8016db0 <__kernel_cos+0x160>)
 8016cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cda:	f7e9 faad 	bl	8000238 <__aeabi_dsub>
 8016cde:	4622      	mov	r2, r4
 8016ce0:	462b      	mov	r3, r5
 8016ce2:	f7e9 fc61 	bl	80005a8 <__aeabi_dmul>
 8016ce6:	a334      	add	r3, pc, #208	@ (adr r3, 8016db8 <__kernel_cos+0x168>)
 8016ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cec:	f7e9 faa6 	bl	800023c <__adddf3>
 8016cf0:	4622      	mov	r2, r4
 8016cf2:	462b      	mov	r3, r5
 8016cf4:	f7e9 fc58 	bl	80005a8 <__aeabi_dmul>
 8016cf8:	4622      	mov	r2, r4
 8016cfa:	462b      	mov	r3, r5
 8016cfc:	f7e9 fc54 	bl	80005a8 <__aeabi_dmul>
 8016d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d04:	4604      	mov	r4, r0
 8016d06:	460d      	mov	r5, r1
 8016d08:	4630      	mov	r0, r6
 8016d0a:	4639      	mov	r1, r7
 8016d0c:	f7e9 fc4c 	bl	80005a8 <__aeabi_dmul>
 8016d10:	460b      	mov	r3, r1
 8016d12:	4602      	mov	r2, r0
 8016d14:	4629      	mov	r1, r5
 8016d16:	4620      	mov	r0, r4
 8016d18:	f7e9 fa8e 	bl	8000238 <__aeabi_dsub>
 8016d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8016dcc <__kernel_cos+0x17c>)
 8016d1e:	4598      	cmp	r8, r3
 8016d20:	4606      	mov	r6, r0
 8016d22:	460f      	mov	r7, r1
 8016d24:	d810      	bhi.n	8016d48 <__kernel_cos+0xf8>
 8016d26:	4602      	mov	r2, r0
 8016d28:	460b      	mov	r3, r1
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	f7e9 fa83 	bl	8000238 <__aeabi_dsub>
 8016d32:	460b      	mov	r3, r1
 8016d34:	4926      	ldr	r1, [pc, #152]	@ (8016dd0 <__kernel_cos+0x180>)
 8016d36:	4602      	mov	r2, r0
 8016d38:	2000      	movs	r0, #0
 8016d3a:	f7e9 fa7d 	bl	8000238 <__aeabi_dsub>
 8016d3e:	ec41 0b10 	vmov	d0, r0, r1
 8016d42:	b003      	add	sp, #12
 8016d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d48:	4b22      	ldr	r3, [pc, #136]	@ (8016dd4 <__kernel_cos+0x184>)
 8016d4a:	4921      	ldr	r1, [pc, #132]	@ (8016dd0 <__kernel_cos+0x180>)
 8016d4c:	4598      	cmp	r8, r3
 8016d4e:	bf8c      	ite	hi
 8016d50:	4d21      	ldrhi	r5, [pc, #132]	@ (8016dd8 <__kernel_cos+0x188>)
 8016d52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8016d56:	2400      	movs	r4, #0
 8016d58:	4622      	mov	r2, r4
 8016d5a:	462b      	mov	r3, r5
 8016d5c:	2000      	movs	r0, #0
 8016d5e:	f7e9 fa6b 	bl	8000238 <__aeabi_dsub>
 8016d62:	4622      	mov	r2, r4
 8016d64:	4680      	mov	r8, r0
 8016d66:	4689      	mov	r9, r1
 8016d68:	462b      	mov	r3, r5
 8016d6a:	4650      	mov	r0, sl
 8016d6c:	4659      	mov	r1, fp
 8016d6e:	f7e9 fa63 	bl	8000238 <__aeabi_dsub>
 8016d72:	4632      	mov	r2, r6
 8016d74:	463b      	mov	r3, r7
 8016d76:	f7e9 fa5f 	bl	8000238 <__aeabi_dsub>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	4640      	mov	r0, r8
 8016d80:	4649      	mov	r1, r9
 8016d82:	e7da      	b.n	8016d3a <__kernel_cos+0xea>
 8016d84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8016dc0 <__kernel_cos+0x170>
 8016d88:	e7db      	b.n	8016d42 <__kernel_cos+0xf2>
 8016d8a:	bf00      	nop
 8016d8c:	f3af 8000 	nop.w
 8016d90:	be8838d4 	.word	0xbe8838d4
 8016d94:	bda8fae9 	.word	0xbda8fae9
 8016d98:	bdb4b1c4 	.word	0xbdb4b1c4
 8016d9c:	3e21ee9e 	.word	0x3e21ee9e
 8016da0:	809c52ad 	.word	0x809c52ad
 8016da4:	3e927e4f 	.word	0x3e927e4f
 8016da8:	19cb1590 	.word	0x19cb1590
 8016dac:	3efa01a0 	.word	0x3efa01a0
 8016db0:	16c15177 	.word	0x16c15177
 8016db4:	3f56c16c 	.word	0x3f56c16c
 8016db8:	5555554c 	.word	0x5555554c
 8016dbc:	3fa55555 	.word	0x3fa55555
 8016dc0:	00000000 	.word	0x00000000
 8016dc4:	3ff00000 	.word	0x3ff00000
 8016dc8:	3fe00000 	.word	0x3fe00000
 8016dcc:	3fd33332 	.word	0x3fd33332
 8016dd0:	3ff00000 	.word	0x3ff00000
 8016dd4:	3fe90000 	.word	0x3fe90000
 8016dd8:	3fd20000 	.word	0x3fd20000
 8016ddc:	00000000 	.word	0x00000000

08016de0 <__kernel_sin>:
 8016de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de4:	ec55 4b10 	vmov	r4, r5, d0
 8016de8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016dec:	b085      	sub	sp, #20
 8016dee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8016df2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8016df6:	4680      	mov	r8, r0
 8016df8:	d205      	bcs.n	8016e06 <__kernel_sin+0x26>
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	4629      	mov	r1, r5
 8016dfe:	f7e9 fe6d 	bl	8000adc <__aeabi_d2iz>
 8016e02:	2800      	cmp	r0, #0
 8016e04:	d052      	beq.n	8016eac <__kernel_sin+0xcc>
 8016e06:	4622      	mov	r2, r4
 8016e08:	462b      	mov	r3, r5
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	4629      	mov	r1, r5
 8016e0e:	f7e9 fbcb 	bl	80005a8 <__aeabi_dmul>
 8016e12:	4682      	mov	sl, r0
 8016e14:	468b      	mov	fp, r1
 8016e16:	4602      	mov	r2, r0
 8016e18:	460b      	mov	r3, r1
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	4629      	mov	r1, r5
 8016e1e:	f7e9 fbc3 	bl	80005a8 <__aeabi_dmul>
 8016e22:	a342      	add	r3, pc, #264	@ (adr r3, 8016f2c <__kernel_sin+0x14c>)
 8016e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e28:	e9cd 0100 	strd	r0, r1, [sp]
 8016e2c:	4650      	mov	r0, sl
 8016e2e:	4659      	mov	r1, fp
 8016e30:	f7e9 fbba 	bl	80005a8 <__aeabi_dmul>
 8016e34:	a33f      	add	r3, pc, #252	@ (adr r3, 8016f34 <__kernel_sin+0x154>)
 8016e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3a:	f7e9 f9fd 	bl	8000238 <__aeabi_dsub>
 8016e3e:	4652      	mov	r2, sl
 8016e40:	465b      	mov	r3, fp
 8016e42:	f7e9 fbb1 	bl	80005a8 <__aeabi_dmul>
 8016e46:	a33d      	add	r3, pc, #244	@ (adr r3, 8016f3c <__kernel_sin+0x15c>)
 8016e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4c:	f7e9 f9f6 	bl	800023c <__adddf3>
 8016e50:	4652      	mov	r2, sl
 8016e52:	465b      	mov	r3, fp
 8016e54:	f7e9 fba8 	bl	80005a8 <__aeabi_dmul>
 8016e58:	a33a      	add	r3, pc, #232	@ (adr r3, 8016f44 <__kernel_sin+0x164>)
 8016e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e5e:	f7e9 f9eb 	bl	8000238 <__aeabi_dsub>
 8016e62:	4652      	mov	r2, sl
 8016e64:	465b      	mov	r3, fp
 8016e66:	f7e9 fb9f 	bl	80005a8 <__aeabi_dmul>
 8016e6a:	a338      	add	r3, pc, #224	@ (adr r3, 8016f4c <__kernel_sin+0x16c>)
 8016e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e70:	f7e9 f9e4 	bl	800023c <__adddf3>
 8016e74:	4606      	mov	r6, r0
 8016e76:	460f      	mov	r7, r1
 8016e78:	f1b8 0f00 	cmp.w	r8, #0
 8016e7c:	d11b      	bne.n	8016eb6 <__kernel_sin+0xd6>
 8016e7e:	4602      	mov	r2, r0
 8016e80:	460b      	mov	r3, r1
 8016e82:	4650      	mov	r0, sl
 8016e84:	4659      	mov	r1, fp
 8016e86:	f7e9 fb8f 	bl	80005a8 <__aeabi_dmul>
 8016e8a:	a325      	add	r3, pc, #148	@ (adr r3, 8016f20 <__kernel_sin+0x140>)
 8016e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e90:	f7e9 f9d2 	bl	8000238 <__aeabi_dsub>
 8016e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e98:	f7e9 fb86 	bl	80005a8 <__aeabi_dmul>
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	f7e9 f9ca 	bl	800023c <__adddf3>
 8016ea8:	4604      	mov	r4, r0
 8016eaa:	460d      	mov	r5, r1
 8016eac:	ec45 4b10 	vmov	d0, r4, r5
 8016eb0:	b005      	add	sp, #20
 8016eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016eba:	4b1b      	ldr	r3, [pc, #108]	@ (8016f28 <__kernel_sin+0x148>)
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	f7e9 fb73 	bl	80005a8 <__aeabi_dmul>
 8016ec2:	4632      	mov	r2, r6
 8016ec4:	4680      	mov	r8, r0
 8016ec6:	4689      	mov	r9, r1
 8016ec8:	463b      	mov	r3, r7
 8016eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ece:	f7e9 fb6b 	bl	80005a8 <__aeabi_dmul>
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	4640      	mov	r0, r8
 8016ed8:	4649      	mov	r1, r9
 8016eda:	f7e9 f9ad 	bl	8000238 <__aeabi_dsub>
 8016ede:	4652      	mov	r2, sl
 8016ee0:	465b      	mov	r3, fp
 8016ee2:	f7e9 fb61 	bl	80005a8 <__aeabi_dmul>
 8016ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016eea:	f7e9 f9a5 	bl	8000238 <__aeabi_dsub>
 8016eee:	a30c      	add	r3, pc, #48	@ (adr r3, 8016f20 <__kernel_sin+0x140>)
 8016ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef4:	4606      	mov	r6, r0
 8016ef6:	460f      	mov	r7, r1
 8016ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016efc:	f7e9 fb54 	bl	80005a8 <__aeabi_dmul>
 8016f00:	4602      	mov	r2, r0
 8016f02:	460b      	mov	r3, r1
 8016f04:	4630      	mov	r0, r6
 8016f06:	4639      	mov	r1, r7
 8016f08:	f7e9 f998 	bl	800023c <__adddf3>
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	460b      	mov	r3, r1
 8016f10:	4620      	mov	r0, r4
 8016f12:	4629      	mov	r1, r5
 8016f14:	f7e9 f990 	bl	8000238 <__aeabi_dsub>
 8016f18:	e7c6      	b.n	8016ea8 <__kernel_sin+0xc8>
 8016f1a:	bf00      	nop
 8016f1c:	f3af 8000 	nop.w
 8016f20:	55555549 	.word	0x55555549
 8016f24:	3fc55555 	.word	0x3fc55555
 8016f28:	3fe00000 	.word	0x3fe00000
 8016f2c:	5acfd57c 	.word	0x5acfd57c
 8016f30:	3de5d93a 	.word	0x3de5d93a
 8016f34:	8a2b9ceb 	.word	0x8a2b9ceb
 8016f38:	3e5ae5e6 	.word	0x3e5ae5e6
 8016f3c:	57b1fe7d 	.word	0x57b1fe7d
 8016f40:	3ec71de3 	.word	0x3ec71de3
 8016f44:	19c161d5 	.word	0x19c161d5
 8016f48:	3f2a01a0 	.word	0x3f2a01a0
 8016f4c:	1110f8a6 	.word	0x1110f8a6
 8016f50:	3f811111 	.word	0x3f811111
 8016f54:	00000000 	.word	0x00000000

08016f58 <__ieee754_rem_pio2>:
 8016f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5c:	ec57 6b10 	vmov	r6, r7, d0
 8016f60:	4bc5      	ldr	r3, [pc, #788]	@ (8017278 <__ieee754_rem_pio2+0x320>)
 8016f62:	b08d      	sub	sp, #52	@ 0x34
 8016f64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016f68:	4598      	cmp	r8, r3
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	9704      	str	r7, [sp, #16]
 8016f6e:	d807      	bhi.n	8016f80 <__ieee754_rem_pio2+0x28>
 8016f70:	2200      	movs	r2, #0
 8016f72:	2300      	movs	r3, #0
 8016f74:	ed80 0b00 	vstr	d0, [r0]
 8016f78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016f7c:	2500      	movs	r5, #0
 8016f7e:	e028      	b.n	8016fd2 <__ieee754_rem_pio2+0x7a>
 8016f80:	4bbe      	ldr	r3, [pc, #760]	@ (801727c <__ieee754_rem_pio2+0x324>)
 8016f82:	4598      	cmp	r8, r3
 8016f84:	d878      	bhi.n	8017078 <__ieee754_rem_pio2+0x120>
 8016f86:	9b04      	ldr	r3, [sp, #16]
 8016f88:	4dbd      	ldr	r5, [pc, #756]	@ (8017280 <__ieee754_rem_pio2+0x328>)
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8017240 <__ieee754_rem_pio2+0x2e8>)
 8016f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f94:	4639      	mov	r1, r7
 8016f96:	dd38      	ble.n	801700a <__ieee754_rem_pio2+0xb2>
 8016f98:	f7e9 f94e 	bl	8000238 <__aeabi_dsub>
 8016f9c:	45a8      	cmp	r8, r5
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460f      	mov	r7, r1
 8016fa2:	d01a      	beq.n	8016fda <__ieee754_rem_pio2+0x82>
 8016fa4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8017248 <__ieee754_rem_pio2+0x2f0>)
 8016fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016faa:	f7e9 f945 	bl	8000238 <__aeabi_dsub>
 8016fae:	4602      	mov	r2, r0
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	4680      	mov	r8, r0
 8016fb4:	4689      	mov	r9, r1
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	4639      	mov	r1, r7
 8016fba:	f7e9 f93d 	bl	8000238 <__aeabi_dsub>
 8016fbe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8017248 <__ieee754_rem_pio2+0x2f0>)
 8016fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc4:	f7e9 f938 	bl	8000238 <__aeabi_dsub>
 8016fc8:	e9c4 8900 	strd	r8, r9, [r4]
 8016fcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016fd0:	2501      	movs	r5, #1
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	b00d      	add	sp, #52	@ 0x34
 8016fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fda:	a39d      	add	r3, pc, #628	@ (adr r3, 8017250 <__ieee754_rem_pio2+0x2f8>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	f7e9 f92a 	bl	8000238 <__aeabi_dsub>
 8016fe4:	a39c      	add	r3, pc, #624	@ (adr r3, 8017258 <__ieee754_rem_pio2+0x300>)
 8016fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fea:	4606      	mov	r6, r0
 8016fec:	460f      	mov	r7, r1
 8016fee:	f7e9 f923 	bl	8000238 <__aeabi_dsub>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	4680      	mov	r8, r0
 8016ff8:	4689      	mov	r9, r1
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	f7e9 f91b 	bl	8000238 <__aeabi_dsub>
 8017002:	a395      	add	r3, pc, #596	@ (adr r3, 8017258 <__ieee754_rem_pio2+0x300>)
 8017004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017008:	e7dc      	b.n	8016fc4 <__ieee754_rem_pio2+0x6c>
 801700a:	f7e9 f917 	bl	800023c <__adddf3>
 801700e:	45a8      	cmp	r8, r5
 8017010:	4606      	mov	r6, r0
 8017012:	460f      	mov	r7, r1
 8017014:	d018      	beq.n	8017048 <__ieee754_rem_pio2+0xf0>
 8017016:	a38c      	add	r3, pc, #560	@ (adr r3, 8017248 <__ieee754_rem_pio2+0x2f0>)
 8017018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701c:	f7e9 f90e 	bl	800023c <__adddf3>
 8017020:	4602      	mov	r2, r0
 8017022:	460b      	mov	r3, r1
 8017024:	4680      	mov	r8, r0
 8017026:	4689      	mov	r9, r1
 8017028:	4630      	mov	r0, r6
 801702a:	4639      	mov	r1, r7
 801702c:	f7e9 f904 	bl	8000238 <__aeabi_dsub>
 8017030:	a385      	add	r3, pc, #532	@ (adr r3, 8017248 <__ieee754_rem_pio2+0x2f0>)
 8017032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017036:	f7e9 f901 	bl	800023c <__adddf3>
 801703a:	f04f 35ff 	mov.w	r5, #4294967295
 801703e:	e9c4 8900 	strd	r8, r9, [r4]
 8017042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017046:	e7c4      	b.n	8016fd2 <__ieee754_rem_pio2+0x7a>
 8017048:	a381      	add	r3, pc, #516	@ (adr r3, 8017250 <__ieee754_rem_pio2+0x2f8>)
 801704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801704e:	f7e9 f8f5 	bl	800023c <__adddf3>
 8017052:	a381      	add	r3, pc, #516	@ (adr r3, 8017258 <__ieee754_rem_pio2+0x300>)
 8017054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017058:	4606      	mov	r6, r0
 801705a:	460f      	mov	r7, r1
 801705c:	f7e9 f8ee 	bl	800023c <__adddf3>
 8017060:	4602      	mov	r2, r0
 8017062:	460b      	mov	r3, r1
 8017064:	4680      	mov	r8, r0
 8017066:	4689      	mov	r9, r1
 8017068:	4630      	mov	r0, r6
 801706a:	4639      	mov	r1, r7
 801706c:	f7e9 f8e4 	bl	8000238 <__aeabi_dsub>
 8017070:	a379      	add	r3, pc, #484	@ (adr r3, 8017258 <__ieee754_rem_pio2+0x300>)
 8017072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017076:	e7de      	b.n	8017036 <__ieee754_rem_pio2+0xde>
 8017078:	4b82      	ldr	r3, [pc, #520]	@ (8017284 <__ieee754_rem_pio2+0x32c>)
 801707a:	4598      	cmp	r8, r3
 801707c:	f200 80d1 	bhi.w	8017222 <__ieee754_rem_pio2+0x2ca>
 8017080:	f000 f966 	bl	8017350 <fabs>
 8017084:	ec57 6b10 	vmov	r6, r7, d0
 8017088:	a375      	add	r3, pc, #468	@ (adr r3, 8017260 <__ieee754_rem_pio2+0x308>)
 801708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708e:	4630      	mov	r0, r6
 8017090:	4639      	mov	r1, r7
 8017092:	f7e9 fa89 	bl	80005a8 <__aeabi_dmul>
 8017096:	4b7c      	ldr	r3, [pc, #496]	@ (8017288 <__ieee754_rem_pio2+0x330>)
 8017098:	2200      	movs	r2, #0
 801709a:	f7e9 f8cf 	bl	800023c <__adddf3>
 801709e:	f7e9 fd1d 	bl	8000adc <__aeabi_d2iz>
 80170a2:	4605      	mov	r5, r0
 80170a4:	f7e9 fa16 	bl	80004d4 <__aeabi_i2d>
 80170a8:	4602      	mov	r2, r0
 80170aa:	460b      	mov	r3, r1
 80170ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80170b0:	a363      	add	r3, pc, #396	@ (adr r3, 8017240 <__ieee754_rem_pio2+0x2e8>)
 80170b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170b6:	f7e9 fa77 	bl	80005a8 <__aeabi_dmul>
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	4630      	mov	r0, r6
 80170c0:	4639      	mov	r1, r7
 80170c2:	f7e9 f8b9 	bl	8000238 <__aeabi_dsub>
 80170c6:	a360      	add	r3, pc, #384	@ (adr r3, 8017248 <__ieee754_rem_pio2+0x2f0>)
 80170c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170cc:	4682      	mov	sl, r0
 80170ce:	468b      	mov	fp, r1
 80170d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170d4:	f7e9 fa68 	bl	80005a8 <__aeabi_dmul>
 80170d8:	2d1f      	cmp	r5, #31
 80170da:	4606      	mov	r6, r0
 80170dc:	460f      	mov	r7, r1
 80170de:	dc0c      	bgt.n	80170fa <__ieee754_rem_pio2+0x1a2>
 80170e0:	4b6a      	ldr	r3, [pc, #424]	@ (801728c <__ieee754_rem_pio2+0x334>)
 80170e2:	1e6a      	subs	r2, r5, #1
 80170e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170e8:	4543      	cmp	r3, r8
 80170ea:	d006      	beq.n	80170fa <__ieee754_rem_pio2+0x1a2>
 80170ec:	4632      	mov	r2, r6
 80170ee:	463b      	mov	r3, r7
 80170f0:	4650      	mov	r0, sl
 80170f2:	4659      	mov	r1, fp
 80170f4:	f7e9 f8a0 	bl	8000238 <__aeabi_dsub>
 80170f8:	e00e      	b.n	8017118 <__ieee754_rem_pio2+0x1c0>
 80170fa:	463b      	mov	r3, r7
 80170fc:	4632      	mov	r2, r6
 80170fe:	4650      	mov	r0, sl
 8017100:	4659      	mov	r1, fp
 8017102:	f7e9 f899 	bl	8000238 <__aeabi_dsub>
 8017106:	ea4f 5328 	mov.w	r3, r8, asr #20
 801710a:	9305      	str	r3, [sp, #20]
 801710c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017110:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8017114:	2b10      	cmp	r3, #16
 8017116:	dc02      	bgt.n	801711e <__ieee754_rem_pio2+0x1c6>
 8017118:	e9c4 0100 	strd	r0, r1, [r4]
 801711c:	e039      	b.n	8017192 <__ieee754_rem_pio2+0x23a>
 801711e:	a34c      	add	r3, pc, #304	@ (adr r3, 8017250 <__ieee754_rem_pio2+0x2f8>)
 8017120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017128:	f7e9 fa3e 	bl	80005a8 <__aeabi_dmul>
 801712c:	4606      	mov	r6, r0
 801712e:	460f      	mov	r7, r1
 8017130:	4602      	mov	r2, r0
 8017132:	460b      	mov	r3, r1
 8017134:	4650      	mov	r0, sl
 8017136:	4659      	mov	r1, fp
 8017138:	f7e9 f87e 	bl	8000238 <__aeabi_dsub>
 801713c:	4602      	mov	r2, r0
 801713e:	460b      	mov	r3, r1
 8017140:	4680      	mov	r8, r0
 8017142:	4689      	mov	r9, r1
 8017144:	4650      	mov	r0, sl
 8017146:	4659      	mov	r1, fp
 8017148:	f7e9 f876 	bl	8000238 <__aeabi_dsub>
 801714c:	4632      	mov	r2, r6
 801714e:	463b      	mov	r3, r7
 8017150:	f7e9 f872 	bl	8000238 <__aeabi_dsub>
 8017154:	a340      	add	r3, pc, #256	@ (adr r3, 8017258 <__ieee754_rem_pio2+0x300>)
 8017156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715a:	4606      	mov	r6, r0
 801715c:	460f      	mov	r7, r1
 801715e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017162:	f7e9 fa21 	bl	80005a8 <__aeabi_dmul>
 8017166:	4632      	mov	r2, r6
 8017168:	463b      	mov	r3, r7
 801716a:	f7e9 f865 	bl	8000238 <__aeabi_dsub>
 801716e:	4602      	mov	r2, r0
 8017170:	460b      	mov	r3, r1
 8017172:	4606      	mov	r6, r0
 8017174:	460f      	mov	r7, r1
 8017176:	4640      	mov	r0, r8
 8017178:	4649      	mov	r1, r9
 801717a:	f7e9 f85d 	bl	8000238 <__aeabi_dsub>
 801717e:	9a05      	ldr	r2, [sp, #20]
 8017180:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017184:	1ad3      	subs	r3, r2, r3
 8017186:	2b31      	cmp	r3, #49	@ 0x31
 8017188:	dc20      	bgt.n	80171cc <__ieee754_rem_pio2+0x274>
 801718a:	e9c4 0100 	strd	r0, r1, [r4]
 801718e:	46c2      	mov	sl, r8
 8017190:	46cb      	mov	fp, r9
 8017192:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017196:	4650      	mov	r0, sl
 8017198:	4642      	mov	r2, r8
 801719a:	464b      	mov	r3, r9
 801719c:	4659      	mov	r1, fp
 801719e:	f7e9 f84b 	bl	8000238 <__aeabi_dsub>
 80171a2:	463b      	mov	r3, r7
 80171a4:	4632      	mov	r2, r6
 80171a6:	f7e9 f847 	bl	8000238 <__aeabi_dsub>
 80171aa:	9b04      	ldr	r3, [sp, #16]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80171b2:	f6bf af0e 	bge.w	8016fd2 <__ieee754_rem_pio2+0x7a>
 80171b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80171ba:	6063      	str	r3, [r4, #4]
 80171bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80171c0:	f8c4 8000 	str.w	r8, [r4]
 80171c4:	60a0      	str	r0, [r4, #8]
 80171c6:	60e3      	str	r3, [r4, #12]
 80171c8:	426d      	negs	r5, r5
 80171ca:	e702      	b.n	8016fd2 <__ieee754_rem_pio2+0x7a>
 80171cc:	a326      	add	r3, pc, #152	@ (adr r3, 8017268 <__ieee754_rem_pio2+0x310>)
 80171ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80171d6:	f7e9 f9e7 	bl	80005a8 <__aeabi_dmul>
 80171da:	4606      	mov	r6, r0
 80171dc:	460f      	mov	r7, r1
 80171de:	4602      	mov	r2, r0
 80171e0:	460b      	mov	r3, r1
 80171e2:	4640      	mov	r0, r8
 80171e4:	4649      	mov	r1, r9
 80171e6:	f7e9 f827 	bl	8000238 <__aeabi_dsub>
 80171ea:	4602      	mov	r2, r0
 80171ec:	460b      	mov	r3, r1
 80171ee:	4682      	mov	sl, r0
 80171f0:	468b      	mov	fp, r1
 80171f2:	4640      	mov	r0, r8
 80171f4:	4649      	mov	r1, r9
 80171f6:	f7e9 f81f 	bl	8000238 <__aeabi_dsub>
 80171fa:	4632      	mov	r2, r6
 80171fc:	463b      	mov	r3, r7
 80171fe:	f7e9 f81b 	bl	8000238 <__aeabi_dsub>
 8017202:	a31b      	add	r3, pc, #108	@ (adr r3, 8017270 <__ieee754_rem_pio2+0x318>)
 8017204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017208:	4606      	mov	r6, r0
 801720a:	460f      	mov	r7, r1
 801720c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017210:	f7e9 f9ca 	bl	80005a8 <__aeabi_dmul>
 8017214:	4632      	mov	r2, r6
 8017216:	463b      	mov	r3, r7
 8017218:	f7e9 f80e 	bl	8000238 <__aeabi_dsub>
 801721c:	4606      	mov	r6, r0
 801721e:	460f      	mov	r7, r1
 8017220:	e764      	b.n	80170ec <__ieee754_rem_pio2+0x194>
 8017222:	4b1b      	ldr	r3, [pc, #108]	@ (8017290 <__ieee754_rem_pio2+0x338>)
 8017224:	4598      	cmp	r8, r3
 8017226:	d935      	bls.n	8017294 <__ieee754_rem_pio2+0x33c>
 8017228:	4632      	mov	r2, r6
 801722a:	463b      	mov	r3, r7
 801722c:	4630      	mov	r0, r6
 801722e:	4639      	mov	r1, r7
 8017230:	f7e9 f802 	bl	8000238 <__aeabi_dsub>
 8017234:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017238:	e9c4 0100 	strd	r0, r1, [r4]
 801723c:	e69e      	b.n	8016f7c <__ieee754_rem_pio2+0x24>
 801723e:	bf00      	nop
 8017240:	54400000 	.word	0x54400000
 8017244:	3ff921fb 	.word	0x3ff921fb
 8017248:	1a626331 	.word	0x1a626331
 801724c:	3dd0b461 	.word	0x3dd0b461
 8017250:	1a600000 	.word	0x1a600000
 8017254:	3dd0b461 	.word	0x3dd0b461
 8017258:	2e037073 	.word	0x2e037073
 801725c:	3ba3198a 	.word	0x3ba3198a
 8017260:	6dc9c883 	.word	0x6dc9c883
 8017264:	3fe45f30 	.word	0x3fe45f30
 8017268:	2e000000 	.word	0x2e000000
 801726c:	3ba3198a 	.word	0x3ba3198a
 8017270:	252049c1 	.word	0x252049c1
 8017274:	397b839a 	.word	0x397b839a
 8017278:	3fe921fb 	.word	0x3fe921fb
 801727c:	4002d97b 	.word	0x4002d97b
 8017280:	3ff921fb 	.word	0x3ff921fb
 8017284:	413921fb 	.word	0x413921fb
 8017288:	3fe00000 	.word	0x3fe00000
 801728c:	0801a554 	.word	0x0801a554
 8017290:	7fefffff 	.word	0x7fefffff
 8017294:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017298:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801729c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80172a0:	4630      	mov	r0, r6
 80172a2:	460f      	mov	r7, r1
 80172a4:	f7e9 fc1a 	bl	8000adc <__aeabi_d2iz>
 80172a8:	f7e9 f914 	bl	80004d4 <__aeabi_i2d>
 80172ac:	4602      	mov	r2, r0
 80172ae:	460b      	mov	r3, r1
 80172b0:	4630      	mov	r0, r6
 80172b2:	4639      	mov	r1, r7
 80172b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80172b8:	f7e8 ffbe 	bl	8000238 <__aeabi_dsub>
 80172bc:	4b22      	ldr	r3, [pc, #136]	@ (8017348 <__ieee754_rem_pio2+0x3f0>)
 80172be:	2200      	movs	r2, #0
 80172c0:	f7e9 f972 	bl	80005a8 <__aeabi_dmul>
 80172c4:	460f      	mov	r7, r1
 80172c6:	4606      	mov	r6, r0
 80172c8:	f7e9 fc08 	bl	8000adc <__aeabi_d2iz>
 80172cc:	f7e9 f902 	bl	80004d4 <__aeabi_i2d>
 80172d0:	4602      	mov	r2, r0
 80172d2:	460b      	mov	r3, r1
 80172d4:	4630      	mov	r0, r6
 80172d6:	4639      	mov	r1, r7
 80172d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80172dc:	f7e8 ffac 	bl	8000238 <__aeabi_dsub>
 80172e0:	4b19      	ldr	r3, [pc, #100]	@ (8017348 <__ieee754_rem_pio2+0x3f0>)
 80172e2:	2200      	movs	r2, #0
 80172e4:	f7e9 f960 	bl	80005a8 <__aeabi_dmul>
 80172e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80172ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80172f0:	f04f 0803 	mov.w	r8, #3
 80172f4:	2600      	movs	r6, #0
 80172f6:	2700      	movs	r7, #0
 80172f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	46c2      	mov	sl, r8
 8017302:	f108 38ff 	add.w	r8, r8, #4294967295
 8017306:	f7e9 fbb7 	bl	8000a78 <__aeabi_dcmpeq>
 801730a:	2800      	cmp	r0, #0
 801730c:	d1f4      	bne.n	80172f8 <__ieee754_rem_pio2+0x3a0>
 801730e:	4b0f      	ldr	r3, [pc, #60]	@ (801734c <__ieee754_rem_pio2+0x3f4>)
 8017310:	9301      	str	r3, [sp, #4]
 8017312:	2302      	movs	r3, #2
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	462a      	mov	r2, r5
 8017318:	4653      	mov	r3, sl
 801731a:	4621      	mov	r1, r4
 801731c:	a806      	add	r0, sp, #24
 801731e:	f000 f9f7 	bl	8017710 <__kernel_rem_pio2>
 8017322:	9b04      	ldr	r3, [sp, #16]
 8017324:	2b00      	cmp	r3, #0
 8017326:	4605      	mov	r5, r0
 8017328:	f6bf ae53 	bge.w	8016fd2 <__ieee754_rem_pio2+0x7a>
 801732c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8017330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017334:	e9c4 2300 	strd	r2, r3, [r4]
 8017338:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801733c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017340:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8017344:	e740      	b.n	80171c8 <__ieee754_rem_pio2+0x270>
 8017346:	bf00      	nop
 8017348:	41700000 	.word	0x41700000
 801734c:	0801a5d4 	.word	0x0801a5d4

08017350 <fabs>:
 8017350:	ec51 0b10 	vmov	r0, r1, d0
 8017354:	4602      	mov	r2, r0
 8017356:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801735a:	ec43 2b10 	vmov	d0, r2, r3
 801735e:	4770      	bx	lr

08017360 <__kernel_cosf>:
 8017360:	ee10 3a10 	vmov	r3, s0
 8017364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017368:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801736c:	eef0 6a40 	vmov.f32	s13, s0
 8017370:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017374:	d204      	bcs.n	8017380 <__kernel_cosf+0x20>
 8017376:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801737a:	ee17 2a90 	vmov	r2, s15
 801737e:	b342      	cbz	r2, 80173d2 <__kernel_cosf+0x72>
 8017380:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017384:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80173f0 <__kernel_cosf+0x90>
 8017388:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80173f4 <__kernel_cosf+0x94>
 801738c:	4a1a      	ldr	r2, [pc, #104]	@ (80173f8 <__kernel_cosf+0x98>)
 801738e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017392:	4293      	cmp	r3, r2
 8017394:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80173fc <__kernel_cosf+0x9c>
 8017398:	eee6 7a07 	vfma.f32	s15, s12, s14
 801739c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017400 <__kernel_cosf+0xa0>
 80173a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80173a4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017404 <__kernel_cosf+0xa4>
 80173a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80173ac:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8017408 <__kernel_cosf+0xa8>
 80173b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80173b4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80173b8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80173bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80173c0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80173c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173c8:	d804      	bhi.n	80173d4 <__kernel_cosf+0x74>
 80173ca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80173ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80173d2:	4770      	bx	lr
 80173d4:	4a0d      	ldr	r2, [pc, #52]	@ (801740c <__kernel_cosf+0xac>)
 80173d6:	4293      	cmp	r3, r2
 80173d8:	bf9a      	itte	ls
 80173da:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80173de:	ee07 3a10 	vmovls	s14, r3
 80173e2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80173e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80173ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173ee:	e7ec      	b.n	80173ca <__kernel_cosf+0x6a>
 80173f0:	ad47d74e 	.word	0xad47d74e
 80173f4:	310f74f6 	.word	0x310f74f6
 80173f8:	3e999999 	.word	0x3e999999
 80173fc:	b493f27c 	.word	0xb493f27c
 8017400:	37d00d01 	.word	0x37d00d01
 8017404:	bab60b61 	.word	0xbab60b61
 8017408:	3d2aaaab 	.word	0x3d2aaaab
 801740c:	3f480000 	.word	0x3f480000

08017410 <__kernel_sinf>:
 8017410:	ee10 3a10 	vmov	r3, s0
 8017414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017418:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801741c:	d204      	bcs.n	8017428 <__kernel_sinf+0x18>
 801741e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017422:	ee17 3a90 	vmov	r3, s15
 8017426:	b35b      	cbz	r3, 8017480 <__kernel_sinf+0x70>
 8017428:	ee20 7a00 	vmul.f32	s14, s0, s0
 801742c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017484 <__kernel_sinf+0x74>
 8017430:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017488 <__kernel_sinf+0x78>
 8017434:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017438:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801748c <__kernel_sinf+0x7c>
 801743c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017440:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017490 <__kernel_sinf+0x80>
 8017444:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017448:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017494 <__kernel_sinf+0x84>
 801744c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017450:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017454:	b930      	cbnz	r0, 8017464 <__kernel_sinf+0x54>
 8017456:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017498 <__kernel_sinf+0x88>
 801745a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801745e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017462:	4770      	bx	lr
 8017464:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017468:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801746c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017470:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017474:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801749c <__kernel_sinf+0x8c>
 8017478:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801747c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	2f2ec9d3 	.word	0x2f2ec9d3
 8017488:	b2d72f34 	.word	0xb2d72f34
 801748c:	3638ef1b 	.word	0x3638ef1b
 8017490:	b9500d01 	.word	0xb9500d01
 8017494:	3c088889 	.word	0x3c088889
 8017498:	be2aaaab 	.word	0xbe2aaaab
 801749c:	3e2aaaab 	.word	0x3e2aaaab

080174a0 <__ieee754_rem_pio2f>:
 80174a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174a2:	ee10 6a10 	vmov	r6, s0
 80174a6:	4b88      	ldr	r3, [pc, #544]	@ (80176c8 <__ieee754_rem_pio2f+0x228>)
 80174a8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80174ac:	429d      	cmp	r5, r3
 80174ae:	b087      	sub	sp, #28
 80174b0:	4604      	mov	r4, r0
 80174b2:	d805      	bhi.n	80174c0 <__ieee754_rem_pio2f+0x20>
 80174b4:	2300      	movs	r3, #0
 80174b6:	ed80 0a00 	vstr	s0, [r0]
 80174ba:	6043      	str	r3, [r0, #4]
 80174bc:	2000      	movs	r0, #0
 80174be:	e022      	b.n	8017506 <__ieee754_rem_pio2f+0x66>
 80174c0:	4b82      	ldr	r3, [pc, #520]	@ (80176cc <__ieee754_rem_pio2f+0x22c>)
 80174c2:	429d      	cmp	r5, r3
 80174c4:	d83a      	bhi.n	801753c <__ieee754_rem_pio2f+0x9c>
 80174c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80174ca:	2e00      	cmp	r6, #0
 80174cc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80176d0 <__ieee754_rem_pio2f+0x230>
 80174d0:	4a80      	ldr	r2, [pc, #512]	@ (80176d4 <__ieee754_rem_pio2f+0x234>)
 80174d2:	f023 030f 	bic.w	r3, r3, #15
 80174d6:	dd18      	ble.n	801750a <__ieee754_rem_pio2f+0x6a>
 80174d8:	4293      	cmp	r3, r2
 80174da:	ee70 7a47 	vsub.f32	s15, s0, s14
 80174de:	bf09      	itett	eq
 80174e0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80176d8 <__ieee754_rem_pio2f+0x238>
 80174e4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80176dc <__ieee754_rem_pio2f+0x23c>
 80174e8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80176e0 <__ieee754_rem_pio2f+0x240>
 80174ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80174f0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80174f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174f8:	ed80 7a00 	vstr	s14, [r0]
 80174fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017500:	edc0 7a01 	vstr	s15, [r0, #4]
 8017504:	2001      	movs	r0, #1
 8017506:	b007      	add	sp, #28
 8017508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801750a:	4293      	cmp	r3, r2
 801750c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8017510:	bf09      	itett	eq
 8017512:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80176d8 <__ieee754_rem_pio2f+0x238>
 8017516:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80176dc <__ieee754_rem_pio2f+0x23c>
 801751a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80176e0 <__ieee754_rem_pio2f+0x240>
 801751e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8017522:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801752a:	ed80 7a00 	vstr	s14, [r0]
 801752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017532:	edc0 7a01 	vstr	s15, [r0, #4]
 8017536:	f04f 30ff 	mov.w	r0, #4294967295
 801753a:	e7e4      	b.n	8017506 <__ieee754_rem_pio2f+0x66>
 801753c:	4b69      	ldr	r3, [pc, #420]	@ (80176e4 <__ieee754_rem_pio2f+0x244>)
 801753e:	429d      	cmp	r5, r3
 8017540:	d873      	bhi.n	801762a <__ieee754_rem_pio2f+0x18a>
 8017542:	f000 f8dd 	bl	8017700 <fabsf>
 8017546:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80176e8 <__ieee754_rem_pio2f+0x248>
 801754a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801754e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801755a:	ee17 0a90 	vmov	r0, s15
 801755e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80176d0 <__ieee754_rem_pio2f+0x230>
 8017562:	eea7 0a67 	vfms.f32	s0, s14, s15
 8017566:	281f      	cmp	r0, #31
 8017568:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80176dc <__ieee754_rem_pio2f+0x23c>
 801756c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017570:	eeb1 6a47 	vneg.f32	s12, s14
 8017574:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017578:	ee16 1a90 	vmov	r1, s13
 801757c:	dc09      	bgt.n	8017592 <__ieee754_rem_pio2f+0xf2>
 801757e:	4a5b      	ldr	r2, [pc, #364]	@ (80176ec <__ieee754_rem_pio2f+0x24c>)
 8017580:	1e47      	subs	r7, r0, #1
 8017582:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8017586:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801758a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801758e:	4293      	cmp	r3, r2
 8017590:	d107      	bne.n	80175a2 <__ieee754_rem_pio2f+0x102>
 8017592:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8017596:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801759a:	2a08      	cmp	r2, #8
 801759c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80175a0:	dc14      	bgt.n	80175cc <__ieee754_rem_pio2f+0x12c>
 80175a2:	6021      	str	r1, [r4, #0]
 80175a4:	ed94 7a00 	vldr	s14, [r4]
 80175a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80175ac:	2e00      	cmp	r6, #0
 80175ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80175b2:	ed84 0a01 	vstr	s0, [r4, #4]
 80175b6:	daa6      	bge.n	8017506 <__ieee754_rem_pio2f+0x66>
 80175b8:	eeb1 7a47 	vneg.f32	s14, s14
 80175bc:	eeb1 0a40 	vneg.f32	s0, s0
 80175c0:	ed84 7a00 	vstr	s14, [r4]
 80175c4:	ed84 0a01 	vstr	s0, [r4, #4]
 80175c8:	4240      	negs	r0, r0
 80175ca:	e79c      	b.n	8017506 <__ieee754_rem_pio2f+0x66>
 80175cc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80176d8 <__ieee754_rem_pio2f+0x238>
 80175d0:	eef0 6a40 	vmov.f32	s13, s0
 80175d4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80175d8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80175dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80175e0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80176e0 <__ieee754_rem_pio2f+0x240>
 80175e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80175e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80175ec:	ee15 2a90 	vmov	r2, s11
 80175f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80175f4:	1a5b      	subs	r3, r3, r1
 80175f6:	2b19      	cmp	r3, #25
 80175f8:	dc04      	bgt.n	8017604 <__ieee754_rem_pio2f+0x164>
 80175fa:	edc4 5a00 	vstr	s11, [r4]
 80175fe:	eeb0 0a66 	vmov.f32	s0, s13
 8017602:	e7cf      	b.n	80175a4 <__ieee754_rem_pio2f+0x104>
 8017604:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80176f0 <__ieee754_rem_pio2f+0x250>
 8017608:	eeb0 0a66 	vmov.f32	s0, s13
 801760c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8017610:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017614:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80176f4 <__ieee754_rem_pio2f+0x254>
 8017618:	eee6 7a25 	vfma.f32	s15, s12, s11
 801761c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8017620:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017624:	ed84 7a00 	vstr	s14, [r4]
 8017628:	e7bc      	b.n	80175a4 <__ieee754_rem_pio2f+0x104>
 801762a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801762e:	d306      	bcc.n	801763e <__ieee754_rem_pio2f+0x19e>
 8017630:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017634:	edc0 7a01 	vstr	s15, [r0, #4]
 8017638:	edc0 7a00 	vstr	s15, [r0]
 801763c:	e73e      	b.n	80174bc <__ieee754_rem_pio2f+0x1c>
 801763e:	15ea      	asrs	r2, r5, #23
 8017640:	3a86      	subs	r2, #134	@ 0x86
 8017642:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017646:	ee07 3a90 	vmov	s15, r3
 801764a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801764e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80176f8 <__ieee754_rem_pio2f+0x258>
 8017652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801765a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801765e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017662:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017666:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801766a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801766e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017676:	eef5 7a40 	vcmp.f32	s15, #0.0
 801767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801767e:	edcd 7a05 	vstr	s15, [sp, #20]
 8017682:	d11e      	bne.n	80176c2 <__ieee754_rem_pio2f+0x222>
 8017684:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768c:	bf0c      	ite	eq
 801768e:	2301      	moveq	r3, #1
 8017690:	2302      	movne	r3, #2
 8017692:	491a      	ldr	r1, [pc, #104]	@ (80176fc <__ieee754_rem_pio2f+0x25c>)
 8017694:	9101      	str	r1, [sp, #4]
 8017696:	2102      	movs	r1, #2
 8017698:	9100      	str	r1, [sp, #0]
 801769a:	a803      	add	r0, sp, #12
 801769c:	4621      	mov	r1, r4
 801769e:	f000 fb8f 	bl	8017dc0 <__kernel_rem_pio2f>
 80176a2:	2e00      	cmp	r6, #0
 80176a4:	f6bf af2f 	bge.w	8017506 <__ieee754_rem_pio2f+0x66>
 80176a8:	edd4 7a00 	vldr	s15, [r4]
 80176ac:	eef1 7a67 	vneg.f32	s15, s15
 80176b0:	edc4 7a00 	vstr	s15, [r4]
 80176b4:	edd4 7a01 	vldr	s15, [r4, #4]
 80176b8:	eef1 7a67 	vneg.f32	s15, s15
 80176bc:	edc4 7a01 	vstr	s15, [r4, #4]
 80176c0:	e782      	b.n	80175c8 <__ieee754_rem_pio2f+0x128>
 80176c2:	2303      	movs	r3, #3
 80176c4:	e7e5      	b.n	8017692 <__ieee754_rem_pio2f+0x1f2>
 80176c6:	bf00      	nop
 80176c8:	3f490fd8 	.word	0x3f490fd8
 80176cc:	4016cbe3 	.word	0x4016cbe3
 80176d0:	3fc90f80 	.word	0x3fc90f80
 80176d4:	3fc90fd0 	.word	0x3fc90fd0
 80176d8:	37354400 	.word	0x37354400
 80176dc:	37354443 	.word	0x37354443
 80176e0:	2e85a308 	.word	0x2e85a308
 80176e4:	43490f80 	.word	0x43490f80
 80176e8:	3f22f984 	.word	0x3f22f984
 80176ec:	0801a6dc 	.word	0x0801a6dc
 80176f0:	2e85a300 	.word	0x2e85a300
 80176f4:	248d3132 	.word	0x248d3132
 80176f8:	43800000 	.word	0x43800000
 80176fc:	0801a75c 	.word	0x0801a75c

08017700 <fabsf>:
 8017700:	ee10 3a10 	vmov	r3, s0
 8017704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017708:	ee00 3a10 	vmov	s0, r3
 801770c:	4770      	bx	lr
	...

08017710 <__kernel_rem_pio2>:
 8017710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	ed2d 8b02 	vpush	{d8}
 8017718:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801771c:	f112 0f14 	cmn.w	r2, #20
 8017720:	9306      	str	r3, [sp, #24]
 8017722:	9104      	str	r1, [sp, #16]
 8017724:	4bbe      	ldr	r3, [pc, #760]	@ (8017a20 <__kernel_rem_pio2+0x310>)
 8017726:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8017728:	9008      	str	r0, [sp, #32]
 801772a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801772e:	9300      	str	r3, [sp, #0]
 8017730:	9b06      	ldr	r3, [sp, #24]
 8017732:	f103 33ff 	add.w	r3, r3, #4294967295
 8017736:	bfa8      	it	ge
 8017738:	1ed4      	subge	r4, r2, #3
 801773a:	9305      	str	r3, [sp, #20]
 801773c:	bfb2      	itee	lt
 801773e:	2400      	movlt	r4, #0
 8017740:	2318      	movge	r3, #24
 8017742:	fb94 f4f3 	sdivge	r4, r4, r3
 8017746:	f06f 0317 	mvn.w	r3, #23
 801774a:	fb04 3303 	mla	r3, r4, r3, r3
 801774e:	eb03 0b02 	add.w	fp, r3, r2
 8017752:	9b00      	ldr	r3, [sp, #0]
 8017754:	9a05      	ldr	r2, [sp, #20]
 8017756:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8017a10 <__kernel_rem_pio2+0x300>
 801775a:	eb03 0802 	add.w	r8, r3, r2
 801775e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017760:	1aa7      	subs	r7, r4, r2
 8017762:	ae20      	add	r6, sp, #128	@ 0x80
 8017764:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017768:	2500      	movs	r5, #0
 801776a:	4545      	cmp	r5, r8
 801776c:	dd13      	ble.n	8017796 <__kernel_rem_pio2+0x86>
 801776e:	9b06      	ldr	r3, [sp, #24]
 8017770:	aa20      	add	r2, sp, #128	@ 0x80
 8017772:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8017776:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801777a:	f04f 0800 	mov.w	r8, #0
 801777e:	9b00      	ldr	r3, [sp, #0]
 8017780:	4598      	cmp	r8, r3
 8017782:	dc31      	bgt.n	80177e8 <__kernel_rem_pio2+0xd8>
 8017784:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8017a10 <__kernel_rem_pio2+0x300>
 8017788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801778c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017790:	462f      	mov	r7, r5
 8017792:	2600      	movs	r6, #0
 8017794:	e01b      	b.n	80177ce <__kernel_rem_pio2+0xbe>
 8017796:	42ef      	cmn	r7, r5
 8017798:	d407      	bmi.n	80177aa <__kernel_rem_pio2+0x9a>
 801779a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801779e:	f7e8 fe99 	bl	80004d4 <__aeabi_i2d>
 80177a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80177a6:	3501      	adds	r5, #1
 80177a8:	e7df      	b.n	801776a <__kernel_rem_pio2+0x5a>
 80177aa:	ec51 0b18 	vmov	r0, r1, d8
 80177ae:	e7f8      	b.n	80177a2 <__kernel_rem_pio2+0x92>
 80177b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80177b8:	f7e8 fef6 	bl	80005a8 <__aeabi_dmul>
 80177bc:	4602      	mov	r2, r0
 80177be:	460b      	mov	r3, r1
 80177c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177c4:	f7e8 fd3a 	bl	800023c <__adddf3>
 80177c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80177cc:	3601      	adds	r6, #1
 80177ce:	9b05      	ldr	r3, [sp, #20]
 80177d0:	429e      	cmp	r6, r3
 80177d2:	f1a7 0708 	sub.w	r7, r7, #8
 80177d6:	ddeb      	ble.n	80177b0 <__kernel_rem_pio2+0xa0>
 80177d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177dc:	f108 0801 	add.w	r8, r8, #1
 80177e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80177e4:	3508      	adds	r5, #8
 80177e6:	e7ca      	b.n	801777e <__kernel_rem_pio2+0x6e>
 80177e8:	9b00      	ldr	r3, [sp, #0]
 80177ea:	f8dd 8000 	ldr.w	r8, [sp]
 80177ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80177f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80177f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80177f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80177f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80177fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80177fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017804:	ab98      	add	r3, sp, #608	@ 0x260
 8017806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801780a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801780e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017812:	ac0c      	add	r4, sp, #48	@ 0x30
 8017814:	ab70      	add	r3, sp, #448	@ 0x1c0
 8017816:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801781a:	46a1      	mov	r9, r4
 801781c:	46c2      	mov	sl, r8
 801781e:	f1ba 0f00 	cmp.w	sl, #0
 8017822:	f1a5 0508 	sub.w	r5, r5, #8
 8017826:	dc77      	bgt.n	8017918 <__kernel_rem_pio2+0x208>
 8017828:	4658      	mov	r0, fp
 801782a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801782e:	f000 fd3b 	bl	80182a8 <scalbn>
 8017832:	ec57 6b10 	vmov	r6, r7, d0
 8017836:	2200      	movs	r2, #0
 8017838:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801783c:	4630      	mov	r0, r6
 801783e:	4639      	mov	r1, r7
 8017840:	f7e8 feb2 	bl	80005a8 <__aeabi_dmul>
 8017844:	ec41 0b10 	vmov	d0, r0, r1
 8017848:	f000 fe12 	bl	8018470 <floor>
 801784c:	4b75      	ldr	r3, [pc, #468]	@ (8017a24 <__kernel_rem_pio2+0x314>)
 801784e:	ec51 0b10 	vmov	r0, r1, d0
 8017852:	2200      	movs	r2, #0
 8017854:	f7e8 fea8 	bl	80005a8 <__aeabi_dmul>
 8017858:	4602      	mov	r2, r0
 801785a:	460b      	mov	r3, r1
 801785c:	4630      	mov	r0, r6
 801785e:	4639      	mov	r1, r7
 8017860:	f7e8 fcea 	bl	8000238 <__aeabi_dsub>
 8017864:	460f      	mov	r7, r1
 8017866:	4606      	mov	r6, r0
 8017868:	f7e9 f938 	bl	8000adc <__aeabi_d2iz>
 801786c:	9002      	str	r0, [sp, #8]
 801786e:	f7e8 fe31 	bl	80004d4 <__aeabi_i2d>
 8017872:	4602      	mov	r2, r0
 8017874:	460b      	mov	r3, r1
 8017876:	4630      	mov	r0, r6
 8017878:	4639      	mov	r1, r7
 801787a:	f7e8 fcdd 	bl	8000238 <__aeabi_dsub>
 801787e:	f1bb 0f00 	cmp.w	fp, #0
 8017882:	4606      	mov	r6, r0
 8017884:	460f      	mov	r7, r1
 8017886:	dd6c      	ble.n	8017962 <__kernel_rem_pio2+0x252>
 8017888:	f108 31ff 	add.w	r1, r8, #4294967295
 801788c:	ab0c      	add	r3, sp, #48	@ 0x30
 801788e:	9d02      	ldr	r5, [sp, #8]
 8017890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017894:	f1cb 0018 	rsb	r0, fp, #24
 8017898:	fa43 f200 	asr.w	r2, r3, r0
 801789c:	4415      	add	r5, r2
 801789e:	4082      	lsls	r2, r0
 80178a0:	1a9b      	subs	r3, r3, r2
 80178a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80178a4:	9502      	str	r5, [sp, #8]
 80178a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80178aa:	f1cb 0217 	rsb	r2, fp, #23
 80178ae:	fa43 f902 	asr.w	r9, r3, r2
 80178b2:	f1b9 0f00 	cmp.w	r9, #0
 80178b6:	dd64      	ble.n	8017982 <__kernel_rem_pio2+0x272>
 80178b8:	9b02      	ldr	r3, [sp, #8]
 80178ba:	2200      	movs	r2, #0
 80178bc:	3301      	adds	r3, #1
 80178be:	9302      	str	r3, [sp, #8]
 80178c0:	4615      	mov	r5, r2
 80178c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80178c6:	4590      	cmp	r8, r2
 80178c8:	f300 80b8 	bgt.w	8017a3c <__kernel_rem_pio2+0x32c>
 80178cc:	f1bb 0f00 	cmp.w	fp, #0
 80178d0:	dd07      	ble.n	80178e2 <__kernel_rem_pio2+0x1d2>
 80178d2:	f1bb 0f01 	cmp.w	fp, #1
 80178d6:	f000 80bf 	beq.w	8017a58 <__kernel_rem_pio2+0x348>
 80178da:	f1bb 0f02 	cmp.w	fp, #2
 80178de:	f000 80c6 	beq.w	8017a6e <__kernel_rem_pio2+0x35e>
 80178e2:	f1b9 0f02 	cmp.w	r9, #2
 80178e6:	d14c      	bne.n	8017982 <__kernel_rem_pio2+0x272>
 80178e8:	4632      	mov	r2, r6
 80178ea:	463b      	mov	r3, r7
 80178ec:	494e      	ldr	r1, [pc, #312]	@ (8017a28 <__kernel_rem_pio2+0x318>)
 80178ee:	2000      	movs	r0, #0
 80178f0:	f7e8 fca2 	bl	8000238 <__aeabi_dsub>
 80178f4:	4606      	mov	r6, r0
 80178f6:	460f      	mov	r7, r1
 80178f8:	2d00      	cmp	r5, #0
 80178fa:	d042      	beq.n	8017982 <__kernel_rem_pio2+0x272>
 80178fc:	4658      	mov	r0, fp
 80178fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8017a18 <__kernel_rem_pio2+0x308>
 8017902:	f000 fcd1 	bl	80182a8 <scalbn>
 8017906:	4630      	mov	r0, r6
 8017908:	4639      	mov	r1, r7
 801790a:	ec53 2b10 	vmov	r2, r3, d0
 801790e:	f7e8 fc93 	bl	8000238 <__aeabi_dsub>
 8017912:	4606      	mov	r6, r0
 8017914:	460f      	mov	r7, r1
 8017916:	e034      	b.n	8017982 <__kernel_rem_pio2+0x272>
 8017918:	4b44      	ldr	r3, [pc, #272]	@ (8017a2c <__kernel_rem_pio2+0x31c>)
 801791a:	2200      	movs	r2, #0
 801791c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017920:	f7e8 fe42 	bl	80005a8 <__aeabi_dmul>
 8017924:	f7e9 f8da 	bl	8000adc <__aeabi_d2iz>
 8017928:	f7e8 fdd4 	bl	80004d4 <__aeabi_i2d>
 801792c:	4b40      	ldr	r3, [pc, #256]	@ (8017a30 <__kernel_rem_pio2+0x320>)
 801792e:	2200      	movs	r2, #0
 8017930:	4606      	mov	r6, r0
 8017932:	460f      	mov	r7, r1
 8017934:	f7e8 fe38 	bl	80005a8 <__aeabi_dmul>
 8017938:	4602      	mov	r2, r0
 801793a:	460b      	mov	r3, r1
 801793c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017940:	f7e8 fc7a 	bl	8000238 <__aeabi_dsub>
 8017944:	f7e9 f8ca 	bl	8000adc <__aeabi_d2iz>
 8017948:	e9d5 2300 	ldrd	r2, r3, [r5]
 801794c:	f849 0b04 	str.w	r0, [r9], #4
 8017950:	4639      	mov	r1, r7
 8017952:	4630      	mov	r0, r6
 8017954:	f7e8 fc72 	bl	800023c <__adddf3>
 8017958:	f10a 3aff 	add.w	sl, sl, #4294967295
 801795c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017960:	e75d      	b.n	801781e <__kernel_rem_pio2+0x10e>
 8017962:	d107      	bne.n	8017974 <__kernel_rem_pio2+0x264>
 8017964:	f108 33ff 	add.w	r3, r8, #4294967295
 8017968:	aa0c      	add	r2, sp, #48	@ 0x30
 801796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801796e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8017972:	e79e      	b.n	80178b2 <__kernel_rem_pio2+0x1a2>
 8017974:	4b2f      	ldr	r3, [pc, #188]	@ (8017a34 <__kernel_rem_pio2+0x324>)
 8017976:	2200      	movs	r2, #0
 8017978:	f7e9 f89c 	bl	8000ab4 <__aeabi_dcmpge>
 801797c:	2800      	cmp	r0, #0
 801797e:	d143      	bne.n	8017a08 <__kernel_rem_pio2+0x2f8>
 8017980:	4681      	mov	r9, r0
 8017982:	2200      	movs	r2, #0
 8017984:	2300      	movs	r3, #0
 8017986:	4630      	mov	r0, r6
 8017988:	4639      	mov	r1, r7
 801798a:	f7e9 f875 	bl	8000a78 <__aeabi_dcmpeq>
 801798e:	2800      	cmp	r0, #0
 8017990:	f000 80bf 	beq.w	8017b12 <__kernel_rem_pio2+0x402>
 8017994:	f108 33ff 	add.w	r3, r8, #4294967295
 8017998:	2200      	movs	r2, #0
 801799a:	9900      	ldr	r1, [sp, #0]
 801799c:	428b      	cmp	r3, r1
 801799e:	da6e      	bge.n	8017a7e <__kernel_rem_pio2+0x36e>
 80179a0:	2a00      	cmp	r2, #0
 80179a2:	f000 8089 	beq.w	8017ab8 <__kernel_rem_pio2+0x3a8>
 80179a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80179aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80179ac:	f1ab 0b18 	sub.w	fp, fp, #24
 80179b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d0f6      	beq.n	80179a6 <__kernel_rem_pio2+0x296>
 80179b8:	4658      	mov	r0, fp
 80179ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8017a18 <__kernel_rem_pio2+0x308>
 80179be:	f000 fc73 	bl	80182a8 <scalbn>
 80179c2:	f108 0301 	add.w	r3, r8, #1
 80179c6:	00da      	lsls	r2, r3, #3
 80179c8:	9205      	str	r2, [sp, #20]
 80179ca:	ec55 4b10 	vmov	r4, r5, d0
 80179ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 80179d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8017a2c <__kernel_rem_pio2+0x31c>
 80179d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80179d8:	4646      	mov	r6, r8
 80179da:	f04f 0a00 	mov.w	sl, #0
 80179de:	2e00      	cmp	r6, #0
 80179e0:	f280 80cf 	bge.w	8017b82 <__kernel_rem_pio2+0x472>
 80179e4:	4644      	mov	r4, r8
 80179e6:	2c00      	cmp	r4, #0
 80179e8:	f2c0 80fd 	blt.w	8017be6 <__kernel_rem_pio2+0x4d6>
 80179ec:	4b12      	ldr	r3, [pc, #72]	@ (8017a38 <__kernel_rem_pio2+0x328>)
 80179ee:	461f      	mov	r7, r3
 80179f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80179f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80179f6:	9306      	str	r3, [sp, #24]
 80179f8:	f04f 0a00 	mov.w	sl, #0
 80179fc:	f04f 0b00 	mov.w	fp, #0
 8017a00:	2600      	movs	r6, #0
 8017a02:	eba8 0504 	sub.w	r5, r8, r4
 8017a06:	e0e2      	b.n	8017bce <__kernel_rem_pio2+0x4be>
 8017a08:	f04f 0902 	mov.w	r9, #2
 8017a0c:	e754      	b.n	80178b8 <__kernel_rem_pio2+0x1a8>
 8017a0e:	bf00      	nop
	...
 8017a1c:	3ff00000 	.word	0x3ff00000
 8017a20:	0801aab8 	.word	0x0801aab8
 8017a24:	40200000 	.word	0x40200000
 8017a28:	3ff00000 	.word	0x3ff00000
 8017a2c:	3e700000 	.word	0x3e700000
 8017a30:	41700000 	.word	0x41700000
 8017a34:	3fe00000 	.word	0x3fe00000
 8017a38:	0801aa78 	.word	0x0801aa78
 8017a3c:	f854 3b04 	ldr.w	r3, [r4], #4
 8017a40:	b945      	cbnz	r5, 8017a54 <__kernel_rem_pio2+0x344>
 8017a42:	b123      	cbz	r3, 8017a4e <__kernel_rem_pio2+0x33e>
 8017a44:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8017a48:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	3201      	adds	r2, #1
 8017a50:	461d      	mov	r5, r3
 8017a52:	e738      	b.n	80178c6 <__kernel_rem_pio2+0x1b6>
 8017a54:	1acb      	subs	r3, r1, r3
 8017a56:	e7f7      	b.n	8017a48 <__kernel_rem_pio2+0x338>
 8017a58:	f108 32ff 	add.w	r2, r8, #4294967295
 8017a5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8017a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a66:	a90c      	add	r1, sp, #48	@ 0x30
 8017a68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017a6c:	e739      	b.n	80178e2 <__kernel_rem_pio2+0x1d2>
 8017a6e:	f108 32ff 	add.w	r2, r8, #4294967295
 8017a72:	ab0c      	add	r3, sp, #48	@ 0x30
 8017a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017a7c:	e7f3      	b.n	8017a66 <__kernel_rem_pio2+0x356>
 8017a7e:	a90c      	add	r1, sp, #48	@ 0x30
 8017a80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017a84:	3b01      	subs	r3, #1
 8017a86:	430a      	orrs	r2, r1
 8017a88:	e787      	b.n	801799a <__kernel_rem_pio2+0x28a>
 8017a8a:	3401      	adds	r4, #1
 8017a8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017a90:	2a00      	cmp	r2, #0
 8017a92:	d0fa      	beq.n	8017a8a <__kernel_rem_pio2+0x37a>
 8017a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017a9a:	eb0d 0503 	add.w	r5, sp, r3
 8017a9e:	9b06      	ldr	r3, [sp, #24]
 8017aa0:	aa20      	add	r2, sp, #128	@ 0x80
 8017aa2:	4443      	add	r3, r8
 8017aa4:	f108 0701 	add.w	r7, r8, #1
 8017aa8:	3d98      	subs	r5, #152	@ 0x98
 8017aaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8017aae:	4444      	add	r4, r8
 8017ab0:	42bc      	cmp	r4, r7
 8017ab2:	da04      	bge.n	8017abe <__kernel_rem_pio2+0x3ae>
 8017ab4:	46a0      	mov	r8, r4
 8017ab6:	e6a2      	b.n	80177fe <__kernel_rem_pio2+0xee>
 8017ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017aba:	2401      	movs	r4, #1
 8017abc:	e7e6      	b.n	8017a8c <__kernel_rem_pio2+0x37c>
 8017abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ac0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017ac4:	f7e8 fd06 	bl	80004d4 <__aeabi_i2d>
 8017ac8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8017d90 <__kernel_rem_pio2+0x680>
 8017acc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8017ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017ad8:	46b2      	mov	sl, r6
 8017ada:	f04f 0800 	mov.w	r8, #0
 8017ade:	9b05      	ldr	r3, [sp, #20]
 8017ae0:	4598      	cmp	r8, r3
 8017ae2:	dd05      	ble.n	8017af0 <__kernel_rem_pio2+0x3e0>
 8017ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ae8:	3701      	adds	r7, #1
 8017aea:	eca5 7b02 	vstmia	r5!, {d7}
 8017aee:	e7df      	b.n	8017ab0 <__kernel_rem_pio2+0x3a0>
 8017af0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8017af4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017af8:	f7e8 fd56 	bl	80005a8 <__aeabi_dmul>
 8017afc:	4602      	mov	r2, r0
 8017afe:	460b      	mov	r3, r1
 8017b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b04:	f7e8 fb9a 	bl	800023c <__adddf3>
 8017b08:	f108 0801 	add.w	r8, r8, #1
 8017b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017b10:	e7e5      	b.n	8017ade <__kernel_rem_pio2+0x3ce>
 8017b12:	f1cb 0000 	rsb	r0, fp, #0
 8017b16:	ec47 6b10 	vmov	d0, r6, r7
 8017b1a:	f000 fbc5 	bl	80182a8 <scalbn>
 8017b1e:	ec55 4b10 	vmov	r4, r5, d0
 8017b22:	4b9d      	ldr	r3, [pc, #628]	@ (8017d98 <__kernel_rem_pio2+0x688>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	4620      	mov	r0, r4
 8017b28:	4629      	mov	r1, r5
 8017b2a:	f7e8 ffc3 	bl	8000ab4 <__aeabi_dcmpge>
 8017b2e:	b300      	cbz	r0, 8017b72 <__kernel_rem_pio2+0x462>
 8017b30:	4b9a      	ldr	r3, [pc, #616]	@ (8017d9c <__kernel_rem_pio2+0x68c>)
 8017b32:	2200      	movs	r2, #0
 8017b34:	4620      	mov	r0, r4
 8017b36:	4629      	mov	r1, r5
 8017b38:	f7e8 fd36 	bl	80005a8 <__aeabi_dmul>
 8017b3c:	f7e8 ffce 	bl	8000adc <__aeabi_d2iz>
 8017b40:	4606      	mov	r6, r0
 8017b42:	f7e8 fcc7 	bl	80004d4 <__aeabi_i2d>
 8017b46:	4b94      	ldr	r3, [pc, #592]	@ (8017d98 <__kernel_rem_pio2+0x688>)
 8017b48:	2200      	movs	r2, #0
 8017b4a:	f7e8 fd2d 	bl	80005a8 <__aeabi_dmul>
 8017b4e:	460b      	mov	r3, r1
 8017b50:	4602      	mov	r2, r0
 8017b52:	4629      	mov	r1, r5
 8017b54:	4620      	mov	r0, r4
 8017b56:	f7e8 fb6f 	bl	8000238 <__aeabi_dsub>
 8017b5a:	f7e8 ffbf 	bl	8000adc <__aeabi_d2iz>
 8017b5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b60:	f10b 0b18 	add.w	fp, fp, #24
 8017b64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8017b68:	f108 0801 	add.w	r8, r8, #1
 8017b6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8017b70:	e722      	b.n	80179b8 <__kernel_rem_pio2+0x2a8>
 8017b72:	4620      	mov	r0, r4
 8017b74:	4629      	mov	r1, r5
 8017b76:	f7e8 ffb1 	bl	8000adc <__aeabi_d2iz>
 8017b7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8017b80:	e71a      	b.n	80179b8 <__kernel_rem_pio2+0x2a8>
 8017b82:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017b88:	f7e8 fca4 	bl	80004d4 <__aeabi_i2d>
 8017b8c:	4622      	mov	r2, r4
 8017b8e:	462b      	mov	r3, r5
 8017b90:	f7e8 fd0a 	bl	80005a8 <__aeabi_dmul>
 8017b94:	4652      	mov	r2, sl
 8017b96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8017b9a:	465b      	mov	r3, fp
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	f7e8 fd02 	bl	80005a8 <__aeabi_dmul>
 8017ba4:	3e01      	subs	r6, #1
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	460d      	mov	r5, r1
 8017baa:	e718      	b.n	80179de <__kernel_rem_pio2+0x2ce>
 8017bac:	9906      	ldr	r1, [sp, #24]
 8017bae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8017bb2:	9106      	str	r1, [sp, #24]
 8017bb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8017bb8:	f7e8 fcf6 	bl	80005a8 <__aeabi_dmul>
 8017bbc:	4602      	mov	r2, r0
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	4650      	mov	r0, sl
 8017bc2:	4659      	mov	r1, fp
 8017bc4:	f7e8 fb3a 	bl	800023c <__adddf3>
 8017bc8:	3601      	adds	r6, #1
 8017bca:	4682      	mov	sl, r0
 8017bcc:	468b      	mov	fp, r1
 8017bce:	9b00      	ldr	r3, [sp, #0]
 8017bd0:	429e      	cmp	r6, r3
 8017bd2:	dc01      	bgt.n	8017bd8 <__kernel_rem_pio2+0x4c8>
 8017bd4:	42b5      	cmp	r5, r6
 8017bd6:	dae9      	bge.n	8017bac <__kernel_rem_pio2+0x49c>
 8017bd8:	ab48      	add	r3, sp, #288	@ 0x120
 8017bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017bde:	e9c5 ab00 	strd	sl, fp, [r5]
 8017be2:	3c01      	subs	r4, #1
 8017be4:	e6ff      	b.n	80179e6 <__kernel_rem_pio2+0x2d6>
 8017be6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8017be8:	2b02      	cmp	r3, #2
 8017bea:	dc0b      	bgt.n	8017c04 <__kernel_rem_pio2+0x4f4>
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	dc39      	bgt.n	8017c64 <__kernel_rem_pio2+0x554>
 8017bf0:	d05d      	beq.n	8017cae <__kernel_rem_pio2+0x59e>
 8017bf2:	9b02      	ldr	r3, [sp, #8]
 8017bf4:	f003 0007 	and.w	r0, r3, #7
 8017bf8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8017bfc:	ecbd 8b02 	vpop	{d8}
 8017c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8017c06:	2b03      	cmp	r3, #3
 8017c08:	d1f3      	bne.n	8017bf2 <__kernel_rem_pio2+0x4e2>
 8017c0a:	9b05      	ldr	r3, [sp, #20]
 8017c0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017c10:	eb0d 0403 	add.w	r4, sp, r3
 8017c14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8017c18:	4625      	mov	r5, r4
 8017c1a:	46c2      	mov	sl, r8
 8017c1c:	f1ba 0f00 	cmp.w	sl, #0
 8017c20:	f1a5 0508 	sub.w	r5, r5, #8
 8017c24:	dc6b      	bgt.n	8017cfe <__kernel_rem_pio2+0x5ee>
 8017c26:	4645      	mov	r5, r8
 8017c28:	2d01      	cmp	r5, #1
 8017c2a:	f1a4 0408 	sub.w	r4, r4, #8
 8017c2e:	f300 8087 	bgt.w	8017d40 <__kernel_rem_pio2+0x630>
 8017c32:	9c05      	ldr	r4, [sp, #20]
 8017c34:	ab48      	add	r3, sp, #288	@ 0x120
 8017c36:	441c      	add	r4, r3
 8017c38:	2000      	movs	r0, #0
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	f1b8 0f01 	cmp.w	r8, #1
 8017c40:	f300 809c 	bgt.w	8017d7c <__kernel_rem_pio2+0x66c>
 8017c44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8017c48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8017c4c:	f1b9 0f00 	cmp.w	r9, #0
 8017c50:	f040 80a6 	bne.w	8017da0 <__kernel_rem_pio2+0x690>
 8017c54:	9b04      	ldr	r3, [sp, #16]
 8017c56:	e9c3 7800 	strd	r7, r8, [r3]
 8017c5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017c5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017c62:	e7c6      	b.n	8017bf2 <__kernel_rem_pio2+0x4e2>
 8017c64:	9d05      	ldr	r5, [sp, #20]
 8017c66:	ab48      	add	r3, sp, #288	@ 0x120
 8017c68:	441d      	add	r5, r3
 8017c6a:	4644      	mov	r4, r8
 8017c6c:	2000      	movs	r0, #0
 8017c6e:	2100      	movs	r1, #0
 8017c70:	2c00      	cmp	r4, #0
 8017c72:	da35      	bge.n	8017ce0 <__kernel_rem_pio2+0x5d0>
 8017c74:	f1b9 0f00 	cmp.w	r9, #0
 8017c78:	d038      	beq.n	8017cec <__kernel_rem_pio2+0x5dc>
 8017c7a:	4602      	mov	r2, r0
 8017c7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017c80:	9c04      	ldr	r4, [sp, #16]
 8017c82:	e9c4 2300 	strd	r2, r3, [r4]
 8017c86:	4602      	mov	r2, r0
 8017c88:	460b      	mov	r3, r1
 8017c8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8017c8e:	f7e8 fad3 	bl	8000238 <__aeabi_dsub>
 8017c92:	ad4a      	add	r5, sp, #296	@ 0x128
 8017c94:	2401      	movs	r4, #1
 8017c96:	45a0      	cmp	r8, r4
 8017c98:	da2b      	bge.n	8017cf2 <__kernel_rem_pio2+0x5e2>
 8017c9a:	f1b9 0f00 	cmp.w	r9, #0
 8017c9e:	d002      	beq.n	8017ca6 <__kernel_rem_pio2+0x596>
 8017ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	9b04      	ldr	r3, [sp, #16]
 8017ca8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017cac:	e7a1      	b.n	8017bf2 <__kernel_rem_pio2+0x4e2>
 8017cae:	9c05      	ldr	r4, [sp, #20]
 8017cb0:	ab48      	add	r3, sp, #288	@ 0x120
 8017cb2:	441c      	add	r4, r3
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	f1b8 0f00 	cmp.w	r8, #0
 8017cbc:	da09      	bge.n	8017cd2 <__kernel_rem_pio2+0x5c2>
 8017cbe:	f1b9 0f00 	cmp.w	r9, #0
 8017cc2:	d002      	beq.n	8017cca <__kernel_rem_pio2+0x5ba>
 8017cc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017cc8:	4619      	mov	r1, r3
 8017cca:	9b04      	ldr	r3, [sp, #16]
 8017ccc:	e9c3 0100 	strd	r0, r1, [r3]
 8017cd0:	e78f      	b.n	8017bf2 <__kernel_rem_pio2+0x4e2>
 8017cd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017cd6:	f7e8 fab1 	bl	800023c <__adddf3>
 8017cda:	f108 38ff 	add.w	r8, r8, #4294967295
 8017cde:	e7eb      	b.n	8017cb8 <__kernel_rem_pio2+0x5a8>
 8017ce0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8017ce4:	f7e8 faaa 	bl	800023c <__adddf3>
 8017ce8:	3c01      	subs	r4, #1
 8017cea:	e7c1      	b.n	8017c70 <__kernel_rem_pio2+0x560>
 8017cec:	4602      	mov	r2, r0
 8017cee:	460b      	mov	r3, r1
 8017cf0:	e7c6      	b.n	8017c80 <__kernel_rem_pio2+0x570>
 8017cf2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8017cf6:	f7e8 faa1 	bl	800023c <__adddf3>
 8017cfa:	3401      	adds	r4, #1
 8017cfc:	e7cb      	b.n	8017c96 <__kernel_rem_pio2+0x586>
 8017cfe:	ed95 7b00 	vldr	d7, [r5]
 8017d02:	ed8d 7b00 	vstr	d7, [sp]
 8017d06:	ed95 7b02 	vldr	d7, [r5, #8]
 8017d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d0e:	ec53 2b17 	vmov	r2, r3, d7
 8017d12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017d16:	f7e8 fa91 	bl	800023c <__adddf3>
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	4606      	mov	r6, r0
 8017d20:	460f      	mov	r7, r1
 8017d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d26:	f7e8 fa87 	bl	8000238 <__aeabi_dsub>
 8017d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017d2e:	f7e8 fa85 	bl	800023c <__adddf3>
 8017d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8017d3a:	e9c5 6700 	strd	r6, r7, [r5]
 8017d3e:	e76d      	b.n	8017c1c <__kernel_rem_pio2+0x50c>
 8017d40:	ed94 7b00 	vldr	d7, [r4]
 8017d44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8017d48:	ec51 0b17 	vmov	r0, r1, d7
 8017d4c:	4652      	mov	r2, sl
 8017d4e:	465b      	mov	r3, fp
 8017d50:	ed8d 7b00 	vstr	d7, [sp]
 8017d54:	f7e8 fa72 	bl	800023c <__adddf3>
 8017d58:	4602      	mov	r2, r0
 8017d5a:	460b      	mov	r3, r1
 8017d5c:	4606      	mov	r6, r0
 8017d5e:	460f      	mov	r7, r1
 8017d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d64:	f7e8 fa68 	bl	8000238 <__aeabi_dsub>
 8017d68:	4652      	mov	r2, sl
 8017d6a:	465b      	mov	r3, fp
 8017d6c:	f7e8 fa66 	bl	800023c <__adddf3>
 8017d70:	3d01      	subs	r5, #1
 8017d72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017d76:	e9c4 6700 	strd	r6, r7, [r4]
 8017d7a:	e755      	b.n	8017c28 <__kernel_rem_pio2+0x518>
 8017d7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017d80:	f7e8 fa5c 	bl	800023c <__adddf3>
 8017d84:	f108 38ff 	add.w	r8, r8, #4294967295
 8017d88:	e758      	b.n	8017c3c <__kernel_rem_pio2+0x52c>
 8017d8a:	bf00      	nop
 8017d8c:	f3af 8000 	nop.w
	...
 8017d98:	41700000 	.word	0x41700000
 8017d9c:	3e700000 	.word	0x3e700000
 8017da0:	9b04      	ldr	r3, [sp, #16]
 8017da2:	9a04      	ldr	r2, [sp, #16]
 8017da4:	601f      	str	r7, [r3, #0]
 8017da6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8017daa:	605c      	str	r4, [r3, #4]
 8017dac:	609d      	str	r5, [r3, #8]
 8017dae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017db2:	60d3      	str	r3, [r2, #12]
 8017db4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017db8:	6110      	str	r0, [r2, #16]
 8017dba:	6153      	str	r3, [r2, #20]
 8017dbc:	e719      	b.n	8017bf2 <__kernel_rem_pio2+0x4e2>
 8017dbe:	bf00      	nop

08017dc0 <__kernel_rem_pio2f>:
 8017dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc4:	ed2d 8b04 	vpush	{d8-d9}
 8017dc8:	b0d9      	sub	sp, #356	@ 0x164
 8017dca:	4690      	mov	r8, r2
 8017dcc:	9001      	str	r0, [sp, #4]
 8017dce:	4ab9      	ldr	r2, [pc, #740]	@ (80180b4 <__kernel_rem_pio2f+0x2f4>)
 8017dd0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8017dd2:	f118 0f04 	cmn.w	r8, #4
 8017dd6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8017dda:	460f      	mov	r7, r1
 8017ddc:	f103 3bff 	add.w	fp, r3, #4294967295
 8017de0:	db27      	blt.n	8017e32 <__kernel_rem_pio2f+0x72>
 8017de2:	f1b8 0203 	subs.w	r2, r8, #3
 8017de6:	bf48      	it	mi
 8017de8:	f108 0204 	addmi.w	r2, r8, #4
 8017dec:	10d2      	asrs	r2, r2, #3
 8017dee:	1c55      	adds	r5, r2, #1
 8017df0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017df2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 8017df6:	00e8      	lsls	r0, r5, #3
 8017df8:	eba2 060b 	sub.w	r6, r2, fp
 8017dfc:	9002      	str	r0, [sp, #8]
 8017dfe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8017e02:	eb0a 0c0b 	add.w	ip, sl, fp
 8017e06:	ac1c      	add	r4, sp, #112	@ 0x70
 8017e08:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8017e0c:	2000      	movs	r0, #0
 8017e0e:	4560      	cmp	r0, ip
 8017e10:	dd11      	ble.n	8017e36 <__kernel_rem_pio2f+0x76>
 8017e12:	a91c      	add	r1, sp, #112	@ 0x70
 8017e14:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017e18:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8017e1c:	f04f 0c00 	mov.w	ip, #0
 8017e20:	45d4      	cmp	ip, sl
 8017e22:	dc27      	bgt.n	8017e74 <__kernel_rem_pio2f+0xb4>
 8017e24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017e28:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	2400      	movs	r4, #0
 8017e30:	e016      	b.n	8017e60 <__kernel_rem_pio2f+0xa0>
 8017e32:	2200      	movs	r2, #0
 8017e34:	e7db      	b.n	8017dee <__kernel_rem_pio2f+0x2e>
 8017e36:	42c6      	cmn	r6, r0
 8017e38:	bf5d      	ittte	pl
 8017e3a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8017e3e:	ee07 1a90 	vmovpl	s15, r1
 8017e42:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017e46:	eef0 7a47 	vmovmi.f32	s15, s14
 8017e4a:	ece4 7a01 	vstmia	r4!, {s15}
 8017e4e:	3001      	adds	r0, #1
 8017e50:	e7dd      	b.n	8017e0e <__kernel_rem_pio2f+0x4e>
 8017e52:	ecfe 6a01 	vldmia	lr!, {s13}
 8017e56:	ed96 7a00 	vldr	s14, [r6]
 8017e5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e5e:	3401      	adds	r4, #1
 8017e60:	455c      	cmp	r4, fp
 8017e62:	f1a6 0604 	sub.w	r6, r6, #4
 8017e66:	ddf4      	ble.n	8017e52 <__kernel_rem_pio2f+0x92>
 8017e68:	ece9 7a01 	vstmia	r9!, {s15}
 8017e6c:	f10c 0c01 	add.w	ip, ip, #1
 8017e70:	3004      	adds	r0, #4
 8017e72:	e7d5      	b.n	8017e20 <__kernel_rem_pio2f+0x60>
 8017e74:	a908      	add	r1, sp, #32
 8017e76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017e7a:	9104      	str	r1, [sp, #16]
 8017e7c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017e7e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80180c0 <__kernel_rem_pio2f+0x300>
 8017e82:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80180bc <__kernel_rem_pio2f+0x2fc>
 8017e86:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017e8a:	9203      	str	r2, [sp, #12]
 8017e8c:	4654      	mov	r4, sl
 8017e8e:	00a2      	lsls	r2, r4, #2
 8017e90:	9205      	str	r2, [sp, #20]
 8017e92:	aa58      	add	r2, sp, #352	@ 0x160
 8017e94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017e98:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017e9c:	a944      	add	r1, sp, #272	@ 0x110
 8017e9e:	aa08      	add	r2, sp, #32
 8017ea0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8017ea4:	4694      	mov	ip, r2
 8017ea6:	4626      	mov	r6, r4
 8017ea8:	2e00      	cmp	r6, #0
 8017eaa:	f1a0 0004 	sub.w	r0, r0, #4
 8017eae:	dc4c      	bgt.n	8017f4a <__kernel_rem_pio2f+0x18a>
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017eb6:	f000 fa75 	bl	80183a4 <scalbnf>
 8017eba:	eeb0 8a40 	vmov.f32	s16, s0
 8017ebe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8017ec2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017ec6:	f000 fb4f 	bl	8018568 <floorf>
 8017eca:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8017ece:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017ed2:	2d00      	cmp	r5, #0
 8017ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017ed8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017edc:	ee17 9a90 	vmov	r9, s15
 8017ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ee4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017ee8:	dd41      	ble.n	8017f6e <__kernel_rem_pio2f+0x1ae>
 8017eea:	f104 3cff 	add.w	ip, r4, #4294967295
 8017eee:	a908      	add	r1, sp, #32
 8017ef0:	f1c5 0e08 	rsb	lr, r5, #8
 8017ef4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8017ef8:	fa46 f00e 	asr.w	r0, r6, lr
 8017efc:	4481      	add	r9, r0
 8017efe:	fa00 f00e 	lsl.w	r0, r0, lr
 8017f02:	1a36      	subs	r6, r6, r0
 8017f04:	f1c5 0007 	rsb	r0, r5, #7
 8017f08:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8017f0c:	4106      	asrs	r6, r0
 8017f0e:	2e00      	cmp	r6, #0
 8017f10:	dd3c      	ble.n	8017f8c <__kernel_rem_pio2f+0x1cc>
 8017f12:	f04f 0e00 	mov.w	lr, #0
 8017f16:	f109 0901 	add.w	r9, r9, #1
 8017f1a:	4670      	mov	r0, lr
 8017f1c:	4574      	cmp	r4, lr
 8017f1e:	dc68      	bgt.n	8017ff2 <__kernel_rem_pio2f+0x232>
 8017f20:	2d00      	cmp	r5, #0
 8017f22:	dd03      	ble.n	8017f2c <__kernel_rem_pio2f+0x16c>
 8017f24:	2d01      	cmp	r5, #1
 8017f26:	d074      	beq.n	8018012 <__kernel_rem_pio2f+0x252>
 8017f28:	2d02      	cmp	r5, #2
 8017f2a:	d07d      	beq.n	8018028 <__kernel_rem_pio2f+0x268>
 8017f2c:	2e02      	cmp	r6, #2
 8017f2e:	d12d      	bne.n	8017f8c <__kernel_rem_pio2f+0x1cc>
 8017f30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017f34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017f38:	b340      	cbz	r0, 8017f8c <__kernel_rem_pio2f+0x1cc>
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	9306      	str	r3, [sp, #24]
 8017f3e:	f000 fa31 	bl	80183a4 <scalbnf>
 8017f42:	9b06      	ldr	r3, [sp, #24]
 8017f44:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017f48:	e020      	b.n	8017f8c <__kernel_rem_pio2f+0x1cc>
 8017f4a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017f4e:	3e01      	subs	r6, #1
 8017f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f58:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017f5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f60:	ecac 0a01 	vstmia	ip!, {s0}
 8017f64:	ed90 0a00 	vldr	s0, [r0]
 8017f68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017f6c:	e79c      	b.n	8017ea8 <__kernel_rem_pio2f+0xe8>
 8017f6e:	d105      	bne.n	8017f7c <__kernel_rem_pio2f+0x1bc>
 8017f70:	1e60      	subs	r0, r4, #1
 8017f72:	a908      	add	r1, sp, #32
 8017f74:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8017f78:	11f6      	asrs	r6, r6, #7
 8017f7a:	e7c8      	b.n	8017f0e <__kernel_rem_pio2f+0x14e>
 8017f7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017f80:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f88:	da31      	bge.n	8017fee <__kernel_rem_pio2f+0x22e>
 8017f8a:	2600      	movs	r6, #0
 8017f8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f94:	f040 8098 	bne.w	80180c8 <__kernel_rem_pio2f+0x308>
 8017f98:	1e60      	subs	r0, r4, #1
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	4550      	cmp	r0, sl
 8017f9e:	da4b      	bge.n	8018038 <__kernel_rem_pio2f+0x278>
 8017fa0:	2a00      	cmp	r2, #0
 8017fa2:	d065      	beq.n	8018070 <__kernel_rem_pio2f+0x2b0>
 8017fa4:	3c01      	subs	r4, #1
 8017fa6:	ab08      	add	r3, sp, #32
 8017fa8:	3d08      	subs	r5, #8
 8017faa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d0f8      	beq.n	8017fa4 <__kernel_rem_pio2f+0x1e4>
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017fb8:	f000 f9f4 	bl	80183a4 <scalbnf>
 8017fbc:	1c63      	adds	r3, r4, #1
 8017fbe:	aa44      	add	r2, sp, #272	@ 0x110
 8017fc0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80180c0 <__kernel_rem_pio2f+0x300>
 8017fc4:	0099      	lsls	r1, r3, #2
 8017fc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017fca:	4623      	mov	r3, r4
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	f280 80a9 	bge.w	8018124 <__kernel_rem_pio2f+0x364>
 8017fd2:	4623      	mov	r3, r4
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f2c0 80c7 	blt.w	8018168 <__kernel_rem_pio2f+0x3a8>
 8017fda:	aa44      	add	r2, sp, #272	@ 0x110
 8017fdc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017fe0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80180b8 <__kernel_rem_pio2f+0x2f8>
 8017fe4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 8017fe8:	2000      	movs	r0, #0
 8017fea:	1ae2      	subs	r2, r4, r3
 8017fec:	e0b1      	b.n	8018152 <__kernel_rem_pio2f+0x392>
 8017fee:	2602      	movs	r6, #2
 8017ff0:	e78f      	b.n	8017f12 <__kernel_rem_pio2f+0x152>
 8017ff2:	f852 1b04 	ldr.w	r1, [r2], #4
 8017ff6:	b948      	cbnz	r0, 801800c <__kernel_rem_pio2f+0x24c>
 8017ff8:	b121      	cbz	r1, 8018004 <__kernel_rem_pio2f+0x244>
 8017ffa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8017ffe:	f842 1c04 	str.w	r1, [r2, #-4]
 8018002:	2101      	movs	r1, #1
 8018004:	f10e 0e01 	add.w	lr, lr, #1
 8018008:	4608      	mov	r0, r1
 801800a:	e787      	b.n	8017f1c <__kernel_rem_pio2f+0x15c>
 801800c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018010:	e7f5      	b.n	8017ffe <__kernel_rem_pio2f+0x23e>
 8018012:	f104 3cff 	add.w	ip, r4, #4294967295
 8018016:	aa08      	add	r2, sp, #32
 8018018:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801801c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018020:	a908      	add	r1, sp, #32
 8018022:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8018026:	e781      	b.n	8017f2c <__kernel_rem_pio2f+0x16c>
 8018028:	f104 3cff 	add.w	ip, r4, #4294967295
 801802c:	aa08      	add	r2, sp, #32
 801802e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018032:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018036:	e7f3      	b.n	8018020 <__kernel_rem_pio2f+0x260>
 8018038:	a908      	add	r1, sp, #32
 801803a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801803e:	3801      	subs	r0, #1
 8018040:	430a      	orrs	r2, r1
 8018042:	e7ab      	b.n	8017f9c <__kernel_rem_pio2f+0x1dc>
 8018044:	3201      	adds	r2, #1
 8018046:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801804a:	2e00      	cmp	r6, #0
 801804c:	d0fa      	beq.n	8018044 <__kernel_rem_pio2f+0x284>
 801804e:	9905      	ldr	r1, [sp, #20]
 8018050:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8018054:	eb0d 0001 	add.w	r0, sp, r1
 8018058:	18e6      	adds	r6, r4, r3
 801805a:	a91c      	add	r1, sp, #112	@ 0x70
 801805c:	f104 0c01 	add.w	ip, r4, #1
 8018060:	384c      	subs	r0, #76	@ 0x4c
 8018062:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8018066:	4422      	add	r2, r4
 8018068:	4562      	cmp	r2, ip
 801806a:	da04      	bge.n	8018076 <__kernel_rem_pio2f+0x2b6>
 801806c:	4614      	mov	r4, r2
 801806e:	e70e      	b.n	8017e8e <__kernel_rem_pio2f+0xce>
 8018070:	9804      	ldr	r0, [sp, #16]
 8018072:	2201      	movs	r2, #1
 8018074:	e7e7      	b.n	8018046 <__kernel_rem_pio2f+0x286>
 8018076:	9903      	ldr	r1, [sp, #12]
 8018078:	f8dd e004 	ldr.w	lr, [sp, #4]
 801807c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018080:	9105      	str	r1, [sp, #20]
 8018082:	ee07 1a90 	vmov	s15, r1
 8018086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801808a:	2400      	movs	r4, #0
 801808c:	ece6 7a01 	vstmia	r6!, {s15}
 8018090:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 8018094:	46b1      	mov	r9, r6
 8018096:	455c      	cmp	r4, fp
 8018098:	dd04      	ble.n	80180a4 <__kernel_rem_pio2f+0x2e4>
 801809a:	ece0 7a01 	vstmia	r0!, {s15}
 801809e:	f10c 0c01 	add.w	ip, ip, #1
 80180a2:	e7e1      	b.n	8018068 <__kernel_rem_pio2f+0x2a8>
 80180a4:	ecfe 6a01 	vldmia	lr!, {s13}
 80180a8:	ed39 7a01 	vldmdb	r9!, {s14}
 80180ac:	3401      	adds	r4, #1
 80180ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80180b2:	e7f0      	b.n	8018096 <__kernel_rem_pio2f+0x2d6>
 80180b4:	0801aaf4 	.word	0x0801aaf4
 80180b8:	0801aac8 	.word	0x0801aac8
 80180bc:	43800000 	.word	0x43800000
 80180c0:	3b800000 	.word	0x3b800000
 80180c4:	00000000 	.word	0x00000000
 80180c8:	9b02      	ldr	r3, [sp, #8]
 80180ca:	eeb0 0a48 	vmov.f32	s0, s16
 80180ce:	eba3 0008 	sub.w	r0, r3, r8
 80180d2:	f000 f967 	bl	80183a4 <scalbnf>
 80180d6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80180bc <__kernel_rem_pio2f+0x2fc>
 80180da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80180de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e2:	db19      	blt.n	8018118 <__kernel_rem_pio2f+0x358>
 80180e4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80180c0 <__kernel_rem_pio2f+0x300>
 80180e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80180ec:	aa08      	add	r2, sp, #32
 80180ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180f2:	3508      	adds	r5, #8
 80180f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80180fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018100:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018104:	ee10 3a10 	vmov	r3, s0
 8018108:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801810c:	ee17 3a90 	vmov	r3, s15
 8018110:	3401      	adds	r4, #1
 8018112:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018116:	e74c      	b.n	8017fb2 <__kernel_rem_pio2f+0x1f2>
 8018118:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801811c:	aa08      	add	r2, sp, #32
 801811e:	ee10 3a10 	vmov	r3, s0
 8018122:	e7f6      	b.n	8018112 <__kernel_rem_pio2f+0x352>
 8018124:	a808      	add	r0, sp, #32
 8018126:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801812a:	9001      	str	r0, [sp, #4]
 801812c:	ee07 0a90 	vmov	s15, r0
 8018130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018134:	3b01      	subs	r3, #1
 8018136:	ee67 7a80 	vmul.f32	s15, s15, s0
 801813a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801813e:	ed62 7a01 	vstmdb	r2!, {s15}
 8018142:	e743      	b.n	8017fcc <__kernel_rem_pio2f+0x20c>
 8018144:	ecfc 6a01 	vldmia	ip!, {s13}
 8018148:	ecb5 7a01 	vldmia	r5!, {s14}
 801814c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018150:	3001      	adds	r0, #1
 8018152:	4550      	cmp	r0, sl
 8018154:	dc01      	bgt.n	801815a <__kernel_rem_pio2f+0x39a>
 8018156:	4282      	cmp	r2, r0
 8018158:	daf4      	bge.n	8018144 <__kernel_rem_pio2f+0x384>
 801815a:	a858      	add	r0, sp, #352	@ 0x160
 801815c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018160:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8018164:	3b01      	subs	r3, #1
 8018166:	e735      	b.n	8017fd4 <__kernel_rem_pio2f+0x214>
 8018168:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801816a:	2b02      	cmp	r3, #2
 801816c:	dc09      	bgt.n	8018182 <__kernel_rem_pio2f+0x3c2>
 801816e:	2b00      	cmp	r3, #0
 8018170:	dc2b      	bgt.n	80181ca <__kernel_rem_pio2f+0x40a>
 8018172:	d044      	beq.n	80181fe <__kernel_rem_pio2f+0x43e>
 8018174:	f009 0007 	and.w	r0, r9, #7
 8018178:	b059      	add	sp, #356	@ 0x164
 801817a:	ecbd 8b04 	vpop	{d8-d9}
 801817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018182:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018184:	2b03      	cmp	r3, #3
 8018186:	d1f5      	bne.n	8018174 <__kernel_rem_pio2f+0x3b4>
 8018188:	aa30      	add	r2, sp, #192	@ 0xc0
 801818a:	1f0b      	subs	r3, r1, #4
 801818c:	4413      	add	r3, r2
 801818e:	461a      	mov	r2, r3
 8018190:	4620      	mov	r0, r4
 8018192:	2800      	cmp	r0, #0
 8018194:	f1a2 0204 	sub.w	r2, r2, #4
 8018198:	dc52      	bgt.n	8018240 <__kernel_rem_pio2f+0x480>
 801819a:	4622      	mov	r2, r4
 801819c:	2a01      	cmp	r2, #1
 801819e:	f1a3 0304 	sub.w	r3, r3, #4
 80181a2:	dc5d      	bgt.n	8018260 <__kernel_rem_pio2f+0x4a0>
 80181a4:	ab30      	add	r3, sp, #192	@ 0xc0
 80181a6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 80181aa:	440b      	add	r3, r1
 80181ac:	2c01      	cmp	r4, #1
 80181ae:	dc67      	bgt.n	8018280 <__kernel_rem_pio2f+0x4c0>
 80181b0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80181b4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80181b8:	2e00      	cmp	r6, #0
 80181ba:	d167      	bne.n	801828c <__kernel_rem_pio2f+0x4cc>
 80181bc:	edc7 6a00 	vstr	s13, [r7]
 80181c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80181c4:	edc7 7a02 	vstr	s15, [r7, #8]
 80181c8:	e7d4      	b.n	8018174 <__kernel_rem_pio2f+0x3b4>
 80181ca:	ab30      	add	r3, sp, #192	@ 0xc0
 80181cc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 80181d0:	440b      	add	r3, r1
 80181d2:	4622      	mov	r2, r4
 80181d4:	2a00      	cmp	r2, #0
 80181d6:	da24      	bge.n	8018222 <__kernel_rem_pio2f+0x462>
 80181d8:	b34e      	cbz	r6, 801822e <__kernel_rem_pio2f+0x46e>
 80181da:	eef1 7a47 	vneg.f32	s15, s14
 80181de:	edc7 7a00 	vstr	s15, [r7]
 80181e2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80181e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181ea:	aa31      	add	r2, sp, #196	@ 0xc4
 80181ec:	2301      	movs	r3, #1
 80181ee:	429c      	cmp	r4, r3
 80181f0:	da20      	bge.n	8018234 <__kernel_rem_pio2f+0x474>
 80181f2:	b10e      	cbz	r6, 80181f8 <__kernel_rem_pio2f+0x438>
 80181f4:	eef1 7a67 	vneg.f32	s15, s15
 80181f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80181fc:	e7ba      	b.n	8018174 <__kernel_rem_pio2f+0x3b4>
 80181fe:	ab30      	add	r3, sp, #192	@ 0xc0
 8018200:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80180c4 <__kernel_rem_pio2f+0x304>
 8018204:	440b      	add	r3, r1
 8018206:	2c00      	cmp	r4, #0
 8018208:	da05      	bge.n	8018216 <__kernel_rem_pio2f+0x456>
 801820a:	b10e      	cbz	r6, 8018210 <__kernel_rem_pio2f+0x450>
 801820c:	eef1 7a67 	vneg.f32	s15, s15
 8018210:	edc7 7a00 	vstr	s15, [r7]
 8018214:	e7ae      	b.n	8018174 <__kernel_rem_pio2f+0x3b4>
 8018216:	ed33 7a01 	vldmdb	r3!, {s14}
 801821a:	3c01      	subs	r4, #1
 801821c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018220:	e7f1      	b.n	8018206 <__kernel_rem_pio2f+0x446>
 8018222:	ed73 7a01 	vldmdb	r3!, {s15}
 8018226:	3a01      	subs	r2, #1
 8018228:	ee37 7a27 	vadd.f32	s14, s14, s15
 801822c:	e7d2      	b.n	80181d4 <__kernel_rem_pio2f+0x414>
 801822e:	eef0 7a47 	vmov.f32	s15, s14
 8018232:	e7d4      	b.n	80181de <__kernel_rem_pio2f+0x41e>
 8018234:	ecb2 7a01 	vldmia	r2!, {s14}
 8018238:	3301      	adds	r3, #1
 801823a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801823e:	e7d6      	b.n	80181ee <__kernel_rem_pio2f+0x42e>
 8018240:	edd2 7a00 	vldr	s15, [r2]
 8018244:	edd2 6a01 	vldr	s13, [r2, #4]
 8018248:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801824c:	3801      	subs	r0, #1
 801824e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018252:	ed82 7a00 	vstr	s14, [r2]
 8018256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801825a:	edc2 7a01 	vstr	s15, [r2, #4]
 801825e:	e798      	b.n	8018192 <__kernel_rem_pio2f+0x3d2>
 8018260:	edd3 7a00 	vldr	s15, [r3]
 8018264:	edd3 6a01 	vldr	s13, [r3, #4]
 8018268:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801826c:	3a01      	subs	r2, #1
 801826e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018272:	ed83 7a00 	vstr	s14, [r3]
 8018276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801827a:	edc3 7a01 	vstr	s15, [r3, #4]
 801827e:	e78d      	b.n	801819c <__kernel_rem_pio2f+0x3dc>
 8018280:	ed33 7a01 	vldmdb	r3!, {s14}
 8018284:	3c01      	subs	r4, #1
 8018286:	ee77 7a87 	vadd.f32	s15, s15, s14
 801828a:	e78f      	b.n	80181ac <__kernel_rem_pio2f+0x3ec>
 801828c:	eef1 6a66 	vneg.f32	s13, s13
 8018290:	eeb1 7a47 	vneg.f32	s14, s14
 8018294:	edc7 6a00 	vstr	s13, [r7]
 8018298:	ed87 7a01 	vstr	s14, [r7, #4]
 801829c:	eef1 7a67 	vneg.f32	s15, s15
 80182a0:	e790      	b.n	80181c4 <__kernel_rem_pio2f+0x404>
 80182a2:	bf00      	nop
 80182a4:	0000      	movs	r0, r0
	...

080182a8 <scalbn>:
 80182a8:	b570      	push	{r4, r5, r6, lr}
 80182aa:	ec55 4b10 	vmov	r4, r5, d0
 80182ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80182b2:	4606      	mov	r6, r0
 80182b4:	462b      	mov	r3, r5
 80182b6:	b991      	cbnz	r1, 80182de <scalbn+0x36>
 80182b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80182bc:	4323      	orrs	r3, r4
 80182be:	d03d      	beq.n	801833c <scalbn+0x94>
 80182c0:	4b35      	ldr	r3, [pc, #212]	@ (8018398 <scalbn+0xf0>)
 80182c2:	4620      	mov	r0, r4
 80182c4:	4629      	mov	r1, r5
 80182c6:	2200      	movs	r2, #0
 80182c8:	f7e8 f96e 	bl	80005a8 <__aeabi_dmul>
 80182cc:	4b33      	ldr	r3, [pc, #204]	@ (801839c <scalbn+0xf4>)
 80182ce:	429e      	cmp	r6, r3
 80182d0:	4604      	mov	r4, r0
 80182d2:	460d      	mov	r5, r1
 80182d4:	da0f      	bge.n	80182f6 <scalbn+0x4e>
 80182d6:	a328      	add	r3, pc, #160	@ (adr r3, 8018378 <scalbn+0xd0>)
 80182d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182dc:	e01e      	b.n	801831c <scalbn+0x74>
 80182de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80182e2:	4291      	cmp	r1, r2
 80182e4:	d10b      	bne.n	80182fe <scalbn+0x56>
 80182e6:	4622      	mov	r2, r4
 80182e8:	4620      	mov	r0, r4
 80182ea:	4629      	mov	r1, r5
 80182ec:	f7e7 ffa6 	bl	800023c <__adddf3>
 80182f0:	4604      	mov	r4, r0
 80182f2:	460d      	mov	r5, r1
 80182f4:	e022      	b.n	801833c <scalbn+0x94>
 80182f6:	460b      	mov	r3, r1
 80182f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80182fc:	3936      	subs	r1, #54	@ 0x36
 80182fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018302:	4296      	cmp	r6, r2
 8018304:	dd0d      	ble.n	8018322 <scalbn+0x7a>
 8018306:	2d00      	cmp	r5, #0
 8018308:	a11d      	add	r1, pc, #116	@ (adr r1, 8018380 <scalbn+0xd8>)
 801830a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801830e:	da02      	bge.n	8018316 <scalbn+0x6e>
 8018310:	a11d      	add	r1, pc, #116	@ (adr r1, 8018388 <scalbn+0xe0>)
 8018312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018316:	a31a      	add	r3, pc, #104	@ (adr r3, 8018380 <scalbn+0xd8>)
 8018318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831c:	f7e8 f944 	bl	80005a8 <__aeabi_dmul>
 8018320:	e7e6      	b.n	80182f0 <scalbn+0x48>
 8018322:	1872      	adds	r2, r6, r1
 8018324:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018328:	428a      	cmp	r2, r1
 801832a:	dcec      	bgt.n	8018306 <scalbn+0x5e>
 801832c:	2a00      	cmp	r2, #0
 801832e:	dd08      	ble.n	8018342 <scalbn+0x9a>
 8018330:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018334:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018338:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801833c:	ec45 4b10 	vmov	d0, r4, r5
 8018340:	bd70      	pop	{r4, r5, r6, pc}
 8018342:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018346:	da08      	bge.n	801835a <scalbn+0xb2>
 8018348:	2d00      	cmp	r5, #0
 801834a:	a10b      	add	r1, pc, #44	@ (adr r1, 8018378 <scalbn+0xd0>)
 801834c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018350:	dac1      	bge.n	80182d6 <scalbn+0x2e>
 8018352:	a10f      	add	r1, pc, #60	@ (adr r1, 8018390 <scalbn+0xe8>)
 8018354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018358:	e7bd      	b.n	80182d6 <scalbn+0x2e>
 801835a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801835e:	3236      	adds	r2, #54	@ 0x36
 8018360:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018364:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018368:	4620      	mov	r0, r4
 801836a:	4b0d      	ldr	r3, [pc, #52]	@ (80183a0 <scalbn+0xf8>)
 801836c:	4629      	mov	r1, r5
 801836e:	2200      	movs	r2, #0
 8018370:	e7d4      	b.n	801831c <scalbn+0x74>
 8018372:	bf00      	nop
 8018374:	f3af 8000 	nop.w
 8018378:	c2f8f359 	.word	0xc2f8f359
 801837c:	01a56e1f 	.word	0x01a56e1f
 8018380:	8800759c 	.word	0x8800759c
 8018384:	7e37e43c 	.word	0x7e37e43c
 8018388:	8800759c 	.word	0x8800759c
 801838c:	fe37e43c 	.word	0xfe37e43c
 8018390:	c2f8f359 	.word	0xc2f8f359
 8018394:	81a56e1f 	.word	0x81a56e1f
 8018398:	43500000 	.word	0x43500000
 801839c:	ffff3cb0 	.word	0xffff3cb0
 80183a0:	3c900000 	.word	0x3c900000

080183a4 <scalbnf>:
 80183a4:	ee10 3a10 	vmov	r3, s0
 80183a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80183ac:	d02b      	beq.n	8018406 <scalbnf+0x62>
 80183ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80183b2:	d302      	bcc.n	80183ba <scalbnf+0x16>
 80183b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80183b8:	4770      	bx	lr
 80183ba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80183be:	d123      	bne.n	8018408 <scalbnf+0x64>
 80183c0:	4b24      	ldr	r3, [pc, #144]	@ (8018454 <scalbnf+0xb0>)
 80183c2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018458 <scalbnf+0xb4>
 80183c6:	4298      	cmp	r0, r3
 80183c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80183cc:	db17      	blt.n	80183fe <scalbnf+0x5a>
 80183ce:	ee10 3a10 	vmov	r3, s0
 80183d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80183d6:	3a19      	subs	r2, #25
 80183d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80183dc:	4288      	cmp	r0, r1
 80183de:	dd15      	ble.n	801840c <scalbnf+0x68>
 80183e0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801845c <scalbnf+0xb8>
 80183e4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018460 <scalbnf+0xbc>
 80183e8:	ee10 3a10 	vmov	r3, s0
 80183ec:	eeb0 7a67 	vmov.f32	s14, s15
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	bfb8      	it	lt
 80183f4:	eef0 7a66 	vmovlt.f32	s15, s13
 80183f8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80183fc:	4770      	bx	lr
 80183fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018464 <scalbnf+0xc0>
 8018402:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018406:	4770      	bx	lr
 8018408:	0dd2      	lsrs	r2, r2, #23
 801840a:	e7e5      	b.n	80183d8 <scalbnf+0x34>
 801840c:	4410      	add	r0, r2
 801840e:	28fe      	cmp	r0, #254	@ 0xfe
 8018410:	dce6      	bgt.n	80183e0 <scalbnf+0x3c>
 8018412:	2800      	cmp	r0, #0
 8018414:	dd06      	ble.n	8018424 <scalbnf+0x80>
 8018416:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801841a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801841e:	ee00 3a10 	vmov	s0, r3
 8018422:	4770      	bx	lr
 8018424:	f110 0f16 	cmn.w	r0, #22
 8018428:	da09      	bge.n	801843e <scalbnf+0x9a>
 801842a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018464 <scalbnf+0xc0>
 801842e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018468 <scalbnf+0xc4>
 8018432:	ee10 3a10 	vmov	r3, s0
 8018436:	eeb0 7a67 	vmov.f32	s14, s15
 801843a:	2b00      	cmp	r3, #0
 801843c:	e7d9      	b.n	80183f2 <scalbnf+0x4e>
 801843e:	3019      	adds	r0, #25
 8018440:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018444:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018448:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801846c <scalbnf+0xc8>
 801844c:	ee07 3a90 	vmov	s15, r3
 8018450:	e7d7      	b.n	8018402 <scalbnf+0x5e>
 8018452:	bf00      	nop
 8018454:	ffff3cb0 	.word	0xffff3cb0
 8018458:	4c000000 	.word	0x4c000000
 801845c:	7149f2ca 	.word	0x7149f2ca
 8018460:	f149f2ca 	.word	0xf149f2ca
 8018464:	0da24260 	.word	0x0da24260
 8018468:	8da24260 	.word	0x8da24260
 801846c:	33000000 	.word	0x33000000

08018470 <floor>:
 8018470:	ec51 0b10 	vmov	r0, r1, d0
 8018474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8018480:	2e13      	cmp	r6, #19
 8018482:	460c      	mov	r4, r1
 8018484:	4605      	mov	r5, r0
 8018486:	4680      	mov	r8, r0
 8018488:	dc34      	bgt.n	80184f4 <floor+0x84>
 801848a:	2e00      	cmp	r6, #0
 801848c:	da17      	bge.n	80184be <floor+0x4e>
 801848e:	a332      	add	r3, pc, #200	@ (adr r3, 8018558 <floor+0xe8>)
 8018490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018494:	f7e7 fed2 	bl	800023c <__adddf3>
 8018498:	2200      	movs	r2, #0
 801849a:	2300      	movs	r3, #0
 801849c:	f7e8 fb14 	bl	8000ac8 <__aeabi_dcmpgt>
 80184a0:	b150      	cbz	r0, 80184b8 <floor+0x48>
 80184a2:	2c00      	cmp	r4, #0
 80184a4:	da55      	bge.n	8018552 <floor+0xe2>
 80184a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80184aa:	432c      	orrs	r4, r5
 80184ac:	2500      	movs	r5, #0
 80184ae:	42ac      	cmp	r4, r5
 80184b0:	4c2b      	ldr	r4, [pc, #172]	@ (8018560 <floor+0xf0>)
 80184b2:	bf08      	it	eq
 80184b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80184b8:	4621      	mov	r1, r4
 80184ba:	4628      	mov	r0, r5
 80184bc:	e023      	b.n	8018506 <floor+0x96>
 80184be:	4f29      	ldr	r7, [pc, #164]	@ (8018564 <floor+0xf4>)
 80184c0:	4137      	asrs	r7, r6
 80184c2:	ea01 0307 	and.w	r3, r1, r7
 80184c6:	4303      	orrs	r3, r0
 80184c8:	d01d      	beq.n	8018506 <floor+0x96>
 80184ca:	a323      	add	r3, pc, #140	@ (adr r3, 8018558 <floor+0xe8>)
 80184cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d0:	f7e7 feb4 	bl	800023c <__adddf3>
 80184d4:	2200      	movs	r2, #0
 80184d6:	2300      	movs	r3, #0
 80184d8:	f7e8 faf6 	bl	8000ac8 <__aeabi_dcmpgt>
 80184dc:	2800      	cmp	r0, #0
 80184de:	d0eb      	beq.n	80184b8 <floor+0x48>
 80184e0:	2c00      	cmp	r4, #0
 80184e2:	bfbe      	ittt	lt
 80184e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80184e8:	4133      	asrlt	r3, r6
 80184ea:	18e4      	addlt	r4, r4, r3
 80184ec:	ea24 0407 	bic.w	r4, r4, r7
 80184f0:	2500      	movs	r5, #0
 80184f2:	e7e1      	b.n	80184b8 <floor+0x48>
 80184f4:	2e33      	cmp	r6, #51	@ 0x33
 80184f6:	dd0a      	ble.n	801850e <floor+0x9e>
 80184f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80184fc:	d103      	bne.n	8018506 <floor+0x96>
 80184fe:	4602      	mov	r2, r0
 8018500:	460b      	mov	r3, r1
 8018502:	f7e7 fe9b 	bl	800023c <__adddf3>
 8018506:	ec41 0b10 	vmov	d0, r0, r1
 801850a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801850e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8018512:	f04f 37ff 	mov.w	r7, #4294967295
 8018516:	40df      	lsrs	r7, r3
 8018518:	4207      	tst	r7, r0
 801851a:	d0f4      	beq.n	8018506 <floor+0x96>
 801851c:	a30e      	add	r3, pc, #56	@ (adr r3, 8018558 <floor+0xe8>)
 801851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018522:	f7e7 fe8b 	bl	800023c <__adddf3>
 8018526:	2200      	movs	r2, #0
 8018528:	2300      	movs	r3, #0
 801852a:	f7e8 facd 	bl	8000ac8 <__aeabi_dcmpgt>
 801852e:	2800      	cmp	r0, #0
 8018530:	d0c2      	beq.n	80184b8 <floor+0x48>
 8018532:	2c00      	cmp	r4, #0
 8018534:	da0a      	bge.n	801854c <floor+0xdc>
 8018536:	2e14      	cmp	r6, #20
 8018538:	d101      	bne.n	801853e <floor+0xce>
 801853a:	3401      	adds	r4, #1
 801853c:	e006      	b.n	801854c <floor+0xdc>
 801853e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8018542:	2301      	movs	r3, #1
 8018544:	40b3      	lsls	r3, r6
 8018546:	441d      	add	r5, r3
 8018548:	4545      	cmp	r5, r8
 801854a:	d3f6      	bcc.n	801853a <floor+0xca>
 801854c:	ea25 0507 	bic.w	r5, r5, r7
 8018550:	e7b2      	b.n	80184b8 <floor+0x48>
 8018552:	2500      	movs	r5, #0
 8018554:	462c      	mov	r4, r5
 8018556:	e7af      	b.n	80184b8 <floor+0x48>
 8018558:	8800759c 	.word	0x8800759c
 801855c:	7e37e43c 	.word	0x7e37e43c
 8018560:	bff00000 	.word	0xbff00000
 8018564:	000fffff 	.word	0x000fffff

08018568 <floorf>:
 8018568:	ee10 3a10 	vmov	r3, s0
 801856c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018570:	3a7f      	subs	r2, #127	@ 0x7f
 8018572:	2a16      	cmp	r2, #22
 8018574:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018578:	dc2b      	bgt.n	80185d2 <floorf+0x6a>
 801857a:	2a00      	cmp	r2, #0
 801857c:	da12      	bge.n	80185a4 <floorf+0x3c>
 801857e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80185e4 <floorf+0x7c>
 8018582:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018586:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801858a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801858e:	dd06      	ble.n	801859e <floorf+0x36>
 8018590:	2b00      	cmp	r3, #0
 8018592:	da24      	bge.n	80185de <floorf+0x76>
 8018594:	2900      	cmp	r1, #0
 8018596:	4b14      	ldr	r3, [pc, #80]	@ (80185e8 <floorf+0x80>)
 8018598:	bf08      	it	eq
 801859a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801859e:	ee00 3a10 	vmov	s0, r3
 80185a2:	4770      	bx	lr
 80185a4:	4911      	ldr	r1, [pc, #68]	@ (80185ec <floorf+0x84>)
 80185a6:	4111      	asrs	r1, r2
 80185a8:	420b      	tst	r3, r1
 80185aa:	d0fa      	beq.n	80185a2 <floorf+0x3a>
 80185ac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80185e4 <floorf+0x7c>
 80185b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80185b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80185b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185bc:	ddef      	ble.n	801859e <floorf+0x36>
 80185be:	2b00      	cmp	r3, #0
 80185c0:	bfbe      	ittt	lt
 80185c2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80185c6:	fa40 f202 	asrlt.w	r2, r0, r2
 80185ca:	189b      	addlt	r3, r3, r2
 80185cc:	ea23 0301 	bic.w	r3, r3, r1
 80185d0:	e7e5      	b.n	801859e <floorf+0x36>
 80185d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80185d6:	d3e4      	bcc.n	80185a2 <floorf+0x3a>
 80185d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80185dc:	4770      	bx	lr
 80185de:	2300      	movs	r3, #0
 80185e0:	e7dd      	b.n	801859e <floorf+0x36>
 80185e2:	bf00      	nop
 80185e4:	7149f2ca 	.word	0x7149f2ca
 80185e8:	bf800000 	.word	0xbf800000
 80185ec:	007fffff 	.word	0x007fffff

080185f0 <_init>:
 80185f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185f2:	bf00      	nop
 80185f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185f6:	bc08      	pop	{r3}
 80185f8:	469e      	mov	lr, r3
 80185fa:	4770      	bx	lr

080185fc <_fini>:
 80185fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fe:	bf00      	nop
 8018600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018602:	bc08      	pop	{r3}
 8018604:	469e      	mov	lr, r3
 8018606:	4770      	bx	lr
