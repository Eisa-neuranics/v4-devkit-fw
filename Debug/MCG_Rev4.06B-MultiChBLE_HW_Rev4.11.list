
MCG_Rev4.06B-MultiChBLE_HW_Rev4.11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017574  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d34  080176b4  080176b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080193e8  080193e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080193f0  080193f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080193f4  080193f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  080193f8  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  08019578  0001b188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  080195ad  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be8  200001d4  080195be  0001b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002dbc  080195be  0001bdbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001cf57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001d000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  080195be  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00048799  00000000  00000000  0001cf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a210  00000000  00000000  00065720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d58  00000000  00000000  0006f930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002f0d  00000000  00000000  00073688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037168  00000000  00000000  00076595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005129a  00000000  00000000  000ad6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00111a5c  00000000  00000000  000fe997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  002103f3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010a9c  00000000  00000000  00210438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000073  00000000  00000000  00220ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0801769c 	.word	0x0801769c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	0801769c 	.word	0x0801769c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a78:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 ff4c 	bl	8002918 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f001 ff45 	bl	8002918 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f87f 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f001 ff3e 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f000 f878 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f001 ff37 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000aaa:	210a      	movs	r1, #10
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f871 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f001 ff30 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x00 );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f86a 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f001 ff29 	bl	8002918 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x08 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f000 f863 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f001 ff22 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x03 );				// 0x04: RLD amplifier powered down
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 f85c 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f001 ff1b 	bl	8002918 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_4 );				// Configures the R2 decimation rate as 5 for all channels.
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2021      	movs	r0, #33	@ 0x21
 8000ae6:	f000 f855 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aea:	2019      	movs	r0, #25
 8000aec:	f001 ff14 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000af0:	2102      	movs	r1, #2
 8000af2:	2022      	movs	r0, #34	@ 0x22
 8000af4:	f000 f84e 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000af8:	2019      	movs	r0, #25
 8000afa:	f001 ff0d 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000afe:	2102      	movs	r1, #2
 8000b00:	2023      	movs	r0, #35	@ 0x23
 8000b02:	f000 f847 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f001 ff06 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	2024      	movs	r0, #36	@ 0x24
 8000b10:	f000 f840 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b14:	2019      	movs	r0, #25
 8000b16:	f001 feff 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	2027      	movs	r0, #39	@ 0x27
 8000b1e:	f000 f839 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f001 fef8 	bl	8002918 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x10 );				// Channel for Loop Read Back: CH1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	202f      	movs	r0, #47	@ 0x2f
 8000b2c:	f000 f832 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f001 fef1 	bl	8002918 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b50:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b60:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2302      	movs	r3, #2
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <ADS1293_SPIReadReg+0x54>)
 8000b6e:	f009 fbe1 	bl	800a334 <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b76:	2202      	movs	r2, #2
 8000b78:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	200001fc 	.word	0x200001fc
 8000b90:	20000e94 	.word	0x20000e94

08000b94 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bae:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bbe:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4905      	ldr	r1, [pc, #20]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <ADS1293_SPIWriteReg+0x4c>)
 8000bc8:	f009 fa3f 	bl	800a04a <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001f0 	.word	0x200001f0
 8000be0:	20000e94 	.word	0x20000e94

08000be4 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg(uint8_t *buffer, uint8_t count)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf2:	22d0      	movs	r2, #208	@ 0xd0
 8000bf4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	70da      	strb	r2, [r3, #3]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	711a      	strb	r2, [r3, #4]
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	719a      	strb	r2, [r3, #6]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	71da      	strb	r2, [r3, #7]
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	721a      	strb	r2, [r3, #8]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c34:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2264      	movs	r2, #100	@ 0x64
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <ADS1293_SPIStreamReadReg+0x7c>)
 8000c48:	f009 fb74 	bl	800a334 <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001f0 	.word	0x200001f0
 8000c60:	20000e94 	.word	0x20000e94

08000c64 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

 	DIAG ("\t\tAFE initialised\r\n");
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <AFE_Init+0x14>)
 8000c6a:	f001 ff03 	bl	8002a74 <DIAG>
 	HAL_Delay (10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f001 fe52 	bl	8002918 <HAL_Delay>
 }
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	080176b4 	.word	0x080176b4
 8000c7c:	00000000 	.word	0x00000000

08000c80 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000c80:	b598      	push	{r3, r4, r7, lr}
 8000c82:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000c84:	4ba2      	ldr	r3, [pc, #648]	@ (8000f10 <AFE_Control+0x290>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d813      	bhi.n	8000cb4 <AFE_Control+0x34>
 8000c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <AFE_Control+0x14>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	08000ce3 	.word	0x08000ce3
 8000c9c:	08000cef 	.word	0x08000cef
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d39 	.word	0x08000d39
 8000ca8:	08000d75 	.word	0x08000d75
 8000cac:	08000fd9 	.word	0x08000fd9
 8000cb0:	08000fe1 	.word	0x08000fe1
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000cb4:	4b96      	ldr	r3, [pc, #600]	@ (8000f10 <AFE_Control+0x290>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000cba:	e195      	b.n	8000fe8 <AFE_Control+0x368>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000cbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cc4:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f001 fe26 	bl	8002918 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000cd4:	2019      	movs	r0, #25
 8000cd6:	f001 fe1f 	bl	8002918 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000cda:	4b8d      	ldr	r3, [pc, #564]	@ (8000f10 <AFE_Control+0x290>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ce0:	e182      	b.n	8000fe8 <AFE_Control+0x368>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000ce2:	f7ff fec3 	bl	8000a6c <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8000f10 <AFE_Control+0x290>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000cec:	e17c      	b.n	8000fe8 <AFE_Control+0x368>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000cee:	2040      	movs	r0, #64	@ 0x40
 8000cf0:	f7ff ff24 	bl	8000b3c <ADS1293_SPIReadReg>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b86      	ldr	r3, [pc, #536]	@ (8000f14 <AFE_Control+0x294>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000cfc:	4b85      	ldr	r3, [pc, #532]	@ (8000f14 <AFE_Control+0x294>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000d04:	4b82      	ldr	r3, [pc, #520]	@ (8000f10 <AFE_Control+0x290>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000d0a:	e16d      	b.n	8000fe8 <AFE_Control+0x368>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000d0c:	4b80      	ldr	r3, [pc, #512]	@ (8000f10 <AFE_Control+0x290>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d12:	e169      	b.n	8000fe8 <AFE_Control+0x368>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff3c 	bl	8000b94 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	@ 0x32
 8000d1e:	f001 fdfb 	bl	8002918 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000d22:	2101      	movs	r1, #1
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ff35 	bl	8000b94 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	@ 0x32
 8000d2c:	f001 fdf4 	bl	8002918 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d30:	4b77      	ldr	r3, [pc, #476]	@ (8000f10 <AFE_Control+0x290>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d36:	e157      	b.n	8000fe8 <AFE_Control+0x368>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000d38:	4b77      	ldr	r3, [pc, #476]	@ (8000f18 <AFE_Control+0x298>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d114      	bne.n	8000d6c <AFE_Control+0xec>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000d42:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <AFE_Control+0x29c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000d48:	4b73      	ldr	r3, [pc, #460]	@ (8000f18 <AFE_Control+0x298>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 3 );
 8000d4e:	2103      	movs	r1, #3
 8000d50:	4873      	ldr	r0, [pc, #460]	@ (8000f20 <AFE_Control+0x2a0>)
 8000d52:	f7ff ff47 	bl	8000be4 <ADS1293_SPIStreamReadReg>

 	  			  // Count SPS
 	  			  AFE.u16SampleCount++;
 8000d56:	4b73      	ldr	r3, [pc, #460]	@ (8000f24 <AFE_Control+0x2a4>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b70      	ldr	r3, [pc, #448]	@ (8000f24 <AFE_Control+0x2a4>)
 8000d62:	801a      	strh	r2, [r3, #0]

 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000d64:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <AFE_Control+0x290>)
 8000d66:	2205      	movs	r2, #5
 8000d68:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000d6a:	e13d      	b.n	8000fe8 <AFE_Control+0x368>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d6c:	4b68      	ldr	r3, [pc, #416]	@ (8000f10 <AFE_Control+0x290>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d72:	e139      	b.n	8000fe8 <AFE_Control+0x368>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  MCG.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000d74:	4b6a      	ldr	r3, [pc, #424]	@ (8000f20 <AFE_Control+0x2a0>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	041b      	lsls	r3, r3, #16
 8000d7a:	4a69      	ldr	r2, [pc, #420]	@ (8000f20 <AFE_Control+0x2a0>)
 8000d7c:	7892      	ldrb	r2, [r2, #2]
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	b292      	uxth	r2, r2
 8000d82:	4313      	orrs	r3, r2
 8000d84:	4a66      	ldr	r2, [pc, #408]	@ (8000f20 <AFE_Control+0x2a0>)
 8000d86:	78d2      	ldrb	r2, [r2, #3]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	4a67      	ldr	r2, [pc, #412]	@ (8000f28 <AFE_Control+0x2a8>)
 8000d8c:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
 	  		  MCG.Vin = ( 2.4 * ( ( (2.0 * (double)MCG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000d90:	4b65      	ldr	r3, [pc, #404]	@ (8000f28 <AFE_Control+0x2a8>)
 8000d92:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb9c 	bl	80004d4 <__aeabi_i2d>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	f7ff fa4c 	bl	800023c <__adddf3>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	a354      	add	r3, pc, #336	@ (adr r3, 8000f00 <AFE_Control+0x280>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fd23 	bl	80007fc <__aeabi_ddiv>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f2c <AFE_Control+0x2ac>)
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_dsub>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f08 <AFE_Control+0x288>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f7ff fbe7 	bl	80005a8 <__aeabi_dmul>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b52      	ldr	r3, [pc, #328]	@ (8000f30 <AFE_Control+0x2b0>)
 8000de8:	f7ff fd08 	bl	80007fc <__aeabi_ddiv>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fdea 	bl	80009cc <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000f28 <AFE_Control+0x2a8>)
 8000dfc:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
 	  		  MCG.Raw[Temp_buff_count] = (int)(MCG.Vin * 1000000);
 8000e00:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e02:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 8000e06:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000f34 <AFE_Control+0x2b4>
 8000e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f38 <AFE_Control+0x2b8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e18:	ee17 1a90 	vmov	r1, s15
 8000e1c:	4b42      	ldr	r3, [pc, #264]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG (Temp_buff_count);
 8000e22:	4b45      	ldr	r3, [pc, #276]	@ (8000f38 <AFE_Control+0x2b8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4a44      	ldr	r2, [pc, #272]	@ (8000f38 <AFE_Control+0x2b8>)
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	4614      	mov	r4, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fac9 	bl	80013c4 <IIR_MCG>
 8000e32:	4602      	mov	r2, r0
 8000e34:	493c      	ldr	r1, [pc, #240]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e36:	f104 030e 	add.w	r3, r4, #14
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	605a      	str	r2, [r3, #4]

 	  		  MCG.u8TxData[u8McgDataLen++] = ( (  		 MCG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8000e40:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <AFE_Control+0x2b8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4a38      	ldr	r2, [pc, #224]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e46:	330e      	adds	r3, #14
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	1218      	asrs	r0, r3, #8
 8000e50:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <AFE_Control+0x2bc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	b2d1      	uxtb	r1, r2
 8000e58:	4a38      	ldr	r2, [pc, #224]	@ (8000f3c <AFE_Control+0x2bc>)
 8000e5a:	7011      	strb	r1, [r2, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	b2c2      	uxtb	r2, r0
 8000e60:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
 	  		  MCG.u8TxData[u8McgDataLen++] = ( (uint8_t) MCG.Filtered [Temp_buff_count] & 0x00FF );
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <AFE_Control+0x2b8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e6e:	330e      	adds	r3, #14
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	6858      	ldr	r0, [r3, #4]
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <AFE_Control+0x2bc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	b2d1      	uxtb	r1, r2
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <AFE_Control+0x2bc>)
 8000e80:	7011      	strb	r1, [r2, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	b2c2      	uxtb	r2, r0
 8000e86:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e88:	440b      	add	r3, r1
 8000e8a:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.ECG == true && tsCmd.MCG == true)
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <AFE_Control+0x2c0>)
 8000e90:	7e1b      	ldrb	r3, [r3, #24]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d11a      	bne.n	8000ecc <AFE_Control+0x24c>
 8000e96:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <AFE_Control+0x2c0>)
 8000e98:	7edb      	ldrb	r3, [r3, #27]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d116      	bne.n	8000ecc <AFE_Control+0x24c>
 				  {
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <AFE_Control+0x2b8>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4a21      	ldr	r2, [pc, #132]	@ (8000f28 <AFE_Control+0x2a8>)
 8000ea4:	330e      	adds	r3, #14
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <AFE_Control+0x2c4>)
 8000eb0:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <AFE_Control+0x2b8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <AFE_Control+0x2a8>)
 8000eba:	330e      	adds	r3, #14
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <AFE_Control+0x2c4>)
 8000ec6:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000eca:	e05b      	b.n	8000f84 <AFE_Control+0x304>
 				  }
 				  else if (tsCmd.ECG == true && tsCmd.MCG == false )
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <AFE_Control+0x2c0>)
 8000ece:	7e1b      	ldrb	r3, [r3, #24]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d139      	bne.n	8000f48 <AFE_Control+0x2c8>
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <AFE_Control+0x2c0>)
 8000ed6:	7edb      	ldrb	r3, [r3, #27]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d135      	bne.n	8000f48 <AFE_Control+0x2c8>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <AFE_Control+0x2b8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <AFE_Control+0x2a8>)
 8000ee2:	330e      	adds	r3, #14
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <AFE_Control+0x2c4>)
 8000eee:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = 0x00;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <AFE_Control+0x2c4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000efa:	e043      	b.n	8000f84 <AFE_Control+0x304>
 8000efc:	f3af 8000 	nop.w
 8000f00:	00000000 	.word	0x00000000
 8000f04:	41686a00 	.word	0x41686a00
 8000f08:	33333333 	.word	0x33333333
 8000f0c:	40033333 	.word	0x40033333
 8000f10:	20000206 	.word	0x20000206
 8000f14:	2000064a 	.word	0x2000064a
 8000f18:	20000208 	.word	0x20000208
 8000f1c:	20001088 	.word	0x20001088
 8000f20:	2000064c 	.word	0x2000064c
 8000f24:	200010a0 	.word	0x200010a0
 8000f28:	2000020c 	.word	0x2000020c
 8000f2c:	3ff00000 	.word	0x3ff00000
 8000f30:	400c0000 	.word	0x400c0000
 8000f34:	49742400 	.word	0x49742400
 8000f38:	20000656 	.word	0x20000656
 8000f3c:	2000064b 	.word	0x2000064b
 8000f40:	20000da0 	.word	0x20000da0
 8000f44:	20000a90 	.word	0x20000a90
 				  }

 				  else if (tsCmd.ECG == false && tsCmd.MCG == true )
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <AFE_Control+0x36c>)
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d119      	bne.n	8000f84 <AFE_Control+0x304>
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <AFE_Control+0x36c>)
 8000f52:	7edb      	ldrb	r3, [r3, #27]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d115      	bne.n	8000f84 <AFE_Control+0x304>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <AFE_Control+0x370>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4a25      	ldr	r2, [pc, #148]	@ (8000ff4 <AFE_Control+0x374>)
 8000f5e:	330e      	adds	r3, #14
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <AFE_Control+0x378>)
 8000f6a:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <AFE_Control+0x370>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <AFE_Control+0x374>)
 8000f74:	330e      	adds	r3, #14
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <AFE_Control+0x378>)
 8000f80:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 				  }
 				 tsDebug.bReleaseAFEData= true;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <AFE_Control+0x378>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
 			  #endif


 	  		  Temp_buff_count++;		if (Temp_buff_count  ==  15 ) 	{ Temp_buff_count = 0; }
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <AFE_Control+0x370>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <AFE_Control+0x370>)
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <AFE_Control+0x370>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d102      	bne.n	8000fa6 <AFE_Control+0x326>
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <AFE_Control+0x370>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]

 	  		if ( u8McgDataLen >=  BLE_Data_Length )
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <AFE_Control+0x37c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fac:	d910      	bls.n	8000fd0 <AFE_Control+0x350>
 	  		{
 	  			memcpy ( tsStreamSCG.u8McgTxCpy, MCG.u8TxData, 64 );
 8000fae:	2240      	movs	r2, #64	@ 0x40
 8000fb0:	4913      	ldr	r1, [pc, #76]	@ (8001000 <AFE_Control+0x380>)
 8000fb2:	4814      	ldr	r0, [pc, #80]	@ (8001004 <AFE_Control+0x384>)
 8000fb4:	f015 fc71 	bl	801689a <memcpy>

 	  			// Copy MCG data length
 	  			MCG.u8TxLen = u8McgDataLen;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <AFE_Control+0x37c>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <AFE_Control+0x374>)
 8000fbe:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

 	  			// Enable BLE data transmission
 	  			tsStreamSCG.bReleaseScgData = true;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <AFE_Control+0x388>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
 	  			u8McgDataLen = 0;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <AFE_Control+0x37c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <AFE_Control+0x38c>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fd6:	e007      	b.n	8000fe8 <AFE_Control+0x368>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <AFE_Control+0x38c>)
 8000fda:	2206      	movs	r2, #6
 8000fdc:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fde:	e003      	b.n	8000fe8 <AFE_Control+0x368>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <AFE_Control+0x38c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fe6:	bf00      	nop
 	  	  }
 }
 8000fe8:	bf00      	nop
 8000fea:	bd98      	pop	{r3, r4, r7, pc}
 8000fec:	20000da0 	.word	0x20000da0
 8000ff0:	20000656 	.word	0x20000656
 8000ff4:	2000020c 	.word	0x2000020c
 8000ff8:	20000a90 	.word	0x20000a90
 8000ffc:	2000064b 	.word	0x2000064b
 8001000:	20000378 	.word	0x20000378
 8001004:	20000526 	.word	0x20000526
 8001008:	20000420 	.word	0x20000420
 800100c:	20000206 	.word	0x20000206

08001010 <MCG_StreamDataPack>:
 //***********************************************************************************************
 //***********************************************************************************************

 void MCG_StreamDataPack ( uint8_t *ecgData, uint8_t ecgDataLen, uint8_t *mcgData, uint8_t mcgDataLen, uint8_t *outputString  )
 {
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	461a      	mov	r2, r3
 800101c:	460b      	mov	r3, r1
 800101e:	72fb      	strb	r3, [r7, #11]
 8001020:	4613      	mov	r3, r2
 8001022:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamSCG.u8TxData, 0, sizeof(tsStreamSCG.u8TxData) );
 8001028:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102c:	2100      	movs	r1, #0
 800102e:	4848      	ldr	r0, [pc, #288]	@ (8001150 <MCG_StreamDataPack+0x140>)
 8001030:	f015 fb90 	bl	8016754 <memset>

#ifdef IMU_ENABLE
 	outputString [index++] = 'S';
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	75fa      	strb	r2, [r7, #23]
 800103a:	461a      	mov	r2, r3
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	4413      	add	r3, r2
 8001040:	2253      	movs	r2, #83	@ 0x53
 8001042:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;
 8001044:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <MCG_StreamDataPack+0x144>)
 8001046:	795b      	ldrb	r3, [r3, #5]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	b2d1      	uxtb	r1, r2
 800104c:	4a41      	ldr	r2, [pc, #260]	@ (8001154 <MCG_StreamDataPack+0x144>)
 800104e:	7151      	strb	r1, [r2, #5]
 8001050:	7dfa      	ldrb	r2, [r7, #23]
 8001052:	1c51      	adds	r1, r2, #1
 8001054:	75f9      	strb	r1, [r7, #23]
 8001056:	4611      	mov	r1, r2
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	440a      	add	r2, r1
 800105c:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	75fa      	strb	r2, [r7, #23]
 8001064:	461a      	mov	r2, r3
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	4413      	add	r3, r2
 800106a:	222c      	movs	r2, #44	@ 0x2c
 800106c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	75fa      	strb	r2, [r7, #23]
 8001074:	461a      	mov	r2, r3
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	4413      	add	r3, r2
 800107a:	2243      	movs	r2, #67	@ 0x43
 800107c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	75fa      	strb	r2, [r7, #23]
 8001084:	461a      	mov	r2, r3
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	4413      	add	r3, r2
 800108a:	2230      	movs	r2, #48	@ 0x30
 800108c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	75fa      	strb	r2, [r7, #23]
 8001094:	461a      	mov	r2, r3
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	4413      	add	r3, r2
 800109a:	222c      	movs	r2, #44	@ 0x2c
 800109c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ecgDataLen;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	75fa      	strb	r2, [r7, #23]
 80010a4:	461a      	mov	r2, r3
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	4413      	add	r3, r2
 80010aa:	7afa      	ldrb	r2, [r7, #11]
 80010ac:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	75fa      	strb	r2, [r7, #23]
 80010b4:	461a      	mov	r2, r3
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	4413      	add	r3, r2
 80010ba:	222c      	movs	r2, #44	@ 0x2c
 80010bc:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, ecgData, ecgDataLen );
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	6a3a      	ldr	r2, [r7, #32]
 80010c2:	4413      	add	r3, r2
 80010c4:	7afa      	ldrb	r2, [r7, #11]
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f015 fbe6 	bl	801689a <memcpy>

 	index += ecgDataLen;
 80010ce:	7dfa      	ldrb	r2, [r7, #23]
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	4413      	add	r3, r2
 80010d4:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	75fa      	strb	r2, [r7, #23]
 80010dc:	461a      	mov	r2, r3
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	4413      	add	r3, r2
 80010e2:	222c      	movs	r2, #44	@ 0x2c
 80010e4:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	75fa      	strb	r2, [r7, #23]
 80010ec:	461a      	mov	r2, r3
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	4413      	add	r3, r2
 80010f2:	2243      	movs	r2, #67	@ 0x43
 80010f4:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	75fa      	strb	r2, [r7, #23]
 80010fc:	461a      	mov	r2, r3
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	4413      	add	r3, r2
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	75fa      	strb	r2, [r7, #23]
 800110c:	461a      	mov	r2, r3
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	4413      	add	r3, r2
 8001112:	222c      	movs	r2, #44	@ 0x2c
 8001114:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = mcgDataLen;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	75fa      	strb	r2, [r7, #23]
 800111c:	461a      	mov	r2, r3
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	4413      	add	r3, r2
 8001122:	7aba      	ldrb	r2, [r7, #10]
 8001124:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	75fa      	strb	r2, [r7, #23]
 800112c:	461a      	mov	r2, r3
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	4413      	add	r3, r2
 8001132:	222c      	movs	r2, #44	@ 0x2c
 8001134:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, mcgData, mcgDataLen );
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	4413      	add	r3, r2
 800113c:	7aba      	ldrb	r2, [r7, #10]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f015 fbaa 	bl	801689a <memcpy>
	outputString [index++] = ',';

	memcpy ( outputString + index, mcgData, mcgDataLen );
#endif

 }
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000426 	.word	0x20000426
 8001154:	20001140 	.word	0x20001140

08001158 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <BLE_Init+0x28>)
 800115e:	2200      	movs	r2, #0
 8001160:	71da      	strb	r2, [r3, #7]
	 tsBle.App.GyroNotification = false;
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <BLE_Init+0x28>)
 8001164:	2200      	movs	r2, #0
 8001166:	721a      	strb	r2, [r3, #8]
	 tsBle.App.McgNotification = false;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <BLE_Init+0x28>)
 800116a:	2200      	movs	r2, #0
 800116c:	719a      	strb	r2, [r3, #6]

	 DIAG ("\t\tBLE initialised\r\n");
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <BLE_Init+0x2c>)
 8001170:	f001 fc80 	bl	8002a74 <DIAG>
	 HAL_Delay (10);
 8001174:	200a      	movs	r0, #10
 8001176:	f001 fbcf 	bl	8002918 <HAL_Delay>
 }
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20001140 	.word	0x20001140
 8001184:	080176c8 	.word	0x080176c8

08001188 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af02      	add	r7, sp, #8

	 switch( eBLE_STATE )
 800118e:	4b81      	ldr	r3, [pc, #516]	@ (8001394 <BLE_Control+0x20c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	f200 80f6 	bhi.w	8001384 <BLE_Control+0x1fc>
 8001198:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <BLE_Control+0x18>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	080011dd 	.word	0x080011dd
 80011a8:	080011e5 	.word	0x080011e5
 80011ac:	080011ed 	.word	0x080011ed
 80011b0:	08001207 	.word	0x08001207
 80011b4:	08001221 	.word	0x08001221
 80011b8:	08001279 	.word	0x08001279
 80011bc:	0800129d 	.word	0x0800129d
 80011c0:	080012f7 	.word	0x080012f7
 80011c4:	08001315 	.word	0x08001315
 80011c8:	08001351 	.word	0x08001351
 80011cc:	08001375 	.word	0x08001375
 80011d0:	0800137d 	.word	0x0800137d
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 80011d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <BLE_Control+0x20c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
		 break;
 80011da:	e0d7      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 80011dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001394 <BLE_Control+0x20c>)
 80011de:	2202      	movs	r2, #2
 80011e0:	701a      	strb	r2, [r3, #0]
		 break;
 80011e2:	e0d3      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <BLE_Control+0x20c>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
		 break;
 80011ea:	e0cf      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 80011ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001398 <BLE_Control+0x210>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011f6:	4b67      	ldr	r3, [pc, #412]	@ (8001394 <BLE_Control+0x20c>)
 80011f8:	2205      	movs	r2, #5
 80011fa:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 80011fc:	e0c6      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011fe:	4b65      	ldr	r3, [pc, #404]	@ (8001394 <BLE_Control+0x20c>)
 8001200:	2203      	movs	r2, #3
 8001202:	701a      	strb	r2, [r3, #0]
		 break;
 8001204:	e0c2      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 8001206:	4b64      	ldr	r3, [pc, #400]	@ (8001398 <BLE_Control+0x210>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001210:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <BLE_Control+0x20c>)
 8001212:	2205      	movs	r2, #5
 8001214:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 8001216:	e0b9      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_ADV;
 8001218:	4b5e      	ldr	r3, [pc, #376]	@ (8001394 <BLE_Control+0x20c>)
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
		 break;
 800121e:	e0b5      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.McgNotification )
 8001220:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <BLE_Control+0x210>)
 8001222:	799b      	ldrb	r3, [r3, #6]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <BLE_Control+0xe8>
		 {
			 if ( tsStreamSCG.bReleaseScgData == true )
 8001228:	4b5c      	ldr	r3, [pc, #368]	@ (800139c <BLE_Control+0x214>)
 800122a:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11a      	bne.n	8001268 <BLE_Control+0xe0>
			 {
				 tsStreamSCG.bReleaseScgData = false;
 8001232:	4b5a      	ldr	r3, [pc, #360]	@ (800139c <BLE_Control+0x214>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
				 MCG_StreamDataPack ( tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8TxData );
 800123a:	4b59      	ldr	r3, [pc, #356]	@ (80013a0 <BLE_Control+0x218>)
 800123c:	f893 1202 	ldrb.w	r1, [r3, #514]	@ 0x202
 8001240:	4b57      	ldr	r3, [pc, #348]	@ (80013a0 <BLE_Control+0x218>)
 8001242:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8001246:	4a57      	ldr	r2, [pc, #348]	@ (80013a4 <BLE_Control+0x21c>)
 8001248:	9200      	str	r2, [sp, #0]
 800124a:	4a57      	ldr	r2, [pc, #348]	@ (80013a8 <BLE_Control+0x220>)
 800124c:	4856      	ldr	r0, [pc, #344]	@ (80013a8 <BLE_Control+0x220>)
 800124e:	f7ff fedf 	bl	8001010 <MCG_StreamDataPack>
				 // Reset data length
				 MCG.u8TxLen = 0;
 8001252:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <BLE_Control+0x218>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
				 // Set the task for BLE
				 tsBle.App.ScgSetTask = true;
 800125a:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <BLE_Control+0x210>)
 800125c:	2201      	movs	r2, #1
 800125e:	725a      	strb	r2, [r3, #9]
//				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001260:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <BLE_Control+0x20c>)
 8001262:	2206      	movs	r2, #6
 8001264:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 8001266:	e091      	b.n	800138c <BLE_Control+0x204>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <BLE_Control+0x20c>)
 800126a:	2205      	movs	r2, #5
 800126c:	701a      	strb	r2, [r3, #0]
		 break;
 800126e:	e08d      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <BLE_Control+0x20c>)
 8001272:	2207      	movs	r2, #7
 8001274:	701a      	strb	r2, [r3, #0]
		 break;
 8001276:	e089      	b.n	800138c <BLE_Control+0x204>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.SCG_XferComplete )
 8001278:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <BLE_Control+0x210>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <BLE_Control+0x10c>
		 {
			 tsBle.SCG_XferComplete = false;
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <BLE_Control+0x210>)
 8001282:	2200      	movs	r2, #0
 8001284:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 8001286:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <BLE_Control+0x20c>)
 8001288:	220b      	movs	r2, #11
 800128a:	701a      	strb	r2, [r3, #0]
			 #ifdef IMU_ENABLE
			 	 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <BLE_Control+0x20c>)
 800128e:	2207      	movs	r2, #7
 8001290:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 8001292:	e07b      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001294:	4b3f      	ldr	r3, [pc, #252]	@ (8001394 <BLE_Control+0x20c>)
 8001296:	2206      	movs	r2, #6
 8001298:	701a      	strb	r2, [r3, #0]
		 break;
 800129a:	e077      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 800129c:	4b3e      	ldr	r3, [pc, #248]	@ (8001398 <BLE_Control+0x210>)
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <BLE_Control+0x166>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <BLE_Control+0x224>)
 80012a6:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d11b      	bne.n	80012e6 <BLE_Control+0x15e>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <BLE_Control+0x224>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				 IMU_StreamDataPack ( Accelerometer, IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 80012b6:	4b3e      	ldr	r3, [pc, #248]	@ (80013b0 <BLE_Control+0x228>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <BLE_Control+0x22c>)
 80012bc:	4a3e      	ldr	r2, [pc, #248]	@ (80013b8 <BLE_Control+0x230>)
 80012be:	493f      	ldr	r1, [pc, #252]	@ (80013bc <BLE_Control+0x234>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f000 fcfd 	bl	8001cc0 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 80012c6:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <BLE_Control+0x238>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 80012cc:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <BLE_Control+0x238>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <BLE_Control+0x238>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <BLE_Control+0x210>)
 80012da:	2201      	movs	r2, #1
 80012dc:	729a      	strb	r2, [r3, #10]
				 //				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012de:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <BLE_Control+0x20c>)
 80012e0:	2208      	movs	r2, #8
 80012e2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 80012e4:	e052      	b.n	800138c <BLE_Control+0x204>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80012e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <BLE_Control+0x20c>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	701a      	strb	r2, [r3, #0]
		 break;
 80012ec:	e04e      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_IDLE;
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <BLE_Control+0x20c>)
 80012f0:	220b      	movs	r2, #11
 80012f2:	701a      	strb	r2, [r3, #0]
		 break;
 80012f4:	e04a      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <BLE_Control+0x210>)
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <BLE_Control+0x184>
		 {
			 tsBle.ACCEL_XferComplete = false;
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <BLE_Control+0x210>)
 8001300:	2200      	movs	r2, #0
 8001302:	70da      	strb	r2, [r3, #3]
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <BLE_Control+0x20c>)
 8001306:	2209      	movs	r2, #9
 8001308:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 800130a:	e03f      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <BLE_Control+0x20c>)
 800130e:	2208      	movs	r2, #8
 8001310:	701a      	strb	r2, [r3, #0]
		 break;
 8001312:	e03b      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <BLE_Control+0x224>)
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
		 if ( tsStreamIMU.bReleaseGyroData == true )
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <BLE_Control+0x224>)
 800131e:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001322:	2b01      	cmp	r3, #1
 8001324:	d110      	bne.n	8001348 <BLE_Control+0x1c0>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <BLE_Control+0x238>)
 8001328:	2200      	movs	r2, #0
 800132a:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 800132c:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <BLE_Control+0x238>)
 800132e:	2200      	movs	r2, #0
 8001330:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <BLE_Control+0x238>)
 8001334:	2200      	movs	r2, #0
 8001336:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <BLE_Control+0x224>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <BLE_Control+0x20c>)
 8001342:	220a      	movs	r2, #10
 8001344:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 8001346:	e021      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <BLE_Control+0x20c>)
 800134a:	2209      	movs	r2, #9
 800134c:	701a      	strb	r2, [r3, #0]
		 break;
 800134e:	e01d      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <BLE_Control+0x210>)
 8001352:	2201      	movs	r2, #1
 8001354:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <BLE_Control+0x210>)
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <BLE_Control+0x1e4>
		 {
			 tsBle.GYRO_XferComplete = false;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <BLE_Control+0x210>)
 8001360:	2200      	movs	r2, #0
 8001362:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <BLE_Control+0x20c>)
 8001366:	220b      	movs	r2, #11
 8001368:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 800136a:	e00f      	b.n	800138c <BLE_Control+0x204>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <BLE_Control+0x20c>)
 800136e:	2209      	movs	r2, #9
 8001370:	701a      	strb	r2, [r3, #0]
		 break;
 8001372:	e00b      	b.n	800138c <BLE_Control+0x204>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <BLE_Control+0x20c>)
 8001376:	2203      	movs	r2, #3
 8001378:	701a      	strb	r2, [r3, #0]
		 break;
 800137a:	e007      	b.n	800138c <BLE_Control+0x204>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <BLE_Control+0x20c>)
 800137e:	2202      	movs	r2, #2
 8001380:	701a      	strb	r2, [r3, #0]
		 break;
 8001382:	e003      	b.n	800138c <BLE_Control+0x204>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <BLE_Control+0x20c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
		 break;
 800138a:	bf00      	nop

	 }
// ---------------------------------------------

 }
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000657 	.word	0x20000657
 8001398:	20001140 	.word	0x20001140
 800139c:	20000420 	.word	0x20000420
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	20000426 	.word	0x20000426
 80013a8:	20000526 	.word	0x20000526
 80013ac:	20000820 	.word	0x20000820
 80013b0:	20000826 	.word	0x20000826
 80013b4:	200006fa 	.word	0x200006fa
 80013b8:	200006b2 	.word	0x200006b2
 80013bc:	2000066a 	.word	0x2000066a
 80013c0:	20000658 	.word	0x20000658

080013c4 <IIR_MCG>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_MCG ( uint8_t Temp_xyptr )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]

	float  		convM = 0;
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
	float  		conv1M = 0, conv2M = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
	uint8_t 	o = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	72fb      	strb	r3, [r7, #11]

	// BPF Implementation ------------------------------------------------------------------------------------
	if (tsCmd.MCG_HPF)
 80013e4:	4bc1      	ldr	r3, [pc, #772]	@ (80016ec <IIR_MCG+0x328>)
 80013e6:	7f5b      	ldrb	r3, [r3, #29]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07e      	beq.n	80014ea <IIR_MCG+0x126>
	{
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
 80013f0:	e020      	b.n	8001434 <IIR_MCG+0x70>
		{
			o= RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80013f2:	7dfa      	ldrb	r2, [r7, #23]
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4619      	mov	r1, r3
 80013f8:	200f      	movs	r0, #15
 80013fa:	f000 f987 	bl	800170c <RecentValueIndex>
 80013fe:	4603      	mov	r3, r0
 8001400:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b[i] * MCG.Raw[o];
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	4aba      	ldr	r2, [pc, #744]	@ (80016f0 <IIR_MCG+0x32c>)
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	4ab8      	ldr	r2, [pc, #736]	@ (80016f4 <IIR_MCG+0x330>)
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001422:	ed97 7a07 	vldr	s14, [r7, #28]
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	3301      	adds	r3, #1
 8001432:	75fb      	strb	r3, [r7, #23]
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d9db      	bls.n	80013f2 <IIR_MCG+0x2e>
		}

		o=0;
 800143a:	2300      	movs	r3, #0
 800143c:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 800143e:	2301      	movs	r3, #1
 8001440:	75bb      	strb	r3, [r7, #22]
 8001442:	e03f      	b.n	80014c4 <IIR_MCG+0x100>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001444:	7dba      	ldrb	r2, [r7, #22]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4619      	mov	r1, r3
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f95e 	bl	800170c <RecentValueIndex>
 8001450:	4603      	mov	r3, r0
 8001452:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_N50) {conv2M += a[i] * MCG.HPF [o];} else {conv2M += a[i] * MCG.Filtered [o];}
 8001454:	4ba5      	ldr	r3, [pc, #660]	@ (80016ec <IIR_MCG+0x328>)
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d018      	beq.n	800148e <IIR_MCG+0xca>
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	4aa6      	ldr	r2, [pc, #664]	@ (80016f8 <IIR_MCG+0x334>)
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	4aa2      	ldr	r2, [pc, #648]	@ (80016f4 <IIR_MCG+0x330>)
 800146c:	332c      	adds	r3, #44	@ 0x2c
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	ed97 7a06 	vldr	s14, [r7, #24]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a06 	vstr	s15, [r7, #24]
 800148c:	e017      	b.n	80014be <IIR_MCG+0xfa>
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	4a99      	ldr	r2, [pc, #612]	@ (80016f8 <IIR_MCG+0x334>)
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	4a95      	ldr	r2, [pc, #596]	@ (80016f4 <IIR_MCG+0x330>)
 800149e:	330e      	adds	r3, #14
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 80014be:	7dbb      	ldrb	r3, [r7, #22]
 80014c0:	3301      	adds	r3, #1
 80014c2:	75bb      	strb	r3, [r7, #22]
 80014c4:	7dbb      	ldrb	r3, [r7, #22]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d9bc      	bls.n	8001444 <IIR_MCG+0x80>
		}

		MCG.HPF [Temp_xyptr] =  conv1M -  conv2M ;
 80014ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 1a90 	vmov	r1, s15
 80014e0:	4a84      	ldr	r2, [pc, #528]	@ (80016f4 <IIR_MCG+0x330>)
 80014e2:	332c      	adds	r3, #44	@ 0x2c
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	6059      	str	r1, [r3, #4]
	}

	// Notch Filter implementation ---------------------------------------------------------------------------
	if (tsCmd.MCG_N50)
 80014ea:	4b80      	ldr	r3, [pc, #512]	@ (80016ec <IIR_MCG+0x328>)
 80014ec:	7f1b      	ldrb	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80dc 	beq.w	80016ac <IIR_MCG+0x2e8>
	{
		conv1M= 0;		conv2M= 0;
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]

		// 50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 8001500:	2300      	movs	r3, #0
 8001502:	757b      	strb	r3, [r7, #21]
 8001504:	e03d      	b.n	8001582 <IIR_MCG+0x1be>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001506:	7d7a      	ldrb	r2, [r7, #21]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4619      	mov	r1, r3
 800150c:	200f      	movs	r0, #15
 800150e:	f000 f8fd 	bl	800170c <RecentValueIndex>
 8001512:	4603      	mov	r3, r0
 8001514:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_HPF) { conv1M +=  b_N50[i] * MCG.HPF[o]; } else { conv1M +=  b_N50[i] * MCG.Raw[o]; }
 8001516:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <IIR_MCG+0x328>)
 8001518:	7f5b      	ldrb	r3, [r3, #29]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d018      	beq.n	8001550 <IIR_MCG+0x18c>
 800151e:	7d7b      	ldrb	r3, [r7, #21]
 8001520:	4a76      	ldr	r2, [pc, #472]	@ (80016fc <IIR_MCG+0x338>)
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	ed93 7a00 	vldr	s14, [r3]
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	4a71      	ldr	r2, [pc, #452]	@ (80016f4 <IIR_MCG+0x330>)
 800152e:	332c      	adds	r3, #44	@ 0x2c
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	edc7 7a07 	vstr	s15, [r7, #28]
 800154e:	e015      	b.n	800157c <IIR_MCG+0x1b8>
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	4a6a      	ldr	r2, [pc, #424]	@ (80016fc <IIR_MCG+0x338>)
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	4a65      	ldr	r2, [pc, #404]	@ (80016f4 <IIR_MCG+0x330>)
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	ed97 7a07 	vldr	s14, [r7, #28]
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	3301      	adds	r3, #1
 8001580:	757b      	strb	r3, [r7, #21]
 8001582:	7d7b      	ldrb	r3, [r7, #21]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d9be      	bls.n	8001506 <IIR_MCG+0x142>
		}

		o=0;
 8001588:	2300      	movs	r3, #0
 800158a:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 800158c:	2301      	movs	r3, #1
 800158e:	753b      	strb	r3, [r7, #20]
 8001590:	e021      	b.n	80015d6 <IIR_MCG+0x212>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001592:	7d3a      	ldrb	r2, [r7, #20]
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4619      	mov	r1, r3
 8001598:	200f      	movs	r0, #15
 800159a:	f000 f8b7 	bl	800170c <RecentValueIndex>
 800159e:	4603      	mov	r3, r0
 80015a0:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N50[i] * MCG.Notch50[o] ;
 80015a2:	7d3b      	ldrb	r3, [r7, #20]
 80015a4:	4a56      	ldr	r2, [pc, #344]	@ (8001700 <IIR_MCG+0x33c>)
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <IIR_MCG+0x330>)
 80015b2:	333c      	adds	r3, #60	@ 0x3c
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 80015d0:	7d3b      	ldrb	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	753b      	strb	r3, [r7, #20]
 80015d6:	7d3b      	ldrb	r3, [r7, #20]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d9da      	bls.n	8001592 <IIR_MCG+0x1ce>
		}

		MCG.Notch50[Temp_xyptr]= conv1M - conv2M;
 80015dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80015e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ee:	ee17 1a90 	vmov	r1, s15
 80015f2:	4a40      	ldr	r2, [pc, #256]	@ (80016f4 <IIR_MCG+0x330>)
 80015f4:	333c      	adds	r3, #60	@ 0x3c
 80015f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		conv1M= 0;		conv2M= 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]

		// 60 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 8001606:	2300      	movs	r3, #0
 8001608:	74fb      	strb	r3, [r7, #19]
 800160a:	e021      	b.n	8001650 <IIR_MCG+0x28c>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 800160c:	7cfa      	ldrb	r2, [r7, #19]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4619      	mov	r1, r3
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f87a 	bl	800170c <RecentValueIndex>
 8001618:	4603      	mov	r3, r0
 800161a:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b_N60[i] * MCG.Notch50[o];
 800161c:	7cfb      	ldrb	r3, [r7, #19]
 800161e:	4a39      	ldr	r2, [pc, #228]	@ (8001704 <IIR_MCG+0x340>)
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	ed93 7a00 	vldr	s14, [r3]
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	4a32      	ldr	r2, [pc, #200]	@ (80016f4 <IIR_MCG+0x330>)
 800162c:	333c      	adds	r3, #60	@ 0x3c
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	3301      	adds	r3, #1
 800164e:	74fb      	strb	r3, [r7, #19]
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d9da      	bls.n	800160c <IIR_MCG+0x248>
		}

		o=0;
 8001656:	2300      	movs	r3, #0
 8001658:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 800165a:	2301      	movs	r3, #1
 800165c:	74bb      	strb	r3, [r7, #18]
 800165e:	e022      	b.n	80016a6 <IIR_MCG+0x2e2>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001660:	7cba      	ldrb	r2, [r7, #18]
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4619      	mov	r1, r3
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f850 	bl	800170c <RecentValueIndex>
 800166c:	4603      	mov	r3, r0
 800166e:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N60[i] * MCG.Filtered[o] ;
 8001670:	7cbb      	ldrb	r3, [r7, #18]
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <IIR_MCG+0x344>)
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <IIR_MCG+0x330>)
 8001680:	330e      	adds	r3, #14
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	ed97 7a06 	vldr	s14, [r7, #24]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 80016a0:	7cbb      	ldrb	r3, [r7, #18]
 80016a2:	3301      	adds	r3, #1
 80016a4:	74bb      	strb	r3, [r7, #18]
 80016a6:	7cbb      	ldrb	r3, [r7, #18]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d9d9      	bls.n	8001660 <IIR_MCG+0x29c>
		}
	}

	convM =  conv1M - conv2M ;
 80016ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80016b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	edc7 7a03 	vstr	s15, [r7, #12]

	if (tsCmd.MCG_HPF == false && tsCmd.MCG_N50 == false)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <IIR_MCG+0x328>)
 80016be:	7f5b      	ldrb	r3, [r3, #29]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d108      	bne.n	80016d6 <IIR_MCG+0x312>
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <IIR_MCG+0x328>)
 80016c6:	7f1b      	ldrb	r3, [r3, #28]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d104      	bne.n	80016d6 <IIR_MCG+0x312>
	{
		return MCG.Raw[Temp_xyptr];
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <IIR_MCG+0x330>)
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	e005      	b.n	80016e2 <IIR_MCG+0x31e>
	}
	else
	{
		return  (int)convM; //(int)conv;
 80016d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016de:	ee17 3a90 	vmov	r3, s15
	}

}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000da0 	.word	0x20000da0
 80016f0:	08019098 	.word	0x08019098
 80016f4:	2000020c 	.word	0x2000020c
 80016f8:	080190a4 	.word	0x080190a4
 80016fc:	080190b0 	.word	0x080190b0
 8001700:	080190bc 	.word	0x080190bc
 8001704:	080190c8 	.word	0x080190c8
 8001708:	080190d4 	.word	0x080190d4

0800170c <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	460b      	mov	r3, r1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	4613      	mov	r3, r2
 800171c:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 8001722:	79ba      	ldrb	r2, [r7, #6]
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	da06      	bge.n	800173a <RecentValueIndex+0x2e>
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	4413      	add	r3, r2
 8001732:	b2da      	uxtb	r2, r3
 8001734:	797b      	ldrb	r3, [r7, #5]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 800173a:	79ba      	ldrb	r2, [r7, #6]
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	db03      	blt.n	800174c <RecentValueIndex+0x40>
 8001744:	79ba      	ldrb	r2, [r7, #6]
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <IMU_Init>:

#define 	M_PI 			3.14159265358979323846
#define		IMU_SPS			1067
//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <IMU_Init+0xc0>)
 8001766:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800176a:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 800176c:	2310      	movs	r3, #16
 800176e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001770:	2340      	movs	r3, #64	@ 0x40
 8001772:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001774:	f107 020c 	add.w	r2, r7, #12
 8001778:	230a      	movs	r3, #10
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2302      	movs	r3, #2
 800177e:	21d4      	movs	r1, #212	@ 0xd4
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f004 f869 	bl	8005858 <HAL_I2C_Master_Transmit>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <IMU_Init+0x34>
    {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e041      	b.n	8001814 <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001790:	2311      	movs	r3, #17
 8001792:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001798:	f107 020c 	add.w	r2, r7, #12
 800179c:	230a      	movs	r3, #10
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2302      	movs	r3, #2
 80017a2:	21d4      	movs	r1, #212	@ 0xd4
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f004 f857 	bl	8005858 <HAL_I2C_Master_Transmit>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <IMU_Init+0x58>
    {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e02f      	b.n	8001814 <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 80017b4:	2312      	movs	r3, #18
 80017b6:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 80017b8:	2344      	movs	r3, #68	@ 0x44
 80017ba:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	230a      	movs	r3, #10
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	21d4      	movs	r1, #212	@ 0xd4
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f004 f845 	bl	8005858 <HAL_I2C_Master_Transmit>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e01d      	b.n	8001814 <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, IMU_SPS );
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <IMU_Init+0xc4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001824 <IMU_Init+0xc8>
 80017e8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ec:	480e      	ldr	r0, [pc, #56]	@ (8001828 <IMU_Init+0xcc>)
 80017ee:	f000 fb63 	bl	8001eb8 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, IMU_SPS );
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <IMU_Init+0xc4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fe:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001824 <IMU_Init+0xc8>
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <IMU_Init+0xd0>)
 8001808:	f000 fb56 	bl	8001eb8 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <IMU_Init+0xd4>)
 800180e:	f001 f931 	bl	8002a74 <DIAG>

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	48000400 	.word	0x48000400
 8001820:	2000000a 	.word	0x2000000a
 8001824:	44856000 	.word	0x44856000
 8001828:	20000a4c 	.word	0x20000a4c
 800182c:	20000a5c 	.word	0x20000a5c
 8001830:	080176dc 	.word	0x080176dc

08001834 <IMU_Control>:

//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//
void IMU_Control ( void )
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	switch (teIMU_State)
 8001838:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <IMU_Control+0xc8>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b08      	cmp	r3, #8
 800183e:	f200 818c 	bhi.w	8001b5a <IMU_Control+0x326>
 8001842:	a201      	add	r2, pc, #4	@ (adr r2, 8001848 <IMU_Control+0x14>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001875 	.word	0x08001875
 800184c:	0800186d 	.word	0x0800186d
 8001850:	0800189d 	.word	0x0800189d
 8001854:	080018a5 	.word	0x080018a5
 8001858:	080018cd 	.word	0x080018cd
 800185c:	080018dd 	.word	0x080018dd
 8001860:	080018ed 	.word	0x080018ed
 8001864:	080018f5 	.word	0x080018f5
 8001868:	08001915 	.word	0x08001915

	{
		case IMU_STATE_IDLE:

			teIMU_State = IMU_STATE_INIT;
 800186c:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <IMU_Control+0xc8>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
			break;
 8001872:	e178      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_INIT:

			ENABLE_IMU_CS;
 8001874:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	619a      	str	r2, [r3, #24]
			if (IMU_Init(&hi2c1) != HAL_OK)
 800187c:	4820      	ldr	r0, [pc, #128]	@ (8001900 <IMU_Control+0xcc>)
 800187e:	f7ff ff6d 	bl	800175c <IMU_Init>
				#ifdef IMU_DEBUG_EN
				DIAG ( " IMU ERROR\r\n" );
				#endif
			}

			if ( IMU_ReadID(&hi2c1, &id) == HAL_OK )
 8001882:	4920      	ldr	r1, [pc, #128]	@ (8001904 <IMU_Control+0xd0>)
 8001884:	481e      	ldr	r0, [pc, #120]	@ (8001900 <IMU_Control+0xcc>)
 8001886:	f000 f98d 	bl	8001ba4 <IMU_ReadID>
			{
				#ifdef IMU_DEBUG_EN
				DIAG ( "No IMU= %X\r\n", id );
				#endif
			}
			DISABLE_IMU_CS;
 800188a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800188e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001892:	619a      	str	r2, [r3, #24]

			teIMU_State = IMU_STATE_WAIT_INT;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <IMU_Control+0xc8>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
			break;
 800189a:	e164      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_WAIT_INT:

			teIMU_State = IMU_STATE_SELECT_SLAVE;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <IMU_Control+0xc8>)
 800189e:	2203      	movs	r2, #3
 80018a0:	701a      	strb	r2, [r3, #0]

			break;
 80018a2:	e160      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_SELECT_SLAVE:

			if ( tsTimer.bImuFlag )
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <IMU_Control+0xd4>)
 80018a6:	78db      	ldrb	r3, [r3, #3]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <IMU_Control+0x90>
			{
				#ifdef IMU_DEBUG_EN
					DIAG ( "IMU Sampling\r\n" );
				#endif
				tsTimer.bImuFlag = false;
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <IMU_Control+0xd4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	70da      	strb	r2, [r3, #3]
				ENABLE_IMU_CS;
 80018b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	619a      	str	r2, [r3, #24]
				teIMU_State = IMU_STATE_REQ_ACCEL;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <IMU_Control+0xc8>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]
			else
			{
				teIMU_State = IMU_STATE_SELECT_SLAVE;
			}

			break;
 80018c2:	e150      	b.n	8001b66 <IMU_Control+0x332>
				teIMU_State = IMU_STATE_SELECT_SLAVE;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <IMU_Control+0xc8>)
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
			break;
 80018ca:	e14c      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_REQ_ACCEL:

			if ( IMU_ReadAccel(&hi2c1, &accelData ) == HAL_OK )
 80018cc:	490f      	ldr	r1, [pc, #60]	@ (800190c <IMU_Control+0xd8>)
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <IMU_Control+0xcc>)
 80018d0:	f000 f97e 	bl	8001bd0 <IMU_ReadAccel>
				#ifdef IMU_DEBUG_EN
				DIAG ( "No Accel. Data\r\n" );
				#endif
			}

			teIMU_State = IMU_STATE_REQ_GYRO;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <IMU_Control+0xc8>)
 80018d6:	2205      	movs	r2, #5
 80018d8:	701a      	strb	r2, [r3, #0]
			break;
 80018da:	e144      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_REQ_GYRO:

			if ( IMU_ReadGyro(&hi2c1, &gyroData ) == HAL_OK )
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <IMU_Control+0xdc>)
 80018de:	4808      	ldr	r0, [pc, #32]	@ (8001900 <IMU_Control+0xcc>)
 80018e0:	f000 f9ad 	bl	8001c3e <IMU_ReadGyro>
			{
				#ifdef IMU_DEBUG_EN
				DIAG ( "No Gyro. Data\r\n" );
				#endif
			}
			teIMU_State = IMU_STATE_DESELECT_SLAVE;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <IMU_Control+0xc8>)
 80018e6:	2206      	movs	r2, #6
 80018e8:	701a      	strb	r2, [r3, #0]
			break;
 80018ea:	e13c      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_DESELECT_SLAVE:

			//DISABLE_IMU_CS;
			teIMU_State = IMU_STATE_PROCESS_DATA;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <IMU_Control+0xc8>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	701a      	strb	r2, [r3, #0]
			break;
 80018f2:	e138      	b.n	8001b66 <IMU_Control+0x332>

		case IMU_STATE_PROCESS_DATA:

			teIMU_State = IMU_STATE_RELEASE_DATA;
 80018f4:	4b01      	ldr	r3, [pc, #4]	@ (80018fc <IMU_Control+0xc8>)
 80018f6:	2208      	movs	r2, #8
 80018f8:	701a      	strb	r2, [r3, #0]
			break;
 80018fa:	e134      	b.n	8001b66 <IMU_Control+0x332>
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000dcc 	.word	0x20000dcc
 8001904:	20000009 	.word	0x20000009
 8001908:	20001088 	.word	0x20001088
 800190c:	20000a7c 	.word	0x20000a7c
 8001910:	20000a84 	.word	0x20000a84
//			tsDebug.u16Accel[2] = filteredAccelData.z;
//			tsDebug.u16Gyro [0] = filteredGyroData.x;
//			tsDebug.u16Gyro [1] = filteredGyroData.y;
//			tsDebug.u16Gyro [2] = filteredGyroData.z;

			tsDebug.u16Accel[0] = accelData.x;
 8001914:	4b95      	ldr	r3, [pc, #596]	@ (8001b6c <IMU_Control+0x338>)
 8001916:	f9b3 2000 	ldrsh.w	r2, [r3]
 800191a:	4b95      	ldr	r3, [pc, #596]	@ (8001b70 <IMU_Control+0x33c>)
 800191c:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252
			tsDebug.u16Accel[1] = accelData.y;
 8001920:	4b92      	ldr	r3, [pc, #584]	@ (8001b6c <IMU_Control+0x338>)
 8001922:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001926:	4b92      	ldr	r3, [pc, #584]	@ (8001b70 <IMU_Control+0x33c>)
 8001928:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254
			tsDebug.u16Accel[2] = accelData.z;
 800192c:	4b8f      	ldr	r3, [pc, #572]	@ (8001b6c <IMU_Control+0x338>)
 800192e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001932:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <IMU_Control+0x33c>)
 8001934:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
			tsDebug.u16Gyro [0] = gyroData.x;
 8001938:	4b8e      	ldr	r3, [pc, #568]	@ (8001b74 <IMU_Control+0x340>)
 800193a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800193e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b70 <IMU_Control+0x33c>)
 8001940:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
			tsDebug.u16Gyro [1] = gyroData.y;
 8001944:	4b8b      	ldr	r3, [pc, #556]	@ (8001b74 <IMU_Control+0x340>)
 8001946:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800194a:	4b89      	ldr	r3, [pc, #548]	@ (8001b70 <IMU_Control+0x33c>)
 800194c:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
			tsDebug.u16Gyro [2] = gyroData.z;
 8001950:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <IMU_Control+0x340>)
 8001952:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001956:	4b86      	ldr	r3, [pc, #536]	@ (8001b70 <IMU_Control+0x33c>)
 8001958:	f8a3 225c 	strh.w	r2, [r3, #604]	@ 0x25c


			tsDebug.bReleaseIMUData = true;
 800195c:	4b84      	ldr	r3, [pc, #528]	@ (8001b70 <IMU_Control+0x33c>)
 800195e:	2201      	movs	r2, #1
 8001960:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
			IMU.u16SampleCount++;
 8001964:	4b84      	ldr	r3, [pc, #528]	@ (8001b78 <IMU_Control+0x344>)
 8001966:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 800196a:	b29b      	uxth	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b81      	ldr	r3, [pc, #516]	@ (8001b78 <IMU_Control+0x344>)
 8001972:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2

			// Put into buffer for BLE data output
			IMU.u8AxTxData[u8AxDataLen++] = ( (  		filteredAccelData.x & 0xFF00 ) >> 8 );
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <IMU_Control+0x348>)
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	1218      	asrs	r0, r3, #8
 800197e:	4b80      	ldr	r3, [pc, #512]	@ (8001b80 <IMU_Control+0x34c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	b2d1      	uxtb	r1, r2
 8001986:	4a7e      	ldr	r2, [pc, #504]	@ (8001b80 <IMU_Control+0x34c>)
 8001988:	7011      	strb	r1, [r2, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	b2c2      	uxtb	r2, r0
 800198e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b78 <IMU_Control+0x344>)
 8001990:	440b      	add	r3, r1
 8001992:	749a      	strb	r2, [r3, #18]
			IMU.u8AxTxData[u8AxDataLen++] = ( (uint8_t)  filteredAccelData.x & 0x00FF 		);
 8001994:	4b79      	ldr	r3, [pc, #484]	@ (8001b7c <IMU_Control+0x348>)
 8001996:	f9b3 0000 	ldrsh.w	r0, [r3]
 800199a:	4b79      	ldr	r3, [pc, #484]	@ (8001b80 <IMU_Control+0x34c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	b2d1      	uxtb	r1, r2
 80019a2:	4a77      	ldr	r2, [pc, #476]	@ (8001b80 <IMU_Control+0x34c>)
 80019a4:	7011      	strb	r1, [r2, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	b2c2      	uxtb	r2, r0
 80019aa:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <IMU_Control+0x344>)
 80019ac:	440b      	add	r3, r1
 80019ae:	749a      	strb	r2, [r3, #18]
			IMU.u8AyTxData[u8AyDataLen++] = ( (  		filteredAccelData.y & 0xFF00 ) >> 8 );
 80019b0:	4b72      	ldr	r3, [pc, #456]	@ (8001b7c <IMU_Control+0x348>)
 80019b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b6:	1218      	asrs	r0, r3, #8
 80019b8:	4b72      	ldr	r3, [pc, #456]	@ (8001b84 <IMU_Control+0x350>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	b2d1      	uxtb	r1, r2
 80019c0:	4a70      	ldr	r2, [pc, #448]	@ (8001b84 <IMU_Control+0x350>)
 80019c2:	7011      	strb	r1, [r2, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	b2c2      	uxtb	r2, r0
 80019c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <IMU_Control+0x344>)
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			IMU.u8AyTxData[u8AyDataLen++] = ( (uint8_t)  filteredAccelData.y & 0x00FF 		);
 80019d0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b7c <IMU_Control+0x348>)
 80019d2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80019d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001b84 <IMU_Control+0x350>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	b2d1      	uxtb	r1, r2
 80019de:	4a69      	ldr	r2, [pc, #420]	@ (8001b84 <IMU_Control+0x350>)
 80019e0:	7011      	strb	r1, [r2, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	b2c2      	uxtb	r2, r0
 80019e6:	4b64      	ldr	r3, [pc, #400]	@ (8001b78 <IMU_Control+0x344>)
 80019e8:	440b      	add	r3, r1
 80019ea:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			IMU.u8AzTxData[u8AzDataLen++] = ( (  		filteredAccelData.z & 0xFF00 ) >> 8 );
 80019ee:	4b63      	ldr	r3, [pc, #396]	@ (8001b7c <IMU_Control+0x348>)
 80019f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f4:	1218      	asrs	r0, r3, #8
 80019f6:	4b64      	ldr	r3, [pc, #400]	@ (8001b88 <IMU_Control+0x354>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	b2d1      	uxtb	r1, r2
 80019fe:	4a62      	ldr	r2, [pc, #392]	@ (8001b88 <IMU_Control+0x354>)
 8001a00:	7011      	strb	r1, [r2, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	b2c2      	uxtb	r2, r0
 8001a06:	4b5c      	ldr	r3, [pc, #368]	@ (8001b78 <IMU_Control+0x344>)
 8001a08:	440b      	add	r3, r1
 8001a0a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
			IMU.u8AzTxData[u8AzDataLen++] = ( (uint8_t)  filteredAccelData.z & 0x00FF 		);
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <IMU_Control+0x348>)
 8001a10:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001a14:	4b5c      	ldr	r3, [pc, #368]	@ (8001b88 <IMU_Control+0x354>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	b2d1      	uxtb	r1, r2
 8001a1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001b88 <IMU_Control+0x354>)
 8001a1e:	7011      	strb	r1, [r2, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	b2c2      	uxtb	r2, r0
 8001a24:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <IMU_Control+0x344>)
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

			// Put into buffer for BLE data output
			IMU.u8GxTxData[u8GxDataLen++] = ( (  		filteredGyroData.x & 0xFF00 ) >> 8 );
 8001a2c:	4b57      	ldr	r3, [pc, #348]	@ (8001b8c <IMU_Control+0x358>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	1218      	asrs	r0, r3, #8
 8001a34:	4b56      	ldr	r3, [pc, #344]	@ (8001b90 <IMU_Control+0x35c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	b2d1      	uxtb	r1, r2
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <IMU_Control+0x35c>)
 8001a3e:	7011      	strb	r1, [r2, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	b2c2      	uxtb	r2, r0
 8001a44:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <IMU_Control+0x344>)
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			IMU.u8GxTxData[u8GxDataLen++] = ( (uint8_t)  filteredGyroData.x & 0x00FF 		);
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b8c <IMU_Control+0x358>)
 8001a4e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001a52:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <IMU_Control+0x35c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	b2d1      	uxtb	r1, r2
 8001a5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001b90 <IMU_Control+0x35c>)
 8001a5c:	7011      	strb	r1, [r2, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	b2c2      	uxtb	r2, r0
 8001a62:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <IMU_Control+0x344>)
 8001a64:	440b      	add	r3, r1
 8001a66:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
			IMU.u8GyTxData[u8GyDataLen++] = ( (  		filteredGyroData.y & 0xFF00 ) >> 8 );
 8001a6a:	4b48      	ldr	r3, [pc, #288]	@ (8001b8c <IMU_Control+0x358>)
 8001a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a70:	1218      	asrs	r0, r3, #8
 8001a72:	4b48      	ldr	r3, [pc, #288]	@ (8001b94 <IMU_Control+0x360>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	b2d1      	uxtb	r1, r2
 8001a7a:	4a46      	ldr	r2, [pc, #280]	@ (8001b94 <IMU_Control+0x360>)
 8001a7c:	7011      	strb	r1, [r2, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	b2c2      	uxtb	r2, r0
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <IMU_Control+0x344>)
 8001a84:	440b      	add	r3, r1
 8001a86:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
			IMU.u8GyTxData[u8GyDataLen++] = ( (uint8_t)  filteredGyroData.y & 0x00FF 		);
 8001a8a:	4b40      	ldr	r3, [pc, #256]	@ (8001b8c <IMU_Control+0x358>)
 8001a8c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <IMU_Control+0x360>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	b2d1      	uxtb	r1, r2
 8001a98:	4a3e      	ldr	r2, [pc, #248]	@ (8001b94 <IMU_Control+0x360>)
 8001a9a:	7011      	strb	r1, [r2, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	b2c2      	uxtb	r2, r0
 8001aa0:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <IMU_Control+0x344>)
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
			IMU.u8GzTxData[u8GzDataLen++] = ( (  		filteredGyroData.z & 0xFF00 ) >> 8 );
 8001aa8:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <IMU_Control+0x358>)
 8001aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aae:	1218      	asrs	r0, r3, #8
 8001ab0:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <IMU_Control+0x364>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	b2d1      	uxtb	r1, r2
 8001ab8:	4a37      	ldr	r2, [pc, #220]	@ (8001b98 <IMU_Control+0x364>)
 8001aba:	7011      	strb	r1, [r2, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	b2c2      	uxtb	r2, r0
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <IMU_Control+0x344>)
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a
			IMU.u8GzTxData[u8GzDataLen++] = ( (uint8_t)  filteredGyroData.z & 0x00FF 		);
 8001ac8:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <IMU_Control+0x358>)
 8001aca:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001ace:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <IMU_Control+0x364>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	b2d1      	uxtb	r1, r2
 8001ad6:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <IMU_Control+0x364>)
 8001ad8:	7011      	strb	r1, [r2, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	b2c2      	uxtb	r2, r0
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <IMU_Control+0x344>)
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			// Check if buffer is getting full
			if ( u8AxDataLen >=  IMU_Data_Length )
 8001ae6:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <IMU_Control+0x34c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aec:	d931      	bls.n	8001b52 <IMU_Control+0x31e>
			{
				// Release the data into BLE notification
				tsStreamIMU.bReleaseAccelData = true;
 8001aee:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <IMU_Control+0x368>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				tsStreamIMU.bReleaseGyroData = true;
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <IMU_Control+0x368>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
				// Copy data lengths
				IMU.u8AxTxLen = u8AxDataLen; 	IMU.u8AyTxLen = u8AyDataLen; 	IMU.u8AzTxLen = u8AzDataLen;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <IMU_Control+0x34c>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <IMU_Control+0x344>)
 8001b04:	731a      	strb	r2, [r3, #12]
 8001b06:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <IMU_Control+0x350>)
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <IMU_Control+0x344>)
 8001b0c:	735a      	strb	r2, [r3, #13]
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <IMU_Control+0x354>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <IMU_Control+0x344>)
 8001b14:	739a      	strb	r2, [r3, #14]
				IMU.u8GxTxLen = u8GxDataLen; 	IMU.u8GyTxLen = u8GyDataLen; 	IMU.u8GzTxLen = u8GzDataLen;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <IMU_Control+0x35c>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <IMU_Control+0x344>)
 8001b1c:	73da      	strb	r2, [r3, #15]
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <IMU_Control+0x360>)
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <IMU_Control+0x344>)
 8001b24:	741a      	strb	r2, [r3, #16]
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <IMU_Control+0x364>)
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <IMU_Control+0x344>)
 8001b2c:	745a      	strb	r2, [r3, #17]

				// Reset the pointer
				u8AxDataLen = 0;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <IMU_Control+0x34c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
				u8AyDataLen = 0;
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <IMU_Control+0x350>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
				u8AzDataLen = 0;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <IMU_Control+0x354>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
				u8GxDataLen = 0;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <IMU_Control+0x35c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
				u8GyDataLen = 0;
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <IMU_Control+0x360>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
				u8GzDataLen = 0;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <IMU_Control+0x364>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
			}

			teIMU_State = IMU_STATE_SELECT_SLAVE;
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <IMU_Control+0x36c>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	701a      	strb	r2, [r3, #0]
			break;
 8001b58:	e005      	b.n	8001b66 <IMU_Control+0x332>

		//----------------------------------------------------
		default:

			teIMU_State = IMU_STATE_ERROR;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <IMU_Control+0x36c>)
 8001b5c:	2209      	movs	r2, #9
 8001b5e:	701a      	strb	r2, [r3, #0]
			IMU_Error();
 8001b60:	f000 f8a4 	bl	8001cac <IMU_Error>
			break;
 8001b64:	bf00      	nop
	}
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000a7c 	.word	0x20000a7c
 8001b70:	20000a90 	.word	0x20000a90
 8001b74:	20000a84 	.word	0x20000a84
 8001b78:	20000658 	.word	0x20000658
 8001b7c:	20000a6c 	.word	0x20000a6c
 8001b80:	20000a8a 	.word	0x20000a8a
 8001b84:	20000a8b 	.word	0x20000a8b
 8001b88:	20000a8c 	.word	0x20000a8c
 8001b8c:	20000a74 	.word	0x20000a74
 8001b90:	20000a8d 	.word	0x20000a8d
 8001b94:	20000a8e 	.word	0x20000a8e
 8001b98:	20000a8f 	.word	0x20000a8f
 8001b9c:	20000820 	.word	0x20000820
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <IMU_ReadID>:

//-----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_ReadID(I2C_HandleTypeDef *hi2c, uint8_t *id)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af04      	add	r7, sp, #16
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    return HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_WHO_AM_I, 1, id, 1, I2C_DELAY);
 8001bae:	230a      	movs	r3, #10
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	21d4      	movs	r1, #212	@ 0xd4
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f003 ff61 	bl	8005a88 <HAL_I2C_Mem_Read>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <IMU_ReadAccel>:
//-----------------------------------------------------------------------------------------------------

HAL_StatusTypeDef IMU_ReadAccel(I2C_HandleTypeDef *hi2c, tsVector3D *pData)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af04      	add	r7, sp, #16
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];

    if ( HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_OUTX_L_XL, 1, rawData, 6, I2C_DELAY) != HAL_OK )
 8001bda:	230a      	movs	r3, #10
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2306      	movs	r3, #6
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	2228      	movs	r2, #40	@ 0x28
 8001bec:	21d4      	movs	r1, #212	@ 0xd4
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f003 ff4a 	bl	8005a88 <HAL_I2C_Mem_Read>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <IMU_ReadAccel+0x2e>
    {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01b      	b.n	8001c36 <IMU_ReadAccel+0x66>
    }

    pData->x = (int16_t)((rawData[1] << 8) | rawData[0]);
 8001bfe:	7a7b      	ldrb	r3, [r7, #9]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	7a3b      	ldrb	r3, [r7, #8]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	801a      	strh	r2, [r3, #0]
    pData->y = (int16_t)((rawData[3] << 8) | rawData[2]);
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7abb      	ldrb	r3, [r7, #10]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	805a      	strh	r2, [r3, #2]
    pData->z = (int16_t)((rawData[5] << 8) | rawData[4]);
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <IMU_ReadGyro>:
//-----------------------------------------------------------------------------------------------------

HAL_StatusTypeDef IMU_ReadGyro(I2C_HandleTypeDef *hi2c, tsVector3D *pData)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b088      	sub	sp, #32
 8001c42:	af04      	add	r7, sp, #16
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];

    if ( HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_OUTX_L_G, 1, rawData, 6, I2C_DELAY) != HAL_OK )
 8001c48:	230a      	movs	r3, #10
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2301      	movs	r3, #1
 8001c58:	2222      	movs	r2, #34	@ 0x22
 8001c5a:	21d4      	movs	r1, #212	@ 0xd4
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f003 ff13 	bl	8005a88 <HAL_I2C_Mem_Read>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <IMU_ReadGyro+0x2e>
    {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01b      	b.n	8001ca4 <IMU_ReadGyro+0x66>
    }

    pData->x = (int16_t)((rawData[1] << 8) | rawData[0]);
 8001c6c:	7a7b      	ldrb	r3, [r7, #9]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	7a3b      	ldrb	r3, [r7, #8]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	801a      	strh	r2, [r3, #0]
    pData->y = (int16_t)((rawData[3] << 8) | rawData[2]);
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	7abb      	ldrb	r3, [r7, #10]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	805a      	strh	r2, [r3, #2]
    pData->z = (int16_t)((rawData[5] << 8) | rawData[4]);
 8001c90:	7b7b      	ldrb	r3, [r7, #13]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	7b3b      	ldrb	r3, [r7, #12]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <IMU_Error>:
//--------------------------------------------------------------------------------------------

void IMU_Error ( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	DIAG (" IMU ERROR\r\n");
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <IMU_Error+0x10>)
 8001cb2:	f000 fedf 	bl	8002a74 <DIAG>
	//SET_RGB_COLOR (RED);
	//tsSystem.u8Error |= eBus_Error;
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	080176f0 	.word	0x080176f0

08001cc0 <IMU_StreamDataPack>:
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t sensor, uint8_t *x_pData, uint8_t *y_pData, uint8_t *z_pData, uint8_t *outputString   )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
 	uint8_t index=0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4875      	ldr	r0, [pc, #468]	@ (8001eb0 <IMU_StreamDataPack+0x1f0>)
 8001cdc:	f014 fd3a 	bl	8016754 <memset>

 	outputString [index++] = 'S';
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	75fa      	strb	r2, [r7, #23]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	4413      	add	r3, r2
 8001cec:	2253      	movs	r2, #83	@ 0x53
 8001cee:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	75fa      	strb	r2, [r7, #23]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8001eb4 <IMU_StreamDataPack+0x1f4>)
 8001cfe:	7952      	ldrb	r2, [r2, #5]
 8001d00:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	75fa      	strb	r2, [r7, #23]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	222c      	movs	r2, #44	@ 0x2c
 8001d10:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	75fa      	strb	r2, [r7, #23]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2243      	movs	r2, #67	@ 0x43
 8001d20:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <IMU_StreamDataPack+0x7a>
 	{
 		outputString [index++] = '1';
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	75fa      	strb	r2, [r7, #23]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	4413      	add	r3, r2
 8001d34:	2231      	movs	r2, #49	@ 0x31
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e007      	b.n	8001d4a <IMU_StreamDataPack+0x8a>
 	}
 	else
 	{
 		outputString [index++] = '4';
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	75fa      	strb	r2, [r7, #23]
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	4413      	add	r3, r2
 8001d46:	2234      	movs	r2, #52	@ 0x34
 8001d48:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	75fa      	strb	r2, [r7, #23]
 8001d50:	461a      	mov	r2, r3
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	4413      	add	r3, r2
 8001d56:	222c      	movs	r2, #44	@ 0x2c
 8001d58:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	75fa      	strb	r2, [r7, #23]
 8001d60:	461a      	mov	r2, r3
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	4413      	add	r3, r2
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	75fa      	strb	r2, [r7, #23]
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	222c      	movs	r2, #44	@ 0x2c
 8001d78:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, x_pData, 64 );
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	4413      	add	r3, r2
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f014 fd88 	bl	801689a <memcpy>
 	index += 64;
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	3340      	adds	r3, #64	@ 0x40
 8001d8e:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	75fa      	strb	r2, [r7, #23]
 8001d96:	461a      	mov	r2, r3
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	222c      	movs	r2, #44	@ 0x2c
 8001d9e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	75fa      	strb	r2, [r7, #23]
 8001da6:	461a      	mov	r2, r3
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	4413      	add	r3, r2
 8001dac:	2243      	movs	r2, #67	@ 0x43
 8001dae:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <IMU_StreamDataPack+0x108>
 	{
 		outputString [index++] = '2';
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	75fa      	strb	r2, [r7, #23]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2232      	movs	r2, #50	@ 0x32
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <IMU_StreamDataPack+0x118>
 	}
 	else
 	{
 		outputString [index++] = '5';
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	75fa      	strb	r2, [r7, #23]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2235      	movs	r2, #53	@ 0x35
 8001dd6:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	75fa      	strb	r2, [r7, #23]
 8001dde:	461a      	mov	r2, r3
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	4413      	add	r3, r2
 8001de4:	222c      	movs	r2, #44	@ 0x2c
 8001de6:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	75fa      	strb	r2, [r7, #23]
 8001dee:	461a      	mov	r2, r3
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	4413      	add	r3, r2
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	75fa      	strb	r2, [r7, #23]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	4413      	add	r3, r2
 8001e04:	222c      	movs	r2, #44	@ 0x2c
 8001e06:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, y_pData, 64 );
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	6a3a      	ldr	r2, [r7, #32]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f014 fd41 	bl	801689a <memcpy>
 	index += 64;
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	3340      	adds	r3, #64	@ 0x40
 8001e1c:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	75fa      	strb	r2, [r7, #23]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	4413      	add	r3, r2
 8001e2a:	222c      	movs	r2, #44	@ 0x2c
 8001e2c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	75fa      	strb	r2, [r7, #23]
 8001e34:	461a      	mov	r2, r3
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	4413      	add	r3, r2
 8001e3a:	2243      	movs	r2, #67	@ 0x43
 8001e3c:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <IMU_StreamDataPack+0x196>
 	{
 		outputString [index++] = '3';
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	75fa      	strb	r2, [r7, #23]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	4413      	add	r3, r2
 8001e50:	2233      	movs	r2, #51	@ 0x33
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <IMU_StreamDataPack+0x1a6>
 	}
 	else
 	{
 		outputString [index++] = '6';
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	75fa      	strb	r2, [r7, #23]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	4413      	add	r3, r2
 8001e62:	2236      	movs	r2, #54	@ 0x36
 8001e64:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	75fa      	strb	r2, [r7, #23]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	4413      	add	r3, r2
 8001e72:	222c      	movs	r2, #44	@ 0x2c
 8001e74:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	75fa      	strb	r2, [r7, #23]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	4413      	add	r3, r2
 8001e82:	2240      	movs	r2, #64	@ 0x40
 8001e84:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	75fa      	strb	r2, [r7, #23]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	4413      	add	r3, r2
 8001e92:	222c      	movs	r2, #44	@ 0x2c
 8001e94:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, z_pData, 64 );
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	2240      	movs	r2, #64	@ 0x40
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f014 fcfa 	bl	801689a <memcpy>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000826 	.word	0x20000826
 8001eb4:	20001140 	.word	0x20001140

08001eb8 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ec4:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8001ec8:	68b8      	ldr	r0, [r7, #8]
 8001eca:	f7fe fb15 	bl	80004f8 <__aeabi_f2d>
 8001ece:	a321      	add	r3, pc, #132	@ (adr r3, 8001f54 <HighPassFilter_Init+0x9c>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fb68 	bl	80005a8 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HighPassFilter_Init+0x98>)
 8001ee2:	f7fe fc8b 	bl	80007fc <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fd6d 	bl	80009cc <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001efa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f02:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 8001f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	81da      	strh	r2, [r3, #14]
}
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	f3af 8000 	nop.w
 8001f50:	3ff00000 	.word	0x3ff00000
 8001f54:	54442d18 	.word	0x54442d18
 8001f58:	401921fb 	.word	0x401921fb

08001f5c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <APPD_EnableCPU2+0x34>)
 8001f64:	1d3c      	adds	r4, r7, #4
 8001f66:	461d      	mov	r5, r3
 8001f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f70:	c403      	stmia	r4!, {r0, r1}
 8001f72:	8022      	strh	r2, [r4, #0]
 8001f74:	3402      	adds	r4, #2
 8001f76:	0c13      	lsrs	r3, r2, #16
 8001f78:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001f7a:	f010 faa3 	bl	80124c4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00f fd34 	bl	80119ee <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001f86:	bf00      	nop
}
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08017700 	.word	0x08017700

08001f94 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001fa2:	897a      	ldrh	r2, [r7, #10]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f001 fbcd 	bl	8003748 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001fae:	bf00      	nop
}
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <LL_PWR_SMPS_Enable+0x1c>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <LL_PWR_SMPS_Enable+0x1c>)
 8001fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc6:	61d3      	str	r3, [r2, #28]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	58000400 	.word	0x58000400

08001fd8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe8:	4904      	ldr	r1, [pc, #16]	@ (8001ffc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61cb      	str	r3, [r1, #28]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000400 	.word	0x58000400

08002000 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f023 020f 	bic.w	r2, r3, #15
 8002022:	4913      	ldr	r1, [pc, #76]	@ (8002070 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4313      	orrs	r3, r2
 8002028:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800202a:	e019      	b.n	8002060 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b06      	subs	r3, #6
 8002030:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da02      	bge.n	8002046 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e004      	b.n	8002050 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	dd01      	ble.n	8002050 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800204c:	230f      	movs	r3, #15
 800204e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f023 020f 	bic.w	r2, r3, #15
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4905      	ldr	r1, [pc, #20]	@ (8002070 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800205c:	4313      	orrs	r3, r2
 800205e:	61cb      	str	r3, [r1, #28]
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	1fff7558 	.word	0x1fff7558
 8002070:	58000400 	.word	0x58000400

08002074 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <LL_C2_PWR_SetPowerMode+0x28>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4905      	ldr	r1, [pc, #20]	@ (800209c <LL_C2_PWR_SetPowerMode+0x28>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	58000400 	.word	0x58000400

080020a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80020aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80020ae:	4905      	ldr	r1, [pc, #20]	@ (80020c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	58000800 	.word	0x58000800

080020c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020e2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	cafecafe 	.word	0xcafecafe

08002104 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800215e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800217c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002184:	d101      	bne.n	800218a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021aa:	d101      	bne.n	80021b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <LL_DBGMCU_GetDeviceID+0x18>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e0042000 	.word	0xe0042000

0800220c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <LL_DBGMCU_GetRevisionID+0x18>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b29b      	uxth	r3, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e0042000 	.word	0xe0042000

08002228 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	605a      	str	r2, [r3, #4]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	615a      	str	r2, [r3, #20]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	619a      	str	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <LL_LPM_EnableSleep+0x1c>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <LL_LPM_EnableSleep+0x1c>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	6113      	str	r3, [r2, #16]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	22ff      	movs	r2, #255	@ 0xff
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	22ca      	movs	r2, #202	@ 0xca
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2253      	movs	r2, #83	@ 0x53
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 0207 	bic.w	r2, r3, #7
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <MX_APPE_Config+0x18>)
 8002372:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002376:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002378:	f000 f829 	bl	80023ce <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800237c:	f000 f868 	bl	8002450 <Config_HSE>

  return;
 8002380:	bf00      	nop
}
 8002382:	bd80      	pop	{r7, pc}
 8002384:	58004000 	.word	0x58004000

08002388 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800238c:	f000 f874 	bl	8002478 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002390:	f000 f88c 	bl	80024ac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <MX_APPE_Init+0x1c>)
 8002396:	2000      	movs	r0, #0
 8002398:	f000 ffe4 	bl	8003364 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800239c:	f000 f896 	bl	80024cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80023a0:	bf00      	nop
}
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000e70 	.word	0x20000e70

080023a8 <Init_Smps>:

void Init_Smps(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fe13 	bl	8001fd8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80023b2:	2004      	movs	r0, #4
 80023b4:	f7ff fe24 	bl	8002000 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80023b8:	f7ff fdfe 	bl	8001fb8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80023bc:	bf00      	nop
}
 80023be:	bd80      	pop	{r7, pc}

080023c0 <Init_Exti>:

void Init_Exti(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80023c4:	2050      	movs	r0, #80	@ 0x50
 80023c6:	f7ff fe6b 	bl	80020a0 <LL_EXTI_EnableIT_32_63>

  return;
 80023ca:	bf00      	nop
}
 80023cc:	bd80      	pop	{r7, pc}

080023ce <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80023d2:	f000 f804 	bl	80023de <Reset_BackupDomain>

  Reset_IPCC();
 80023d6:	f000 f819 	bl	800240c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80023da:	bf00      	nop
}
 80023dc:	bd80      	pop	{r7, pc}

080023de <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80023e2:	f7ff fec5 	bl	8002170 <LL_RCC_IsActiveFlag_PINRST>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <Reset_BackupDomain+0x2a>
 80023ec:	f7ff fed3 	bl	8002196 <LL_RCC_IsActiveFlag_SFTRST>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80023f6:	f005 fd33 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80023fa:	f005 fd31 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80023fe:	f7ff fe95 	bl	800212c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002402:	f7ff fea4 	bl	800214e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002406:	bf00      	nop
 8002408:	bf00      	nop
}
 800240a:	bd80      	pop	{r7, pc}

0800240c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002410:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002414:	f7ff fed2 	bl	80021bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002418:	213f      	movs	r1, #63	@ 0x3f
 800241a:	480c      	ldr	r0, [pc, #48]	@ (800244c <Reset_IPCC+0x40>)
 800241c:	f7ff ff4a 	bl	80022b4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8002420:	213f      	movs	r1, #63	@ 0x3f
 8002422:	480a      	ldr	r0, [pc, #40]	@ (800244c <Reset_IPCC+0x40>)
 8002424:	f7ff ff54 	bl	80022d0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002428:	213f      	movs	r1, #63	@ 0x3f
 800242a:	4808      	ldr	r0, [pc, #32]	@ (800244c <Reset_IPCC+0x40>)
 800242c:	f7ff fefc 	bl	8002228 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002430:	213f      	movs	r1, #63	@ 0x3f
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <Reset_IPCC+0x40>)
 8002434:	f7ff ff1b 	bl	800226e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002438:	213f      	movs	r1, #63	@ 0x3f
 800243a:	4804      	ldr	r0, [pc, #16]	@ (800244c <Reset_IPCC+0x40>)
 800243c:	f7ff ff06 	bl	800224c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002440:	213f      	movs	r1, #63	@ 0x3f
 8002442:	4802      	ldr	r0, [pc, #8]	@ (800244c <Reset_IPCC+0x40>)
 8002444:	f7ff ff25 	bl	8002292 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002448:	bf00      	nop
}
 800244a:	bd80      	pop	{r7, pc}
 800244c:	58000c00 	.word	0x58000c00

08002450 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002456:	2000      	movs	r0, #0
 8002458:	f010 f988 	bl	801276c <OTP_Read>
 800245c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	799b      	ldrb	r3, [r3, #6]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe2d 	bl	80020c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800246e:	bf00      	nop
 8002470:	bf00      	nop
}
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <System_Init>:

static void System_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  Init_Smps();
 800247c:	f7ff ff94 	bl	80023a8 <Init_Smps>

  Init_Exti();
 8002480:	f7ff ff9e 	bl	80023c0 <Init_Exti>

  Init_Rtc();
 8002484:	f000 f802 	bl	800248c <Init_Rtc>

  return;
 8002488:	bf00      	nop
}
 800248a:	bd80      	pop	{r7, pc}

0800248c <Init_Rtc>:

static void Init_Rtc(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002490:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <Init_Rtc+0x1c>)
 8002492:	f7ff ff48 	bl	8002326 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002496:	2100      	movs	r1, #0
 8002498:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <Init_Rtc+0x1c>)
 800249a:	f7ff ff54 	bl	8002346 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800249e:	4802      	ldr	r0, [pc, #8]	@ (80024a8 <Init_Rtc+0x1c>)
 80024a0:	f7ff ff34 	bl	800230c <LL_RTC_EnableWriteProtection>

  return;
 80024a4:	bf00      	nop
}
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40002800 	.word	0x40002800

080024ac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80024b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024b4:	f7ff fe26 	bl	8002104 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80024b8:	f013 fc86 	bl	8015dc8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80024bc:	2004      	movs	r0, #4
 80024be:	f7ff fdd9 	bl	8002074 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 80024c2:	f005 fceb 	bl	8007e9c <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80024c6:	bf00      	nop
}
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80024d2:	f00f fe41 	bl	8012158 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <appe_Tl_Init+0x50>)
 80024d8:	2100      	movs	r1, #0
 80024da:	2040      	movs	r0, #64	@ 0x40
 80024dc:	f013 fdb2 	bl	8016044 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <appe_Tl_Init+0x54>)
 80024e2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <appe_Tl_Init+0x58>)
 80024e6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	480e      	ldr	r0, [pc, #56]	@ (8002528 <appe_Tl_Init+0x5c>)
 80024ee:	f00f fcf5 	bl	8011edc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <appe_Tl_Init+0x60>)
 80024f4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <appe_Tl_Init+0x64>)
 80024f8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <appe_Tl_Init+0x68>)
 80024fc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80024fe:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 8002502:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f00f ff67 	bl	80123dc <TL_MM_Init>

  TL_Enable();
 800250e:	f00f fe1d 	bl	801214c <TL_Enable>

  return;
 8002512:	bf00      	nop
}
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	08011f15 	.word	0x08011f15
 8002520:	20031c24 	.word	0x20031c24
 8002524:	08002539 	.word	0x08002539
 8002528:	08002551 	.word	0x08002551
 800252c:	20031e3c 	.word	0x20031e3c
 8002530:	20031d30 	.word	0x20031d30
 8002534:	200301f8 	.word	0x200301f8

08002538 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002542:	bf00      	nop
}
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	330b      	adds	r3, #11
 800255e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800256a:	2b07      	cmp	r3, #7
 800256c:	f200 80d0 	bhi.w	8002710 <APPE_SysUserEvtRx+0x1c0>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <APPE_SysUserEvtRx+0x28>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002599 	.word	0x08002599
 800257c:	0800262b 	.word	0x0800262b
 8002580:	0800264d 	.word	0x0800264d
 8002584:	08002711 	.word	0x08002711
 8002588:	08002691 	.word	0x08002691
 800258c:	080026b5 	.word	0x080026b5
 8002590:	080026d1 	.word	0x080026d1
 8002594:	080026f5 	.word	0x080026f5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4618      	mov	r0, r3
 800259e:	f00f fa53 	bl	8011a48 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80025a2:	485e      	ldr	r0, [pc, #376]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80025a4:	f010 f81a 	bl	80125dc <DbgTraceGetFileName>
 80025a8:	4601      	mov	r1, r0
 80025aa:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80025ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 80025b0:	485c      	ldr	r0, [pc, #368]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80025b2:	f013 ff47 	bl	8016444 <iprintf>
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	4619      	mov	r1, r3
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	461a      	mov	r2, r3
 80025be:	7bbb      	ldrb	r3, [r7, #14]
 80025c0:	4859      	ldr	r0, [pc, #356]	@ (8002728 <APPE_SysUserEvtRx+0x1d8>)
 80025c2:	f013 ff3f 	bl	8016444 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80025c6:	4855      	ldr	r0, [pc, #340]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80025c8:	f010 f808 	bl	80125dc <DbgTraceGetFileName>
 80025cc:	4601      	mov	r1, r0
 80025ce:	f240 136b 	movw	r3, #363	@ 0x16b
 80025d2:	4a53      	ldr	r2, [pc, #332]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 80025d4:	4853      	ldr	r0, [pc, #332]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80025d6:	f013 ff35 	bl	8016444 <iprintf>
 80025da:	7c3b      	ldrb	r3, [r7, #16]
 80025dc:	4619      	mov	r1, r3
 80025de:	4853      	ldr	r0, [pc, #332]	@ (800272c <APPE_SysUserEvtRx+0x1dc>)
 80025e0:	f013 ff30 	bl	8016444 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80025e4:	484d      	ldr	r0, [pc, #308]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80025e6:	f00f fff9 	bl	80125dc <DbgTraceGetFileName>
 80025ea:	4601      	mov	r1, r0
 80025ec:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80025f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 80025f2:	484c      	ldr	r0, [pc, #304]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80025f4:	f013 ff26 	bl	8016444 <iprintf>
 80025f8:	7dbb      	ldrb	r3, [r7, #22]
 80025fa:	4619      	mov	r1, r3
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	461a      	mov	r2, r3
 8002600:	7e3b      	ldrb	r3, [r7, #24]
 8002602:	484b      	ldr	r0, [pc, #300]	@ (8002730 <APPE_SysUserEvtRx+0x1e0>)
 8002604:	f013 ff1e 	bl	8016444 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002608:	4844      	ldr	r0, [pc, #272]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 800260a:	f00f ffe7 	bl	80125dc <DbgTraceGetFileName>
 800260e:	4601      	mov	r1, r0
 8002610:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002614:	4a42      	ldr	r2, [pc, #264]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 8002616:	4843      	ldr	r0, [pc, #268]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 8002618:	f013 ff14 	bl	8016444 <iprintf>
 800261c:	4845      	ldr	r0, [pc, #276]	@ (8002734 <APPE_SysUserEvtRx+0x1e4>)
 800261e:	f013 ff11 	bl	8016444 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8e0 	bl	80027e8 <APPE_SysEvtReadyProcessing>
    break;
 8002628:	e073      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800262a:	483c      	ldr	r0, [pc, #240]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 800262c:	f00f ffd6 	bl	80125dc <DbgTraceGetFileName>
 8002630:	4601      	mov	r1, r0
 8002632:	f240 1373 	movw	r3, #371	@ 0x173
 8002636:	4a3a      	ldr	r2, [pc, #232]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 8002638:	483a      	ldr	r0, [pc, #232]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 800263a:	f013 ff03 	bl	8016444 <iprintf>
 800263e:	483e      	ldr	r0, [pc, #248]	@ (8002738 <APPE_SysUserEvtRx+0x1e8>)
 8002640:	f013 ff00 	bl	8016444 <iprintf>
    APPE_SysEvtError(pPayload);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f885 	bl	8002754 <APPE_SysEvtError>
    break;
 800264a:	e062      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800264c:	4833      	ldr	r0, [pc, #204]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 800264e:	f00f ffc5 	bl	80125dc <DbgTraceGetFileName>
 8002652:	4601      	mov	r1, r0
 8002654:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002658:	4a31      	ldr	r2, [pc, #196]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 800265a:	4832      	ldr	r0, [pc, #200]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 800265c:	f013 fef2 	bl	8016444 <iprintf>
 8002660:	4836      	ldr	r0, [pc, #216]	@ (800273c <APPE_SysUserEvtRx+0x1ec>)
 8002662:	f013 ff5f 	bl	8016524 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8002666:	482d      	ldr	r0, [pc, #180]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 8002668:	f00f ffb8 	bl	80125dc <DbgTraceGetFileName>
 800266c:	4601      	mov	r1, r0
 800266e:	f240 1379 	movw	r3, #377	@ 0x179
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 8002674:	482b      	ldr	r0, [pc, #172]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 8002676:	f013 fee5 	bl	8016444 <iprintf>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3302      	adds	r3, #2
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3302      	adds	r3, #2
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	461a      	mov	r2, r3
 8002688:	482d      	ldr	r0, [pc, #180]	@ (8002740 <APPE_SysUserEvtRx+0x1f0>)
 800268a:	f013 fedb 	bl	8016444 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800268e:	e040      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002690:	4822      	ldr	r0, [pc, #136]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 8002692:	f00f ffa3 	bl	80125dc <DbgTraceGetFileName>
 8002696:	4601      	mov	r1, r0
 8002698:	f240 137f 	movw	r3, #383	@ 0x17f
 800269c:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 800269e:	4821      	ldr	r0, [pc, #132]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80026a0:	f013 fed0 	bl	8016444 <iprintf>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3302      	adds	r3, #2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4825      	ldr	r0, [pc, #148]	@ (8002744 <APPE_SysUserEvtRx+0x1f4>)
 80026ae:	f013 fec9 	bl	8016444 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80026b2:	e02e      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80026b4:	4819      	ldr	r0, [pc, #100]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80026b6:	f00f ff91 	bl	80125dc <DbgTraceGetFileName>
 80026ba:	4601      	mov	r1, r0
 80026bc:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80026c0:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 80026c2:	4818      	ldr	r0, [pc, #96]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80026c4:	f013 febe 	bl	8016444 <iprintf>
 80026c8:	481f      	ldr	r0, [pc, #124]	@ (8002748 <APPE_SysUserEvtRx+0x1f8>)
 80026ca:	f013 febb 	bl	8016444 <iprintf>
    break;
 80026ce:	e020      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80026d0:	4812      	ldr	r0, [pc, #72]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80026d2:	f00f ff83 	bl	80125dc <DbgTraceGetFileName>
 80026d6:	4601      	mov	r1, r0
 80026d8:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80026dc:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 80026de:	4811      	ldr	r0, [pc, #68]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 80026e0:	f013 feb0 	bl	8016444 <iprintf>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3302      	adds	r3, #2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4817      	ldr	r0, [pc, #92]	@ (800274c <APPE_SysUserEvtRx+0x1fc>)
 80026ee:	f013 fea9 	bl	8016444 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80026f2:	e00e      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80026f4:	4809      	ldr	r0, [pc, #36]	@ (800271c <APPE_SysUserEvtRx+0x1cc>)
 80026f6:	f00f ff71 	bl	80125dc <DbgTraceGetFileName>
 80026fa:	4601      	mov	r1, r0
 80026fc:	f240 138d 	movw	r3, #397	@ 0x18d
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <APPE_SysUserEvtRx+0x1d0>)
 8002702:	4808      	ldr	r0, [pc, #32]	@ (8002724 <APPE_SysUserEvtRx+0x1d4>)
 8002704:	f013 fe9e 	bl	8016444 <iprintf>
 8002708:	4811      	ldr	r0, [pc, #68]	@ (8002750 <APPE_SysUserEvtRx+0x200>)
 800270a:	f013 fe9b 	bl	8016444 <iprintf>
    break;
 800270e:	e000      	b.n	8002712 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002710:	bf00      	nop
  }

  return;
 8002712:	bf00      	nop
}
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0801771c 	.word	0x0801771c
 8002720:	08019210 	.word	0x08019210
 8002724:	08017734 	.word	0x08017734
 8002728:	08017748 	.word	0x08017748
 800272c:	0801776c 	.word	0x0801776c
 8002730:	08017788 	.word	0x08017788
 8002734:	080177a0 	.word	0x080177a0
 8002738:	080177c0 	.word	0x080177c0
 800273c:	080177e4 	.word	0x080177e4
 8002740:	08017834 	.word	0x08017834
 8002744:	0801785c 	.word	0x0801785c
 8002748:	08017898 	.word	0x08017898
 800274c:	080178bc 	.word	0x080178bc
 8002750:	080178f8 	.word	0x080178f8

08002754 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	330b      	adds	r3, #11
 8002762:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3302      	adds	r3, #2
 8002768:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800276a:	4819      	ldr	r0, [pc, #100]	@ (80027d0 <APPE_SysEvtError+0x7c>)
 800276c:	f00f ff36 	bl	80125dc <DbgTraceGetFileName>
 8002770:	4601      	mov	r1, r0
 8002772:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8002776:	4a17      	ldr	r2, [pc, #92]	@ (80027d4 <APPE_SysEvtError+0x80>)
 8002778:	4817      	ldr	r0, [pc, #92]	@ (80027d8 <APPE_SysEvtError+0x84>)
 800277a:	f013 fe63 	bl	8016444 <iprintf>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4815      	ldr	r0, [pc, #84]	@ (80027dc <APPE_SysEvtError+0x88>)
 8002786:	f013 fe5d 	bl	8016444 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8002792:	480f      	ldr	r0, [pc, #60]	@ (80027d0 <APPE_SysEvtError+0x7c>)
 8002794:	f00f ff22 	bl	80125dc <DbgTraceGetFileName>
 8002798:	4601      	mov	r1, r0
 800279a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800279e:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <APPE_SysEvtError+0x80>)
 80027a0:	480d      	ldr	r0, [pc, #52]	@ (80027d8 <APPE_SysEvtError+0x84>)
 80027a2:	f013 fe4f 	bl	8016444 <iprintf>
 80027a6:	480e      	ldr	r0, [pc, #56]	@ (80027e0 <APPE_SysEvtError+0x8c>)
 80027a8:	f013 febc 	bl	8016524 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80027ac:	e00d      	b.n	80027ca <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80027ae:	4808      	ldr	r0, [pc, #32]	@ (80027d0 <APPE_SysEvtError+0x7c>)
 80027b0:	f00f ff14 	bl	80125dc <DbgTraceGetFileName>
 80027b4:	4601      	mov	r1, r0
 80027b6:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80027ba:	4a06      	ldr	r2, [pc, #24]	@ (80027d4 <APPE_SysEvtError+0x80>)
 80027bc:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <APPE_SysEvtError+0x84>)
 80027be:	f013 fe41 	bl	8016444 <iprintf>
 80027c2:	4808      	ldr	r0, [pc, #32]	@ (80027e4 <APPE_SysEvtError+0x90>)
 80027c4:	f013 feae 	bl	8016524 <puts>
  return;
 80027c8:	bf00      	nop
}
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	0801771c 	.word	0x0801771c
 80027d4:	08019224 	.word	0x08019224
 80027d8:	08017734 	.word	0x08017734
 80027dc:	0801791c 	.word	0x0801791c
 80027e0:	0801794c 	.word	0x0801794c
 80027e4:	08017988 	.word	0x08017988

080027e8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	330b      	adds	r3, #11
 800280c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3302      	adds	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d146      	bne.n	80028aa <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800281c:	4836      	ldr	r0, [pc, #216]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x110>)
 800281e:	f00f fedd 	bl	80125dc <DbgTraceGetFileName>
 8002822:	4601      	mov	r1, r0
 8002824:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002828:	4a34      	ldr	r2, [pc, #208]	@ (80028fc <APPE_SysEvtReadyProcessing+0x114>)
 800282a:	4835      	ldr	r0, [pc, #212]	@ (8002900 <APPE_SysEvtReadyProcessing+0x118>)
 800282c:	f013 fe0a 	bl	8016444 <iprintf>
 8002830:	4834      	ldr	r0, [pc, #208]	@ (8002904 <APPE_SysEvtReadyProcessing+0x11c>)
 8002832:	f013 fe77 	bl	8016524 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002836:	f7ff fb91 	bl	8001f5c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800283a:	230f      	movs	r3, #15
 800283c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800283e:	237f      	movs	r3, #127	@ 0x7f
 8002840:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002842:	f7ff fce3 	bl	800220c <LL_DBGMCU_GetRevisionID>
 8002846:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002848:	482b      	ldr	r0, [pc, #172]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x110>)
 800284a:	f00f fec7 	bl	80125dc <DbgTraceGetFileName>
 800284e:	4601      	mov	r1, r0
 8002850:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002854:	4a29      	ldr	r2, [pc, #164]	@ (80028fc <APPE_SysEvtReadyProcessing+0x114>)
 8002856:	482a      	ldr	r0, [pc, #168]	@ (8002900 <APPE_SysEvtReadyProcessing+0x118>)
 8002858:	f013 fdf4 	bl	8016444 <iprintf>
 800285c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800285e:	482a      	ldr	r0, [pc, #168]	@ (8002908 <APPE_SysEvtReadyProcessing+0x120>)
 8002860:	f013 fdf0 	bl	8016444 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	b29b      	uxth	r3, r3
 8002868:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800286a:	f7ff fcc1 	bl	80021f0 <LL_DBGMCU_GetDeviceID>
 800286e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002870:	4821      	ldr	r0, [pc, #132]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x110>)
 8002872:	f00f feb3 	bl	80125dc <DbgTraceGetFileName>
 8002876:	4601      	mov	r1, r0
 8002878:	f240 13e1 	movw	r3, #481	@ 0x1e1
 800287c:	4a1f      	ldr	r2, [pc, #124]	@ (80028fc <APPE_SysEvtReadyProcessing+0x114>)
 800287e:	4820      	ldr	r0, [pc, #128]	@ (8002900 <APPE_SysEvtReadyProcessing+0x118>)
 8002880:	f013 fde0 	bl	8016444 <iprintf>
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	4821      	ldr	r0, [pc, #132]	@ (800290c <APPE_SysEvtReadyProcessing+0x124>)
 8002888:	f013 fddc 	bl	8016444 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	b29b      	uxth	r3, r3
 8002890:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f00f f8c0 	bl	8011a1c <SHCI_C2_Config>

    APP_BLE_Init();
 800289c:	f010 fc3a 	bl	8013114 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80028a0:	2100      	movs	r1, #0
 80028a2:	2001      	movs	r0, #1
 80028a4:	f013 faa2 	bl	8015dec <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80028a8:	e022      	b.n	80028f0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d110      	bne.n	80028d4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80028b2:	4811      	ldr	r0, [pc, #68]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x110>)
 80028b4:	f00f fe92 	bl	80125dc <DbgTraceGetFileName>
 80028b8:	4601      	mov	r1, r0
 80028ba:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80028be:	4a0f      	ldr	r2, [pc, #60]	@ (80028fc <APPE_SysEvtReadyProcessing+0x114>)
 80028c0:	480f      	ldr	r0, [pc, #60]	@ (8002900 <APPE_SysEvtReadyProcessing+0x118>)
 80028c2:	f013 fdbf 	bl	8016444 <iprintf>
 80028c6:	4812      	ldr	r0, [pc, #72]	@ (8002910 <APPE_SysEvtReadyProcessing+0x128>)
 80028c8:	f013 fdbc 	bl	8016444 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
  return;
 80028d2:	e00d      	b.n	80028f0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80028d4:	4808      	ldr	r0, [pc, #32]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x110>)
 80028d6:	f00f fe81 	bl	80125dc <DbgTraceGetFileName>
 80028da:	4601      	mov	r1, r0
 80028dc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80028e0:	4a06      	ldr	r2, [pc, #24]	@ (80028fc <APPE_SysEvtReadyProcessing+0x114>)
 80028e2:	4807      	ldr	r0, [pc, #28]	@ (8002900 <APPE_SysEvtReadyProcessing+0x118>)
 80028e4:	f013 fdae 	bl	8016444 <iprintf>
 80028e8:	480a      	ldr	r0, [pc, #40]	@ (8002914 <APPE_SysEvtReadyProcessing+0x12c>)
 80028ea:	f013 fdab 	bl	8016444 <iprintf>
  return;
 80028ee:	bf00      	nop
}
 80028f0:	3728      	adds	r7, #40	@ 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0801771c 	.word	0x0801771c
 80028fc:	08019238 	.word	0x08019238
 8002900:	08017734 	.word	0x08017734
 8002904:	080179c0 	.word	0x080179c0
 8002908:	080179dc 	.word	0x080179dc
 800290c:	08017a00 	.word	0x08017a00
 8002910:	08017a20 	.word	0x08017a20
 8002914:	08017a54 	.word	0x08017a54

08002918 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f002 f956 	bl	8004bd0 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d00a      	beq.n	8002948 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002932:	f002 f965 	bl	8004c00 <HAL_GetTickFreq>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002940:	e002      	b.n	8002948 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002942:	f7ff fcd3 	bl	80022ec <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002946:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002948:	f002 f942 	bl	8004bd0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f4      	bhi.n	8002942 <HAL_Delay+0x2a>
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	f013 fa6f 	bl	8015e4c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}

08002972 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002976:	bf00      	nop
}
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800298a:	f04f 30ff 	mov.w	r0, #4294967295
 800298e:	f013 fa5d 	bl	8015e4c <UTIL_SEQ_Run>
  return;
 8002992:	bf00      	nop
}
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80029a2:	2100      	movs	r1, #0
 80029a4:	2040      	movs	r0, #64	@ 0x40
 80029a6:	f013 fb6f 	bl	8016088 <UTIL_SEQ_SetTask>
  return;
 80029aa:	bf00      	nop
}
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029ba:	2002      	movs	r0, #2
 80029bc:	f013 fbd0 	bl	8016160 <UTIL_SEQ_SetEvt>
  return;
 80029c0:	bf00      	nop
}
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029d0:	2002      	movs	r0, #2
 80029d2:	f013 fbe5 	bl	80161a0 <UTIL_SEQ_WaitEvt>
  return;
 80029d6:	bf00      	nop
}
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <Debug_Init>:
uint16_t u16dummy =0;


//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 80029e4:	4803      	ldr	r0, [pc, #12]	@ (80029f4 <Debug_Init+0x14>)
 80029e6:	f000 f845 	bl	8002a74 <DIAG>
	HAL_Delay(10);
 80029ea:	200a      	movs	r0, #10
 80029ec:	f7ff ff94 	bl	8002918 <HAL_Delay>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	08017a88 	.word	0x08017a88

080029f8 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af04      	add	r7, sp, #16
			}
		#endif


		#ifdef 	IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <Debug_Control+0x74>)
 8002a00:	f893 3264 	ldrb.w	r3, [r3, #612]	@ 0x264
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02c      	beq.n	8002a62 <Debug_Control+0x6a>
			{
//				DIAG (  "%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
//						AFE.u16SPS, IMU.u16SPS,
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2],
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <Debug_Control+0x74>)
 8002a0a:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a0e:	461c      	mov	r4, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2],
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <Debug_Control+0x74>)
 8002a12:	f9b3 3252 	ldrsh.w	r3, [r3, #594]	@ 0x252
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a16:	461d      	mov	r5, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2],
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <Debug_Control+0x74>)
 8002a1a:	f9b3 3254 	ldrsh.w	r3, [r3, #596]	@ 0x254
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a1e:	461e      	mov	r6, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2],
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <Debug_Control+0x74>)
 8002a22:	f9b3 3256 	ldrsh.w	r3, [r3, #598]	@ 0x256
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a26:	461a      	mov	r2, r3
						tsDebug.u16Gyro[0], tsDebug.u16Gyro[1], tsDebug.u16Gyro[2] );
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <Debug_Control+0x74>)
 8002a2a:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a2e:	4619      	mov	r1, r3
						tsDebug.u16Gyro[0], tsDebug.u16Gyro[1], tsDebug.u16Gyro[2] );
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <Debug_Control+0x74>)
 8002a32:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a36:	4618      	mov	r0, r3
						tsDebug.u16Gyro[0], tsDebug.u16Gyro[1], tsDebug.u16Gyro[2] );
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <Debug_Control+0x74>)
 8002a3a:	f9b3 325c 	ldrsh.w	r3, [r3, #604]	@ 0x25c
				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
 8002a3e:	9303      	str	r3, [sp, #12]
 8002a40:	9002      	str	r0, [sp, #8]
 8002a42:	9101      	str	r1, [sp, #4]
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	4633      	mov	r3, r6
 8002a48:	462a      	mov	r2, r5
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <Debug_Control+0x78>)
 8002a4e:	f000 f811 	bl	8002a74 <DIAG>

//				DIAG (  "%d,%d,%d,%d\r\n",
//						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2]);

				tsDebug.bReleaseIMUData= false;
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <Debug_Control+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
				tsDebug.bReleaseAFEData= false;
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <Debug_Control+0x74>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
			}
		#endif

#endif
#endif
}
 8002a62:	bf00      	nop
 8002a64:	3704      	adds	r7, #4
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000a90 	.word	0x20000a90
 8002a70:	08017aa0 	.word	0x08017aa0

08002a74 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002a74:	b40f      	push	{r0, r1, r2, r3}
 8002a76:	b580      	push	{r7, lr}
 8002a78:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002a7c:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002a7e:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002a82:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a86:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a8a:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002a8c:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a90:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a94:	f107 0008 	add.w	r0, r7, #8
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002a9e:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002aa2:	f013 fdb5 	bl	8016610 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002aa6:	f107 0308 	add.w	r3, r7, #8
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fb68 	bl	8000180 <strlen>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f012 fce2 	bl	8015484 <CDC_Transmit_FS>
}
 8002ac0:	bf00      	nop
 8002ac2:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002acc:	b004      	add	sp, #16
 8002ace:	4770      	bx	lr

08002ad0 <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b80      	cmp	r3, #128	@ 0x80
 8002ade:	d105      	bne.n	8002aec <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0x58>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002ae8:	2280      	movs	r2, #128	@ 0x80
 8002aea:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d109      	bne.n	8002b06 <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x60>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 21c6 	strb.w	r2, [r3, #454]	@ 0x1c6
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002afc:	2210      	movs	r2, #16
 8002afe:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b02:	f7ff ffb7 	bl	8002a74 <DIAG>
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT2_Pin)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d109      	bne.n	8002b20 <HAL_GPIO_EXTI_Callback+0x50>
	{
		IMU.bInt2 = true;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 21c7 	strb.w	r2, [r3, #455]	@ 0x1c7
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT2_Pin);
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b16:	2220      	movs	r2, #32
 8002b18:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT2 \r\n");
 8002b1a:	4807      	ldr	r0, [pc, #28]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x68>)
 8002b1c:	f7ff ffaa 	bl	8002a74 <DIAG>
	}

}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000208 	.word	0x20000208
 8002b2c:	58000800 	.word	0x58000800
 8002b30:	20000658 	.word	0x20000658
 8002b34:	08017ad0 	.word	0x08017ad0
 8002b38:	08017ae0 	.word	0x08017ae0

08002b3c <LL_EXTI_EnableIT_0_31>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b46:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b4a:	4905      	ldr	r1, [pc, #20]	@ (8002b60 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	58000800 	.word	0x58000800

08002b64 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4904      	ldr	r1, [pc, #16]	@ (8002b84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]

}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	58000800 	.word	0x58000800

08002b88 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <ReadRtcSsrValue+0x3c>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <ReadRtcSsrValue+0x3c>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b9e:	e005      	b.n	8002bac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <ReadRtcSsrValue+0x3c>)
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1f5      	bne.n	8002ba0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002bb4:	683b      	ldr	r3, [r7, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40002800 	.word	0x40002800

08002bc8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002bd8:	79ba      	ldrb	r2, [r7, #6]
 8002bda:	491d      	ldr	r1, [pc, #116]	@ (8002c50 <LinkTimerAfter+0x88>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3315      	adds	r3, #21
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d009      	beq.n	8002c06 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <LinkTimerAfter+0x88>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3314      	adds	r3, #20
 8002c02:	79fa      	ldrb	r2, [r7, #7]
 8002c04:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	4911      	ldr	r1, [pc, #68]	@ (8002c50 <LinkTimerAfter+0x88>)
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	3315      	adds	r3, #21
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <LinkTimerAfter+0x88>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3314      	adds	r3, #20
 8002c2a:	79ba      	ldrb	r2, [r7, #6]
 8002c2c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002c2e:	79ba      	ldrb	r2, [r7, #6]
 8002c30:	4907      	ldr	r1, [pc, #28]	@ (8002c50 <LinkTimerAfter+0x88>)
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3315      	adds	r3, #21
 8002c3e:	79fa      	ldrb	r2, [r7, #7]
 8002c40:	701a      	strb	r2, [r3, #0]

  return;
 8002c42:	bf00      	nop
}
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000cf8 	.word	0x20000cf8

08002c54 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	71fb      	strb	r3, [r7, #7]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002c64:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <LinkTimerBefore+0xb8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	79ba      	ldrb	r2, [r7, #6]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d032      	beq.n	8002cd6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c70:	79ba      	ldrb	r2, [r7, #6]
 8002c72:	4927      	ldr	r1, [pc, #156]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3314      	adds	r3, #20
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	4922      	ldr	r1, [pc, #136]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3315      	adds	r3, #21
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	491d      	ldr	r1, [pc, #116]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3315      	adds	r3, #21
 8002ca8:	79ba      	ldrb	r2, [r7, #6]
 8002caa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	4918      	ldr	r1, [pc, #96]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3314      	adds	r3, #20
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002cc0:	79ba      	ldrb	r2, [r7, #6]
 8002cc2:	4913      	ldr	r1, [pc, #76]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	3314      	adds	r3, #20
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002cd4:	e014      	b.n	8002d00 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	490d      	ldr	r1, [pc, #52]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3315      	adds	r3, #21
 8002ce6:	79ba      	ldrb	r2, [r7, #6]
 8002ce8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002cea:	79ba      	ldrb	r2, [r7, #6]
 8002cec:	4908      	ldr	r1, [pc, #32]	@ (8002d10 <LinkTimerBefore+0xbc>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3314      	adds	r3, #20
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	701a      	strb	r2, [r3, #0]
  return;
 8002cfe:	bf00      	nop
}
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000d88 	.word	0x20000d88
 8002d10:	20000cf8 	.word	0x20000cf8

08002d14 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e58 <linkTimer+0x144>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d118      	bne.n	8002d5a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002d28:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <linkTimer+0x144>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e5c <linkTimer+0x148>)
 8002d30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002d32:	4a49      	ldr	r2, [pc, #292]	@ (8002e58 <linkTimer+0x144>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	4949      	ldr	r1, [pc, #292]	@ (8002e60 <linkTimer+0x14c>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3315      	adds	r3, #21
 8002d48:	2206      	movs	r2, #6
 8002d4a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d4c:	4b45      	ldr	r3, [pc, #276]	@ (8002e64 <linkTimer+0x150>)
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	81fb      	strh	r3, [r7, #14]
 8002d58:	e078      	b.n	8002e4c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002d5a:	f000 f909 	bl	8002f70 <ReturnTimeElapsed>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002d62:	79fa      	ldrb	r2, [r7, #7]
 8002d64:	493e      	ldr	r1, [pc, #248]	@ (8002e60 <linkTimer+0x14c>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3308      	adds	r3, #8
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	4419      	add	r1, r3
 8002d7a:	4839      	ldr	r0, [pc, #228]	@ (8002e60 <linkTimer+0x14c>)
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4403      	add	r3, r0
 8002d86:	3308      	adds	r3, #8
 8002d88:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
 8002d8c:	4934      	ldr	r1, [pc, #208]	@ (8002e60 <linkTimer+0x14c>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3308      	adds	r3, #8
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <linkTimer+0x144>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4619      	mov	r1, r3
 8002da6:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <linkTimer+0x14c>)
 8002da8:	460b      	mov	r3, r1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	440b      	add	r3, r1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	3308      	adds	r3, #8
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d337      	bcc.n	8002e2c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002dbc:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <linkTimer+0x144>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002dc2:	7b7a      	ldrb	r2, [r7, #13]
 8002dc4:	4926      	ldr	r1, [pc, #152]	@ (8002e60 <linkTimer+0x14c>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3315      	adds	r3, #21
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002dd6:	e013      	b.n	8002e00 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002dd8:	7b7a      	ldrb	r2, [r7, #13]
 8002dda:	4921      	ldr	r1, [pc, #132]	@ (8002e60 <linkTimer+0x14c>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002dec:	7b7a      	ldrb	r2, [r7, #13]
 8002dee:	491c      	ldr	r1, [pc, #112]	@ (8002e60 <linkTimer+0x14c>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3315      	adds	r3, #21
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e00:	7b3b      	ldrb	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d00b      	beq.n	8002e1e <linkTimer+0x10a>
 8002e06:	7b3a      	ldrb	r2, [r7, #12]
 8002e08:	4915      	ldr	r1, [pc, #84]	@ (8002e60 <linkTimer+0x14c>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	3308      	adds	r3, #8
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d2dc      	bcs.n	8002dd8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002e1e:	7b7a      	ldrb	r2, [r7, #13]
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fecf 	bl	8002bc8 <LinkTimerAfter>
 8002e2a:	e00f      	b.n	8002e4c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <linkTimer+0x144>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff0c 	bl	8002c54 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <linkTimer+0x144>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <linkTimer+0x148>)
 8002e44:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002e46:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <linkTimer+0x144>)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000d88 	.word	0x20000d88
 8002e5c:	20000d89 	.word	0x20000d89
 8002e60:	20000cf8 	.word	0x20000cf8
 8002e64:	20000d8c 	.word	0x20000d8c

08002e68 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460a      	mov	r2, r1
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <UnlinkTimer+0xf8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d111      	bne.n	8002ea8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e84:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <UnlinkTimer+0xf8>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <UnlinkTimer+0xfc>)
 8002e8c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e8e:	79fa      	ldrb	r2, [r7, #7]
 8002e90:	4935      	ldr	r1, [pc, #212]	@ (8002f68 <UnlinkTimer+0x100>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3315      	adds	r3, #21
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <UnlinkTimer+0xf8>)
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e03e      	b.n	8002f26 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	492f      	ldr	r1, [pc, #188]	@ (8002f68 <UnlinkTimer+0x100>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	492a      	ldr	r1, [pc, #168]	@ (8002f68 <UnlinkTimer+0x100>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3315      	adds	r3, #21
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002ed0:	79f9      	ldrb	r1, [r7, #7]
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	4824      	ldr	r0, [pc, #144]	@ (8002f68 <UnlinkTimer+0x100>)
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4403      	add	r3, r0
 8002ee0:	3315      	adds	r3, #21
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	4920      	ldr	r1, [pc, #128]	@ (8002f68 <UnlinkTimer+0x100>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3315      	adds	r3, #21
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ef8:	7bbb      	ldrb	r3, [r7, #14]
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d013      	beq.n	8002f26 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002efe:	79f9      	ldrb	r1, [r7, #7]
 8002f00:	7bba      	ldrb	r2, [r7, #14]
 8002f02:	4819      	ldr	r0, [pc, #100]	@ (8002f68 <UnlinkTimer+0x100>)
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3314      	adds	r3, #20
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2d8      	uxtb	r0, r3
 8002f14:	4914      	ldr	r1, [pc, #80]	@ (8002f68 <UnlinkTimer+0x100>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3314      	adds	r3, #20
 8002f22:	4602      	mov	r2, r0
 8002f24:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	490f      	ldr	r1, [pc, #60]	@ (8002f68 <UnlinkTimer+0x100>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	330c      	adds	r3, #12
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <UnlinkTimer+0xf8>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d107      	bne.n	8002f54 <UnlinkTimer+0xec>
 8002f44:	79bb      	ldrb	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <UnlinkTimer+0x104>)
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	601a      	str	r2, [r3, #0]
  }

  return;
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
}
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20000d88 	.word	0x20000d88
 8002f64:	20000d89 	.word	0x20000d89
 8002f68:	20000cf8 	.word	0x20000cf8
 8002f6c:	20000d8c 	.word	0x20000d8c

08002f70 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <ReturnTimeElapsed+0x70>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d026      	beq.n	8002fce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f80:	f7ff fe02 	bl	8002b88 <ReadRtcSsrValue>
 8002f84:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <ReturnTimeElapsed+0x70>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d805      	bhi.n	8002f9c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <ReturnTimeElapsed+0x70>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e00a      	b.n	8002fb2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <ReturnTimeElapsed+0x74>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <ReturnTimeElapsed+0x70>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <ReturnTimeElapsed+0x78>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <ReturnTimeElapsed+0x7c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	40d3      	lsrs	r3, r2
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	e001      	b.n	8002fd2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b29b      	uxth	r3, r3
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000d8c 	.word	0x20000d8c
 8002fe4:	20000d94 	.word	0x20000d94
 8002fe8:	20000d92 	.word	0x20000d92
 8002fec:	20000d91 	.word	0x20000d91

08002ff0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003000:	f7ff fdc2 	bl	8002b88 <ReadRtcSsrValue>
 8003004:	4603      	mov	r3, r0
 8003006:	4a21      	ldr	r2, [pc, #132]	@ (800308c <RestartWakeupCounter+0x9c>)
 8003008:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800300a:	2003      	movs	r0, #3
 800300c:	f001 ff81 	bl	8004f12 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003010:	e039      	b.n	8003086 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d803      	bhi.n	8003020 <RestartWakeupCounter+0x30>
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <RestartWakeupCounter+0xa0>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d002      	beq.n	8003026 <RestartWakeupCounter+0x36>
      Value -= 1;
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	3b01      	subs	r3, #1
 8003024:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003026:	bf00      	nop
 8003028:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <RestartWakeupCounter+0xa4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f8      	beq.n	8003028 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003036:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <RestartWakeupCounter+0xa4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <RestartWakeupCounter+0xa4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003046:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <RestartWakeupCounter+0xa8>)
 800304a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800304e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003050:	2003      	movs	r0, #3
 8003052:	f001 ff6c 	bl	8004f2e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <RestartWakeupCounter+0xac>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	490e      	ldr	r1, [pc, #56]	@ (800309c <RestartWakeupCounter+0xac>)
 8003062:	4313      	orrs	r3, r2
 8003064:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003066:	f7ff fd8f 	bl	8002b88 <ReadRtcSsrValue>
 800306a:	4603      	mov	r3, r0
 800306c:	4a07      	ldr	r2, [pc, #28]	@ (800308c <RestartWakeupCounter+0x9c>)
 800306e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <RestartWakeupCounter+0xa4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <RestartWakeupCounter+0xa4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800307e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003080:	f3af 8000 	nop.w
  return ;
 8003084:	bf00      	nop
}
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000d8c 	.word	0x20000d8c
 8003090:	20000d91 	.word	0x20000d91
 8003094:	20000e70 	.word	0x20000e70
 8003098:	58000800 	.word	0x58000800
 800309c:	40002800 	.word	0x40002800

080030a0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80030a6:	4b45      	ldr	r3, [pc, #276]	@ (80031bc <RescheduleTimerList+0x11c>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d107      	bne.n	80030c4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80030b4:	bf00      	nop
 80030b6:	4b42      	ldr	r3, [pc, #264]	@ (80031c0 <RescheduleTimerList+0x120>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f8      	bne.n	80030b6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80030c4:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <RescheduleTimerList+0x120>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	4b3d      	ldr	r3, [pc, #244]	@ (80031c0 <RescheduleTimerList+0x120>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80030d4:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <RescheduleTimerList+0x124>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	493a      	ldr	r1, [pc, #232]	@ (80031c8 <RescheduleTimerList+0x128>)
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3308      	adds	r3, #8
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80030ee:	f7ff ff3f 	bl	8002f70 <ReturnTimeElapsed>
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d205      	bcs.n	800310a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003102:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <RescheduleTimerList+0x12c>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e04d      	b.n	80031a6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4a30      	ldr	r2, [pc, #192]	@ (80031d0 <RescheduleTimerList+0x130>)
 800310e:	8812      	ldrh	r2, [r2, #0]
 8003110:	b292      	uxth	r2, r2
 8003112:	4413      	add	r3, r2
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4293      	cmp	r3, r2
 800311a:	d906      	bls.n	800312a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800311c:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <RescheduleTimerList+0x130>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003122:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <RescheduleTimerList+0x12c>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e03d      	b.n	80031a6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	b29a      	uxth	r2, r3
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003134:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <RescheduleTimerList+0x12c>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800313a:	e034      	b.n	80031a6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	4922      	ldr	r1, [pc, #136]	@ (80031c8 <RescheduleTimerList+0x128>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	3308      	adds	r3, #8
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	429a      	cmp	r2, r3
 8003152:	d20a      	bcs.n	800316a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	491c      	ldr	r1, [pc, #112]	@ (80031c8 <RescheduleTimerList+0x128>)
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3308      	adds	r3, #8
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e013      	b.n	8003192 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	4916      	ldr	r1, [pc, #88]	@ (80031c8 <RescheduleTimerList+0x128>)
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3308      	adds	r3, #8
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	1ac9      	subs	r1, r1, r3
 8003182:	4811      	ldr	r0, [pc, #68]	@ (80031c8 <RescheduleTimerList+0x128>)
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4403      	add	r3, r0
 800318e:	3308      	adds	r3, #8
 8003190:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	490c      	ldr	r1, [pc, #48]	@ (80031c8 <RescheduleTimerList+0x128>)
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	3315      	adds	r3, #21
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d1c7      	bne.n	800313c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80031ac:	89bb      	ldrh	r3, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff1e 	bl	8002ff0 <RestartWakeupCounter>

  return ;
 80031b4:	bf00      	nop
}
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40002800 	.word	0x40002800
 80031c0:	20000e70 	.word	0x20000e70
 80031c4:	20000d88 	.word	0x20000d88
 80031c8:	20000cf8 	.word	0x20000cf8
 80031cc:	20000d90 	.word	0x20000d90
 80031d0:	20000d96 	.word	0x20000d96

080031d4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	617b      	str	r3, [r7, #20]
  return(result);
 80031e0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80031e4:	b672      	cpsid	i
}
 80031e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	22ca      	movs	r2, #202	@ 0xca
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2253      	movs	r2, #83	@ 0x53
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80031f8:	4b55      	ldr	r3, [pc, #340]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003206:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003208:	4b52      	ldr	r3, [pc, #328]	@ (8003354 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003210:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003214:	4950      	ldr	r1, [pc, #320]	@ (8003358 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	330c      	adds	r3, #12
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d16e      	bne.n	8003308 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800322a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800322e:	494a      	ldr	r1, [pc, #296]	@ (8003358 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800323e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003242:	4945      	ldr	r1, [pc, #276]	@ (8003358 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3310      	adds	r3, #16
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003254:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04c      	beq.n	80032f8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800325e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003262:	493d      	ldr	r1, [pc, #244]	@ (8003358 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	330d      	adds	r3, #13
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d124      	bne.n	80032c2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003278:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fdf2 	bl	8002e68 <UnlinkTimer>
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003290:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003294:	4930      	ldr	r1, [pc, #192]	@ (8003358 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	3304      	adds	r3, #4
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9b8 	bl	8003620 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032b0:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	22ca      	movs	r2, #202	@ 0xca
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80032b8:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2253      	movs	r2, #83	@ 0x53
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24
 80032c0:	e012      	b.n	80032e8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80032ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f920 	bl	8003518 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	22ca      	movs	r2, #202	@ 0xca
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
 80032e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2253      	movs	r2, #83	@ 0x53
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80032e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4619      	mov	r1, r3
 80032f0:	69b8      	ldr	r0, [r7, #24]
 80032f2:	f000 fa1b 	bl	800372c <HW_TS_RTC_Int_AppNot>
 80032f6:	e022      	b.n	800333e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80032f8:	f7ff fed2 	bl	80030a0 <RescheduleTimerList>
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	e01a      	b.n	800333e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003308:	bf00      	nop
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f8      	beq.n	800330a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003328:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800332c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800333e:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	22ff      	movs	r2, #255	@ 0xff
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8003346:	bf00      	nop
}
 8003348:	3728      	adds	r7, #40	@ 0x28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000e70 	.word	0x20000e70
 8003354:	20000d88 	.word	0x20000d88
 8003358:	20000cf8 	.word	0x20000cf8
 800335c:	20000d90 	.word	0x20000d90
 8003360:	58000800 	.word	0x58000800

08003364 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003370:	4b5e      	ldr	r3, [pc, #376]	@ (80034ec <HW_TS_Init+0x188>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	22ca      	movs	r2, #202	@ 0xca
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24
 8003378:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <HW_TS_Init+0x188>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2253      	movs	r2, #83	@ 0x53
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003380:	4b5b      	ldr	r3, [pc, #364]	@ (80034f0 <HW_TS_Init+0x18c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a5a      	ldr	r2, [pc, #360]	@ (80034f0 <HW_TS_Init+0x18c>)
 8003386:	f043 0320 	orr.w	r3, r3, #32
 800338a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800338c:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HW_TS_Init+0x18c>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f1c3 0304 	rsb	r3, r3, #4
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b55      	ldr	r3, [pc, #340]	@ (80034f4 <HW_TS_Init+0x190>)
 80033a0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <HW_TS_Init+0x18c>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033aa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80033ae:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d101      	bne.n	80033c6 <HW_TS_Init+0x62>
  {
    return 32U;
 80033c2:	2220      	movs	r2, #32
 80033c4:	e003      	b.n	80033ce <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	fab2 f282 	clz	r2, r2
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	40d3      	lsrs	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <HW_TS_Init+0x194>)
 80033d8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80033da:	4b45      	ldr	r3, [pc, #276]	@ (80034f0 <HW_TS_Init+0x18c>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <HW_TS_Init+0x198>)
 80033ec:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80033ee:	4b43      	ldr	r3, [pc, #268]	@ (80034fc <HW_TS_Init+0x198>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a40      	ldr	r2, [pc, #256]	@ (80034f8 <HW_TS_Init+0x194>)
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003400:	4a3c      	ldr	r2, [pc, #240]	@ (80034f4 <HW_TS_Init+0x190>)
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	40d3      	lsrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800340e:	4293      	cmp	r3, r2
 8003410:	d904      	bls.n	800341c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003412:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HW_TS_Init+0x19c>)
 8003414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	e003      	b.n	8003424 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	b29a      	uxth	r2, r3
 8003420:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <HW_TS_Init+0x19c>)
 8003422:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003424:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003428:	f7ff fb9c 	bl	8002b64 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800342c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003430:	f7ff fb84 	bl	8002b3c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d13d      	bne.n	80034b6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800343a:	4b32      	ldr	r3, [pc, #200]	@ (8003504 <HW_TS_Init+0x1a0>)
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003440:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <HW_TS_Init+0x1a4>)
 8003442:	f04f 32ff 	mov.w	r2, #4294967295
 8003446:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e00c      	b.n	8003468 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800344e:	7ffa      	ldrb	r2, [r7, #31]
 8003450:	492e      	ldr	r1, [pc, #184]	@ (800350c <HW_TS_Init+0x1a8>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	330c      	adds	r3, #12
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	3301      	adds	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d9ef      	bls.n	800344e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HW_TS_Init+0x1ac>)
 8003470:	2206      	movs	r2, #6
 8003472:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HW_TS_Init+0x188>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HW_TS_Init+0x188>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003482:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HW_TS_Init+0x188>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	4b17      	ldr	r3, [pc, #92]	@ (80034ec <HW_TS_Init+0x188>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003494:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003496:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <HW_TS_Init+0x1b0>)
 8003498:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800349c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800349e:	2003      	movs	r0, #3
 80034a0:	f001 fd45 	bl	8004f2e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HW_TS_Init+0x188>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <HW_TS_Init+0x188>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e009      	b.n	80034ca <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <HW_TS_Init+0x188>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80034c4:	2003      	movs	r0, #3
 80034c6:	f001 fd24 	bl	8004f12 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HW_TS_Init+0x188>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	22ff      	movs	r2, #255	@ 0xff
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80034d2:	2200      	movs	r2, #0
 80034d4:	2103      	movs	r1, #3
 80034d6:	2003      	movs	r0, #3
 80034d8:	f001 fcd9 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80034dc:	2003      	movs	r0, #3
 80034de:	f001 fcf0 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

  return;
 80034e2:	bf00      	nop
}
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000e70 	.word	0x20000e70
 80034f0:	40002800 	.word	0x40002800
 80034f4:	20000d91 	.word	0x20000d91
 80034f8:	20000d92 	.word	0x20000d92
 80034fc:	20000d94 	.word	0x20000d94
 8003500:	20000d96 	.word	0x20000d96
 8003504:	20000d90 	.word	0x20000d90
 8003508:	20000d8c 	.word	0x20000d8c
 800350c:	20000cf8 	.word	0x20000cf8
 8003510:	20000d88 	.word	0x20000d88
 8003514:	58000800 	.word	0x58000800

08003518 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003522:	f3ef 8310 	mrs	r3, PRIMASK
 8003526:	60fb      	str	r3, [r7, #12]
  return(result);
 8003528:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800352a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003530:	2003      	movs	r0, #3
 8003532:	f001 fcd4 	bl	8004ede <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003536:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <HW_TS_Stop+0xf0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	22ca      	movs	r2, #202	@ 0xca
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24
 800353e:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <HW_TS_Stop+0xf0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2253      	movs	r2, #83	@ 0x53
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003546:	79fa      	ldrb	r2, [r7, #7]
 8003548:	4930      	ldr	r1, [pc, #192]	@ (800360c <HW_TS_Stop+0xf4>)
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	330c      	adds	r3, #12
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d142      	bne.n	80035e4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fc80 	bl	8002e68 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003568:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HW_TS_Stop+0xf8>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d12f      	bne.n	80035d4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <HW_TS_Stop+0xfc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d107      	bne.n	8003592 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003582:	bf00      	nop
 8003584:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HW_TS_Stop+0xf0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f8      	bne.n	8003584 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003592:	4b1d      	ldr	r3, [pc, #116]	@ (8003608 <HW_TS_Stop+0xf0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HW_TS_Stop+0xf0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80035a2:	bf00      	nop
 80035a4:	4b18      	ldr	r3, [pc, #96]	@ (8003608 <HW_TS_Stop+0xf0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f8      	beq.n	80035a4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035b2:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <HW_TS_Stop+0xf0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b13      	ldr	r3, [pc, #76]	@ (8003608 <HW_TS_Stop+0xf0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80035c2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HW_TS_Stop+0x100>)
 80035c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80035ca:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035cc:	2003      	movs	r0, #3
 80035ce:	f001 fcae 	bl	8004f2e <HAL_NVIC_ClearPendingIRQ>
 80035d2:	e007      	b.n	80035e4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HW_TS_Stop+0x104>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	7cfa      	ldrb	r2, [r7, #19]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80035e0:	f7ff fd5e 	bl	80030a0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HW_TS_Stop+0xf0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	22ff      	movs	r2, #255	@ 0xff
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035ec:	2003      	movs	r0, #3
 80035ee:	f001 fc68 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80035fe:	bf00      	nop
}
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000e70 	.word	0x20000e70
 800360c:	20000cf8 	.word	0x20000cf8
 8003610:	20000d88 	.word	0x20000d88
 8003614:	40002800 	.word	0x40002800
 8003618:	58000800 	.word	0x58000800
 800361c:	20000d89 	.word	0x20000d89

08003620 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	493b      	ldr	r1, [pc, #236]	@ (800371c <HW_TS_Start+0xfc>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	330c      	adds	r3, #12
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d103      	bne.n	800364c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff66 	bl	8003518 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	60fb      	str	r3, [r7, #12]
  return(result);
 8003652:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003656:	b672      	cpsid	i
}
 8003658:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800365a:	2003      	movs	r0, #3
 800365c:	f001 fc3f 	bl	8004ede <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003660:	4b2f      	ldr	r3, [pc, #188]	@ (8003720 <HW_TS_Start+0x100>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	22ca      	movs	r2, #202	@ 0xca
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HW_TS_Start+0x100>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2253      	movs	r2, #83	@ 0x53
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	492a      	ldr	r1, [pc, #168]	@ (800371c <HW_TS_Start+0xfc>)
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	330c      	adds	r3, #12
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003684:	79fa      	ldrb	r2, [r7, #7]
 8003686:	4925      	ldr	r1, [pc, #148]	@ (800371c <HW_TS_Start+0xfc>)
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	3308      	adds	r3, #8
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003698:	79fa      	ldrb	r2, [r7, #7]
 800369a:	4920      	ldr	r1, [pc, #128]	@ (800371c <HW_TS_Start+0xfc>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	3304      	adds	r3, #4
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fb30 	bl	8002d14 <linkTimer>
 80036b4:	4603      	mov	r3, r0
 80036b6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <HW_TS_Start+0x104>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036be:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <HW_TS_Start+0x108>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	7c7a      	ldrb	r2, [r7, #17]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d002      	beq.n	80036d0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80036ca:	f7ff fce9 	bl	80030a0 <RescheduleTimerList>
 80036ce:	e013      	b.n	80036f8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036d0:	79fa      	ldrb	r2, [r7, #7]
 80036d2:	4912      	ldr	r1, [pc, #72]	@ (800371c <HW_TS_Start+0xfc>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	3308      	adds	r3, #8
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	8a7b      	ldrh	r3, [r7, #18]
 80036e4:	79fa      	ldrb	r2, [r7, #7]
 80036e6:	1ac9      	subs	r1, r1, r3
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <HW_TS_Start+0xfc>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4403      	add	r3, r0
 80036f4:	3308      	adds	r3, #8
 80036f6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80036f8:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HW_TS_Start+0x100>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	22ff      	movs	r2, #255	@ 0xff
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003700:	2003      	movs	r0, #3
 8003702:	f001 fbde 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003712:	bf00      	nop
}
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000cf8 	.word	0x20000cf8
 8003720:	20000e70 	.word	0x20000e70
 8003724:	20000d88 	.word	0x20000d88
 8003728:	20000d89 	.word	0x20000d89

0800372c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	460b      	mov	r3, r1
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4798      	blx	r3

  return;
 800373e:	bf00      	nop
}
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	4613      	mov	r3, r2
 8003758:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800375e:	2300      	movs	r3, #0
 8003760:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10e      	bne.n	8003786 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <HW_UART_Transmit_DMA+0x80>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800376e:	4b17      	ldr	r3, [pc, #92]	@ (80037cc <HW_UART_Transmit_DMA+0x84>)
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <HW_UART_Transmit_DMA+0x88>)
 8003772:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003774:	89bb      	ldrh	r3, [r7, #12]
 8003776:	461a      	mov	r2, r3
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4814      	ldr	r0, [pc, #80]	@ (80037cc <HW_UART_Transmit_DMA+0x84>)
 800377c:	f007 fd88 	bl	800b290 <HAL_UART_Transmit_DMA>
 8003780:	4603      	mov	r3, r0
 8003782:	75fb      	strb	r3, [r7, #23]
            break;
 8003784:	e000      	b.n	8003788 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003786:	bf00      	nop
    }

    switch (hal_status)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d816      	bhi.n	80037bc <HW_UART_Transmit_DMA+0x74>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <HW_UART_Transmit_DMA+0x4c>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037b1 	.word	0x080037b1
 80037a0:	080037b7 	.word	0x080037b7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80037a4:	2300      	movs	r3, #0
 80037a6:	75bb      	strb	r3, [r7, #22]
            break;
 80037a8:	e009      	b.n	80037be <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75bb      	strb	r3, [r7, #22]
            break;
 80037ae:	e006      	b.n	80037be <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80037b0:	2302      	movs	r3, #2
 80037b2:	75bb      	strb	r3, [r7, #22]
            break;
 80037b4:	e003      	b.n	80037be <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80037b6:	2303      	movs	r3, #3
 80037b8:	75bb      	strb	r3, [r7, #22]
            break;
 80037ba:	e000      	b.n	80037be <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80037bc:	bf00      	nop
    }

    return hw_status;
 80037be:	7dbb      	ldrb	r3, [r7, #22]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000d98 	.word	0x20000d98
 80037cc:	20000f90 	.word	0x20000f90
 80037d0:	40013800 	.word	0x40013800

080037d4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_UART_TxCpltCallback+0x34>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80037e8:	4b08      	ldr	r3, [pc, #32]	@ (800380c <HAL_UART_TxCpltCallback+0x38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80037f0:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_UART_TxCpltCallback+0x38>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4798      	blx	r3
            }
            break;
 80037f6:	e001      	b.n	80037fc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_UART_TxCpltCallback+0x2a>
            break;
 80037fc:	bf00      	nop
    }

    return;
 80037fe:	bf00      	nop
}
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40013800 	.word	0x40013800
 800380c:	20000d98 	.word	0x20000d98

08003810 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	SET_RGB_COLOR(OFF);
 8003814:	2201      	movs	r2, #1
 8003816:	2110      	movs	r1, #16
 8003818:	4820      	ldr	r0, [pc, #128]	@ (800389c <Kernel_Init+0x8c>)
 800381a:	f001 ff2d 	bl	8005678 <HAL_GPIO_WritePin>
 800381e:	2201      	movs	r2, #1
 8003820:	2102      	movs	r1, #2
 8003822:	481f      	ldr	r0, [pc, #124]	@ (80038a0 <Kernel_Init+0x90>)
 8003824:	f001 ff28 	bl	8005678 <HAL_GPIO_WritePin>
 8003828:	2201      	movs	r2, #1
 800382a:	2101      	movs	r1, #1
 800382c:	481c      	ldr	r0, [pc, #112]	@ (80038a0 <Kernel_Init+0x90>)
 800382e:	f001 ff23 	bl	8005678 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8003832:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003836:	f7ff f86f 	bl	8002918 <HAL_Delay>

	tsCmd.MODE		= Start;
 800383a:	4b1a      	ldr	r3, [pc, #104]	@ (80038a4 <Kernel_Init+0x94>)
 800383c:	2201      	movs	r2, #1
 800383e:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003840:	4b18      	ldr	r3, [pc, #96]	@ (80038a4 <Kernel_Init+0x94>)
 8003842:	2201      	movs	r2, #1
 8003844:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 8003846:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <Kernel_Init+0x94>)
 8003848:	2201      	movs	r2, #1
 800384a:	759a      	strb	r2, [r3, #22]

	tsCmd.ECG 		= false;
 800384c:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <Kernel_Init+0x94>)
 800384e:	2200      	movs	r2, #0
 8003850:	761a      	strb	r2, [r3, #24]
	tsCmd.ECG_N50 	= true;
 8003852:	4b14      	ldr	r3, [pc, #80]	@ (80038a4 <Kernel_Init+0x94>)
 8003854:	2201      	movs	r2, #1
 8003856:	765a      	strb	r2, [r3, #25]
	tsCmd.ECG_HPF	= true;
 8003858:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <Kernel_Init+0x94>)
 800385a:	2201      	movs	r2, #1
 800385c:	769a      	strb	r2, [r3, #26]

	tsCmd.MCG		= true;
 800385e:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <Kernel_Init+0x94>)
 8003860:	2201      	movs	r2, #1
 8003862:	76da      	strb	r2, [r3, #27]
	tsCmd.MCG_N50	= true;
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <Kernel_Init+0x94>)
 8003866:	2201      	movs	r2, #1
 8003868:	771a      	strb	r2, [r3, #28]
	tsCmd.MCG_HPF	= true;
 800386a:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <Kernel_Init+0x94>)
 800386c:	2201      	movs	r2, #1
 800386e:	775a      	strb	r2, [r3, #29]


	tsSystem.Power	= true;
 8003870:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <Kernel_Init+0x98>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
	tsBle.Connected	= false;
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <Kernel_Init+0x9c>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]

	DIAG ("-----------------------------------------\r\n");
 800387c:	480c      	ldr	r0, [pc, #48]	@ (80038b0 <Kernel_Init+0xa0>)
 800387e:	f7ff f8f9 	bl	8002a74 <DIAG>
	HAL_Delay(1);
 8003882:	2001      	movs	r0, #1
 8003884:	f7ff f848 	bl	8002918 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003888:	490a      	ldr	r1, [pc, #40]	@ (80038b4 <Kernel_Init+0xa4>)
 800388a:	480b      	ldr	r0, [pc, #44]	@ (80038b8 <Kernel_Init+0xa8>)
 800388c:	f7ff f8f2 	bl	8002a74 <DIAG>
	HAL_Delay(1);
 8003890:	2001      	movs	r0, #1
 8003892:	f7ff f841 	bl	8002918 <HAL_Delay>

	// Wait until USB being recognised by the PC.


}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	48001000 	.word	0x48001000
 80038a0:	48000400 	.word	0x48000400
 80038a4:	20000da0 	.word	0x20000da0
 80038a8:	20000dc0 	.word	0x20000dc0
 80038ac:	20001140 	.word	0x20001140
 80038b0:	08017af0 	.word	0x08017af0
 80038b4:	08017b1c 	.word	0x08017b1c
 80038b8:	08017b30 	.word	0x08017b30

080038bc <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 80038c0:	4b99      	ldr	r3, [pc, #612]	@ (8003b28 <Main_Process+0x26c>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	f000 80ec 	beq.w	8003aa2 <Main_Process+0x1e6>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	dc03      	bgt.n	80038d6 <Main_Process+0x1a>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <Main_Process+0x22>
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d01a      	beq.n	800390c <Main_Process+0x50>
	{

	default:
		eSYS_STATE = SYS_STATE_INIT;
 80038d6:	4b94      	ldr	r3, [pc, #592]	@ (8003b28 <Main_Process+0x26c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
		break;
 80038dc:	e122      	b.n	8003b24 <Main_Process+0x268>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 80038de:	f7fd f9c1 	bl	8000c64 <AFE_Init>
		IMU_Init( &hi2c1 );
 80038e2:	4892      	ldr	r0, [pc, #584]	@ (8003b2c <Main_Process+0x270>)
 80038e4:	f7fd ff3a 	bl	800175c <IMU_Init>
		BLE_Init();
 80038e8:	f7fd fc36 	bl	8001158 <BLE_Init>
		Debug_Init();
 80038ec:	f7ff f878 	bl	80029e0 <Debug_Init>
		Timer_Init();
 80038f0:	f001 f860 	bl	80049b4 <Timer_Init>
		BLE_Init();
 80038f4:	f7fd fc30 	bl	8001158 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 80038f8:	488d      	ldr	r0, [pc, #564]	@ (8003b30 <Main_Process+0x274>)
 80038fa:	f7ff f8bb 	bl	8002a74 <DIAG>
		HAL_Delay(1);
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff f80a 	bl	8002918 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 8003904:	4b88      	ldr	r3, [pc, #544]	@ (8003b28 <Main_Process+0x26c>)
 8003906:	2203      	movs	r2, #3
 8003908:	701a      	strb	r2, [r3, #0]
		break;
 800390a:	e10b      	b.n	8003b24 <Main_Process+0x268>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 800390c:	4b89      	ldr	r3, [pc, #548]	@ (8003b34 <Main_Process+0x278>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b3 	beq.w	8003a7c <Main_Process+0x1c0>
		{

			AFE_Control();
 8003916:	f7fd f9b3 	bl	8000c80 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
 800391a:	f7fd ff8b 	bl	8001834 <IMU_Control>
	        #endif

			Debug_Control();
 800391e:	f7ff f86b 	bl	80029f8 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 8003922:	f7fd fc31 	bl	8001188 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 8003926:	4b84      	ldr	r3, [pc, #528]	@ (8003b38 <Main_Process+0x27c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d112      	bne.n	8003956 <Main_Process+0x9a>
			{
				SET_RGB_COLOR(GREEN);
 8003930:	2201      	movs	r2, #1
 8003932:	2110      	movs	r1, #16
 8003934:	4881      	ldr	r0, [pc, #516]	@ (8003b3c <Main_Process+0x280>)
 8003936:	f001 fe9f 	bl	8005678 <HAL_GPIO_WritePin>
 800393a:	2200      	movs	r2, #0
 800393c:	2102      	movs	r1, #2
 800393e:	4880      	ldr	r0, [pc, #512]	@ (8003b40 <Main_Process+0x284>)
 8003940:	f001 fe9a 	bl	8005678 <HAL_GPIO_WritePin>
 8003944:	2201      	movs	r2, #1
 8003946:	2101      	movs	r1, #1
 8003948:	487d      	ldr	r0, [pc, #500]	@ (8003b40 <Main_Process+0x284>)
 800394a:	f001 fe95 	bl	8005678 <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 800394e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b38 <Main_Process+0x27c>)
 8003950:	2200      	movs	r2, #0
 8003952:	715a      	strb	r2, [r3, #5]
 8003954:	e0a1      	b.n	8003a9a <Main_Process+0x1de>
			}
			else
			{
				if (tsTimer.u8TimeFlag)
 8003956:	4b7b      	ldr	r3, [pc, #492]	@ (8003b44 <Main_Process+0x288>)
 8003958:	789b      	ldrb	r3, [r3, #2]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 809c 	beq.w	8003a9a <Main_Process+0x1de>
				{
					tsTimer.u8TimeFlag = false;
 8003962:	4b78      	ldr	r3, [pc, #480]	@ (8003b44 <Main_Process+0x288>)
 8003964:	2200      	movs	r2, #0
 8003966:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003968:	4b77      	ldr	r3, [pc, #476]	@ (8003b48 <Main_Process+0x28c>)
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	2b07      	cmp	r3, #7
 800396e:	d813      	bhi.n	8003998 <Main_Process+0xdc>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <Main_Process+0xbc>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039bf 	.word	0x080039bf
 800397c:	08003a57 	.word	0x08003a57
 8003980:	08003999 	.word	0x08003999
 8003984:	08003a0b 	.word	0x08003a0b
 8003988:	080039e5 	.word	0x080039e5
 800398c:	08003999 	.word	0x08003999
 8003990:	08003999 	.word	0x08003999
 8003994:	08003a31 	.word	0x08003a31
					{
					default:
						SET_RGB_COLOR(OFF);
 8003998:	2201      	movs	r2, #1
 800399a:	2110      	movs	r1, #16
 800399c:	4867      	ldr	r0, [pc, #412]	@ (8003b3c <Main_Process+0x280>)
 800399e:	f001 fe6b 	bl	8005678 <HAL_GPIO_WritePin>
 80039a2:	2201      	movs	r2, #1
 80039a4:	2102      	movs	r1, #2
 80039a6:	4866      	ldr	r0, [pc, #408]	@ (8003b40 <Main_Process+0x284>)
 80039a8:	f001 fe66 	bl	8005678 <HAL_GPIO_WritePin>
 80039ac:	2201      	movs	r2, #1
 80039ae:	2101      	movs	r1, #1
 80039b0:	4863      	ldr	r0, [pc, #396]	@ (8003b40 <Main_Process+0x284>)
 80039b2:	f001 fe61 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80039b6:	4b64      	ldr	r3, [pc, #400]	@ (8003b48 <Main_Process+0x28c>)
 80039b8:	2204      	movs	r2, #4
 80039ba:	711a      	strb	r2, [r3, #4]
						break;
 80039bc:	e06d      	b.n	8003a9a <Main_Process+0x1de>

					case OFF:
						SET_RGB_COLOR(OFF);
 80039be:	2201      	movs	r2, #1
 80039c0:	2110      	movs	r1, #16
 80039c2:	485e      	ldr	r0, [pc, #376]	@ (8003b3c <Main_Process+0x280>)
 80039c4:	f001 fe58 	bl	8005678 <HAL_GPIO_WritePin>
 80039c8:	2201      	movs	r2, #1
 80039ca:	2102      	movs	r1, #2
 80039cc:	485c      	ldr	r0, [pc, #368]	@ (8003b40 <Main_Process+0x284>)
 80039ce:	f001 fe53 	bl	8005678 <HAL_GPIO_WritePin>
 80039d2:	2201      	movs	r2, #1
 80039d4:	2101      	movs	r1, #1
 80039d6:	485a      	ldr	r0, [pc, #360]	@ (8003b40 <Main_Process+0x284>)
 80039d8:	f001 fe4e 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80039dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b48 <Main_Process+0x28c>)
 80039de:	2204      	movs	r2, #4
 80039e0:	711a      	strb	r2, [r3, #4]
						break;
 80039e2:	e05a      	b.n	8003a9a <Main_Process+0x1de>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 80039e4:	2201      	movs	r2, #1
 80039e6:	2110      	movs	r1, #16
 80039e8:	4854      	ldr	r0, [pc, #336]	@ (8003b3c <Main_Process+0x280>)
 80039ea:	f001 fe45 	bl	8005678 <HAL_GPIO_WritePin>
 80039ee:	2201      	movs	r2, #1
 80039f0:	2102      	movs	r1, #2
 80039f2:	4853      	ldr	r0, [pc, #332]	@ (8003b40 <Main_Process+0x284>)
 80039f4:	f001 fe40 	bl	8005678 <HAL_GPIO_WritePin>
 80039f8:	2200      	movs	r2, #0
 80039fa:	2101      	movs	r1, #1
 80039fc:	4850      	ldr	r0, [pc, #320]	@ (8003b40 <Main_Process+0x284>)
 80039fe:	f001 fe3b 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 8003a02:	4b51      	ldr	r3, [pc, #324]	@ (8003b48 <Main_Process+0x28c>)
 8003a04:	2203      	movs	r2, #3
 8003a06:	711a      	strb	r2, [r3, #4]
						break;
 8003a08:	e047      	b.n	8003a9a <Main_Process+0x1de>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	484b      	ldr	r0, [pc, #300]	@ (8003b3c <Main_Process+0x280>)
 8003a10:	f001 fe32 	bl	8005678 <HAL_GPIO_WritePin>
 8003a14:	2201      	movs	r2, #1
 8003a16:	2102      	movs	r1, #2
 8003a18:	4849      	ldr	r0, [pc, #292]	@ (8003b40 <Main_Process+0x284>)
 8003a1a:	f001 fe2d 	bl	8005678 <HAL_GPIO_WritePin>
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2101      	movs	r1, #1
 8003a22:	4847      	ldr	r0, [pc, #284]	@ (8003b40 <Main_Process+0x284>)
 8003a24:	f001 fe28 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 8003a28:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <Main_Process+0x28c>)
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	711a      	strb	r2, [r3, #4]
						break;
 8003a2e:	e034      	b.n	8003a9a <Main_Process+0x1de>

					case WHITE:
						SET_RGB_COLOR(OFF);
 8003a30:	2201      	movs	r2, #1
 8003a32:	2110      	movs	r1, #16
 8003a34:	4841      	ldr	r0, [pc, #260]	@ (8003b3c <Main_Process+0x280>)
 8003a36:	f001 fe1f 	bl	8005678 <HAL_GPIO_WritePin>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4840      	ldr	r0, [pc, #256]	@ (8003b40 <Main_Process+0x284>)
 8003a40:	f001 fe1a 	bl	8005678 <HAL_GPIO_WritePin>
 8003a44:	2201      	movs	r2, #1
 8003a46:	2101      	movs	r1, #1
 8003a48:	483d      	ldr	r0, [pc, #244]	@ (8003b40 <Main_Process+0x284>)
 8003a4a:	f001 fe15 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b48 <Main_Process+0x28c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	711a      	strb	r2, [r3, #4]
						break;
 8003a54:	e021      	b.n	8003a9a <Main_Process+0x1de>

					case RED:
						SET_RGB_COLOR(OFF);
 8003a56:	2201      	movs	r2, #1
 8003a58:	2110      	movs	r1, #16
 8003a5a:	4838      	ldr	r0, [pc, #224]	@ (8003b3c <Main_Process+0x280>)
 8003a5c:	f001 fe0c 	bl	8005678 <HAL_GPIO_WritePin>
 8003a60:	2201      	movs	r2, #1
 8003a62:	2102      	movs	r1, #2
 8003a64:	4836      	ldr	r0, [pc, #216]	@ (8003b40 <Main_Process+0x284>)
 8003a66:	f001 fe07 	bl	8005678 <HAL_GPIO_WritePin>
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4834      	ldr	r0, [pc, #208]	@ (8003b40 <Main_Process+0x284>)
 8003a70:	f001 fe02 	bl	8005678 <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003a74:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <Main_Process+0x28c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	711a      	strb	r2, [r3, #4]
						break;
 8003a7a:	e00e      	b.n	8003a9a <Main_Process+0x1de>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2110      	movs	r1, #16
 8003a80:	482e      	ldr	r0, [pc, #184]	@ (8003b3c <Main_Process+0x280>)
 8003a82:	f001 fdf9 	bl	8005678 <HAL_GPIO_WritePin>
 8003a86:	2201      	movs	r2, #1
 8003a88:	2102      	movs	r1, #2
 8003a8a:	482d      	ldr	r0, [pc, #180]	@ (8003b40 <Main_Process+0x284>)
 8003a8c:	f001 fdf4 	bl	8005678 <HAL_GPIO_WritePin>
 8003a90:	2201      	movs	r2, #1
 8003a92:	2101      	movs	r1, #1
 8003a94:	482a      	ldr	r0, [pc, #168]	@ (8003b40 <Main_Process+0x284>)
 8003a96:	f001 fdef 	bl	8005678 <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003a9a:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <Main_Process+0x26c>)
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	701a      	strb	r2, [r3, #0]
		break;
 8003aa0:	e040      	b.n	8003b24 <Main_Process+0x268>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <Main_Process+0x290>)
 8003aa4:	7d5b      	ldrb	r3, [r3, #21]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d106      	bne.n	8003ab8 <Main_Process+0x1fc>
		{
			tsCmd.MODE = Idle;
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <Main_Process+0x290>)
 8003aac:	22ff      	movs	r2, #255	@ 0xff
 8003aae:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7fd f86e 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <Main_Process+0x290>)
 8003aba:	7d5b      	ldrb	r3, [r3, #21]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <Main_Process+0x212>
		{
			tsCmd.MODE = Idle;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	@ (8003b4c <Main_Process+0x290>)
 8003ac2:	22ff      	movs	r2, #255	@ 0xff
 8003ac4:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f7fd f863 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 8003ace:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <Main_Process+0x290>)
 8003ad0:	7d5b      	ldrb	r3, [r3, #21]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d104      	bne.n	8003ae0 <Main_Process+0x224>
		{
			tsCmd.MODE = Idle;
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <Main_Process+0x290>)
 8003ad8:	22ff      	movs	r2, #255	@ 0xff
 8003ada:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 8003adc:	f000 f83f 	bl	8003b5e <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <Main_Process+0x290>)
 8003ae2:	7d9b      	ldrb	r3, [r3, #22]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d104      	bne.n	8003af2 <Main_Process+0x236>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003ae8:	f000 f832 	bl	8003b50 <Print_Help>
			tsCmd.HLP = false;
 8003aec:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <Main_Process+0x290>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	759a      	strb	r2, [r3, #22]
		}

					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 8003af2:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <Main_Process+0x27c>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <Main_Process+0x260>
						{
							 if ( tsBle.App.McgNotification )
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <Main_Process+0x27c>)
 8003afe:	799b      	ldrb	r3, [r3, #6]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <Main_Process+0x250>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 8003b04:	2100      	movs	r1, #0
 8003b06:	2020      	movs	r0, #32
 8003b08:	f012 fabe 	bl	8016088 <UTIL_SEQ_SetTask>
							 }

							 #ifdef IMU_ENABLE
								 if ( tsBle.App.AccelNotification )
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <Main_Process+0x27c>)
 8003b0e:	79db      	ldrb	r3, [r3, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <Main_Process+0x260>
								 {
									UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);
 8003b14:	2101      	movs	r1, #1
 8003b16:	2008      	movs	r0, #8
 8003b18:	f012 fab6 	bl	8016088 <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_NORMAL;
 8003b1c:	4b02      	ldr	r3, [pc, #8]	@ (8003b28 <Main_Process+0x26c>)
 8003b1e:	2203      	movs	r2, #3
 8003b20:	701a      	strb	r2, [r3, #0]
		break;
 8003b22:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000d9c 	.word	0x20000d9c
 8003b2c:	20000dcc 	.word	0x20000dcc
 8003b30:	08017b44 	.word	0x08017b44
 8003b34:	20000dc0 	.word	0x20000dc0
 8003b38:	20001140 	.word	0x20001140
 8003b3c:	48001000 	.word	0x48001000
 8003b40:	48000400 	.word	0x48000400
 8003b44:	20001088 	.word	0x20001088
 8003b48:	20000dc4 	.word	0x20000dc4
 8003b4c:	20000da0 	.word	0x20000da0

08003b50 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d101      	bne.n	8003ba6 <LL_RCC_HSI48_IsReady+0x18>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f023 0218 	bic.w	r2, r3, #24
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c02:	68fb      	ldr	r3, [r7, #12]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c34:	68fb      	ldr	r3, [r7, #12]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	3220      	adds	r2, #32
 8003c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c88:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <LL_HSEM_1StepLock+0x2c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d001      	beq.n	8003c92 <LL_HSEM_1StepLock+0x1e>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_HSEM_1StepLock+0x20>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	80000400 	.word	0x80000400

08003ca4 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b09a      	sub	sp, #104	@ 0x68
 8003ca8:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	2250      	movs	r2, #80	@ 0x50
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f012 fd4e 	bl	8016754 <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003cb8:	463b      	mov	r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8003cc8:	2105      	movs	r1, #5
 8003cca:	4817      	ldr	r0, [pc, #92]	@ (8003d28 <PeriphUsbClock_Config+0x84>)
 8003ccc:	f7ff ffd2 	bl	8003c74 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8003cd0:	f7ff ff4c 	bl	8003b6c <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8003cd4:	bf00      	nop
 8003cd6:	f7ff ff5a 	bl	8003b8e <LL_RCC_HSI48_IsReady>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0fa      	beq.n	8003cd6 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce4:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003cea:	f107 0318 	add.w	r3, r7, #24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 fbec 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8003cf4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003cf8:	f7ff ffa3 	bl	8003c42 <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8003d00:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003d04:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8003d06:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8003d0a:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8003d0c:	2322      	movs	r3, #34	@ 0x22
 8003d0e:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8003d14:	2320      	movs	r3, #32
 8003d16:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f005 fd4c 	bl	80097b8 <HAL_RCCEx_CRSConfig>

#endif

	return;
 8003d20:	bf00      	nop
}
 8003d22:	3768      	adds	r7, #104	@ 0x68
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	58001400 	.word	0x58001400

08003d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d30:	f000 fee0 	bl	8004af4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003d34:	f7fe fb1a 	bl	800236c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d38:	f000 f824 	bl	8003d84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003d3c:	f000 f890 	bl	8003e60 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003d40:	f000 f8f2 	bl	8003f28 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d44:	f000 fa48 	bl	80041d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d48:	f000 fa34 	bl	80041b4 <MX_DMA_Init>
  MX_TIM2_Init();
 8003d4c:	f000 f9e4 	bl	8004118 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003d50:	f000 f950 	bl	8003ff4 <MX_SPI1_Init>
  MX_RTC_Init();
 8003d54:	f000 f91a 	bl	8003f8c <MX_RTC_Init>
  MX_USB_Device_Init();
 8003d58:	f011 fad6 	bl	8015308 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003d5c:	f000 f8a0 	bl	8003ea0 <MX_I2C1_Init>
  MX_RNG_Init();
 8003d60:	f000 f8fe 	bl	8003f60 <MX_RNG_Init>
  MX_TIM1_Init();
 8003d64:	f000 f984 	bl	8004070 <MX_TIM1_Init>
  MX_RF_Init();
 8003d68:	f000 f8f2 	bl	8003f50 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8003d6c:	f7ff fd50 	bl	8003810 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003d70:	f7fe fb0a 	bl	8002388 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 8003d74:	f7ff ff96 	bl	8003ca4 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003d78:	f7fe fdf3 	bl	8002962 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8003d7c:	f7ff fd9e 	bl	80038bc <Main_Process>
    MX_APPE_Process();
 8003d80:	bf00      	nop
 8003d82:	e7f9      	b.n	8003d78 <main+0x4c>

08003d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b09a      	sub	sp, #104	@ 0x68
 8003d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8a:	f107 0320 	add.w	r3, r7, #32
 8003d8e:	2248      	movs	r2, #72	@ 0x48
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f012 fcde 	bl	8016754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003db8:	f043 0310 	orr.w	r3, r3, #16
 8003dbc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dc8:	f043 0303 	orr.w	r3, r3, #3
 8003dcc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003dce:	f004 f847 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7ff feed 	bl	8003bb2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <SystemClock_Config+0xd8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003de0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e5c <SystemClock_Config+0xd8>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <SystemClock_Config+0xd8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003df4:	2307      	movs	r3, #7
 8003df6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e08:	2340      	movs	r3, #64	@ 0x40
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e10:	f107 0320 	add.w	r3, r7, #32
 8003e14:	4618      	mov	r0, r3
 8003e16:	f004 fbaf 	bl	8008578 <HAL_RCC_OscConfig>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003e20:	f000 fa7e 	bl	8004320 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003e24:	236f      	movs	r3, #111	@ 0x6f
 8003e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 ff0b 	bl	8008c60 <HAL_RCC_ClockConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003e50:	f000 fa66 	bl	8004320 <Error_Handler>
  }
}
 8003e54:	bf00      	nop
 8003e56:	3768      	adds	r7, #104	@ 0x68
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	58000400 	.word	0x58000400

08003e60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b094      	sub	sp, #80	@ 0x50
 8003e64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e66:	463b      	mov	r3, r7
 8003e68:	2250      	movs	r2, #80	@ 0x50
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f012 fc71 	bl	8016754 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003e72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003e76:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003e78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003e82:	2310      	movs	r3, #16
 8003e84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e86:	463b      	mov	r3, r7
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fb1f 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003e94:	f000 fa44 	bl	8004320 <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 8003e98:	bf00      	nop
 8003e9a:	3750      	adds	r7, #80	@ 0x50
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <MX_I2C1_Init+0x80>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8003eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <MX_I2C1_Init+0x84>)
 8003eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ebc:	4b17      	ldr	r3, [pc, #92]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ec2:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ec8:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ece:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eda:	4810      	ldr	r0, [pc, #64]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003edc:	f001 fc20 	bl	8005720 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ee6:	f000 fa1b 	bl	8004320 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003eea:	2100      	movs	r1, #0
 8003eec:	480b      	ldr	r0, [pc, #44]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003eee:	f002 f953 	bl	8006198 <HAL_I2CEx_ConfigAnalogFilter>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ef8:	f000 fa12 	bl	8004320 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003efc:	2100      	movs	r1, #0
 8003efe:	4807      	ldr	r0, [pc, #28]	@ (8003f1c <MX_I2C1_Init+0x7c>)
 8003f00:	f002 f995 	bl	800622e <HAL_I2CEx_ConfigDigitalFilter>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003f0a:	f000 fa09 	bl	8004320 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003f0e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003f12:	f002 f9d9 	bl	80062c8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000dcc 	.word	0x20000dcc
 8003f20:	40005400 	.word	0x40005400
 8003f24:	00100413 	.word	0x00100413

08003f28 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <MX_IPCC_Init+0x20>)
 8003f2e:	4a07      	ldr	r2, [pc, #28]	@ (8003f4c <MX_IPCC_Init+0x24>)
 8003f30:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003f32:	4805      	ldr	r0, [pc, #20]	@ (8003f48 <MX_IPCC_Init+0x20>)
 8003f34:	f002 f9da 	bl	80062ec <HAL_IPCC_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003f3e:	f000 f9ef 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000e20 	.word	0x20000e20
 8003f4c:	58000c00 	.word	0x58000c00

08003f50 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003f64:	4b07      	ldr	r3, [pc, #28]	@ (8003f84 <MX_RNG_Init+0x24>)
 8003f66:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <MX_RNG_Init+0x28>)
 8003f68:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <MX_RNG_Init+0x24>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003f70:	4804      	ldr	r0, [pc, #16]	@ (8003f84 <MX_RNG_Init+0x24>)
 8003f72:	f005 fd6c 	bl	8009a4e <HAL_RNG_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003f7c:	f000 f9d0 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000e5c 	.word	0x20000e5c
 8003f88:	58001000 	.word	0x58001000

08003f8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f90:	4b16      	ldr	r3, [pc, #88]	@ (8003fec <MX_RTC_Init+0x60>)
 8003f92:	4a17      	ldr	r2, [pc, #92]	@ (8003ff0 <MX_RTC_Init+0x64>)
 8003f94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f96:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <MX_RTC_Init+0x60>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <MX_RTC_Init+0x60>)
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003fa2:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fa4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003fa8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fc2:	480a      	ldr	r0, [pc, #40]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fc4:	f005 fde2 	bl	8009b8c <HAL_RTC_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003fce:	f000 f9a7 	bl	8004320 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4805      	ldr	r0, [pc, #20]	@ (8003fec <MX_RTC_Init+0x60>)
 8003fd8:	f005 fed8 	bl	8009d8c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003fe2:	f000 f99d 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000e70 	.word	0x20000e70
 8003ff0:	40002800 	.word	0x40002800

08003ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <MX_SPI1_Init+0x74>)
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <MX_SPI1_Init+0x78>)
 8003ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800400c:	4b16      	ldr	r3, [pc, #88]	@ (8004068 <MX_SPI1_Init+0x74>)
 800400e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004012:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004014:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800401a:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <MX_SPI1_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004026:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <MX_SPI1_Init+0x74>)
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004030:	2200      	movs	r2, #0
 8004032:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004036:	2200      	movs	r2, #0
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403a:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <MX_SPI1_Init+0x74>)
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004040:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004042:	2207      	movs	r2, #7
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <MX_SPI1_Init+0x74>)
 800404e:	2208      	movs	r2, #8
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004052:	4805      	ldr	r0, [pc, #20]	@ (8004068 <MX_SPI1_Init+0x74>)
 8004054:	f005 ff56 	bl	8009f04 <HAL_SPI_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800405e:	f000 f95f 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000e94 	.word	0x20000e94
 800406c:	40013000 	.word	0x40013000

08004070 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004076:	f107 0310 	add.w	r3, r7, #16
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800408e:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <MX_TIM1_Init+0xa0>)
 8004090:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <MX_TIM1_Init+0xa4>)
 8004092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8004094:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <MX_TIM1_Init+0xa0>)
 8004096:	f240 623f 	movw	r2, #1599	@ 0x63f
 800409a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800409c:	4b1c      	ldr	r3, [pc, #112]	@ (8004110 <MX_TIM1_Init+0xa0>)
 800409e:	2210      	movs	r2, #16
 80040a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80040a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040a4:	2209      	movs	r2, #9
 80040a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040ba:	4815      	ldr	r0, [pc, #84]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040bc:	f006 fcc0 	bl	800aa40 <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80040c6:	f000 f92b 	bl	8004320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040d0:	f107 0310 	add.w	r3, r7, #16
 80040d4:	4619      	mov	r1, r3
 80040d6:	480e      	ldr	r0, [pc, #56]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040d8:	f006 fe5f 	bl	800ad9a <HAL_TIM_ConfigClockSource>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80040e2:	f000 f91d 	bl	8004320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4806      	ldr	r0, [pc, #24]	@ (8004110 <MX_TIM1_Init+0xa0>)
 80040f8:	f007 f84c 	bl	800b194 <HAL_TIMEx_MasterConfigSynchronization>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004102:	f000 f90d 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000ef8 	.word	0x20000ef8
 8004114:	40012c00 	.word	0x40012c00

08004118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004138:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800413c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004140:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8004144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004146:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004148:	2210      	movs	r2, #16
 800414a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800414c:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <MX_TIM2_Init+0x98>)
 800414e:	2264      	movs	r2, #100	@ 0x64
 8004150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <MX_TIM2_Init+0x98>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800415e:	4814      	ldr	r0, [pc, #80]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004160:	f006 fc6e 	bl	800aa40 <HAL_TIM_Base_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800416a:	f000 f8d9 	bl	8004320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800416e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004172:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004174:	f107 0310 	add.w	r3, r7, #16
 8004178:	4619      	mov	r1, r3
 800417a:	480d      	ldr	r0, [pc, #52]	@ (80041b0 <MX_TIM2_Init+0x98>)
 800417c:	f006 fe0d 	bl	800ad9a <HAL_TIM_ConfigClockSource>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004186:	f000 f8cb 	bl	8004320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4806      	ldr	r0, [pc, #24]	@ (80041b0 <MX_TIM2_Init+0x98>)
 8004198:	f006 fffc 	bl	800b194 <HAL_TIMEx_MasterConfigSynchronization>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80041a2:	f000 f8bd 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041a6:	bf00      	nop
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000f44 	.word	0x20000f44

080041b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80041b8:	2004      	movs	r0, #4
 80041ba:	f7ff fd10 	bl	8003bde <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041be:	2001      	movs	r0, #1
 80041c0:	f7ff fd0d 	bl	8003bde <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2100      	movs	r1, #0
 80041c8:	200b      	movs	r0, #11
 80041ca:	f000 fe60 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80041ce:	200b      	movs	r0, #11
 80041d0:	f000 fe77 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ec:	2004      	movs	r0, #4
 80041ee:	f7ff fd0f 	bl	8003c10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7ff fd0c 	bl	8003c10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7ff fd09 	bl	8003c10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041fe:	2010      	movs	r0, #16
 8004200:	f7ff fd06 	bl	8003c10 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8004204:	2201      	movs	r2, #1
 8004206:	2103      	movs	r1, #3
 8004208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800420c:	f001 fa34 	bl	8005678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	@ 0x40
 8004214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004218:	f001 fa2e 	bl	8005678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 800421c:	2200      	movs	r2, #0
 800421e:	2104      	movs	r1, #4
 8004220:	483d      	ldr	r0, [pc, #244]	@ (8004318 <MX_GPIO_Init+0x140>)
 8004222:	f001 fa29 	bl	8005678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8004226:	2201      	movs	r2, #1
 8004228:	2103      	movs	r1, #3
 800422a:	483b      	ldr	r0, [pc, #236]	@ (8004318 <MX_GPIO_Init+0x140>)
 800422c:	f001 fa24 	bl	8005678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 8004230:	2201      	movs	r2, #1
 8004232:	2110      	movs	r1, #16
 8004234:	4839      	ldr	r0, [pc, #228]	@ (800431c <MX_GPIO_Init+0x144>)
 8004236:	f001 fa1f 	bl	8005678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 800423a:	2303      	movs	r3, #3
 800423c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423e:	2301      	movs	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004242:	2301      	movs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	4619      	mov	r1, r3
 800424e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004252:	f001 f8a1 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8004256:	2330      	movs	r3, #48	@ 0x30
 8004258:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800425a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800425e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004260:	2301      	movs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800426c:	f001 f894 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8004270:	2340      	movs	r3, #64	@ 0x40
 8004272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004274:	2301      	movs	r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004288:	f001 f886 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 800428c:	2307      	movs	r3, #7
 800428e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004290:	2301      	movs	r3, #1
 8004292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800429c:	1d3b      	adds	r3, r7, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	481d      	ldr	r0, [pc, #116]	@ (8004318 <MX_GPIO_Init+0x140>)
 80042a2:	f001 f879 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 80042a6:	2310      	movs	r3, #16
 80042a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042aa:	2301      	movs	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4818      	ldr	r0, [pc, #96]	@ (800431c <MX_GPIO_Init+0x144>)
 80042bc:	f001 f86c 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 80042c0:	2340      	movs	r3, #64	@ 0x40
 80042c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c8:	2301      	movs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4811      	ldr	r0, [pc, #68]	@ (8004318 <MX_GPIO_Init+0x140>)
 80042d2:	f001 f861 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80042de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e0:	2301      	movs	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	480b      	ldr	r0, [pc, #44]	@ (8004318 <MX_GPIO_Init+0x140>)
 80042ea:	f001 f855 	bl	8005398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	200a      	movs	r0, #10
 80042f4:	f000 fdcb 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80042f8:	200a      	movs	r0, #10
 80042fa:	f000 fde2 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	2017      	movs	r0, #23
 8004304:	f000 fdc3 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004308:	2017      	movs	r0, #23
 800430a:	f000 fdda 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	48000400 	.word	0x48000400
 800431c:	48001000 	.word	0x48001000

08004320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004324:	b672      	cpsid	i
}
 8004326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 8004328:	2200      	movs	r2, #0
 800432a:	2110      	movs	r1, #16
 800432c:	4806      	ldr	r0, [pc, #24]	@ (8004348 <Error_Handler+0x28>)
 800432e:	f001 f9a3 	bl	8005678 <HAL_GPIO_WritePin>
 8004332:	2201      	movs	r2, #1
 8004334:	2102      	movs	r1, #2
 8004336:	4805      	ldr	r0, [pc, #20]	@ (800434c <Error_Handler+0x2c>)
 8004338:	f001 f99e 	bl	8005678 <HAL_GPIO_WritePin>
 800433c:	2201      	movs	r2, #1
 800433e:	2101      	movs	r1, #1
 8004340:	4802      	ldr	r0, [pc, #8]	@ (800434c <Error_Handler+0x2c>)
 8004342:	f001 f999 	bl	8005678 <HAL_GPIO_WritePin>
 8004346:	e7ef      	b.n	8004328 <Error_Handler+0x8>
 8004348:	48001000 	.word	0x48001000
 800434c:	48000400 	.word	0x48000400

08004350 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_AHB2_GRP1_EnableClock>:
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004380:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_AHB3_GRP1_EnableClock>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_APB1_GRP1_EnableClock>:
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4013      	ands	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043fa:	68fb      	ldr	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004414:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4313      	orrs	r3, r2
 800441e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004424:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4013      	ands	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800443e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004442:	f7ff ffaf 	bl	80043a4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	2005      	movs	r0, #5
 800444c:	f000 fd1f 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004450:	2005      	movs	r0, #5
 8004452:	f000 fd36 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	2100      	movs	r1, #0
 800445a:	202e      	movs	r0, #46	@ 0x2e
 800445c:	f000 fd17 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004460:	202e      	movs	r0, #46	@ 0x2e
 8004462:	f000 fd2e 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b09c      	sub	sp, #112	@ 0x70
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	2250      	movs	r2, #80	@ 0x50
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f012 f961 	bl	8016754 <memset>
  if(hi2c->Instance==I2C1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a17      	ldr	r2, [pc, #92]	@ (80044f4 <HAL_I2C_MspInit+0x88>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d126      	bne.n	80044ea <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800449c:	2304      	movs	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80044a0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	4618      	mov	r0, r3
 80044ac:	f005 f80e 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80044b6:	f7ff ff33 	bl	8004320 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ba:	2002      	movs	r0, #2
 80044bc:	f7ff ff59 	bl	8004372 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044c6:	2312      	movs	r3, #18
 80044c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044d2:	2304      	movs	r3, #4
 80044d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80044da:	4619      	mov	r1, r3
 80044dc:	4806      	ldr	r0, [pc, #24]	@ (80044f8 <HAL_I2C_MspInit+0x8c>)
 80044de:	f000 ff5b 	bl	8005398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044e2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80044e6:	f7ff ff76 	bl	80043d6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044ea:	bf00      	nop
 80044ec:	3770      	adds	r7, #112	@ 0x70
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40005400 	.word	0x40005400
 80044f8:	48000400 	.word	0x48000400

080044fc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0d      	ldr	r2, [pc, #52]	@ (8004540 <HAL_IPCC_MspInit+0x44>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d113      	bne.n	8004536 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800450e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004512:	f7ff ff47 	bl	80043a4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	202c      	movs	r0, #44	@ 0x2c
 800451c:	f000 fcb7 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004520:	202c      	movs	r0, #44	@ 0x2c
 8004522:	f000 fcce 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	2100      	movs	r1, #0
 800452a:	202d      	movs	r0, #45	@ 0x2d
 800452c:	f000 fcaf 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004530:	202d      	movs	r0, #45	@ 0x2d
 8004532:	f000 fcc6 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	58000c00 	.word	0x58000c00

08004544 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b096      	sub	sp, #88	@ 0x58
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	2250      	movs	r2, #80	@ 0x50
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f012 f8fd 	bl	8016754 <memset>
  if(hrng->Instance==RNG)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a11      	ldr	r2, [pc, #68]	@ (80045a4 <HAL_RNG_MspInit+0x60>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d11b      	bne.n	800459c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004568:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 800456a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800456e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004570:	f107 0308 	add.w	r3, r7, #8
 8004574:	4618      	mov	r0, r3
 8004576:	f004 ffa9 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004580:	f7ff fece 	bl	8004320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004584:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004588:	f7ff ff0c 	bl	80043a4 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2100      	movs	r1, #0
 8004590:	2035      	movs	r0, #53	@ 0x35
 8004592:	f000 fc7c 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8004596:	2035      	movs	r0, #53	@ 0x35
 8004598:	f000 fc93 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800459c:	bf00      	nop
 800459e:	3758      	adds	r7, #88	@ 0x58
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58001000 	.word	0x58001000

080045a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b096      	sub	sp, #88	@ 0x58
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	2250      	movs	r2, #80	@ 0x50
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f012 f8cb 	bl	8016754 <memset>
  if(hrtc->Instance==RTC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a12      	ldr	r2, [pc, #72]	@ (800460c <HAL_RTC_MspInit+0x64>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d11d      	bne.n	8004604 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80045ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f004 ff77 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80045e4:	f7ff fe9c 	bl	8004320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045e8:	f7ff feb2 	bl	8004350 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80045ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80045f0:	f7ff fef1 	bl	80043d6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2100      	movs	r1, #0
 80045f8:	2003      	movs	r0, #3
 80045fa:	f000 fc48 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80045fe:	2003      	movs	r0, #3
 8004600:	f000 fc5f 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004604:	bf00      	nop
 8004606:	3758      	adds	r7, #88	@ 0x58
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40002800 	.word	0x40002800

08004610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	f107 030c 	add.w	r3, r7, #12
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0e      	ldr	r2, [pc, #56]	@ (8004668 <HAL_SPI_MspInit+0x58>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d116      	bne.n	8004660 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004632:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004636:	f7ff fee7 	bl	8004408 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	2002      	movs	r0, #2
 800463c:	f7ff fe99 	bl	8004372 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004640:	2338      	movs	r3, #56	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004650:	2305      	movs	r3, #5
 8004652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	4619      	mov	r1, r3
 800465a:	4804      	ldr	r0, [pc, #16]	@ (800466c <HAL_SPI_MspInit+0x5c>)
 800465c:	f000 fe9c 	bl	8005398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004660:	bf00      	nop
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40013000 	.word	0x40013000
 800466c:	48000400 	.word	0x48000400

08004670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a11      	ldr	r2, [pc, #68]	@ (80046c4 <HAL_TIM_Base_MspInit+0x54>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004682:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004686:	f7ff febf 	bl	8004408 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	2019      	movs	r0, #25
 8004690:	f000 fbfd 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004694:	2019      	movs	r0, #25
 8004696:	f000 fc14 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800469a:	e00f      	b.n	80046bc <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a4:	d10a      	bne.n	80046bc <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7ff fe95 	bl	80043d6 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	201c      	movs	r0, #28
 80046b2:	f000 fbec 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046b6:	201c      	movs	r0, #28
 80046b8:	f000 fc03 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40012c00 	.word	0x40012c00

080046c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <NMI_Handler+0x4>

080046d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <HardFault_Handler+0x4>

080046d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <MemManage_Handler+0x4>

080046e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <BusFault_Handler+0x4>

080046e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <UsageFault_Handler+0x4>

080046f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800471e:	f000 fa43 	bl	8004ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}

08004726 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800472a:	f7fe fd53 	bl	80031d4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}

08004732 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004744:	2010      	movs	r0, #16
 8004746:	f000 ffaf 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004754:	4802      	ldr	r0, [pc, #8]	@ (8004760 <DMA1_Channel1_IRQHandler+0x10>)
 8004756:	f000 fd31 	bl	80051bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20001024 	.word	0x20001024

08004764 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004768:	4802      	ldr	r0, [pc, #8]	@ (8004774 <USB_LP_IRQHandler+0x10>)
 800476a:	f001 ff35 	bl	80065d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200026cc 	.word	0x200026cc

08004778 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800477c:	2020      	movs	r0, #32
 800477e:	f000 ff93 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004782:	2080      	movs	r0, #128	@ 0x80
 8004784:	f000 ff90 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}

0800478c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004790:	4802      	ldr	r0, [pc, #8]	@ (800479c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004792:	f006 f9fb 	bl	800ab8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000ef8 	.word	0x20000ef8

080047a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047a4:	4802      	ldr	r0, [pc, #8]	@ (80047b0 <TIM2_IRQHandler+0x10>)
 80047a6:	f006 f9f1 	bl	800ab8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000f44 	.word	0x20000f44

080047b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047b8:	4802      	ldr	r0, [pc, #8]	@ (80047c4 <USART1_IRQHandler+0x10>)
 80047ba:	f006 fde9 	bl	800b390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000f90 	.word	0x20000f90

080047c8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80047cc:	f010 fc5e 	bl	801508c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80047d8:	f010 fc8e 	bl	80150f8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80047e4:	f000 ff78 	bl	80056d8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}

080047ec <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80047f0:	4802      	ldr	r0, [pc, #8]	@ (80047fc <RNG_IRQHandler+0x10>)
 80047f2:	f005 f961 	bl	8009ab8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000e5c 	.word	0x20000e5c

08004800 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e00a      	b.n	8004828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004812:	f3af 8000 	nop.w
 8004816:	4601      	mov	r1, r0
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	60ba      	str	r2, [r7, #8]
 800481e:	b2ca      	uxtb	r2, r1
 8004820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	dbf0      	blt.n	8004812 <_read+0x12>
  }

  return len;
 8004830:	687b      	ldr	r3, [r7, #4]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_close>:
  }
  return len;
}

int _close(int file)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004862:	605a      	str	r2, [r3, #4]
  return 0;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <_isatty>:

int _isatty(int file)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048ac:	4a14      	ldr	r2, [pc, #80]	@ (8004900 <_sbrk+0x5c>)
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <_sbrk+0x60>)
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048b8:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <_sbrk+0x64>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <_sbrk+0x64>)
 80048c2:	4a12      	ldr	r2, [pc, #72]	@ (800490c <_sbrk+0x68>)
 80048c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048c6:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <_sbrk+0x64>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d207      	bcs.n	80048e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048d4:	f011 ffb4 	bl	8016840 <__errno>
 80048d8:	4603      	mov	r3, r0
 80048da:	220c      	movs	r2, #12
 80048dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e009      	b.n	80048f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048e4:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <_sbrk+0x64>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048ea:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <_sbrk+0x64>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	4a05      	ldr	r2, [pc, #20]	@ (8004908 <_sbrk+0x64>)
 80048f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20030000 	.word	0x20030000
 8004904:	00000600 	.word	0x00000600
 8004908:	20001084 	.word	0x20001084
 800490c:	20002dc0 	.word	0x20002dc0

08004910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004914:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <SystemInit+0x98>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <SystemInit+0x98>)
 800491c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004938:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800493c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800493e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004948:	4b18      	ldr	r3, [pc, #96]	@ (80049ac <SystemInit+0x9c>)
 800494a:	4013      	ands	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800495a:	f023 0305 	bic.w	r3, r3, #5
 800495e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497a:	4a0d      	ldr	r2, [pc, #52]	@ (80049b0 <SystemInit+0xa0>)
 800497c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	4a0b      	ldr	r2, [pc, #44]	@ (80049b0 <SystemInit+0xa0>)
 8004984:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004990:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499a:	2200      	movs	r2, #0
 800499c:	619a      	str	r2, [r3, #24]
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00
 80049ac:	faf6fefb 	.word	0xfaf6fefb
 80049b0:	22041000 	.word	0x22041000

080049b4 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 80049b8:	4806      	ldr	r0, [pc, #24]	@ (80049d4 <Timer_Init+0x20>)
 80049ba:	f7fe f85b 	bl	8002a74 <DIAG>
	HAL_Delay (10);
 80049be:	200a      	movs	r0, #10
 80049c0:	f7fd ffaa 	bl	8002918 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 80049c4:	4804      	ldr	r0, [pc, #16]	@ (80049d8 <Timer_Init+0x24>)
 80049c6:	f006 f893 	bl	800aaf0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 80049ca:	4804      	ldr	r0, [pc, #16]	@ (80049dc <Timer_Init+0x28>)
 80049cc:	f006 f890 	bl	800aaf0 <HAL_TIM_Base_Start_IT>
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08017b74 	.word	0x08017b74
 80049d8:	20000f44 	.word	0x20000f44
 80049dc:	20000ef8 	.word	0x20000ef8

080049e0 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f0:	d10b      	bne.n	8004a0a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{

//		tsTimer.bImuFlag = true;
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0201 	mvn.w	r2, #1
 80049fa:	611a      	str	r2, [r3, #16]
		tsTimer.u8TimeFlag = true;
 80049fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	709a      	strb	r2, [r3, #2]
//		tsTimer.bImuFlag = true;
		htim2.Init.Period = Interrupt_ms;
 8004a02:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004a04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004a08:	60da      	str	r2, [r3, #12]

		//DIAG ("%d\r",  i++);
	}

	// Calculating AFE sampling rate
	if (htim->Instance == TIM1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d122      	bne.n	8004a5a <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		tsTimer1.u16Count++;
 8004a14:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a16:	891b      	ldrh	r3, [r3, #8]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a20:	811a      	strh	r2, [r3, #8]

		if ( tsTimer1.u16Count > 1999)
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a24:	891b      	ldrh	r3, [r3, #8]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004a2c:	d315      	bcc.n	8004a5a <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			tsTimer1.u16Count = 0;
 8004a2e:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	811a      	strh	r2, [r3, #8]
			AFE.u16SPS = AFE.u16SampleCount;
 8004a34:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a3c:	805a      	strh	r2, [r3, #2]
			AFE.u16SampleCount =0;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	801a      	strh	r2, [r3, #0]

			IMU.u16SPS = IMU.u16SampleCount;
 8004a44:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a46:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a4e:	f8a3 21c4 	strh.w	r2, [r3, #452]	@ 0x1c4
			IMU.u16SampleCount =0;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2
		}
	}

}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20001088 	.word	0x20001088
 8004a6c:	20000f44 	.word	0x20000f44
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	20001094 	.word	0x20001094
 8004a78:	200010a0 	.word	0x200010a0
 8004a7c:	20000658 	.word	0x20000658

08004a80 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004a80:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a82:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a84:	3304      	adds	r3, #4

08004a86 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a86:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a88:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004a8a:	d3f9      	bcc.n	8004a80 <CopyDataInit>
  bx lr
 8004a8c:	4770      	bx	lr

08004a8e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004a8e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004a90:	3004      	adds	r0, #4

08004a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004a92:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004a94:	d3fb      	bcc.n	8004a8e <FillZerobss>
  bx lr
 8004a96:	4770      	bx	lr

08004a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a98:	480c      	ldr	r0, [pc, #48]	@ (8004acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a9c:	f7ff ff38 	bl	8004910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004aa0:	480b      	ldr	r0, [pc, #44]	@ (8004ad0 <LoopForever+0x6>)
 8004aa2:	490c      	ldr	r1, [pc, #48]	@ (8004ad4 <LoopForever+0xa>)
 8004aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad8 <LoopForever+0xe>)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f7ff ffed 	bl	8004a86 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004aac:	480b      	ldr	r0, [pc, #44]	@ (8004adc <LoopForever+0x12>)
 8004aae:	490c      	ldr	r1, [pc, #48]	@ (8004ae0 <LoopForever+0x16>)
 8004ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae4 <LoopForever+0x1a>)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f7ff ffe7 	bl	8004a86 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004ab8:	480b      	ldr	r0, [pc, #44]	@ (8004ae8 <LoopForever+0x1e>)
 8004aba:	490c      	ldr	r1, [pc, #48]	@ (8004aec <LoopForever+0x22>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	f7ff ffe8 	bl	8004a92 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ac2:	f011 fec3 	bl	801684c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004ac6:	f7ff f931 	bl	8003d2c <main>

08004aca <LoopForever>:

LoopForever:
  b LoopForever
 8004aca:	e7fe      	b.n	8004aca <LoopForever>
  ldr   r0, =_estack
 8004acc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004ad0:	20000008 	.word	0x20000008
 8004ad4:	20000188 	.word	0x20000188
 8004ad8:	080193f8 	.word	0x080193f8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004adc:	200301e4 	.word	0x200301e4
 8004ae0:	20031f57 	.word	0x20031f57
 8004ae4:	080195be 	.word	0x080195be
  INIT_BSS _sbss, _ebss
 8004ae8:	200001d4 	.word	0x200001d4
 8004aec:	20002dbc 	.word	0x20002dbc

08004af0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004af0:	e7fe      	b.n	8004af0 <ADC1_IRQHandler>
	...

08004af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <HAL_Init+0x3c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0b      	ldr	r2, [pc, #44]	@ (8004b30 <HAL_Init+0x3c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	f000 f9b4 	bl	8004e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b10:	2000      	movs	r0, #0
 8004b12:	f000 f80f 	bl	8004b34 <HAL_InitTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	71fb      	strb	r3, [r7, #7]
 8004b20:	e001      	b.n	8004b26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b22:	f7ff fc8a 	bl	800443a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b26:	79fb      	ldrb	r3, [r7, #7]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	58004000 	.word	0x58004000

08004b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004b40:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <HAL_InitTick+0x6c>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d024      	beq.n	8004b92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004b48:	f004 fa36 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <HAL_InitTick+0x6c>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	4619      	mov	r1, r3
 8004b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b58:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f9ca 	bl	8004efa <HAL_SYSTICK_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d809      	bhi.n	8004b86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b72:	2200      	movs	r2, #0
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7a:	f000 f988 	bl	8004e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ba4 <HAL_InitTick+0x70>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e007      	b.n	8004b96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e004      	b.n	8004b96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e001      	b.n	8004b96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000014 	.word	0x20000014
 8004ba4:	20000010 	.word	0x20000010

08004ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <HAL_IncTick+0x20>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <HAL_IncTick+0x24>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <HAL_IncTick+0x24>)
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000014 	.word	0x20000014
 8004bcc:	200010a4 	.word	0x200010a4

08004bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_GetTick+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	200010a4 	.word	0x200010a4

08004be8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004bec:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <HAL_GetTickPrio+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000010 	.word	0x20000010

08004c00 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_GetTickFreq+0x14>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000014 	.word	0x20000014

08004c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c34:	4013      	ands	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4a:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	60d3      	str	r3, [r2, #12]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <__NVIC_GetPriorityGrouping+0x18>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 0307 	and.w	r3, r3, #7
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	db0b      	blt.n	8004ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	4907      	ldr	r1, [pc, #28]	@ (8004cb4 <__NVIC_EnableIRQ+0x38>)
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000e100 	.word	0xe000e100

08004cb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	db12      	blt.n	8004cf0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	490a      	ldr	r1, [pc, #40]	@ (8004cfc <__NVIC_DisableIRQ+0x44>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2001      	movs	r0, #1
 8004cda:	fa00 f202 	lsl.w	r2, r0, r2
 8004cde:	3320      	adds	r3, #32
 8004ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce4:	f3bf 8f4f 	dsb	sy
}
 8004ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cea:	f3bf 8f6f 	isb	sy
}
 8004cee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	e000e100 	.word	0xe000e100

08004d00 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	db0c      	blt.n	8004d2c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	f003 021f 	and.w	r2, r3, #31
 8004d18:	4907      	ldr	r1, [pc, #28]	@ (8004d38 <__NVIC_SetPendingIRQ+0x38>)
 8004d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2001      	movs	r0, #1
 8004d22:	fa00 f202 	lsl.w	r2, r0, r2
 8004d26:	3340      	adds	r3, #64	@ 0x40
 8004d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000e100 	.word	0xe000e100

08004d3c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db0c      	blt.n	8004d68 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	4907      	ldr	r1, [pc, #28]	@ (8004d74 <__NVIC_ClearPendingIRQ+0x38>)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d62:	3360      	adds	r3, #96	@ 0x60
 8004d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100

08004d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db0a      	blt.n	8004da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	490c      	ldr	r1, [pc, #48]	@ (8004dc4 <__NVIC_SetPriority+0x4c>)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da0:	e00a      	b.n	8004db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4908      	ldr	r1, [pc, #32]	@ (8004dc8 <__NVIC_SetPriority+0x50>)
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	3b04      	subs	r3, #4
 8004db0:	0112      	lsls	r2, r2, #4
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	440b      	add	r3, r1
 8004db6:	761a      	strb	r2, [r3, #24]
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000e100 	.word	0xe000e100
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	@ 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f1c3 0307 	rsb	r3, r3, #7
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	bf28      	it	cs
 8004dea:	2304      	movcs	r3, #4
 8004dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d902      	bls.n	8004dfc <NVIC_EncodePriority+0x30>
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3b03      	subs	r3, #3
 8004dfa:	e000      	b.n	8004dfe <NVIC_EncodePriority+0x32>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	401a      	ands	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e14:	f04f 31ff 	mov.w	r1, #4294967295
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43d9      	mvns	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e24:	4313      	orrs	r3, r2
         );
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3724      	adds	r7, #36	@ 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e44:	d301      	bcc.n	8004e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e46:	2301      	movs	r3, #1
 8004e48:	e00f      	b.n	8004e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <SysTick_Config+0x40>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e52:	210f      	movs	r1, #15
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	f7ff ff8e 	bl	8004d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SysTick_Config+0x40>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e62:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <SysTick_Config+0x40>)
 8004e64:	2207      	movs	r2, #7
 8004e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fec9 	bl	8004c18 <__NVIC_SetPriorityGrouping>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e9c:	f7ff fee0 	bl	8004c60 <__NVIC_GetPriorityGrouping>
 8004ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff90 	bl	8004dcc <NVIC_EncodePriority>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff5f 	bl	8004d78 <__NVIC_SetPriority>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fed3 	bl	8004c7c <__NVIC_EnableIRQ>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fee3 	bl	8004cb8 <__NVIC_DisableIRQ>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff ff96 	bl	8004e34 <SysTick_Config>
 8004f08:	4603      	mov	r3, r0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	4603      	mov	r3, r0
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff feed 	bl	8004d00 <__NVIC_SetPendingIRQ>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	4603      	mov	r3, r0
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fefd 	bl	8004d3c <__NVIC_ClearPendingIRQ>
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_DMA_Start_IT+0x20>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e066      	b.n	8005038 <HAL_DMA_Start_IT+0xee>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d155      	bne.n	800502a <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f9b9 	bl	800531a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 020e 	orr.w	r2, r2, #14
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e00f      	b.n	8004fe2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0204 	bic.w	r2, r2, #4
 8004fd0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 020a 	orr.w	r2, r2, #10
 8004fe0:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005016:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e005      	b.n	8005036 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005032:	2302      	movs	r3, #2
 8005034:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005036:	7dfb      	ldrb	r3, [r7, #23]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e04f      	b.n	80050f2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d008      	beq.n	8005070 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e040      	b.n	80050f2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 020e 	bic.w	r2, r2, #14
 800507e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800508e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a4:	f003 021c 	and.w	r2, r3, #28
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	2101      	movs	r1, #1
 80050ae:	fa01 f202 	lsl.w	r2, r1, r2
 80050b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d005      	beq.n	8005122 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2204      	movs	r2, #4
 800511a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e047      	b.n	80051b2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 020e 	bic.w	r2, r2, #14
 8005130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	f003 021c 	and.w	r2, r3, #28
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	2101      	movs	r1, #1
 8005160:	fa01 f202 	lsl.w	r2, r1, r2
 8005164:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800516e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00c      	beq.n	8005192 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005182:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005186:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005190:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
    }
  }
  return status;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d8:	f003 031c 	and.w	r3, r3, #28
 80051dc:	2204      	movs	r2, #4
 80051de:	409a      	lsls	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d026      	beq.n	8005236 <HAL_DMA_IRQHandler+0x7a>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d021      	beq.n	8005236 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	f003 021c 	and.w	r2, r3, #28
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	2104      	movs	r1, #4
 800521e:	fa01 f202 	lsl.w	r2, r1, r2
 8005222:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	2b00      	cmp	r3, #0
 800522a:	d071      	beq.n	8005310 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005234:	e06c      	b.n	8005310 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f003 031c 	and.w	r3, r3, #28
 800523e:	2202      	movs	r2, #2
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02e      	beq.n	80052a8 <HAL_DMA_IRQHandler+0xec>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d029      	beq.n	80052a8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 020a 	bic.w	r2, r2, #10
 8005270:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f003 021c 	and.w	r2, r3, #28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	2102      	movs	r1, #2
 8005288:	fa01 f202 	lsl.w	r2, r1, r2
 800528c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d038      	beq.n	8005310 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052a6:	e033      	b.n	8005310 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ac:	f003 031c 	and.w	r3, r3, #28
 80052b0:	2208      	movs	r2, #8
 80052b2:	409a      	lsls	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02a      	beq.n	8005312 <HAL_DMA_IRQHandler+0x156>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d025      	beq.n	8005312 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 020e 	bic.w	r2, r2, #14
 80052d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	f003 021c 	and.w	r2, r3, #28
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f202 	lsl.w	r2, r1, r2
 80052e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005310:	bf00      	nop
 8005312:	bf00      	nop
}
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005330:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	f003 021c 	and.w	r2, r3, #28
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f202 	lsl.w	r2, r1, r2
 8005356:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d108      	bne.n	800537a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005378:	e007      	b.n	800538a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053a6:	e14c      	b.n	8005642 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	2101      	movs	r1, #1
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 813e 	beq.w	800563c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d005      	beq.n	80053d8 <HAL_GPIO_Init+0x40>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d130      	bne.n	800543a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540e:	2201      	movs	r2, #1
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 0201 	and.w	r2, r3, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d017      	beq.n	8005476 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d123      	bne.n	80054ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	08da      	lsrs	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	220f      	movs	r2, #15
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	08da      	lsrs	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3208      	adds	r2, #8
 80054c4:	6939      	ldr	r1, [r7, #16]
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2203      	movs	r2, #3
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0203 	and.w	r2, r3, #3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8098 	beq.w	800563c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800550c:	4a54      	ldr	r2, [pc, #336]	@ (8005660 <HAL_GPIO_Init+0x2c8>)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	220f      	movs	r2, #15
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005536:	d019      	beq.n	800556c <HAL_GPIO_Init+0x1d4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a4a      	ldr	r2, [pc, #296]	@ (8005664 <HAL_GPIO_Init+0x2cc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_GPIO_Init+0x1d0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a49      	ldr	r2, [pc, #292]	@ (8005668 <HAL_GPIO_Init+0x2d0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00d      	beq.n	8005564 <HAL_GPIO_Init+0x1cc>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a48      	ldr	r2, [pc, #288]	@ (800566c <HAL_GPIO_Init+0x2d4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <HAL_GPIO_Init+0x1c8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a47      	ldr	r2, [pc, #284]	@ (8005670 <HAL_GPIO_Init+0x2d8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <HAL_GPIO_Init+0x1c4>
 8005558:	2304      	movs	r3, #4
 800555a:	e008      	b.n	800556e <HAL_GPIO_Init+0x1d6>
 800555c:	2307      	movs	r3, #7
 800555e:	e006      	b.n	800556e <HAL_GPIO_Init+0x1d6>
 8005560:	2303      	movs	r3, #3
 8005562:	e004      	b.n	800556e <HAL_GPIO_Init+0x1d6>
 8005564:	2302      	movs	r3, #2
 8005566:	e002      	b.n	800556e <HAL_GPIO_Init+0x1d6>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_GPIO_Init+0x1d6>
 800556c:	2300      	movs	r3, #0
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	f002 0203 	and.w	r2, r2, #3
 8005574:	0092      	lsls	r2, r2, #2
 8005576:	4093      	lsls	r3, r2
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800557e:	4938      	ldr	r1, [pc, #224]	@ (8005660 <HAL_GPIO_Init+0x2c8>)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	089b      	lsrs	r3, r3, #2
 8005584:	3302      	adds	r3, #2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800558c:	4b39      	ldr	r3, [pc, #228]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055b0:	4a30      	ldr	r2, [pc, #192]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	43db      	mvns	r3, r3
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055da:	4a26      	ldr	r2, [pc, #152]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055e0:	4b24      	ldr	r3, [pc, #144]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 80055e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	43db      	mvns	r3, r3
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4013      	ands	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005606:	4a1b      	ldr	r2, [pc, #108]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800560e:	4b19      	ldr	r3, [pc, #100]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	43db      	mvns	r3, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4013      	ands	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005634:	4a0f      	ldr	r2, [pc, #60]	@ (8005674 <HAL_GPIO_Init+0x2dc>)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3301      	adds	r3, #1
 8005640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f aeab 	bne.w	80053a8 <HAL_GPIO_Init+0x10>
  }
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40010000 	.word	0x40010000
 8005664:	48000400 	.word	0x48000400
 8005668:	48000800 	.word	0x48000800
 800566c:	48000c00 	.word	0x48000c00
 8005670:	48001000 	.word	0x48001000
 8005674:	58000800 	.word	0x58000800

08005678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
 8005684:	4613      	mov	r3, r2
 8005686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005688:	787b      	ldrb	r3, [r7, #1]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005694:	e002      	b.n	800569c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005696:	887a      	ldrh	r2, [r7, #2]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056b2:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056be:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fa02 	bl	8002ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58000800 	.word	0x58000800

080056d8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80056de:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <HAL_HSEM_IRQHandler+0x30>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80056e4:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <HAL_HSEM_IRQHandler+0x30>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	4906      	ldr	r1, [pc, #24]	@ (8005708 <HAL_HSEM_IRQHandler+0x30>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80056f2:	4a05      	ldr	r2, [pc, #20]	@ (8005708 <HAL_HSEM_IRQHandler+0x30>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f807 	bl	800570c <HAL_HSEM_FreeCallback>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	58001500 	.word	0x58001500

0800570c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e08d      	b.n	800584e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe fe90 	bl	800446c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	@ 0x24
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	e006      	b.n	80057a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d108      	bne.n	80057c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	e007      	b.n	80057d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69d9      	ldr	r1, [r3, #28]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	461a      	mov	r2, r3
 8005864:	460b      	mov	r3, r1
 8005866:	817b      	strh	r3, [r7, #10]
 8005868:	4613      	mov	r3, r2
 800586a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b20      	cmp	r3, #32
 8005876:	f040 80fd 	bne.w	8005a74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_I2C_Master_Transmit+0x30>
 8005884:	2302      	movs	r3, #2
 8005886:	e0f6      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005890:	f7ff f99e 	bl	8004bd0 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2319      	movs	r3, #25
 800589c:	2201      	movs	r2, #1
 800589e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fa82 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0e1      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2221      	movs	r2, #33	@ 0x21
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2210      	movs	r2, #16
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	893a      	ldrh	r2, [r7, #8]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2bff      	cmp	r3, #255	@ 0xff
 80058e2:	d906      	bls.n	80058f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	22ff      	movs	r2, #255	@ 0xff
 80058e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80058ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e007      	b.n	8005902 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005900:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3301      	adds	r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	8979      	ldrh	r1, [r7, #10]
 8005946:	4b4e      	ldr	r3, [pc, #312]	@ (8005a80 <HAL_I2C_Master_Transmit+0x228>)
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fbf1 	bl	8006134 <I2C_TransferConfig>
 8005952:	e066      	b.n	8005a22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	b2da      	uxtb	r2, r3
 800595a:	8979      	ldrh	r1, [r7, #10]
 800595c:	4b48      	ldr	r3, [pc, #288]	@ (8005a80 <HAL_I2C_Master_Transmit+0x228>)
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fbe6 	bl	8006134 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005968:	e05b      	b.n	8005a22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	6a39      	ldr	r1, [r7, #32]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fa75 	bl	8005e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e07b      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d034      	beq.n	8005a22 <HAL_I2C_Master_Transmit+0x1ca>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d130      	bne.n	8005a22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9ee 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e04d      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2bff      	cmp	r3, #255	@ 0xff
 80059e2:	d90e      	bls.n	8005a02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	22ff      	movs	r2, #255	@ 0xff
 80059e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	8979      	ldrh	r1, [r7, #10]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fb9a 	bl	8006134 <I2C_TransferConfig>
 8005a00:	e00f      	b.n	8005a22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	8979      	ldrh	r1, [r7, #10]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb89 	bl	8006134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d19e      	bne.n	800596a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	6a39      	ldr	r1, [r7, #32]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fa5b 	bl	8005eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e01a      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2220      	movs	r2, #32
 8005a46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6859      	ldr	r1, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <HAL_I2C_Master_Transmit+0x22c>)
 8005a54:	400b      	ands	r3, r1
 8005a56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	80002000 	.word	0x80002000
 8005a84:	fe00e800 	.word	0xfe00e800

08005a88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	4608      	mov	r0, r1
 8005a92:	4611      	mov	r1, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	817b      	strh	r3, [r7, #10]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	813b      	strh	r3, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	f040 80fd 	bne.w	8005caa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_I2C_Mem_Read+0x34>
 8005ab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0f1      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_Mem_Read+0x4e>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0ea      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ade:	f7ff f877 	bl	8004bd0 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	2319      	movs	r3, #25
 8005aea:	2201      	movs	r2, #1
 8005aec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f95b 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0d5      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2222      	movs	r2, #34	@ 0x22
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2240      	movs	r2, #64	@ 0x40
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a3a      	ldr	r2, [r7, #32]
 8005b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b28:	88f8      	ldrh	r0, [r7, #6]
 8005b2a:	893a      	ldrh	r2, [r7, #8]
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4603      	mov	r3, r0
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8bf 	bl	8005cbc <I2C_RequestMemoryRead>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0ad      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2bff      	cmp	r3, #255	@ 0xff
 8005b58:	d90e      	bls.n	8005b78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	@ 0xff
 8005b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	8979      	ldrh	r1, [r7, #10]
 8005b68:	4b52      	ldr	r3, [pc, #328]	@ (8005cb4 <HAL_I2C_Mem_Read+0x22c>)
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fadf 	bl	8006134 <I2C_TransferConfig>
 8005b76:	e00f      	b.n	8005b98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	8979      	ldrh	r1, [r7, #10]
 8005b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb4 <HAL_I2C_Mem_Read+0x22c>)
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 face 	bl	8006134 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f902 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e07c      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d034      	beq.n	8005c58 <HAL_I2C_Mem_Read+0x1d0>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d130      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2180      	movs	r1, #128	@ 0x80
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f8d3 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e04d      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2bff      	cmp	r3, #255	@ 0xff
 8005c18:	d90e      	bls.n	8005c38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	22ff      	movs	r2, #255	@ 0xff
 8005c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	8979      	ldrh	r1, [r7, #10]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fa7f 	bl	8006134 <I2C_TransferConfig>
 8005c36:	e00f      	b.n	8005c58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	8979      	ldrh	r1, [r7, #10]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fa6e 	bl	8006134 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d19a      	bne.n	8005b98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f940 	bl	8005eec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e01a      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb8 <HAL_I2C_Mem_Read+0x230>)
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
  }
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	80002400 	.word	0x80002400
 8005cb8:	fe00e800 	.word	0xfe00e800

08005cbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	817b      	strh	r3, [r7, #10]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	813b      	strh	r3, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	8979      	ldrh	r1, [r7, #10]
 8005cdc:	4b20      	ldr	r3, [pc, #128]	@ (8005d60 <I2C_RequestMemoryRead+0xa4>)
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fa26 	bl	8006134 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	69b9      	ldr	r1, [r7, #24]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f8b6 	bl	8005e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e02c      	b.n	8005d56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d105      	bne.n	8005d0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d02:	893b      	ldrh	r3, [r7, #8]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d0c:	e015      	b.n	8005d3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d0e:	893b      	ldrh	r3, [r7, #8]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f89c 	bl	8005e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e012      	b.n	8005d56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d30:	893b      	ldrh	r3, [r7, #8]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2140      	movs	r1, #64	@ 0x40
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f831 	bl	8005dac <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	80002000 	.word	0x80002000

08005d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d103      	bne.n	8005d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d007      	beq.n	8005da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	619a      	str	r2, [r3, #24]
  }
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dbc:	e03b      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f8d6 	bl	8005f74 <I2C_IsErrorOccurred>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d02d      	beq.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fe fef9 	bl	8004bd0 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d122      	bne.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d113      	bne.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d0b4      	beq.n	8005dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e6a:	e033      	b.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f87f 	bl	8005f74 <I2C_IsErrorOccurred>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e031      	b.n	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d025      	beq.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fe fea2 	bl	8004bd0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11a      	bne.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d013      	beq.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d1c4      	bne.n	8005e6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef8:	e02f      	b.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f838 	bl	8005f74 <I2C_IsErrorOccurred>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e02d      	b.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fe fe5f 	bl	8004bd0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11a      	bne.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d013      	beq.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e007      	b.n	8005f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d1c8      	bne.n	8005efa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d068      	beq.n	8006072 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fa8:	e049      	b.n	800603e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d045      	beq.n	800603e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fe fe0d 	bl	8004bd0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_IsErrorOccurred+0x54>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d13a      	bne.n	800603e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fea:	d121      	bne.n	8006030 <I2C_IsErrorOccurred+0xbc>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ff2:	d01d      	beq.n	8006030 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d01a      	beq.n	8006030 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006008:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800600a:	f7fe fde1 	bl	8004bd0 <HAL_GetTick>
 800600e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006010:	e00e      	b.n	8006030 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006012:	f7fe fddd 	bl	8004bd0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b19      	cmp	r3, #25
 800601e:	d907      	bls.n	8006030 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f043 0320 	orr.w	r3, r3, #32
 8006026:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800602e:	e006      	b.n	800603e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d1e9      	bne.n	8006012 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d003      	beq.n	8006054 <I2C_IsErrorOccurred+0xe0>
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0aa      	beq.n	8005faa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2220      	movs	r2, #32
 8006062:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f043 0304 	orr.w	r3, r3, #4
 800606a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f043 0308 	orr.w	r3, r3, #8
 80060ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f043 0302 	orr.w	r3, r3, #2
 80060ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01c      	beq.n	8006122 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fe3b 	bl	8005d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6859      	ldr	r1, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <I2C_IsErrorOccurred+0x1bc>)
 80060fa:	400b      	ands	r3, r1
 80060fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	431a      	orrs	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	@ 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	fe00e800 	.word	0xfe00e800

08006134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	817b      	strh	r3, [r7, #10]
 8006142:	4613      	mov	r3, r2
 8006144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006146:	897b      	ldrh	r3, [r7, #10]
 8006148:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800614c:	7a7b      	ldrb	r3, [r7, #9]
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006154:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	4313      	orrs	r3, r2
 800615e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006162:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	0d5b      	lsrs	r3, r3, #21
 800616e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006172:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <I2C_TransferConfig+0x60>)
 8006174:	430b      	orrs	r3, r1
 8006176:	43db      	mvns	r3, r3
 8006178:	ea02 0103 	and.w	r1, r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	03ff63ff 	.word	0x03ff63ff

08006198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d138      	bne.n	8006220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e032      	b.n	8006222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	@ 0x24
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	e000      	b.n	8006222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b20      	cmp	r3, #32
 8006242:	d139      	bne.n	80062b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800624e:	2302      	movs	r3, #2
 8006250:	e033      	b.n	80062ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2224      	movs	r2, #36	@ 0x24
 800625e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006280:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	4904      	ldr	r1, [pc, #16]	@ (80062e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4313      	orrs	r3, r2
 80062da:	604b      	str	r3, [r1, #4]
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40010000 	.word	0x40010000

080062ec <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01e      	beq.n	800633c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80062fe:	4b13      	ldr	r3, [pc, #76]	@ (800634c <HAL_IPCC_Init+0x60>)
 8006300:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe f8f4 	bl	80044fc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f000 f85b 	bl	80063d0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f82c 	bl	8006384 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800633a:	e001      	b.n	8006340 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	58000c00 	.word	0x58000c00

08006350 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e00f      	b.n	80063b2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	4a0b      	ldr	r2, [pc, #44]	@ (80063c8 <IPCC_SetDefaultCallbacks+0x44>)
 800639c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3306      	adds	r3, #6
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <IPCC_SetDefaultCallbacks+0x48>)
 80063aa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d9ec      	bls.n	8006392 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	08006351 	.word	0x08006351
 80063cc:	0800636b 	.word	0x0800636b

080063d0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80063e4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	223f      	movs	r2, #63	@ 0x3f
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0c0      	b.n	800658c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f00f f9aa 	bl	8015778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2203      	movs	r2, #3
 8006428:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f005 fca9 	bl	800bd88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
 800643a:	e03e      	b.n	80064ba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	440b      	add	r3, r1
 800644a:	3311      	adds	r3, #17
 800644c:	2201      	movs	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006450:	7bfa      	ldrb	r2, [r7, #15]
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	440b      	add	r3, r1
 800645e:	3310      	adds	r3, #16
 8006460:	7bfa      	ldrb	r2, [r7, #15]
 8006462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006464:	7bfa      	ldrb	r2, [r7, #15]
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	440b      	add	r3, r1
 8006472:	3313      	adds	r3, #19
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	3320      	adds	r3, #32
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800648c:	7bfa      	ldrb	r2, [r7, #15]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	440b      	add	r3, r1
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	440b      	add	r3, r1
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	3301      	adds	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	7bfa      	ldrb	r2, [r7, #15]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3bb      	bcc.n	800643c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e044      	b.n	8006554 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	440b      	add	r3, r1
 80064d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064e0:	7bfa      	ldrb	r2, [r7, #15]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	440b      	add	r3, r1
 80064ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064f2:	7bfa      	ldrb	r2, [r7, #15]
 80064f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	440b      	add	r3, r1
 800651a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006522:	7bfa      	ldrb	r2, [r7, #15]
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	440b      	add	r3, r1
 8006546:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	3301      	adds	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	791b      	ldrb	r3, [r3, #4]
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3b5      	bcc.n	80064ca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	e893 0006 	ldmia.w	r3, {r1, r2}
 800656a:	f005 fc28 	bl	800bdbe <USB_DevInit>

  hpcd->USB_Address = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7a9b      	ldrb	r3, [r3, #10]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d102      	bne.n	800658a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fc40 	bl	8007e0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_PCD_Start+0x16>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e012      	b.n	80065d0 <HAL_PCD_Start+0x3c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f005 fbcf 	bl	800bd5a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f007 fe90 	bl	800e2e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f007 fe95 	bl	800e314 <USB_ReadInterrupts>
 80065ea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb04 	bl	8006c04 <PCD_EP_ISR_Handler>

    return;
 80065fc:	e110      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800661a:	b292      	uxth	r2, r2
 800661c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f00f f95c 	bl	80158de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8fc 	bl	8006826 <HAL_PCD_SetAddress>

    return;
 800662e:	e0f7      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006642:	b29a      	uxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800664c:	b292      	uxth	r2, r2
 800664e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006652:	e0e5      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006670:	b292      	uxth	r2, r2
 8006672:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006676:	e0d3      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d034      	beq.n	80066ec <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0204 	bic.w	r2, r2, #4
 8006694:	b292      	uxth	r2, r2
 8006696:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0208 	bic.w	r2, r2, #8
 80066ac:	b292      	uxth	r2, r2
 80066ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066c4:	2100      	movs	r1, #0
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f00f fafe 	bl	8015cc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f00f f93f 	bl	8015950 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066da:	b29a      	uxth	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066e4:	b292      	uxth	r2, r2
 80066e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80066ea:	e099      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d027      	beq.n	8006746 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0208 	orr.w	r2, r2, #8
 8006708:	b292      	uxth	r2, r2
 800670a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006720:	b292      	uxth	r2, r2
 8006722:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0204 	orr.w	r2, r2, #4
 8006738:	b292      	uxth	r2, r2
 800673a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f00f f8ec 	bl	801591c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006744:	e06c      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d040      	beq.n	80067d2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006762:	b292      	uxth	r2, r2
 8006764:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d12b      	bne.n	80067ca <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0204 	orr.w	r2, r2, #4
 8006784:	b292      	uxth	r2, r2
 8006786:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0208 	orr.w	r2, r2, #8
 800679c:	b292      	uxth	r2, r2
 800679e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80067c0:	2101      	movs	r1, #1
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f00f fa80 	bl	8015cc8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80067c8:	e02a      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f00f f8a6 	bl	801591c <HAL_PCD_SuspendCallback>
    return;
 80067d0:	e026      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80067ee:	b292      	uxth	r2, r2
 80067f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f00f f864 	bl	80158c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80067fa:	e011      	b.n	8006820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006818:	b292      	uxth	r2, r2
 800681a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800681e:	bf00      	nop
  }
}
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_PCD_SetAddress+0x1a>
 800683c:	2302      	movs	r3, #2
 800683e:	e012      	b.n	8006866 <HAL_PCD_SetAddress+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f007 fd31 	bl	800e2be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	461a      	mov	r2, r3
 800687c:	4603      	mov	r3, r0
 800687e:	70fb      	strb	r3, [r7, #3]
 8006880:	460b      	mov	r3, r1
 8006882:	803b      	strh	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800688c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006890:	2b00      	cmp	r3, #0
 8006892:	da0e      	bge.n	80068b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 0207 	and.w	r2, r3, #7
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	3310      	adds	r3, #16
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	705a      	strb	r2, [r3, #1]
 80068b0:	e00e      	b.n	80068d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	f003 0207 	and.w	r2, r3, #7
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068dc:	883a      	ldrh	r2, [r7, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	78ba      	ldrb	r2, [r7, #2]
 80068e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068e8:	78bb      	ldrb	r3, [r7, #2]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d102      	bne.n	80068f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_PCD_EP_Open+0x94>
 80068fe:	2302      	movs	r3, #2
 8006900:	e00e      	b.n	8006920 <HAL_PCD_EP_Open+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	4618      	mov	r0, r3
 8006912:	f005 fa73 	bl	800bdfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800691e:	7afb      	ldrb	r3, [r7, #11]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da0e      	bge.n	800695a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	f003 0207 	and.w	r2, r3, #7
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	3310      	adds	r3, #16
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	705a      	strb	r2, [r3, #1]
 8006958:	e00e      	b.n	8006978 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	f003 0207 	and.w	r2, r3, #7
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4413      	add	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	b2da      	uxtb	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_PCD_EP_Close+0x6a>
 800698e:	2302      	movs	r3, #2
 8006990:	e00e      	b.n	80069b0 <HAL_PCD_EP_Close+0x88>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f005 fdef 	bl	800c584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	460b      	mov	r3, r1
 80069c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	f003 0207 	and.w	r2, r3, #7
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069f8:	7afb      	ldrb	r3, [r7, #11]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6979      	ldr	r1, [r7, #20]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f005 ffa7 	bl	800c95e <USB_EPStartXfer>

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 0207 	and.w	r2, r3, #7
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006a3c:	681b      	ldr	r3, [r3, #0]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	460b      	mov	r3, r1
 8006a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	f003 0207 	and.w	r2, r3, #7
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	3310      	adds	r3, #16
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2201      	movs	r2, #1
 8006a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6979      	ldr	r1, [r7, #20]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f005 ff58 	bl	800c95e <USB_EPStartXfer>

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	7912      	ldrb	r2, [r2, #4]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e03e      	b.n	8006b54 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da0e      	bge.n	8006afc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	f003 0207 	and.w	r2, r3, #7
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	3310      	adds	r3, #16
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	705a      	strb	r2, [r3, #1]
 8006afa:	e00c      	b.n	8006b16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_PCD_EP_SetStall+0x7e>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e00e      	b.n	8006b54 <HAL_PCD_EP_SetStall+0x9c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f007 fabb 	bl	800e0c0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	7912      	ldrb	r2, [r2, #4]
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e040      	b.n	8006bfc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da0e      	bge.n	8006ba0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 0207 	and.w	r2, r3, #7
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	3310      	adds	r3, #16
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	705a      	strb	r2, [r3, #1]
 8006b9e:	e00e      	b.n	8006bbe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	f003 0207 	and.w	r2, r3, #7
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_PCD_EP_ClrStall+0x82>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e00e      	b.n	8006bfc <HAL_PCD_EP_ClrStall+0xa0>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f007 fab8 	bl	800e162 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b096      	sub	sp, #88	@ 0x58
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c0c:	e3ad      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006c1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006c28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 816f 	bne.w	8006f10 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d14c      	bne.n	8006cd8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	81fb      	strh	r3, [r7, #14]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	89fb      	ldrh	r3, [r7, #14]
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3310      	adds	r3, #16
 8006c66:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	441a      	add	r2, r3
 8006c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f00e fdf4 	bl	801588e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7b1b      	ldrb	r3, [r3, #12]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 835c 	beq.w	800736a <PCD_EP_ISR_Handler+0x766>
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8357 	bne.w	800736a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7b1b      	ldrb	r3, [r3, #12]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	731a      	strb	r2, [r3, #12]
 8006cd6:	e348      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cde:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006cea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d032      	beq.n	8006d5c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f007 fb41 	bl	800e3b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006d42:	4013      	ands	r3, r2
 8006d44:	823b      	strh	r3, [r7, #16]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	8a3a      	ldrh	r2, [r7, #16]
 8006d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d50:	b292      	uxth	r2, r2
 8006d52:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f00e fd6d 	bl	8015834 <HAL_PCD_SetupStageCallback>
 8006d5a:	e306      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d5c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f280 8302 	bge.w	800736a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006d72:	4013      	ands	r3, r2
 8006d74:	83fb      	strh	r3, [r7, #30]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	8bfa      	ldrh	r2, [r7, #30]
 8006d7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d80:	b292      	uxth	r2, r2
 8006d82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4413      	add	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006daa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d019      	beq.n	8006de8 <PCD_EP_ISR_Handler+0x1e4>
 8006db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d015      	beq.n	8006de8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dc2:	6959      	ldr	r1, [r3, #20]
 8006dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f007 faf3 	bl	800e3b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	441a      	add	r2, r3
 8006ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f00e fd38 	bl	8015858 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006df2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 82b5 	bne.w	800736a <PCD_EP_ISR_Handler+0x766>
 8006e00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e04:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e0c:	f000 82ad 	beq.w	800736a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	4413      	add	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e46:	d91d      	bls.n	8006e84 <PCD_EP_ISR_Handler+0x280>
 8006e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <PCD_EP_ISR_Handler+0x25e>
 8006e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e026      	b.n	8006ed2 <PCD_EP_ISR_Handler+0x2ce>
 8006e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <PCD_EP_ISR_Handler+0x29e>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e017      	b.n	8006ed2 <PCD_EP_ISR_Handler+0x2ce>
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <PCD_EP_ISR_Handler+0x2b8>
 8006eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb8:	3301      	adds	r3, #1
 8006eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	029b      	lsls	r3, r3, #10
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee2:	827b      	strh	r3, [r7, #18]
 8006ee4:	8a7b      	ldrh	r3, [r7, #18]
 8006ee6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006eea:	827b      	strh	r3, [r7, #18]
 8006eec:	8a7b      	ldrh	r3, [r7, #18]
 8006eee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ef2:	827b      	strh	r3, [r7, #18]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	8a7b      	ldrh	r3, [r7, #18]
 8006efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]
 8006f0e:	e22c      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f24:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f280 80f6 	bge.w	800711a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006f44:	4013      	ands	r3, r2
 8006f46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006f5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f60:	b292      	uxth	r2, r2
 8006f62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006f64:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d123      	bne.n	8006fca <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 808e 	beq.w	80070d0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fba:	6959      	ldr	r1, [r3, #20]
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbe:	88da      	ldrh	r2, [r3, #6]
 8006fc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006fc4:	f007 f9f8 	bl	800e3b8 <USB_ReadPMA>
 8006fc8:	e082      	b.n	80070d0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fcc:	78db      	ldrb	r3, [r3, #3]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d10a      	bne.n	8006fe8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006fd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9d3 	bl	8007386 <HAL_PCD_EP_DB_Receive>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006fe6:	e073      	b.n	80070d0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007002:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d022      	beq.n	800708c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	4413      	add	r3, r2
 8007060:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800706a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800706e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02c      	beq.n	80070d0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800707c:	6959      	ldr	r1, [r3, #20]
 800707e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007080:	891a      	ldrh	r2, [r3, #8]
 8007082:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007086:	f007 f997 	bl	800e3b8 <USB_ReadPMA>
 800708a:	e021      	b.n	80070d0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4413      	add	r3, r2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80070b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c2:	6959      	ldr	r1, [r3, #20]
 80070c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c6:	895a      	ldrh	r2, [r3, #10]
 80070c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070cc:	f007 f974 	bl	800e3b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80070d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070d8:	441a      	add	r2, r3
 80070da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070e6:	441a      	add	r2, r3
 80070e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80070ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <PCD_EP_ISR_Handler+0x4fc>
 80070f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80070f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d206      	bcs.n	800710e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f00e fba6 	bl	8015858 <HAL_PCD_DataOutStageCallback>
 800710c:	e005      	b.n	800711a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007114:	4618      	mov	r0, r3
 8007116:	f005 fc22 	bl	800c95e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800711a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800711e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8121 	beq.w	800736a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007128:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	3310      	adds	r3, #16
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	4413      	add	r3, r2
 800713a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	441a      	add	r2, r3
 8007168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717a:	78db      	ldrb	r3, [r3, #3]
 800717c:	2b01      	cmp	r3, #1
 800717e:	f040 80a2 	bne.w	80072c6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007184:	2200      	movs	r2, #0
 8007186:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800718a:	7b1b      	ldrb	r3, [r3, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8093 	beq.w	80072b8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007192:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d046      	beq.n	800722c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d126      	bne.n	80071f4 <PCD_EP_ISR_Handler+0x5f0>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	4413      	add	r3, r2
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	00da      	lsls	r2, r3, #3
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071cc:	623b      	str	r3, [r7, #32]
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e061      	b.n	80072b8 <PCD_EP_ISR_Handler+0x6b4>
 80071f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d15d      	bne.n	80072b8 <PCD_EP_ISR_Handler+0x6b4>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007210:	4413      	add	r3, r2
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	00da      	lsls	r2, r3, #3
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	4413      	add	r3, r2
 800721e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	2200      	movs	r2, #0
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e045      	b.n	80072b8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d126      	bne.n	8007288 <PCD_EP_ISR_Handler+0x684>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007248:	b29b      	uxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724e:	4413      	add	r3, r2
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
 8007252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00da      	lsls	r2, r3, #3
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	4413      	add	r3, r2
 800725c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007260:	633b      	str	r3, [r7, #48]	@ 0x30
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726c:	b29a      	uxth	r2, r3
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007280:	b29a      	uxth	r2, r3
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e017      	b.n	80072b8 <PCD_EP_ISR_Handler+0x6b4>
 8007288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d113      	bne.n	80072b8 <PCD_EP_ISR_Handler+0x6b4>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	4413      	add	r3, r2
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	00da      	lsls	r2, r3, #3
 80072a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	2200      	movs	r2, #0
 80072b6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f00e fae5 	bl	801588e <HAL_PCD_DataInStageCallback>
 80072c4:	e051      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80072c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80072ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d144      	bne.n	800735c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80072fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007302:	429a      	cmp	r2, r3
 8007304:	d907      	bls.n	8007316 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007312:	619a      	str	r2, [r3, #24]
 8007314:	e002      	b.n	800731c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007318:	2200      	movs	r2, #0
 800731a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800731c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f00e faaf 	bl	801588e <HAL_PCD_DataInStageCallback>
 8007330:	e01b      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800733a:	441a      	add	r2, r3
 800733c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007348:	441a      	add	r2, r3
 800734a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800734c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007354:	4618      	mov	r0, r3
 8007356:	f005 fb02 	bl	800c95e <USB_EPStartXfer>
 800735a:	e006      	b.n	800736a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800735c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007360:	461a      	mov	r2, r3
 8007362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f917 	bl	8007598 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007372:	b29b      	uxth	r3, r3
 8007374:	b21b      	sxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	f6ff ac49 	blt.w	8006c0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3758      	adds	r7, #88	@ 0x58
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	4613      	mov	r3, r2
 8007392:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d07c      	beq.n	8007498 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	4413      	add	r3, r2
 80073b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	8b7b      	ldrh	r3, [r7, #26]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d306      	bcc.n	80073dc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	8b7b      	ldrh	r3, [r7, #26]
 80073d4:	1ad2      	subs	r2, r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	619a      	str	r2, [r3, #24]
 80073da:	e002      	b.n	80073e2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d123      	bne.n	8007432 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007404:	833b      	strh	r3, [r7, #24]
 8007406:	8b3b      	ldrh	r3, [r7, #24]
 8007408:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800740c:	833b      	strh	r3, [r7, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	8b3b      	ldrh	r3, [r7, #24]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01f      	beq.n	800747c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007456:	82fb      	strh	r3, [r7, #22]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	8afb      	ldrh	r3, [r7, #22]
 8007468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007474:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007478:	b29b      	uxth	r3, r3
 800747a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800747c:	8b7b      	ldrh	r3, [r7, #26]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8085 	beq.w	800758e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6959      	ldr	r1, [r3, #20]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	891a      	ldrh	r2, [r3, #8]
 8007490:	8b7b      	ldrh	r3, [r7, #26]
 8007492:	f006 ff91 	bl	800e3b8 <USB_ReadPMA>
 8007496:	e07a      	b.n	800758e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	4413      	add	r3, r2
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	8b7b      	ldrh	r3, [r7, #26]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d306      	bcc.n	80074d6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	8b7b      	ldrh	r3, [r7, #26]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	619a      	str	r2, [r3, #24]
 80074d4:	e002      	b.n	80074dc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d123      	bne.n	800752c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fe:	83fb      	strh	r3, [r7, #30]
 8007500:	8bfb      	ldrh	r3, [r7, #30]
 8007502:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007506:	83fb      	strh	r3, [r7, #30]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	8bfb      	ldrh	r3, [r7, #30]
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11f      	bne.n	8007576 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007550:	83bb      	strh	r3, [r7, #28]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	8bbb      	ldrh	r3, [r7, #28]
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	6959      	ldr	r1, [r3, #20]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	895a      	ldrh	r2, [r3, #10]
 8007588:	8b7b      	ldrh	r3, [r7, #26]
 800758a:	f006 ff15 	bl	800e3b8 <USB_ReadPMA>
    }
  }

  return count;
 800758e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b0a4      	sub	sp, #144	@ 0x90
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 81db 	beq.w	8007968 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	4413      	add	r3, r2
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d907      	bls.n	80075f6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	619a      	str	r2, [r3, #24]
 80075f4:	e002      	b.n	80075fc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f040 80b9 	bne.w	8007778 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d126      	bne.n	800765c <HAL_PCD_EP_DB_Transmit+0xc4>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800761c:	b29b      	uxth	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	4413      	add	r3, r2
 8007624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	00da      	lsls	r2, r3, #3
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	4413      	add	r3, r2
 8007630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007640:	b29a      	uxth	r2, r3
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007654:	b29a      	uxth	r2, r3
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	e01a      	b.n	8007692 <HAL_PCD_EP_DB_Transmit+0xfa>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d116      	bne.n	8007692 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007678:	4413      	add	r3, r2
 800767a:	637b      	str	r3, [r7, #52]	@ 0x34
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00da      	lsls	r2, r3, #3
 8007682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007684:	4413      	add	r3, r2
 8007686:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2200      	movs	r2, #0
 8007690:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d126      	bne.n	80076ee <HAL_PCD_EP_DB_Transmit+0x156>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	61fb      	str	r3, [r7, #28]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	00da      	lsls	r2, r3, #3
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	801a      	strh	r2, [r3, #0]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e017      	b.n	800771e <HAL_PCD_EP_DB_Transmit+0x186>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d113      	bne.n	800771e <HAL_PCD_EP_DB_Transmit+0x186>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	4413      	add	r3, r2
 8007706:	627b      	str	r3, [r7, #36]	@ 0x24
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	00da      	lsls	r2, r3, #3
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	4413      	add	r3, r2
 8007712:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2200      	movs	r2, #0
 800771c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f00e f8b2 	bl	801588e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 82fa 	beq.w	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007750:	82fb      	strh	r3, [r7, #22]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	8afb      	ldrh	r3, [r7, #22]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800776e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
 8007776:	e2d8      	b.n	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d021      	beq.n	80077c6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	f040 82ac 	bne.w	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	695a      	ldr	r2, [r3, #20]
 80077d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077da:	441a      	add	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077e8:	441a      	add	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6a1a      	ldr	r2, [r3, #32]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d30b      	bcc.n	8007812 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6a1a      	ldr	r2, [r3, #32]
 8007806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	621a      	str	r2, [r3, #32]
 8007810:	e017      	b.n	8007842 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d108      	bne.n	800782c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800781a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800781e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800782a:	e00a      	b.n	8007842 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2200      	movs	r2, #0
 8007840:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d165      	bne.n	8007916 <HAL_PCD_EP_DB_Transmit+0x37e>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785e:	4413      	add	r3, r2
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00da      	lsls	r2, r3, #3
 8007868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786a:	4413      	add	r3, r2
 800786c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787c:	b29a      	uxth	r2, r3
 800787e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007880:	801a      	strh	r2, [r3, #0]
 8007882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007886:	2b3e      	cmp	r3, #62	@ 0x3e
 8007888:	d91d      	bls.n	80078c6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800788a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800789e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a0:	3b01      	subs	r3, #1
 80078a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	029b      	lsls	r3, r3, #10
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078be:	b29a      	uxth	r2, r3
 80078c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	e044      	b.n	8007950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10a      	bne.n	80078e4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e035      	b.n	8007950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_PCD_EP_DB_Transmit+0x366>
 80078f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078fa:	3301      	adds	r3, #1
 80078fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29a      	uxth	r2, r3
 8007904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007906:	b29b      	uxth	r3, r3
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	b29b      	uxth	r3, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	b29a      	uxth	r2, r3
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e01c      	b.n	8007950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d118      	bne.n	8007950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	647b      	str	r3, [r7, #68]	@ 0x44
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800792c:	b29b      	uxth	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007932:	4413      	add	r3, r2
 8007934:	647b      	str	r3, [r7, #68]	@ 0x44
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	00da      	lsls	r2, r3, #3
 800793c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800793e:	4413      	add	r3, r2
 8007940:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007944:	643b      	str	r3, [r7, #64]	@ 0x40
 8007946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800794a:	b29a      	uxth	r2, r3
 800794c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6959      	ldr	r1, [r3, #20]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	891a      	ldrh	r2, [r3, #8]
 800795c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007960:	b29b      	uxth	r3, r3
 8007962:	f006 fce7 	bl	800e334 <USB_WritePMA>
 8007966:	e1e0      	b.n	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007970:	b29b      	uxth	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4413      	add	r3, r2
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	4413      	add	r3, r2
 8007982:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007998:	429a      	cmp	r2, r3
 800799a:	d307      	bcc.n	80079ac <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80079a4:	1ad2      	subs	r2, r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	619a      	str	r2, [r3, #24]
 80079aa:	e002      	b.n	80079b2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 80c0 	bne.w	8007b3c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d126      	bne.n	8007a12 <HAL_PCD_EP_DB_Transmit+0x47a>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079d8:	4413      	add	r3, r2
 80079da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00da      	lsls	r2, r3, #3
 80079e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e01a      	b.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d116      	bne.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a2e:	4413      	add	r3, r2
 8007a30:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	00da      	lsls	r2, r3, #3
 8007a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a44:	2200      	movs	r2, #0
 8007a46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d12b      	bne.n	8007aae <HAL_PCD_EP_DB_Transmit+0x516>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a6a:	4413      	add	r3, r2
 8007a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	00da      	lsls	r2, r3, #3
 8007a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a76:	4413      	add	r3, r2
 8007a78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e017      	b.n	8007ade <HAL_PCD_EP_DB_Transmit+0x546>
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d113      	bne.n	8007ade <HAL_PCD_EP_DB_Transmit+0x546>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ac4:	4413      	add	r3, r2
 8007ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	00da      	lsls	r2, r3, #3
 8007ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ada:	2200      	movs	r2, #0
 8007adc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f00d fed2 	bl	801588e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 811a 	bne.w	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	8013      	strh	r3, [r2, #0]
 8007b3a:	e0f6      	b.n	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d121      	bne.n	8007b8a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	441a      	add	r2, r3
 8007b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	f040 80ca 	bne.w	8007d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007bac:	441a      	add	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a1a      	ldr	r2, [r3, #32]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d30b      	bcc.n	8007bd6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	621a      	str	r2, [r3, #32]
 8007bd4:	e017      	b.n	8007c06 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d108      	bne.n	8007bf0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007bee:	e00a      	b.n	8007c06 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d165      	bne.n	8007ce0 <HAL_PCD_EP_DB_Transmit+0x748>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c28:	4413      	add	r3, r2
 8007c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	00da      	lsls	r2, r3, #3
 8007c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c34:	4413      	add	r3, r2
 8007c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c52:	d91d      	bls.n	8007c90 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	e041      	b.n	8007d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <HAL_PCD_EP_DB_Transmit+0x716>
 8007c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e032      	b.n	8007d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8007cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	029b      	lsls	r3, r3, #10
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e019      	b.n	8007d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d115      	bne.n	8007d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf6:	4413      	add	r3, r2
 8007cf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	00da      	lsls	r2, r3, #3
 8007d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d02:	4413      	add	r3, r2
 8007d04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	6959      	ldr	r1, [r3, #20]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	895a      	ldrh	r2, [r3, #10]
 8007d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f006 fb05 	bl	800e334 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d44:	82bb      	strh	r3, [r7, #20]
 8007d46:	8abb      	ldrh	r3, [r7, #20]
 8007d48:	f083 0310 	eor.w	r3, r3, #16
 8007d4c:	82bb      	strh	r3, [r7, #20]
 8007d4e:	8abb      	ldrh	r3, [r7, #20]
 8007d50:	f083 0320 	eor.w	r3, r3, #32
 8007d54:	82bb      	strh	r3, [r7, #20]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	441a      	add	r2, r3
 8007d64:	8abb      	ldrh	r3, [r7, #20]
 8007d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3790      	adds	r7, #144	@ 0x90
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	817b      	strh	r3, [r7, #10]
 8007d92:	4613      	mov	r3, r2
 8007d94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007d96:	897b      	ldrh	r3, [r7, #10]
 8007d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007da2:	897b      	ldrh	r3, [r7, #10]
 8007da4:	f003 0207 	and.w	r2, r3, #7
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	3310      	adds	r3, #16
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e009      	b.n	8007dce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007dba:	897a      	ldrh	r2, [r7, #10]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007dce:	893b      	ldrh	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d107      	bne.n	8007de4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	80da      	strh	r2, [r3, #6]
 8007de2:	e00b      	b.n	8007dfc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2201      	movs	r2, #1
 8007de8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f043 0302 	orr.w	r3, r3, #2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e64:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a04      	ldr	r2, [pc, #16]	@ (8007e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e6e:	6013      	str	r3, [r2, #0]
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	58000400 	.word	0x58000400

08007e80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58000400 	.word	0x58000400

08007e9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007ea0:	4b05      	ldr	r3, [pc, #20]	@ (8007eb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4a04      	ldr	r2, [pc, #16]	@ (8007eb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007eaa:	6053      	str	r3, [r2, #4]
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	58000400 	.word	0x58000400

08007ebc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ece:	d101      	bne.n	8007ed4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <LL_RCC_HSE_Enable>:
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ef2:	6013      	str	r3, [r2, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <LL_RCC_HSE_Disable>:
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
}
 8007f12:	bf00      	nop
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <LL_RCC_HSE_IsReady>:
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f2e:	d101      	bne.n	8007f34 <LL_RCC_HSE_IsReady+0x18>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <LL_RCC_HSE_IsReady+0x1a>
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <LL_RCC_HSI_Enable>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f52:	6013      	str	r3, [r2, #0]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <LL_RCC_HSI_Disable>:
{
 8007f5e:	b480      	push	{r7}
 8007f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f70:	6013      	str	r3, [r2, #0]
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <LL_RCC_HSI_IsReady>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f8e:	d101      	bne.n	8007f94 <LL_RCC_HSI_IsReady+0x18>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <LL_RCC_HSI_IsReady+0x1a>
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	604b      	str	r3, [r1, #4]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <LL_RCC_HSI48_Enable>:
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007fe2:	bf00      	nop
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <LL_RCC_HSI48_Disable>:
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <LL_RCC_HSI48_IsReady>:
{
 800800e:	b480      	push	{r7}
 8008010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b02      	cmp	r3, #2
 8008020:	d101      	bne.n	8008026 <LL_RCC_HSI48_IsReady+0x18>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <LL_RCC_HSI48_IsReady+0x1a>
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_RCC_LSE_Enable>:
{
 8008032:	b480      	push	{r7}
 8008034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800804a:	bf00      	nop
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <LL_RCC_LSE_Disable>:
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800805c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800806c:	bf00      	nop
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <LL_RCC_LSE_EnableBypass>:
{
 8008076:	b480      	push	{r7}
 8008078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800807a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008086:	f043 0304 	orr.w	r3, r3, #4
 800808a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800808e:	bf00      	nop
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <LL_RCC_LSE_DisableBypass>:
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800809c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <LL_RCC_LSE_IsReady>:
{
 80080ba:	b480      	push	{r7}
 80080bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80080be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d101      	bne.n	80080d2 <LL_RCC_LSE_IsReady+0x18>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <LL_RCC_LSE_IsReady+0x1a>
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <LL_RCC_LSI1_Enable>:
{
 80080de:	b480      	push	{r7}
 80080e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80080e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80080f6:	bf00      	nop
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <LL_RCC_LSI1_Disable>:
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800810c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008118:	bf00      	nop
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <LL_RCC_LSI1_IsReady>:
{
 8008122:	b480      	push	{r7}
 8008124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d101      	bne.n	800813a <LL_RCC_LSI1_IsReady+0x18>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <LL_RCC_LSI1_IsReady+0x1a>
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <LL_RCC_LSI2_Enable>:
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800814a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008156:	f043 0304 	orr.w	r3, r3, #4
 800815a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800815e:	bf00      	nop
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <LL_RCC_LSI2_Disable>:
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800816c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008178:	f023 0304 	bic.w	r3, r3, #4
 800817c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008180:	bf00      	nop
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <LL_RCC_LSI2_IsReady>:
{
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800818e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b08      	cmp	r3, #8
 800819c:	d101      	bne.n	80081a2 <LL_RCC_LSI2_IsReady+0x18>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <LL_RCC_LSI2_IsReady+0x1a>
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <LL_RCC_LSI2_SetTrimming>:
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <LL_RCC_MSI_Enable>:
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80081e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <LL_RCC_MSI_Disable>:
{
 80081fa:	b480      	push	{r7}
 80081fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80081fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	6013      	str	r3, [r2, #0]
}
 800820e:	bf00      	nop
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <LL_RCC_MSI_IsReady>:
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800821c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b02      	cmp	r3, #2
 8008228:	d101      	bne.n	800822e <LL_RCC_MSI_IsReady+0x16>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <LL_RCC_MSI_IsReady+0x18>
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <LL_RCC_MSI_SetRange>:
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800824c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4313      	orrs	r3, r2
 8008254:	600b      	str	r3, [r1, #0]
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <LL_RCC_MSI_GetRange>:
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008272:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2bb0      	cmp	r3, #176	@ 0xb0
 8008278:	d901      	bls.n	800827e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800827a:	23b0      	movs	r3, #176	@ 0xb0
 800827c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800827e:	687b      	ldr	r3, [r7, #4]
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <LL_RCC_MSI_SetCalibTrimming>:
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082a6:	4313      	orrs	r3, r2
 80082a8:	604b      	str	r3, [r1, #4]
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <LL_RCC_SetSysClkSource>:
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80082be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f023 0203 	bic.w	r2, r3, #3
 80082c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	608b      	str	r3, [r1, #8]
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <LL_RCC_GetSysClkSource>:
{
 80082de:	b480      	push	{r7}
 80082e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 030c 	and.w	r3, r3, #12
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <LL_RCC_SetAHBPrescaler>:
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80082fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4313      	orrs	r3, r2
 8008310:	608b      	str	r3, [r1, #8]
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <LL_C2_RCC_SetAHBPrescaler>:
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800832a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800832e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4313      	orrs	r3, r2
 800833a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <LL_RCC_SetAHB4Prescaler>:
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008356:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800835a:	f023 020f 	bic.w	r2, r3, #15
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	091b      	lsrs	r3, r3, #4
 8008362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <LL_RCC_SetAPB1Prescaler>:
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800838a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4313      	orrs	r3, r2
 8008392:	608b      	str	r3, [r1, #8]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <LL_RCC_SetAPB2Prescaler>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80083a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80083b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	608b      	str	r3, [r1, #8]
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <LL_RCC_GetAHBPrescaler>:
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <LL_RCC_GetAHB4Prescaler>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <LL_RCC_PLL_Enable>:
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800840a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800840e:	6013      	str	r3, [r2, #0]
}
 8008410:	bf00      	nop
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <LL_RCC_PLL_Disable>:
{
 800841a:	b480      	push	{r7}
 800841c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800841e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800842c:	6013      	str	r3, [r2, #0]
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <LL_RCC_PLL_IsReady>:
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800843c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800844a:	d101      	bne.n	8008450 <LL_RCC_PLL_IsReady+0x18>
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <LL_RCC_PLL_IsReady+0x1a>
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <LL_RCC_PLL_GetN>:
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800846c:	4618      	mov	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <LL_RCC_PLL_GetR>:
{
 8008476:	b480      	push	{r7}
 8008478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800847a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008484:	4618      	mov	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <LL_RCC_PLL_GetDivider>:
{
 800848e:	b480      	push	{r7}
 8008490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800849c:	4618      	mov	r0, r3
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <LL_RCC_PLL_GetMainSource>:
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80084aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f003 0303 	and.w	r3, r3, #3
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <LL_RCC_IsActiveFlag_HPRE>:
{
 80084be:	b480      	push	{r7}
 80084c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80084c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d0:	d101      	bne.n	80084d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80084e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084f6:	d101      	bne.n	80084fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800850c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008510:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851c:	d101      	bne.n	8008522 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800852e:	b480      	push	{r7}
 8008530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008540:	d101      	bne.n	8008546 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008552:	b480      	push	{r7}
 8008554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008564:	d101      	bne.n	800856a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008578:	b590      	push	{r4, r7, lr}
 800857a:	b08d      	sub	sp, #52	@ 0x34
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e363      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 808d 	beq.w	80086b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008598:	f7ff fea1 	bl	80082de <LL_RCC_GetSysClkSource>
 800859c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800859e:	f7ff ff82 	bl	80084a6 <LL_RCC_PLL_GetMainSource>
 80085a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <HAL_RCC_OscConfig+0x3e>
 80085aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	d147      	bne.n	8008640 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80085b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d144      	bne.n	8008640 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e347      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80085c6:	f7ff fe4c 	bl	8008262 <LL_RCC_MSI_GetRange>
 80085ca:	4603      	mov	r3, r0
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d914      	bls.n	80085fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fd03 	bl	8008fe0 <RCC_SetFlashLatencyFromMSIRange>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e336      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fe26 	bl	800823a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff fe4a 	bl	800828c <LL_RCC_MSI_SetCalibTrimming>
 80085f8:	e013      	b.n	8008622 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fe1b 	bl	800823a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fe3f 	bl	800828c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fce4 	bl	8008fe0 <RCC_SetFlashLatencyFromMSIRange>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e317      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008622:	f000 fcc9 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8008626:	4603      	mov	r3, r0
 8008628:	4aa4      	ldr	r2, [pc, #656]	@ (80088bc <HAL_RCC_OscConfig+0x344>)
 800862a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800862c:	4ba4      	ldr	r3, [pc, #656]	@ (80088c0 <HAL_RCC_OscConfig+0x348>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f7fc fa7f 	bl	8004b34 <HAL_InitTick>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d039      	beq.n	80086b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e308      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01e      	beq.n	8008686 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008648:	f7ff fdc8 	bl	80081dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800864c:	f7fc fac0 	bl	8004bd0 <HAL_GetTick>
 8008650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008654:	f7fc fabc 	bl	8004bd0 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e2f5      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008666:	f7ff fdd7 	bl	8008218 <LL_RCC_MSI_IsReady>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0f1      	beq.n	8008654 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fde0 	bl	800823a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fe04 	bl	800828c <LL_RCC_MSI_SetCalibTrimming>
 8008684:	e015      	b.n	80086b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008686:	f7ff fdb8 	bl	80081fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800868a:	f7fc faa1 	bl	8004bd0 <HAL_GetTick>
 800868e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008690:	e008      	b.n	80086a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008692:	f7fc fa9d 	bl	8004bd0 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d901      	bls.n	80086a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e2d6      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80086a4:	f7ff fdb8 	bl	8008218 <LL_RCC_MSI_IsReady>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f1      	bne.n	8008692 <HAL_RCC_OscConfig+0x11a>
 80086ae:	e000      	b.n	80086b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80086b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d047      	beq.n	800874e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086be:	f7ff fe0e 	bl	80082de <LL_RCC_GetSysClkSource>
 80086c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086c4:	f7ff feef 	bl	80084a6 <LL_RCC_PLL_GetMainSource>
 80086c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d005      	beq.n	80086dc <HAL_RCC_OscConfig+0x164>
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b0c      	cmp	r3, #12
 80086d4:	d108      	bne.n	80086e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d105      	bne.n	80086e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d134      	bne.n	800874e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e2b4      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f0:	d102      	bne.n	80086f8 <HAL_RCC_OscConfig+0x180>
 80086f2:	f7ff fbf5 	bl	8007ee0 <LL_RCC_HSE_Enable>
 80086f6:	e001      	b.n	80086fc <HAL_RCC_OscConfig+0x184>
 80086f8:	f7ff fc01 	bl	8007efe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d012      	beq.n	800872a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008704:	f7fc fa64 	bl	8004bd0 <HAL_GetTick>
 8008708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800870c:	f7fc fa60 	bl	8004bd0 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b64      	cmp	r3, #100	@ 0x64
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e299      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800871e:	f7ff fbfd 	bl	8007f1c <LL_RCC_HSE_IsReady>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0f1      	beq.n	800870c <HAL_RCC_OscConfig+0x194>
 8008728:	e011      	b.n	800874e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fc fa51 	bl	8004bd0 <HAL_GetTick>
 800872e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008732:	f7fc fa4d 	bl	8004bd0 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b64      	cmp	r3, #100	@ 0x64
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e286      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008744:	f7ff fbea 	bl	8007f1c <LL_RCC_HSE_IsReady>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f1      	bne.n	8008732 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04c      	beq.n	80087f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800875a:	f7ff fdc0 	bl	80082de <LL_RCC_GetSysClkSource>
 800875e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008760:	f7ff fea1 	bl	80084a6 <LL_RCC_PLL_GetMainSource>
 8008764:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b04      	cmp	r3, #4
 800876a:	d005      	beq.n	8008778 <HAL_RCC_OscConfig+0x200>
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b0c      	cmp	r3, #12
 8008770:	d10e      	bne.n	8008790 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d10b      	bne.n	8008790 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e266      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fc09 	bl	8007fa0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800878e:	e031      	b.n	80087f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d019      	beq.n	80087cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008798:	f7ff fbd2 	bl	8007f40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fc fa18 	bl	8004bd0 <HAL_GetTick>
 80087a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a4:	f7fc fa14 	bl	8004bd0 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e24d      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80087b6:	f7ff fbe1 	bl	8007f7c <LL_RCC_HSI_IsReady>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0f1      	beq.n	80087a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fbeb 	bl	8007fa0 <LL_RCC_HSI_SetCalibTrimming>
 80087ca:	e013      	b.n	80087f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087cc:	f7ff fbc7 	bl	8007f5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d0:	f7fc f9fe 	bl	8004bd0 <HAL_GetTick>
 80087d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087d8:	f7fc f9fa 	bl	8004bd0 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e233      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80087ea:	f7ff fbc7 	bl	8007f7c <LL_RCC_HSI_IsReady>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f1      	bne.n	80087d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0308 	and.w	r3, r3, #8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d106      	bne.n	800880e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80a3 	beq.w	8008954 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d076      	beq.n	8008904 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	d046      	beq.n	80088b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008822:	f7ff fc7e 	bl	8008122 <LL_RCC_LSI1_IsReady>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d113      	bne.n	8008854 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800882c:	f7ff fc57 	bl	80080de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008830:	f7fc f9ce 	bl	8004bd0 <HAL_GetTick>
 8008834:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008838:	f7fc f9ca 	bl	8004bd0 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e203      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800884a:	f7ff fc6a 	bl	8008122 <LL_RCC_LSI1_IsReady>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f1      	beq.n	8008838 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008854:	f7ff fc77 	bl	8008146 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008858:	f7fc f9ba 	bl	8004bd0 <HAL_GetTick>
 800885c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008860:	f7fc f9b6 	bl	8004bd0 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e1ef      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008872:	f7ff fc8a 	bl	800818a <LL_RCC_LSI2_IsReady>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f1      	beq.n	8008860 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fc94 	bl	80081ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008886:	f7ff fc3b 	bl	8008100 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888a:	f7fc f9a1 	bl	8004bd0 <HAL_GetTick>
 800888e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008892:	f7fc f99d 	bl	8004bd0 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e1d6      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80088a4:	f7ff fc3d 	bl	8008122 <LL_RCC_LSI1_IsReady>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f1      	bne.n	8008892 <HAL_RCC_OscConfig+0x31a>
 80088ae:	e051      	b.n	8008954 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80088b0:	f7ff fc15 	bl	80080de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b4:	f7fc f98c 	bl	8004bd0 <HAL_GetTick>
 80088b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80088ba:	e00c      	b.n	80088d6 <HAL_RCC_OscConfig+0x35e>
 80088bc:	2000000c 	.word	0x2000000c
 80088c0:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80088c4:	f7fc f984 	bl	8004bd0 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e1bd      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80088d6:	f7ff fc24 	bl	8008122 <LL_RCC_LSI1_IsReady>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f1      	beq.n	80088c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80088e0:	f7ff fc42 	bl	8008168 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80088e4:	e008      	b.n	80088f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80088e6:	f7fc f973 	bl	8004bd0 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d901      	bls.n	80088f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e1ac      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80088f8:	f7ff fc47 	bl	800818a <LL_RCC_LSI2_IsReady>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f1      	bne.n	80088e6 <HAL_RCC_OscConfig+0x36e>
 8008902:	e027      	b.n	8008954 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008904:	f7ff fc30 	bl	8008168 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008908:	f7fc f962 	bl	8004bd0 <HAL_GetTick>
 800890c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008910:	f7fc f95e 	bl	8004bd0 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e197      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008922:	f7ff fc32 	bl	800818a <LL_RCC_LSI2_IsReady>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1f1      	bne.n	8008910 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800892c:	f7ff fbe8 	bl	8008100 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008930:	f7fc f94e 	bl	8004bd0 <HAL_GetTick>
 8008934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008938:	f7fc f94a 	bl	8004bd0 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e183      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800894a:	f7ff fbea 	bl	8008122 <LL_RCC_LSI1_IsReady>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f1      	bne.n	8008938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05b      	beq.n	8008a18 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008960:	4ba7      	ldr	r3, [pc, #668]	@ (8008c00 <HAL_RCC_OscConfig+0x688>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d114      	bne.n	8008996 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800896c:	f7ff fa78 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008970:	f7fc f92e 	bl	8004bd0 <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008978:	f7fc f92a 	bl	8004bd0 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e163      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800898a:	4b9d      	ldr	r3, [pc, #628]	@ (8008c00 <HAL_RCC_OscConfig+0x688>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d102      	bne.n	80089a4 <HAL_RCC_OscConfig+0x42c>
 800899e:	f7ff fb48 	bl	8008032 <LL_RCC_LSE_Enable>
 80089a2:	e00c      	b.n	80089be <HAL_RCC_OscConfig+0x446>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b05      	cmp	r3, #5
 80089aa:	d104      	bne.n	80089b6 <HAL_RCC_OscConfig+0x43e>
 80089ac:	f7ff fb63 	bl	8008076 <LL_RCC_LSE_EnableBypass>
 80089b0:	f7ff fb3f 	bl	8008032 <LL_RCC_LSE_Enable>
 80089b4:	e003      	b.n	80089be <HAL_RCC_OscConfig+0x446>
 80089b6:	f7ff fb4d 	bl	8008054 <LL_RCC_LSE_Disable>
 80089ba:	f7ff fb6d 	bl	8008098 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d014      	beq.n	80089f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c6:	f7fc f903 	bl	8004bd0 <HAL_GetTick>
 80089ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80089cc:	e00a      	b.n	80089e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ce:	f7fc f8ff 	bl	8004bd0 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089dc:	4293      	cmp	r3, r2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e136      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80089e4:	f7ff fb69 	bl	80080ba <LL_RCC_LSE_IsReady>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ef      	beq.n	80089ce <HAL_RCC_OscConfig+0x456>
 80089ee:	e013      	b.n	8008a18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f0:	f7fc f8ee 	bl	8004bd0 <HAL_GetTick>
 80089f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089f8:	f7fc f8ea 	bl	8004bd0 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e121      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008a0e:	f7ff fb54 	bl	80080ba <LL_RCC_LSE_IsReady>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1ef      	bne.n	80089f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d02c      	beq.n	8008a7e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d014      	beq.n	8008a56 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a2c:	f7ff facd 	bl	8007fca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a30:	f7fc f8ce 	bl	8004bd0 <HAL_GetTick>
 8008a34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a36:	e008      	b.n	8008a4a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a38:	f7fc f8ca 	bl	8004bd0 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e103      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a4a:	f7ff fae0 	bl	800800e <LL_RCC_HSI48_IsReady>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0f1      	beq.n	8008a38 <HAL_RCC_OscConfig+0x4c0>
 8008a54:	e013      	b.n	8008a7e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a56:	f7ff fac9 	bl	8007fec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a5a:	f7fc f8b9 	bl	8004bd0 <HAL_GetTick>
 8008a5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a62:	f7fc f8b5 	bl	8004bd0 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e0ee      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a74:	f7ff facb 	bl	800800e <LL_RCC_HSI48_IsReady>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f1      	bne.n	8008a62 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80e4 	beq.w	8008c50 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a88:	f7ff fc29 	bl	80082de <LL_RCC_GetSysClkSource>
 8008a8c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	f040 80b4 	bne.w	8008c08 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f003 0203 	and.w	r2, r3, #3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d123      	bne.n	8008af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d11c      	bne.n	8008af6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d114      	bne.n	8008af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d10d      	bne.n	8008af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d106      	bne.n	8008af6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d05d      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b0c      	cmp	r3, #12
 8008afa:	d058      	beq.n	8008bae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e0a1      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008b0e:	f7ff fc84 	bl	800841a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b12:	f7fc f85d 	bl	8004bd0 <HAL_GetTick>
 8008b16:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b18:	e008      	b.n	8008b2c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b1a:	f7fc f859 	bl	8004bd0 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e092      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1ef      	bne.n	8008b1a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	4b30      	ldr	r3, [pc, #192]	@ (8008c04 <HAL_RCC_OscConfig+0x68c>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b4c:	4311      	orrs	r1, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b52:	0212      	lsls	r2, r2, #8
 8008b54:	4311      	orrs	r1, r2
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b60:	4311      	orrs	r1, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008b66:	430a      	orrs	r2, r1
 8008b68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b70:	f7ff fc44 	bl	80083fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b84:	f7fc f824 	bl	8004bd0 <HAL_GetTick>
 8008b88:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b8c:	f7fc f820 	bl	8004bd0 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e059      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0ef      	beq.n	8008b8c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bac:	e050      	b.n	8008c50 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e04f      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d147      	bne.n	8008c50 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008bc0:	f7ff fc1c 	bl	80083fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bd4:	f7fb fffc 	bl	8004bd0 <HAL_GetTick>
 8008bd8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bda:	e008      	b.n	8008bee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bdc:	f7fb fff8 	bl	8004bd0 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e031      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0ef      	beq.n	8008bdc <HAL_RCC_OscConfig+0x664>
 8008bfc:	e028      	b.n	8008c50 <HAL_RCC_OscConfig+0x6d8>
 8008bfe:	bf00      	nop
 8008c00:	58000400 	.word	0x58000400
 8008c04:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b0c      	cmp	r3, #12
 8008c0c:	d01e      	beq.n	8008c4c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c0e:	f7ff fc04 	bl	800841a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c12:	f7fb ffdd 	bl	8004bd0 <HAL_GetTick>
 8008c16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c18:	e008      	b.n	8008c2c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c1a:	f7fb ffd9 	bl	8004bd0 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d901      	bls.n	8008c2c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e012      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1ef      	bne.n	8008c1a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c44:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <HAL_RCC_OscConfig+0x6e4>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	60cb      	str	r3, [r1, #12]
 8008c4a:	e001      	b.n	8008c50 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3734      	adds	r7, #52	@ 0x34
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd90      	pop	{r4, r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	eefefffc 	.word	0xeefefffc

08008c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e12d      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c74:	4b98      	ldr	r3, [pc, #608]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d91b      	bls.n	8008cba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c82:	4b95      	ldr	r3, [pc, #596]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f023 0207 	bic.w	r2, r3, #7
 8008c8a:	4993      	ldr	r1, [pc, #588]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c92:	f7fb ff9d 	bl	8004bd0 <HAL_GetTick>
 8008c96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c98:	e008      	b.n	8008cac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c9a:	f7fb ff99 	bl	8004bd0 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e111      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cac:	4b8a      	ldr	r3, [pc, #552]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d1ef      	bne.n	8008c9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fb13 	bl	80082f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008cd0:	f7fb ff7e 	bl	8004bd0 <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008cd8:	f7fb ff7a 	bl	8004bd0 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e0f2      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cea:	f7ff fbe8 	bl	80084be <LL_RCC_IsActiveFlag_HPRE>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f1      	beq.n	8008cd8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fb0a 	bl	800831e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d0a:	f7fb ff61 	bl	8004bd0 <HAL_GetTick>
 8008d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d12:	f7fb ff5d 	bl	8004bd0 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e0d5      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008d24:	f7ff fbdd 	bl	80084e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f1      	beq.n	8008d12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fb03 	bl	800834a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d44:	f7fb ff44 	bl	8004bd0 <HAL_GetTick>
 8008d48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d4c:	f7fb ff40 	bl	8004bd0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e0b8      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d5e:	f7ff fbd3 	bl	8008508 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f1      	beq.n	8008d4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d016      	beq.n	8008da2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fafd 	bl	8008378 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d7e:	f7fb ff27 	bl	8004bd0 <HAL_GetTick>
 8008d82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d86:	f7fb ff23 	bl	8004bd0 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e09b      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d98:	f7ff fbc9 	bl	800852e <LL_RCC_IsActiveFlag_PPRE1>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f1      	beq.n	8008d86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff faf3 	bl	80083a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008dba:	f7fb ff09 	bl	8004bd0 <HAL_GetTick>
 8008dbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008dc0:	e008      	b.n	8008dd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008dc2:	f7fb ff05 	bl	8004bd0 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e07d      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008dd4:	f7ff fbbd 	bl	8008552 <LL_RCC_IsActiveFlag_PPRE2>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f1      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d043      	beq.n	8008e72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d106      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008df2:	f7ff f893 	bl	8007f1c <LL_RCC_HSE_IsReady>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11e      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e067      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d106      	bne.n	8008e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008e08:	f7ff fb16 	bl	8008438 <LL_RCC_PLL_IsReady>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d113      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e05c      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008e1e:	f7ff f9fb 	bl	8008218 <LL_RCC_MSI_IsReady>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d108      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e051      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008e2c:	f7ff f8a6 	bl	8007f7c <LL_RCC_HSI_IsReady>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e04a      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fa39 	bl	80082b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e44:	f7fb fec4 	bl	8004bd0 <HAL_GetTick>
 8008e48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e4a:	e00a      	b.n	8008e62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e4c:	f7fb fec0 	bl	8004bd0 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e036      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e62:	f7ff fa3c 	bl	80082de <LL_RCC_GetSysClkSource>
 8008e66:	4602      	mov	r2, r0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d1ec      	bne.n	8008e4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e72:	4b19      	ldr	r3, [pc, #100]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d21b      	bcs.n	8008eb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e80:	4b15      	ldr	r3, [pc, #84]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f023 0207 	bic.w	r2, r3, #7
 8008e88:	4913      	ldr	r1, [pc, #76]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e90:	f7fb fe9e 	bl	8004bd0 <HAL_GetTick>
 8008e94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e98:	f7fb fe9a 	bl	8004bd0 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e012      	b.n	8008ed0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <HAL_RCC_ClockConfig+0x278>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d1ef      	bne.n	8008e98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008eb8:	f000 f87e 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4a07      	ldr	r2, [pc, #28]	@ (8008edc <HAL_RCC_ClockConfig+0x27c>)
 8008ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008ec2:	f7fb fe91 	bl	8004be8 <HAL_GetTickPrio>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fb fe33 	bl	8004b34 <HAL_InitTick>
 8008ece:	4603      	mov	r3, r0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	58004000 	.word	0x58004000
 8008edc:	2000000c 	.word	0x2000000c

08008ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee6:	f7ff f9fa 	bl	80082de <LL_RCC_GetSysClkSource>
 8008eea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ef2:	f7ff f9b6 	bl	8008262 <LL_RCC_MSI_GetRange>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	4a2b      	ldr	r2, [pc, #172]	@ (8008fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	e04b      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d102      	bne.n	8008f14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f0e:	4b28      	ldr	r3, [pc, #160]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e045      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d10a      	bne.n	8008f30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f1a:	f7fe ffcf 	bl	8007ebc <LL_RCC_HSE_IsEnabledDiv2>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008f24:	4b22      	ldr	r3, [pc, #136]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e03a      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008f2a:	4b22      	ldr	r3, [pc, #136]	@ (8008fb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	e037      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008f30:	f7ff fab9 	bl	80084a6 <LL_RCC_PLL_GetMainSource>
 8008f34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCC_GetSysClockFreq+0x64>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d003      	beq.n	8008f4a <HAL_RCC_GetSysClockFreq+0x6a>
 8008f42:	e00d      	b.n	8008f60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008f44:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f46:	60bb      	str	r3, [r7, #8]
        break;
 8008f48:	e015      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f4a:	f7fe ffb7 	bl	8007ebc <LL_RCC_HSE_IsEnabledDiv2>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d102      	bne.n	8008f5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008f54:	4b16      	ldr	r3, [pc, #88]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008f58:	e00d      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008f5a:	4b16      	ldr	r3, [pc, #88]	@ (8008fb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f5c:	60bb      	str	r3, [r7, #8]
        break;
 8008f5e:	e00a      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008f60:	f7ff f97f 	bl	8008262 <LL_RCC_MSI_GetRange>
 8008f64:	4603      	mov	r3, r0
 8008f66:	091b      	lsrs	r3, r3, #4
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8008fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f72:	60bb      	str	r3, [r7, #8]
        break;
 8008f74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008f76:	f7ff fa71 	bl	800845c <LL_RCC_PLL_GetN>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	fb03 f402 	mul.w	r4, r3, r2
 8008f82:	f7ff fa84 	bl	800848e <LL_RCC_PLL_GetDivider>
 8008f86:	4603      	mov	r3, r0
 8008f88:	091b      	lsrs	r3, r3, #4
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008f90:	f7ff fa71 	bl	8008476 <LL_RCC_PLL_GetR>
 8008f94:	4603      	mov	r3, r0
 8008f96:	0f5b      	lsrs	r3, r3, #29
 8008f98:	3301      	adds	r3, #1
 8008f9a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008f9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd90      	pop	{r4, r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08019294 	.word	0x08019294
 8008fb0:	00f42400 	.word	0x00f42400
 8008fb4:	01e84800 	.word	0x01e84800

08008fb8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb8:	b598      	push	{r3, r4, r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008fbc:	f7ff ff90 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	f7ff fa01 	bl	80083c8 <LL_RCC_GetAHBPrescaler>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	091b      	lsrs	r3, r3, #4
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	4a03      	ldr	r2, [pc, #12]	@ (8008fdc <HAL_RCC_GetHCLKFreq+0x24>)
 8008fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	bd98      	pop	{r3, r4, r7, pc}
 8008fdc:	08019254 	.word	0x08019254

08008fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2bb0      	cmp	r3, #176	@ 0xb0
 8008fec:	d903      	bls.n	8008ff6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008fee:	4b15      	ldr	r3, [pc, #84]	@ (8009044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e007      	b.n	8009006 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	4a11      	ldr	r2, [pc, #68]	@ (8009044 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009004:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009006:	f7ff f9eb 	bl	80083e0 <LL_RCC_GetAHB4Prescaler>
 800900a:	4603      	mov	r3, r0
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	4a0d      	ldr	r2, [pc, #52]	@ (8009048 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	fbb2 f3f3 	udiv	r3, r2, r3
 800901e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	0c9c      	lsrs	r4, r3, #18
 800902a:	f7fe ff29 	bl	8007e80 <HAL_PWREx_GetVoltageRange>
 800902e:	4603      	mov	r3, r0
 8009030:	4619      	mov	r1, r3
 8009032:	4620      	mov	r0, r4
 8009034:	f000 f80c 	bl	8009050 <RCC_SetFlashLatency>
 8009038:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bd90      	pop	{r4, r7, pc}
 8009042:	bf00      	nop
 8009044:	08019294 	.word	0x08019294
 8009048:	08019254 	.word	0x08019254
 800904c:	431bde83 	.word	0x431bde83

08009050 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009050:	b590      	push	{r4, r7, lr}
 8009052:	b093      	sub	sp, #76	@ 0x4c
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800905a:	4b37      	ldr	r3, [pc, #220]	@ (8009138 <RCC_SetFlashLatency+0xe8>)
 800905c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8009060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009066:	4a35      	ldr	r2, [pc, #212]	@ (800913c <RCC_SetFlashLatency+0xec>)
 8009068:	f107 031c 	add.w	r3, r7, #28
 800906c:	ca07      	ldmia	r2, {r0, r1, r2}
 800906e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009072:	4b33      	ldr	r3, [pc, #204]	@ (8009140 <RCC_SetFlashLatency+0xf0>)
 8009074:	f107 040c 	add.w	r4, r7, #12
 8009078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800907a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800907e:	2300      	movs	r3, #0
 8009080:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009088:	d11a      	bne.n	80090c0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800908a:	2300      	movs	r3, #0
 800908c:	643b      	str	r3, [r7, #64]	@ 0x40
 800908e:	e013      	b.n	80090b8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	3348      	adds	r3, #72	@ 0x48
 8009096:	443b      	add	r3, r7
 8009098:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d807      	bhi.n	80090b2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80090a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	3348      	adds	r3, #72	@ 0x48
 80090a8:	443b      	add	r3, r7
 80090aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80090ae:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80090b0:	e020      	b.n	80090f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80090b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b4:	3301      	adds	r3, #1
 80090b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80090b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d9e8      	bls.n	8009090 <RCC_SetFlashLatency+0x40>
 80090be:	e019      	b.n	80090f4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c4:	e013      	b.n	80090ee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80090c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	3348      	adds	r3, #72	@ 0x48
 80090cc:	443b      	add	r3, r7
 80090ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d807      	bhi.n	80090e8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80090d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	3348      	adds	r3, #72	@ 0x48
 80090de:	443b      	add	r3, r7
 80090e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80090e4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80090e6:	e005      	b.n	80090f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80090e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ea:	3301      	adds	r3, #1
 80090ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d9e8      	bls.n	80090c6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80090f4:	4b13      	ldr	r3, [pc, #76]	@ (8009144 <RCC_SetFlashLatency+0xf4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f023 0207 	bic.w	r2, r3, #7
 80090fc:	4911      	ldr	r1, [pc, #68]	@ (8009144 <RCC_SetFlashLatency+0xf4>)
 80090fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009104:	f7fb fd64 	bl	8004bd0 <HAL_GetTick>
 8009108:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800910a:	e008      	b.n	800911e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800910c:	f7fb fd60 	bl	8004bd0 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d901      	bls.n	800911e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e007      	b.n	800912e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800911e:	4b09      	ldr	r3, [pc, #36]	@ (8009144 <RCC_SetFlashLatency+0xf4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009128:	429a      	cmp	r2, r3
 800912a:	d1ef      	bne.n	800910c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	374c      	adds	r7, #76	@ 0x4c
 8009132:	46bd      	mov	sp, r7
 8009134:	bd90      	pop	{r4, r7, pc}
 8009136:	bf00      	nop
 8009138:	08017b8c 	.word	0x08017b8c
 800913c:	08017b9c 	.word	0x08017b9c
 8009140:	08017ba8 	.word	0x08017ba8
 8009144:	58004000 	.word	0x58004000

08009148 <LL_RCC_LSE_IsEnabled>:
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800914c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <LL_RCC_LSE_IsEnabled+0x18>
 800915c:	2301      	movs	r3, #1
 800915e:	e000      	b.n	8009162 <LL_RCC_LSE_IsEnabled+0x1a>
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <LL_RCC_LSE_IsReady>:
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b02      	cmp	r3, #2
 800917e:	d101      	bne.n	8009184 <LL_RCC_LSE_IsReady+0x18>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <LL_RCC_LSE_IsReady+0x1a>
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <LL_RCC_SetRFWKPClockSource>:
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800919c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80091a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <LL_RCC_SetSMPSClockSource>:
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80091c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	f023 0203 	bic.w	r2, r3, #3
 80091ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <LL_RCC_SetSMPSPrescaler>:
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80091ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LL_RCC_SetUSARTClockSource>:
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921c:	f023 0203 	bic.w	r2, r3, #3
 8009220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <LL_RCC_SetLPUARTClockSource>:
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009248:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800924c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4313      	orrs	r3, r2
 8009254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <LL_RCC_SetI2CClockSource>:
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800926c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009270:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	091b      	lsrs	r3, r3, #4
 8009278:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800927c:	43db      	mvns	r3, r3
 800927e:	401a      	ands	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <LL_RCC_SetLPTIMClockSource>:
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80092a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	041b      	lsls	r3, r3, #16
 80092b4:	43db      	mvns	r3, r3
 80092b6:	401a      	ands	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092c0:	4313      	orrs	r3, r2
 80092c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <LL_RCC_SetSAIClockSource>:
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80092da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <LL_RCC_SetRNGClockSource>:
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009312:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <LL_RCC_SetCLK48ClockSource>:
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800933e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4313      	orrs	r3, r2
 8009346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <LL_RCC_SetUSBClockSource>:
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff ffe3 	bl	800932a <LL_RCC_SetCLK48ClockSource>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <LL_RCC_SetADCClockSource>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009380:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4313      	orrs	r3, r2
 8009388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <LL_RCC_SetRTCClockSource>:
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80093a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <LL_RCC_GetRTCClockSource>:
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80093c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <LL_RCC_ForceBackupDomainReset>:
{
 80093de:	b480      	push	{r7}
 80093e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80093f6:	bf00      	nop
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <LL_RCC_PLLSAI1_Enable>:
{
 8009422:	b480      	push	{r7}
 8009424:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009430:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009434:	6013      	str	r3, [r2, #0]
}
 8009436:	bf00      	nop
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <LL_RCC_PLLSAI1_Disable>:
{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800944e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <LL_RCC_PLLSAI1_IsReady>:
{
 800945e:	b480      	push	{r7}
 8009460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800946c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009470:	d101      	bne.n	8009476 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800948a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800948e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4313      	orrs	r3, r2
 8009498:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80094ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	43db      	mvns	r3, r3
 80094b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094bc:	4013      	ands	r3, r2
 80094be:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80094d4:	2300      	movs	r3, #0
 80094d6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80094d8:	2300      	movs	r3, #0
 80094da:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d034      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80094f0:	d021      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80094f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80094f6:	d81b      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094fc:	d01d      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80094fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009502:	d815      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800950c:	d110      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800950e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800951c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800951e:	e00d      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f981 	bl	800982c <RCCEx_PLLSAI1_ConfigNP>
 800952a:	4603      	mov	r3, r0
 800952c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800952e:	e005      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	77fb      	strb	r3, [r7, #31]
        break;
 8009534:	e002      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009536:	bf00      	nop
 8009538:	e000      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800953a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800953c:	7ffb      	ldrb	r3, [r7, #31]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d105      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fec3 	bl	80092d2 <LL_RCC_SetSAIClockSource>
 800954c:	e001      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954e:	7ffb      	ldrb	r3, [r7, #31]
 8009550:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800955a:	2b00      	cmp	r3, #0
 800955c:	d046      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800955e:	f7ff ff31 	bl	80093c4 <LL_RCC_GetRTCClockSource>
 8009562:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	429a      	cmp	r2, r3
 800956c:	d03c      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800956e:	f7fe fc77 	bl	8007e60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff ff0b 	bl	8009398 <LL_RCC_SetRTCClockSource>
 8009582:	e02e      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800958e:	f7ff ff26 	bl	80093de <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009592:	f7ff ff35 	bl	8009400 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80095a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80095ae:	f7ff fdcb 	bl	8009148 <LL_RCC_LSE_IsEnabled>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d114      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095b8:	f7fb fb0a 	bl	8004bd0 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80095be:	e00b      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c0:	f7fb fb06 	bl	8004bd0 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d902      	bls.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	77fb      	strb	r3, [r7, #31]
              break;
 80095d6:	e004      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80095d8:	f7ff fdc8 	bl	800916c <LL_RCC_LSE_IsReady>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d1ee      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80095e2:	7ffb      	ldrb	r3, [r7, #31]
 80095e4:	77bb      	strb	r3, [r7, #30]
 80095e6:	e001      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	7ffb      	ldrb	r3, [r7, #31]
 80095ea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fe05 	bl	800920c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff fe10 	bl	8009238 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fe38 	bl	800929e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fe2d 	bl	800929e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fe05 	bl	8009264 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0308 	and.w	r3, r3, #8
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff fdfa 	bl	8009264 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009678:	2b00      	cmp	r3, #0
 800967a:	d022      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fe68 	bl	8009356 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800968a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800968e:	d107      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800969a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800969e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096a8:	d10b      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f917 	bl	80098e2 <RCCEx_PLLSAI1_ConfigNQ>
 80096b4:	4603      	mov	r3, r0
 80096b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80096b8:	7ffb      	ldrb	r3, [r7, #31]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80096be:	7ffb      	ldrb	r3, [r7, #31]
 80096c0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d02b      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d6:	d008      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096e0:	d003      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d105      	bne.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff fe05 	bl	80092fe <LL_RCC_SetRNGClockSource>
 80096f4:	e00a      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x240>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	2000      	movs	r0, #0
 8009702:	f7ff fdfc 	bl	80092fe <LL_RCC_SetRNGClockSource>
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff fe0f 	bl	800932a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009710:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009714:	d107      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009720:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009724:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800972e:	2b00      	cmp	r3, #0
 8009730:	d022      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fe18 	bl	800936c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009744:	d107      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009754:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800975e:	d10b      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3304      	adds	r3, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f917 	bl	8009998 <RCCEx_PLLSAI1_ConfigNR>
 800976a:	4603      	mov	r3, r0
 800976c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800976e:	7ffb      	ldrb	r3, [r7, #31]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009774:	7ffb      	ldrb	r3, [r7, #31]
 8009776:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009788:	4618      	mov	r0, r3
 800978a:	f7ff fd01 	bl	8009190 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff fd20 	bl	80091e4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fd07 	bl	80091bc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80097ae:	7fbb      	ldrb	r3, [r7, #30]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3720      	adds	r7, #32
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80097c0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80097c4:	f7ff fe5d 	bl	8009482 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80097c8:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80097cc:	f7ff fe6b 	bl	80094a6 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80097f8:	4a0b      	ldr	r2, [pc, #44]	@ (8009828 <HAL_RCCEx_CRSConfig+0x70>)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80097fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <HAL_RCCEx_CRSConfig+0x70>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	4906      	ldr	r1, [pc, #24]	@ (8009828 <HAL_RCCEx_CRSConfig+0x70>)
 800980e:	4313      	orrs	r3, r2
 8009810:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009812:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <HAL_RCCEx_CRSConfig+0x70>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a04      	ldr	r2, [pc, #16]	@ (8009828 <HAL_RCCEx_CRSConfig+0x70>)
 8009818:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800981c:	6013      	str	r3, [r2, #0]
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	40006000 	.word	0x40006000

0800982c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009838:	f7ff fe02 	bl	8009440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800983c:	f7fb f9c8 	bl	8004bd0 <HAL_GetTick>
 8009840:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009842:	e009      	b.n	8009858 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009844:	f7fb f9c4 	bl	8004bd0 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d902      	bls.n	8009858 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	73fb      	strb	r3, [r7, #15]
      break;
 8009856:	e004      	b.n	8009862 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009858:	f7ff fe01 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f0      	bne.n	8009844 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d137      	bne.n	80098d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800987c:	4313      	orrs	r3, r2
 800987e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009892:	4313      	orrs	r3, r2
 8009894:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009896:	f7ff fdc4 	bl	8009422 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989a:	f7fb f999 	bl	8004bd0 <HAL_GetTick>
 800989e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098a0:	e009      	b.n	80098b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098a2:	f7fb f995 	bl	8004bd0 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d902      	bls.n	80098b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	73fb      	strb	r3, [r7, #15]
        break;
 80098b4:	e004      	b.n	80098c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098b6:	f7ff fdd2 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d1f0      	bne.n	80098a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d108      	bne.n	80098d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80098c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098d4:	4313      	orrs	r3, r2
 80098d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80098ee:	f7ff fda7 	bl	8009440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80098f2:	f7fb f96d 	bl	8004bd0 <HAL_GetTick>
 80098f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098f8:	e009      	b.n	800990e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098fa:	f7fb f969 	bl	8004bd0 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	d902      	bls.n	800990e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	73fb      	strb	r3, [r7, #15]
      break;
 800990c:	e004      	b.n	8009918 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800990e:	f7ff fda6 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f0      	bne.n	80098fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d137      	bne.n	800998e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800991e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009932:	4313      	orrs	r3, r2
 8009934:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009948:	4313      	orrs	r3, r2
 800994a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800994c:	f7ff fd69 	bl	8009422 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009950:	f7fb f93e 	bl	8004bd0 <HAL_GetTick>
 8009954:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009956:	e009      	b.n	800996c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009958:	f7fb f93a 	bl	8004bd0 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d902      	bls.n	800996c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	73fb      	strb	r3, [r7, #15]
        break;
 800996a:	e004      	b.n	8009976 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800996c:	f7ff fd77 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 8009970:	4603      	mov	r3, r0
 8009972:	2b01      	cmp	r3, #1
 8009974:	d1f0      	bne.n	8009958 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d108      	bne.n	800998e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800997c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800998a:	4313      	orrs	r3, r2
 800998c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80099a4:	f7ff fd4c 	bl	8009440 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099a8:	f7fb f912 	bl	8004bd0 <HAL_GetTick>
 80099ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099ae:	e009      	b.n	80099c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099b0:	f7fb f90e 	bl	8004bd0 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d902      	bls.n	80099c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	73fb      	strb	r3, [r7, #15]
      break;
 80099c2:	e004      	b.n	80099ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099c4:	f7ff fd4b 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1f0      	bne.n	80099b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d137      	bne.n	8009a44 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80099d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099e8:	4313      	orrs	r3, r2
 80099ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80099ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099fe:	4313      	orrs	r3, r2
 8009a00:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009a02:	f7ff fd0e 	bl	8009422 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a06:	f7fb f8e3 	bl	8004bd0 <HAL_GetTick>
 8009a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a0c:	e009      	b.n	8009a22 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a0e:	f7fb f8df 	bl	8004bd0 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d902      	bls.n	8009a22 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8009a20:	e004      	b.n	8009a2c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a22:	f7ff fd1c 	bl	800945e <LL_RCC_PLLSAI1_IsReady>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d1f0      	bne.n	8009a0e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d108      	bne.n	8009a44 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a36:	691a      	ldr	r2, [r3, #16]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a40:	4313      	orrs	r3, r2
 8009a42:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e027      	b.n	8009ab0 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7a5b      	ldrb	r3, [r3, #9]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fa fd67 	bl	8004544 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f023 0120 	bic.w	r1, r3, #32
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0204 	orr.w	r2, r2, #4
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2210      	movs	r2, #16
 8009ada:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009adc:	2301      	movs	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e009      	b.n	8009af6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2208      	movs	r2, #8
 8009af0:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009af2:	2301      	movs	r3, #1
 8009af4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10b      	bne.n	8009b14 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2204      	movs	r2, #4
 8009b00:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f837 	bl	8009b76 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009b10:	605a      	str	r2, [r3, #4]

    return;
 8009b12:	e022      	b.n	8009b5a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01d      	beq.n	8009b5a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0208 	bic.w	r2, r2, #8
 8009b2c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	7a5b      	ldrb	r3, [r3, #9]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d00b      	beq.n	8009b5a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f803 	bl	8009b60 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8009b6a:	bf00      	nop
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009b7e:	bf00      	nop
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e09f      	b.n	8009cde <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d106      	bne.n	8009bb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fa fcf8 	bl	80045a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009bc0:	4b49      	ldr	r3, [pc, #292]	@ (8009ce8 <HAL_RTC_Init+0x15c>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d07e      	beq.n	8009cca <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	22ca      	movs	r2, #202	@ 0xca
 8009bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2253      	movs	r2, #83	@ 0x53
 8009bda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f8ab 	bl	8009d38 <RTC_EnterInitMode>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	22ff      	movs	r2, #255	@ 0xff
 8009bee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]
 8009bfc:	e067      	b.n	8009cce <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c10:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6899      	ldr	r1, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	68d2      	ldr	r2, [r2, #12]
 8009c38:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6919      	ldr	r1, [r3, #16]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	041a      	lsls	r2, r3, #16
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c5c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0203 	bic.w	r2, r2, #3
 8009c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69da      	ldr	r2, [r3, #28]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f003 0320 	and.w	r3, r3, #32
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d113      	bne.n	8009cbc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f829 	bl	8009cec <HAL_RTC_WaitForSynchro>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00d      	beq.n	8009cbc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	22ff      	movs	r2, #255	@ 0xff
 8009ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2204      	movs	r2, #4
 8009cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e010      	b.n	8009cde <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	22ff      	movs	r2, #255	@ 0xff
 8009cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
 8009cc8:	e001      	b.n	8009cce <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40002800 	.word	0x40002800

08009cec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009d02:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009d04:	f7fa ff64 	bl	8004bd0 <HAL_GetTick>
 8009d08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d0a:	e009      	b.n	8009d20 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d0c:	f7fa ff60 	bl	8004bd0 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d1a:	d901      	bls.n	8009d20 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e007      	b.n	8009d30 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0ee      	beq.n	8009d0c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d119      	bne.n	8009d82 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d58:	f7fa ff3a 	bl	8004bd0 <HAL_GetTick>
 8009d5c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d5e:	e009      	b.n	8009d74 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d60:	f7fa ff36 	bl	8004bd0 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d6e:	d901      	bls.n	8009d74 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e007      	b.n	8009d84 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0ee      	beq.n	8009d60 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d101      	bne.n	8009da6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009da2:	2302      	movs	r3, #2
 8009da4:	e0a8      	b.n	8009ef8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	22ca      	movs	r2, #202	@ 0xca
 8009dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2253      	movs	r2, #83	@ 0x53
 8009dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d020      	beq.n	8009e16 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009dd4:	f7fa fefc 	bl	8004bd0 <HAL_GetTick>
 8009dd8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009dda:	e015      	b.n	8009e08 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ddc:	f7fa fef8 	bl	8004bd0 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dea:	d90d      	bls.n	8009e08 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	22ff      	movs	r2, #255	@ 0xff
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2203      	movs	r2, #3
 8009df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e077      	b.n	8009ef8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e2      	bne.n	8009ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e24:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009e36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e38:	f7fa feca 	bl	8004bd0 <HAL_GetTick>
 8009e3c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009e3e:	e015      	b.n	8009e6c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e40:	f7fa fec6 	bl	8004bd0 <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e4e:	d90d      	bls.n	8009e6c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	22ff      	movs	r2, #255	@ 0xff
 8009e56:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e045      	b.n	8009ef8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0e2      	beq.n	8009e40 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0207 	bic.w	r2, r2, #7
 8009e90:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6899      	ldr	r1, [r3, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009ea2:	4b17      	ldr	r3, [pc, #92]	@ (8009f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea8:	4a15      	ldr	r2, [pc, #84]	@ (8009f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009eaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009eae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009eb2:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a12      	ldr	r2, [pc, #72]	@ (8009f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009eb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ebc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ecc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009edc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	22ff      	movs	r2, #255	@ 0xff
 8009ee4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	58000800 	.word	0x58000800

08009f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e095      	b.n	800a042 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d108      	bne.n	8009f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f26:	d009      	beq.n	8009f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	61da      	str	r2, [r3, #28]
 8009f2e:	e005      	b.n	8009f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fa fb5a 	bl	8004610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f7c:	d902      	bls.n	8009f84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e002      	b.n	8009f8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009f92:	d007      	beq.n	8009fa4 <HAL_SPI_Init+0xa0>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f9c:	d002      	beq.n	8009fa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe6:	ea42 0103 	orr.w	r1, r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	0c1b      	lsrs	r3, r3, #16
 800a000:	f003 0204 	and.w	r2, r3, #4
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a008:	f003 0310 	and.w	r3, r3, #16
 800a00c:	431a      	orrs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a012:	f003 0308 	and.w	r3, r3, #8
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a020:	ea42 0103 	orr.w	r1, r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b088      	sub	sp, #32
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <HAL_SPI_Transmit+0x22>
 800a068:	2302      	movs	r3, #2
 800a06a:	e15f      	b.n	800a32c <HAL_SPI_Transmit+0x2e2>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a074:	f7fa fdac 	bl	8004bd0 <HAL_GetTick>
 800a078:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b01      	cmp	r3, #1
 800a088:	d002      	beq.n	800a090 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a08a:	2302      	movs	r3, #2
 800a08c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a08e:	e148      	b.n	800a322 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <HAL_SPI_Transmit+0x52>
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a0a0:	e13f      	b.n	800a322 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2203      	movs	r2, #3
 800a0a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	88fa      	ldrh	r2, [r7, #6]
 800a0ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ec:	d10f      	bne.n	800a10e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a10c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a118:	2b40      	cmp	r3, #64	@ 0x40
 800a11a:	d007      	beq.n	800a12c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a12a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a134:	d94f      	bls.n	800a1d6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_SPI_Transmit+0xfa>
 800a13e:	8afb      	ldrh	r3, [r7, #22]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d142      	bne.n	800a1ca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a148:	881a      	ldrh	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a154:	1c9a      	adds	r2, r3, #2
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a168:	e02f      	b.n	800a1ca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b02      	cmp	r3, #2
 800a176:	d112      	bne.n	800a19e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17c:	881a      	ldrh	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a188:	1c9a      	adds	r2, r3, #2
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a192:	b29b      	uxth	r3, r3
 800a194:	3b01      	subs	r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a19c:	e015      	b.n	800a1ca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a19e:	f7fa fd17 	bl	8004bd0 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d803      	bhi.n	800a1b6 <HAL_SPI_Transmit+0x16c>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d102      	bne.n	800a1bc <HAL_SPI_Transmit+0x172>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a1c8:	e0ab      	b.n	800a322 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1ca      	bne.n	800a16a <HAL_SPI_Transmit+0x120>
 800a1d4:	e080      	b.n	800a2d8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <HAL_SPI_Transmit+0x19a>
 800a1de:	8afb      	ldrh	r3, [r7, #22]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d174      	bne.n	800a2ce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d912      	bls.n	800a214 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f2:	881a      	ldrh	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fe:	1c9a      	adds	r2, r3, #2
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b02      	subs	r3, #2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a212:	e05c      	b.n	800a2ce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a23a:	e048      	b.n	800a2ce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b02      	cmp	r3, #2
 800a248:	d12b      	bne.n	800a2a2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b01      	cmp	r3, #1
 800a252:	d912      	bls.n	800a27a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a258:	881a      	ldrh	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a264:	1c9a      	adds	r2, r3, #2
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a26e:	b29b      	uxth	r3, r3
 800a270:	3b02      	subs	r3, #2
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a278:	e029      	b.n	800a2ce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	7812      	ldrb	r2, [r2, #0]
 800a286:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2a0:	e015      	b.n	800a2ce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2a2:	f7fa fc95 	bl	8004bd0 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d803      	bhi.n	800a2ba <HAL_SPI_Transmit+0x270>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b8:	d102      	bne.n	800a2c0 <HAL_SPI_Transmit+0x276>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a2cc:	e029      	b.n	800a322 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1b1      	bne.n	800a23c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fb69 	bl	800a9b4 <SPI_EndRxTxTransaction>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	77fb      	strb	r3, [r7, #31]
 800a318:	e003      	b.n	800a322 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	@ 0x28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a342:	2301      	movs	r3, #1
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_SPI_TransmitReceive+0x26>
 800a356:	2302      	movs	r3, #2
 800a358:	e20a      	b.n	800a770 <HAL_SPI_TransmitReceive+0x43c>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a362:	f7fa fc35 	bl	8004bd0 <HAL_GetTick>
 800a366:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a36e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a37a:	887b      	ldrh	r3, [r7, #2]
 800a37c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a37e:	7efb      	ldrb	r3, [r7, #27]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d00e      	beq.n	800a3a2 <HAL_SPI_TransmitReceive+0x6e>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a38a:	d106      	bne.n	800a39a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <HAL_SPI_TransmitReceive+0x66>
 800a394:	7efb      	ldrb	r3, [r7, #27]
 800a396:	2b04      	cmp	r3, #4
 800a398:	d003      	beq.n	800a3a2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a39a:	2302      	movs	r3, #2
 800a39c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a3a0:	e1e0      	b.n	800a764 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <HAL_SPI_TransmitReceive+0x80>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <HAL_SPI_TransmitReceive+0x80>
 800a3ae:	887b      	ldrh	r3, [r7, #2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a3ba:	e1d3      	b.n	800a764 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d003      	beq.n	800a3d0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2205      	movs	r2, #5
 800a3cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	887a      	ldrh	r2, [r7, #2]
 800a3e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	887a      	ldrh	r2, [r7, #2]
 800a3e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	887a      	ldrh	r2, [r7, #2]
 800a3f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	887a      	ldrh	r2, [r7, #2]
 800a3fc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a412:	d802      	bhi.n	800a41a <HAL_SPI_TransmitReceive+0xe6>
 800a414:	8a3b      	ldrh	r3, [r7, #16]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d908      	bls.n	800a42c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	e007      	b.n	800a43c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a43a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a446:	2b40      	cmp	r3, #64	@ 0x40
 800a448:	d007      	beq.n	800a45a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a462:	f240 8081 	bls.w	800a568 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <HAL_SPI_TransmitReceive+0x140>
 800a46e:	8a7b      	ldrh	r3, [r7, #18]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d16d      	bne.n	800a550 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a478:	881a      	ldrh	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a498:	e05a      	b.n	800a550 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d11b      	bne.n	800a4e0 <HAL_SPI_TransmitReceive+0x1ac>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d016      	beq.n	800a4e0 <HAL_SPI_TransmitReceive+0x1ac>
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d113      	bne.n	800a4e0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	881a      	ldrh	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c8:	1c9a      	adds	r2, r3, #2
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d11c      	bne.n	800a528 <HAL_SPI_TransmitReceive+0x1f4>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d016      	beq.n	800a528 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a504:	b292      	uxth	r2, r2
 800a506:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50c:	1c9a      	adds	r2, r3, #2
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a518:	b29b      	uxth	r3, r3
 800a51a:	3b01      	subs	r3, #1
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a524:	2301      	movs	r3, #1
 800a526:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a528:	f7fa fb52 	bl	8004bd0 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a534:	429a      	cmp	r2, r3
 800a536:	d80b      	bhi.n	800a550 <HAL_SPI_TransmitReceive+0x21c>
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d007      	beq.n	800a550 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a54e:	e109      	b.n	800a764 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d19f      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x166>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a560:	b29b      	uxth	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d199      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x166>
 800a566:	e0e3      	b.n	800a730 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_SPI_TransmitReceive+0x244>
 800a570:	8a7b      	ldrh	r3, [r7, #18]
 800a572:	2b01      	cmp	r3, #1
 800a574:	f040 80cf 	bne.w	800a716 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d912      	bls.n	800a5a8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a586:	881a      	ldrh	r2, [r3, #0]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a592:	1c9a      	adds	r2, r3, #2
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b02      	subs	r3, #2
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5a6:	e0b6      	b.n	800a716 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	330c      	adds	r3, #12
 800a5b2:	7812      	ldrb	r2, [r2, #0]
 800a5b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ce:	e0a2      	b.n	800a716 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d134      	bne.n	800a648 <HAL_SPI_TransmitReceive+0x314>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d02f      	beq.n	800a648 <HAL_SPI_TransmitReceive+0x314>
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d12c      	bne.n	800a648 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d912      	bls.n	800a61e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fc:	881a      	ldrh	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	1c9a      	adds	r2, r3, #2
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a612:	b29b      	uxth	r3, r3
 800a614:	3b02      	subs	r3, #2
 800a616:	b29a      	uxth	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a61c:	e012      	b.n	800a644 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	330c      	adds	r3, #12
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b01      	cmp	r3, #1
 800a654:	d148      	bne.n	800a6e8 <HAL_SPI_TransmitReceive+0x3b4>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d042      	beq.n	800a6e8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d923      	bls.n	800a6b6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68da      	ldr	r2, [r3, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a678:	b292      	uxth	r2, r2
 800a67a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a680:	1c9a      	adds	r2, r3, #2
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b02      	subs	r3, #2
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d81f      	bhi.n	800a6e4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a6b2:	605a      	str	r2, [r3, #4]
 800a6b4:	e016      	b.n	800a6e4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f103 020c 	add.w	r2, r3, #12
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c2:	7812      	ldrb	r2, [r2, #0]
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a6e8:	f7fa fa72 	bl	8004bd0 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d803      	bhi.n	800a700 <HAL_SPI_TransmitReceive+0x3cc>
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d102      	bne.n	800a706 <HAL_SPI_TransmitReceive+0x3d2>
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	2b00      	cmp	r3, #0
 800a704:	d107      	bne.n	800a716 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a714:	e026      	b.n	800a764 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f af57 	bne.w	800a5d0 <HAL_SPI_TransmitReceive+0x29c>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f47f af50 	bne.w	800a5d0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 f93d 	bl	800a9b4 <SPI_EndRxTxTransaction>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2220      	movs	r2, #32
 800a74a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a75a:	e003      	b.n	800a764 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a76c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a770:	4618      	mov	r0, r3
 800a772:	3728      	adds	r7, #40	@ 0x28
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	4613      	mov	r3, r2
 800a786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a788:	f7fa fa22 	bl	8004bd0 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	4413      	add	r3, r2
 800a796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a798:	f7fa fa1a 	bl	8004bd0 <HAL_GetTick>
 800a79c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a79e:	4b39      	ldr	r3, [pc, #228]	@ (800a884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	015b      	lsls	r3, r3, #5
 800a7a4:	0d1b      	lsrs	r3, r3, #20
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7ae:	e054      	b.n	800a85a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	d050      	beq.n	800a85a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7b8:	f7fa fa0a 	bl	8004bd0 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d902      	bls.n	800a7ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d13d      	bne.n	800a84a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a7dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7e6:	d111      	bne.n	800a80c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7f0:	d004      	beq.n	800a7fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7fa:	d107      	bne.n	800a80c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a80a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a814:	d10f      	bne.n	800a836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e017      	b.n	800a87a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	3b01      	subs	r3, #1
 800a858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4013      	ands	r3, r2
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	bf0c      	ite	eq
 800a86a:	2301      	moveq	r3, #1
 800a86c:	2300      	movne	r3, #0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	461a      	mov	r2, r3
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	429a      	cmp	r2, r3
 800a876:	d19b      	bne.n	800a7b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000000c 	.word	0x2000000c

0800a888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	@ 0x28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a89a:	f7fa f999 	bl	8004bd0 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a8aa:	f7fa f991 	bl	8004bd0 <HAL_GetTick>
 800a8ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a8b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a9b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	00da      	lsls	r2, r3, #3
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	0d1b      	lsrs	r3, r3, #20
 800a8c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a8d0:	e060      	b.n	800a994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a8d8:	d107      	bne.n	800a8ea <SPI_WaitFifoStateUntilTimeout+0x62>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d050      	beq.n	800a994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8f2:	f7fa f96d 	bl	8004bd0 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d902      	bls.n	800a908 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d13d      	bne.n	800a984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a920:	d111      	bne.n	800a946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a92a:	d004      	beq.n	800a936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a934:	d107      	bne.n	800a946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a94e:	d10f      	bne.n	800a970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a96e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e010      	b.n	800a9a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	3b01      	subs	r3, #1
 800a992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	689a      	ldr	r2, [r3, #8]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4013      	ands	r3, r2
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d196      	bne.n	800a8d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3728      	adds	r7, #40	@ 0x28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2000000c 	.word	0x2000000c

0800a9b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af02      	add	r7, sp, #8
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff ff5b 	bl	800a888 <SPI_WaitFifoStateUntilTimeout>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d007      	beq.n	800a9e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9dc:	f043 0220 	orr.w	r2, r3, #32
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e027      	b.n	800aa38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2180      	movs	r1, #128	@ 0x80
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff fec0 	bl	800a778 <SPI_WaitFlagStateUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d007      	beq.n	800aa0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa02:	f043 0220 	orr.w	r2, r3, #32
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e014      	b.n	800aa38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff ff34 	bl	800a888 <SPI_WaitFifoStateUntilTimeout>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d007      	beq.n	800aa36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa2a:	f043 0220 	orr.w	r2, r3, #32
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e000      	b.n	800aa38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e049      	b.n	800aae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f9 fe02 	bl	8004670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f000 fa7c 	bl	800af7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d001      	beq.n	800ab08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e036      	b.n	800ab76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a17      	ldr	r2, [pc, #92]	@ (800ab84 <HAL_TIM_Base_Start_IT+0x94>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d004      	beq.n	800ab34 <HAL_TIM_Base_Start_IT+0x44>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	d115      	bne.n	800ab60 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	4b13      	ldr	r3, [pc, #76]	@ (800ab88 <HAL_TIM_Base_Start_IT+0x98>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b06      	cmp	r3, #6
 800ab44:	d015      	beq.n	800ab72 <HAL_TIM_Base_Start_IT+0x82>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4c:	d011      	beq.n	800ab72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f042 0201 	orr.w	r2, r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5e:	e008      	b.n	800ab72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f042 0201 	orr.w	r2, r2, #1
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	e000      	b.n	800ab74 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	40012c00 	.word	0x40012c00
 800ab88:	00010007 	.word	0x00010007

0800ab8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d020      	beq.n	800abf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01b      	beq.n	800abf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f06f 0202 	mvn.w	r2, #2
 800abc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f9b2 	bl	800af40 <HAL_TIM_IC_CaptureCallback>
 800abdc:	e005      	b.n	800abea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f9a4 	bl	800af2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f9b5 	bl	800af54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f003 0304 	and.w	r3, r3, #4
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d020      	beq.n	800ac3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01b      	beq.n	800ac3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0204 	mvn.w	r2, #4
 800ac0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2202      	movs	r2, #2
 800ac12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f98c 	bl	800af40 <HAL_TIM_IC_CaptureCallback>
 800ac28:	e005      	b.n	800ac36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f97e 	bl	800af2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f98f 	bl	800af54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 0308 	and.w	r3, r3, #8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d020      	beq.n	800ac88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01b      	beq.n	800ac88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f06f 0208 	mvn.w	r2, #8
 800ac58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2204      	movs	r2, #4
 800ac5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f966 	bl	800af40 <HAL_TIM_IC_CaptureCallback>
 800ac74:	e005      	b.n	800ac82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f958 	bl	800af2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f969 	bl	800af54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f003 0310 	and.w	r3, r3, #16
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d020      	beq.n	800acd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f003 0310 	and.w	r3, r3, #16
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d01b      	beq.n	800acd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f06f 0210 	mvn.w	r2, #16
 800aca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2208      	movs	r2, #8
 800acaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f940 	bl	800af40 <HAL_TIM_IC_CaptureCallback>
 800acc0:	e005      	b.n	800acce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f932 	bl	800af2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f943 	bl	800af54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d007      	beq.n	800acf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f06f 0201 	mvn.w	r2, #1
 800acf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7f9 fe74 	bl	80049e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00c      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 faa1 	bl	800b268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fa99 	bl	800b27c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00c      	beq.n	800ad6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f8fd 	bl	800af68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	f003 0320 	and.w	r3, r3, #32
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00c      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f06f 0220 	mvn.w	r2, #32
 800ad8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fa61 	bl	800b254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad92:	bf00      	nop
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_TIM_ConfigClockSource+0x1c>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e0b6      	b.n	800af24 <HAL_TIM_ConfigClockSource+0x18a>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2202      	movs	r2, #2
 800adc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800add4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800add8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ade0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf2:	d03e      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0xd8>
 800adf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf8:	f200 8087 	bhi.w	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae00:	f000 8086 	beq.w	800af10 <HAL_TIM_ConfigClockSource+0x176>
 800ae04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae08:	d87f      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae0a:	2b70      	cmp	r3, #112	@ 0x70
 800ae0c:	d01a      	beq.n	800ae44 <HAL_TIM_ConfigClockSource+0xaa>
 800ae0e:	2b70      	cmp	r3, #112	@ 0x70
 800ae10:	d87b      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae12:	2b60      	cmp	r3, #96	@ 0x60
 800ae14:	d050      	beq.n	800aeb8 <HAL_TIM_ConfigClockSource+0x11e>
 800ae16:	2b60      	cmp	r3, #96	@ 0x60
 800ae18:	d877      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae1a:	2b50      	cmp	r3, #80	@ 0x50
 800ae1c:	d03c      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0xfe>
 800ae1e:	2b50      	cmp	r3, #80	@ 0x50
 800ae20:	d873      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae22:	2b40      	cmp	r3, #64	@ 0x40
 800ae24:	d058      	beq.n	800aed8 <HAL_TIM_ConfigClockSource+0x13e>
 800ae26:	2b40      	cmp	r3, #64	@ 0x40
 800ae28:	d86f      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae2a:	2b30      	cmp	r3, #48	@ 0x30
 800ae2c:	d064      	beq.n	800aef8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae2e:	2b30      	cmp	r3, #48	@ 0x30
 800ae30:	d86b      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d060      	beq.n	800aef8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d867      	bhi.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d05c      	beq.n	800aef8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	d05a      	beq.n	800aef8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae42:	e062      	b.n	800af0a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae54:	f000 f97e 	bl	800b154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	609a      	str	r2, [r3, #8]
      break;
 800ae70:	e04f      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae82:	f000 f967 	bl	800b154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689a      	ldr	r2, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae94:	609a      	str	r2, [r3, #8]
      break;
 800ae96:	e03c      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aea4:	461a      	mov	r2, r3
 800aea6:	f000 f8d9 	bl	800b05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2150      	movs	r1, #80	@ 0x50
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f932 	bl	800b11a <TIM_ITRx_SetConfig>
      break;
 800aeb6:	e02c      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aec4:	461a      	mov	r2, r3
 800aec6:	f000 f8f8 	bl	800b0ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2160      	movs	r1, #96	@ 0x60
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f922 	bl	800b11a <TIM_ITRx_SetConfig>
      break;
 800aed6:	e01c      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee4:	461a      	mov	r2, r3
 800aee6:	f000 f8b9 	bl	800b05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2140      	movs	r1, #64	@ 0x40
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f912 	bl	800b11a <TIM_ITRx_SetConfig>
      break;
 800aef6:	e00c      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f000 f909 	bl	800b11a <TIM_ITRx_SetConfig>
      break;
 800af08:	e003      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	73fb      	strb	r3, [r7, #15]
      break;
 800af0e:	e000      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800af10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a30      	ldr	r2, [pc, #192]	@ (800b050 <TIM_Base_SetConfig+0xd4>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d003      	beq.n	800af9c <TIM_Base_SetConfig+0x20>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af9a:	d108      	bne.n	800afae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a27      	ldr	r2, [pc, #156]	@ (800b050 <TIM_Base_SetConfig+0xd4>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00b      	beq.n	800afce <TIM_Base_SetConfig+0x52>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afbc:	d007      	beq.n	800afce <TIM_Base_SetConfig+0x52>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a24      	ldr	r2, [pc, #144]	@ (800b054 <TIM_Base_SetConfig+0xd8>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d003      	beq.n	800afce <TIM_Base_SetConfig+0x52>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a23      	ldr	r2, [pc, #140]	@ (800b058 <TIM_Base_SetConfig+0xdc>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d108      	bne.n	800afe0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	4313      	orrs	r3, r2
 800afde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	4313      	orrs	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a12      	ldr	r2, [pc, #72]	@ (800b050 <TIM_Base_SetConfig+0xd4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d007      	beq.n	800b01c <TIM_Base_SetConfig+0xa0>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a11      	ldr	r2, [pc, #68]	@ (800b054 <TIM_Base_SetConfig+0xd8>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d003      	beq.n	800b01c <TIM_Base_SetConfig+0xa0>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a10      	ldr	r2, [pc, #64]	@ (800b058 <TIM_Base_SetConfig+0xdc>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d103      	bne.n	800b024 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b01      	cmp	r3, #1
 800b034:	d105      	bne.n	800b042 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	f023 0201 	bic.w	r2, r3, #1
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	611a      	str	r2, [r3, #16]
  }
}
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	40012c00 	.word	0x40012c00
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	f023 0201 	bic.w	r2, r3, #1
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	4313      	orrs	r3, r2
 800b090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f023 030a 	bic.w	r3, r3, #10
 800b098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	621a      	str	r2, [r3, #32]
}
 800b0ae:	bf00      	nop
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b087      	sub	sp, #28
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	f023 0210 	bic.w	r2, r3, #16
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	031b      	lsls	r3, r3, #12
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	621a      	str	r2, [r3, #32]
}
 800b10e:	bf00      	nop
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	f043 0307 	orr.w	r3, r3, #7
 800b140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	609a      	str	r2, [r3, #8]
}
 800b148:	bf00      	nop
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b16e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	021a      	lsls	r2, r3, #8
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	431a      	orrs	r2, r3
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	4313      	orrs	r3, r2
 800b180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	609a      	str	r2, [r3, #8]
}
 800b188:	bf00      	nop
 800b18a:	371c      	adds	r7, #28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e04a      	b.n	800b242 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b250 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d108      	bne.n	800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a12      	ldr	r2, [pc, #72]	@ (800b250 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d004      	beq.n	800b216 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b214:	d10c      	bne.n	800b230 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b21c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	4313      	orrs	r3, r2
 800b226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	40012c00 	.word	0x40012c00

0800b254 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	@ 0x28
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2a4:	2b20      	cmp	r3, #32
 800b2a6:	d167      	bne.n	800b378 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <HAL_UART_Transmit_DMA+0x24>
 800b2ae:	88fb      	ldrh	r3, [r7, #6]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e060      	b.n	800b37a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	88fa      	ldrh	r2, [r7, #6]
 800b2c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2221      	movs	r2, #33	@ 0x21
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d028      	beq.n	800b338 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2ea:	4a26      	ldr	r2, [pc, #152]	@ (800b384 <HAL_UART_Transmit_DMA+0xf4>)
 800b2ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2f2:	4a25      	ldr	r2, [pc, #148]	@ (800b388 <HAL_UART_Transmit_DMA+0xf8>)
 800b2f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2fa:	4a24      	ldr	r2, [pc, #144]	@ (800b38c <HAL_UART_Transmit_DMA+0xfc>)
 800b2fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b302:	2200      	movs	r2, #0
 800b304:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b30e:	4619      	mov	r1, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	3328      	adds	r3, #40	@ 0x28
 800b316:	461a      	mov	r2, r3
 800b318:	88fb      	ldrh	r3, [r7, #6]
 800b31a:	f7f9 fe16 	bl	8004f4a <HAL_DMA_Start_IT>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d009      	beq.n	800b338 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2210      	movs	r2, #16
 800b328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2220      	movs	r2, #32
 800b330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e020      	b.n	800b37a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2240      	movs	r2, #64	@ 0x40
 800b33e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	613b      	str	r3, [r7, #16]
   return(result);
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b356:	627b      	str	r3, [r7, #36]	@ 0x24
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b360:	623a      	str	r2, [r7, #32]
 800b362:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	69f9      	ldr	r1, [r7, #28]
 800b366:	6a3a      	ldr	r2, [r7, #32]
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e5      	bne.n	800b340 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	e000      	b.n	800b37a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b378:	2302      	movs	r3, #2
  }
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3728      	adds	r7, #40	@ 0x28
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	0800bb67 	.word	0x0800bb67
 800b388:	0800bc01 	.word	0x0800bc01
 800b38c:	0800bc1d 	.word	0x0800bc1d

0800b390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b0ba      	sub	sp, #232	@ 0xe8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b3ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b3be:	4013      	ands	r3, r2
 800b3c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b3c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d11b      	bne.n	800b404 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3d0:	f003 0320 	and.w	r3, r3, #32
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d015      	beq.n	800b404 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d105      	bne.n	800b3f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 82e3 	beq.w	800b9c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	4798      	blx	r3
      }
      return;
 800b402:	e2dd      	b.n	800b9c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 8123 	beq.w	800b654 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b40e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b412:	4b8d      	ldr	r3, [pc, #564]	@ (800b648 <HAL_UART_IRQHandler+0x2b8>)
 800b414:	4013      	ands	r3, r2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b41a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b41e:	4b8b      	ldr	r3, [pc, #556]	@ (800b64c <HAL_UART_IRQHandler+0x2bc>)
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8116 	beq.w	800b654 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	d011      	beq.n	800b458 <HAL_UART_IRQHandler+0xc8>
 800b434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b44e:	f043 0201 	orr.w	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d011      	beq.n	800b488 <HAL_UART_IRQHandler+0xf8>
 800b464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2202      	movs	r2, #2
 800b476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b47e:	f043 0204 	orr.w	r2, r3, #4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x128>
 800b494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ae:	f043 0202 	orr.w	r2, r3, #2
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d017      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4c8:	f003 0320 	and.w	r3, r3, #32
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d105      	bne.n	800b4dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b648 <HAL_UART_IRQHandler+0x2b8>)
 800b4d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ea:	f043 0208 	orr.w	r2, r3, #8
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d012      	beq.n	800b526 <HAL_UART_IRQHandler+0x196>
 800b500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b504:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00c      	beq.n	800b526 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51c:	f043 0220 	orr.w	r2, r3, #32
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8249 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b536:	f003 0320 	and.w	r3, r3, #32
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d013      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b54e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b56c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57a:	2b40      	cmp	r3, #64	@ 0x40
 800b57c:	d005      	beq.n	800b58a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b57e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b582:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b586:	2b00      	cmp	r3, #0
 800b588:	d054      	beq.n	800b634 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa85 	bl	800ba9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b59a:	2b40      	cmp	r3, #64	@ 0x40
 800b59c:	d146      	bne.n	800b62c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5da:	e841 2300 	strex	r3, r2, [r1]
 800b5de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d9      	bne.n	800b59e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5fa:	4a15      	ldr	r2, [pc, #84]	@ (800b650 <HAL_UART_IRQHandler+0x2c0>)
 800b5fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b604:	4618      	mov	r0, r3
 800b606:	f7f9 fd7a 	bl	80050fe <HAL_DMA_Abort_IT>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d019      	beq.n	800b644 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b61e:	4610      	mov	r0, r2
 800b620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b622:	e00f      	b.n	800b644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f9e1 	bl	800b9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62a:	e00b      	b.n	800b644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f9dd 	bl	800b9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b632:	e007      	b.n	800b644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f9d9 	bl	800b9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b642:	e1bf      	b.n	800b9c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b644:	bf00      	nop
    return;
 800b646:	e1bd      	b.n	800b9c4 <HAL_UART_IRQHandler+0x634>
 800b648:	10000001 	.word	0x10000001
 800b64c:	04000120 	.word	0x04000120
 800b650:	0800bc9d 	.word	0x0800bc9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f040 8153 	bne.w	800b904 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b662:	f003 0310 	and.w	r3, r3, #16
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 814c 	beq.w	800b904 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8145 	beq.w	800b904 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2210      	movs	r2, #16
 800b680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68c:	2b40      	cmp	r3, #64	@ 0x40
 800b68e:	f040 80bb 	bne.w	800b808 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 818f 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b6b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	f080 8187 	bcs.w	800b9c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 8087 	bne.w	800b7e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b6ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b702:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b706:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b70e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b712:	e841 2300 	strex	r3, r2, [r1]
 800b716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b71a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1da      	bne.n	800b6d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b734:	f023 0301 	bic.w	r3, r3, #1
 800b738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3308      	adds	r3, #8
 800b742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b746:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b74a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b74e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e1      	bne.n	800b722 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3308      	adds	r3, #8
 800b764:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b76e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3308      	adds	r3, #8
 800b77e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b782:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b784:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b788:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e3      	bne.n	800b75e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7b4:	f023 0310 	bic.w	r3, r3, #16
 800b7b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e4      	bne.n	800b7a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f9 fc2d 	bl	8005040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f8fd 	bl	800ba00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b806:	e0df      	b.n	800b9c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b814:	b29b      	uxth	r3, r3
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b822:	b29b      	uxth	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80d1 	beq.w	800b9cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b82a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 80cc 	beq.w	800b9cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b856:	647b      	str	r3, [r7, #68]	@ 0x44
 800b858:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b85c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e4      	bne.n	800b834 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3308      	adds	r3, #8
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	623b      	str	r3, [r7, #32]
   return(result);
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b892:	633a      	str	r2, [r7, #48]	@ 0x30
 800b894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e1      	bne.n	800b86a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 0310 	bic.w	r3, r3, #16
 800b8ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e0:	69b9      	ldr	r1, [r7, #24]
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	e841 2300 	strex	r3, r2, [r1]
 800b8e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e4      	bne.n	800b8ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f87f 	bl	800ba00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b902:	e063      	b.n	800b9cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00e      	beq.n	800b92e <HAL_UART_IRQHandler+0x59e>
 800b910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d008      	beq.n	800b92e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f9f9 	bl	800bd1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b92c:	e051      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b936:	2b00      	cmp	r3, #0
 800b938:	d014      	beq.n	800b964 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b942:	2b00      	cmp	r3, #0
 800b944:	d105      	bne.n	800b952 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b94a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d008      	beq.n	800b964 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b956:	2b00      	cmp	r3, #0
 800b958:	d03a      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
    }
    return;
 800b962:	e035      	b.n	800b9d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <HAL_UART_IRQHandler+0x5f4>
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f9a3 	bl	800bcc8 <UART_EndTransmit_IT>
    return;
 800b982:	e026      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d009      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x614>
 800b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f9d2 	bl	800bd46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9a2:	e016      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d010      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x642>
 800b9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	da0c      	bge.n	800b9d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f9ba 	bl	800bd32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9be:	e008      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9c0:	bf00      	nop
 800b9c2:	e006      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
    return;
 800b9c4:	bf00      	nop
 800b9c6:	e004      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9c8:	bf00      	nop
 800b9ca:	e002      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9cc:	bf00      	nop
 800b9ce:	e000      	b.n	800b9d2 <HAL_UART_IRQHandler+0x642>
    return;
 800b9d0:	bf00      	nop
  }
}
 800b9d2:	37e8      	adds	r7, #232	@ 0xe8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b08f      	sub	sp, #60	@ 0x3c
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ba34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e6      	bne.n	800ba20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ba68:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba72:	61ba      	str	r2, [r7, #24]
 800ba74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	6979      	ldr	r1, [r7, #20]
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	e841 2300 	strex	r3, r2, [r1]
 800ba7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e5      	bne.n	800ba52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2220      	movs	r2, #32
 800ba8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba8e:	bf00      	nop
 800ba90:	373c      	adds	r7, #60	@ 0x3c
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b095      	sub	sp, #84	@ 0x54
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baaa:	e853 3f00 	ldrex	r3, [r3]
 800baae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	461a      	mov	r2, r3
 800babe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bac0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bac2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bac8:	e841 2300 	strex	r3, r2, [r1]
 800bacc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1e6      	bne.n	800baa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3308      	adds	r3, #8
 800bada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	e853 3f00 	ldrex	r3, [r3]
 800bae2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800baea:	f023 0301 	bic.w	r3, r3, #1
 800baee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3308      	adds	r3, #8
 800baf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800baf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bafa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bafe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb00:	e841 2300 	strex	r3, r2, [r1]
 800bb04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1e3      	bne.n	800bad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d118      	bne.n	800bb46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	f023 0310 	bic.w	r3, r3, #16
 800bb28:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6979      	ldr	r1, [r7, #20]
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb5a:	bf00      	nop
 800bb5c:	3754      	adds	r7, #84	@ 0x54
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b090      	sub	sp, #64	@ 0x40
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d137      	bne.n	800bbf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3308      	adds	r3, #8
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	623b      	str	r3, [r7, #32]
   return(result);
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3308      	adds	r3, #8
 800bba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbaa:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e5      	bne.n	800bb8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	69b9      	ldr	r1, [r7, #24]
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e6      	bne.n	800bbbe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbf0:	e002      	b.n	800bbf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bbf2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bbf4:	f7f7 fdee 	bl	80037d4 <HAL_UART_TxCpltCallback>
}
 800bbf8:	bf00      	nop
 800bbfa:	3740      	adds	r7, #64	@ 0x40
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff fee2 	bl	800b9d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc44:	2b80      	cmp	r3, #128	@ 0x80
 800bc46:	d109      	bne.n	800bc5c <UART_DMAError+0x40>
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2b21      	cmp	r3, #33	@ 0x21
 800bc4c:	d106      	bne.n	800bc5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bc56:	6978      	ldr	r0, [r7, #20]
 800bc58:	f7ff fede 	bl	800ba18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc66:	2b40      	cmp	r3, #64	@ 0x40
 800bc68:	d109      	bne.n	800bc7e <UART_DMAError+0x62>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b22      	cmp	r3, #34	@ 0x22
 800bc6e:	d106      	bne.n	800bc7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bc78:	6978      	ldr	r0, [r7, #20]
 800bc7a:	f7ff ff0e 	bl	800ba9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc84:	f043 0210 	orr.w	r2, r3, #16
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc8e:	6978      	ldr	r0, [r7, #20]
 800bc90:	f7ff feac 	bl	800b9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc94:	bf00      	nop
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff fe96 	bl	800b9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	61bb      	str	r3, [r7, #24]
 800bcf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	6979      	ldr	r1, [r7, #20]
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e6      	bne.n	800bcd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7f7 fd5f 	bl	80037d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd16:	bf00      	nop
 800bd18:	3720      	adds	r7, #32
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd6a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd90:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	43db      	mvns	r3, r3
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4013      	ands	r3, r2
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	60f8      	str	r0, [r7, #12]
 800bdc6:	1d3b      	adds	r3, r7, #4
 800bdc8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b09d      	sub	sp, #116	@ 0x74
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800be1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	78db      	ldrb	r3, [r3, #3]
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d81f      	bhi.n	800be6e <USB_ActivateEndpoint+0x72>
 800be2e:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <USB_ActivateEndpoint+0x38>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be61 	.word	0x0800be61
 800be3c:	0800be77 	.word	0x0800be77
 800be40:	0800be53 	.word	0x0800be53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800be44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be50:	e012      	b.n	800be78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800be52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be56:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800be5a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be5e:	e00b      	b.n	800be78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800be60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be6c:	e004      	b.n	800be78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800be74:	e000      	b.n	800be78 <USB_ActivateEndpoint+0x7c>
      break;
 800be76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	441a      	add	r2, r3
 800be82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be96:	b29b      	uxth	r3, r3
 800be98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	b21b      	sxth	r3, r3
 800beaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb2:	b21a      	sxth	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	b21b      	sxth	r3, r3
 800beba:	4313      	orrs	r3, r2
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	441a      	add	r2, r3
 800becc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bedc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	7b1b      	ldrb	r3, [r3, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 8178 	bne.w	800c1de <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	785b      	ldrb	r3, [r3, #1]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 8084 	beq.w	800c000 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	61bb      	str	r3, [r7, #24]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	4413      	add	r3, r2
 800bf0a:	61bb      	str	r3, [r7, #24]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	00da      	lsls	r2, r3, #3
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	88db      	ldrh	r3, [r3, #6]
 800bf20:	085b      	lsrs	r3, r3, #1
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	827b      	strh	r3, [r7, #18]
 800bf3a:	8a7b      	ldrh	r3, [r7, #18]
 800bf3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01b      	beq.n	800bf7c <USB_ActivateEndpoint+0x180>
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf5a:	823b      	strh	r3, [r7, #16]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	441a      	add	r2, r3
 800bf66:	8a3b      	ldrh	r3, [r7, #16]
 800bf68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	78db      	ldrb	r3, [r3, #3]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d020      	beq.n	800bfc6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf9a:	81bb      	strh	r3, [r7, #12]
 800bf9c:	89bb      	ldrh	r3, [r7, #12]
 800bf9e:	f083 0320 	eor.w	r3, r3, #32
 800bfa2:	81bb      	strh	r3, [r7, #12]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	441a      	add	r2, r3
 800bfae:	89bb      	ldrh	r3, [r7, #12]
 800bfb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	8013      	strh	r3, [r2, #0]
 800bfc4:	e2d5      	b.n	800c572 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfdc:	81fb      	strh	r3, [r7, #14]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	441a      	add	r2, r3
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
 800bfea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	8013      	strh	r3, [r2, #0]
 800bffe:	e2b8      	b.n	800c572 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c010:	4413      	add	r3, r2
 800c012:	633b      	str	r3, [r7, #48]	@ 0x30
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	00da      	lsls	r2, r3, #3
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	4413      	add	r3, r2
 800c01e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	88db      	ldrh	r3, [r3, #6]
 800c028:	085b      	lsrs	r3, r3, #1
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	b29a      	uxth	r2, r3
 800c030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c032:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c03e:	b29b      	uxth	r3, r3
 800c040:	461a      	mov	r2, r3
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	4413      	add	r3, r2
 800c046:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	00da      	lsls	r2, r3, #3
 800c04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c050:	4413      	add	r3, r2
 800c052:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c056:	627b      	str	r3, [r7, #36]	@ 0x24
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c062:	b29a      	uxth	r2, r3
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	801a      	strh	r2, [r3, #0]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c06e:	d91d      	bls.n	800c0ac <USB_ActivateEndpoint+0x2b0>
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	095b      	lsrs	r3, r3, #5
 800c076:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f003 031f 	and.w	r3, r3, #31
 800c080:	2b00      	cmp	r3, #0
 800c082:	d102      	bne.n	800c08a <USB_ActivateEndpoint+0x28e>
 800c084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c086:	3b01      	subs	r3, #1
 800c088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	b29a      	uxth	r2, r3
 800c090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c092:	b29b      	uxth	r3, r3
 800c094:	029b      	lsls	r3, r3, #10
 800c096:	b29b      	uxth	r3, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a8:	801a      	strh	r2, [r3, #0]
 800c0aa:	e026      	b.n	800c0fa <USB_ActivateEndpoint+0x2fe>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10a      	bne.n	800c0ca <USB_ActivateEndpoint+0x2ce>
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	801a      	strh	r2, [r3, #0]
 800c0c8:	e017      	b.n	800c0fa <USB_ActivateEndpoint+0x2fe>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	085b      	lsrs	r3, r3, #1
 800c0d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <USB_ActivateEndpoint+0x2e8>
 800c0de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	029b      	lsls	r3, r3, #10
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c108:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c10a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d01b      	beq.n	800c14a <USB_ActivateEndpoint+0x34e>
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c128:	843b      	strh	r3, [r7, #32]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	441a      	add	r2, r3
 800c134:	8c3b      	ldrh	r3, [r7, #32]
 800c136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c13a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c13e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c146:	b29b      	uxth	r3, r3
 800c148:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d124      	bne.n	800c19c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c168:	83bb      	strh	r3, [r7, #28]
 800c16a:	8bbb      	ldrh	r3, [r7, #28]
 800c16c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c170:	83bb      	strh	r3, [r7, #28]
 800c172:	8bbb      	ldrh	r3, [r7, #28]
 800c174:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c178:	83bb      	strh	r3, [r7, #28]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	441a      	add	r2, r3
 800c184:	8bbb      	ldrh	r3, [r7, #28]
 800c186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c18a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c18e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c196:	b29b      	uxth	r3, r3
 800c198:	8013      	strh	r3, [r2, #0]
 800c19a:	e1ea      	b.n	800c572 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	881b      	ldrh	r3, [r3, #0]
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1b2:	83fb      	strh	r3, [r7, #30]
 800c1b4:	8bfb      	ldrh	r3, [r7, #30]
 800c1b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c1ba:	83fb      	strh	r3, [r7, #30]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	441a      	add	r2, r3
 800c1c6:	8bfb      	ldrh	r3, [r7, #30]
 800c1c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	8013      	strh	r3, [r2, #0]
 800c1dc:	e1c9      	b.n	800c572 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	78db      	ldrb	r3, [r3, #3]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d11e      	bne.n	800c224 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	441a      	add	r2, r3
 800c20a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c20e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c216:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c21e:	b29b      	uxth	r3, r3
 800c220:	8013      	strh	r3, [r2, #0]
 800c222:	e01d      	b.n	800c260 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	b29b      	uxth	r3, r3
 800c232:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	441a      	add	r2, r3
 800c248:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c24c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	461a      	mov	r2, r3
 800c26e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c270:	4413      	add	r3, r2
 800c272:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	00da      	lsls	r2, r3, #3
 800c27a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c282:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	891b      	ldrh	r3, [r3, #8]
 800c288:	085b      	lsrs	r3, r3, #1
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	b29a      	uxth	r2, r3
 800c290:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c292:	801a      	strh	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	657b      	str	r3, [r7, #84]	@ 0x54
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a4:	4413      	add	r3, r2
 800c2a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	00da      	lsls	r2, r3, #3
 800c2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c2b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	895b      	ldrh	r3, [r3, #10]
 800c2bc:	085b      	lsrs	r3, r3, #1
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	005b      	lsls	r3, r3, #1
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	785b      	ldrb	r3, [r3, #1]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f040 8093 	bne.w	800c3f8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c2e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c2e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01b      	beq.n	800c326 <USB_ActivateEndpoint+0x52a>
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	441a      	add	r2, r3
 800c310:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c31a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c322:	b29b      	uxth	r3, r3
 800c324:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	4413      	add	r3, r2
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c334:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d01b      	beq.n	800c376 <USB_ActivateEndpoint+0x57a>
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c354:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	441a      	add	r2, r3
 800c360:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c36a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c36e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c372:	b29b      	uxth	r3, r3
 800c374:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c38c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c38e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c390:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c394:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c396:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c398:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c39c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	441a      	add	r2, r3
 800c3a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c3aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	441a      	add	r2, r3
 800c3e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c3e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	8013      	strh	r3, [r2, #0]
 800c3f6:	e0bc      	b.n	800c572 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c40c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01d      	beq.n	800c450 <USB_ActivateEndpoint+0x654>
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29b      	uxth	r3, r3
 800c422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c42a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c43c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01d      	beq.n	800c4a8 <USB_ActivateEndpoint+0x6ac>
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c47e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c482:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	441a      	add	r2, r3
 800c490:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c49c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	78db      	ldrb	r3, [r3, #3]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d024      	beq.n	800c4fa <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4ce:	f083 0320 	eor.w	r3, r3, #32
 800c4d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	441a      	add	r2, r3
 800c4e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	8013      	strh	r3, [r2, #0]
 800c4f8:	e01d      	b.n	800c536 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29b      	uxth	r3, r3
 800c508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c50c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c510:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	441a      	add	r2, r3
 800c51e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c52a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c532:	b29b      	uxth	r3, r3
 800c534:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	b29b      	uxth	r3, r3
 800c544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c54c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	441a      	add	r2, r3
 800c55a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c55e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c56e:	b29b      	uxth	r3, r3
 800c570:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c572:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c576:	4618      	mov	r0, r3
 800c578:	3774      	adds	r7, #116	@ 0x74
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop

0800c584 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c584:	b480      	push	{r7}
 800c586:	b08d      	sub	sp, #52	@ 0x34
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	7b1b      	ldrb	r3, [r3, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 808e 	bne.w	800c6b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	785b      	ldrb	r3, [r3, #1]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d044      	beq.n	800c62a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	81bb      	strh	r3, [r7, #12]
 800c5ae:	89bb      	ldrh	r3, [r7, #12]
 800c5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01b      	beq.n	800c5f0 <USB_DeactivateEndpoint+0x6c>
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ce:	817b      	strh	r3, [r7, #10]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	441a      	add	r2, r3
 800c5da:	897b      	ldrh	r3, [r7, #10]
 800c5dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c606:	813b      	strh	r3, [r7, #8]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	441a      	add	r2, r3
 800c612:	893b      	ldrh	r3, [r7, #8]
 800c614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c61c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c624:	b29b      	uxth	r3, r3
 800c626:	8013      	strh	r3, [r2, #0]
 800c628:	e192      	b.n	800c950 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	827b      	strh	r3, [r7, #18]
 800c638:	8a7b      	ldrh	r3, [r7, #18]
 800c63a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d01b      	beq.n	800c67a <USB_DeactivateEndpoint+0xf6>
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c658:	823b      	strh	r3, [r7, #16]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	441a      	add	r2, r3
 800c664:	8a3b      	ldrh	r3, [r7, #16]
 800c666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c66a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c66e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c676:	b29b      	uxth	r3, r3
 800c678:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c690:	81fb      	strh	r3, [r7, #14]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	441a      	add	r2, r3
 800c69c:	89fb      	ldrh	r3, [r7, #14]
 800c69e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	8013      	strh	r3, [r2, #0]
 800c6b2:	e14d      	b.n	800c950 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	785b      	ldrb	r3, [r3, #1]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 80a5 	bne.w	800c808 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	881b      	ldrh	r3, [r3, #0]
 800c6ca:	843b      	strh	r3, [r7, #32]
 800c6cc:	8c3b      	ldrh	r3, [r7, #32]
 800c6ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01b      	beq.n	800c70e <USB_DeactivateEndpoint+0x18a>
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ec:	83fb      	strh	r3, [r7, #30]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	441a      	add	r2, r3
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	83bb      	strh	r3, [r7, #28]
 800c71c:	8bbb      	ldrh	r3, [r7, #28]
 800c71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d01b      	beq.n	800c75e <USB_DeactivateEndpoint+0x1da>
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	b29b      	uxth	r3, r3
 800c734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c73c:	837b      	strh	r3, [r7, #26]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	441a      	add	r2, r3
 800c748:	8b7b      	ldrh	r3, [r7, #26]
 800c74a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c74e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c756:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c774:	833b      	strh	r3, [r7, #24]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	441a      	add	r2, r3
 800c780:	8b3b      	ldrh	r3, [r7, #24]
 800c782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c78e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c792:	b29b      	uxth	r3, r3
 800c794:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ac:	82fb      	strh	r3, [r7, #22]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	441a      	add	r2, r3
 800c7b8:	8afb      	ldrh	r3, [r7, #22]
 800c7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7e4:	82bb      	strh	r3, [r7, #20]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	441a      	add	r2, r3
 800c7f0:	8abb      	ldrh	r3, [r7, #20]
 800c7f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c802:	b29b      	uxth	r3, r3
 800c804:	8013      	strh	r3, [r2, #0]
 800c806:	e0a3      	b.n	800c950 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4413      	add	r3, r2
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01b      	beq.n	800c858 <USB_DeactivateEndpoint+0x2d4>
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c836:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	441a      	add	r2, r3
 800c842:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c84c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c854:	b29b      	uxth	r3, r3
 800c856:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c866:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01b      	beq.n	800c8a8 <USB_DeactivateEndpoint+0x324>
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c886:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	441a      	add	r2, r3
 800c892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c89c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	441a      	add	r2, r3
 800c8ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	441a      	add	r2, r3
 800c902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c90c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c914:	b29b      	uxth	r3, r3
 800c916:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	b29b      	uxth	r3, r3
 800c926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c92a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c92e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	441a      	add	r2, r3
 800c93a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c93c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3734      	adds	r7, #52	@ 0x34
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b0c2      	sub	sp, #264	@ 0x108
 800c962:	af00      	add	r7, sp, #0
 800c964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c96c:	6018      	str	r0, [r3, #0]
 800c96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c976:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c97c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	785b      	ldrb	r3, [r3, #1]
 800c984:	2b01      	cmp	r3, #1
 800c986:	f040 86b7 	bne.w	800d6f8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c98a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c99a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d908      	bls.n	800c9b8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c9b6:	e007      	b.n	800c9c8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	7b1b      	ldrb	r3, [r3, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d13a      	bne.n	800ca4e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6959      	ldr	r1, [r3, #20]
 800c9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	88da      	ldrh	r2, [r3, #6]
 800c9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c9fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c9fe:	6800      	ldr	r0, [r0, #0]
 800ca00:	f001 fc98 	bl	800e334 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	613b      	str	r3, [r7, #16]
 800ca10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	4413      	add	r3, r2
 800ca26:	613b      	str	r3, [r7, #16]
 800ca28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	00da      	lsls	r2, r3, #3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4413      	add	r3, r2
 800ca3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	801a      	strh	r2, [r3, #0]
 800ca4a:	f000 be1f 	b.w	800d68c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	78db      	ldrb	r3, [r3, #3]
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	f040 8462 	bne.w	800d324 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6a1a      	ldr	r2, [r3, #32]
 800ca6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	f240 83df 	bls.w	800d23c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800caa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	441a      	add	r2, r3
 800cac2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cace:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6a1a      	ldr	r2, [r3, #32]
 800cae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caea:	1ad2      	subs	r2, r2, r3
 800caec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800caf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cafc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 81c7 	beq.w	800ceae <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	785b      	ldrb	r3, [r3, #1]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d177      	bne.n	800cc2c <USB_EPStartXfer+0x2ce>
 800cb3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5c:	4413      	add	r3, r2
 800cb5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	00da      	lsls	r2, r3, #3
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	4413      	add	r3, r2
 800cb72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb76:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	801a      	strh	r2, [r3, #0]
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb8e:	d921      	bls.n	800cbd4 <USB_EPStartXfer+0x276>
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	095b      	lsrs	r3, r3, #5
 800cb96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	f003 031f 	and.w	r3, r3, #31
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d104      	bne.n	800cbb0 <USB_EPStartXfer+0x252>
 800cba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	881b      	ldrh	r3, [r3, #0]
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	029b      	lsls	r3, r3, #10
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	801a      	strh	r2, [r3, #0]
 800cbd2:	e050      	b.n	800cc76 <USB_EPStartXfer+0x318>
 800cbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10a      	bne.n	800cbf2 <USB_EPStartXfer+0x294>
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbee:	801a      	strh	r2, [r3, #0]
 800cbf0:	e041      	b.n	800cc76 <USB_EPStartXfer+0x318>
 800cbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <USB_EPStartXfer+0x2b4>
 800cc08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	029b      	lsls	r3, r3, #10
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	4313      	orrs	r3, r2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	801a      	strh	r2, [r3, #0]
 800cc2a:	e024      	b.n	800cc76 <USB_EPStartXfer+0x318>
 800cc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	785b      	ldrb	r3, [r3, #1]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d11c      	bne.n	800cc76 <USB_EPStartXfer+0x318>
 800cc3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	4413      	add	r3, r2
 800cc52:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	00da      	lsls	r2, r3, #3
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	4413      	add	r3, r2
 800cc66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	895b      	ldrh	r3, [r3, #10]
 800cc82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6959      	ldr	r1, [r3, #20]
 800cc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cca0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cca4:	6800      	ldr	r0, [r0, #0]
 800cca6:	f001 fb45 	bl	800e334 <USB_WritePMA>
            ep->xfer_buff += len;
 800ccaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	695a      	ldr	r2, [r3, #20]
 800ccb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccba:	441a      	add	r2, r3
 800ccbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ccc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6a1a      	ldr	r2, [r3, #32]
 800ccd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d90f      	bls.n	800cd04 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6a1a      	ldr	r2, [r3, #32]
 800ccf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf4:	1ad2      	subs	r2, r2, r3
 800ccf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	621a      	str	r2, [r3, #32]
 800cd02:	e00e      	b.n	800cd22 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cd14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d177      	bne.n	800ce22 <USB_EPStartXfer+0x4c4>
 800cd32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	61bb      	str	r3, [r7, #24]
 800cd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	461a      	mov	r2, r3
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	4413      	add	r3, r2
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	00da      	lsls	r2, r3, #3
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	4413      	add	r3, r2
 800cd68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	881b      	ldrh	r3, [r3, #0]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	801a      	strh	r2, [r3, #0]
 800cd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd82:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd84:	d921      	bls.n	800cdca <USB_EPStartXfer+0x46c>
 800cd86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8a:	095b      	lsrs	r3, r3, #5
 800cd8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd94:	f003 031f 	and.w	r3, r3, #31
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <USB_EPStartXfer+0x448>
 800cd9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cda0:	3b01      	subs	r3, #1
 800cda2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	029b      	lsls	r3, r3, #10
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	801a      	strh	r2, [r3, #0]
 800cdc8:	e056      	b.n	800ce78 <USB_EPStartXfer+0x51a>
 800cdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <USB_EPStartXfer+0x48a>
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	e047      	b.n	800ce78 <USB_EPStartXfer+0x51a>
 800cde8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdec:	085b      	lsrs	r3, r3, #1
 800cdee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d004      	beq.n	800ce08 <USB_EPStartXfer+0x4aa>
 800cdfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce02:	3301      	adds	r3, #1
 800ce04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	029b      	lsls	r3, r3, #10
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	801a      	strh	r2, [r3, #0]
 800ce20:	e02a      	b.n	800ce78 <USB_EPStartXfer+0x51a>
 800ce22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	785b      	ldrb	r3, [r3, #1]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d122      	bne.n	800ce78 <USB_EPStartXfer+0x51a>
 800ce32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	623b      	str	r3, [r7, #32]
 800ce3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	461a      	mov	r2, r3
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	4413      	add	r3, r2
 800ce54:	623b      	str	r3, [r7, #32]
 800ce56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	00da      	lsls	r2, r3, #3
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	4413      	add	r3, r2
 800ce68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce6c:	61fb      	str	r3, [r7, #28]
 800ce6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	891b      	ldrh	r3, [r3, #8]
 800ce84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6959      	ldr	r1, [r3, #20]
 800ce94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cea2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cea6:	6800      	ldr	r0, [r0, #0]
 800cea8:	f001 fa44 	bl	800e334 <USB_WritePMA>
 800ceac:	e3ee      	b.n	800d68c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ceae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	785b      	ldrb	r3, [r3, #1]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d177      	bne.n	800cfae <USB_EPStartXfer+0x650>
 800cebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	461a      	mov	r2, r3
 800cedc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cede:	4413      	add	r3, r2
 800cee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	00da      	lsls	r2, r3, #3
 800cef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cef2:	4413      	add	r3, r2
 800cef4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cef8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cefa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf08:	801a      	strh	r2, [r3, #0]
 800cf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf10:	d921      	bls.n	800cf56 <USB_EPStartXfer+0x5f8>
 800cf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf16:	095b      	lsrs	r3, r3, #5
 800cf18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf20:	f003 031f 	and.w	r3, r3, #31
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d104      	bne.n	800cf32 <USB_EPStartXfer+0x5d4>
 800cf28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	029b      	lsls	r3, r3, #10
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	4313      	orrs	r3, r2
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf52:	801a      	strh	r2, [r3, #0]
 800cf54:	e056      	b.n	800d004 <USB_EPStartXfer+0x6a6>
 800cf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10a      	bne.n	800cf74 <USB_EPStartXfer+0x616>
 800cf5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf70:	801a      	strh	r2, [r3, #0]
 800cf72:	e047      	b.n	800d004 <USB_EPStartXfer+0x6a6>
 800cf74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf78:	085b      	lsrs	r3, r3, #1
 800cf7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <USB_EPStartXfer+0x636>
 800cf8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf8e:	3301      	adds	r3, #1
 800cf90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	029b      	lsls	r3, r3, #10
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfaa:	801a      	strh	r2, [r3, #0]
 800cfac:	e02a      	b.n	800d004 <USB_EPStartXfer+0x6a6>
 800cfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	785b      	ldrb	r3, [r3, #1]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d122      	bne.n	800d004 <USB_EPStartXfer+0x6a6>
 800cfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	461a      	mov	r2, r3
 800cfdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfde:	4413      	add	r3, r2
 800cfe0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	00da      	lsls	r2, r3, #3
 800cff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff2:	4413      	add	r3, r2
 800cff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffe:	b29a      	uxth	r2, r3
 800d000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	891b      	ldrh	r3, [r3, #8]
 800d010:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6959      	ldr	r1, [r3, #20]
 800d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d024:	b29b      	uxth	r3, r3
 800d026:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d02a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d02e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d032:	6800      	ldr	r0, [r0, #0]
 800d034:	f001 f97e 	bl	800e334 <USB_WritePMA>
            ep->xfer_buff += len;
 800d038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	695a      	ldr	r2, [r3, #20]
 800d044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d048:	441a      	add	r2, r3
 800d04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6a1a      	ldr	r2, [r3, #32]
 800d062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d90f      	bls.n	800d092 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6a1a      	ldr	r2, [r3, #32]
 800d07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d082:	1ad2      	subs	r2, r2, r3
 800d084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	621a      	str	r2, [r3, #32]
 800d090:	e00e      	b.n	800d0b0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	785b      	ldrb	r3, [r3, #1]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d177      	bne.n	800d1bc <USB_EPStartXfer+0x85e>
 800d0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ec:	4413      	add	r3, r2
 800d0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	00da      	lsls	r2, r3, #3
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d100:	4413      	add	r3, r2
 800d102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d106:	637b      	str	r3, [r7, #52]	@ 0x34
 800d108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d112:	b29a      	uxth	r2, r3
 800d114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d116:	801a      	strh	r2, [r3, #0]
 800d118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d11c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d11e:	d921      	bls.n	800d164 <USB_EPStartXfer+0x806>
 800d120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d124:	095b      	lsrs	r3, r3, #5
 800d126:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12e:	f003 031f 	and.w	r3, r3, #31
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <USB_EPStartXfer+0x7e2>
 800d136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d13a:	3b01      	subs	r3, #1
 800d13c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	b29a      	uxth	r2, r3
 800d146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	029b      	lsls	r3, r3, #10
 800d14e:	b29b      	uxth	r3, r3
 800d150:	4313      	orrs	r3, r2
 800d152:	b29b      	uxth	r3, r3
 800d154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d160:	801a      	strh	r2, [r3, #0]
 800d162:	e050      	b.n	800d206 <USB_EPStartXfer+0x8a8>
 800d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <USB_EPStartXfer+0x824>
 800d16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	b29b      	uxth	r3, r3
 800d172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17e:	801a      	strh	r2, [r3, #0]
 800d180:	e041      	b.n	800d206 <USB_EPStartXfer+0x8a8>
 800d182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <USB_EPStartXfer+0x844>
 800d198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d19c:	3301      	adds	r3, #1
 800d19e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	029b      	lsls	r3, r3, #10
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b8:	801a      	strh	r2, [r3, #0]
 800d1ba:	e024      	b.n	800d206 <USB_EPStartXfer+0x8a8>
 800d1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d11c      	bne.n	800d206 <USB_EPStartXfer+0x8a8>
 800d1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1e0:	4413      	add	r3, r2
 800d1e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	00da      	lsls	r2, r3, #3
 800d1f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d200:	b29a      	uxth	r2, r3
 800d202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d204:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	895b      	ldrh	r3, [r3, #10]
 800d212:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6959      	ldr	r1, [r3, #20]
 800d222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d226:	b29b      	uxth	r3, r3
 800d228:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d22c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d230:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d234:	6800      	ldr	r0, [r0, #0]
 800d236:	f001 f87d 	bl	800e334 <USB_WritePMA>
 800d23a:	e227      	b.n	800d68c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6a1b      	ldr	r3, [r3, #32]
 800d248:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d26e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d272:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d27a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	441a      	add	r2, r3
 800d290:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d29c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2c8:	4413      	add	r3, r2
 800d2ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	00da      	lsls	r2, r3, #3
 800d2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2dc:	4413      	add	r3, r2
 800d2de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	891b      	ldrh	r3, [r3, #8]
 800d2fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6959      	ldr	r1, [r3, #20]
 800d30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30e:	b29b      	uxth	r3, r3
 800d310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d314:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d318:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d31c:	6800      	ldr	r0, [r0, #0]
 800d31e:	f001 f809 	bl	800e334 <USB_WritePMA>
 800d322:	e1b3      	b.n	800d68c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6a1a      	ldr	r2, [r3, #32]
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d334:	1ad2      	subs	r2, r2, r3
 800d336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 80c6 	beq.w	800d4f6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d36e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	673b      	str	r3, [r7, #112]	@ 0x70
 800d376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	785b      	ldrb	r3, [r3, #1]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d177      	bne.n	800d476 <USB_EPStartXfer+0xb18>
 800d386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3a6:	4413      	add	r3, r2
 800d3a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	00da      	lsls	r2, r3, #3
 800d3b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3d0:	801a      	strh	r2, [r3, #0]
 800d3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3d8:	d921      	bls.n	800d41e <USB_EPStartXfer+0xac0>
 800d3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3de:	095b      	lsrs	r3, r3, #5
 800d3e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e8:	f003 031f 	and.w	r3, r3, #31
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d104      	bne.n	800d3fa <USB_EPStartXfer+0xa9c>
 800d3f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d404:	b29b      	uxth	r3, r3
 800d406:	029b      	lsls	r3, r3, #10
 800d408:	b29b      	uxth	r3, r3
 800d40a:	4313      	orrs	r3, r2
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d416:	b29a      	uxth	r2, r3
 800d418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d41a:	801a      	strh	r2, [r3, #0]
 800d41c:	e050      	b.n	800d4c0 <USB_EPStartXfer+0xb62>
 800d41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10a      	bne.n	800d43c <USB_EPStartXfer+0xade>
 800d426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d434:	b29a      	uxth	r2, r3
 800d436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d438:	801a      	strh	r2, [r3, #0]
 800d43a:	e041      	b.n	800d4c0 <USB_EPStartXfer+0xb62>
 800d43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d440:	085b      	lsrs	r3, r3, #1
 800d442:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d44a:	f003 0301 	and.w	r3, r3, #1
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d004      	beq.n	800d45c <USB_EPStartXfer+0xafe>
 800d452:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d456:	3301      	adds	r3, #1
 800d458:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d45c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b29a      	uxth	r2, r3
 800d462:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d466:	b29b      	uxth	r3, r3
 800d468:	029b      	lsls	r3, r3, #10
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4313      	orrs	r3, r2
 800d46e:	b29a      	uxth	r2, r3
 800d470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d472:	801a      	strh	r2, [r3, #0]
 800d474:	e024      	b.n	800d4c0 <USB_EPStartXfer+0xb62>
 800d476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d47a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	785b      	ldrb	r3, [r3, #1]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d11c      	bne.n	800d4c0 <USB_EPStartXfer+0xb62>
 800d486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d494:	b29b      	uxth	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d49a:	4413      	add	r3, r2
 800d49c:	673b      	str	r3, [r7, #112]	@ 0x70
 800d49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	00da      	lsls	r2, r3, #3
 800d4ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	895b      	ldrh	r3, [r3, #10]
 800d4cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6959      	ldr	r1, [r3, #20]
 800d4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4ee:	6800      	ldr	r0, [r0, #0]
 800d4f0:	f000 ff20 	bl	800e334 <USB_WritePMA>
 800d4f4:	e0ca      	b.n	800d68c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	785b      	ldrb	r3, [r3, #1]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d177      	bne.n	800d5f6 <USB_EPStartXfer+0xc98>
 800d506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d520:	b29b      	uxth	r3, r3
 800d522:	461a      	mov	r2, r3
 800d524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d526:	4413      	add	r3, r2
 800d528:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d52e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	00da      	lsls	r2, r3, #3
 800d538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d53a:	4413      	add	r3, r2
 800d53c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d540:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d542:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	b29b      	uxth	r3, r3
 800d548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d550:	801a      	strh	r2, [r3, #0]
 800d552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d556:	2b3e      	cmp	r3, #62	@ 0x3e
 800d558:	d921      	bls.n	800d59e <USB_EPStartXfer+0xc40>
 800d55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55e:	095b      	lsrs	r3, r3, #5
 800d560:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d568:	f003 031f 	and.w	r3, r3, #31
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d104      	bne.n	800d57a <USB_EPStartXfer+0xc1c>
 800d570:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d574:	3b01      	subs	r3, #1
 800d576:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d57a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d584:	b29b      	uxth	r3, r3
 800d586:	029b      	lsls	r3, r3, #10
 800d588:	b29b      	uxth	r3, r3
 800d58a:	4313      	orrs	r3, r2
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d596:	b29a      	uxth	r2, r3
 800d598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d59a:	801a      	strh	r2, [r3, #0]
 800d59c:	e05c      	b.n	800d658 <USB_EPStartXfer+0xcfa>
 800d59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10a      	bne.n	800d5bc <USB_EPStartXfer+0xc5e>
 800d5a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5b8:	801a      	strh	r2, [r3, #0]
 800d5ba:	e04d      	b.n	800d658 <USB_EPStartXfer+0xcfa>
 800d5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c0:	085b      	lsrs	r3, r3, #1
 800d5c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d004      	beq.n	800d5dc <USB_EPStartXfer+0xc7e>
 800d5d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	029b      	lsls	r3, r3, #10
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5f2:	801a      	strh	r2, [r3, #0]
 800d5f4:	e030      	b.n	800d658 <USB_EPStartXfer+0xcfa>
 800d5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d128      	bne.n	800d658 <USB_EPStartXfer+0xcfa>
 800d606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d622:	b29b      	uxth	r3, r3
 800d624:	461a      	mov	r2, r3
 800d626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d62a:	4413      	add	r3, r2
 800d62c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	00da      	lsls	r2, r3, #3
 800d63e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d642:	4413      	add	r3, r2
 800d644:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d650:	b29a      	uxth	r2, r3
 800d652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d656:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	891b      	ldrh	r3, [r3, #8]
 800d664:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d66c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6959      	ldr	r1, [r3, #20]
 800d674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d678:	b29b      	uxth	r3, r3
 800d67a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d67e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d682:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d686:	6800      	ldr	r0, [r0, #0]
 800d688:	f000 fe54 	bl	800e334 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6b2:	817b      	strh	r3, [r7, #10]
 800d6b4:	897b      	ldrh	r3, [r7, #10]
 800d6b6:	f083 0310 	eor.w	r3, r3, #16
 800d6ba:	817b      	strh	r3, [r7, #10]
 800d6bc:	897b      	ldrh	r3, [r7, #10]
 800d6be:	f083 0320 	eor.w	r3, r3, #32
 800d6c2:	817b      	strh	r3, [r7, #10]
 800d6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	441a      	add	r2, r3
 800d6de:	897b      	ldrh	r3, [r7, #10]
 800d6e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	8013      	strh	r3, [r2, #0]
 800d6f4:	f000 bcde 	b.w	800e0b4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	7b1b      	ldrb	r3, [r3, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f040 80bb 	bne.w	800d880 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	429a      	cmp	r2, r3
 800d724:	d917      	bls.n	800d756 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	699a      	ldr	r2, [r3, #24]
 800d742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d746:	1ad2      	subs	r2, r2, r3
 800d748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	619a      	str	r2, [r3, #24]
 800d754:	e00e      	b.n	800d774 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2200      	movs	r2, #0
 800d772:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d790:	b29b      	uxth	r3, r3
 800d792:	461a      	mov	r2, r3
 800d794:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d798:	4413      	add	r3, r2
 800d79a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	00da      	lsls	r2, r3, #3
 800d7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d7ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7cc:	801a      	strh	r2, [r3, #0]
 800d7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7d4:	d924      	bls.n	800d820 <USB_EPStartXfer+0xec2>
 800d7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7da:	095b      	lsrs	r3, r3, #5
 800d7dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e4:	f003 031f 	and.w	r3, r3, #31
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d104      	bne.n	800d7f6 <USB_EPStartXfer+0xe98>
 800d7ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d802:	b29b      	uxth	r3, r3
 800d804:	029b      	lsls	r3, r3, #10
 800d806:	b29b      	uxth	r3, r3
 800d808:	4313      	orrs	r3, r2
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d814:	b29a      	uxth	r2, r3
 800d816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d81a:	801a      	strh	r2, [r3, #0]
 800d81c:	f000 bc10 	b.w	800e040 <USB_EPStartXfer+0x16e2>
 800d820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10c      	bne.n	800d842 <USB_EPStartXfer+0xee4>
 800d828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d82c:	881b      	ldrh	r3, [r3, #0]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d838:	b29a      	uxth	r2, r3
 800d83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d83e:	801a      	strh	r2, [r3, #0]
 800d840:	e3fe      	b.n	800e040 <USB_EPStartXfer+0x16e2>
 800d842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d846:	085b      	lsrs	r3, r3, #1
 800d848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <USB_EPStartXfer+0xf04>
 800d858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d85c:	3301      	adds	r3, #1
 800d85e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	b29a      	uxth	r2, r3
 800d86a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d86e:	b29b      	uxth	r3, r3
 800d870:	029b      	lsls	r3, r3, #10
 800d872:	b29b      	uxth	r3, r3
 800d874:	4313      	orrs	r3, r2
 800d876:	b29a      	uxth	r2, r3
 800d878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d87c:	801a      	strh	r2, [r3, #0]
 800d87e:	e3df      	b.n	800e040 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	78db      	ldrb	r3, [r3, #3]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	f040 8218 	bne.w	800dcc2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	785b      	ldrb	r3, [r3, #1]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f040 809d 	bne.w	800d9de <USB_EPStartXfer+0x1080>
 800d8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	00da      	lsls	r2, r3, #3
 800d8dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8e0:	4413      	add	r3, r2
 800d8e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d8ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8fc:	801a      	strh	r2, [r3, #0]
 800d8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d90c:	d92b      	bls.n	800d966 <USB_EPStartXfer+0x1008>
 800d90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	095b      	lsrs	r3, r3, #5
 800d91c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	f003 031f 	and.w	r3, r3, #31
 800d930:	2b00      	cmp	r3, #0
 800d932:	d104      	bne.n	800d93e <USB_EPStartXfer+0xfe0>
 800d934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d938:	3b01      	subs	r3, #1
 800d93a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d93e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	b29a      	uxth	r2, r3
 800d946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	029b      	lsls	r3, r3, #10
 800d94e:	b29b      	uxth	r3, r3
 800d950:	4313      	orrs	r3, r2
 800d952:	b29b      	uxth	r3, r3
 800d954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d962:	801a      	strh	r2, [r3, #0]
 800d964:	e070      	b.n	800da48 <USB_EPStartXfer+0x10ea>
 800d966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10c      	bne.n	800d990 <USB_EPStartXfer+0x1032>
 800d976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d986:	b29a      	uxth	r2, r3
 800d988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d98c:	801a      	strh	r2, [r3, #0]
 800d98e:	e05b      	b.n	800da48 <USB_EPStartXfer+0x10ea>
 800d990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	085b      	lsrs	r3, r3, #1
 800d99e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d004      	beq.n	800d9c0 <USB_EPStartXfer+0x1062>
 800d9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d9c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	029b      	lsls	r3, r3, #10
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9da:	801a      	strh	r2, [r3, #0]
 800d9dc:	e034      	b.n	800da48 <USB_EPStartXfer+0x10ea>
 800d9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	785b      	ldrb	r3, [r3, #1]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d12c      	bne.n	800da48 <USB_EPStartXfer+0x10ea>
 800d9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da12:	4413      	add	r3, r2
 800da14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	00da      	lsls	r2, r3, #3
 800da26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da2a:	4413      	add	r3, r2
 800da2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	b29a      	uxth	r2, r3
 800da42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800da46:	801a      	strh	r2, [r3, #0]
 800da48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	785b      	ldrb	r3, [r3, #1]
 800da62:	2b00      	cmp	r3, #0
 800da64:	f040 809d 	bne.w	800dba2 <USB_EPStartXfer+0x1244>
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da84:	b29b      	uxth	r3, r3
 800da86:	461a      	mov	r2, r3
 800da88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da8c:	4413      	add	r3, r2
 800da8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	00da      	lsls	r2, r3, #3
 800daa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800daa4:	4413      	add	r3, r2
 800daa6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800daaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800daae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800daba:	b29a      	uxth	r2, r3
 800dabc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dac0:	801a      	strh	r2, [r3, #0]
 800dac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	2b3e      	cmp	r3, #62	@ 0x3e
 800dad0:	d92b      	bls.n	800db2a <USB_EPStartXfer+0x11cc>
 800dad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	095b      	lsrs	r3, r3, #5
 800dae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	f003 031f 	and.w	r3, r3, #31
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <USB_EPStartXfer+0x11a4>
 800daf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dafc:	3b01      	subs	r3, #1
 800dafe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	b29a      	uxth	r2, r3
 800db0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db0e:	b29b      	uxth	r3, r3
 800db10:	029b      	lsls	r3, r3, #10
 800db12:	b29b      	uxth	r3, r3
 800db14:	4313      	orrs	r3, r2
 800db16:	b29b      	uxth	r3, r3
 800db18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db20:	b29a      	uxth	r2, r3
 800db22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db26:	801a      	strh	r2, [r3, #0]
 800db28:	e069      	b.n	800dbfe <USB_EPStartXfer+0x12a0>
 800db2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10c      	bne.n	800db54 <USB_EPStartXfer+0x11f6>
 800db3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	b29b      	uxth	r3, r3
 800db42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db50:	801a      	strh	r2, [r3, #0]
 800db52:	e054      	b.n	800dbfe <USB_EPStartXfer+0x12a0>
 800db54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	085b      	lsrs	r3, r3, #1
 800db62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d004      	beq.n	800db84 <USB_EPStartXfer+0x1226>
 800db7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db7e:	3301      	adds	r3, #1
 800db80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db90:	b29b      	uxth	r3, r3
 800db92:	029b      	lsls	r3, r3, #10
 800db94:	b29b      	uxth	r3, r3
 800db96:	4313      	orrs	r3, r2
 800db98:	b29a      	uxth	r2, r3
 800db9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db9e:	801a      	strh	r2, [r3, #0]
 800dba0:	e02d      	b.n	800dbfe <USB_EPStartXfer+0x12a0>
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	785b      	ldrb	r3, [r3, #1]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d125      	bne.n	800dbfe <USB_EPStartXfer+0x12a0>
 800dbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbc8:	4413      	add	r3, r2
 800dbca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dbce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	00da      	lsls	r2, r3, #3
 800dbdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dbea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dbfc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dbfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	69db      	ldr	r3, [r3, #28]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8218 	beq.w	800e040 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <USB_EPStartXfer+0x12ea>
 800dc3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10d      	bne.n	800dc64 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 81f5 	bne.w	800e040 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f040 81ee 	bne.w	800e040 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dc64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4413      	add	r3, r2
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc8a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	441a      	add	r2, r3
 800dca8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dcac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	8013      	strh	r3, [r2, #0]
 800dcc0:	e1be      	b.n	800e040 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	78db      	ldrb	r3, [r3, #3]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	f040 81b4 	bne.w	800e03c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	699a      	ldr	r2, [r3, #24]
 800dce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d917      	bls.n	800dd20 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800dcf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dd00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	699a      	ldr	r2, [r3, #24]
 800dd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd10:	1ad2      	subs	r2, r2, r3
 800dd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	619a      	str	r2, [r3, #24]
 800dd1e:	e00e      	b.n	800dd3e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800dd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f040 8085 	bne.w	800de5a <USB_EPStartXfer+0x14fc>
 800dd50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd74:	4413      	add	r3, r2
 800dd76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	00da      	lsls	r2, r3, #3
 800dd88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dda8:	801a      	strh	r2, [r3, #0]
 800ddaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddae:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddb0:	d923      	bls.n	800ddfa <USB_EPStartXfer+0x149c>
 800ddb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb6:	095b      	lsrs	r3, r3, #5
 800ddb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc0:	f003 031f 	and.w	r3, r3, #31
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <USB_EPStartXfer+0x1474>
 800ddc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	029b      	lsls	r3, r3, #10
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	4313      	orrs	r3, r2
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddf6:	801a      	strh	r2, [r3, #0]
 800ddf8:	e060      	b.n	800debc <USB_EPStartXfer+0x155e>
 800ddfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10c      	bne.n	800de1c <USB_EPStartXfer+0x14be>
 800de02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de12:	b29a      	uxth	r2, r3
 800de14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de18:	801a      	strh	r2, [r3, #0]
 800de1a:	e04f      	b.n	800debc <USB_EPStartXfer+0x155e>
 800de1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de20:	085b      	lsrs	r3, r3, #1
 800de22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d004      	beq.n	800de3c <USB_EPStartXfer+0x14de>
 800de32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de36:	3301      	adds	r3, #1
 800de38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	b29a      	uxth	r2, r3
 800de44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de48:	b29b      	uxth	r3, r3
 800de4a:	029b      	lsls	r3, r3, #10
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	4313      	orrs	r3, r2
 800de50:	b29a      	uxth	r2, r3
 800de52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de56:	801a      	strh	r2, [r3, #0]
 800de58:	e030      	b.n	800debc <USB_EPStartXfer+0x155e>
 800de5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	785b      	ldrb	r3, [r3, #1]
 800de66:	2b01      	cmp	r3, #1
 800de68:	d128      	bne.n	800debc <USB_EPStartXfer+0x155e>
 800de6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de86:	b29b      	uxth	r3, r3
 800de88:	461a      	mov	r2, r3
 800de8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de8e:	4413      	add	r3, r2
 800de90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	00da      	lsls	r2, r3, #3
 800dea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dea6:	4413      	add	r3, r2
 800dea8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800deac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800deb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800deca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	785b      	ldrb	r3, [r3, #1]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f040 8085 	bne.w	800dfe6 <USB_EPStartXfer+0x1688>
 800dedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800deea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800def8:	b29b      	uxth	r3, r3
 800defa:	461a      	mov	r2, r3
 800defc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800df00:	4413      	add	r3, r2
 800df02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800df06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	00da      	lsls	r2, r3, #3
 800df14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800df18:	4413      	add	r3, r2
 800df1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df2e:	b29a      	uxth	r2, r3
 800df30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df34:	801a      	strh	r2, [r3, #0]
 800df36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800df3c:	d923      	bls.n	800df86 <USB_EPStartXfer+0x1628>
 800df3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df42:	095b      	lsrs	r3, r3, #5
 800df44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df4c:	f003 031f 	and.w	r3, r3, #31
 800df50:	2b00      	cmp	r3, #0
 800df52:	d104      	bne.n	800df5e <USB_EPStartXfer+0x1600>
 800df54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df58:	3b01      	subs	r3, #1
 800df5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	b29a      	uxth	r2, r3
 800df66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	029b      	lsls	r3, r3, #10
 800df6e:	b29b      	uxth	r3, r3
 800df70:	4313      	orrs	r3, r2
 800df72:	b29b      	uxth	r3, r3
 800df74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df82:	801a      	strh	r2, [r3, #0]
 800df84:	e05c      	b.n	800e040 <USB_EPStartXfer+0x16e2>
 800df86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10c      	bne.n	800dfa8 <USB_EPStartXfer+0x164a>
 800df8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	b29b      	uxth	r3, r3
 800df96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfa4:	801a      	strh	r2, [r3, #0]
 800dfa6:	e04b      	b.n	800e040 <USB_EPStartXfer+0x16e2>
 800dfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfac:	085b      	lsrs	r3, r3, #1
 800dfae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d004      	beq.n	800dfc8 <USB_EPStartXfer+0x166a>
 800dfbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	029b      	lsls	r3, r3, #10
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfe2:	801a      	strh	r2, [r3, #0]
 800dfe4:	e02c      	b.n	800e040 <USB_EPStartXfer+0x16e2>
 800dfe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	785b      	ldrb	r3, [r3, #1]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d124      	bne.n	800e040 <USB_EPStartXfer+0x16e2>
 800dff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e004:	b29b      	uxth	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e00c:	4413      	add	r3, r2
 800e00e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	00da      	lsls	r2, r3, #3
 800e020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e024:	4413      	add	r3, r2
 800e026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e02a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e032:	b29a      	uxth	r2, r3
 800e034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e038:	801a      	strh	r2, [r3, #0]
 800e03a:	e001      	b.n	800e040 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e03a      	b.n	800e0b6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	881b      	ldrh	r3, [r3, #0]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e066:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e06a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e06e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e072:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e076:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e07a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e07e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	441a      	add	r2, r3
 800e09c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e0a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	785b      	ldrb	r3, [r3, #1]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d020      	beq.n	800e114 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0e8:	81bb      	strh	r3, [r7, #12]
 800e0ea:	89bb      	ldrh	r3, [r7, #12]
 800e0ec:	f083 0310 	eor.w	r3, r3, #16
 800e0f0:	81bb      	strh	r3, [r7, #12]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	441a      	add	r2, r3
 800e0fc:	89bb      	ldrh	r3, [r7, #12]
 800e0fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e10e:	b29b      	uxth	r3, r3
 800e110:	8013      	strh	r3, [r2, #0]
 800e112:	e01f      	b.n	800e154 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	881b      	ldrh	r3, [r3, #0]
 800e120:	b29b      	uxth	r3, r3
 800e122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e12a:	81fb      	strh	r3, [r7, #14]
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e132:	81fb      	strh	r3, [r7, #14]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	441a      	add	r2, r3
 800e13e:	89fb      	ldrh	r3, [r7, #14]
 800e140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e150:	b29b      	uxth	r3, r3
 800e152:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e162:	b480      	push	{r7}
 800e164:	b087      	sub	sp, #28
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	7b1b      	ldrb	r3, [r3, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	f040 809d 	bne.w	800e2b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	785b      	ldrb	r3, [r3, #1]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d04c      	beq.n	800e218 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4413      	add	r3, r2
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	823b      	strh	r3, [r7, #16]
 800e18c:	8a3b      	ldrh	r3, [r7, #16]
 800e18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e192:	2b00      	cmp	r3, #0
 800e194:	d01b      	beq.n	800e1ce <USB_EPClearStall+0x6c>
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1ac:	81fb      	strh	r3, [r7, #14]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	441a      	add	r2, r3
 800e1b8:	89fb      	ldrh	r3, [r7, #14]
 800e1ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	78db      	ldrb	r3, [r3, #3]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d06c      	beq.n	800e2b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1ec:	81bb      	strh	r3, [r7, #12]
 800e1ee:	89bb      	ldrh	r3, [r7, #12]
 800e1f0:	f083 0320 	eor.w	r3, r3, #32
 800e1f4:	81bb      	strh	r3, [r7, #12]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	441a      	add	r2, r3
 800e200:	89bb      	ldrh	r3, [r7, #12]
 800e202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e20a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e212:	b29b      	uxth	r3, r3
 800e214:	8013      	strh	r3, [r2, #0]
 800e216:	e04b      	b.n	800e2b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	82fb      	strh	r3, [r7, #22]
 800e226:	8afb      	ldrh	r3, [r7, #22]
 800e228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d01b      	beq.n	800e268 <USB_EPClearStall+0x106>
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e246:	82bb      	strh	r3, [r7, #20]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	441a      	add	r2, r3
 800e252:	8abb      	ldrh	r3, [r7, #20]
 800e254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e25c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e264:	b29b      	uxth	r3, r3
 800e266:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	b29b      	uxth	r3, r3
 800e276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e27e:	827b      	strh	r3, [r7, #18]
 800e280:	8a7b      	ldrh	r3, [r7, #18]
 800e282:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e286:	827b      	strh	r3, [r7, #18]
 800e288:	8a7b      	ldrh	r3, [r7, #18]
 800e28a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e28e:	827b      	strh	r3, [r7, #18]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	441a      	add	r2, r3
 800e29a:	8a7b      	ldrh	r3, [r7, #18]
 800e29c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	371c      	adds	r7, #28
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e2be:	b480      	push	{r7}
 800e2c0:	b083      	sub	sp, #12
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e2ca:	78fb      	ldrb	r3, [r7, #3]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d103      	bne.n	800e2d8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2280      	movs	r2, #128	@ 0x80
 800e2d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e322:	b29b      	uxth	r3, r3
 800e324:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e326:	68fb      	ldr	r3, [r7, #12]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e334:	b480      	push	{r7}
 800e336:	b08b      	sub	sp, #44	@ 0x2c
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	4611      	mov	r1, r2
 800e340:	461a      	mov	r2, r3
 800e342:	460b      	mov	r3, r1
 800e344:	80fb      	strh	r3, [r7, #6]
 800e346:	4613      	mov	r3, r2
 800e348:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e34a:	88bb      	ldrh	r3, [r7, #4]
 800e34c:	3301      	adds	r3, #1
 800e34e:	085b      	lsrs	r3, r3, #1
 800e350:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e35a:	88fa      	ldrh	r2, [r7, #6]
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	4413      	add	r3, r2
 800e360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e364:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	627b      	str	r3, [r7, #36]	@ 0x24
 800e36a:	e01b      	b.n	800e3a4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	3301      	adds	r3, #1
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	021b      	lsls	r3, r3, #8
 800e37a:	b21a      	sxth	r2, r3
 800e37c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e380:	4313      	orrs	r3, r2
 800e382:	b21b      	sxth	r3, r3
 800e384:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	8a7a      	ldrh	r2, [r7, #18]
 800e38a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	3302      	adds	r3, #2
 800e390:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	3301      	adds	r3, #1
 800e396:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	3301      	adds	r3, #1
 800e39c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1e0      	bne.n	800e36c <USB_WritePMA+0x38>
  }
}
 800e3aa:	bf00      	nop
 800e3ac:	bf00      	nop
 800e3ae:	372c      	adds	r7, #44	@ 0x2c
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b08b      	sub	sp, #44	@ 0x2c
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	80fb      	strh	r3, [r7, #6]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e3ce:	88bb      	ldrh	r3, [r7, #4]
 800e3d0:	085b      	lsrs	r3, r3, #1
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e3de:	88fa      	ldrh	r2, [r7, #6]
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3ee:	e018      	b.n	800e422 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e3f0:	6a3b      	ldr	r3, [r7, #32]
 800e3f2:	881b      	ldrh	r3, [r3, #0]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	3302      	adds	r3, #2
 800e3fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	b2da      	uxtb	r2, r3
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	3301      	adds	r3, #1
 800e40a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	0a1b      	lsrs	r3, r3, #8
 800e410:	b2da      	uxtb	r2, r3
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	3301      	adds	r3, #1
 800e41a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41e:	3b01      	subs	r3, #1
 800e420:	627b      	str	r3, [r7, #36]	@ 0x24
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1e3      	bne.n	800e3f0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e428:	88bb      	ldrh	r3, [r7, #4]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d007      	beq.n	800e444 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	b2da      	uxtb	r2, r3
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	701a      	strb	r2, [r3, #0]
  }
}
 800e444:	bf00      	nop
 800e446:	372c      	adds	r7, #44	@ 0x2c
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e45c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e460:	f007 fc68 	bl	8015d34 <USBD_static_malloc>
 800e464:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d109      	bne.n	800e480 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	32b0      	adds	r2, #176	@ 0xb0
 800e476:	2100      	movs	r1, #0
 800e478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e47c:	2302      	movs	r3, #2
 800e47e:	e0d4      	b.n	800e62a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e480:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e484:	2100      	movs	r1, #0
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f008 f964 	bl	8016754 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	32b0      	adds	r2, #176	@ 0xb0
 800e496:	68f9      	ldr	r1, [r7, #12]
 800e498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	32b0      	adds	r2, #176	@ 0xb0
 800e4a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	7c1b      	ldrb	r3, [r3, #16]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d138      	bne.n	800e52a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e4b8:	4b5e      	ldr	r3, [pc, #376]	@ (800e634 <USBD_CDC_Init+0x1e4>)
 800e4ba:	7819      	ldrb	r1, [r3, #0]
 800e4bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f007 fadd 	bl	8015a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e4c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e634 <USBD_CDC_Init+0x1e4>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	f003 020f 	and.w	r2, r3, #15
 800e4d0:	6879      	ldr	r1, [r7, #4]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	440b      	add	r3, r1
 800e4dc:	3324      	adds	r3, #36	@ 0x24
 800e4de:	2201      	movs	r2, #1
 800e4e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e4e2:	4b55      	ldr	r3, [pc, #340]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e4e4:	7819      	ldrb	r1, [r3, #0]
 800e4e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f007 fac8 	bl	8015a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e4f2:	4b51      	ldr	r3, [pc, #324]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f003 020f 	and.w	r2, r3, #15
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	440b      	add	r3, r1
 800e506:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e50a:	2201      	movs	r2, #1
 800e50c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e50e:	4b4b      	ldr	r3, [pc, #300]	@ (800e63c <USBD_CDC_Init+0x1ec>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f003 020f 	and.w	r2, r3, #15
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	440b      	add	r3, r1
 800e522:	3326      	adds	r3, #38	@ 0x26
 800e524:	2210      	movs	r2, #16
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	e035      	b.n	800e596 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e52a:	4b42      	ldr	r3, [pc, #264]	@ (800e634 <USBD_CDC_Init+0x1e4>)
 800e52c:	7819      	ldrb	r1, [r3, #0]
 800e52e:	2340      	movs	r3, #64	@ 0x40
 800e530:	2202      	movs	r2, #2
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f007 faa5 	bl	8015a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e538:	4b3e      	ldr	r3, [pc, #248]	@ (800e634 <USBD_CDC_Init+0x1e4>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	f003 020f 	and.w	r2, r3, #15
 800e540:	6879      	ldr	r1, [r7, #4]
 800e542:	4613      	mov	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	440b      	add	r3, r1
 800e54c:	3324      	adds	r3, #36	@ 0x24
 800e54e:	2201      	movs	r2, #1
 800e550:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e552:	4b39      	ldr	r3, [pc, #228]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e554:	7819      	ldrb	r1, [r3, #0]
 800e556:	2340      	movs	r3, #64	@ 0x40
 800e558:	2202      	movs	r2, #2
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f007 fa91 	bl	8015a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e560:	4b35      	ldr	r3, [pc, #212]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 020f 	and.w	r2, r3, #15
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	4613      	mov	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	440b      	add	r3, r1
 800e574:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e578:	2201      	movs	r2, #1
 800e57a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e57c:	4b2f      	ldr	r3, [pc, #188]	@ (800e63c <USBD_CDC_Init+0x1ec>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 020f 	and.w	r2, r3, #15
 800e584:	6879      	ldr	r1, [r7, #4]
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	440b      	add	r3, r1
 800e590:	3326      	adds	r3, #38	@ 0x26
 800e592:	2210      	movs	r2, #16
 800e594:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e596:	4b29      	ldr	r3, [pc, #164]	@ (800e63c <USBD_CDC_Init+0x1ec>)
 800e598:	7819      	ldrb	r1, [r3, #0]
 800e59a:	2308      	movs	r3, #8
 800e59c:	2203      	movs	r2, #3
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f007 fa6f 	bl	8015a82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e5a4:	4b25      	ldr	r3, [pc, #148]	@ (800e63c <USBD_CDC_Init+0x1ec>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	f003 020f 	and.w	r2, r3, #15
 800e5ac:	6879      	ldr	r1, [r7, #4]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	440b      	add	r3, r1
 800e5b8:	3324      	adds	r3, #36	@ 0x24
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	33b0      	adds	r3, #176	@ 0xb0
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	e018      	b.n	800e62a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7c1b      	ldrb	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10a      	bne.n	800e616 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e600:	4b0d      	ldr	r3, [pc, #52]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e602:	7819      	ldrb	r1, [r3, #0]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e60a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f007 fb26 	bl	8015c60 <USBD_LL_PrepareReceive>
 800e614:	e008      	b.n	800e628 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e616:	4b08      	ldr	r3, [pc, #32]	@ (800e638 <USBD_CDC_Init+0x1e8>)
 800e618:	7819      	ldrb	r1, [r3, #0]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e620:	2340      	movs	r3, #64	@ 0x40
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f007 fb1c 	bl	8015c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	2000009f 	.word	0x2000009f
 800e638:	200000a0 	.word	0x200000a0
 800e63c:	200000a1 	.word	0x200000a1

0800e640 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e64c:	4b3a      	ldr	r3, [pc, #232]	@ (800e738 <USBD_CDC_DeInit+0xf8>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	4619      	mov	r1, r3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f007 fa3b 	bl	8015ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e658:	4b37      	ldr	r3, [pc, #220]	@ (800e738 <USBD_CDC_DeInit+0xf8>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	f003 020f 	and.w	r2, r3, #15
 800e660:	6879      	ldr	r1, [r7, #4]
 800e662:	4613      	mov	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	4413      	add	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	440b      	add	r3, r1
 800e66c:	3324      	adds	r3, #36	@ 0x24
 800e66e:	2200      	movs	r2, #0
 800e670:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e672:	4b32      	ldr	r3, [pc, #200]	@ (800e73c <USBD_CDC_DeInit+0xfc>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f007 fa28 	bl	8015ace <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e67e:	4b2f      	ldr	r3, [pc, #188]	@ (800e73c <USBD_CDC_DeInit+0xfc>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	f003 020f 	and.w	r2, r3, #15
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	440b      	add	r3, r1
 800e692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e696:	2200      	movs	r2, #0
 800e698:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e69a:	4b29      	ldr	r3, [pc, #164]	@ (800e740 <USBD_CDC_DeInit+0x100>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f007 fa14 	bl	8015ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e6a6:	4b26      	ldr	r3, [pc, #152]	@ (800e740 <USBD_CDC_DeInit+0x100>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 020f 	and.w	r2, r3, #15
 800e6ae:	6879      	ldr	r1, [r7, #4]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	440b      	add	r3, r1
 800e6ba:	3324      	adds	r3, #36	@ 0x24
 800e6bc:	2200      	movs	r2, #0
 800e6be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e6c0:	4b1f      	ldr	r3, [pc, #124]	@ (800e740 <USBD_CDC_DeInit+0x100>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	f003 020f 	and.w	r2, r3, #15
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	440b      	add	r3, r1
 800e6d4:	3326      	adds	r3, #38	@ 0x26
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	32b0      	adds	r2, #176	@ 0xb0
 800e6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01f      	beq.n	800e72c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	33b0      	adds	r3, #176	@ 0xb0
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	32b0      	adds	r2, #176	@ 0xb0
 800e70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e70e:	4618      	mov	r0, r3
 800e710:	f007 fb1e 	bl	8015d50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	32b0      	adds	r2, #176	@ 0xb0
 800e71e:	2100      	movs	r1, #0
 800e720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	2000009f 	.word	0x2000009f
 800e73c:	200000a0 	.word	0x200000a0
 800e740:	200000a1 	.word	0x200000a1

0800e744 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	32b0      	adds	r2, #176	@ 0xb0
 800e758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e75c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e762:	2300      	movs	r3, #0
 800e764:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	e0bf      	b.n	800e8f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d050      	beq.n	800e822 <USBD_CDC_Setup+0xde>
 800e780:	2b20      	cmp	r3, #32
 800e782:	f040 80af 	bne.w	800e8e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	88db      	ldrh	r3, [r3, #6]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d03a      	beq.n	800e804 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	b25b      	sxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	da1b      	bge.n	800e7d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	33b0      	adds	r3, #176	@ 0xb0
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e7ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	88d2      	ldrh	r2, [r2, #6]
 800e7b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	88db      	ldrh	r3, [r3, #6]
 800e7ba:	2b07      	cmp	r3, #7
 800e7bc:	bf28      	it	cs
 800e7be:	2307      	movcs	r3, #7
 800e7c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	89fa      	ldrh	r2, [r7, #14]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f001 fd1f 	bl	801020c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e7ce:	e090      	b.n	800e8f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	785a      	ldrb	r2, [r3, #1]
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	88db      	ldrh	r3, [r3, #6]
 800e7de:	2b3f      	cmp	r3, #63	@ 0x3f
 800e7e0:	d803      	bhi.n	800e7ea <USBD_CDC_Setup+0xa6>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	88db      	ldrh	r3, [r3, #6]
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	e000      	b.n	800e7ec <USBD_CDC_Setup+0xa8>
 800e7ea:	2240      	movs	r2, #64	@ 0x40
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e7f2:	6939      	ldr	r1, [r7, #16]
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f001 fd31 	bl	8010264 <USBD_CtlPrepareRx>
      break;
 800e802:	e076      	b.n	800e8f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	33b0      	adds	r3, #176	@ 0xb0
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	7850      	ldrb	r0, [r2, #1]
 800e81a:	2200      	movs	r2, #0
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	4798      	blx	r3
      break;
 800e820:	e067      	b.n	800e8f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	785b      	ldrb	r3, [r3, #1]
 800e826:	2b0b      	cmp	r3, #11
 800e828:	d851      	bhi.n	800e8ce <USBD_CDC_Setup+0x18a>
 800e82a:	a201      	add	r2, pc, #4	@ (adr r2, 800e830 <USBD_CDC_Setup+0xec>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e861 	.word	0x0800e861
 800e834:	0800e8dd 	.word	0x0800e8dd
 800e838:	0800e8cf 	.word	0x0800e8cf
 800e83c:	0800e8cf 	.word	0x0800e8cf
 800e840:	0800e8cf 	.word	0x0800e8cf
 800e844:	0800e8cf 	.word	0x0800e8cf
 800e848:	0800e8cf 	.word	0x0800e8cf
 800e84c:	0800e8cf 	.word	0x0800e8cf
 800e850:	0800e8cf 	.word	0x0800e8cf
 800e854:	0800e8cf 	.word	0x0800e8cf
 800e858:	0800e88b 	.word	0x0800e88b
 800e85c:	0800e8b5 	.word	0x0800e8b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e866:	b2db      	uxtb	r3, r3
 800e868:	2b03      	cmp	r3, #3
 800e86a:	d107      	bne.n	800e87c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e86c:	f107 030a 	add.w	r3, r7, #10
 800e870:	2202      	movs	r2, #2
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f001 fcc9 	bl	801020c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e87a:	e032      	b.n	800e8e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f001 fc53 	bl	801012a <USBD_CtlError>
            ret = USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	75fb      	strb	r3, [r7, #23]
          break;
 800e888:	e02b      	b.n	800e8e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b03      	cmp	r3, #3
 800e894:	d107      	bne.n	800e8a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e896:	f107 030d 	add.w	r3, r7, #13
 800e89a:	2201      	movs	r2, #1
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f001 fcb4 	bl	801020c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8a4:	e01d      	b.n	800e8e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 fc3e 	bl	801012a <USBD_CtlError>
            ret = USBD_FAIL;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	75fb      	strb	r3, [r7, #23]
          break;
 800e8b2:	e016      	b.n	800e8e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d00f      	beq.n	800e8e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f001 fc31 	bl	801012a <USBD_CtlError>
            ret = USBD_FAIL;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e8cc:	e008      	b.n	800e8e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f001 fc2a 	bl	801012a <USBD_CtlError>
          ret = USBD_FAIL;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e8da:	e002      	b.n	800e8e2 <USBD_CDC_Setup+0x19e>
          break;
 800e8dc:	bf00      	nop
 800e8de:	e008      	b.n	800e8f2 <USBD_CDC_Setup+0x1ae>
          break;
 800e8e0:	bf00      	nop
      }
      break;
 800e8e2:	e006      	b.n	800e8f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f001 fc1f 	bl	801012a <USBD_CtlError>
      ret = USBD_FAIL;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	75fb      	strb	r3, [r7, #23]
      break;
 800e8f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e90e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	32b0      	adds	r2, #176	@ 0xb0
 800e91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d101      	bne.n	800e926 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e922:	2303      	movs	r3, #3
 800e924:	e065      	b.n	800e9f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	32b0      	adds	r2, #176	@ 0xb0
 800e930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e934:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e936:	78fb      	ldrb	r3, [r7, #3]
 800e938:	f003 020f 	and.w	r2, r3, #15
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	4613      	mov	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	440b      	add	r3, r1
 800e948:	3318      	adds	r3, #24
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d02f      	beq.n	800e9b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	f003 020f 	and.w	r2, r3, #15
 800e956:	6879      	ldr	r1, [r7, #4]
 800e958:	4613      	mov	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	440b      	add	r3, r1
 800e962:	3318      	adds	r3, #24
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	78fb      	ldrb	r3, [r7, #3]
 800e968:	f003 010f 	and.w	r1, r3, #15
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	460b      	mov	r3, r1
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	440b      	add	r3, r1
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	4403      	add	r3, r0
 800e978:	3320      	adds	r3, #32
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e980:	fb01 f303 	mul.w	r3, r1, r3
 800e984:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e986:	2b00      	cmp	r3, #0
 800e988:	d112      	bne.n	800e9b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e98a:	78fb      	ldrb	r3, [r7, #3]
 800e98c:	f003 020f 	and.w	r2, r3, #15
 800e990:	6879      	ldr	r1, [r7, #4]
 800e992:	4613      	mov	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	440b      	add	r3, r1
 800e99c:	3318      	adds	r3, #24
 800e99e:	2200      	movs	r2, #0
 800e9a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e9a2:	78f9      	ldrb	r1, [r7, #3]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f007 f938 	bl	8015c1e <USBD_LL_Transmit>
 800e9ae:	e01f      	b.n	800e9f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	33b0      	adds	r3, #176	@ 0xb0
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4413      	add	r3, r2
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	691b      	ldr	r3, [r3, #16]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d010      	beq.n	800e9f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	33b0      	adds	r3, #176	@ 0xb0
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	32b0      	adds	r2, #176	@ 0xb0
 800ea10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	32b0      	adds	r2, #176	@ 0xb0
 800ea20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d101      	bne.n	800ea2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	e01a      	b.n	800ea62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea2c:	78fb      	ldrb	r3, [r7, #3]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f007 f936 	bl	8015ca2 <USBD_LL_GetRxDataSize>
 800ea36:	4602      	mov	r2, r0
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	33b0      	adds	r3, #176	@ 0xb0
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	32b0      	adds	r2, #176	@ 0xb0
 800ea7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e024      	b.n	800ead6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	33b0      	adds	r3, #176	@ 0xb0
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4413      	add	r3, r2
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d019      	beq.n	800ead4 <USBD_CDC_EP0_RxReady+0x6a>
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800eaa6:	2bff      	cmp	r3, #255	@ 0xff
 800eaa8:	d014      	beq.n	800ead4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	33b0      	adds	r3, #176	@ 0xb0
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800eac2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eaca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	22ff      	movs	r2, #255	@ 0xff
 800ead0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eae8:	2182      	movs	r1, #130	@ 0x82
 800eaea:	4818      	ldr	r0, [pc, #96]	@ (800eb4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eaec:	f000 fcbd 	bl	800f46a <USBD_GetEpDesc>
 800eaf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eaf2:	2101      	movs	r1, #1
 800eaf4:	4815      	ldr	r0, [pc, #84]	@ (800eb4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eaf6:	f000 fcb8 	bl	800f46a <USBD_GetEpDesc>
 800eafa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eafc:	2181      	movs	r1, #129	@ 0x81
 800eafe:	4813      	ldr	r0, [pc, #76]	@ (800eb4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eb00:	f000 fcb3 	bl	800f46a <USBD_GetEpDesc>
 800eb04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2210      	movs	r2, #16
 800eb10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d006      	beq.n	800eb26 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb20:	711a      	strb	r2, [r3, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d006      	beq.n	800eb3a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb34:	711a      	strb	r2, [r3, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2243      	movs	r2, #67	@ 0x43
 800eb3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb40:	4b02      	ldr	r3, [pc, #8]	@ (800eb4c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	2000005c 	.word	0x2000005c

0800eb50 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb58:	2182      	movs	r1, #130	@ 0x82
 800eb5a:	4818      	ldr	r0, [pc, #96]	@ (800ebbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb5c:	f000 fc85 	bl	800f46a <USBD_GetEpDesc>
 800eb60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eb62:	2101      	movs	r1, #1
 800eb64:	4815      	ldr	r0, [pc, #84]	@ (800ebbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb66:	f000 fc80 	bl	800f46a <USBD_GetEpDesc>
 800eb6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eb6c:	2181      	movs	r1, #129	@ 0x81
 800eb6e:	4813      	ldr	r0, [pc, #76]	@ (800ebbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb70:	f000 fc7b 	bl	800f46a <USBD_GetEpDesc>
 800eb74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d002      	beq.n	800eb82 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	2210      	movs	r2, #16
 800eb80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d006      	beq.n	800eb96 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	711a      	strb	r2, [r3, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f042 0202 	orr.w	r2, r2, #2
 800eb94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d006      	beq.n	800ebaa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	711a      	strb	r2, [r3, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f042 0202 	orr.w	r2, r2, #2
 800eba8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2243      	movs	r2, #67	@ 0x43
 800ebae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ebb0:	4b02      	ldr	r3, [pc, #8]	@ (800ebbc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	2000005c 	.word	0x2000005c

0800ebc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ebc8:	2182      	movs	r1, #130	@ 0x82
 800ebca:	4818      	ldr	r0, [pc, #96]	@ (800ec2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebcc:	f000 fc4d 	bl	800f46a <USBD_GetEpDesc>
 800ebd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	4815      	ldr	r0, [pc, #84]	@ (800ec2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebd6:	f000 fc48 	bl	800f46a <USBD_GetEpDesc>
 800ebda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ebdc:	2181      	movs	r1, #129	@ 0x81
 800ebde:	4813      	ldr	r0, [pc, #76]	@ (800ec2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebe0:	f000 fc43 	bl	800f46a <USBD_GetEpDesc>
 800ebe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2210      	movs	r2, #16
 800ebf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d006      	beq.n	800ec06 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ec00:	711a      	strb	r2, [r3, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d006      	beq.n	800ec1a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ec14:	711a      	strb	r2, [r3, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2243      	movs	r2, #67	@ 0x43
 800ec1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec20:	4b02      	ldr	r3, [pc, #8]	@ (800ec2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000005c 	.word	0x2000005c

0800ec30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	220a      	movs	r2, #10
 800ec3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec3e:	4b03      	ldr	r3, [pc, #12]	@ (800ec4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	20000018 	.word	0x20000018

0800ec50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e009      	b.n	800ec78 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	33b0      	adds	r3, #176	@ 0xb0
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	32b0      	adds	r2, #176	@ 0xb0
 800ec9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eca6:	2303      	movs	r3, #3
 800eca8:	e008      	b.n	800ecbc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	32b0      	adds	r2, #176	@ 0xb0
 800ecdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d101      	bne.n	800ecec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ece8:	2303      	movs	r3, #3
 800ecea:	e004      	b.n	800ecf6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
	...

0800ed04 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	32b0      	adds	r2, #176	@ 0xb0
 800ed16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed1a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e025      	b.n	800ed76 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d11f      	bne.n	800ed74 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ed3c:	4b10      	ldr	r3, [pc, #64]	@ (800ed80 <USBD_CDC_TransmitPacket+0x7c>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	f003 020f 	and.w	r2, r3, #15
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4403      	add	r3, r0
 800ed56:	3318      	adds	r3, #24
 800ed58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ed5a:	4b09      	ldr	r3, [pc, #36]	@ (800ed80 <USBD_CDC_TransmitPacket+0x7c>)
 800ed5c:	7819      	ldrb	r1, [r3, #0]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f006 ff57 	bl	8015c1e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	2000009f 	.word	0x2000009f

0800ed84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	32b0      	adds	r2, #176	@ 0xb0
 800ed96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	32b0      	adds	r2, #176	@ 0xb0
 800eda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800edae:	2303      	movs	r3, #3
 800edb0:	e018      	b.n	800ede4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	7c1b      	ldrb	r3, [r3, #16]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edba:	4b0c      	ldr	r3, [pc, #48]	@ (800edec <USBD_CDC_ReceivePacket+0x68>)
 800edbc:	7819      	ldrb	r1, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f006 ff49 	bl	8015c60 <USBD_LL_PrepareReceive>
 800edce:	e008      	b.n	800ede2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edd0:	4b06      	ldr	r3, [pc, #24]	@ (800edec <USBD_CDC_ReceivePacket+0x68>)
 800edd2:	7819      	ldrb	r1, [r3, #0]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edda:	2340      	movs	r3, #64	@ 0x40
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f006 ff3f 	bl	8015c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	200000a0 	.word	0x200000a0

0800edf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e01f      	b.n	800ee48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d003      	beq.n	800ee2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	79fa      	ldrb	r2, [r7, #7]
 800ee3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f006 fda3 	bl	8015988 <USBD_LL_Init>
 800ee42:	4603      	mov	r3, r0
 800ee44:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3718      	adds	r7, #24
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee64:	2303      	movs	r3, #3
 800ee66:	e025      	b.n	800eeb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	32ae      	adds	r2, #174	@ 0xae
 800ee7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00f      	beq.n	800eea4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	32ae      	adds	r2, #174	@ 0xae
 800ee8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee94:	f107 020e 	add.w	r2, r7, #14
 800ee98:	4610      	mov	r0, r2
 800ee9a:	4798      	blx	r3
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f006 fdc1 	bl	8015a4c <USBD_LL_Start>
 800eeca:	4603      	mov	r3, r0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eedc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eede:	4618      	mov	r0, r3
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	460b      	mov	r3, r1
 800eef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d009      	beq.n	800ef18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	78fa      	ldrb	r2, [r7, #3]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	4798      	blx	r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3710      	adds	r7, #16
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b084      	sub	sp, #16
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	78fa      	ldrb	r2, [r7, #3]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	4798      	blx	r3
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef48:	2303      	movs	r3, #3
 800ef4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef66:	6839      	ldr	r1, [r7, #0]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f001 f8a4 	bl	80100b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef8a:	f003 031f 	and.w	r3, r3, #31
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	d01a      	beq.n	800efc8 <USBD_LL_SetupStage+0x72>
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	d822      	bhi.n	800efdc <USBD_LL_SetupStage+0x86>
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d002      	beq.n	800efa0 <USBD_LL_SetupStage+0x4a>
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d00a      	beq.n	800efb4 <USBD_LL_SetupStage+0x5e>
 800ef9e:	e01d      	b.n	800efdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efa6:	4619      	mov	r1, r3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 fad1 	bl	800f550 <USBD_StdDevReq>
 800efae:	4603      	mov	r3, r0
 800efb0:	73fb      	strb	r3, [r7, #15]
      break;
 800efb2:	e020      	b.n	800eff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fb39 	bl	800f634 <USBD_StdItfReq>
 800efc2:	4603      	mov	r3, r0
 800efc4:	73fb      	strb	r3, [r7, #15]
      break;
 800efc6:	e016      	b.n	800eff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efce:	4619      	mov	r1, r3
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fb9b 	bl	800f70c <USBD_StdEPReq>
 800efd6:	4603      	mov	r3, r0
 800efd8:	73fb      	strb	r3, [r7, #15]
      break;
 800efda:	e00c      	b.n	800eff6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efe2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f006 fd8e 	bl	8015b0c <USBD_LL_StallEP>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73fb      	strb	r3, [r7, #15]
      break;
 800eff4:	bf00      	nop
  }

  return ret;
 800eff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	460b      	mov	r3, r1
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f012:	7afb      	ldrb	r3, [r7, #11]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d16e      	bne.n	800f0f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f01e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f026:	2b03      	cmp	r3, #3
 800f028:	f040 8098 	bne.w	800f15c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	689a      	ldr	r2, [r3, #8]
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	429a      	cmp	r2, r3
 800f036:	d913      	bls.n	800f060 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	689a      	ldr	r2, [r3, #8]
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	1ad2      	subs	r2, r2, r3
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	68da      	ldr	r2, [r3, #12]
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	4293      	cmp	r3, r2
 800f050:	bf28      	it	cs
 800f052:	4613      	movcs	r3, r2
 800f054:	461a      	mov	r2, r3
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f001 f920 	bl	801029e <USBD_CtlContinueRx>
 800f05e:	e07d      	b.n	800f15c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f066:	f003 031f 	and.w	r3, r3, #31
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d014      	beq.n	800f098 <USBD_LL_DataOutStage+0x98>
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d81d      	bhi.n	800f0ae <USBD_LL_DataOutStage+0xae>
 800f072:	2b00      	cmp	r3, #0
 800f074:	d002      	beq.n	800f07c <USBD_LL_DataOutStage+0x7c>
 800f076:	2b01      	cmp	r3, #1
 800f078:	d003      	beq.n	800f082 <USBD_LL_DataOutStage+0x82>
 800f07a:	e018      	b.n	800f0ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f07c:	2300      	movs	r3, #0
 800f07e:	75bb      	strb	r3, [r7, #22]
            break;
 800f080:	e018      	b.n	800f0b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 f9d2 	bl	800f436 <USBD_CoreFindIF>
 800f092:	4603      	mov	r3, r0
 800f094:	75bb      	strb	r3, [r7, #22]
            break;
 800f096:	e00d      	b.n	800f0b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 f9d4 	bl	800f450 <USBD_CoreFindEP>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	75bb      	strb	r3, [r7, #22]
            break;
 800f0ac:	e002      	b.n	800f0b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	75bb      	strb	r3, [r7, #22]
            break;
 800f0b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f0b4:	7dbb      	ldrb	r3, [r7, #22]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d119      	bne.n	800f0ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	d113      	bne.n	800f0ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f0c6:	7dba      	ldrb	r2, [r7, #22]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	32ae      	adds	r2, #174	@ 0xae
 800f0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f0d6:	7dba      	ldrb	r2, [r7, #22]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f0de:	7dba      	ldrb	r2, [r7, #22]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	32ae      	adds	r2, #174	@ 0xae
 800f0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f001 f8e6 	bl	80102c0 <USBD_CtlSendStatus>
 800f0f4:	e032      	b.n	800f15c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f0f6:	7afb      	ldrb	r3, [r7, #11]
 800f0f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	4619      	mov	r1, r3
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f000 f9a5 	bl	800f450 <USBD_CoreFindEP>
 800f106:	4603      	mov	r3, r0
 800f108:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f10a:	7dbb      	ldrb	r3, [r7, #22]
 800f10c:	2bff      	cmp	r3, #255	@ 0xff
 800f10e:	d025      	beq.n	800f15c <USBD_LL_DataOutStage+0x15c>
 800f110:	7dbb      	ldrb	r3, [r7, #22]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d122      	bne.n	800f15c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d117      	bne.n	800f152 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f122:	7dba      	ldrb	r2, [r7, #22]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	32ae      	adds	r2, #174	@ 0xae
 800f128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12c:	699b      	ldr	r3, [r3, #24]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00f      	beq.n	800f152 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f132:	7dba      	ldrb	r2, [r7, #22]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f13a:	7dba      	ldrb	r2, [r7, #22]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	32ae      	adds	r2, #174	@ 0xae
 800f140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	7afa      	ldrb	r2, [r7, #11]
 800f148:	4611      	mov	r1, r2
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	4798      	blx	r3
 800f14e:	4603      	mov	r3, r0
 800f150:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f158:	7dfb      	ldrb	r3, [r7, #23]
 800f15a:	e000      	b.n	800f15e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b086      	sub	sp, #24
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	460b      	mov	r3, r1
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f174:	7afb      	ldrb	r3, [r7, #11]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d16f      	bne.n	800f25a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3314      	adds	r3, #20
 800f17e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f186:	2b02      	cmp	r3, #2
 800f188:	d15a      	bne.n	800f240 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	429a      	cmp	r2, r3
 800f194:	d914      	bls.n	800f1c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	1ad2      	subs	r2, r2, r3
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	6879      	ldr	r1, [r7, #4]
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f001 f848 	bl	8010242 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f006 fd51 	bl	8015c60 <USBD_LL_PrepareReceive>
 800f1be:	e03f      	b.n	800f240 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	68da      	ldr	r2, [r3, #12]
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d11c      	bne.n	800f206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	685a      	ldr	r2, [r3, #4]
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d316      	bcc.n	800f206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d20f      	bcs.n	800f206 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f001 f829 	bl	8010242 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f006 fd2e 	bl	8015c60 <USBD_LL_PrepareReceive>
 800f204:	e01c      	b.n	800f240 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b03      	cmp	r3, #3
 800f210:	d10f      	bne.n	800f232 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d009      	beq.n	800f232 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f232:	2180      	movs	r1, #128	@ 0x80
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f006 fc69 	bl	8015b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f001 f853 	bl	80102e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d03a      	beq.n	800f2c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fe42 	bl	800eed4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2200      	movs	r2, #0
 800f254:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f258:	e032      	b.n	800f2c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f25a:	7afb      	ldrb	r3, [r7, #11]
 800f25c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f260:	b2db      	uxtb	r3, r3
 800f262:	4619      	mov	r1, r3
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	f000 f8f3 	bl	800f450 <USBD_CoreFindEP>
 800f26a:	4603      	mov	r3, r0
 800f26c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f26e:	7dfb      	ldrb	r3, [r7, #23]
 800f270:	2bff      	cmp	r3, #255	@ 0xff
 800f272:	d025      	beq.n	800f2c0 <USBD_LL_DataInStage+0x15a>
 800f274:	7dfb      	ldrb	r3, [r7, #23]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d122      	bne.n	800f2c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b03      	cmp	r3, #3
 800f284:	d11c      	bne.n	800f2c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f286:	7dfa      	ldrb	r2, [r7, #23]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	32ae      	adds	r2, #174	@ 0xae
 800f28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f290:	695b      	ldr	r3, [r3, #20]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d014      	beq.n	800f2c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f296:	7dfa      	ldrb	r2, [r7, #23]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f29e:	7dfa      	ldrb	r2, [r7, #23]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	32ae      	adds	r2, #174	@ 0xae
 800f2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	7afa      	ldrb	r2, [r7, #11]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	4798      	blx	r3
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f2b6:	7dbb      	ldrb	r3, [r7, #22]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f2bc:	7dbb      	ldrb	r3, [r7, #22]
 800f2be:	e000      	b.n	800f2c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3718      	adds	r7, #24
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f302:	2b00      	cmp	r3, #0
 800f304:	d014      	beq.n	800f330 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00e      	beq.n	800f330 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	6852      	ldr	r2, [r2, #4]
 800f31e:	b2d2      	uxtb	r2, r2
 800f320:	4611      	mov	r1, r2
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	4798      	blx	r3
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f32c:	2303      	movs	r3, #3
 800f32e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f330:	2340      	movs	r3, #64	@ 0x40
 800f332:	2200      	movs	r2, #0
 800f334:	2100      	movs	r1, #0
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f006 fba3 	bl	8015a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2240      	movs	r2, #64	@ 0x40
 800f348:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f34c:	2340      	movs	r3, #64	@ 0x40
 800f34e:	2200      	movs	r2, #0
 800f350:	2180      	movs	r1, #128	@ 0x80
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f006 fb95 	bl	8015a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2240      	movs	r2, #64	@ 0x40
 800f362:	621a      	str	r2, [r3, #32]

  return ret;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	460b      	mov	r3, r1
 800f378:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	78fa      	ldrb	r2, [r7, #3]
 800f37e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	d006      	beq.n	800f3b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2204      	movs	r2, #4
 800f3b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b083      	sub	sp, #12
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b04      	cmp	r3, #4
 800f3d8:	d106      	bne.n	800f3e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f3e0:	b2da      	uxtb	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b03      	cmp	r3, #3
 800f408:	d110      	bne.n	800f42c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00b      	beq.n	800f42c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f41a:	69db      	ldr	r3, [r3, #28]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d005      	beq.n	800f42c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f426:	69db      	ldr	r3, [r3, #28]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	460b      	mov	r3, r1
 800f440:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f442:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f444:	4618      	mov	r0, r3
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	460b      	mov	r3, r1
 800f45a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f45c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b086      	sub	sp, #24
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	460b      	mov	r3, r1
 800f474:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	885b      	ldrh	r3, [r3, #2]
 800f486:	b29b      	uxth	r3, r3
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	7812      	ldrb	r2, [r2, #0]
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d91f      	bls.n	800f4d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f496:	e013      	b.n	800f4c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f498:	f107 030a 	add.w	r3, r7, #10
 800f49c:	4619      	mov	r1, r3
 800f49e:	6978      	ldr	r0, [r7, #20]
 800f4a0:	f000 f81b 	bl	800f4da <USBD_GetNextDesc>
 800f4a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	785b      	ldrb	r3, [r3, #1]
 800f4aa:	2b05      	cmp	r3, #5
 800f4ac:	d108      	bne.n	800f4c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	789b      	ldrb	r3, [r3, #2]
 800f4b6:	78fa      	ldrb	r2, [r7, #3]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d008      	beq.n	800f4ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	885b      	ldrh	r3, [r3, #2]
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	897b      	ldrh	r3, [r7, #10]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d8e5      	bhi.n	800f498 <USBD_GetEpDesc+0x2e>
 800f4cc:	e000      	b.n	800f4d0 <USBD_GetEpDesc+0x66>
          break;
 800f4ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f4d0:	693b      	ldr	r3, [r7, #16]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3718      	adds	r7, #24
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b085      	sub	sp, #20
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	7812      	ldrb	r2, [r2, #0]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4413      	add	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f504:	68fb      	ldr	r3, [r7, #12]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3714      	adds	r7, #20
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f512:	b480      	push	{r7}
 800f514:	b087      	sub	sp, #28
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	3301      	adds	r3, #1
 800f528:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f530:	8a3b      	ldrh	r3, [r7, #16]
 800f532:	021b      	lsls	r3, r3, #8
 800f534:	b21a      	sxth	r2, r3
 800f536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	b21b      	sxth	r3, r3
 800f53e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f540:	89fb      	ldrh	r3, [r7, #14]
}
 800f542:	4618      	mov	r0, r3
 800f544:	371c      	adds	r7, #28
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
	...

0800f550 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f566:	2b40      	cmp	r3, #64	@ 0x40
 800f568:	d005      	beq.n	800f576 <USBD_StdDevReq+0x26>
 800f56a:	2b40      	cmp	r3, #64	@ 0x40
 800f56c:	d857      	bhi.n	800f61e <USBD_StdDevReq+0xce>
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00f      	beq.n	800f592 <USBD_StdDevReq+0x42>
 800f572:	2b20      	cmp	r3, #32
 800f574:	d153      	bne.n	800f61e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	32ae      	adds	r2, #174	@ 0xae
 800f580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	4798      	blx	r3
 800f58c:	4603      	mov	r3, r0
 800f58e:	73fb      	strb	r3, [r7, #15]
      break;
 800f590:	e04a      	b.n	800f628 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	785b      	ldrb	r3, [r3, #1]
 800f596:	2b09      	cmp	r3, #9
 800f598:	d83b      	bhi.n	800f612 <USBD_StdDevReq+0xc2>
 800f59a:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a0 <USBD_StdDevReq+0x50>)
 800f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a0:	0800f5f5 	.word	0x0800f5f5
 800f5a4:	0800f609 	.word	0x0800f609
 800f5a8:	0800f613 	.word	0x0800f613
 800f5ac:	0800f5ff 	.word	0x0800f5ff
 800f5b0:	0800f613 	.word	0x0800f613
 800f5b4:	0800f5d3 	.word	0x0800f5d3
 800f5b8:	0800f5c9 	.word	0x0800f5c9
 800f5bc:	0800f613 	.word	0x0800f613
 800f5c0:	0800f5eb 	.word	0x0800f5eb
 800f5c4:	0800f5dd 	.word	0x0800f5dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fa3c 	bl	800fa48 <USBD_GetDescriptor>
          break;
 800f5d0:	e024      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fbcb 	bl	800fd70 <USBD_SetAddress>
          break;
 800f5da:	e01f      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f5dc:	6839      	ldr	r1, [r7, #0]
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 fc0a 	bl	800fdf8 <USBD_SetConfig>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	73fb      	strb	r3, [r7, #15]
          break;
 800f5e8:	e018      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fcad 	bl	800ff4c <USBD_GetConfig>
          break;
 800f5f2:	e013      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fcde 	bl	800ffb8 <USBD_GetStatus>
          break;
 800f5fc:	e00e      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f5fe:	6839      	ldr	r1, [r7, #0]
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fd0d 	bl	8010020 <USBD_SetFeature>
          break;
 800f606:	e009      	b.n	800f61c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 fd31 	bl	8010072 <USBD_ClrFeature>
          break;
 800f610:	e004      	b.n	800f61c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fd88 	bl	801012a <USBD_CtlError>
          break;
 800f61a:	bf00      	nop
      }
      break;
 800f61c:	e004      	b.n	800f628 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fd82 	bl	801012a <USBD_CtlError>
      break;
 800f626:	bf00      	nop
  }

  return ret;
 800f628:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop

0800f634 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f64a:	2b40      	cmp	r3, #64	@ 0x40
 800f64c:	d005      	beq.n	800f65a <USBD_StdItfReq+0x26>
 800f64e:	2b40      	cmp	r3, #64	@ 0x40
 800f650:	d852      	bhi.n	800f6f8 <USBD_StdItfReq+0xc4>
 800f652:	2b00      	cmp	r3, #0
 800f654:	d001      	beq.n	800f65a <USBD_StdItfReq+0x26>
 800f656:	2b20      	cmp	r3, #32
 800f658:	d14e      	bne.n	800f6f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f660:	b2db      	uxtb	r3, r3
 800f662:	3b01      	subs	r3, #1
 800f664:	2b02      	cmp	r3, #2
 800f666:	d840      	bhi.n	800f6ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	889b      	ldrh	r3, [r3, #4]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d836      	bhi.n	800f6e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	889b      	ldrh	r3, [r3, #4]
 800f676:	b2db      	uxtb	r3, r3
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff fedb 	bl	800f436 <USBD_CoreFindIF>
 800f680:	4603      	mov	r3, r0
 800f682:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f684:	7bbb      	ldrb	r3, [r7, #14]
 800f686:	2bff      	cmp	r3, #255	@ 0xff
 800f688:	d01d      	beq.n	800f6c6 <USBD_StdItfReq+0x92>
 800f68a:	7bbb      	ldrb	r3, [r7, #14]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d11a      	bne.n	800f6c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f690:	7bba      	ldrb	r2, [r7, #14]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	32ae      	adds	r2, #174	@ 0xae
 800f696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00f      	beq.n	800f6c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f6a0:	7bba      	ldrb	r2, [r7, #14]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6a8:	7bba      	ldrb	r2, [r7, #14]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	32ae      	adds	r2, #174	@ 0xae
 800f6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b2:	689b      	ldr	r3, [r3, #8]
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	4798      	blx	r3
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f6be:	e004      	b.n	800f6ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f6c0:	2303      	movs	r3, #3
 800f6c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f6c4:	e001      	b.n	800f6ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	88db      	ldrh	r3, [r3, #6]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d110      	bne.n	800f6f4 <USBD_StdItfReq+0xc0>
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10d      	bne.n	800f6f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fdf1 	bl	80102c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f6de:	e009      	b.n	800f6f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 fd21 	bl	801012a <USBD_CtlError>
          break;
 800f6e8:	e004      	b.n	800f6f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fd1c 	bl	801012a <USBD_CtlError>
          break;
 800f6f2:	e000      	b.n	800f6f6 <USBD_StdItfReq+0xc2>
          break;
 800f6f4:	bf00      	nop
      }
      break;
 800f6f6:	e004      	b.n	800f702 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f6f8:	6839      	ldr	r1, [r7, #0]
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fd15 	bl	801012a <USBD_CtlError>
      break;
 800f700:	bf00      	nop
  }

  return ret;
 800f702:	7bfb      	ldrb	r3, [r7, #15]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f716:	2300      	movs	r3, #0
 800f718:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	889b      	ldrh	r3, [r3, #4]
 800f71e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f728:	2b40      	cmp	r3, #64	@ 0x40
 800f72a:	d007      	beq.n	800f73c <USBD_StdEPReq+0x30>
 800f72c:	2b40      	cmp	r3, #64	@ 0x40
 800f72e:	f200 817f 	bhi.w	800fa30 <USBD_StdEPReq+0x324>
 800f732:	2b00      	cmp	r3, #0
 800f734:	d02a      	beq.n	800f78c <USBD_StdEPReq+0x80>
 800f736:	2b20      	cmp	r3, #32
 800f738:	f040 817a 	bne.w	800fa30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f73c:	7bbb      	ldrb	r3, [r7, #14]
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff fe85 	bl	800f450 <USBD_CoreFindEP>
 800f746:	4603      	mov	r3, r0
 800f748:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f74a:	7b7b      	ldrb	r3, [r7, #13]
 800f74c:	2bff      	cmp	r3, #255	@ 0xff
 800f74e:	f000 8174 	beq.w	800fa3a <USBD_StdEPReq+0x32e>
 800f752:	7b7b      	ldrb	r3, [r7, #13]
 800f754:	2b00      	cmp	r3, #0
 800f756:	f040 8170 	bne.w	800fa3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f75a:	7b7a      	ldrb	r2, [r7, #13]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f762:	7b7a      	ldrb	r2, [r7, #13]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	32ae      	adds	r2, #174	@ 0xae
 800f768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f000 8163 	beq.w	800fa3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f774:	7b7a      	ldrb	r2, [r7, #13]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	32ae      	adds	r2, #174	@ 0xae
 800f77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	4798      	blx	r3
 800f786:	4603      	mov	r3, r0
 800f788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f78a:	e156      	b.n	800fa3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	785b      	ldrb	r3, [r3, #1]
 800f790:	2b03      	cmp	r3, #3
 800f792:	d008      	beq.n	800f7a6 <USBD_StdEPReq+0x9a>
 800f794:	2b03      	cmp	r3, #3
 800f796:	f300 8145 	bgt.w	800fa24 <USBD_StdEPReq+0x318>
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 809b 	beq.w	800f8d6 <USBD_StdEPReq+0x1ca>
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d03c      	beq.n	800f81e <USBD_StdEPReq+0x112>
 800f7a4:	e13e      	b.n	800fa24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	d002      	beq.n	800f7b8 <USBD_StdEPReq+0xac>
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d016      	beq.n	800f7e4 <USBD_StdEPReq+0xd8>
 800f7b6:	e02c      	b.n	800f812 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7b8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00d      	beq.n	800f7da <USBD_StdEPReq+0xce>
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
 800f7c0:	2b80      	cmp	r3, #128	@ 0x80
 800f7c2:	d00a      	beq.n	800f7da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7c4:	7bbb      	ldrb	r3, [r7, #14]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f006 f99f 	bl	8015b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7ce:	2180      	movs	r1, #128	@ 0x80
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f006 f99b 	bl	8015b0c <USBD_LL_StallEP>
 800f7d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7d8:	e020      	b.n	800f81c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fca4 	bl	801012a <USBD_CtlError>
              break;
 800f7e2:	e01b      	b.n	800f81c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	885b      	ldrh	r3, [r3, #2]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10e      	bne.n	800f80a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00b      	beq.n	800f80a <USBD_StdEPReq+0xfe>
 800f7f2:	7bbb      	ldrb	r3, [r7, #14]
 800f7f4:	2b80      	cmp	r3, #128	@ 0x80
 800f7f6:	d008      	beq.n	800f80a <USBD_StdEPReq+0xfe>
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	88db      	ldrh	r3, [r3, #6]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d104      	bne.n	800f80a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f800:	7bbb      	ldrb	r3, [r7, #14]
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f006 f981 	bl	8015b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fd58 	bl	80102c0 <USBD_CtlSendStatus>

              break;
 800f810:	e004      	b.n	800f81c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 fc88 	bl	801012a <USBD_CtlError>
              break;
 800f81a:	bf00      	nop
          }
          break;
 800f81c:	e107      	b.n	800fa2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b02      	cmp	r3, #2
 800f828:	d002      	beq.n	800f830 <USBD_StdEPReq+0x124>
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	d016      	beq.n	800f85c <USBD_StdEPReq+0x150>
 800f82e:	e04b      	b.n	800f8c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00d      	beq.n	800f852 <USBD_StdEPReq+0x146>
 800f836:	7bbb      	ldrb	r3, [r7, #14]
 800f838:	2b80      	cmp	r3, #128	@ 0x80
 800f83a:	d00a      	beq.n	800f852 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f83c:	7bbb      	ldrb	r3, [r7, #14]
 800f83e:	4619      	mov	r1, r3
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f006 f963 	bl	8015b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f846:	2180      	movs	r1, #128	@ 0x80
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f006 f95f 	bl	8015b0c <USBD_LL_StallEP>
 800f84e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f850:	e040      	b.n	800f8d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fc68 	bl	801012a <USBD_CtlError>
              break;
 800f85a:	e03b      	b.n	800f8d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	885b      	ldrh	r3, [r3, #2]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d136      	bne.n	800f8d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f864:	7bbb      	ldrb	r3, [r7, #14]
 800f866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d004      	beq.n	800f878 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f86e:	7bbb      	ldrb	r3, [r7, #14]
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f006 f969 	bl	8015b4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fd21 	bl	80102c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7ff fde4 	bl	800f450 <USBD_CoreFindEP>
 800f888:	4603      	mov	r3, r0
 800f88a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f88c:	7b7b      	ldrb	r3, [r7, #13]
 800f88e:	2bff      	cmp	r3, #255	@ 0xff
 800f890:	d01f      	beq.n	800f8d2 <USBD_StdEPReq+0x1c6>
 800f892:	7b7b      	ldrb	r3, [r7, #13]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d11c      	bne.n	800f8d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f898:	7b7a      	ldrb	r2, [r7, #13]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f8a0:	7b7a      	ldrb	r2, [r7, #13]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	32ae      	adds	r2, #174	@ 0xae
 800f8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d010      	beq.n	800f8d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f8b0:	7b7a      	ldrb	r2, [r7, #13]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	32ae      	adds	r2, #174	@ 0xae
 800f8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	4798      	blx	r3
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f8c6:	e004      	b.n	800f8d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fc2d 	bl	801012a <USBD_CtlError>
              break;
 800f8d0:	e000      	b.n	800f8d4 <USBD_StdEPReq+0x1c8>
              break;
 800f8d2:	bf00      	nop
          }
          break;
 800f8d4:	e0ab      	b.n	800fa2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d002      	beq.n	800f8e8 <USBD_StdEPReq+0x1dc>
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d032      	beq.n	800f94c <USBD_StdEPReq+0x240>
 800f8e6:	e097      	b.n	800fa18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d007      	beq.n	800f8fe <USBD_StdEPReq+0x1f2>
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
 800f8f0:	2b80      	cmp	r3, #128	@ 0x80
 800f8f2:	d004      	beq.n	800f8fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f8f4:	6839      	ldr	r1, [r7, #0]
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fc17 	bl	801012a <USBD_CtlError>
                break;
 800f8fc:	e091      	b.n	800fa22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f902:	2b00      	cmp	r3, #0
 800f904:	da0b      	bge.n	800f91e <USBD_StdEPReq+0x212>
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	3310      	adds	r3, #16
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	4413      	add	r3, r2
 800f91a:	3304      	adds	r3, #4
 800f91c:	e00b      	b.n	800f936 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f91e:	7bbb      	ldrb	r3, [r7, #14]
 800f920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f924:	4613      	mov	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	4413      	add	r3, r2
 800f934:	3304      	adds	r3, #4
 800f936:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	2200      	movs	r2, #0
 800f93c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2202      	movs	r2, #2
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fc61 	bl	801020c <USBD_CtlSendData>
              break;
 800f94a:	e06a      	b.n	800fa22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f94c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f950:	2b00      	cmp	r3, #0
 800f952:	da11      	bge.n	800f978 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f954:	7bbb      	ldrb	r3, [r7, #14]
 800f956:	f003 020f 	and.w	r2, r3, #15
 800f95a:	6879      	ldr	r1, [r7, #4]
 800f95c:	4613      	mov	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	440b      	add	r3, r1
 800f966:	3324      	adds	r3, #36	@ 0x24
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d117      	bne.n	800f99e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 fbda 	bl	801012a <USBD_CtlError>
                  break;
 800f976:	e054      	b.n	800fa22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	f003 020f 	and.w	r2, r3, #15
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	440b      	add	r3, r1
 800f98a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 fbc7 	bl	801012a <USBD_CtlError>
                  break;
 800f99c:	e041      	b.n	800fa22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f99e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da0b      	bge.n	800f9be <USBD_StdEPReq+0x2b2>
 800f9a6:	7bbb      	ldrb	r3, [r7, #14]
 800f9a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	3310      	adds	r3, #16
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	e00b      	b.n	800f9d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	4413      	add	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f9d8:	7bbb      	ldrb	r3, [r7, #14]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <USBD_StdEPReq+0x2d8>
 800f9de:	7bbb      	ldrb	r3, [r7, #14]
 800f9e0:	2b80      	cmp	r3, #128	@ 0x80
 800f9e2:	d103      	bne.n	800f9ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	e00e      	b.n	800fa0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f006 f8c9 	bl	8015b88 <USBD_LL_IsStallEP>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d003      	beq.n	800fa04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	601a      	str	r2, [r3, #0]
 800fa02:	e002      	b.n	800fa0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2202      	movs	r2, #2
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 fbfb 	bl	801020c <USBD_CtlSendData>
              break;
 800fa16:	e004      	b.n	800fa22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fa18:	6839      	ldr	r1, [r7, #0]
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 fb85 	bl	801012a <USBD_CtlError>
              break;
 800fa20:	bf00      	nop
          }
          break;
 800fa22:	e004      	b.n	800fa2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fb7f 	bl	801012a <USBD_CtlError>
          break;
 800fa2c:	bf00      	nop
      }
      break;
 800fa2e:	e005      	b.n	800fa3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fa30:	6839      	ldr	r1, [r7, #0]
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 fb79 	bl	801012a <USBD_CtlError>
      break;
 800fa38:	e000      	b.n	800fa3c <USBD_StdEPReq+0x330>
      break;
 800fa3a:	bf00      	nop
  }

  return ret;
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa52:	2300      	movs	r3, #0
 800fa54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa56:	2300      	movs	r3, #0
 800fa58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	885b      	ldrh	r3, [r3, #2]
 800fa62:	0a1b      	lsrs	r3, r3, #8
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	3b01      	subs	r3, #1
 800fa68:	2b0e      	cmp	r3, #14
 800fa6a:	f200 8152 	bhi.w	800fd12 <USBD_GetDescriptor+0x2ca>
 800fa6e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa74 <USBD_GetDescriptor+0x2c>)
 800fa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa74:	0800fae5 	.word	0x0800fae5
 800fa78:	0800fafd 	.word	0x0800fafd
 800fa7c:	0800fb3d 	.word	0x0800fb3d
 800fa80:	0800fd13 	.word	0x0800fd13
 800fa84:	0800fd13 	.word	0x0800fd13
 800fa88:	0800fcb3 	.word	0x0800fcb3
 800fa8c:	0800fcdf 	.word	0x0800fcdf
 800fa90:	0800fd13 	.word	0x0800fd13
 800fa94:	0800fd13 	.word	0x0800fd13
 800fa98:	0800fd13 	.word	0x0800fd13
 800fa9c:	0800fd13 	.word	0x0800fd13
 800faa0:	0800fd13 	.word	0x0800fd13
 800faa4:	0800fd13 	.word	0x0800fd13
 800faa8:	0800fd13 	.word	0x0800fd13
 800faac:	0800fab1 	.word	0x0800fab1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fab6:	69db      	ldr	r3, [r3, #28]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00b      	beq.n	800fad4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fac2:	69db      	ldr	r3, [r3, #28]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	7c12      	ldrb	r2, [r2, #16]
 800fac8:	f107 0108 	add.w	r1, r7, #8
 800facc:	4610      	mov	r0, r2
 800face:	4798      	blx	r3
 800fad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fad2:	e126      	b.n	800fd22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fad4:	6839      	ldr	r1, [r7, #0]
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fb27 	bl	801012a <USBD_CtlError>
        err++;
 800fadc:	7afb      	ldrb	r3, [r7, #11]
 800fade:	3301      	adds	r3, #1
 800fae0:	72fb      	strb	r3, [r7, #11]
      break;
 800fae2:	e11e      	b.n	800fd22 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	7c12      	ldrb	r2, [r2, #16]
 800faf0:	f107 0108 	add.w	r1, r7, #8
 800faf4:	4610      	mov	r0, r2
 800faf6:	4798      	blx	r3
 800faf8:	60f8      	str	r0, [r7, #12]
      break;
 800fafa:	e112      	b.n	800fd22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	7c1b      	ldrb	r3, [r3, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10d      	bne.n	800fb20 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb0c:	f107 0208 	add.w	r2, r7, #8
 800fb10:	4610      	mov	r0, r2
 800fb12:	4798      	blx	r3
 800fb14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	2202      	movs	r2, #2
 800fb1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb1e:	e100      	b.n	800fd22 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb28:	f107 0208 	add.w	r2, r7, #8
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4798      	blx	r3
 800fb30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3301      	adds	r3, #1
 800fb36:	2202      	movs	r2, #2
 800fb38:	701a      	strb	r2, [r3, #0]
      break;
 800fb3a:	e0f2      	b.n	800fd22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	885b      	ldrh	r3, [r3, #2]
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b05      	cmp	r3, #5
 800fb44:	f200 80ac 	bhi.w	800fca0 <USBD_GetDescriptor+0x258>
 800fb48:	a201      	add	r2, pc, #4	@ (adr r2, 800fb50 <USBD_GetDescriptor+0x108>)
 800fb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4e:	bf00      	nop
 800fb50:	0800fb69 	.word	0x0800fb69
 800fb54:	0800fb9d 	.word	0x0800fb9d
 800fb58:	0800fbd1 	.word	0x0800fbd1
 800fb5c:	0800fc05 	.word	0x0800fc05
 800fb60:	0800fc39 	.word	0x0800fc39
 800fb64:	0800fc6d 	.word	0x0800fc6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00b      	beq.n	800fb8c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	7c12      	ldrb	r2, [r2, #16]
 800fb80:	f107 0108 	add.w	r1, r7, #8
 800fb84:	4610      	mov	r0, r2
 800fb86:	4798      	blx	r3
 800fb88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb8a:	e091      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 facb 	bl	801012a <USBD_CtlError>
            err++;
 800fb94:	7afb      	ldrb	r3, [r7, #11]
 800fb96:	3301      	adds	r3, #1
 800fb98:	72fb      	strb	r3, [r7, #11]
          break;
 800fb9a:	e089      	b.n	800fcb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00b      	beq.n	800fbc0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	7c12      	ldrb	r2, [r2, #16]
 800fbb4:	f107 0108 	add.w	r1, r7, #8
 800fbb8:	4610      	mov	r0, r2
 800fbba:	4798      	blx	r3
 800fbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbbe:	e077      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fab1 	bl	801012a <USBD_CtlError>
            err++;
 800fbc8:	7afb      	ldrb	r3, [r7, #11]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	72fb      	strb	r3, [r7, #11]
          break;
 800fbce:	e06f      	b.n	800fcb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00b      	beq.n	800fbf4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	7c12      	ldrb	r2, [r2, #16]
 800fbe8:	f107 0108 	add.w	r1, r7, #8
 800fbec:	4610      	mov	r0, r2
 800fbee:	4798      	blx	r3
 800fbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbf2:	e05d      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fa97 	bl	801012a <USBD_CtlError>
            err++;
 800fbfc:	7afb      	ldrb	r3, [r7, #11]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	72fb      	strb	r3, [r7, #11]
          break;
 800fc02:	e055      	b.n	800fcb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00b      	beq.n	800fc28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	7c12      	ldrb	r2, [r2, #16]
 800fc1c:	f107 0108 	add.w	r1, r7, #8
 800fc20:	4610      	mov	r0, r2
 800fc22:	4798      	blx	r3
 800fc24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc26:	e043      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc28:	6839      	ldr	r1, [r7, #0]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fa7d 	bl	801012a <USBD_CtlError>
            err++;
 800fc30:	7afb      	ldrb	r3, [r7, #11]
 800fc32:	3301      	adds	r3, #1
 800fc34:	72fb      	strb	r3, [r7, #11]
          break;
 800fc36:	e03b      	b.n	800fcb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc3e:	695b      	ldr	r3, [r3, #20]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00b      	beq.n	800fc5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc4a:	695b      	ldr	r3, [r3, #20]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	7c12      	ldrb	r2, [r2, #16]
 800fc50:	f107 0108 	add.w	r1, r7, #8
 800fc54:	4610      	mov	r0, r2
 800fc56:	4798      	blx	r3
 800fc58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc5a:	e029      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fa63 	bl	801012a <USBD_CtlError>
            err++;
 800fc64:	7afb      	ldrb	r3, [r7, #11]
 800fc66:	3301      	adds	r3, #1
 800fc68:	72fb      	strb	r3, [r7, #11]
          break;
 800fc6a:	e021      	b.n	800fcb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00b      	beq.n	800fc90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7e:	699b      	ldr	r3, [r3, #24]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	7c12      	ldrb	r2, [r2, #16]
 800fc84:	f107 0108 	add.w	r1, r7, #8
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4798      	blx	r3
 800fc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc8e:	e00f      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc90:	6839      	ldr	r1, [r7, #0]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fa49 	bl	801012a <USBD_CtlError>
            err++;
 800fc98:	7afb      	ldrb	r3, [r7, #11]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc9e:	e007      	b.n	800fcb0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fca0:	6839      	ldr	r1, [r7, #0]
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fa41 	bl	801012a <USBD_CtlError>
          err++;
 800fca8:	7afb      	ldrb	r3, [r7, #11]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fcae:	bf00      	nop
      }
      break;
 800fcb0:	e037      	b.n	800fd22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	7c1b      	ldrb	r3, [r3, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d109      	bne.n	800fcce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcc2:	f107 0208 	add.w	r2, r7, #8
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	4798      	blx	r3
 800fcca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fccc:	e029      	b.n	800fd22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fcce:	6839      	ldr	r1, [r7, #0]
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fa2a 	bl	801012a <USBD_CtlError>
        err++;
 800fcd6:	7afb      	ldrb	r3, [r7, #11]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	72fb      	strb	r3, [r7, #11]
      break;
 800fcdc:	e021      	b.n	800fd22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	7c1b      	ldrb	r3, [r3, #16]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10d      	bne.n	800fd02 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcee:	f107 0208 	add.w	r2, r7, #8
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	4798      	blx	r3
 800fcf6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	2207      	movs	r2, #7
 800fcfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd00:	e00f      	b.n	800fd22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fa10 	bl	801012a <USBD_CtlError>
        err++;
 800fd0a:	7afb      	ldrb	r3, [r7, #11]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd10:	e007      	b.n	800fd22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fa08 	bl	801012a <USBD_CtlError>
      err++;
 800fd1a:	7afb      	ldrb	r3, [r7, #11]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd20:	bf00      	nop
  }

  if (err != 0U)
 800fd22:	7afb      	ldrb	r3, [r7, #11]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d11e      	bne.n	800fd66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	88db      	ldrh	r3, [r3, #6]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d016      	beq.n	800fd5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fd30:	893b      	ldrh	r3, [r7, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00e      	beq.n	800fd54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	88da      	ldrh	r2, [r3, #6]
 800fd3a:	893b      	ldrh	r3, [r7, #8]
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	bf28      	it	cs
 800fd40:	4613      	movcs	r3, r2
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd46:	893b      	ldrh	r3, [r7, #8]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	68f9      	ldr	r1, [r7, #12]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fa5d 	bl	801020c <USBD_CtlSendData>
 800fd52:	e009      	b.n	800fd68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f9e7 	bl	801012a <USBD_CtlError>
 800fd5c:	e004      	b.n	800fd68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 faae 	bl	80102c0 <USBD_CtlSendStatus>
 800fd64:	e000      	b.n	800fd68 <USBD_GetDescriptor+0x320>
    return;
 800fd66:	bf00      	nop
  }
}
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop

0800fd70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	889b      	ldrh	r3, [r3, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d131      	bne.n	800fde6 <USBD_SetAddress+0x76>
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	88db      	ldrh	r3, [r3, #6]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d12d      	bne.n	800fde6 <USBD_SetAddress+0x76>
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	885b      	ldrh	r3, [r3, #2]
 800fd8e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fd90:	d829      	bhi.n	800fde6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	885b      	ldrh	r3, [r3, #2]
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	d104      	bne.n	800fdb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 f9bc 	bl	801012a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdb2:	e01d      	b.n	800fdf0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	7bfa      	ldrb	r2, [r7, #15]
 800fdb8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f005 ff0d 	bl	8015be0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 fa7a 	bl	80102c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d004      	beq.n	800fddc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2202      	movs	r2, #2
 800fdd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdda:	e009      	b.n	800fdf0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2201      	movs	r2, #1
 800fde0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fde4:	e004      	b.n	800fdf0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f99e 	bl	801012a <USBD_CtlError>
  }
}
 800fdee:	bf00      	nop
 800fdf0:	bf00      	nop
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe02:	2300      	movs	r3, #0
 800fe04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	885b      	ldrh	r3, [r3, #2]
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	4b4e      	ldr	r3, [pc, #312]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe10:	4b4d      	ldr	r3, [pc, #308]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d905      	bls.n	800fe24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe18:	6839      	ldr	r1, [r7, #0]
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f985 	bl	801012a <USBD_CtlError>
    return USBD_FAIL;
 800fe20:	2303      	movs	r3, #3
 800fe22:	e08c      	b.n	800ff3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	d002      	beq.n	800fe36 <USBD_SetConfig+0x3e>
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d029      	beq.n	800fe88 <USBD_SetConfig+0x90>
 800fe34:	e075      	b.n	800ff22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe36:	4b44      	ldr	r3, [pc, #272]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d020      	beq.n	800fe80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fe3e:	4b42      	ldr	r3, [pc, #264]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe48:	4b3f      	ldr	r3, [pc, #252]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7ff f84b 	bl	800eeea <USBD_SetClassConfig>
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d008      	beq.n	800fe70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fe5e:	6839      	ldr	r1, [r7, #0]
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f962 	bl	801012a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2202      	movs	r2, #2
 800fe6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe6e:	e065      	b.n	800ff3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fa25 	bl	80102c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2203      	movs	r2, #3
 800fe7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe7e:	e05d      	b.n	800ff3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fa1d 	bl	80102c0 <USBD_CtlSendStatus>
      break;
 800fe86:	e059      	b.n	800ff3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fe88:	4b2f      	ldr	r3, [pc, #188]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d112      	bne.n	800feb6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2202      	movs	r2, #2
 800fe94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fe98:	4b2b      	ldr	r3, [pc, #172]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fea2:	4b29      	ldr	r3, [pc, #164]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	4619      	mov	r1, r3
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff f83a 	bl	800ef22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fa06 	bl	80102c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800feb4:	e042      	b.n	800ff3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800feb6:	4b24      	ldr	r3, [pc, #144]	@ (800ff48 <USBD_SetConfig+0x150>)
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	461a      	mov	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d02a      	beq.n	800ff1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff f828 	bl	800ef22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fed2:	4b1d      	ldr	r3, [pc, #116]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fedc:	4b1a      	ldr	r3, [pc, #104]	@ (800ff48 <USBD_SetConfig+0x150>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff f801 	bl	800eeea <USBD_SetClassConfig>
 800fee8:	4603      	mov	r3, r0
 800feea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00f      	beq.n	800ff12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fef2:	6839      	ldr	r1, [r7, #0]
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f918 	bl	801012a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff f80d 	bl	800ef22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2202      	movs	r2, #2
 800ff0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff10:	e014      	b.n	800ff3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 f9d4 	bl	80102c0 <USBD_CtlSendStatus>
      break;
 800ff18:	e010      	b.n	800ff3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f9d0 	bl	80102c0 <USBD_CtlSendStatus>
      break;
 800ff20:	e00c      	b.n	800ff3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ff22:	6839      	ldr	r1, [r7, #0]
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f900 	bl	801012a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff2a:	4b07      	ldr	r3, [pc, #28]	@ (800ff48 <USBD_SetConfig+0x150>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7fe fff6 	bl	800ef22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff36:	2303      	movs	r3, #3
 800ff38:	73fb      	strb	r3, [r7, #15]
      break;
 800ff3a:	bf00      	nop
  }

  return ret;
 800ff3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	200010a8 	.word	0x200010a8

0800ff4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	88db      	ldrh	r3, [r3, #6]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d004      	beq.n	800ff68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff5e:	6839      	ldr	r1, [r7, #0]
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f8e2 	bl	801012a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ff66:	e023      	b.n	800ffb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	dc02      	bgt.n	800ff7a <USBD_GetConfig+0x2e>
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dc03      	bgt.n	800ff80 <USBD_GetConfig+0x34>
 800ff78:	e015      	b.n	800ffa6 <USBD_GetConfig+0x5a>
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d00b      	beq.n	800ff96 <USBD_GetConfig+0x4a>
 800ff7e:	e012      	b.n	800ffa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3308      	adds	r3, #8
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f93c 	bl	801020c <USBD_CtlSendData>
        break;
 800ff94:	e00c      	b.n	800ffb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f934 	bl	801020c <USBD_CtlSendData>
        break;
 800ffa4:	e004      	b.n	800ffb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f8be 	bl	801012a <USBD_CtlError>
        break;
 800ffae:	bf00      	nop
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d81e      	bhi.n	801000e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	88db      	ldrh	r3, [r3, #6]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d004      	beq.n	800ffe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f8a5 	bl	801012a <USBD_CtlError>
        break;
 800ffe0:	e01a      	b.n	8010018 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d005      	beq.n	800fffe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	f043 0202 	orr.w	r2, r3, #2
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	330c      	adds	r3, #12
 8010002:	2202      	movs	r2, #2
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f900 	bl	801020c <USBD_CtlSendData>
      break;
 801000c:	e004      	b.n	8010018 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f88a 	bl	801012a <USBD_CtlError>
      break;
 8010016:	bf00      	nop
  }
}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	885b      	ldrh	r3, [r3, #2]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d107      	bne.n	8010042 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f940 	bl	80102c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010040:	e013      	b.n	801006a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	885b      	ldrh	r3, [r3, #2]
 8010046:	2b02      	cmp	r3, #2
 8010048:	d10b      	bne.n	8010062 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	889b      	ldrh	r3, [r3, #4]
 801004e:	0a1b      	lsrs	r3, r3, #8
 8010050:	b29b      	uxth	r3, r3
 8010052:	b2da      	uxtb	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 f930 	bl	80102c0 <USBD_CtlSendStatus>
}
 8010060:	e003      	b.n	801006a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 f860 	bl	801012a <USBD_CtlError>
}
 801006a:	bf00      	nop
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b082      	sub	sp, #8
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010082:	b2db      	uxtb	r3, r3
 8010084:	3b01      	subs	r3, #1
 8010086:	2b02      	cmp	r3, #2
 8010088:	d80b      	bhi.n	80100a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	885b      	ldrh	r3, [r3, #2]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d10c      	bne.n	80100ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f910 	bl	80102c0 <USBD_CtlSendStatus>
      }
      break;
 80100a0:	e004      	b.n	80100ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f840 	bl	801012a <USBD_CtlError>
      break;
 80100aa:	e000      	b.n	80100ae <USBD_ClrFeature+0x3c>
      break;
 80100ac:	bf00      	nop
  }
}
 80100ae:	bf00      	nop
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b084      	sub	sp, #16
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
 80100be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	781a      	ldrb	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	3301      	adds	r3, #1
 80100d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	781a      	ldrb	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3301      	adds	r3, #1
 80100de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f7ff fa16 	bl	800f512 <SWAPBYTE>
 80100e6:	4603      	mov	r3, r0
 80100e8:	461a      	mov	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3301      	adds	r3, #1
 80100f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	3301      	adds	r3, #1
 80100f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f7ff fa09 	bl	800f512 <SWAPBYTE>
 8010100:	4603      	mov	r3, r0
 8010102:	461a      	mov	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	3301      	adds	r3, #1
 801010c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3301      	adds	r3, #1
 8010112:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7ff f9fc 	bl	800f512 <SWAPBYTE>
 801011a:	4603      	mov	r3, r0
 801011c:	461a      	mov	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	80da      	strh	r2, [r3, #6]
}
 8010122:	bf00      	nop
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b082      	sub	sp, #8
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010134:	2180      	movs	r1, #128	@ 0x80
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f005 fce8 	bl	8015b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801013c:	2100      	movs	r1, #0
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f005 fce4 	bl	8015b0c <USBD_LL_StallEP>
}
 8010144:	bf00      	nop
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010158:	2300      	movs	r3, #0
 801015a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d036      	beq.n	80101d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010166:	6938      	ldr	r0, [r7, #16]
 8010168:	f000 f836 	bl	80101d8 <USBD_GetLen>
 801016c:	4603      	mov	r3, r0
 801016e:	3301      	adds	r3, #1
 8010170:	b29b      	uxth	r3, r3
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801017a:	7dfb      	ldrb	r3, [r7, #23]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	4413      	add	r3, r2
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	7812      	ldrb	r2, [r2, #0]
 8010184:	701a      	strb	r2, [r3, #0]
  idx++;
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	3301      	adds	r3, #1
 801018a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801018c:	7dfb      	ldrb	r3, [r7, #23]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	4413      	add	r3, r2
 8010192:	2203      	movs	r2, #3
 8010194:	701a      	strb	r2, [r3, #0]
  idx++;
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	3301      	adds	r3, #1
 801019a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801019c:	e013      	b.n	80101c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801019e:	7dfb      	ldrb	r3, [r7, #23]
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	4413      	add	r3, r2
 80101a4:	693a      	ldr	r2, [r7, #16]
 80101a6:	7812      	ldrb	r2, [r2, #0]
 80101a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	3301      	adds	r3, #1
 80101ae:	613b      	str	r3, [r7, #16]
    idx++;
 80101b0:	7dfb      	ldrb	r3, [r7, #23]
 80101b2:	3301      	adds	r3, #1
 80101b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80101b6:	7dfb      	ldrb	r3, [r7, #23]
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	4413      	add	r3, r2
 80101bc:	2200      	movs	r2, #0
 80101be:	701a      	strb	r2, [r3, #0]
    idx++;
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	3301      	adds	r3, #1
 80101c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1e7      	bne.n	801019e <USBD_GetString+0x52>
 80101ce:	e000      	b.n	80101d2 <USBD_GetString+0x86>
    return;
 80101d0:	bf00      	nop
  }
}
 80101d2:	3718      	adds	r7, #24
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101e0:	2300      	movs	r3, #0
 80101e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80101e8:	e005      	b.n	80101f6 <USBD_GetLen+0x1e>
  {
    len++;
 80101ea:	7bfb      	ldrb	r3, [r7, #15]
 80101ec:	3301      	adds	r3, #1
 80101ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	3301      	adds	r3, #1
 80101f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1f5      	bne.n	80101ea <USBD_GetLen+0x12>
  }

  return len;
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2202      	movs	r2, #2
 801021c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	2100      	movs	r1, #0
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f005 fcf3 	bl	8015c1e <USBD_LL_Transmit>

  return USBD_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	2100      	movs	r1, #0
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f005 fce2 	bl	8015c1e <USBD_LL_Transmit>

  return USBD_OK;
 801025a:	2300      	movs	r3, #0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2203      	movs	r2, #3
 8010274:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	2100      	movs	r1, #0
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f005 fce6 	bl	8015c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b084      	sub	sp, #16
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	60f8      	str	r0, [r7, #12]
 80102a6:	60b9      	str	r1, [r7, #8]
 80102a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	2100      	movs	r1, #0
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f005 fcd5 	bl	8015c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2204      	movs	r2, #4
 80102cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102d0:	2300      	movs	r3, #0
 80102d2:	2200      	movs	r2, #0
 80102d4:	2100      	movs	r1, #0
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f005 fca1 	bl	8015c1e <USBD_LL_Transmit>

  return USBD_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b082      	sub	sp, #8
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2205      	movs	r2, #5
 80102f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102f6:	2300      	movs	r3, #0
 80102f8:	2200      	movs	r2, #0
 80102fa:	2100      	movs	r1, #0
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f005 fcaf 	bl	8015c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010302:	2300      	movs	r3, #0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b088      	sub	sp, #32
 8010310:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010316:	f107 0308 	add.w	r3, r7, #8
 801031a:	2218      	movs	r2, #24
 801031c:	2100      	movs	r1, #0
 801031e:	4618      	mov	r0, r3
 8010320:	f001 fa21 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010324:	233f      	movs	r3, #63	@ 0x3f
 8010326:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8010328:	2381      	movs	r3, #129	@ 0x81
 801032a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801032c:	1dfb      	adds	r3, r7, #7
 801032e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010330:	2301      	movs	r3, #1
 8010332:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010334:	f107 0308 	add.w	r3, r7, #8
 8010338:	2100      	movs	r1, #0
 801033a:	4618      	mov	r0, r3
 801033c:	f001 fc9c 	bl	8011c78 <hci_send_req>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	da01      	bge.n	801034a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010346:	23ff      	movs	r3, #255	@ 0xff
 8010348:	e000      	b.n	801034c <aci_gap_set_non_discoverable+0x40>
  return status;
 801034a:	79fb      	ldrb	r3, [r7, #7]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3720      	adds	r7, #32
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8010354:	b5b0      	push	{r4, r5, r7, lr}
 8010356:	b0ce      	sub	sp, #312	@ 0x138
 8010358:	af00      	add	r7, sp, #0
 801035a:	4605      	mov	r5, r0
 801035c:	460c      	mov	r4, r1
 801035e:	4610      	mov	r0, r2
 8010360:	4619      	mov	r1, r3
 8010362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010366:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801036a:	462a      	mov	r2, r5
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010372:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010376:	4622      	mov	r2, r4
 8010378:	801a      	strh	r2, [r3, #0]
 801037a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801037e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8010382:	4602      	mov	r2, r0
 8010384:	801a      	strh	r2, [r3, #0]
 8010386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801038a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801038e:	460a      	mov	r2, r1
 8010390:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8010392:	f107 0310 	add.w	r3, r7, #16
 8010396:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801039a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801039e:	3308      	adds	r3, #8
 80103a0:	f107 0210 	add.w	r2, r7, #16
 80103a4:	4413      	add	r3, r2
 80103a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80103aa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80103ae:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80103b2:	4413      	add	r3, r2
 80103b4:	3309      	adds	r3, #9
 80103b6:	f107 0210 	add.w	r2, r7, #16
 80103ba:	4413      	add	r3, r2
 80103bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80103c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80103c8:	2200      	movs	r2, #0
 80103ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80103cc:	2300      	movs	r3, #0
 80103ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80103d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80103d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103da:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80103de:	7812      	ldrb	r2, [r2, #0]
 80103e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80103e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103e6:	3301      	adds	r3, #1
 80103e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80103ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80103f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103f4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80103f8:	8812      	ldrh	r2, [r2, #0]
 80103fa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80103fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010402:	3302      	adds	r3, #2
 8010404:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8010408:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801040c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010410:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8010414:	8812      	ldrh	r2, [r2, #0]
 8010416:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801041a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801041e:	3302      	adds	r3, #2
 8010420:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010428:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801042c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010430:	7812      	ldrb	r2, [r2, #0]
 8010432:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010434:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010438:	3301      	adds	r3, #1
 801043a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801043e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010442:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8010446:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010448:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801044c:	3301      	adds	r3, #1
 801044e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010452:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010456:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801045a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801045c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010460:	3301      	adds	r3, #1
 8010462:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8010466:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801046a:	3308      	adds	r3, #8
 801046c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8010470:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8010474:	4618      	mov	r0, r3
 8010476:	f001 f966 	bl	8011746 <Osal_MemCpy>
    index_input += Local_Name_Length;
 801047a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801047e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010482:	4413      	add	r3, r2
 8010484:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8010488:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801048c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010490:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010496:	3301      	adds	r3, #1
 8010498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801049c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80104a0:	3301      	adds	r3, #1
 80104a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80104a6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80104aa:	4618      	mov	r0, r3
 80104ac:	f001 f94b 	bl	8011746 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80104b0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80104b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80104b8:	4413      	add	r3, r2
 80104ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80104be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104c2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80104c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80104c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104cc:	3302      	adds	r3, #2
 80104ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80104d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104d6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80104da:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80104dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104e0:	3302      	adds	r3, #2
 80104e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80104e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80104ea:	2218      	movs	r2, #24
 80104ec:	2100      	movs	r1, #0
 80104ee:	4618      	mov	r0, r3
 80104f0:	f001 f939 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80104f4:	233f      	movs	r3, #63	@ 0x3f
 80104f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80104fa:	2383      	movs	r3, #131	@ 0x83
 80104fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010500:	f107 0310 	add.w	r3, r7, #16
 8010504:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010508:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801050c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010510:	f107 030f 	add.w	r3, r7, #15
 8010514:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010518:	2301      	movs	r3, #1
 801051a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801051e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010522:	2100      	movs	r1, #0
 8010524:	4618      	mov	r0, r3
 8010526:	f001 fba7 	bl	8011c78 <hci_send_req>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	da01      	bge.n	8010534 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8010530:	23ff      	movs	r3, #255	@ 0xff
 8010532:	e004      	b.n	801053e <aci_gap_set_discoverable+0x1ea>
  return status;
 8010534:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010538:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801053c:	781b      	ldrb	r3, [r3, #0]
}
 801053e:	4618      	mov	r0, r3
 8010540:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8010544:	46bd      	mov	sp, r7
 8010546:	bdb0      	pop	{r4, r5, r7, pc}

08010548 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b0cc      	sub	sp, #304	@ 0x130
 801054c:	af00      	add	r7, sp, #0
 801054e:	4602      	mov	r2, r0
 8010550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010554:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010558:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 801055a:	f107 0310 	add.w	r3, r7, #16
 801055e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010566:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8010574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010578:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801057c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010580:	7812      	ldrb	r2, [r2, #0]
 8010582:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010588:	3301      	adds	r3, #1
 801058a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801058e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010592:	2218      	movs	r2, #24
 8010594:	2100      	movs	r1, #0
 8010596:	4618      	mov	r0, r3
 8010598:	f001 f8e5 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 801059c:	233f      	movs	r3, #63	@ 0x3f
 801059e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80105a2:	2385      	movs	r3, #133	@ 0x85
 80105a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80105a8:	f107 0310 	add.w	r3, r7, #16
 80105ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80105b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80105b8:	f107 030f 	add.w	r3, r7, #15
 80105bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80105c0:	2301      	movs	r3, #1
 80105c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80105c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80105ca:	2100      	movs	r1, #0
 80105cc:	4618      	mov	r0, r3
 80105ce:	f001 fb53 	bl	8011c78 <hci_send_req>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	da01      	bge.n	80105dc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80105d8:	23ff      	movs	r3, #255	@ 0xff
 80105da:	e004      	b.n	80105e6 <aci_gap_set_io_capability+0x9e>
  return status;
 80105dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80105e4:	781b      	ldrb	r3, [r3, #0]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80105f0:	b5b0      	push	{r4, r5, r7, lr}
 80105f2:	b0cc      	sub	sp, #304	@ 0x130
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4605      	mov	r5, r0
 80105f8:	460c      	mov	r4, r1
 80105fa:	4610      	mov	r0, r2
 80105fc:	4619      	mov	r1, r3
 80105fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010602:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010606:	462a      	mov	r2, r5
 8010608:	701a      	strb	r2, [r3, #0]
 801060a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801060e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010612:	4622      	mov	r2, r4
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801061a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801061e:	4602      	mov	r2, r0
 8010620:	701a      	strb	r2, [r3, #0]
 8010622:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010626:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801062a:	460a      	mov	r2, r1
 801062c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801062e:	f107 0310 	add.w	r3, r7, #16
 8010632:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010636:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801063a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801063e:	2200      	movs	r2, #0
 8010640:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8010648:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801064c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010650:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010654:	7812      	ldrb	r2, [r2, #0]
 8010656:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010658:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801065c:	3301      	adds	r3, #1
 801065e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8010662:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010666:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801066a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801066e:	7812      	ldrb	r2, [r2, #0]
 8010670:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010672:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010676:	3301      	adds	r3, #1
 8010678:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 801067c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010680:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010684:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010688:	7812      	ldrb	r2, [r2, #0]
 801068a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801068c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010690:	3301      	adds	r3, #1
 8010692:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8010696:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801069a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801069e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80106a2:	7812      	ldrb	r2, [r2, #0]
 80106a4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80106a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106aa:	3301      	adds	r3, #1
 80106ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80106b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106b4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80106b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80106ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106be:	3301      	adds	r3, #1
 80106c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80106c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106c8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80106cc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80106ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106d2:	3301      	adds	r3, #1
 80106d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80106d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106dc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80106e0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80106e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106e6:	3301      	adds	r3, #1
 80106e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80106ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80106f4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80106f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106fc:	3304      	adds	r3, #4
 80106fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8010702:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010706:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801070a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801070c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010710:	3301      	adds	r3, #1
 8010712:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801071a:	2218      	movs	r2, #24
 801071c:	2100      	movs	r1, #0
 801071e:	4618      	mov	r0, r3
 8010720:	f001 f821 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010724:	233f      	movs	r3, #63	@ 0x3f
 8010726:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801072a:	2386      	movs	r3, #134	@ 0x86
 801072c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010730:	f107 0310 	add.w	r3, r7, #16
 8010734:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010738:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801073c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010740:	f107 030f 	add.w	r3, r7, #15
 8010744:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010748:	2301      	movs	r3, #1
 801074a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801074e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010752:	2100      	movs	r1, #0
 8010754:	4618      	mov	r0, r3
 8010756:	f001 fa8f 	bl	8011c78 <hci_send_req>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	da01      	bge.n	8010764 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8010760:	23ff      	movs	r3, #255	@ 0xff
 8010762:	e004      	b.n	801076e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8010764:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010768:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801076c:	781b      	ldrb	r3, [r3, #0]
}
 801076e:	4618      	mov	r0, r3
 8010770:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010774:	46bd      	mov	sp, r7
 8010776:	bdb0      	pop	{r4, r5, r7, pc}

08010778 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b0cc      	sub	sp, #304	@ 0x130
 801077c:	af00      	add	r7, sp, #0
 801077e:	4602      	mov	r2, r0
 8010780:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010784:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010788:	6019      	str	r1, [r3, #0]
 801078a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801078e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010792:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8010794:	f107 0310 	add.w	r3, r7, #16
 8010798:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801079c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80107a4:	2200      	movs	r2, #0
 80107a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80107ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80107b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80107b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80107ba:	8812      	ldrh	r2, [r2, #0]
 80107bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80107be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107c2:	3302      	adds	r3, #2
 80107c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80107c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80107cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80107d0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80107d4:	6812      	ldr	r2, [r2, #0]
 80107d6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80107da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107de:	3304      	adds	r3, #4
 80107e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107e8:	2218      	movs	r2, #24
 80107ea:	2100      	movs	r1, #0
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 ffba 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80107f2:	233f      	movs	r3, #63	@ 0x3f
 80107f4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80107f8:	2388      	movs	r3, #136	@ 0x88
 80107fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80107fe:	f107 0310 	add.w	r3, r7, #16
 8010802:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010806:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801080a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801080e:	f107 030f 	add.w	r3, r7, #15
 8010812:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010816:	2301      	movs	r3, #1
 8010818:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801081c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010820:	2100      	movs	r1, #0
 8010822:	4618      	mov	r0, r3
 8010824:	f001 fa28 	bl	8011c78 <hci_send_req>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	da01      	bge.n	8010832 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801082e:	23ff      	movs	r3, #255	@ 0xff
 8010830:	e004      	b.n	801083c <aci_gap_pass_key_resp+0xc4>
  return status;
 8010832:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010836:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801083a:	781b      	ldrb	r3, [r3, #0]
}
 801083c:	4618      	mov	r0, r3
 801083e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8010846:	b590      	push	{r4, r7, lr}
 8010848:	b0cd      	sub	sp, #308	@ 0x134
 801084a:	af00      	add	r7, sp, #0
 801084c:	4604      	mov	r4, r0
 801084e:	4608      	mov	r0, r1
 8010850:	4611      	mov	r1, r2
 8010852:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010856:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801085a:	6013      	str	r3, [r2, #0]
 801085c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010860:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010864:	4622      	mov	r2, r4
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801086c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010870:	4602      	mov	r2, r0
 8010872:	701a      	strb	r2, [r3, #0]
 8010874:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010878:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801087c:	460a      	mov	r2, r1
 801087e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8010880:	f107 0310 	add.w	r3, r7, #16
 8010884:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010888:	f107 0308 	add.w	r3, r7, #8
 801088c:	2207      	movs	r2, #7
 801088e:	2100      	movs	r1, #0
 8010890:	4618      	mov	r0, r3
 8010892:	f000 ff68 	bl	8011766 <Osal_MemSet>
  int index_input = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801089c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80108a8:	7812      	ldrb	r2, [r2, #0]
 80108aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80108ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108b0:	3301      	adds	r3, #1
 80108b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80108b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80108c2:	7812      	ldrb	r2, [r2, #0]
 80108c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80108c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108ca:	3301      	adds	r3, #1
 80108cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80108d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80108dc:	7812      	ldrb	r2, [r2, #0]
 80108de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80108e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108e4:	3301      	adds	r3, #1
 80108e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80108ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108ee:	2218      	movs	r2, #24
 80108f0:	2100      	movs	r1, #0
 80108f2:	4618      	mov	r0, r3
 80108f4:	f000 ff37 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80108f8:	233f      	movs	r3, #63	@ 0x3f
 80108fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80108fe:	238a      	movs	r3, #138	@ 0x8a
 8010900:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010904:	f107 0310 	add.w	r3, r7, #16
 8010908:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801090c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010910:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8010914:	f107 0308 	add.w	r3, r7, #8
 8010918:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801091c:	2307      	movs	r3, #7
 801091e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010922:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010926:	2100      	movs	r1, #0
 8010928:	4618      	mov	r0, r3
 801092a:	f001 f9a5 	bl	8011c78 <hci_send_req>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	da01      	bge.n	8010938 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8010934:	23ff      	movs	r3, #255	@ 0xff
 8010936:	e02e      	b.n	8010996 <aci_gap_init+0x150>
  if ( resp.Status )
 8010938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801093c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d005      	beq.n	8010952 <aci_gap_init+0x10c>
    return resp.Status;
 8010946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801094a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	e021      	b.n	8010996 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8010952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010956:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801095a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801095e:	b29a      	uxth	r2, r3
 8010960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010964:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801096c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010970:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010974:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010978:	b29a      	uxth	r2, r3
 801097a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801097e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8010980:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010984:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010988:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801098c:	b29a      	uxth	r2, r3
 801098e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010992:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801099c:	46bd      	mov	sp, r7
 801099e:	bd90      	pop	{r4, r7, pc}

080109a0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b0cc      	sub	sp, #304	@ 0x130
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	4602      	mov	r2, r0
 80109a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80109b0:	6019      	str	r1, [r3, #0]
 80109b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109b6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80109bc:	f107 0310 	add.w	r3, r7, #16
 80109c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80109d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109de:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80109e2:	7812      	ldrb	r2, [r2, #0]
 80109e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109ea:	3301      	adds	r3, #1
 80109ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80109f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109f4:	1c58      	adds	r0, r3, #1
 80109f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109fe:	781a      	ldrb	r2, [r3, #0]
 8010a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010a08:	6819      	ldr	r1, [r3, #0]
 8010a0a:	f000 fe9c 	bl	8011746 <Osal_MemCpy>
  index_input += AdvDataLen;
 8010a0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a12:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a26:	2218      	movs	r2, #24
 8010a28:	2100      	movs	r1, #0
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 fe9b 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a30:	233f      	movs	r3, #63	@ 0x3f
 8010a32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8010a36:	238e      	movs	r3, #142	@ 0x8e
 8010a38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a3c:	f107 0310 	add.w	r3, r7, #16
 8010a40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a4c:	f107 030f 	add.w	r3, r7, #15
 8010a50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a54:	2301      	movs	r3, #1
 8010a56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a5e:	2100      	movs	r1, #0
 8010a60:	4618      	mov	r0, r3
 8010a62:	f001 f909 	bl	8011c78 <hci_send_req>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	da01      	bge.n	8010a70 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8010a6c:	23ff      	movs	r3, #255	@ 0xff
 8010a6e:	e004      	b.n	8010a7a <aci_gap_update_adv_data+0xda>
  return status;
 8010a70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a78:	781b      	ldrb	r3, [r3, #0]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a8e:	f107 0308 	add.w	r3, r7, #8
 8010a92:	2218      	movs	r2, #24
 8010a94:	2100      	movs	r1, #0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fe65 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a9c:	233f      	movs	r3, #63	@ 0x3f
 8010a9e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8010aa0:	2392      	movs	r3, #146	@ 0x92
 8010aa2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010aa4:	1dfb      	adds	r3, r7, #7
 8010aa6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010aac:	f107 0308 	add.w	r3, r7, #8
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f001 f8e0 	bl	8011c78 <hci_send_req>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	da01      	bge.n	8010ac2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010abe:	23ff      	movs	r3, #255	@ 0xff
 8010ac0:	e000      	b.n	8010ac4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3720      	adds	r7, #32
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b0cc      	sub	sp, #304	@ 0x130
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ad8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010adc:	801a      	strh	r2, [r3, #0]
 8010ade:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ae2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010ae6:	460a      	mov	r2, r1
 8010ae8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8010aea:	f107 0310 	add.w	r3, r7, #16
 8010aee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010af6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010afa:	2200      	movs	r2, #0
 8010afc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010afe:	2300      	movs	r3, #0
 8010b00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010b10:	8812      	ldrh	r2, [r2, #0]
 8010b12:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b18:	3302      	adds	r3, #2
 8010b1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b26:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010b2a:	7812      	ldrb	r2, [r2, #0]
 8010b2c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b32:	3301      	adds	r3, #1
 8010b34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b3c:	2218      	movs	r2, #24
 8010b3e:	2100      	movs	r1, #0
 8010b40:	4618      	mov	r0, r3
 8010b42:	f000 fe10 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b46:	233f      	movs	r3, #63	@ 0x3f
 8010b48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8010b4c:	23a5      	movs	r3, #165	@ 0xa5
 8010b4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010b52:	f107 0310 	add.w	r3, r7, #16
 8010b56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010b62:	f107 030f 	add.w	r3, r7, #15
 8010b66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b74:	2100      	movs	r1, #0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f001 f87e 	bl	8011c78 <hci_send_req>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	da01      	bge.n	8010b86 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8010b82:	23ff      	movs	r3, #255	@ 0xff
 8010b84:	e004      	b.n	8010b90 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8010b86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b8e:	781b      	ldrb	r3, [r3, #0]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b088      	sub	sp, #32
 8010b9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	2218      	movs	r2, #24
 8010baa:	2100      	movs	r1, #0
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fdda 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010bb2:	233f      	movs	r3, #63	@ 0x3f
 8010bb4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8010bb6:	f240 1301 	movw	r3, #257	@ 0x101
 8010bba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010bbc:	1dfb      	adds	r3, r7, #7
 8010bbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010bc4:	f107 0308 	add.w	r3, r7, #8
 8010bc8:	2100      	movs	r1, #0
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f001 f854 	bl	8011c78 <hci_send_req>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	da01      	bge.n	8010bda <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8010bd6:	23ff      	movs	r3, #255	@ 0xff
 8010bd8:	e000      	b.n	8010bdc <aci_gatt_init+0x42>
  return status;
 8010bda:	79fb      	ldrb	r3, [r7, #7]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3720      	adds	r7, #32
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010be4:	b590      	push	{r4, r7, lr}
 8010be6:	b0cf      	sub	sp, #316	@ 0x13c
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4604      	mov	r4, r0
 8010bec:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010bf0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8010bf4:	6001      	str	r1, [r0, #0]
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bfe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c02:	4622      	mov	r2, r4
 8010c04:	701a      	strb	r2, [r3, #0]
 8010c06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010c0e:	4602      	mov	r2, r0
 8010c10:	701a      	strb	r2, [r3, #0]
 8010c12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c16:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010c1a:	460a      	mov	r2, r1
 8010c1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010c1e:	f107 0310 	add.w	r3, r7, #16
 8010c22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8010c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c2a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d00a      	beq.n	8010c4a <aci_gatt_add_service+0x66>
 8010c34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c38:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d101      	bne.n	8010c46 <aci_gatt_add_service+0x62>
 8010c42:	2311      	movs	r3, #17
 8010c44:	e002      	b.n	8010c4c <aci_gatt_add_service+0x68>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e000      	b.n	8010c4c <aci_gatt_add_service+0x68>
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	f107 0210 	add.w	r2, r7, #16
 8010c50:	4413      	add	r3, r2
 8010c52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010c56:	f107 030c 	add.w	r3, r7, #12
 8010c5a:	2203      	movs	r2, #3
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f000 fd81 	bl	8011766 <Osal_MemSet>
  int index_input = 0;
 8010c64:	2300      	movs	r3, #0
 8010c66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8010c6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010c6e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010c72:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8010c76:	7812      	ldrb	r2, [r2, #0]
 8010c78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c7e:	3301      	adds	r3, #1
 8010c80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8010c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c88:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d002      	beq.n	8010c98 <aci_gatt_add_service+0xb4>
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d004      	beq.n	8010ca0 <aci_gatt_add_service+0xbc>
 8010c96:	e007      	b.n	8010ca8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8010c98:	2302      	movs	r3, #2
 8010c9a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010c9e:	e005      	b.n	8010cac <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010ca0:	2310      	movs	r3, #16
 8010ca2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010ca6:	e001      	b.n	8010cac <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010ca8:	2397      	movs	r3, #151	@ 0x97
 8010caa:	e06c      	b.n	8010d86 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010cac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010cb0:	1c58      	adds	r0, r3, #1
 8010cb2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8010cb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010cba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	f000 fd41 	bl	8011746 <Osal_MemCpy>
    index_input += size;
 8010cc4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010cc8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010ccc:	4413      	add	r3, r2
 8010cce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8010cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cd6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010cda:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010cde:	7812      	ldrb	r2, [r2, #0]
 8010ce0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cf0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010cf4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010cf8:	7812      	ldrb	r2, [r2, #0]
 8010cfa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d00:	3301      	adds	r3, #1
 8010d02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010d06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d0a:	2218      	movs	r2, #24
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 fd29 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010d14:	233f      	movs	r3, #63	@ 0x3f
 8010d16:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8010d1a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8010d1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010d22:	f107 0310 	add.w	r3, r7, #16
 8010d26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8010d32:	f107 030c 	add.w	r3, r7, #12
 8010d36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010d3a:	2303      	movs	r3, #3
 8010d3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d44:	2100      	movs	r1, #0
 8010d46:	4618      	mov	r0, r3
 8010d48:	f000 ff96 	bl	8011c78 <hci_send_req>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	da01      	bge.n	8010d56 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8010d52:	23ff      	movs	r3, #255	@ 0xff
 8010d54:	e017      	b.n	8010d86 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8010d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d005      	beq.n	8010d70 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8010d64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	e00a      	b.n	8010d86 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8010d70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010d82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd90      	pop	{r4, r7, pc}

08010d90 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010d90:	b590      	push	{r4, r7, lr}
 8010d92:	b0d1      	sub	sp, #324	@ 0x144
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4604      	mov	r4, r0
 8010d98:	4608      	mov	r0, r1
 8010d9a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8010d9e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010da2:	600a      	str	r2, [r1, #0]
 8010da4:	4619      	mov	r1, r3
 8010da6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010daa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010dae:	4622      	mov	r2, r4
 8010db0:	801a      	strh	r2, [r3, #0]
 8010db2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010db6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010dba:	4602      	mov	r2, r0
 8010dbc:	701a      	strb	r2, [r3, #0]
 8010dbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dc2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8010dc6:	460a      	mov	r2, r1
 8010dc8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010dca:	f107 0318 	add.w	r3, r7, #24
 8010dce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010dd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dd6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d00a      	beq.n	8010df6 <aci_gatt_add_char+0x66>
 8010de0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010de4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b02      	cmp	r3, #2
 8010dec:	d101      	bne.n	8010df2 <aci_gatt_add_char+0x62>
 8010dee:	2313      	movs	r3, #19
 8010df0:	e002      	b.n	8010df8 <aci_gatt_add_char+0x68>
 8010df2:	2303      	movs	r3, #3
 8010df4:	e000      	b.n	8010df8 <aci_gatt_add_char+0x68>
 8010df6:	2305      	movs	r3, #5
 8010df8:	f107 0218 	add.w	r2, r7, #24
 8010dfc:	4413      	add	r3, r2
 8010dfe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010e02:	f107 0314 	add.w	r3, r7, #20
 8010e06:	2203      	movs	r2, #3
 8010e08:	2100      	movs	r1, #0
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f000 fcab 	bl	8011766 <Osal_MemSet>
  int index_input = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8010e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010e1a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010e1e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010e22:	8812      	ldrh	r2, [r2, #0]
 8010e24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010e2a:	3302      	adds	r3, #2
 8010e2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010e30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010e34:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010e38:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010e3c:	7812      	ldrb	r2, [r2, #0]
 8010e3e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010e40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010e44:	3301      	adds	r3, #1
 8010e46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010e4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010e4e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d002      	beq.n	8010e5e <aci_gatt_add_char+0xce>
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d004      	beq.n	8010e66 <aci_gatt_add_char+0xd6>
 8010e5c:	e007      	b.n	8010e6e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010e5e:	2302      	movs	r3, #2
 8010e60:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010e64:	e005      	b.n	8010e72 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8010e66:	2310      	movs	r3, #16
 8010e68:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010e6c:	e001      	b.n	8010e72 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010e6e:	2397      	movs	r3, #151	@ 0x97
 8010e70:	e091      	b.n	8010f96 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8010e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010e76:	1cd8      	adds	r0, r3, #3
 8010e78:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8010e7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010e80:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010e84:	6819      	ldr	r1, [r3, #0]
 8010e86:	f000 fc5e 	bl	8011746 <Osal_MemCpy>
    index_input += size;
 8010e8a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8010e8e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010e92:	4413      	add	r3, r2
 8010e94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010e9c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010ea0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8010ea4:	8812      	ldrh	r2, [r2, #0]
 8010ea6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010ea8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010eac:	3302      	adds	r3, #2
 8010eae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010eb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010eb6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010eba:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010ebc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8010ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010eca:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010ece:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010ed0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ede:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010ee2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ee8:	3301      	adds	r3, #1
 8010eea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010eee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ef2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8010ef6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010ef8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010efc:	3301      	adds	r3, #1
 8010efe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010f06:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010f0a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010f0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010f10:	3301      	adds	r3, #1
 8010f12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010f16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f1a:	2218      	movs	r2, #24
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f000 fc21 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010f24:	233f      	movs	r3, #63	@ 0x3f
 8010f26:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8010f2a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8010f2e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8010f32:	f107 0318 	add.w	r3, r7, #24
 8010f36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8010f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010f3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8010f42:	f107 0314 	add.w	r3, r7, #20
 8010f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010f50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f54:	2100      	movs	r1, #0
 8010f56:	4618      	mov	r0, r3
 8010f58:	f000 fe8e 	bl	8011c78 <hci_send_req>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	da01      	bge.n	8010f66 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8010f62:	23ff      	movs	r3, #255	@ 0xff
 8010f64:	e017      	b.n	8010f96 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8010f66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d005      	beq.n	8010f80 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8010f74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	e00a      	b.n	8010f96 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010f80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010f92:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}

08010fa0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010fa0:	b5b0      	push	{r4, r5, r7, lr}
 8010fa2:	b0cc      	sub	sp, #304	@ 0x130
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	460c      	mov	r4, r1
 8010faa:	4610      	mov	r0, r2
 8010fac:	4619      	mov	r1, r3
 8010fae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fb2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010fb6:	462a      	mov	r2, r5
 8010fb8:	801a      	strh	r2, [r3, #0]
 8010fba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010fc2:	4622      	mov	r2, r4
 8010fc4:	801a      	strh	r2, [r3, #0]
 8010fc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fca:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010fce:	4602      	mov	r2, r0
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fd6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010fda:	460a      	mov	r2, r1
 8010fdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010fde:	f107 0310 	add.w	r3, r7, #16
 8010fe2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010fe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010fee:	2200      	movs	r2, #0
 8010ff0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ffc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011000:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8011004:	8812      	ldrh	r2, [r2, #0]
 8011006:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801100c:	3302      	adds	r3, #2
 801100e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8011012:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011016:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801101a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801101e:	8812      	ldrh	r2, [r2, #0]
 8011020:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8011022:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011026:	3302      	adds	r3, #2
 8011028:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 801102c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011030:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011034:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8011038:	7812      	ldrb	r2, [r2, #0]
 801103a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801103c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011040:	3301      	adds	r3, #1
 8011042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8011046:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801104a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801104e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8011052:	7812      	ldrb	r2, [r2, #0]
 8011054:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8011056:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801105a:	3301      	adds	r3, #1
 801105c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8011060:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011064:	1d98      	adds	r0, r3, #6
 8011066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801106a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	461a      	mov	r2, r3
 8011072:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8011076:	f000 fb66 	bl	8011746 <Osal_MemCpy>
  index_input += Char_Value_Length;
 801107a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801107e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011088:	4413      	add	r3, r2
 801108a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801108e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011092:	2218      	movs	r2, #24
 8011094:	2100      	movs	r1, #0
 8011096:	4618      	mov	r0, r3
 8011098:	f000 fb65 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 801109c:	233f      	movs	r3, #63	@ 0x3f
 801109e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80110a2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80110a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80110aa:	f107 0310 	add.w	r3, r7, #16
 80110ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80110b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80110b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80110ba:	f107 030f 	add.w	r3, r7, #15
 80110be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80110c2:	2301      	movs	r3, #1
 80110c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80110c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fdd2 	bl	8011c78 <hci_send_req>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	da01      	bge.n	80110de <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80110da:	23ff      	movs	r3, #255	@ 0xff
 80110dc:	e004      	b.n	80110e8 <aci_gatt_update_char_value+0x148>
  return status;
 80110de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80110e6:	781b      	ldrb	r3, [r3, #0]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bdb0      	pop	{r4, r5, r7, pc}

080110f2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b0cc      	sub	sp, #304	@ 0x130
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	4602      	mov	r2, r0
 80110fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011102:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8011104:	f107 0310 	add.w	r3, r7, #16
 8011108:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801110c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011110:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011114:	2200      	movs	r2, #0
 8011116:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801111e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011122:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011126:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801112a:	8812      	ldrh	r2, [r2, #0]
 801112c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801112e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011132:	3302      	adds	r3, #2
 8011134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011138:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801113c:	2218      	movs	r2, #24
 801113e:	2100      	movs	r1, #0
 8011140:	4618      	mov	r0, r3
 8011142:	f000 fb10 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011146:	233f      	movs	r3, #63	@ 0x3f
 8011148:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 801114c:	f240 1325 	movw	r3, #293	@ 0x125
 8011150:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011154:	f107 0310 	add.w	r3, r7, #16
 8011158:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801115c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011160:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011164:	f107 030f 	add.w	r3, r7, #15
 8011168:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801116c:	2301      	movs	r3, #1
 801116e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f000 fd7d 	bl	8011c78 <hci_send_req>
 801117e:	4603      	mov	r3, r0
 8011180:	2b00      	cmp	r3, #0
 8011182:	da01      	bge.n	8011188 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8011184:	23ff      	movs	r3, #255	@ 0xff
 8011186:	e004      	b.n	8011192 <aci_gatt_confirm_indication+0xa0>
  return status;
 8011188:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801118c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011190:	781b      	ldrb	r3, [r3, #0]
}
 8011192:	4618      	mov	r0, r3
 8011194:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b0cc      	sub	sp, #304	@ 0x130
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	4602      	mov	r2, r0
 80111a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80111a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80111ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80111ae:	f107 0310 	add.w	r3, r7, #16
 80111b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80111b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80111ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80111be:	2200      	movs	r2, #0
 80111c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80111c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80111cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80111d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80111d4:	8812      	ldrh	r2, [r2, #0]
 80111d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80111d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80111dc:	3302      	adds	r3, #2
 80111de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80111e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80111e6:	2218      	movs	r2, #24
 80111e8:	2100      	movs	r1, #0
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 fabb 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80111f0:	233f      	movs	r3, #63	@ 0x3f
 80111f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 80111f6:	f240 1327 	movw	r3, #295	@ 0x127
 80111fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80111fe:	f107 0310 	add.w	r3, r7, #16
 8011202:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011206:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801120a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801120e:	f107 030f 	add.w	r3, r7, #15
 8011212:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011216:	2301      	movs	r3, #1
 8011218:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801121c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011220:	2100      	movs	r1, #0
 8011222:	4618      	mov	r0, r3
 8011224:	f000 fd28 	bl	8011c78 <hci_send_req>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	da01      	bge.n	8011232 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 801122e:	23ff      	movs	r3, #255	@ 0xff
 8011230:	e004      	b.n	801123c <aci_gatt_allow_read+0xa0>
  return status;
 8011232:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011236:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801123a:	781b      	ldrb	r3, [r3, #0]
}
 801123c:	4618      	mov	r0, r3
 801123e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}

08011246 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8011246:	b580      	push	{r7, lr}
 8011248:	b0cc      	sub	sp, #304	@ 0x130
 801124a:	af00      	add	r7, sp, #0
 801124c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011250:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011254:	601a      	str	r2, [r3, #0]
 8011256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801125a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801125e:	4602      	mov	r2, r0
 8011260:	701a      	strb	r2, [r3, #0]
 8011262:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011266:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801126a:	460a      	mov	r2, r1
 801126c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 801126e:	f107 0310 	add.w	r3, r7, #16
 8011272:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801127a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801127e:	2200      	movs	r2, #0
 8011280:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8011288:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801128c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011290:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011294:	7812      	ldrb	r2, [r2, #0]
 8011296:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011298:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801129c:	3301      	adds	r3, #1
 801129e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80112a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80112a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80112aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80112ae:	7812      	ldrb	r2, [r2, #0]
 80112b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80112b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80112b6:	3301      	adds	r3, #1
 80112b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80112bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80112c0:	1c98      	adds	r0, r3, #2
 80112c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112c6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80112ca:	781a      	ldrb	r2, [r3, #0]
 80112cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80112d4:	6819      	ldr	r1, [r3, #0]
 80112d6:	f000 fa36 	bl	8011746 <Osal_MemCpy>
  index_input += Length;
 80112da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80112e8:	4413      	add	r3, r2
 80112ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80112ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80112f2:	2218      	movs	r2, #24
 80112f4:	2100      	movs	r1, #0
 80112f6:	4618      	mov	r0, r3
 80112f8:	f000 fa35 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80112fc:	233f      	movs	r3, #63	@ 0x3f
 80112fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8011302:	230c      	movs	r3, #12
 8011304:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011308:	f107 0310 	add.w	r3, r7, #16
 801130c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011314:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011318:	f107 030f 	add.w	r3, r7, #15
 801131c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011320:	2301      	movs	r3, #1
 8011322:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801132a:	2100      	movs	r1, #0
 801132c:	4618      	mov	r0, r3
 801132e:	f000 fca3 	bl	8011c78 <hci_send_req>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	da01      	bge.n	801133c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8011338:	23ff      	movs	r3, #255	@ 0xff
 801133a:	e004      	b.n	8011346 <aci_hal_write_config_data+0x100>
  return status;
 801133c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011340:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011344:	781b      	ldrb	r3, [r3, #0]
}
 8011346:	4618      	mov	r0, r3
 8011348:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b0cc      	sub	sp, #304	@ 0x130
 8011354:	af00      	add	r7, sp, #0
 8011356:	4602      	mov	r2, r0
 8011358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801135c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011366:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801136a:	460a      	mov	r2, r1
 801136c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 801136e:	f107 0310 	add.w	r3, r7, #16
 8011372:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801137a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801137e:	2200      	movs	r2, #0
 8011380:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011382:	2300      	movs	r3, #0
 8011384:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8011388:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801138c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011390:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011394:	7812      	ldrb	r2, [r2, #0]
 8011396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801139c:	3301      	adds	r3, #1
 801139e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80113a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80113a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80113aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80113ae:	7812      	ldrb	r2, [r2, #0]
 80113b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80113b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113b6:	3301      	adds	r3, #1
 80113b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80113bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113c0:	2218      	movs	r2, #24
 80113c2:	2100      	movs	r1, #0
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 f9ce 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80113ca:	233f      	movs	r3, #63	@ 0x3f
 80113cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80113d0:	230f      	movs	r3, #15
 80113d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80113d6:	f107 0310 	add.w	r3, r7, #16
 80113da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80113de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80113e6:	f107 030f 	add.w	r3, r7, #15
 80113ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80113ee:	2301      	movs	r3, #1
 80113f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80113f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113f8:	2100      	movs	r1, #0
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 fc3c 	bl	8011c78 <hci_send_req>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	da01      	bge.n	801140a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8011406:	23ff      	movs	r3, #255	@ 0xff
 8011408:	e004      	b.n	8011414 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801140a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801140e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011412:	781b      	ldrb	r3, [r3, #0]
}
 8011414:	4618      	mov	r0, r3
 8011416:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b0cc      	sub	sp, #304	@ 0x130
 8011422:	af00      	add	r7, sp, #0
 8011424:	4602      	mov	r2, r0
 8011426:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801142a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801142e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8011430:	f107 0310 	add.w	r3, r7, #16
 8011434:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801143c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011440:	2200      	movs	r2, #0
 8011442:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011444:	2300      	movs	r3, #0
 8011446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801144a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801144e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011452:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8011456:	8812      	ldrh	r2, [r2, #0]
 8011458:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801145a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801145e:	3302      	adds	r3, #2
 8011460:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011468:	2218      	movs	r2, #24
 801146a:	2100      	movs	r1, #0
 801146c:	4618      	mov	r0, r3
 801146e:	f000 f97a 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011472:	233f      	movs	r3, #63	@ 0x3f
 8011474:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8011478:	2318      	movs	r3, #24
 801147a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801147e:	f107 0310 	add.w	r3, r7, #16
 8011482:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011486:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801148a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801148e:	f107 030f 	add.w	r3, r7, #15
 8011492:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011496:	2301      	movs	r3, #1
 8011498:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801149c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80114a0:	2100      	movs	r1, #0
 80114a2:	4618      	mov	r0, r3
 80114a4:	f000 fbe8 	bl	8011c78 <hci_send_req>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	da01      	bge.n	80114b2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80114ae:	23ff      	movs	r3, #255	@ 0xff
 80114b0:	e004      	b.n	80114bc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80114b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80114b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80114ba:	781b      	ldrb	r3, [r3, #0]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b088      	sub	sp, #32
 80114ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80114cc:	2300      	movs	r3, #0
 80114ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80114d0:	f107 0308 	add.w	r3, r7, #8
 80114d4:	2218      	movs	r2, #24
 80114d6:	2100      	movs	r1, #0
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 f944 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x03;
 80114de:	2303      	movs	r3, #3
 80114e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80114e2:	2303      	movs	r3, #3
 80114e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80114e6:	1dfb      	adds	r3, r7, #7
 80114e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80114ea:	2301      	movs	r3, #1
 80114ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80114ee:	f107 0308 	add.w	r3, r7, #8
 80114f2:	2100      	movs	r1, #0
 80114f4:	4618      	mov	r0, r3
 80114f6:	f000 fbbf 	bl	8011c78 <hci_send_req>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	da01      	bge.n	8011504 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8011500:	23ff      	movs	r3, #255	@ 0xff
 8011502:	e000      	b.n	8011506 <hci_reset+0x40>
  return status;
 8011504:	79fb      	ldrb	r3, [r7, #7]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3720      	adds	r7, #32
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 801150e:	b590      	push	{r4, r7, lr}
 8011510:	b0cd      	sub	sp, #308	@ 0x134
 8011512:	af00      	add	r7, sp, #0
 8011514:	4604      	mov	r4, r0
 8011516:	4608      	mov	r0, r1
 8011518:	4611      	mov	r1, r2
 801151a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801151e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011522:	4622      	mov	r2, r4
 8011524:	701a      	strb	r2, [r3, #0]
 8011526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801152a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801152e:	4602      	mov	r2, r0
 8011530:	701a      	strb	r2, [r3, #0]
 8011532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011536:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801153a:	460a      	mov	r2, r1
 801153c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801153e:	f107 0310 	add.w	r3, r7, #16
 8011542:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801154a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801154e:	2200      	movs	r2, #0
 8011550:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8011558:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801155c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011560:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011564:	7812      	ldrb	r2, [r2, #0]
 8011566:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011568:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801156c:	3301      	adds	r3, #1
 801156e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8011572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011576:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801157a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801157e:	7812      	ldrb	r2, [r2, #0]
 8011580:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011582:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011586:	3301      	adds	r3, #1
 8011588:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801158c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011590:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011594:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8011598:	7812      	ldrb	r2, [r2, #0]
 801159a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801159c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80115a0:	3301      	adds	r3, #1
 80115a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80115a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80115aa:	2218      	movs	r2, #24
 80115ac:	2100      	movs	r1, #0
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 f8d9 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x08;
 80115b4:	2308      	movs	r3, #8
 80115b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80115ba:	2331      	movs	r3, #49	@ 0x31
 80115bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80115c0:	f107 0310 	add.w	r3, r7, #16
 80115c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80115c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80115cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80115d0:	f107 030f 	add.w	r3, r7, #15
 80115d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80115d8:	2301      	movs	r3, #1
 80115da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80115e2:	2100      	movs	r1, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 fb47 	bl	8011c78 <hci_send_req>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	da01      	bge.n	80115f4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80115f0:	23ff      	movs	r3, #255	@ 0xff
 80115f2:	e004      	b.n	80115fe <hci_le_set_default_phy+0xf0>
  return status;
 80115f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80115f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80115fc:	781b      	ldrb	r3, [r3, #0]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8011604:	46bd      	mov	sp, r7
 8011606:	bd90      	pop	{r4, r7, pc}

08011608 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8011608:	b5b0      	push	{r4, r5, r7, lr}
 801160a:	b0cc      	sub	sp, #304	@ 0x130
 801160c:	af00      	add	r7, sp, #0
 801160e:	4605      	mov	r5, r0
 8011610:	460c      	mov	r4, r1
 8011612:	4610      	mov	r0, r2
 8011614:	4619      	mov	r1, r3
 8011616:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801161a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801161e:	462a      	mov	r2, r5
 8011620:	801a      	strh	r2, [r3, #0]
 8011622:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011626:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801162a:	4622      	mov	r2, r4
 801162c:	801a      	strh	r2, [r3, #0]
 801162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011632:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8011636:	4602      	mov	r2, r0
 8011638:	801a      	strh	r2, [r3, #0]
 801163a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801163e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011642:	460a      	mov	r2, r1
 8011644:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8011646:	f107 0310 	add.w	r3, r7, #16
 801164a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801164e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011652:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011656:	2200      	movs	r2, #0
 8011658:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801165a:	2300      	movs	r3, #0
 801165c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8011660:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011664:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011668:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801166c:	8812      	ldrh	r2, [r2, #0]
 801166e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011670:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011674:	3302      	adds	r3, #2
 8011676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 801167a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801167e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011682:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8011686:	8812      	ldrh	r2, [r2, #0]
 8011688:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801168a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801168e:	3302      	adds	r3, #2
 8011690:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8011694:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011698:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801169c:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80116a0:	8812      	ldrh	r2, [r2, #0]
 80116a2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80116a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116a8:	3302      	adds	r3, #2
 80116aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 80116ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80116b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80116b6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80116ba:	8812      	ldrh	r2, [r2, #0]
 80116bc:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80116be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116c2:	3302      	adds	r3, #2
 80116c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80116c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80116cc:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80116d0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80116d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116d6:	3302      	adds	r3, #2
 80116d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80116e0:	2218      	movs	r2, #24
 80116e2:	2100      	movs	r1, #0
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 f83e 	bl	8011766 <Osal_MemSet>
  rq.ogf = 0x3f;
 80116ea:	233f      	movs	r3, #63	@ 0x3f
 80116ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 80116f0:	f240 1381 	movw	r3, #385	@ 0x181
 80116f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80116f8:	230f      	movs	r3, #15
 80116fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80116fe:	f107 0310 	add.w	r3, r7, #16
 8011702:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011706:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801170a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801170e:	f107 030f 	add.w	r3, r7, #15
 8011712:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011716:	2301      	movs	r3, #1
 8011718:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801171c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f000 faa8 	bl	8011c78 <hci_send_req>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	da01      	bge.n	8011732 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 801172e:	23ff      	movs	r3, #255	@ 0xff
 8011730:	e004      	b.n	801173c <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8011732:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011736:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801173a:	781b      	ldrb	r3, [r3, #0]
}
 801173c:	4618      	mov	r0, r3
 801173e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011742:	46bd      	mov	sp, r7
 8011744:	bdb0      	pop	{r4, r5, r7, pc}

08011746 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b084      	sub	sp, #16
 801174a:	af00      	add	r7, sp, #0
 801174c:	60f8      	str	r0, [r7, #12]
 801174e:	60b9      	str	r1, [r7, #8]
 8011750:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	68b9      	ldr	r1, [r7, #8]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f005 f89f 	bl	801689a <memcpy>
 801175c:	4603      	mov	r3, r0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b084      	sub	sp, #16
 801176a:	af00      	add	r7, sp, #0
 801176c:	60f8      	str	r0, [r7, #12]
 801176e:	60b9      	str	r1, [r7, #8]
 8011770:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	68b9      	ldr	r1, [r7, #8]
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f004 ffec 	bl	8016754 <memset>
 801177c:	4603      	mov	r3, r0
}
 801177e:	4618      	mov	r0, r3
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8011786:	b480      	push	{r7}
 8011788:	af00      	add	r7, sp, #0
  return;
 801178a:	bf00      	nop
}
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8011794:	b480      	push	{r7}
 8011796:	af00      	add	r7, sp, #0
  return;
 8011798:	bf00      	nop
}
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80117a2:	b480      	push	{r7}
 80117a4:	af00      	add	r7, sp, #0
  return;
 80117a6:	bf00      	nop
}
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80117b0:	b480      	push	{r7}
 80117b2:	af00      	add	r7, sp, #0
  return;
 80117b4:	bf00      	nop
}
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80117be:	b480      	push	{r7}
 80117c0:	af00      	add	r7, sp, #0
  return;
 80117c2:	bf00      	nop
}
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80117cc:	b480      	push	{r7}
 80117ce:	af00      	add	r7, sp, #0
  return;
 80117d0:	bf00      	nop
}
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80117da:	b480      	push	{r7}
 80117dc:	af00      	add	r7, sp, #0
  return;
 80117de:	bf00      	nop
}
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80117e8:	b480      	push	{r7}
 80117ea:	af00      	add	r7, sp, #0
  return;
 80117ec:	bf00      	nop
}
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80117f6:	b480      	push	{r7}
 80117f8:	af00      	add	r7, sp, #0
  return;
 80117fa:	bf00      	nop
}
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8011804:	b480      	push	{r7}
 8011806:	af00      	add	r7, sp, #0
  return;
 8011808:	bf00      	nop
}
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr

08011812 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8011812:	b480      	push	{r7}
 8011814:	af00      	add	r7, sp, #0
  return;
 8011816:	bf00      	nop
}
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8011820:	b480      	push	{r7}
 8011822:	af00      	add	r7, sp, #0
  return;
 8011824:	bf00      	nop
}
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr

0801182e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801182e:	b480      	push	{r7}
 8011830:	af00      	add	r7, sp, #0
  return;
 8011832:	bf00      	nop
}
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801183c:	b480      	push	{r7}
 801183e:	af00      	add	r7, sp, #0
  return;
 8011840:	bf00      	nop
}
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr

0801184a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801184a:	b480      	push	{r7}
 801184c:	af00      	add	r7, sp, #0
  return;
 801184e:	bf00      	nop
}
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8011858:	b480      	push	{r7}
 801185a:	af00      	add	r7, sp, #0
  return;
 801185c:	bf00      	nop
}
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8011866:	b480      	push	{r7}
 8011868:	af00      	add	r7, sp, #0
  return;
 801186a:	bf00      	nop
}
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8011878:	4b04      	ldr	r3, [pc, #16]	@ (801188c <SVCCTL_Init+0x18>)
 801187a:	2200      	movs	r2, #0
 801187c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801187e:	4b04      	ldr	r3, [pc, #16]	@ (8011890 <SVCCTL_Init+0x1c>)
 8011880:	2200      	movs	r2, #0
 8011882:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8011884:	f000 f806 	bl	8011894 <SVCCTL_SvcInit>

  return;
 8011888:	bf00      	nop
}
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20000188 	.word	0x20000188
 8011890:	200001a8 	.word	0x200001a8

08011894 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	af00      	add	r7, sp, #0
  BAS_Init();
 8011898:	f7ff ff75 	bl	8011786 <BAS_Init>

  BLS_Init();
 801189c:	f7ff ff7a 	bl	8011794 <BLS_Init>

  CRS_STM_Init();
 80118a0:	f7ff ff7f 	bl	80117a2 <CRS_STM_Init>

  DIS_Init();
 80118a4:	f7ff ff84 	bl	80117b0 <DIS_Init>

  EDS_STM_Init();
 80118a8:	f7ff ff89 	bl	80117be <EDS_STM_Init>

  HIDS_Init();
 80118ac:	f7ff ff8e 	bl	80117cc <HIDS_Init>

  HRS_Init();
 80118b0:	f7ff ff93 	bl	80117da <HRS_Init>

  HTS_Init();
 80118b4:	f7ff ff98 	bl	80117e8 <HTS_Init>

  IAS_Init();
 80118b8:	f7ff ff9d 	bl	80117f6 <IAS_Init>

  LLS_Init();
 80118bc:	f7ff ffa2 	bl	8011804 <LLS_Init>

  TPS_Init();
 80118c0:	f7ff ffa7 	bl	8011812 <TPS_Init>

  MOTENV_STM_Init();
 80118c4:	f7ff ffac 	bl	8011820 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80118c8:	f7ff ffb1 	bl	801182e <P2PS_STM_Init>

  ZDD_STM_Init();
 80118cc:	f7ff ffb6 	bl	801183c <ZDD_STM_Init>

  OTAS_STM_Init();
 80118d0:	f7ff ffbb 	bl	801184a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80118d4:	f7ff ffc7 	bl	8011866 <BVOPUS_STM_Init>

  MESH_Init();
 80118d8:	f7ff ffbe 	bl	8011858 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80118dc:	f002 ff2a 	bl	8014734 <SVCCTL_InitCustomSvc>
  
  return;
 80118e0:	bf00      	nop
}
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80118ec:	4b09      	ldr	r3, [pc, #36]	@ (8011914 <SVCCTL_RegisterSvcHandler+0x30>)
 80118ee:	7f1b      	ldrb	r3, [r3, #28]
 80118f0:	4619      	mov	r1, r3
 80118f2:	4a08      	ldr	r2, [pc, #32]	@ (8011914 <SVCCTL_RegisterSvcHandler+0x30>)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80118fa:	4b06      	ldr	r3, [pc, #24]	@ (8011914 <SVCCTL_RegisterSvcHandler+0x30>)
 80118fc:	7f1b      	ldrb	r3, [r3, #28]
 80118fe:	3301      	adds	r3, #1
 8011900:	b2da      	uxtb	r2, r3
 8011902:	4b04      	ldr	r3, [pc, #16]	@ (8011914 <SVCCTL_RegisterSvcHandler+0x30>)
 8011904:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8011906:	bf00      	nop
}
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	20000188 	.word	0x20000188

08011918 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b086      	sub	sp, #24
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3301      	adds	r3, #1
 8011924:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8011926:	2300      	movs	r3, #0
 8011928:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	2bff      	cmp	r3, #255	@ 0xff
 8011930:	d125      	bne.n	801197e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	3302      	adds	r3, #2
 8011936:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	b29b      	uxth	r3, r3
 801193e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011942:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011946:	d118      	bne.n	801197a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011948:	2300      	movs	r3, #0
 801194a:	757b      	strb	r3, [r7, #21]
 801194c:	e00d      	b.n	801196a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801194e:	7d7b      	ldrb	r3, [r7, #21]
 8011950:	4a1a      	ldr	r2, [pc, #104]	@ (80119bc <SVCCTL_UserEvtRx+0xa4>)
 8011952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	4798      	blx	r3
 801195a:	4603      	mov	r3, r0
 801195c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801195e:	7dfb      	ldrb	r3, [r7, #23]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d108      	bne.n	8011976 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011964:	7d7b      	ldrb	r3, [r7, #21]
 8011966:	3301      	adds	r3, #1
 8011968:	757b      	strb	r3, [r7, #21]
 801196a:	4b14      	ldr	r3, [pc, #80]	@ (80119bc <SVCCTL_UserEvtRx+0xa4>)
 801196c:	7f1b      	ldrb	r3, [r3, #28]
 801196e:	7d7a      	ldrb	r2, [r7, #21]
 8011970:	429a      	cmp	r2, r3
 8011972:	d3ec      	bcc.n	801194e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8011974:	e002      	b.n	801197c <SVCCTL_UserEvtRx+0x64>
              break;
 8011976:	bf00      	nop
          break;
 8011978:	e000      	b.n	801197c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801197a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801197c:	e000      	b.n	8011980 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801197e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8011980:	7dfb      	ldrb	r3, [r7, #23]
 8011982:	2b02      	cmp	r3, #2
 8011984:	d00f      	beq.n	80119a6 <SVCCTL_UserEvtRx+0x8e>
 8011986:	2b02      	cmp	r3, #2
 8011988:	dc10      	bgt.n	80119ac <SVCCTL_UserEvtRx+0x94>
 801198a:	2b00      	cmp	r3, #0
 801198c:	d002      	beq.n	8011994 <SVCCTL_UserEvtRx+0x7c>
 801198e:	2b01      	cmp	r3, #1
 8011990:	d006      	beq.n	80119a0 <SVCCTL_UserEvtRx+0x88>
 8011992:	e00b      	b.n	80119ac <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f001 fc7d 	bl	8013294 <SVCCTL_App_Notification>
 801199a:	4603      	mov	r3, r0
 801199c:	75bb      	strb	r3, [r7, #22]
      break;
 801199e:	e008      	b.n	80119b2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80119a0:	2301      	movs	r3, #1
 80119a2:	75bb      	strb	r3, [r7, #22]
      break;
 80119a4:	e005      	b.n	80119b2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80119a6:	2300      	movs	r3, #0
 80119a8:	75bb      	strb	r3, [r7, #22]
      break;
 80119aa:	e002      	b.n	80119b2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80119ac:	2301      	movs	r3, #1
 80119ae:	75bb      	strb	r3, [r7, #22]
      break;
 80119b0:	bf00      	nop
  }

  return (return_status);
 80119b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3718      	adds	r7, #24
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	20000188 	.word	0x20000188

080119c0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80119c8:	f107 030c 	add.w	r3, r7, #12
 80119cc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	212e      	movs	r1, #46	@ 0x2e
 80119d8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80119dc:	f000 fae8 	bl	8011fb0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	330b      	adds	r3, #11
 80119e4:	78db      	ldrb	r3, [r3, #3]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3720      	adds	r7, #32
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b088      	sub	sp, #32
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80119f6:	f107 030c 	add.w	r3, r7, #12
 80119fa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	210f      	movs	r1, #15
 8011a06:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8011a0a:	f000 fad1 	bl	8011fb0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	330b      	adds	r3, #11
 8011a12:	78db      	ldrb	r3, [r3, #3]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3720      	adds	r7, #32
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b088      	sub	sp, #32
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011a24:	f107 030c 	add.w	r3, r7, #12
 8011a28:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	2110      	movs	r1, #16
 8011a30:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8011a34:	f000 fabc 	bl	8011fb0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	330b      	adds	r3, #11
 8011a3c:	78db      	ldrb	r3, [r3, #3]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3720      	adds	r7, #32
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
	...

08011a48 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b08b      	sub	sp, #44	@ 0x2c
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8011a54:	2300      	movs	r3, #0
 8011a56:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8011a60:	2300      	movs	r3, #0
 8011a62:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8011a64:	2300      	movs	r3, #0
 8011a66:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8011a70:	4b4a      	ldr	r3, [pc, #296]	@ (8011b9c <SHCI_GetWirelessFwInfo+0x154>)
 8011a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011a78:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011a82:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4a44      	ldr	r2, [pc, #272]	@ (8011ba0 <SHCI_GetWirelessFwInfo+0x158>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d10f      	bne.n	8011ab4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	695b      	ldr	r3, [r3, #20]
 8011a98:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	69db      	ldr	r3, [r3, #28]
 8011aa4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	617b      	str	r3, [r7, #20]
 8011ab2:	e01a      	b.n	8011aea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011abc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011ac0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	695b      	ldr	r3, [r3, #20]
 8011ad0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aec:	0e1b      	lsrs	r3, r3, #24
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	0c1b      	lsrs	r3, r3, #16
 8011af8:	b2da      	uxtb	r2, r3
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b00:	0a1b      	lsrs	r3, r3, #8
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8011b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b0a:	091b      	lsrs	r3, r3, #4
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	f003 030f 	and.w	r3, r3, #15
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8011b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	f003 030f 	and.w	r3, r3, #15
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	0e1b      	lsrs	r3, r3, #24
 8011b2a:	b2da      	uxtb	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011b30:	6a3b      	ldr	r3, [r7, #32]
 8011b32:	0c1b      	lsrs	r3, r3, #16
 8011b34:	b2da      	uxtb	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8011b3a:	6a3b      	ldr	r3, [r7, #32]
 8011b3c:	0a1b      	lsrs	r3, r3, #8
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011b44:	6a3b      	ldr	r3, [r7, #32]
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	0e1b      	lsrs	r3, r3, #24
 8011b58:	b2da      	uxtb	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	0c1b      	lsrs	r3, r3, #16
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	0a1b      	lsrs	r3, r3, #8
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	0e1b      	lsrs	r3, r3, #24
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	0c1b      	lsrs	r3, r3, #16
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8011b8e:	2300      	movs	r3, #0
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	372c      	adds	r7, #44	@ 0x2c
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	58004000 	.word	0x58004000
 8011ba0:	a94656b9 	.word	0xa94656b9

08011ba4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	4a08      	ldr	r2, [pc, #32]	@ (8011bd4 <hci_init+0x30>)
 8011bb4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8011bb6:	4a08      	ldr	r2, [pc, #32]	@ (8011bd8 <hci_init+0x34>)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011bbc:	4806      	ldr	r0, [pc, #24]	@ (8011bd8 <hci_init+0x34>)
 8011bbe:	f000 f979 	bl	8011eb4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 f8da 	bl	8011d80 <TlInit>

  return;
 8011bcc:	bf00      	nop
}
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	200010d4 	.word	0x200010d4
 8011bd8:	200010ac 	.word	0x200010ac

08011bdc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011be2:	4822      	ldr	r0, [pc, #136]	@ (8011c6c <hci_user_evt_proc+0x90>)
 8011be4:	f000 fdfa 	bl	80127dc <LST_is_empty>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d12b      	bne.n	8011c46 <hci_user_evt_proc+0x6a>
 8011bee:	4b20      	ldr	r3, [pc, #128]	@ (8011c70 <hci_user_evt_proc+0x94>)
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d027      	beq.n	8011c46 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011bf6:	f107 030c 	add.w	r3, r7, #12
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	481b      	ldr	r0, [pc, #108]	@ (8011c6c <hci_user_evt_proc+0x90>)
 8011bfe:	f000 fe7c 	bl	80128fa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8011c02:	4b1c      	ldr	r3, [pc, #112]	@ (8011c74 <hci_user_evt_proc+0x98>)
 8011c04:	69db      	ldr	r3, [r3, #28]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00c      	beq.n	8011c24 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011c12:	4b18      	ldr	r3, [pc, #96]	@ (8011c74 <hci_user_evt_proc+0x98>)
 8011c14:	69db      	ldr	r3, [r3, #28]
 8011c16:	1d3a      	adds	r2, r7, #4
 8011c18:	4610      	mov	r0, r2
 8011c1a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011c1c:	793a      	ldrb	r2, [r7, #4]
 8011c1e:	4b14      	ldr	r3, [pc, #80]	@ (8011c70 <hci_user_evt_proc+0x94>)
 8011c20:	701a      	strb	r2, [r3, #0]
 8011c22:	e002      	b.n	8011c2a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011c24:	4b12      	ldr	r3, [pc, #72]	@ (8011c70 <hci_user_evt_proc+0x94>)
 8011c26:	2201      	movs	r2, #1
 8011c28:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011c2a:	4b11      	ldr	r3, [pc, #68]	@ (8011c70 <hci_user_evt_proc+0x94>)
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d004      	beq.n	8011c3c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f000 fc0d 	bl	8012454 <TL_MM_EvtDone>
 8011c3a:	e004      	b.n	8011c46 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	4619      	mov	r1, r3
 8011c40:	480a      	ldr	r0, [pc, #40]	@ (8011c6c <hci_user_evt_proc+0x90>)
 8011c42:	f000 fded 	bl	8012820 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011c46:	4809      	ldr	r0, [pc, #36]	@ (8011c6c <hci_user_evt_proc+0x90>)
 8011c48:	f000 fdc8 	bl	80127dc <LST_is_empty>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d107      	bne.n	8011c62 <hci_user_evt_proc+0x86>
 8011c52:	4b07      	ldr	r3, [pc, #28]	@ (8011c70 <hci_user_evt_proc+0x94>)
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8011c5a:	4804      	ldr	r0, [pc, #16]	@ (8011c6c <hci_user_evt_proc+0x90>)
 8011c5c:	f002 fabe 	bl	80141dc <hci_notify_asynch_evt>
  }


  return;
 8011c60:	bf00      	nop
 8011c62:	bf00      	nop
}
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	200001b0 	.word	0x200001b0
 8011c70:	200001bc 	.word	0x200001bc
 8011c74:	200010ac 	.word	0x200010ac

08011c78 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b088      	sub	sp, #32
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011c84:	2000      	movs	r0, #0
 8011c86:	f000 f8d1 	bl	8011e2c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	885b      	ldrh	r3, [r3, #2]
 8011c92:	b21b      	sxth	r3, r3
 8011c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c98:	b21a      	sxth	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	029b      	lsls	r3, r3, #10
 8011ca0:	b21b      	sxth	r3, r3
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	b21b      	sxth	r3, r3
 8011ca6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8011ca8:	4b33      	ldr	r3, [pc, #204]	@ (8011d78 <hci_send_req+0x100>)
 8011caa:	2201      	movs	r2, #1
 8011cac:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	b2d9      	uxtb	r1, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689a      	ldr	r2, [r3, #8]
 8011cb8:	8bbb      	ldrh	r3, [r7, #28]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 f890 	bl	8011de0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011cc0:	e04e      	b.n	8011d60 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011cc2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011cc6:	f002 faa0 	bl	801420a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011cca:	e043      	b.n	8011d54 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011ccc:	f107 030c 	add.w	r3, r7, #12
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	482a      	ldr	r0, [pc, #168]	@ (8011d7c <hci_send_req+0x104>)
 8011cd4:	f000 fe11 	bl	80128fa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	7a5b      	ldrb	r3, [r3, #9]
 8011cdc:	2b0f      	cmp	r3, #15
 8011cde:	d114      	bne.n	8011d0a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	330b      	adds	r3, #11
 8011ce4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	885b      	ldrh	r3, [r3, #2]
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	8bba      	ldrh	r2, [r7, #28]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d104      	bne.n	8011cfc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	691b      	ldr	r3, [r3, #16]
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	7812      	ldrb	r2, [r2, #0]
 8011cfa:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	785b      	ldrb	r3, [r3, #1]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d027      	beq.n	8011d54 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011d04:	2301      	movs	r3, #1
 8011d06:	77fb      	strb	r3, [r7, #31]
 8011d08:	e024      	b.n	8011d54 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	330b      	adds	r3, #11
 8011d0e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	8bba      	ldrh	r2, [r7, #28]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d114      	bne.n	8011d48 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	7a9b      	ldrb	r3, [r3, #10]
 8011d22:	3b03      	subs	r3, #3
 8011d24:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	695a      	ldr	r2, [r3, #20]
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	bfa8      	it	ge
 8011d30:	461a      	movge	r2, r3
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6918      	ldr	r0, [r3, #16]
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	1cd9      	adds	r1, r3, #3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	695b      	ldr	r3, [r3, #20]
 8011d42:	461a      	mov	r2, r3
 8011d44:	f004 fda9 	bl	801689a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011d50:	2301      	movs	r3, #1
 8011d52:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011d54:	4809      	ldr	r0, [pc, #36]	@ (8011d7c <hci_send_req+0x104>)
 8011d56:	f000 fd41 	bl	80127dc <LST_is_empty>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d0b5      	beq.n	8011ccc <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8011d60:	7ffb      	ldrb	r3, [r7, #31]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d0ad      	beq.n	8011cc2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8011d66:	2001      	movs	r0, #1
 8011d68:	f000 f860 	bl	8011e2c <NotifyCmdStatus>

  return 0;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3720      	adds	r7, #32
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	200010d8 	.word	0x200010d8
 8011d7c:	200010cc 	.word	0x200010cc

08011d80 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8011d88:	480f      	ldr	r0, [pc, #60]	@ (8011dc8 <TlInit+0x48>)
 8011d8a:	f000 fd17 	bl	80127bc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8011dcc <TlInit+0x4c>)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011d94:	480e      	ldr	r0, [pc, #56]	@ (8011dd0 <TlInit+0x50>)
 8011d96:	f000 fd11 	bl	80127bc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8011dd4 <TlInit+0x54>)
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011da0:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd8 <TlInit+0x58>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00a      	beq.n	8011dbe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011dac:	4b0b      	ldr	r3, [pc, #44]	@ (8011ddc <TlInit+0x5c>)
 8011dae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011db0:	4b09      	ldr	r3, [pc, #36]	@ (8011dd8 <TlInit+0x58>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f107 0208 	add.w	r2, r7, #8
 8011db8:	4610      	mov	r0, r2
 8011dba:	4798      	blx	r3
  }

  return;
 8011dbc:	bf00      	nop
 8011dbe:	bf00      	nop
}
 8011dc0:	3718      	adds	r7, #24
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200010cc 	.word	0x200010cc
 8011dcc:	200001b8 	.word	0x200001b8
 8011dd0:	200001b0 	.word	0x200001b0
 8011dd4:	200001bc 	.word	0x200001bc
 8011dd8:	200010ac 	.word	0x200010ac
 8011ddc:	08011e6d 	.word	0x08011e6d

08011de0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	4603      	mov	r3, r0
 8011de8:	603a      	str	r2, [r7, #0]
 8011dea:	80fb      	strh	r3, [r7, #6]
 8011dec:	460b      	mov	r3, r1
 8011dee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011df0:	4b0c      	ldr	r3, [pc, #48]	@ (8011e24 <SendCmd+0x44>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	88fa      	ldrh	r2, [r7, #6]
 8011df6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8011e24 <SendCmd+0x44>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	797a      	ldrb	r2, [r7, #5]
 8011e00:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011e02:	4b08      	ldr	r3, [pc, #32]	@ (8011e24 <SendCmd+0x44>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	330c      	adds	r3, #12
 8011e08:	797a      	ldrb	r2, [r7, #5]
 8011e0a:	6839      	ldr	r1, [r7, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f004 fd44 	bl	801689a <memcpy>

  hciContext.io.Send(0,0);
 8011e12:	4b05      	ldr	r3, [pc, #20]	@ (8011e28 <SendCmd+0x48>)
 8011e14:	691b      	ldr	r3, [r3, #16]
 8011e16:	2100      	movs	r1, #0
 8011e18:	2000      	movs	r0, #0
 8011e1a:	4798      	blx	r3

  return;
 8011e1c:	bf00      	nop
}
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	200001b8 	.word	0x200001b8
 8011e28:	200010ac 	.word	0x200010ac

08011e2c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	4603      	mov	r3, r0
 8011e34:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8011e36:	79fb      	ldrb	r3, [r7, #7]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d108      	bne.n	8011e4e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8011e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e68 <NotifyCmdStatus+0x3c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00d      	beq.n	8011e60 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8011e44:	4b08      	ldr	r3, [pc, #32]	@ (8011e68 <NotifyCmdStatus+0x3c>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2000      	movs	r0, #0
 8011e4a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8011e4c:	e008      	b.n	8011e60 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8011e4e:	4b06      	ldr	r3, [pc, #24]	@ (8011e68 <NotifyCmdStatus+0x3c>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d004      	beq.n	8011e60 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8011e56:	4b04      	ldr	r3, [pc, #16]	@ (8011e68 <NotifyCmdStatus+0x3c>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2001      	movs	r0, #1
 8011e5c:	4798      	blx	r3
  return;
 8011e5e:	bf00      	nop
 8011e60:	bf00      	nop
}
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	200010d4 	.word	0x200010d4

08011e6c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	7a5b      	ldrb	r3, [r3, #9]
 8011e78:	2b0f      	cmp	r3, #15
 8011e7a:	d003      	beq.n	8011e84 <TlEvtReceived+0x18>
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7a5b      	ldrb	r3, [r3, #9]
 8011e80:	2b0e      	cmp	r3, #14
 8011e82:	d107      	bne.n	8011e94 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011e84:	6879      	ldr	r1, [r7, #4]
 8011e86:	4809      	ldr	r0, [pc, #36]	@ (8011eac <TlEvtReceived+0x40>)
 8011e88:	f000 fcf0 	bl	801286c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011e8c:	2000      	movs	r0, #0
 8011e8e:	f002 f9b1 	bl	80141f4 <hci_cmd_resp_release>
 8011e92:	e006      	b.n	8011ea2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011e94:	6879      	ldr	r1, [r7, #4]
 8011e96:	4806      	ldr	r0, [pc, #24]	@ (8011eb0 <TlEvtReceived+0x44>)
 8011e98:	f000 fce8 	bl	801286c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011e9c:	4804      	ldr	r0, [pc, #16]	@ (8011eb0 <TlEvtReceived+0x44>)
 8011e9e:	f002 f99d 	bl	80141dc <hci_notify_asynch_evt>
  }

  return;
 8011ea2:	bf00      	nop
}
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	200010cc 	.word	0x200010cc
 8011eb0:	200001b0 	.word	0x200001b0

08011eb4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	4a05      	ldr	r2, [pc, #20]	@ (8011ed4 <hci_register_io_bus+0x20>)
 8011ec0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4a04      	ldr	r2, [pc, #16]	@ (8011ed8 <hci_register_io_bus+0x24>)
 8011ec6:	611a      	str	r2, [r3, #16]

  return;
 8011ec8:	bf00      	nop
}
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr
 8011ed4:	080121cd 	.word	0x080121cd
 8011ed8:	08012235 	.word	0x08012235

08011edc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	4a08      	ldr	r2, [pc, #32]	@ (8011f0c <shci_init+0x30>)
 8011eec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011eee:	4a08      	ldr	r2, [pc, #32]	@ (8011f10 <shci_init+0x34>)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011ef4:	4806      	ldr	r0, [pc, #24]	@ (8011f10 <shci_init+0x34>)
 8011ef6:	f000 f915 	bl	8012124 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f000 f898 	bl	8012034 <TlInit>

  return;
 8011f04:	bf00      	nop
}
 8011f06:	3708      	adds	r7, #8
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	200010fc 	.word	0x200010fc
 8011f10:	200010dc 	.word	0x200010dc

08011f14 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011f1a:	4822      	ldr	r0, [pc, #136]	@ (8011fa4 <shci_user_evt_proc+0x90>)
 8011f1c:	f000 fc5e 	bl	80127dc <LST_is_empty>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d12b      	bne.n	8011f7e <shci_user_evt_proc+0x6a>
 8011f26:	4b20      	ldr	r3, [pc, #128]	@ (8011fa8 <shci_user_evt_proc+0x94>)
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d027      	beq.n	8011f7e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011f2e:	f107 030c 	add.w	r3, r7, #12
 8011f32:	4619      	mov	r1, r3
 8011f34:	481b      	ldr	r0, [pc, #108]	@ (8011fa4 <shci_user_evt_proc+0x90>)
 8011f36:	f000 fce0 	bl	80128fa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8011fac <shci_user_evt_proc+0x98>)
 8011f3c:	69db      	ldr	r3, [r3, #28]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00c      	beq.n	8011f5c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8011f46:	2301      	movs	r3, #1
 8011f48:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011f4a:	4b18      	ldr	r3, [pc, #96]	@ (8011fac <shci_user_evt_proc+0x98>)
 8011f4c:	69db      	ldr	r3, [r3, #28]
 8011f4e:	1d3a      	adds	r2, r7, #4
 8011f50:	4610      	mov	r0, r2
 8011f52:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8011f54:	793a      	ldrb	r2, [r7, #4]
 8011f56:	4b14      	ldr	r3, [pc, #80]	@ (8011fa8 <shci_user_evt_proc+0x94>)
 8011f58:	701a      	strb	r2, [r3, #0]
 8011f5a:	e002      	b.n	8011f62 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011f5c:	4b12      	ldr	r3, [pc, #72]	@ (8011fa8 <shci_user_evt_proc+0x94>)
 8011f5e:	2201      	movs	r2, #1
 8011f60:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8011f62:	4b11      	ldr	r3, [pc, #68]	@ (8011fa8 <shci_user_evt_proc+0x94>)
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d004      	beq.n	8011f74 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 fa71 	bl	8012454 <TL_MM_EvtDone>
 8011f72:	e004      	b.n	8011f7e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	4619      	mov	r1, r3
 8011f78:	480a      	ldr	r0, [pc, #40]	@ (8011fa4 <shci_user_evt_proc+0x90>)
 8011f7a:	f000 fc51 	bl	8012820 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011f7e:	4809      	ldr	r0, [pc, #36]	@ (8011fa4 <shci_user_evt_proc+0x90>)
 8011f80:	f000 fc2c 	bl	80127dc <LST_is_empty>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d107      	bne.n	8011f9a <shci_user_evt_proc+0x86>
 8011f8a:	4b07      	ldr	r3, [pc, #28]	@ (8011fa8 <shci_user_evt_proc+0x94>)
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d003      	beq.n	8011f9a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011f92:	4804      	ldr	r0, [pc, #16]	@ (8011fa4 <shci_user_evt_proc+0x90>)
 8011f94:	f7f0 fd01 	bl	800299a <shci_notify_asynch_evt>
  }


  return;
 8011f98:	bf00      	nop
 8011f9a:	bf00      	nop
}
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	200001c0 	.word	0x200001c0
 8011fa8:	200001d0 	.word	0x200001d0
 8011fac:	200010dc 	.word	0x200010dc

08011fb0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60ba      	str	r2, [r7, #8]
 8011fb8:	607b      	str	r3, [r7, #4]
 8011fba:	4603      	mov	r3, r0
 8011fbc:	81fb      	strh	r3, [r7, #14]
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f000 f868 	bl	8012098 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011fc8:	4b17      	ldr	r3, [pc, #92]	@ (8012028 <shci_send+0x78>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	89fa      	ldrh	r2, [r7, #14]
 8011fce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011fd2:	4b15      	ldr	r3, [pc, #84]	@ (8012028 <shci_send+0x78>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	7b7a      	ldrb	r2, [r7, #13]
 8011fd8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011fda:	4b13      	ldr	r3, [pc, #76]	@ (8012028 <shci_send+0x78>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	330c      	adds	r3, #12
 8011fe0:	7b7a      	ldrb	r2, [r7, #13]
 8011fe2:	68b9      	ldr	r1, [r7, #8]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f004 fc58 	bl	801689a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011fea:	4b10      	ldr	r3, [pc, #64]	@ (801202c <shci_send+0x7c>)
 8011fec:	2201      	movs	r2, #1
 8011fee:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8012030 <shci_send+0x80>)
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011ffa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011ffe:	f7f0 fce3 	bl	80029c8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f103 0008 	add.w	r0, r3, #8
 8012008:	4b07      	ldr	r3, [pc, #28]	@ (8012028 <shci_send+0x78>)
 801200a:	6819      	ldr	r1, [r3, #0]
 801200c:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <shci_send+0x78>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	789b      	ldrb	r3, [r3, #2]
 8012012:	3303      	adds	r3, #3
 8012014:	461a      	mov	r2, r3
 8012016:	f004 fc40 	bl	801689a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801201a:	2001      	movs	r0, #1
 801201c:	f000 f83c 	bl	8012098 <Cmd_SetStatus>

  return;
 8012020:	bf00      	nop
}
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	200001cc 	.word	0x200001cc
 801202c:	20001100 	.word	0x20001100
 8012030:	200010dc 	.word	0x200010dc

08012034 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b086      	sub	sp, #24
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801203c:	4a10      	ldr	r2, [pc, #64]	@ (8012080 <TlInit+0x4c>)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012042:	4810      	ldr	r0, [pc, #64]	@ (8012084 <TlInit+0x50>)
 8012044:	f000 fbba 	bl	80127bc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012048:	2001      	movs	r0, #1
 801204a:	f000 f825 	bl	8012098 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801204e:	4b0e      	ldr	r3, [pc, #56]	@ (8012088 <TlInit+0x54>)
 8012050:	2201      	movs	r2, #1
 8012052:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012054:	4b0d      	ldr	r3, [pc, #52]	@ (801208c <TlInit+0x58>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00c      	beq.n	8012076 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012060:	4b0b      	ldr	r3, [pc, #44]	@ (8012090 <TlInit+0x5c>)
 8012062:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8012064:	4b0b      	ldr	r3, [pc, #44]	@ (8012094 <TlInit+0x60>)
 8012066:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012068:	4b08      	ldr	r3, [pc, #32]	@ (801208c <TlInit+0x58>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f107 020c 	add.w	r2, r7, #12
 8012070:	4610      	mov	r0, r2
 8012072:	4798      	blx	r3
  }

  return;
 8012074:	bf00      	nop
 8012076:	bf00      	nop
}
 8012078:	3718      	adds	r7, #24
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	200001cc 	.word	0x200001cc
 8012084:	200001c0 	.word	0x200001c0
 8012088:	200001d0 	.word	0x200001d0
 801208c:	200010dc 	.word	0x200010dc
 8012090:	080120e9 	.word	0x080120e9
 8012094:	08012101 	.word	0x08012101

08012098 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	4603      	mov	r3, r0
 80120a0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80120a2:	79fb      	ldrb	r3, [r7, #7]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d10b      	bne.n	80120c0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80120a8:	4b0d      	ldr	r3, [pc, #52]	@ (80120e0 <Cmd_SetStatus+0x48>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d003      	beq.n	80120b8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80120b0:	4b0b      	ldr	r3, [pc, #44]	@ (80120e0 <Cmd_SetStatus+0x48>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2000      	movs	r0, #0
 80120b6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80120b8:	4b0a      	ldr	r3, [pc, #40]	@ (80120e4 <Cmd_SetStatus+0x4c>)
 80120ba:	2200      	movs	r2, #0
 80120bc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80120be:	e00b      	b.n	80120d8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80120c0:	4b08      	ldr	r3, [pc, #32]	@ (80120e4 <Cmd_SetStatus+0x4c>)
 80120c2:	2201      	movs	r2, #1
 80120c4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80120c6:	4b06      	ldr	r3, [pc, #24]	@ (80120e0 <Cmd_SetStatus+0x48>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d004      	beq.n	80120d8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80120ce:	4b04      	ldr	r3, [pc, #16]	@ (80120e0 <Cmd_SetStatus+0x48>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2001      	movs	r0, #1
 80120d4:	4798      	blx	r3
  return;
 80120d6:	bf00      	nop
 80120d8:	bf00      	nop
}
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	200010fc 	.word	0x200010fc
 80120e4:	200001c8 	.word	0x200001c8

080120e8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80120f0:	2000      	movs	r0, #0
 80120f2:	f7f0 fc5e 	bl	80029b2 <shci_cmd_resp_release>

  return;
 80120f6:	bf00      	nop
}
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
	...

08012100 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012108:	6879      	ldr	r1, [r7, #4]
 801210a:	4805      	ldr	r0, [pc, #20]	@ (8012120 <TlUserEvtReceived+0x20>)
 801210c:	f000 fbae 	bl	801286c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012110:	4803      	ldr	r0, [pc, #12]	@ (8012120 <TlUserEvtReceived+0x20>)
 8012112:	f7f0 fc42 	bl	800299a <shci_notify_asynch_evt>

  return;
 8012116:	bf00      	nop
}
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	200001c0 	.word	0x200001c0

08012124 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4a05      	ldr	r2, [pc, #20]	@ (8012144 <shci_register_io_bus+0x20>)
 8012130:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4a04      	ldr	r2, [pc, #16]	@ (8012148 <shci_register_io_bus+0x24>)
 8012136:	611a      	str	r2, [r3, #16]

  return;
 8012138:	bf00      	nop
}
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr
 8012144:	080122e1 	.word	0x080122e1
 8012148:	08012335 	.word	0x08012335

0801214c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012150:	f003 f808 	bl	8015164 <HW_IPCC_Enable>

  return;
 8012154:	bf00      	nop
}
 8012156:	bd80      	pop	{r7, pc}

08012158 <TL_Init>:


void TL_Init( void )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801215c:	4b10      	ldr	r3, [pc, #64]	@ (80121a0 <TL_Init+0x48>)
 801215e:	4a11      	ldr	r2, [pc, #68]	@ (80121a4 <TL_Init+0x4c>)
 8012160:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012162:	4b0f      	ldr	r3, [pc, #60]	@ (80121a0 <TL_Init+0x48>)
 8012164:	4a10      	ldr	r2, [pc, #64]	@ (80121a8 <TL_Init+0x50>)
 8012166:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012168:	4b0d      	ldr	r3, [pc, #52]	@ (80121a0 <TL_Init+0x48>)
 801216a:	4a10      	ldr	r2, [pc, #64]	@ (80121ac <TL_Init+0x54>)
 801216c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801216e:	4b0c      	ldr	r3, [pc, #48]	@ (80121a0 <TL_Init+0x48>)
 8012170:	4a0f      	ldr	r2, [pc, #60]	@ (80121b0 <TL_Init+0x58>)
 8012172:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012174:	4b0a      	ldr	r3, [pc, #40]	@ (80121a0 <TL_Init+0x48>)
 8012176:	4a0f      	ldr	r2, [pc, #60]	@ (80121b4 <TL_Init+0x5c>)
 8012178:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801217a:	4b09      	ldr	r3, [pc, #36]	@ (80121a0 <TL_Init+0x48>)
 801217c:	4a0e      	ldr	r2, [pc, #56]	@ (80121b8 <TL_Init+0x60>)
 801217e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012180:	4b07      	ldr	r3, [pc, #28]	@ (80121a0 <TL_Init+0x48>)
 8012182:	4a0e      	ldr	r2, [pc, #56]	@ (80121bc <TL_Init+0x64>)
 8012184:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012186:	4b06      	ldr	r3, [pc, #24]	@ (80121a0 <TL_Init+0x48>)
 8012188:	4a0d      	ldr	r2, [pc, #52]	@ (80121c0 <TL_Init+0x68>)
 801218a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801218c:	4b04      	ldr	r3, [pc, #16]	@ (80121a0 <TL_Init+0x48>)
 801218e:	4a0d      	ldr	r2, [pc, #52]	@ (80121c4 <TL_Init+0x6c>)
 8012190:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012192:	4b03      	ldr	r3, [pc, #12]	@ (80121a0 <TL_Init+0x48>)
 8012194:	4a0c      	ldr	r2, [pc, #48]	@ (80121c8 <TL_Init+0x70>)
 8012196:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012198:	f002 fff8 	bl	801518c <HW_IPCC_Init>

  return;
 801219c:	bf00      	nop
}
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	20030000 	.word	0x20030000
 80121a4:	20030028 	.word	0x20030028
 80121a8:	20030048 	.word	0x20030048
 80121ac:	20030058 	.word	0x20030058
 80121b0:	20030068 	.word	0x20030068
 80121b4:	20030070 	.word	0x20030070
 80121b8:	20030078 	.word	0x20030078
 80121bc:	20030080 	.word	0x20030080
 80121c0:	2003009c 	.word	0x2003009c
 80121c4:	200300a0 	.word	0x200300a0
 80121c8:	200300ac 	.word	0x200300ac

080121cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80121d8:	4811      	ldr	r0, [pc, #68]	@ (8012220 <TL_BLE_Init+0x54>)
 80121da:	f000 faef 	bl	80127bc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80121de:	4b11      	ldr	r3, [pc, #68]	@ (8012224 <TL_BLE_Init+0x58>)
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	689a      	ldr	r2, [r3, #8]
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	68da      	ldr	r2, [r3, #12]
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	4a0c      	ldr	r2, [pc, #48]	@ (8012228 <TL_BLE_Init+0x5c>)
 80121f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	4a08      	ldr	r2, [pc, #32]	@ (8012220 <TL_BLE_Init+0x54>)
 80121fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8012200:	f002 ffda 	bl	80151b8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4a08      	ldr	r2, [pc, #32]	@ (801222c <TL_BLE_Init+0x60>)
 801220a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4a07      	ldr	r2, [pc, #28]	@ (8012230 <TL_BLE_Init+0x64>)
 8012212:	6013      	str	r3, [r2, #0]

  return 0;
 8012214:	2300      	movs	r3, #0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	200300c8 	.word	0x200300c8
 8012224:	20030000 	.word	0x20030000
 8012228:	20031f48 	.word	0x20031f48
 801222c:	2000110c 	.word	0x2000110c
 8012230:	20001110 	.word	0x20001110

08012234 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	460b      	mov	r3, r1
 801223e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8012240:	4b09      	ldr	r3, [pc, #36]	@ (8012268 <TL_BLE_SendCmd+0x34>)
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2201      	movs	r2, #1
 8012248:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801224a:	4b07      	ldr	r3, [pc, #28]	@ (8012268 <TL_BLE_SendCmd+0x34>)
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	4619      	mov	r1, r3
 8012252:	2001      	movs	r0, #1
 8012254:	f000 f96c 	bl	8012530 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8012258:	f002 ffb8 	bl	80151cc <HW_IPCC_BLE_SendCmd>

  return 0;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20030000 	.word	0x20030000

0801226c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8012272:	e01c      	b.n	80122ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012274:	1d3b      	adds	r3, r7, #4
 8012276:	4619      	mov	r1, r3
 8012278:	4812      	ldr	r0, [pc, #72]	@ (80122c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801227a:	f000 fb3e 	bl	80128fa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	7a5b      	ldrb	r3, [r3, #9]
 8012282:	2b0f      	cmp	r3, #15
 8012284:	d003      	beq.n	801228e <HW_IPCC_BLE_RxEvtNot+0x22>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	7a5b      	ldrb	r3, [r3, #9]
 801228a:	2b0e      	cmp	r3, #14
 801228c:	d105      	bne.n	801229a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	4619      	mov	r1, r3
 8012292:	2002      	movs	r0, #2
 8012294:	f000 f94c 	bl	8012530 <OutputDbgTrace>
 8012298:	e004      	b.n	80122a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4619      	mov	r1, r3
 801229e:	2003      	movs	r0, #3
 80122a0:	f000 f946 	bl	8012530 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80122a4:	4b08      	ldr	r3, [pc, #32]	@ (80122c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	4610      	mov	r0, r2
 80122ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80122ae:	4805      	ldr	r0, [pc, #20]	@ (80122c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80122b0:	f000 fa94 	bl	80127dc <LST_is_empty>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d0dc      	beq.n	8012274 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80122ba:	bf00      	nop
}
 80122bc:	3708      	adds	r7, #8
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	200300c8 	.word	0x200300c8
 80122c8:	2000110c 	.word	0x2000110c

080122cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80122d0:	4b02      	ldr	r3, [pc, #8]	@ (80122dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4798      	blx	r3

  return;
 80122d6:	bf00      	nop
}
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20001110 	.word	0x20001110

080122e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80122ec:	480d      	ldr	r0, [pc, #52]	@ (8012324 <TL_SYS_Init+0x44>)
 80122ee:	f000 fa65 	bl	80127bc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80122f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012328 <TL_SYS_Init+0x48>)
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	689a      	ldr	r2, [r3, #8]
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	4a08      	ldr	r2, [pc, #32]	@ (8012324 <TL_SYS_Init+0x44>)
 8012304:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8012306:	f002 ff83 	bl	8015210 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a07      	ldr	r2, [pc, #28]	@ (801232c <TL_SYS_Init+0x4c>)
 8012310:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	4a06      	ldr	r2, [pc, #24]	@ (8012330 <TL_SYS_Init+0x50>)
 8012318:	6013      	str	r3, [r2, #0]

  return 0;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	200300d0 	.word	0x200300d0
 8012328:	20030000 	.word	0x20030000
 801232c:	20001114 	.word	0x20001114
 8012330:	20001118 	.word	0x20001118

08012334 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	460b      	mov	r3, r1
 801233e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012340:	4b09      	ldr	r3, [pc, #36]	@ (8012368 <TL_SYS_SendCmd+0x34>)
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2210      	movs	r2, #16
 8012348:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801234a:	4b07      	ldr	r3, [pc, #28]	@ (8012368 <TL_SYS_SendCmd+0x34>)
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4619      	mov	r1, r3
 8012352:	2004      	movs	r0, #4
 8012354:	f000 f8ec 	bl	8012530 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012358:	f002 ff64 	bl	8015224 <HW_IPCC_SYS_SendCmd>

  return 0;
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	20030000 	.word	0x20030000

0801236c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012370:	4b07      	ldr	r3, [pc, #28]	@ (8012390 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4619      	mov	r1, r3
 8012378:	2005      	movs	r0, #5
 801237a:	f000 f8d9 	bl	8012530 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801237e:	4b05      	ldr	r3, [pc, #20]	@ (8012394 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4a03      	ldr	r2, [pc, #12]	@ (8012390 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012384:	68d2      	ldr	r2, [r2, #12]
 8012386:	6812      	ldr	r2, [r2, #0]
 8012388:	4610      	mov	r0, r2
 801238a:	4798      	blx	r3

  return;
 801238c:	bf00      	nop
}
 801238e:	bd80      	pop	{r7, pc}
 8012390:	20030000 	.word	0x20030000
 8012394:	20001114 	.word	0x20001114

08012398 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801239e:	e00e      	b.n	80123be <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80123a0:	1d3b      	adds	r3, r7, #4
 80123a2:	4619      	mov	r1, r3
 80123a4:	480b      	ldr	r0, [pc, #44]	@ (80123d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80123a6:	f000 faa8 	bl	80128fa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4619      	mov	r1, r3
 80123ae:	2006      	movs	r0, #6
 80123b0:	f000 f8be 	bl	8012530 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80123b4:	4b08      	ldr	r3, [pc, #32]	@ (80123d8 <HW_IPCC_SYS_EvtNot+0x40>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	4610      	mov	r0, r2
 80123bc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80123be:	4805      	ldr	r0, [pc, #20]	@ (80123d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80123c0:	f000 fa0c 	bl	80127dc <LST_is_empty>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d0ea      	beq.n	80123a0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80123ca:	bf00      	nop
}
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	200300d0 	.word	0x200300d0
 80123d8:	20001118 	.word	0x20001118

080123dc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80123e4:	4817      	ldr	r0, [pc, #92]	@ (8012444 <TL_MM_Init+0x68>)
 80123e6:	f000 f9e9 	bl	80127bc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80123ea:	4817      	ldr	r0, [pc, #92]	@ (8012448 <TL_MM_Init+0x6c>)
 80123ec:	f000 f9e6 	bl	80127bc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80123f0:	4b16      	ldr	r3, [pc, #88]	@ (801244c <TL_MM_Init+0x70>)
 80123f2:	691b      	ldr	r3, [r3, #16]
 80123f4:	4a16      	ldr	r2, [pc, #88]	@ (8012450 <TL_MM_Init+0x74>)
 80123f6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80123f8:	4b15      	ldr	r3, [pc, #84]	@ (8012450 <TL_MM_Init+0x74>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	6892      	ldr	r2, [r2, #8]
 8012400:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012402:	4b13      	ldr	r3, [pc, #76]	@ (8012450 <TL_MM_Init+0x74>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	68d2      	ldr	r2, [r2, #12]
 801240a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801240c:	4b10      	ldr	r3, [pc, #64]	@ (8012450 <TL_MM_Init+0x74>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	4a0c      	ldr	r2, [pc, #48]	@ (8012444 <TL_MM_Init+0x68>)
 8012412:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012414:	4b0e      	ldr	r3, [pc, #56]	@ (8012450 <TL_MM_Init+0x74>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	6812      	ldr	r2, [r2, #0]
 801241c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801241e:	4b0c      	ldr	r3, [pc, #48]	@ (8012450 <TL_MM_Init+0x74>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	6852      	ldr	r2, [r2, #4]
 8012426:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012428:	4b09      	ldr	r3, [pc, #36]	@ (8012450 <TL_MM_Init+0x74>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	6912      	ldr	r2, [r2, #16]
 8012430:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012432:	4b07      	ldr	r3, [pc, #28]	@ (8012450 <TL_MM_Init+0x74>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	6952      	ldr	r2, [r2, #20]
 801243a:	619a      	str	r2, [r3, #24]

  return;
 801243c:	bf00      	nop
}
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	200300b8 	.word	0x200300b8
 8012448:	20001104 	.word	0x20001104
 801244c:	20030000 	.word	0x20030000
 8012450:	2000111c 	.word	0x2000111c

08012454 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	4807      	ldr	r0, [pc, #28]	@ (801247c <TL_MM_EvtDone+0x28>)
 8012460:	f000 fa04 	bl	801286c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012464:	6879      	ldr	r1, [r7, #4]
 8012466:	2000      	movs	r0, #0
 8012468:	f000 f862 	bl	8012530 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801246c:	4804      	ldr	r0, [pc, #16]	@ (8012480 <TL_MM_EvtDone+0x2c>)
 801246e:	f002 feff 	bl	8015270 <HW_IPCC_MM_SendFreeBuf>

  return;
 8012472:	bf00      	nop
}
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	20001104 	.word	0x20001104
 8012480:	08012485 	.word	0x08012485

08012484 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801248a:	e00c      	b.n	80124a6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801248c:	1d3b      	adds	r3, r7, #4
 801248e:	4619      	mov	r1, r3
 8012490:	480a      	ldr	r0, [pc, #40]	@ (80124bc <SendFreeBuf+0x38>)
 8012492:	f000 fa32 	bl	80128fa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8012496:	4b0a      	ldr	r3, [pc, #40]	@ (80124c0 <SendFreeBuf+0x3c>)
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	691b      	ldr	r3, [r3, #16]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f000 f9e3 	bl	801286c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80124a6:	4805      	ldr	r0, [pc, #20]	@ (80124bc <SendFreeBuf+0x38>)
 80124a8:	f000 f998 	bl	80127dc <LST_is_empty>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d0ec      	beq.n	801248c <SendFreeBuf+0x8>
  }

  return;
 80124b2:	bf00      	nop
}
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	20001104 	.word	0x20001104
 80124c0:	20030000 	.word	0x20030000

080124c4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80124c8:	4805      	ldr	r0, [pc, #20]	@ (80124e0 <TL_TRACES_Init+0x1c>)
 80124ca:	f000 f977 	bl	80127bc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80124ce:	4b05      	ldr	r3, [pc, #20]	@ (80124e4 <TL_TRACES_Init+0x20>)
 80124d0:	695b      	ldr	r3, [r3, #20]
 80124d2:	4a03      	ldr	r2, [pc, #12]	@ (80124e0 <TL_TRACES_Init+0x1c>)
 80124d4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80124d6:	f002 ff01 	bl	80152dc <HW_IPCC_TRACES_Init>

  return;
 80124da:	bf00      	nop
}
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	200300c0 	.word	0x200300c0
 80124e4:	20030000 	.word	0x20030000

080124e8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80124ee:	e008      	b.n	8012502 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80124f0:	1d3b      	adds	r3, r7, #4
 80124f2:	4619      	mov	r1, r3
 80124f4:	4808      	ldr	r0, [pc, #32]	@ (8012518 <HW_IPCC_TRACES_EvtNot+0x30>)
 80124f6:	f000 fa00 	bl	80128fa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f000 f80d 	bl	801251c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012502:	4805      	ldr	r0, [pc, #20]	@ (8012518 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012504:	f000 f96a 	bl	80127dc <LST_is_empty>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0f0      	beq.n	80124f0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801250e:	bf00      	nop
}
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	200300c0 	.word	0x200300c0

0801251c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8012524:	bf00      	nop
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	4603      	mov	r3, r0
 8012538:	6039      	str	r1, [r7, #0]
 801253a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 801253c:	79fb      	ldrb	r3, [r7, #7]
 801253e:	2b06      	cmp	r3, #6
 8012540:	d845      	bhi.n	80125ce <OutputDbgTrace+0x9e>
 8012542:	a201      	add	r2, pc, #4	@ (adr r2, 8012548 <OutputDbgTrace+0x18>)
 8012544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012548:	08012565 	.word	0x08012565
 801254c:	08012589 	.word	0x08012589
 8012550:	0801258f 	.word	0x0801258f
 8012554:	080125a3 	.word	0x080125a3
 8012558:	080125af 	.word	0x080125af
 801255c:	080125b5 	.word	0x080125b5
 8012560:	080125c3 	.word	0x080125c3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	7a5b      	ldrb	r3, [r3, #9]
 801256c:	2bff      	cmp	r3, #255	@ 0xff
 801256e:	d005      	beq.n	801257c <OutputDbgTrace+0x4c>
 8012570:	2bff      	cmp	r3, #255	@ 0xff
 8012572:	dc05      	bgt.n	8012580 <OutputDbgTrace+0x50>
 8012574:	2b0e      	cmp	r3, #14
 8012576:	d005      	beq.n	8012584 <OutputDbgTrace+0x54>
 8012578:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801257a:	e001      	b.n	8012580 <OutputDbgTrace+0x50>
          break;
 801257c:	bf00      	nop
 801257e:	e027      	b.n	80125d0 <OutputDbgTrace+0xa0>
          break;
 8012580:	bf00      	nop
 8012582:	e025      	b.n	80125d0 <OutputDbgTrace+0xa0>
          break;
 8012584:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8012586:	e023      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801258c:	e020      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	7a5b      	ldrb	r3, [r3, #9]
 8012596:	2b0e      	cmp	r3, #14
 8012598:	d001      	beq.n	801259e <OutputDbgTrace+0x6e>
 801259a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801259c:	e000      	b.n	80125a0 <OutputDbgTrace+0x70>
          break;
 801259e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125a0:	e016      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	7a5b      	ldrb	r3, [r3, #9]
 80125aa:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125ac:	e010      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80125b2:	e00d      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	7a5b      	ldrb	r3, [r3, #9]
 80125bc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80125be:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125c0:	e006      	b.n	80125d0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	7a5b      	ldrb	r3, [r3, #9]
 80125ca:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125cc:	e000      	b.n	80125d0 <OutputDbgTrace+0xa0>

    default:
      break;
 80125ce:	bf00      	nop
  }

  return;
 80125d0:	bf00      	nop
}
 80125d2:	3714      	adds	r7, #20
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80125e8:	215c      	movs	r1, #92	@ 0x5c
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f004 f8cc 	bl	8016788 <strrchr>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d007      	beq.n	8012606 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80125f6:	215c      	movs	r1, #92	@ 0x5c
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f004 f8c5 	bl	8016788 <strrchr>
 80125fe:	4603      	mov	r3, r0
 8012600:	3301      	adds	r3, #1
 8012602:	60fb      	str	r3, [r7, #12]
 8012604:	e00d      	b.n	8012622 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8012606:	212f      	movs	r1, #47	@ 0x2f
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f004 f8bd 	bl	8016788 <strrchr>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d006      	beq.n	8012622 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8012614:	212f      	movs	r1, #47	@ 0x2f
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f004 f8b6 	bl	8016788 <strrchr>
 801261c:	4603      	mov	r3, r0
 801261e:	3301      	adds	r3, #1
 8012620:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012622:	68fb      	ldr	r3, [r7, #12]
}
 8012624:	4618      	mov	r0, r3
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}

0801262c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b086      	sub	sp, #24
 8012630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012632:	f3ef 8310 	mrs	r3, PRIMASK
 8012636:	60fb      	str	r3, [r7, #12]
  return(result);
 8012638:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801263a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801263c:	b672      	cpsid	i
}
 801263e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8012640:	1cbb      	adds	r3, r7, #2
 8012642:	4619      	mov	r1, r3
 8012644:	4812      	ldr	r0, [pc, #72]	@ (8012690 <DbgTrace_TxCpltCallback+0x64>)
 8012646:	f000 fb9d 	bl	8012d84 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 801264a:	1cbb      	adds	r3, r7, #2
 801264c:	4619      	mov	r1, r3
 801264e:	4810      	ldr	r0, [pc, #64]	@ (8012690 <DbgTrace_TxCpltCallback+0x64>)
 8012650:	f000 fc87 	bl	8012f62 <CircularQueue_Sense>
 8012654:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00c      	beq.n	8012676 <DbgTrace_TxCpltCallback+0x4a>
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	f383 8810 	msr	PRIMASK, r3
}
 8012666:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8012668:	887b      	ldrh	r3, [r7, #2]
 801266a:	4a0a      	ldr	r2, [pc, #40]	@ (8012694 <DbgTrace_TxCpltCallback+0x68>)
 801266c:	4619      	mov	r1, r3
 801266e:	6938      	ldr	r0, [r7, #16]
 8012670:	f7ef fc90 	bl	8001f94 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8012674:	e008      	b.n	8012688 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8012676:	4b08      	ldr	r3, [pc, #32]	@ (8012698 <DbgTrace_TxCpltCallback+0x6c>)
 8012678:	2201      	movs	r2, #1
 801267a:	701a      	strb	r2, [r3, #0]
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f383 8810 	msr	PRIMASK, r3
}
 8012686:	bf00      	nop
}
 8012688:	bf00      	nop
 801268a:	3718      	adds	r7, #24
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	20001120 	.word	0x20001120
 8012694:	0801262d 	.word	0x0801262d
 8012698:	200000a2 	.word	0x200000a2

0801269c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	68b9      	ldr	r1, [r7, #8]
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f000 f805 	bl	80126bc <DbgTraceWrite>
 80126b2:	4603      	mov	r3, r0
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b08a      	sub	sp, #40	@ 0x28
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80126c8:	2300      	movs	r3, #0
 80126ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126cc:	f3ef 8310 	mrs	r3, PRIMASK
 80126d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80126d2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80126d4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126dc:	d102      	bne.n	80126e4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80126e2:	e037      	b.n	8012754 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d006      	beq.n	80126f8 <DbgTraceWrite+0x3c>
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d003      	beq.n	80126f8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80126f0:	f04f 33ff 	mov.w	r3, #4294967295
 80126f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80126f6:	e02d      	b.n	8012754 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d02a      	beq.n	8012754 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8012702:	b672      	cpsid	i
}
 8012704:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	b29a      	uxth	r2, r3
 801270a:	2301      	movs	r3, #1
 801270c:	68b9      	ldr	r1, [r7, #8]
 801270e:	4814      	ldr	r0, [pc, #80]	@ (8012760 <DbgTraceWrite+0xa4>)
 8012710:	f000 f912 	bl	8012938 <CircularQueue_Add>
 8012714:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d015      	beq.n	8012748 <DbgTraceWrite+0x8c>
 801271c:	4b11      	ldr	r3, [pc, #68]	@ (8012764 <DbgTraceWrite+0xa8>)
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	b2db      	uxtb	r3, r3
 8012722:	2b00      	cmp	r3, #0
 8012724:	d010      	beq.n	8012748 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8012726:	4b0f      	ldr	r3, [pc, #60]	@ (8012764 <DbgTraceWrite+0xa8>)
 8012728:	2200      	movs	r2, #0
 801272a:	701a      	strb	r2, [r3, #0]
 801272c:	6a3b      	ldr	r3, [r7, #32]
 801272e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	f383 8810 	msr	PRIMASK, r3
}
 8012736:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	b29b      	uxth	r3, r3
 801273c:	4a0a      	ldr	r2, [pc, #40]	@ (8012768 <DbgTraceWrite+0xac>)
 801273e:	4619      	mov	r1, r3
 8012740:	69f8      	ldr	r0, [r7, #28]
 8012742:	f7ef fc27 	bl	8001f94 <DbgOutputTraces>
 8012746:	e005      	b.n	8012754 <DbgTraceWrite+0x98>
 8012748:	6a3b      	ldr	r3, [r7, #32]
 801274a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	f383 8810 	msr	PRIMASK, r3
}
 8012752:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012756:	4618      	mov	r0, r3
 8012758:	3728      	adds	r7, #40	@ 0x28
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	20001120 	.word	0x20001120
 8012764:	200000a2 	.word	0x200000a2
 8012768:	0801262d 	.word	0x0801262d

0801276c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012776:	4b0f      	ldr	r3, [pc, #60]	@ (80127b4 <OTP_Read+0x48>)
 8012778:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801277a:	e002      	b.n	8012782 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	3b08      	subs	r3, #8
 8012780:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	3307      	adds	r3, #7
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	79fa      	ldrb	r2, [r7, #7]
 801278a:	429a      	cmp	r2, r3
 801278c:	d003      	beq.n	8012796 <OTP_Read+0x2a>
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	4a09      	ldr	r2, [pc, #36]	@ (80127b8 <OTP_Read+0x4c>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d1f2      	bne.n	801277c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	3307      	adds	r3, #7
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	79fa      	ldrb	r2, [r7, #7]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d001      	beq.n	80127a6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80127a2:	2300      	movs	r3, #0
 80127a4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80127a6:	68fb      	ldr	r3, [r7, #12]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3714      	adds	r7, #20
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	1fff73f8 	.word	0x1fff73f8
 80127b8:	1fff7000 	.word	0x1fff7000

080127bc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	605a      	str	r2, [r3, #4]
}
 80127d0:	bf00      	nop
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80127dc:	b480      	push	{r7}
 80127de:	b087      	sub	sp, #28
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127e4:	f3ef 8310 	mrs	r3, PRIMASK
 80127e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80127ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80127ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80127ee:	b672      	cpsid	i
}
 80127f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d102      	bne.n	8012802 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80127fc:	2301      	movs	r3, #1
 80127fe:	75fb      	strb	r3, [r7, #23]
 8012800:	e001      	b.n	8012806 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8012802:	2300      	movs	r3, #0
 8012804:	75fb      	strb	r3, [r7, #23]
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	f383 8810 	msr	PRIMASK, r3
}
 8012810:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012812:	7dfb      	ldrb	r3, [r7, #23]
}
 8012814:	4618      	mov	r0, r3
 8012816:	371c      	adds	r7, #28
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012820:	b480      	push	{r7}
 8012822:	b087      	sub	sp, #28
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801282a:	f3ef 8310 	mrs	r3, PRIMASK
 801282e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012830:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012832:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012834:	b672      	cpsid	i
}
 8012836:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	683a      	ldr	r2, [r7, #0]
 801284a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	683a      	ldr	r2, [r7, #0]
 8012852:	605a      	str	r2, [r3, #4]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	f383 8810 	msr	PRIMASK, r3
}
 801285e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012860:	bf00      	nop
 8012862:	371c      	adds	r7, #28
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801286c:	b480      	push	{r7}
 801286e:	b087      	sub	sp, #28
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012876:	f3ef 8310 	mrs	r3, PRIMASK
 801287a:	60fb      	str	r3, [r7, #12]
  return(result);
 801287c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801287e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012880:	b672      	cpsid	i
}
 8012882:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	685a      	ldr	r2, [r3, #4]
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	683a      	ldr	r2, [r7, #0]
 8012896:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	683a      	ldr	r2, [r7, #0]
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128a4:	693b      	ldr	r3, [r7, #16]
 80128a6:	f383 8810 	msr	PRIMASK, r3
}
 80128aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80128ac:	bf00      	nop
 80128ae:	371c      	adds	r7, #28
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b087      	sub	sp, #28
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128c0:	f3ef 8310 	mrs	r3, PRIMASK
 80128c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80128c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80128c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128ca:	b672      	cpsid	i
}
 80128cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	6812      	ldr	r2, [r2, #0]
 80128d6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	6852      	ldr	r2, [r2, #4]
 80128e0:	605a      	str	r2, [r3, #4]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	f383 8810 	msr	PRIMASK, r3
}
 80128ec:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80128ee:	bf00      	nop
 80128f0:	371c      	adds	r7, #28
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr

080128fa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b086      	sub	sp, #24
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
 8012902:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012904:	f3ef 8310 	mrs	r3, PRIMASK
 8012908:	60fb      	str	r3, [r7, #12]
  return(result);
 801290a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801290c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801290e:	b672      	cpsid	i
}
 8012910:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4618      	mov	r0, r3
 8012920:	f7ff ffca 	bl	80128b8 <LST_remove_node>
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	f383 8810 	msr	PRIMASK, r3
}
 801292e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012930:	bf00      	nop
 8012932:	3718      	adds	r7, #24
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08e      	sub	sp, #56	@ 0x38
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	603b      	str	r3, [r7, #0]
 8012944:	4613      	mov	r3, r2
 8012946:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8012948:	2300      	movs	r3, #0
 801294a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801294c:	2300      	movs	r3, #0
 801294e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012950:	2300      	movs	r3, #0
 8012952:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012954:	2300      	movs	r3, #0
 8012956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012958:	2300      	movs	r3, #0
 801295a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 801295c:	2300      	movs	r3, #0
 801295e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8012960:	2300      	movs	r3, #0
 8012962:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	891b      	ldrh	r3, [r3, #8]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d101      	bne.n	8012970 <CircularQueue_Add+0x38>
 801296c:	2302      	movs	r3, #2
 801296e:	e000      	b.n	8012972 <CircularQueue_Add+0x3a>
 8012970:	2300      	movs	r3, #0
 8012972:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	695b      	ldr	r3, [r3, #20]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d029      	beq.n	80129d0 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	891b      	ldrh	r3, [r3, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d122      	bne.n	80129ca <CircularQueue_Add+0x92>
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	681a      	ldr	r2, [r3, #0]
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	691b      	ldr	r3, [r3, #16]
 801298c:	4413      	add	r3, r2
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	4618      	mov	r0, r3
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	1c59      	adds	r1, r3, #1
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	4299      	cmp	r1, r3
 80129a2:	d306      	bcc.n	80129b2 <CircularQueue_Add+0x7a>
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6919      	ldr	r1, [r3, #16]
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	1acb      	subs	r3, r1, r3
 80129ae:	3301      	adds	r3, #1
 80129b0:	e002      	b.n	80129b8 <CircularQueue_Add+0x80>
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	691b      	ldr	r3, [r3, #16]
 80129b6:	3301      	adds	r3, #1
 80129b8:	4413      	add	r3, r2
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	021b      	lsls	r3, r3, #8
 80129be:	b29b      	uxth	r3, r3
 80129c0:	4403      	add	r3, r0
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	3302      	adds	r3, #2
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	e001      	b.n	80129ce <CircularQueue_Add+0x96>
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	891b      	ldrh	r3, [r3, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	891b      	ldrh	r3, [r3, #8]
 80129dc:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	691a      	ldr	r2, [r3, #16]
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d307      	bcc.n	80129fa <CircularQueue_Add+0xc2>
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	685a      	ldr	r2, [r3, #4]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6919      	ldr	r1, [r3, #16]
 80129f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80129f4:	440b      	add	r3, r1
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	e000      	b.n	80129fc <CircularQueue_Add+0xc4>
 80129fa:	2300      	movs	r3, #0
 80129fc:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80129fe:	88fa      	ldrh	r2, [r7, #6]
 8012a00:	7ffb      	ldrb	r3, [r7, #31]
 8012a02:	4413      	add	r3, r2
 8012a04:	461a      	mov	r2, r3
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	fb02 f303 	mul.w	r3, r2, r3
 8012a0c:	69ba      	ldr	r2, [r7, #24]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d80b      	bhi.n	8012a2a <CircularQueue_Add+0xf2>
 8012a12:	88fa      	ldrh	r2, [r7, #6]
 8012a14:	7ffb      	ldrb	r3, [r7, #31]
 8012a16:	4413      	add	r3, r2
 8012a18:	461a      	mov	r2, r3
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a20:	fb01 f202 	mul.w	r2, r1, r2
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	e000      	b.n	8012a2c <CircularQueue_Add+0xf4>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012a2e:	7dfa      	ldrb	r2, [r7, #23]
 8012a30:	7ffb      	ldrb	r3, [r7, #31]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	bf8c      	ite	hi
 8012a36:	2301      	movhi	r3, #1
 8012a38:	2300      	movls	r3, #0
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012a3e:	7fbb      	ldrb	r3, [r7, #30]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d008      	beq.n	8012a56 <CircularQueue_Add+0x11e>
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	7f1b      	ldrb	r3, [r3, #28]
 8012a48:	f003 0301 	and.w	r3, r3, #1
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d002      	beq.n	8012a56 <CircularQueue_Add+0x11e>
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	e000      	b.n	8012a58 <CircularQueue_Add+0x120>
 8012a56:	8bbb      	ldrh	r3, [r7, #28]
 8012a58:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012a5a:	7fbb      	ldrb	r3, [r7, #30]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d008      	beq.n	8012a72 <CircularQueue_Add+0x13a>
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	7f1b      	ldrb	r3, [r3, #28]
 8012a64:	f003 0302 	and.w	r3, r3, #2
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <CircularQueue_Add+0x13a>
 8012a6c:	7ffb      	ldrb	r3, [r7, #31]
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	e000      	b.n	8012a74 <CircularQueue_Add+0x13c>
 8012a72:	8bbb      	ldrh	r3, [r7, #28]
 8012a74:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8012a76:	88fb      	ldrh	r3, [r7, #6]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 817e 	beq.w	8012d7a <CircularQueue_Add+0x442>
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	695a      	ldr	r2, [r3, #20]
 8012a82:	88f9      	ldrh	r1, [r7, #6]
 8012a84:	7ffb      	ldrb	r3, [r7, #31]
 8012a86:	440b      	add	r3, r1
 8012a88:	4619      	mov	r1, r3
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	fb01 f303 	mul.w	r3, r1, r3
 8012a90:	441a      	add	r2, r3
 8012a92:	8bbb      	ldrh	r3, [r7, #28]
 8012a94:	441a      	add	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	f200 816d 	bhi.w	8012d7a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012aa4:	e14a      	b.n	8012d3c <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	691a      	ldr	r2, [r3, #16]
 8012aaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012aac:	441a      	add	r2, r3
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d307      	bcc.n	8012ac6 <CircularQueue_Add+0x18e>
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	691a      	ldr	r2, [r3, #16]
 8012aba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012abc:	441a      	add	r2, r3
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	e003      	b.n	8012ace <CircularQueue_Add+0x196>
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	691a      	ldr	r2, [r3, #16]
 8012aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012acc:	4413      	add	r3, r2
 8012ace:	68fa      	ldr	r2, [r7, #12]
 8012ad0:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	691b      	ldr	r3, [r3, #16]
 8012ad6:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	891b      	ldrh	r3, [r3, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d130      	bne.n	8012b42 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae6:	1c59      	adds	r1, r3, #1
 8012ae8:	6339      	str	r1, [r7, #48]	@ 0x30
 8012aea:	4413      	add	r3, r2
 8012aec:	88fa      	ldrh	r2, [r7, #6]
 8012aee:	b2d2      	uxtb	r2, r2
 8012af0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d304      	bcc.n	8012b06 <CircularQueue_Add+0x1ce>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b02:	1ad3      	subs	r3, r2, r3
 8012b04:	e000      	b.n	8012b08 <CircularQueue_Add+0x1d0>
 8012b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b08:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012b0a:	88fb      	ldrh	r3, [r7, #6]
 8012b0c:	0a1b      	lsrs	r3, r3, #8
 8012b0e:	b298      	uxth	r0, r3
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b16:	1c59      	adds	r1, r3, #1
 8012b18:	6339      	str	r1, [r7, #48]	@ 0x30
 8012b1a:	4413      	add	r3, r2
 8012b1c:	b2c2      	uxtb	r2, r0
 8012b1e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d304      	bcc.n	8012b34 <CircularQueue_Add+0x1fc>
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	e000      	b.n	8012b36 <CircularQueue_Add+0x1fe>
 8012b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b36:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	695b      	ldr	r3, [r3, #20]
 8012b3c:	1c9a      	adds	r2, r3, #2
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012b42:	88fa      	ldrh	r2, [r7, #6]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6859      	ldr	r1, [r3, #4]
 8012b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b4a:	1acb      	subs	r3, r1, r3
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	bf28      	it	cs
 8012b50:	4613      	movcs	r3, r2
 8012b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d007      	beq.n	8012b6c <CircularQueue_Add+0x234>
 8012b5c:	88fb      	ldrh	r3, [r7, #6]
 8012b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d225      	bcs.n	8012bb0 <CircularQueue_Add+0x278>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	7f1b      	ldrb	r3, [r3, #28]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d121      	bne.n	8012bb0 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b72:	18d0      	adds	r0, r2, r3
 8012b74:	88fb      	ldrh	r3, [r7, #6]
 8012b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b78:	fb02 f303 	mul.w	r3, r2, r3
 8012b7c:	68ba      	ldr	r2, [r7, #8]
 8012b7e:	4413      	add	r3, r2
 8012b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b82:	4619      	mov	r1, r3
 8012b84:	f003 fe89 	bl	801689a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	695a      	ldr	r2, [r3, #20]
 8012b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b8e:	441a      	add	r2, r3
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012b94:	2300      	movs	r3, #0
 8012b96:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012b9c:	88fa      	ldrh	r2, [r7, #6]
 8012b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012ba4:	7ffb      	ldrb	r3, [r7, #31]
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	88fb      	ldrh	r3, [r7, #6]
 8012baa:	4413      	add	r3, r2
 8012bac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012bae:	e0a4      	b.n	8012cfa <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 80a1 	beq.w	8012cfa <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	7f1b      	ldrb	r3, [r3, #28]
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d03a      	beq.n	8012c3a <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	891b      	ldrh	r3, [r3, #8]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10d      	bne.n	8012be8 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd2:	3b02      	subs	r3, #2
 8012bd4:	4413      	add	r3, r2
 8012bd6:	22ff      	movs	r2, #255	@ 0xff
 8012bd8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681a      	ldr	r2, [r3, #0]
 8012bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be0:	3b01      	subs	r3, #1
 8012be2:	4413      	add	r3, r2
 8012be4:	22ff      	movs	r2, #255	@ 0xff
 8012be6:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	695a      	ldr	r2, [r3, #20]
 8012bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bee:	441a      	add	r2, r3
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012bf8:	88fb      	ldrh	r3, [r7, #6]
 8012bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	891b      	ldrh	r3, [r3, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d16f      	bne.n	8012ce8 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0e:	1c59      	adds	r1, r3, #1
 8012c10:	6339      	str	r1, [r7, #48]	@ 0x30
 8012c12:	4413      	add	r3, r2
 8012c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c16:	b2d2      	uxtb	r2, r2
 8012c18:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c1c:	0a18      	lsrs	r0, r3, #8
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c24:	1c59      	adds	r1, r3, #1
 8012c26:	6339      	str	r1, [r7, #48]	@ 0x30
 8012c28:	4413      	add	r3, r2
 8012c2a:	b2c2      	uxtb	r2, r0
 8012c2c:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	695b      	ldr	r3, [r3, #20]
 8012c32:	1c9a      	adds	r2, r3, #2
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	615a      	str	r2, [r3, #20]
 8012c38:	e056      	b.n	8012ce8 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	7f1b      	ldrb	r3, [r3, #28]
 8012c3e:	f003 0302 	and.w	r3, r3, #2
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d050      	beq.n	8012ce8 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	891b      	ldrh	r3, [r3, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d14a      	bne.n	8012ce4 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c54:	3b02      	subs	r3, #2
 8012c56:	4413      	add	r3, r2
 8012c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c5a:	b2d2      	uxtb	r2, r2
 8012c5c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c60:	0a19      	lsrs	r1, r3, #8
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	b2ca      	uxtb	r2, r1
 8012c6e:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c76:	18d0      	adds	r0, r2, r3
 8012c78:	88fb      	ldrh	r3, [r7, #6]
 8012c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c7c:	fb02 f303 	mul.w	r3, r2, r3
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	4413      	add	r3, r2
 8012c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c86:	4619      	mov	r1, r3
 8012c88:	f003 fe07 	bl	801689a <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	695a      	ldr	r2, [r3, #20]
 8012c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c92:	441a      	add	r2, r3
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8012c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c9a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012c9c:	88fa      	ldrh	r2, [r7, #6]
 8012c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	699b      	ldr	r3, [r3, #24]
 8012ca8:	1c5a      	adds	r2, r3, #1
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012cae:	2300      	movs	r3, #0
 8012cb0:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb8:	1c59      	adds	r1, r3, #1
 8012cba:	6339      	str	r1, [r7, #48]	@ 0x30
 8012cbc:	4413      	add	r3, r2
 8012cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cc0:	b2d2      	uxtb	r2, r2
 8012cc2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cc6:	0a18      	lsrs	r0, r3, #8
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cce:	1c59      	adds	r1, r3, #1
 8012cd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8012cd2:	4413      	add	r3, r2
 8012cd4:	b2c2      	uxtb	r2, r0
 8012cd6:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	695b      	ldr	r3, [r3, #20]
 8012cdc:	1c9a      	adds	r2, r3, #2
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	615a      	str	r2, [r3, #20]
 8012ce2:	e001      	b.n	8012ce8 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	e049      	b.n	8012d7c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012ce8:	7ffb      	ldrb	r3, [r7, #31]
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	4413      	add	r3, r2
 8012cf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d015      	beq.n	8012d2c <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681a      	ldr	r2, [r3, #0]
 8012d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d06:	18d0      	adds	r0, r2, r3
 8012d08:	88fb      	ldrh	r3, [r7, #6]
 8012d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d0c:	fb03 f202 	mul.w	r2, r3, r2
 8012d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d12:	4413      	add	r3, r2
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	4413      	add	r3, r2
 8012d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	f003 fdbd 	bl	801689a <memcpy>
        q->byteCount += NbBytesToCopy;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	695a      	ldr	r2, [r3, #20]
 8012d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d26:	441a      	add	r2, r3
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	1c5a      	adds	r2, r3, #1
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8012d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d38:	3301      	adds	r3, #1
 8012d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	f4ff aeb0 	bcc.w	8012aa6 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6919      	ldr	r1, [r3, #16]
 8012d4e:	7ffb      	ldrb	r3, [r7, #31]
 8012d50:	4419      	add	r1, r3
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	4299      	cmp	r1, r3
 8012d58:	d307      	bcc.n	8012d6a <CircularQueue_Add+0x432>
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6919      	ldr	r1, [r3, #16]
 8012d5e:	7ffb      	ldrb	r3, [r7, #31]
 8012d60:	4419      	add	r1, r3
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	1acb      	subs	r3, r1, r3
 8012d68:	e003      	b.n	8012d72 <CircularQueue_Add+0x43a>
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6919      	ldr	r1, [r3, #16]
 8012d6e:	7ffb      	ldrb	r3, [r7, #31]
 8012d70:	440b      	add	r3, r1
 8012d72:	4413      	add	r3, r2
 8012d74:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8012d76:	6a3b      	ldr	r3, [r7, #32]
 8012d78:	e000      	b.n	8012d7c <CircularQueue_Add+0x444>
    return NULL;
 8012d7a:	2300      	movs	r3, #0
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3738      	adds	r7, #56	@ 0x38
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b085      	sub	sp, #20
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8012d92:	2300      	movs	r3, #0
 8012d94:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	891b      	ldrh	r3, [r3, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <CircularQueue_Remove+0x1e>
 8012d9e:	2302      	movs	r3, #2
 8012da0:	e000      	b.n	8012da4 <CircularQueue_Remove+0x20>
 8012da2:	2300      	movs	r3, #0
 8012da4:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	695b      	ldr	r3, [r3, #20]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f000 80ca 	beq.w	8012f48 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	891b      	ldrh	r3, [r3, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d120      	bne.n	8012dfe <CircularQueue_Remove+0x7a>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	1c59      	adds	r1, r3, #1
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4299      	cmp	r1, r3
 8012dda:	d306      	bcc.n	8012dea <CircularQueue_Remove+0x66>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	68d9      	ldr	r1, [r3, #12]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	1acb      	subs	r3, r1, r3
 8012de6:	3301      	adds	r3, #1
 8012de8:	e002      	b.n	8012df0 <CircularQueue_Remove+0x6c>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	3301      	adds	r3, #1
 8012df0:	4413      	add	r3, r2
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	4403      	add	r3, r0
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	e001      	b.n	8012e02 <CircularQueue_Remove+0x7e>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7f1b      	ldrb	r3, [r3, #28]
 8012e08:	f003 0301 	and.w	r3, r3, #1
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d056      	beq.n	8012ebe <CircularQueue_Remove+0x13a>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7f1b      	ldrb	r3, [r3, #28]
 8012e14:	f003 0302 	and.w	r3, r3, #2
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d150      	bne.n	8012ebe <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012e1c:	897b      	ldrh	r3, [r7, #10]
 8012e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e22:	4293      	cmp	r3, r2
 8012e24:	d103      	bne.n	8012e2e <CircularQueue_Remove+0xaa>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	891b      	ldrh	r3, [r3, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d012      	beq.n	8012e54 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	68da      	ldr	r2, [r3, #12]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d941      	bls.n	8012ebe <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	891b      	ldrh	r3, [r3, #8]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d03d      	beq.n	8012ebe <CircularQueue_Remove+0x13a>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	685a      	ldr	r2, [r3, #4]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	8912      	ldrh	r2, [r2, #8]
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d234      	bcs.n	8012ebe <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	695a      	ldr	r2, [r3, #20]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	68d9      	ldr	r1, [r3, #12]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	1acb      	subs	r3, r1, r3
 8012e62:	441a      	add	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	891b      	ldrh	r3, [r3, #8]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d120      	bne.n	8012eb8 <CircularQueue_Remove+0x134>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	4413      	add	r3, r2
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	4618      	mov	r0, r3
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	1c59      	adds	r1, r3, #1
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	4299      	cmp	r1, r3
 8012e94:	d306      	bcc.n	8012ea4 <CircularQueue_Remove+0x120>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	68d9      	ldr	r1, [r3, #12]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	1acb      	subs	r3, r1, r3
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	e002      	b.n	8012eaa <CircularQueue_Remove+0x126>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	4413      	add	r3, r2
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	021b      	lsls	r3, r3, #8
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	4403      	add	r3, r0
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	e001      	b.n	8012ebc <CircularQueue_Remove+0x138>
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	891b      	ldrh	r3, [r3, #8]
 8012ebc:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	68d9      	ldr	r1, [r3, #12]
 8012ec6:	7a7b      	ldrb	r3, [r7, #9]
 8012ec8:	4419      	add	r1, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	4299      	cmp	r1, r3
 8012ed0:	d307      	bcc.n	8012ee2 <CircularQueue_Remove+0x15e>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	68d9      	ldr	r1, [r3, #12]
 8012ed6:	7a7b      	ldrb	r3, [r7, #9]
 8012ed8:	4419      	add	r1, r3
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	1acb      	subs	r3, r1, r3
 8012ee0:	e003      	b.n	8012eea <CircularQueue_Remove+0x166>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	68d9      	ldr	r1, [r3, #12]
 8012ee6:	7a7b      	ldrb	r3, [r7, #9]
 8012ee8:	440b      	add	r3, r1
 8012eea:	4413      	add	r3, r2
 8012eec:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	8979      	ldrh	r1, [r7, #10]
 8012ef4:	7a7a      	ldrb	r2, [r7, #9]
 8012ef6:	440a      	add	r2, r1
 8012ef8:	1a9a      	subs	r2, r3, r2
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d01b      	beq.n	8012f3e <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68da      	ldr	r2, [r3, #12]
 8012f0a:	897b      	ldrh	r3, [r7, #10]
 8012f0c:	441a      	add	r2, r3
 8012f0e:	7a7b      	ldrb	r3, [r7, #9]
 8012f10:	441a      	add	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d309      	bcc.n	8012f2e <CircularQueue_Remove+0x1aa>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	68da      	ldr	r2, [r3, #12]
 8012f1e:	897b      	ldrh	r3, [r7, #10]
 8012f20:	441a      	add	r2, r3
 8012f22:	7a7b      	ldrb	r3, [r7, #9]
 8012f24:	441a      	add	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	e005      	b.n	8012f3a <CircularQueue_Remove+0x1b6>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68da      	ldr	r2, [r3, #12]
 8012f32:	897b      	ldrh	r3, [r7, #10]
 8012f34:	441a      	add	r2, r3
 8012f36:	7a7b      	ldrb	r3, [r7, #9]
 8012f38:	4413      	add	r3, r2
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	699b      	ldr	r3, [r3, #24]
 8012f42:	1e5a      	subs	r2, r3, #1
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d002      	beq.n	8012f54 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	897a      	ldrh	r2, [r7, #10]
 8012f52:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8012f54:	68fb      	ldr	r3, [r7, #12]
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3714      	adds	r7, #20
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr

08012f62 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8012f62:	b480      	push	{r7}
 8012f64:	b087      	sub	sp, #28
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8012f70:	2300      	movs	r3, #0
 8012f72:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	891b      	ldrh	r3, [r3, #8]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d101      	bne.n	8012f80 <CircularQueue_Sense+0x1e>
 8012f7c:	2302      	movs	r3, #2
 8012f7e:	e000      	b.n	8012f82 <CircularQueue_Sense+0x20>
 8012f80:	2300      	movs	r3, #0
 8012f82:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8012f84:	2300      	movs	r3, #0
 8012f86:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	695b      	ldr	r3, [r3, #20]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f000 808e 	beq.w	80130b2 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	891b      	ldrh	r3, [r3, #8]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d120      	bne.n	8012fe6 <CircularQueue_Sense+0x84>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	4413      	add	r3, r2
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	1c59      	adds	r1, r3, #1
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	4299      	cmp	r1, r3
 8012fc2:	d306      	bcc.n	8012fd2 <CircularQueue_Sense+0x70>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	68d9      	ldr	r1, [r3, #12]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	1acb      	subs	r3, r1, r3
 8012fce:	3301      	adds	r3, #1
 8012fd0:	e002      	b.n	8012fd8 <CircularQueue_Sense+0x76>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	4413      	add	r3, r2
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	021b      	lsls	r3, r3, #8
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4403      	add	r3, r0
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	e001      	b.n	8012fea <CircularQueue_Sense+0x88>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	891b      	ldrh	r3, [r3, #8]
 8012fea:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	7f1b      	ldrb	r3, [r3, #28]
 8012ff0:	f003 0301 	and.w	r3, r3, #1
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d047      	beq.n	8013088 <CircularQueue_Sense+0x126>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	7f1b      	ldrb	r3, [r3, #28]
 8012ffc:	f003 0302 	and.w	r3, r3, #2
 8013000:	2b00      	cmp	r3, #0
 8013002:	d141      	bne.n	8013088 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013004:	8a7b      	ldrh	r3, [r7, #18]
 8013006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801300a:	4293      	cmp	r3, r2
 801300c:	d103      	bne.n	8013016 <CircularQueue_Sense+0xb4>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	891b      	ldrh	r3, [r3, #8]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d012      	beq.n	801303c <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	68da      	ldr	r2, [r3, #12]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801301e:	429a      	cmp	r2, r3
 8013020:	d932      	bls.n	8013088 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	891b      	ldrh	r3, [r3, #8]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d02e      	beq.n	8013088 <CircularQueue_Sense+0x126>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685a      	ldr	r2, [r3, #4]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	8912      	ldrh	r2, [r2, #8]
 8013038:	4293      	cmp	r3, r2
 801303a:	d225      	bcs.n	8013088 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 801303c:	2300      	movs	r3, #0
 801303e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	891b      	ldrh	r3, [r3, #8]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d11c      	bne.n	8013082 <CircularQueue_Sense+0x120>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	4413      	add	r3, r2
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	4618      	mov	r0, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681a      	ldr	r2, [r3, #0]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	1c59      	adds	r1, r3, #1
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	4299      	cmp	r1, r3
 8013062:	d305      	bcc.n	8013070 <CircularQueue_Sense+0x10e>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	68f9      	ldr	r1, [r7, #12]
 801306a:	1acb      	subs	r3, r1, r3
 801306c:	3301      	adds	r3, #1
 801306e:	e001      	b.n	8013074 <CircularQueue_Sense+0x112>
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	3301      	adds	r3, #1
 8013074:	4413      	add	r3, r2
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	021b      	lsls	r3, r3, #8
 801307a:	b29b      	uxth	r3, r3
 801307c:	4403      	add	r3, r0
 801307e:	b29b      	uxth	r3, r3
 8013080:	e001      	b.n	8013086 <CircularQueue_Sense+0x124>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	891b      	ldrh	r3, [r3, #8]
 8013086:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	7af9      	ldrb	r1, [r7, #11]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4419      	add	r1, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	4299      	cmp	r1, r3
 8013098:	d306      	bcc.n	80130a8 <CircularQueue_Sense+0x146>
 801309a:	7af9      	ldrb	r1, [r7, #11]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	4419      	add	r1, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	1acb      	subs	r3, r1, r3
 80130a6:	e002      	b.n	80130ae <CircularQueue_Sense+0x14c>
 80130a8:	7af9      	ldrb	r1, [r7, #11]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	440b      	add	r3, r1
 80130ae:	4413      	add	r3, r2
 80130b0:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d002      	beq.n	80130be <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	8a7a      	ldrh	r2, [r7, #18]
 80130bc:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80130be:	697b      	ldr	r3, [r7, #20]
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	371c      	adds	r7, #28
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr

080130cc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80130cc:	b480      	push	{r7}
 80130ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80130d0:	4b03      	ldr	r3, [pc, #12]	@ (80130e0 <LL_FLASH_GetUDN+0x14>)
 80130d2:	681b      	ldr	r3, [r3, #0]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr
 80130de:	bf00      	nop
 80130e0:	1fff7580 	.word	0x1fff7580

080130e4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80130e4:	b480      	push	{r7}
 80130e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80130e8:	4b03      	ldr	r3, [pc, #12]	@ (80130f8 <LL_FLASH_GetDeviceID+0x14>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	b2db      	uxtb	r3, r3
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr
 80130f8:	1fff7584 	.word	0x1fff7584

080130fc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80130fc:	b480      	push	{r7}
 80130fe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8013100:	4b03      	ldr	r3, [pc, #12]	@ (8013110 <LL_FLASH_GetSTCompanyID+0x14>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	0a1b      	lsrs	r3, r3, #8
}
 8013106:	4618      	mov	r0, r3
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr
 8013110:	1fff7584 	.word	0x1fff7584

08013114 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8013114:	b5b0      	push	{r4, r5, r7, lr}
 8013116:	b090      	sub	sp, #64	@ 0x40
 8013118:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801311a:	2392      	movs	r3, #146	@ 0x92
 801311c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 8013120:	4a4d      	ldr	r2, [pc, #308]	@ (8013258 <APP_BLE_Init+0x144>)
 8013122:	2100      	movs	r1, #0
 8013124:	2020      	movs	r0, #32
 8013126:	f002 ff8d 	bl	8016044 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 801312a:	4a4c      	ldr	r2, [pc, #304]	@ (801325c <APP_BLE_Init+0x148>)
 801312c:	2100      	movs	r1, #0
 801312e:	2008      	movs	r0, #8
 8013130:	f002 ff88 	bl	8016044 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8013134:	4b4a      	ldr	r3, [pc, #296]	@ (8013260 <APP_BLE_Init+0x14c>)
 8013136:	1d3c      	adds	r4, r7, #4
 8013138:	461d      	mov	r5, r3
 801313a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801313c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801313e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013146:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801314a:	c403      	stmia	r4!, {r0, r1}
 801314c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801314e:	f000 fba3 	bl	8013898 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8013152:	2101      	movs	r1, #1
 8013154:	2002      	movs	r0, #2
 8013156:	f002 fe49 	bl	8015dec <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801315a:	4a42      	ldr	r2, [pc, #264]	@ (8013264 <APP_BLE_Init+0x150>)
 801315c:	2100      	movs	r1, #0
 801315e:	2004      	movs	r0, #4
 8013160:	f002 ff70 	bl	8016044 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8013164:	1d3b      	adds	r3, r7, #4
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe fc2a 	bl	80119c0 <SHCI_C2_BLE_Init>
 801316c:	4603      	mov	r3, r0
 801316e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8013172:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8013176:	2b00      	cmp	r3, #0
 8013178:	d012      	beq.n	80131a0 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 801317a:	483b      	ldr	r0, [pc, #236]	@ (8013268 <APP_BLE_Init+0x154>)
 801317c:	f7ff fa2e 	bl	80125dc <DbgTraceGetFileName>
 8013180:	4601      	mov	r1, r0
 8013182:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 8013186:	4a39      	ldr	r2, [pc, #228]	@ (801326c <APP_BLE_Init+0x158>)
 8013188:	4839      	ldr	r0, [pc, #228]	@ (8013270 <APP_BLE_Init+0x15c>)
 801318a:	f003 f95b 	bl	8016444 <iprintf>
 801318e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8013192:	4619      	mov	r1, r3
 8013194:	4837      	ldr	r0, [pc, #220]	@ (8013274 <APP_BLE_Init+0x160>)
 8013196:	f003 f955 	bl	8016444 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801319a:	f7f1 f8c1 	bl	8004320 <Error_Handler>
 801319e:	e00c      	b.n	80131ba <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80131a0:	4831      	ldr	r0, [pc, #196]	@ (8013268 <APP_BLE_Init+0x154>)
 80131a2:	f7ff fa1b 	bl	80125dc <DbgTraceGetFileName>
 80131a6:	4601      	mov	r1, r0
 80131a8:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 80131ac:	4a2f      	ldr	r2, [pc, #188]	@ (801326c <APP_BLE_Init+0x158>)
 80131ae:	4830      	ldr	r0, [pc, #192]	@ (8013270 <APP_BLE_Init+0x15c>)
 80131b0:	f003 f948 	bl	8016444 <iprintf>
 80131b4:	4830      	ldr	r0, [pc, #192]	@ (8013278 <APP_BLE_Init+0x164>)
 80131b6:	f003 f945 	bl	8016444 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80131ba:	f000 fb83 	bl	80138c4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80131be:	f7fe fb59 	bl	8011874 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80131c2:	4b2e      	ldr	r3, [pc, #184]	@ (801327c <APP_BLE_Init+0x168>)
 80131c4:	2200      	movs	r2, #0
 80131c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80131ca:	4b2c      	ldr	r3, [pc, #176]	@ (801327c <APP_BLE_Init+0x168>)
 80131cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80131d0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80131d2:	4a2b      	ldr	r2, [pc, #172]	@ (8013280 <APP_BLE_Init+0x16c>)
 80131d4:	2100      	movs	r1, #0
 80131d6:	2001      	movs	r0, #1
 80131d8:	f002 ff34 	bl	8016044 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80131dc:	2006      	movs	r0, #6
 80131de:	f7fe f91e 	bl	801141e <aci_hal_set_radio_activity_mask>
 80131e2:	4603      	mov	r3, r0
 80131e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80131e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d010      	beq.n	8013212 <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80131f0:	481d      	ldr	r0, [pc, #116]	@ (8013268 <APP_BLE_Init+0x154>)
 80131f2:	f7ff f9f3 	bl	80125dc <DbgTraceGetFileName>
 80131f6:	4601      	mov	r1, r0
 80131f8:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 80131fc:	4a1b      	ldr	r2, [pc, #108]	@ (801326c <APP_BLE_Init+0x158>)
 80131fe:	481c      	ldr	r0, [pc, #112]	@ (8013270 <APP_BLE_Init+0x15c>)
 8013200:	f003 f920 	bl	8016444 <iprintf>
 8013204:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013208:	4619      	mov	r1, r3
 801320a:	481e      	ldr	r0, [pc, #120]	@ (8013284 <APP_BLE_Init+0x170>)
 801320c:	f003 f91a 	bl	8016444 <iprintf>
 8013210:	e00c      	b.n	801322c <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8013212:	4815      	ldr	r0, [pc, #84]	@ (8013268 <APP_BLE_Init+0x154>)
 8013214:	f7ff f9e2 	bl	80125dc <DbgTraceGetFileName>
 8013218:	4601      	mov	r1, r0
 801321a:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 801321e:	4a13      	ldr	r2, [pc, #76]	@ (801326c <APP_BLE_Init+0x158>)
 8013220:	4813      	ldr	r0, [pc, #76]	@ (8013270 <APP_BLE_Init+0x15c>)
 8013222:	f003 f90f 	bl	8016444 <iprintf>
 8013226:	4818      	ldr	r0, [pc, #96]	@ (8013288 <APP_BLE_Init+0x174>)
 8013228:	f003 f90c 	bl	8016444 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 801322c:	4b17      	ldr	r3, [pc, #92]	@ (801328c <APP_BLE_Init+0x178>)
 801322e:	2200      	movs	r2, #0
 8013230:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8013232:	4b17      	ldr	r3, [pc, #92]	@ (8013290 <APP_BLE_Init+0x17c>)
 8013234:	2201      	movs	r2, #1
 8013236:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8013238:	f001 f8b0 	bl	801439c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 801323c:	4b0f      	ldr	r3, [pc, #60]	@ (801327c <APP_BLE_Init+0x168>)
 801323e:	2200      	movs	r2, #0
 8013240:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8013242:	4b0e      	ldr	r3, [pc, #56]	@ (801327c <APP_BLE_Init+0x168>)
 8013244:	2200      	movs	r2, #0
 8013246:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8013248:	2001      	movs	r0, #1
 801324a:	f000 fdcf 	bl	8013dec <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 801324e:	bf00      	nop
}
 8013250:	3740      	adds	r7, #64	@ 0x40
 8013252:	46bd      	mov	sp, r7
 8013254:	bdb0      	pop	{r4, r5, r7, pc}
 8013256:	bf00      	nop
 8013258:	08014291 	.word	0x08014291
 801325c:	080142b9 	.word	0x080142b9
 8013260:	08017cc4 	.word	0x08017cc4
 8013264:	08011bdd 	.word	0x08011bdd
 8013268:	08017bb8 	.word	0x08017bb8
 801326c:	080192fc 	.word	0x080192fc
 8013270:	08017bd4 	.word	0x08017bd4
 8013274:	08017be8 	.word	0x08017be8
 8013278:	08017c20 	.word	0x08017c20
 801327c:	20001154 	.word	0x20001154
 8013280:	08013f71 	.word	0x08013f71
 8013284:	08017c48 	.word	0x08017c48
 8013288:	08017c8c 	.word	0x08017c8c
 801328c:	200011dc 	.word	0x200011dc
 8013290:	200011dd 	.word	0x200011dd

08013294 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8013294:	b5b0      	push	{r4, r5, r7, lr}
 8013296:	b08e      	sub	sp, #56	@ 0x38
 8013298:	af04      	add	r7, sp, #16
 801329a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 801329c:	2392      	movs	r3, #146	@ 0x92
 801329e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	3301      	adds	r3, #1
 80132a6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	2bff      	cmp	r3, #255	@ 0xff
 80132ae:	f000 8173 	beq.w	8013598 <SVCCTL_App_Notification+0x304>
 80132b2:	2bff      	cmp	r3, #255	@ 0xff
 80132b4:	f300 82c0 	bgt.w	8013838 <SVCCTL_App_Notification+0x5a4>
 80132b8:	2b05      	cmp	r3, #5
 80132ba:	d002      	beq.n	80132c2 <SVCCTL_App_Notification+0x2e>
 80132bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80132be:	d04a      	beq.n	8013356 <SVCCTL_App_Notification+0xc2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80132c0:	e2ba      	b.n	8013838 <SVCCTL_App_Notification+0x5a4>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80132c2:	6a3b      	ldr	r3, [r7, #32]
 80132c4:	3302      	adds	r3, #2
 80132c6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	4ba1      	ldr	r3, [pc, #644]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 80132d2:	8adb      	ldrh	r3, [r3, #22]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d12d      	bne.n	8013334 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80132d8:	4b9f      	ldr	r3, [pc, #636]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 80132da:	2200      	movs	r2, #0
 80132dc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80132de:	4b9e      	ldr	r3, [pc, #632]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80132e6:	489d      	ldr	r0, [pc, #628]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 80132e8:	f7ff f978 	bl	80125dc <DbgTraceGetFileName>
 80132ec:	4601      	mov	r1, r0
 80132ee:	f44f 73e7 	mov.w	r3, #462	@ 0x1ce
 80132f2:	4a9b      	ldr	r2, [pc, #620]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 80132f4:	489b      	ldr	r0, [pc, #620]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 80132f6:	f003 f8a5 	bl	8016444 <iprintf>
 80132fa:	489b      	ldr	r0, [pc, #620]	@ (8013568 <SVCCTL_App_Notification+0x2d4>)
 80132fc:	f003 f912 	bl	8016524 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8013300:	4896      	ldr	r0, [pc, #600]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 8013302:	f7ff f96b 	bl	80125dc <DbgTraceGetFileName>
 8013306:	4601      	mov	r1, r0
 8013308:	f240 13cf 	movw	r3, #463	@ 0x1cf
 801330c:	4a94      	ldr	r2, [pc, #592]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 801330e:	4895      	ldr	r0, [pc, #596]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 8013310:	f003 f898 	bl	8016444 <iprintf>
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801331a:	b29b      	uxth	r3, r3
 801331c:	4619      	mov	r1, r3
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	78db      	ldrb	r3, [r3, #3]
 8013322:	461a      	mov	r2, r3
 8013324:	4891      	ldr	r0, [pc, #580]	@ (801356c <SVCCTL_App_Notification+0x2d8>)
 8013326:	f003 f88d 	bl	8016444 <iprintf>
        tsBle.Connected = false;
 801332a:	4b91      	ldr	r3, [pc, #580]	@ (8013570 <SVCCTL_App_Notification+0x2dc>)
 801332c:	2200      	movs	r2, #0
 801332e:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 8013330:	f7ff fef0 	bl	8013114 <APP_BLE_Init>
      Adv_Request(APP_BLE_FAST_ADV);
 8013334:	2001      	movs	r0, #1
 8013336:	f000 fd59 	bl	8013dec <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801333a:	4b8e      	ldr	r3, [pc, #568]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 801333c:	2201      	movs	r2, #1
 801333e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8013340:	4b85      	ldr	r3, [pc, #532]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 8013342:	8ada      	ldrh	r2, [r3, #22]
 8013344:	4b8b      	ldr	r3, [pc, #556]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 8013346:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8013348:	488a      	ldr	r0, [pc, #552]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 801334a:	f001 f813 	bl	8014374 <Custom_APP_Notification>
      tsCmd.LED = false;
 801334e:	4b8a      	ldr	r3, [pc, #552]	@ (8013578 <SVCCTL_App_Notification+0x2e4>)
 8013350:	2200      	movs	r2, #0
 8013352:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8013354:	e273      	b.n	801383e <SVCCTL_App_Notification+0x5aa>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8013356:	6a3b      	ldr	r3, [r7, #32]
 8013358:	3302      	adds	r3, #2
 801335a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d06c      	beq.n	801343e <SVCCTL_App_Notification+0x1aa>
 8013364:	2b03      	cmp	r3, #3
 8013366:	f040 80f4 	bne.w	8013552 <SVCCTL_App_Notification+0x2be>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	3301      	adds	r3, #1
 801336e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8013370:	487a      	ldr	r0, [pc, #488]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 8013372:	f7ff f933 	bl	80125dc <DbgTraceGetFileName>
 8013376:	4601      	mov	r1, r0
 8013378:	f240 2303 	movw	r3, #515	@ 0x203
 801337c:	4a78      	ldr	r2, [pc, #480]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 801337e:	4879      	ldr	r0, [pc, #484]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 8013380:	f003 f860 	bl	8016444 <iprintf>
 8013384:	487d      	ldr	r0, [pc, #500]	@ (801357c <SVCCTL_App_Notification+0x2e8>)
 8013386:	f003 f8cd 	bl	8016524 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801338a:	4874      	ldr	r0, [pc, #464]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 801338c:	f7ff f926 	bl	80125dc <DbgTraceGetFileName>
 8013390:	4601      	mov	r1, r0
 8013392:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013396:	4a72      	ldr	r2, [pc, #456]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 8013398:	4872      	ldr	r0, [pc, #456]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 801339a:	f003 f853 	bl	8016444 <iprintf>
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7ed f894 	bl	80004d4 <__aeabi_i2d>
 80133ac:	f04f 0200 	mov.w	r2, #0
 80133b0:	4b73      	ldr	r3, [pc, #460]	@ (8013580 <SVCCTL_App_Notification+0x2ec>)
 80133b2:	f7ed f8f9 	bl	80005a8 <__aeabi_dmul>
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	4610      	mov	r0, r2
 80133bc:	4619      	mov	r1, r3
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	461c      	mov	r4, r3
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	461a      	mov	r2, r3
 80133d2:	4613      	mov	r3, r2
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	4413      	add	r3, r2
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	9301      	str	r3, [sp, #4]
 80133dc:	9400      	str	r4, [sp, #0]
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	4868      	ldr	r0, [pc, #416]	@ (8013584 <SVCCTL_App_Notification+0x2f0>)
 80133e4:	f003 f82e 	bl	8016444 <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80133e8:	4867      	ldr	r0, [pc, #412]	@ (8013588 <SVCCTL_App_Notification+0x2f4>)
 80133ea:	f7ef fb43 	bl	8002a74 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80133f4:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ed f86c 	bl	80004d4 <__aeabi_i2d>
 80133fc:	f04f 0200 	mov.w	r2, #0
 8013400:	4b5f      	ldr	r3, [pc, #380]	@ (8013580 <SVCCTL_App_Notification+0x2ec>)
 8013402:	f7ed f8d1 	bl	80005a8 <__aeabi_dmul>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4610      	mov	r0, r2
 801340c:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8013414:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8013416:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801341e:	b29b      	uxth	r3, r3
 8013420:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8013422:	4613      	mov	r3, r2
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	4413      	add	r3, r2
 8013428:	005b      	lsls	r3, r3, #1
 801342a:	9301      	str	r3, [sp, #4]
 801342c:	9400      	str	r4, [sp, #0]
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	4856      	ldr	r0, [pc, #344]	@ (801358c <SVCCTL_App_Notification+0x2f8>)
 8013434:	f7ef fb1e 	bl	8002a74 <DIAG>
          Connection_Interval_Update_Req();
 8013438:	f000 feba 	bl	80141b0 <Connection_Interval_Update_Req>
          break;
 801343c:	e08a      	b.n	8013554 <SVCCTL_App_Notification+0x2c0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	3301      	adds	r3, #1
 8013442:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8013444:	4845      	ldr	r0, [pc, #276]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 8013446:	f7ff f8c9 	bl	80125dc <DbgTraceGetFileName>
 801344a:	4601      	mov	r1, r0
 801344c:	f240 231f 	movw	r3, #543	@ 0x21f
 8013450:	4a43      	ldr	r2, [pc, #268]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 8013452:	4844      	ldr	r0, [pc, #272]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 8013454:	f002 fff6 	bl	8016444 <iprintf>
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801345e:	b29b      	uxth	r3, r3
 8013460:	4619      	mov	r1, r3
 8013462:	484b      	ldr	r0, [pc, #300]	@ (8013590 <SVCCTL_App_Notification+0x2fc>)
 8013464:	f002 ffee 	bl	8016444 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8013468:	483c      	ldr	r0, [pc, #240]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 801346a:	f7ff f8b7 	bl	80125dc <DbgTraceGetFileName>
 801346e:	4601      	mov	r1, r0
 8013470:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8013474:	4a3a      	ldr	r2, [pc, #232]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 8013476:	483b      	ldr	r0, [pc, #236]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 8013478:	f002 ffe4 	bl	8016444 <iprintf>
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	7a9b      	ldrb	r3, [r3, #10]
 8013480:	4618      	mov	r0, r3
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	7a5b      	ldrb	r3, [r3, #9]
 8013486:	461c      	mov	r4, r3
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	7a1b      	ldrb	r3, [r3, #8]
 801348c:	461d      	mov	r5, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	79db      	ldrb	r3, [r3, #7]
 8013492:	461a      	mov	r2, r3
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	799b      	ldrb	r3, [r3, #6]
 8013498:	4619      	mov	r1, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	795b      	ldrb	r3, [r3, #5]
 801349e:	9302      	str	r3, [sp, #8]
 80134a0:	9101      	str	r1, [sp, #4]
 80134a2:	9200      	str	r2, [sp, #0]
 80134a4:	462b      	mov	r3, r5
 80134a6:	4622      	mov	r2, r4
 80134a8:	4601      	mov	r1, r0
 80134aa:	483a      	ldr	r0, [pc, #232]	@ (8013594 <SVCCTL_App_Notification+0x300>)
 80134ac:	f002 ffca 	bl	8016444 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80134b0:	482a      	ldr	r0, [pc, #168]	@ (801355c <SVCCTL_App_Notification+0x2c8>)
 80134b2:	f7ff f893 	bl	80125dc <DbgTraceGetFileName>
 80134b6:	4601      	mov	r1, r0
 80134b8:	f240 2327 	movw	r3, #551	@ 0x227
 80134bc:	4a28      	ldr	r2, [pc, #160]	@ (8013560 <SVCCTL_App_Notification+0x2cc>)
 80134be:	4829      	ldr	r0, [pc, #164]	@ (8013564 <SVCCTL_App_Notification+0x2d0>)
 80134c0:	f002 ffc0 	bl	8016444 <iprintf>
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7ed f801 	bl	80004d4 <__aeabi_i2d>
 80134d2:	f04f 0200 	mov.w	r2, #0
 80134d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013580 <SVCCTL_App_Notification+0x2ec>)
 80134d8:	f7ed f866 	bl	80005a8 <__aeabi_dmul>
 80134dc:	4602      	mov	r2, r0
 80134de:	460b      	mov	r3, r1
 80134e0:	4610      	mov	r0, r2
 80134e2:	4619      	mov	r1, r3
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	461c      	mov	r4, r3
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80134f4:	b29b      	uxth	r3, r3
 80134f6:	461a      	mov	r2, r3
 80134f8:	4613      	mov	r3, r2
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	4413      	add	r3, r2
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	9301      	str	r3, [sp, #4]
 8013502:	9400      	str	r4, [sp, #0]
 8013504:	4602      	mov	r2, r0
 8013506:	460b      	mov	r3, r1
 8013508:	481e      	ldr	r0, [pc, #120]	@ (8013584 <SVCCTL_App_Notification+0x2f0>)
 801350a:	f002 ff9b 	bl	8016444 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801350e:	4b12      	ldr	r3, [pc, #72]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 8013510:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013514:	2b04      	cmp	r3, #4
 8013516:	d104      	bne.n	8013522 <SVCCTL_App_Notification+0x28e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8013518:	4b0f      	ldr	r3, [pc, #60]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 801351a:	2206      	movs	r2, #6
 801351c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8013520:	e003      	b.n	801352a <SVCCTL_App_Notification+0x296>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8013522:	4b0d      	ldr	r3, [pc, #52]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 8013524:	2205      	movs	r2, #5
 8013526:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013530:	b29a      	uxth	r2, r3
 8013532:	4b09      	ldr	r3, [pc, #36]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 8013534:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8013536:	4b0f      	ldr	r3, [pc, #60]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 8013538:	2200      	movs	r2, #0
 801353a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801353c:	4b06      	ldr	r3, [pc, #24]	@ (8013558 <SVCCTL_App_Notification+0x2c4>)
 801353e:	8ada      	ldrh	r2, [r3, #22]
 8013540:	4b0c      	ldr	r3, [pc, #48]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 8013542:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8013544:	480b      	ldr	r0, [pc, #44]	@ (8013574 <SVCCTL_App_Notification+0x2e0>)
 8013546:	f000 ff15 	bl	8014374 <Custom_APP_Notification>
          tsBle.Connected = true;
 801354a:	4b09      	ldr	r3, [pc, #36]	@ (8013570 <SVCCTL_App_Notification+0x2dc>)
 801354c:	2201      	movs	r2, #1
 801354e:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8013550:	e000      	b.n	8013554 <SVCCTL_App_Notification+0x2c0>
          break;
 8013552:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8013554:	e173      	b.n	801383e <SVCCTL_App_Notification+0x5aa>
 8013556:	bf00      	nop
 8013558:	20001154 	.word	0x20001154
 801355c:	08017bb8 	.word	0x08017bb8
 8013560:	0801930c 	.word	0x0801930c
 8013564:	08017bd4 	.word	0x08017bd4
 8013568:	08017d00 	.word	0x08017d00
 801356c:	08017d2c 	.word	0x08017d2c
 8013570:	20001140 	.word	0x20001140
 8013574:	200011d8 	.word	0x200011d8
 8013578:	20000da0 	.word	0x20000da0
 801357c:	08017d68 	.word	0x08017d68
 8013580:	3ff40000 	.word	0x3ff40000
 8013584:	08017d9c 	.word	0x08017d9c
 8013588:	08017e08 	.word	0x08017e08
 801358c:	08017e4c 	.word	0x08017e4c
 8013590:	08017eac 	.word	0x08017eac
 8013594:	08017ef4 	.word	0x08017ef4
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8013598:	6a3b      	ldr	r3, [r7, #32]
 801359a:	3302      	adds	r3, #2
 801359c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	881b      	ldrh	r3, [r3, #0]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80135a8:	4293      	cmp	r3, r2
 80135aa:	f000 8130 	beq.w	801380e <SVCCTL_App_Notification+0x57a>
 80135ae:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80135b2:	4293      	cmp	r3, r2
 80135b4:	f300 8142 	bgt.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80135bc:	d02e      	beq.n	801361c <SVCCTL_App_Notification+0x388>
 80135be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80135c2:	f300 813b 	bgt.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135c6:	2b04      	cmp	r3, #4
 80135c8:	f000 8134 	beq.w	8013834 <SVCCTL_App_Notification+0x5a0>
 80135cc:	2b04      	cmp	r3, #4
 80135ce:	f2c0 8135 	blt.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135d2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80135d6:	4293      	cmp	r3, r2
 80135d8:	f300 8130 	bgt.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80135e0:	f340 812c 	ble.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135e4:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80135e8:	2b09      	cmp	r3, #9
 80135ea:	f200 8127 	bhi.w	801383c <SVCCTL_App_Notification+0x5a8>
 80135ee:	a201      	add	r2, pc, #4	@ (adr r2, 80135f4 <SVCCTL_App_Notification+0x360>)
 80135f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f4:	08013789 	.word	0x08013789
 80135f8:	0801365d 	.word	0x0801365d
 80135fc:	0801383d 	.word	0x0801383d
 8013600:	0801383d 	.word	0x0801383d
 8013604:	0801383d 	.word	0x0801383d
 8013608:	0801383d 	.word	0x0801383d
 801360c:	08013625 	.word	0x08013625
 8013610:	0801383d 	.word	0x0801383d
 8013614:	080136cf 	.word	0x080136cf
 8013618:	08013641 	.word	0x08013641
          mutex = 1;
 801361c:	4b8a      	ldr	r3, [pc, #552]	@ (8013848 <SVCCTL_App_Notification+0x5b4>)
 801361e:	2201      	movs	r2, #1
 8013620:	701a      	strb	r2, [r3, #0]
          break;
 8013622:	e108      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8013624:	4889      	ldr	r0, [pc, #548]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 8013626:	f7fe ffd9 	bl	80125dc <DbgTraceGetFileName>
 801362a:	4601      	mov	r1, r0
 801362c:	f240 237f 	movw	r3, #639	@ 0x27f
 8013630:	4a87      	ldr	r2, [pc, #540]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 8013632:	4888      	ldr	r0, [pc, #544]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 8013634:	f002 ff06 	bl	8016444 <iprintf>
 8013638:	4887      	ldr	r0, [pc, #540]	@ (8013858 <SVCCTL_App_Notification+0x5c4>)
 801363a:	f002 ff03 	bl	8016444 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801363e:	e0fa      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8013640:	4882      	ldr	r0, [pc, #520]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 8013642:	f7fe ffcb 	bl	80125dc <DbgTraceGetFileName>
 8013646:	4601      	mov	r1, r0
 8013648:	f240 238f 	movw	r3, #655	@ 0x28f
 801364c:	4a80      	ldr	r2, [pc, #512]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801364e:	4881      	ldr	r0, [pc, #516]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 8013650:	f002 fef8 	bl	8016444 <iprintf>
 8013654:	4881      	ldr	r0, [pc, #516]	@ (801385c <SVCCTL_App_Notification+0x5c8>)
 8013656:	f002 ff65 	bl	8016524 <puts>
          break;
 801365a:	e0ec      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 801365c:	487b      	ldr	r0, [pc, #492]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 801365e:	f7fe ffbd 	bl	80125dc <DbgTraceGetFileName>
 8013662:	4601      	mov	r1, r0
 8013664:	f240 2396 	movw	r3, #662	@ 0x296
 8013668:	4a79      	ldr	r2, [pc, #484]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801366a:	487a      	ldr	r0, [pc, #488]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801366c:	f002 feea 	bl	8016444 <iprintf>
 8013670:	487b      	ldr	r0, [pc, #492]	@ (8013860 <SVCCTL_App_Notification+0x5cc>)
 8013672:	f002 ff57 	bl	8016524 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8013676:	4b7b      	ldr	r3, [pc, #492]	@ (8013864 <SVCCTL_App_Notification+0x5d0>)
 8013678:	8adb      	ldrh	r3, [r3, #22]
 801367a:	497b      	ldr	r1, [pc, #492]	@ (8013868 <SVCCTL_App_Notification+0x5d4>)
 801367c:	4618      	mov	r0, r3
 801367e:	f7fd f87b 	bl	8010778 <aci_gap_pass_key_resp>
 8013682:	4603      	mov	r3, r0
 8013684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8013688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801368c:	2b00      	cmp	r3, #0
 801368e:	d010      	beq.n	80136b2 <SVCCTL_App_Notification+0x41e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8013690:	486e      	ldr	r0, [pc, #440]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 8013692:	f7fe ffa3 	bl	80125dc <DbgTraceGetFileName>
 8013696:	4601      	mov	r1, r0
 8013698:	f240 239b 	movw	r3, #667	@ 0x29b
 801369c:	4a6c      	ldr	r2, [pc, #432]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801369e:	486d      	ldr	r0, [pc, #436]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80136a0:	f002 fed0 	bl	8016444 <iprintf>
 80136a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a8:	4619      	mov	r1, r3
 80136aa:	4870      	ldr	r0, [pc, #448]	@ (801386c <SVCCTL_App_Notification+0x5d8>)
 80136ac:	f002 feca 	bl	8016444 <iprintf>
          break;
 80136b0:	e0c1      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80136b2:	4866      	ldr	r0, [pc, #408]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80136b4:	f7fe ff92 	bl	80125dc <DbgTraceGetFileName>
 80136b8:	4601      	mov	r1, r0
 80136ba:	f240 239f 	movw	r3, #671	@ 0x29f
 80136be:	4a64      	ldr	r2, [pc, #400]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 80136c0:	4864      	ldr	r0, [pc, #400]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80136c2:	f002 febf 	bl	8016444 <iprintf>
 80136c6:	486a      	ldr	r0, [pc, #424]	@ (8013870 <SVCCTL_App_Notification+0x5dc>)
 80136c8:	f002 ff2c 	bl	8016524 <puts>
          break;
 80136cc:	e0b3      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80136ce:	485f      	ldr	r0, [pc, #380]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80136d0:	f7fe ff84 	bl	80125dc <DbgTraceGetFileName>
 80136d4:	4601      	mov	r1, r0
 80136d6:	f240 23a7 	movw	r3, #679	@ 0x2a7
 80136da:	4a5d      	ldr	r2, [pc, #372]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 80136dc:	485d      	ldr	r0, [pc, #372]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80136de:	f002 feb1 	bl	8016444 <iprintf>
 80136e2:	4864      	ldr	r0, [pc, #400]	@ (8013874 <SVCCTL_App_Notification+0x5e0>)
 80136e4:	f002 ff1e 	bl	8016524 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80136e8:	4858      	ldr	r0, [pc, #352]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80136ea:	f7fe ff77 	bl	80125dc <DbgTraceGetFileName>
 80136ee:	4601      	mov	r1, r0
 80136f0:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80136f4:	4a56      	ldr	r2, [pc, #344]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 80136f6:	4857      	ldr	r0, [pc, #348]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80136f8:	f002 fea4 	bl	8016444 <iprintf>
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	3302      	adds	r3, #2
 8013700:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8013704:	4619      	mov	r1, r3
 8013706:	485c      	ldr	r0, [pc, #368]	@ (8013878 <SVCCTL_App_Notification+0x5e4>)
 8013708:	f002 fe9c 	bl	8016444 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 801370c:	484f      	ldr	r0, [pc, #316]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 801370e:	f7fe ff65 	bl	80125dc <DbgTraceGetFileName>
 8013712:	4601      	mov	r1, r0
 8013714:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8013718:	4a4d      	ldr	r2, [pc, #308]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801371a:	484e      	ldr	r0, [pc, #312]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801371c:	f002 fe92 	bl	8016444 <iprintf>
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	3302      	adds	r3, #2
 8013724:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8013728:	4619      	mov	r1, r3
 801372a:	4854      	ldr	r0, [pc, #336]	@ (801387c <SVCCTL_App_Notification+0x5e8>)
 801372c:	f002 fe8a 	bl	8016444 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8013730:	4b4c      	ldr	r3, [pc, #304]	@ (8013864 <SVCCTL_App_Notification+0x5d0>)
 8013732:	8adb      	ldrh	r3, [r3, #22]
 8013734:	2101      	movs	r1, #1
 8013736:	4618      	mov	r0, r3
 8013738:	f7fd f9c8 	bl	8010acc <aci_gap_numeric_comparison_value_confirm_yesno>
 801373c:	4603      	mov	r3, r0
 801373e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8013742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013746:	2b00      	cmp	r3, #0
 8013748:	d010      	beq.n	801376c <SVCCTL_App_Notification+0x4d8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 801374a:	4840      	ldr	r0, [pc, #256]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 801374c:	f7fe ff46 	bl	80125dc <DbgTraceGetFileName>
 8013750:	4601      	mov	r1, r0
 8013752:	f240 23af 	movw	r3, #687	@ 0x2af
 8013756:	4a3e      	ldr	r2, [pc, #248]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 8013758:	483e      	ldr	r0, [pc, #248]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801375a:	f002 fe73 	bl	8016444 <iprintf>
 801375e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013762:	4619      	mov	r1, r3
 8013764:	4846      	ldr	r0, [pc, #280]	@ (8013880 <SVCCTL_App_Notification+0x5ec>)
 8013766:	f002 fe6d 	bl	8016444 <iprintf>
          break;
 801376a:	e064      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 801376c:	4837      	ldr	r0, [pc, #220]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 801376e:	f7fe ff35 	bl	80125dc <DbgTraceGetFileName>
 8013772:	4601      	mov	r1, r0
 8013774:	f240 23b3 	movw	r3, #691	@ 0x2b3
 8013778:	4a35      	ldr	r2, [pc, #212]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801377a:	4836      	ldr	r0, [pc, #216]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801377c:	f002 fe62 	bl	8016444 <iprintf>
 8013780:	4840      	ldr	r0, [pc, #256]	@ (8013884 <SVCCTL_App_Notification+0x5f0>)
 8013782:	f002 fecf 	bl	8016524 <puts>
          break;
 8013786:	e056      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	3302      	adds	r3, #2
 801378c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 801378e:	482f      	ldr	r0, [pc, #188]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 8013790:	f7fe ff24 	bl	80125dc <DbgTraceGetFileName>
 8013794:	4601      	mov	r1, r0
 8013796:	f240 23bd 	movw	r3, #701	@ 0x2bd
 801379a:	4a2d      	ldr	r2, [pc, #180]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801379c:	482d      	ldr	r0, [pc, #180]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801379e:	f002 fe51 	bl	8016444 <iprintf>
 80137a2:	4839      	ldr	r0, [pc, #228]	@ (8013888 <SVCCTL_App_Notification+0x5f4>)
 80137a4:	f002 febe 	bl	8016524 <puts>
          if (p_pairing_complete->Status != 0)
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	789b      	ldrb	r3, [r3, #2]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d013      	beq.n	80137d8 <SVCCTL_App_Notification+0x544>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80137b0:	4826      	ldr	r0, [pc, #152]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80137b2:	f7fe ff13 	bl	80125dc <DbgTraceGetFileName>
 80137b6:	4601      	mov	r1, r0
 80137b8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80137bc:	4a24      	ldr	r2, [pc, #144]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 80137be:	4825      	ldr	r0, [pc, #148]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80137c0:	f002 fe40 	bl	8016444 <iprintf>
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	789b      	ldrb	r3, [r3, #2]
 80137c8:	4619      	mov	r1, r3
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	78db      	ldrb	r3, [r3, #3]
 80137ce:	461a      	mov	r2, r3
 80137d0:	482e      	ldr	r0, [pc, #184]	@ (801388c <SVCCTL_App_Notification+0x5f8>)
 80137d2:	f002 fe37 	bl	8016444 <iprintf>
 80137d6:	e00c      	b.n	80137f2 <SVCCTL_App_Notification+0x55e>
            APP_DBG_MSG("     - Pairing Success\n");
 80137d8:	481c      	ldr	r0, [pc, #112]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80137da:	f7fe feff 	bl	80125dc <DbgTraceGetFileName>
 80137de:	4601      	mov	r1, r0
 80137e0:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
 80137e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 80137e6:	481b      	ldr	r0, [pc, #108]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 80137e8:	f002 fe2c 	bl	8016444 <iprintf>
 80137ec:	4828      	ldr	r0, [pc, #160]	@ (8013890 <SVCCTL_App_Notification+0x5fc>)
 80137ee:	f002 fe99 	bl	8016524 <puts>
          APP_DBG_MSG("\n");
 80137f2:	4816      	ldr	r0, [pc, #88]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 80137f4:	f7fe fef2 	bl	80125dc <DbgTraceGetFileName>
 80137f8:	4601      	mov	r1, r0
 80137fa:	f240 23c6 	movw	r3, #710	@ 0x2c6
 80137fe:	4a14      	ldr	r2, [pc, #80]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 8013800:	4814      	ldr	r0, [pc, #80]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 8013802:	f002 fe1f 	bl	8016444 <iprintf>
 8013806:	200a      	movs	r0, #10
 8013808:	f002 fe2e 	bl	8016468 <putchar>
          break;
 801380c:	e013      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 801380e:	480f      	ldr	r0, [pc, #60]	@ (801384c <SVCCTL_App_Notification+0x5b8>)
 8013810:	f7fe fee4 	bl	80125dc <DbgTraceGetFileName>
 8013814:	4601      	mov	r1, r0
 8013816:	f240 23cf 	movw	r3, #719	@ 0x2cf
 801381a:	4a0d      	ldr	r2, [pc, #52]	@ (8013850 <SVCCTL_App_Notification+0x5bc>)
 801381c:	480d      	ldr	r0, [pc, #52]	@ (8013854 <SVCCTL_App_Notification+0x5c0>)
 801381e:	f002 fe11 	bl	8016444 <iprintf>
 8013822:	481c      	ldr	r0, [pc, #112]	@ (8013894 <SVCCTL_App_Notification+0x600>)
 8013824:	f002 fe0e 	bl	8016444 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8013828:	4b0e      	ldr	r3, [pc, #56]	@ (8013864 <SVCCTL_App_Notification+0x5d0>)
 801382a:	8adb      	ldrh	r3, [r3, #22]
 801382c:	4618      	mov	r0, r3
 801382e:	f7fd fc60 	bl	80110f2 <aci_gatt_confirm_indication>
        break;
 8013832:	e000      	b.n	8013836 <SVCCTL_App_Notification+0x5a2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8013834:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013836:	e001      	b.n	801383c <SVCCTL_App_Notification+0x5a8>
      break;
 8013838:	bf00      	nop
 801383a:	e000      	b.n	801383e <SVCCTL_App_Notification+0x5aa>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801383c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801383e:	2301      	movs	r3, #1
}
 8013840:	4618      	mov	r0, r3
 8013842:	3728      	adds	r7, #40	@ 0x28
 8013844:	46bd      	mov	sp, r7
 8013846:	bdb0      	pop	{r4, r5, r7, pc}
 8013848:	200011dd 	.word	0x200011dd
 801384c:	08017bb8 	.word	0x08017bb8
 8013850:	0801930c 	.word	0x0801930c
 8013854:	08017bd4 	.word	0x08017bd4
 8013858:	08017f44 	.word	0x08017f44
 801385c:	08017f6c 	.word	0x08017f6c
 8013860:	08017f9c 	.word	0x08017f9c
 8013864:	20001154 	.word	0x20001154
 8013868:	0001b207 	.word	0x0001b207
 801386c:	08017fc4 	.word	0x08017fc4
 8013870:	08017ff8 	.word	0x08017ff8
 8013874:	08018020 	.word	0x08018020
 8013878:	08018054 	.word	0x08018054
 801387c:	08018070 	.word	0x08018070
 8013880:	08018088 	.word	0x08018088
 8013884:	080180d8 	.word	0x080180d8
 8013888:	08018120 	.word	0x08018120
 801388c:	0801814c 	.word	0x0801814c
 8013890:	08018188 	.word	0x08018188
 8013894:	080181a0 	.word	0x080181a0

08013898 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 801389e:	4b06      	ldr	r3, [pc, #24]	@ (80138b8 <Ble_Tl_Init+0x20>)
 80138a0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80138a2:	4b06      	ldr	r3, [pc, #24]	@ (80138bc <Ble_Tl_Init+0x24>)
 80138a4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80138a6:	463b      	mov	r3, r7
 80138a8:	4619      	mov	r1, r3
 80138aa:	4805      	ldr	r0, [pc, #20]	@ (80138c0 <Ble_Tl_Init+0x28>)
 80138ac:	f7fe f97a 	bl	8011ba4 <hci_init>

  return;
 80138b0:	bf00      	nop
}
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	200300d8 	.word	0x200300d8
 80138bc:	08014259 	.word	0x08014259
 80138c0:	08014221 	.word	0x08014221

080138c4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c6:	b08d      	sub	sp, #52	@ 0x34
 80138c8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80138ca:	2300      	movs	r3, #0
 80138cc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80138ce:	2392      	movs	r3, #146	@ 0x92
 80138d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80138d2:	48a3      	ldr	r0, [pc, #652]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138d4:	f7fe fe82 	bl	80125dc <DbgTraceGetFileName>
 80138d8:	4601      	mov	r1, r0
 80138da:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 80138de:	4aa1      	ldr	r2, [pc, #644]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80138e0:	48a1      	ldr	r0, [pc, #644]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80138e2:	f002 fdaf 	bl	8016444 <iprintf>
 80138e6:	48a1      	ldr	r0, [pc, #644]	@ (8013b6c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80138e8:	f002 fe1c 	bl	8016524 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80138ec:	f7fd fdeb 	bl	80114c6 <hci_reset>
 80138f0:	4603      	mov	r3, r0
 80138f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80138f4:	7dfb      	ldrb	r3, [r7, #23]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00f      	beq.n	801391a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80138fa:	4899      	ldr	r0, [pc, #612]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138fc:	f7fe fe6e 	bl	80125dc <DbgTraceGetFileName>
 8013900:	4601      	mov	r1, r0
 8013902:	f240 3315 	movw	r3, #789	@ 0x315
 8013906:	4a97      	ldr	r2, [pc, #604]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013908:	4897      	ldr	r0, [pc, #604]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801390a:	f002 fd9b 	bl	8016444 <iprintf>
 801390e:	7dfb      	ldrb	r3, [r7, #23]
 8013910:	4619      	mov	r1, r3
 8013912:	4897      	ldr	r0, [pc, #604]	@ (8013b70 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8013914:	f002 fd96 	bl	8016444 <iprintf>
 8013918:	e00c      	b.n	8013934 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801391a:	4891      	ldr	r0, [pc, #580]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801391c:	f7fe fe5e 	bl	80125dc <DbgTraceGetFileName>
 8013920:	4601      	mov	r1, r0
 8013922:	f240 3319 	movw	r3, #793	@ 0x319
 8013926:	4a8f      	ldr	r2, [pc, #572]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013928:	488f      	ldr	r0, [pc, #572]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801392a:	f002 fd8b 	bl	8016444 <iprintf>
 801392e:	4891      	ldr	r0, [pc, #580]	@ (8013b74 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8013930:	f002 fdf8 	bl	8016524 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8013934:	f000 fad8 	bl	8013ee8 <BleGetBdAddress>
 8013938:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801393a:	693a      	ldr	r2, [r7, #16]
 801393c:	2106      	movs	r1, #6
 801393e:	2000      	movs	r0, #0
 8013940:	f7fd fc81 	bl	8011246 <aci_hal_write_config_data>
 8013944:	4603      	mov	r3, r0
 8013946:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013948:	7dfb      	ldrb	r3, [r7, #23]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00f      	beq.n	801396e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 801394e:	4884      	ldr	r0, [pc, #528]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013950:	f7fe fe44 	bl	80125dc <DbgTraceGetFileName>
 8013954:	4601      	mov	r1, r0
 8013956:	f240 3323 	movw	r3, #803	@ 0x323
 801395a:	4a82      	ldr	r2, [pc, #520]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801395c:	4882      	ldr	r0, [pc, #520]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801395e:	f002 fd71 	bl	8016444 <iprintf>
 8013962:	7dfb      	ldrb	r3, [r7, #23]
 8013964:	4619      	mov	r1, r3
 8013966:	4884      	ldr	r0, [pc, #528]	@ (8013b78 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8013968:	f002 fd6c 	bl	8016444 <iprintf>
 801396c:	e035      	b.n	80139da <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 801396e:	487c      	ldr	r0, [pc, #496]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013970:	f7fe fe34 	bl	80125dc <DbgTraceGetFileName>
 8013974:	4601      	mov	r1, r0
 8013976:	f240 3327 	movw	r3, #807	@ 0x327
 801397a:	4a7a      	ldr	r2, [pc, #488]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801397c:	487a      	ldr	r0, [pc, #488]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801397e:	f002 fd61 	bl	8016444 <iprintf>
 8013982:	487e      	ldr	r0, [pc, #504]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8013984:	f002 fdce 	bl	8016524 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8013988:	4875      	ldr	r0, [pc, #468]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801398a:	f7fe fe27 	bl	80125dc <DbgTraceGetFileName>
 801398e:	4601      	mov	r1, r0
 8013990:	f44f 734a 	mov.w	r3, #808	@ 0x328
 8013994:	4a73      	ldr	r2, [pc, #460]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013996:	4874      	ldr	r0, [pc, #464]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013998:	f002 fd54 	bl	8016444 <iprintf>
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	3305      	adds	r3, #5
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	4618      	mov	r0, r3
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	3304      	adds	r3, #4
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	461c      	mov	r4, r3
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	3303      	adds	r3, #3
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	461d      	mov	r5, r3
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	3302      	adds	r3, #2
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	461a      	mov	r2, r3
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	3301      	adds	r3, #1
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	4619      	mov	r1, r3
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	9302      	str	r3, [sp, #8]
 80139ca:	9101      	str	r1, [sp, #4]
 80139cc:	9200      	str	r2, [sp, #0]
 80139ce:	462b      	mov	r3, r5
 80139d0:	4622      	mov	r2, r4
 80139d2:	4601      	mov	r1, r0
 80139d4:	486a      	ldr	r0, [pc, #424]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80139d6:	f002 fd35 	bl	8016444 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80139da:	4a6a      	ldr	r2, [pc, #424]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80139dc:	2110      	movs	r1, #16
 80139de:	2018      	movs	r0, #24
 80139e0:	f7fd fc31 	bl	8011246 <aci_hal_write_config_data>
 80139e4:	4603      	mov	r3, r0
 80139e6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80139e8:	7dfb      	ldrb	r3, [r7, #23]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00f      	beq.n	8013a0e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80139ee:	485c      	ldr	r0, [pc, #368]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80139f0:	f7fe fdf4 	bl	80125dc <DbgTraceGetFileName>
 80139f4:	4601      	mov	r1, r0
 80139f6:	f240 3372 	movw	r3, #882	@ 0x372
 80139fa:	4a5a      	ldr	r2, [pc, #360]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80139fc:	485a      	ldr	r0, [pc, #360]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80139fe:	f002 fd21 	bl	8016444 <iprintf>
 8013a02:	7dfb      	ldrb	r3, [r7, #23]
 8013a04:	4619      	mov	r1, r3
 8013a06:	4860      	ldr	r0, [pc, #384]	@ (8013b88 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8013a08:	f002 fd1c 	bl	8016444 <iprintf>
 8013a0c:	e00c      	b.n	8013a28 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8013a0e:	4854      	ldr	r0, [pc, #336]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a10:	f7fe fde4 	bl	80125dc <DbgTraceGetFileName>
 8013a14:	4601      	mov	r1, r0
 8013a16:	f240 3376 	movw	r3, #886	@ 0x376
 8013a1a:	4a52      	ldr	r2, [pc, #328]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a1c:	4852      	ldr	r0, [pc, #328]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a1e:	f002 fd11 	bl	8016444 <iprintf>
 8013a22:	485a      	ldr	r0, [pc, #360]	@ (8013b8c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8013a24:	f002 fd7e 	bl	8016524 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8013a28:	4a59      	ldr	r2, [pc, #356]	@ (8013b90 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8013a2a:	2110      	movs	r1, #16
 8013a2c:	2008      	movs	r0, #8
 8013a2e:	f7fd fc0a 	bl	8011246 <aci_hal_write_config_data>
 8013a32:	4603      	mov	r3, r0
 8013a34:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a36:	7dfb      	ldrb	r3, [r7, #23]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d00f      	beq.n	8013a5c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8013a3c:	4848      	ldr	r0, [pc, #288]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a3e:	f7fe fdcd 	bl	80125dc <DbgTraceGetFileName>
 8013a42:	4601      	mov	r1, r0
 8013a44:	f240 337f 	movw	r3, #895	@ 0x37f
 8013a48:	4a46      	ldr	r2, [pc, #280]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a4a:	4847      	ldr	r0, [pc, #284]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a4c:	f002 fcfa 	bl	8016444 <iprintf>
 8013a50:	7dfb      	ldrb	r3, [r7, #23]
 8013a52:	4619      	mov	r1, r3
 8013a54:	484f      	ldr	r0, [pc, #316]	@ (8013b94 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8013a56:	f002 fcf5 	bl	8016444 <iprintf>
 8013a5a:	e00c      	b.n	8013a76 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8013a5c:	4840      	ldr	r0, [pc, #256]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a5e:	f7fe fdbd 	bl	80125dc <DbgTraceGetFileName>
 8013a62:	4601      	mov	r1, r0
 8013a64:	f240 3383 	movw	r3, #899	@ 0x383
 8013a68:	4a3e      	ldr	r2, [pc, #248]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a6a:	483f      	ldr	r0, [pc, #252]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a6c:	f002 fcea 	bl	8016444 <iprintf>
 8013a70:	4849      	ldr	r0, [pc, #292]	@ (8013b98 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8013a72:	f002 fd57 	bl	8016524 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8013a76:	2119      	movs	r1, #25
 8013a78:	2001      	movs	r0, #1
 8013a7a:	f7fd fc69 	bl	8011350 <aci_hal_set_tx_power_level>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a82:	7dfb      	ldrb	r3, [r7, #23]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00f      	beq.n	8013aa8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8013a88:	4835      	ldr	r0, [pc, #212]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a8a:	f7fe fda7 	bl	80125dc <DbgTraceGetFileName>
 8013a8e:	4601      	mov	r1, r0
 8013a90:	f44f 7363 	mov.w	r3, #908	@ 0x38c
 8013a94:	4a33      	ldr	r2, [pc, #204]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a96:	4834      	ldr	r0, [pc, #208]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a98:	f002 fcd4 	bl	8016444 <iprintf>
 8013a9c:	7dfb      	ldrb	r3, [r7, #23]
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	483e      	ldr	r0, [pc, #248]	@ (8013b9c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8013aa2:	f002 fccf 	bl	8016444 <iprintf>
 8013aa6:	e00c      	b.n	8013ac2 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8013aa8:	482d      	ldr	r0, [pc, #180]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013aaa:	f7fe fd97 	bl	80125dc <DbgTraceGetFileName>
 8013aae:	4601      	mov	r1, r0
 8013ab0:	f44f 7364 	mov.w	r3, #912	@ 0x390
 8013ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013ab6:	482c      	ldr	r0, [pc, #176]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013ab8:	f002 fcc4 	bl	8016444 <iprintf>
 8013abc:	4838      	ldr	r0, [pc, #224]	@ (8013ba0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013abe:	f002 fd31 	bl	8016524 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013ac2:	f7fd f86a 	bl	8010b9a <aci_gatt_init>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013aca:	7dfb      	ldrb	r3, [r7, #23]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00f      	beq.n	8013af0 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013ad0:	4823      	ldr	r0, [pc, #140]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013ad2:	f7fe fd83 	bl	80125dc <DbgTraceGetFileName>
 8013ad6:	4601      	mov	r1, r0
 8013ad8:	f240 3399 	movw	r3, #921	@ 0x399
 8013adc:	4a21      	ldr	r2, [pc, #132]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013ade:	4822      	ldr	r0, [pc, #136]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013ae0:	f002 fcb0 	bl	8016444 <iprintf>
 8013ae4:	7dfb      	ldrb	r3, [r7, #23]
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	482e      	ldr	r0, [pc, #184]	@ (8013ba4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8013aea:	f002 fcab 	bl	8016444 <iprintf>
 8013aee:	e00c      	b.n	8013b0a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013af0:	481b      	ldr	r0, [pc, #108]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013af2:	f7fe fd73 	bl	80125dc <DbgTraceGetFileName>
 8013af6:	4601      	mov	r1, r0
 8013af8:	f240 339d 	movw	r3, #925	@ 0x39d
 8013afc:	4a19      	ldr	r2, [pc, #100]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013afe:	481a      	ldr	r0, [pc, #104]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013b00:	f002 fca0 	bl	8016444 <iprintf>
 8013b04:	4828      	ldr	r0, [pc, #160]	@ (8013ba8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8013b06:	f002 fd0d 	bl	8016524 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013b0e:	7bfb      	ldrb	r3, [r7, #15]
 8013b10:	f043 0301 	orr.w	r3, r3, #1
 8013b14:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8013b16:	7bfb      	ldrb	r3, [r7, #15]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d069      	beq.n	8013bf0 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013b1c:	4b23      	ldr	r3, [pc, #140]	@ (8013bac <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013b1e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013b20:	1dba      	adds	r2, r7, #6
 8013b22:	7bf8      	ldrb	r0, [r7, #15]
 8013b24:	1cbb      	adds	r3, r7, #2
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	1d3b      	adds	r3, r7, #4
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	4613      	mov	r3, r2
 8013b2e:	2209      	movs	r2, #9
 8013b30:	2100      	movs	r1, #0
 8013b32:	f7fc fe88 	bl	8010846 <aci_gap_init>
 8013b36:	4603      	mov	r3, r0
 8013b38:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8013b3a:	7dfb      	ldrb	r3, [r7, #23]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d039      	beq.n	8013bb4 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8013b40:	4807      	ldr	r0, [pc, #28]	@ (8013b60 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013b42:	f7fe fd4b 	bl	80125dc <DbgTraceGetFileName>
 8013b46:	4601      	mov	r1, r0
 8013b48:	f240 33bd 	movw	r3, #957	@ 0x3bd
 8013b4c:	4a05      	ldr	r2, [pc, #20]	@ (8013b64 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013b4e:	4806      	ldr	r0, [pc, #24]	@ (8013b68 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013b50:	f002 fc78 	bl	8016444 <iprintf>
 8013b54:	7dfb      	ldrb	r3, [r7, #23]
 8013b56:	4619      	mov	r1, r3
 8013b58:	4815      	ldr	r0, [pc, #84]	@ (8013bb0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8013b5a:	f002 fc73 	bl	8016444 <iprintf>
 8013b5e:	e036      	b.n	8013bce <Ble_Hci_Gap_Gatt_Init+0x30a>
 8013b60:	08017bb8 	.word	0x08017bb8
 8013b64:	08019324 	.word	0x08019324
 8013b68:	08017bd4 	.word	0x08017bd4
 8013b6c:	080181c8 	.word	0x080181c8
 8013b70:	080181f4 	.word	0x080181f4
 8013b74:	08018224 	.word	0x08018224
 8013b78:	08018244 	.word	0x08018244
 8013b7c:	080182a0 	.word	0x080182a0
 8013b80:	080182ec 	.word	0x080182ec
 8013b84:	080192dc 	.word	0x080192dc
 8013b88:	08018328 	.word	0x08018328
 8013b8c:	08018380 	.word	0x08018380
 8013b90:	080192ec 	.word	0x080192ec
 8013b94:	080183c8 	.word	0x080183c8
 8013b98:	08018420 	.word	0x08018420
 8013b9c:	08018468 	.word	0x08018468
 8013ba0:	080184a8 	.word	0x080184a8
 8013ba4:	080184d8 	.word	0x080184d8
 8013ba8:	0801850c 	.word	0x0801850c
 8013bac:	08018530 	.word	0x08018530
 8013bb0:	0801853c 	.word	0x0801853c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8013bb4:	487e      	ldr	r0, [pc, #504]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013bb6:	f7fe fd11 	bl	80125dc <DbgTraceGetFileName>
 8013bba:	4601      	mov	r1, r0
 8013bbc:	f240 33c1 	movw	r3, #961	@ 0x3c1
 8013bc0:	4a7c      	ldr	r2, [pc, #496]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013bc2:	487d      	ldr	r0, [pc, #500]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013bc4:	f002 fc3e 	bl	8016444 <iprintf>
 8013bc8:	487c      	ldr	r0, [pc, #496]	@ (8013dbc <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8013bca:	f002 fcab 	bl	8016524 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013bce:	88fc      	ldrh	r4, [r7, #6]
 8013bd0:	88bd      	ldrh	r5, [r7, #4]
 8013bd2:	68b8      	ldr	r0, [r7, #8]
 8013bd4:	f7ec fad4 	bl	8000180 <strlen>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	b2da      	uxtb	r2, r3
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	4613      	mov	r3, r2
 8013be2:	2200      	movs	r2, #0
 8013be4:	4629      	mov	r1, r5
 8013be6:	4620      	mov	r0, r4
 8013be8:	f7fd f9da 	bl	8010fa0 <aci_gatt_update_char_value>
 8013bec:	4603      	mov	r3, r0
 8013bee:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013bf0:	88f8      	ldrh	r0, [r7, #6]
 8013bf2:	8879      	ldrh	r1, [r7, #2]
 8013bf4:	463b      	mov	r3, r7
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f7fd f9d0 	bl	8010fa0 <aci_gatt_update_char_value>
 8013c00:	4603      	mov	r3, r0
 8013c02:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013c04:	2202      	movs	r2, #2
 8013c06:	2102      	movs	r1, #2
 8013c08:	2000      	movs	r0, #0
 8013c0a:	f7fd fc80 	bl	801150e <hci_le_set_default_phy>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013c12:	7dfb      	ldrb	r3, [r7, #23]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00f      	beq.n	8013c38 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8013c18:	4865      	ldr	r0, [pc, #404]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c1a:	f7fe fcdf 	bl	80125dc <DbgTraceGetFileName>
 8013c1e:	4601      	mov	r1, r0
 8013c20:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8013c24:	4a63      	ldr	r2, [pc, #396]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c26:	4864      	ldr	r0, [pc, #400]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c28:	f002 fc0c 	bl	8016444 <iprintf>
 8013c2c:	7dfb      	ldrb	r3, [r7, #23]
 8013c2e:	4619      	mov	r1, r3
 8013c30:	4863      	ldr	r0, [pc, #396]	@ (8013dc0 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8013c32:	f002 fc07 	bl	8016444 <iprintf>
 8013c36:	e00c      	b.n	8013c52 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8013c38:	485d      	ldr	r0, [pc, #372]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c3a:	f7fe fccf 	bl	80125dc <DbgTraceGetFileName>
 8013c3e:	4601      	mov	r1, r0
 8013c40:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8013c44:	4a5b      	ldr	r2, [pc, #364]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c46:	485c      	ldr	r0, [pc, #368]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c48:	f002 fbfc 	bl	8016444 <iprintf>
 8013c4c:	485d      	ldr	r0, [pc, #372]	@ (8013dc4 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8013c4e:	f002 fc69 	bl	8016524 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8013c52:	4b5d      	ldr	r3, [pc, #372]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013c54:	2201      	movs	r2, #1
 8013c56:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8013c58:	4b5b      	ldr	r3, [pc, #364]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7fc fc73 	bl	8010548 <aci_gap_set_io_capability>
 8013c62:	4603      	mov	r3, r0
 8013c64:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00f      	beq.n	8013c8c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8013c6c:	4850      	ldr	r0, [pc, #320]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c6e:	f7fe fcb5 	bl	80125dc <DbgTraceGetFileName>
 8013c72:	4601      	mov	r1, r0
 8013c74:	f240 33f1 	movw	r3, #1009	@ 0x3f1
 8013c78:	4a4e      	ldr	r2, [pc, #312]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c7a:	484f      	ldr	r0, [pc, #316]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c7c:	f002 fbe2 	bl	8016444 <iprintf>
 8013c80:	7dfb      	ldrb	r3, [r7, #23]
 8013c82:	4619      	mov	r1, r3
 8013c84:	4851      	ldr	r0, [pc, #324]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x508>)
 8013c86:	f002 fbdd 	bl	8016444 <iprintf>
 8013c8a:	e00c      	b.n	8013ca6 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8013c8c:	4848      	ldr	r0, [pc, #288]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c8e:	f7fe fca5 	bl	80125dc <DbgTraceGetFileName>
 8013c92:	4601      	mov	r1, r0
 8013c94:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 8013c98:	4a46      	ldr	r2, [pc, #280]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c9a:	4847      	ldr	r0, [pc, #284]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c9c:	f002 fbd2 	bl	8016444 <iprintf>
 8013ca0:	484b      	ldr	r0, [pc, #300]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8013ca2:	f002 fc3f 	bl	8016524 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8013ca6:	4b48      	ldr	r3, [pc, #288]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013ca8:	2201      	movs	r2, #1
 8013caa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013cac:	4b46      	ldr	r3, [pc, #280]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cae:	2208      	movs	r2, #8
 8013cb0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8013cb2:	4b45      	ldr	r3, [pc, #276]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cb4:	2210      	movs	r2, #16
 8013cb6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8013cb8:	4b43      	ldr	r3, [pc, #268]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013cbe:	4b42      	ldr	r3, [pc, #264]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cc0:	4a44      	ldr	r2, [pc, #272]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8013cc2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013cc4:	4b40      	ldr	r3, [pc, #256]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8013cca:	4b3f      	ldr	r3, [pc, #252]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013ccc:	789c      	ldrb	r4, [r3, #2]
 8013cce:	4b3e      	ldr	r3, [pc, #248]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cd0:	785d      	ldrb	r5, [r3, #1]
 8013cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cd4:	791b      	ldrb	r3, [r3, #4]
 8013cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cd8:	7952      	ldrb	r2, [r2, #5]
 8013cda:	493b      	ldr	r1, [pc, #236]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cdc:	78c9      	ldrb	r1, [r1, #3]
 8013cde:	483a      	ldr	r0, [pc, #232]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013ce0:	6880      	ldr	r0, [r0, #8]
 8013ce2:	2600      	movs	r6, #0
 8013ce4:	9604      	str	r6, [sp, #16]
 8013ce6:	9003      	str	r0, [sp, #12]
 8013ce8:	9102      	str	r1, [sp, #8]
 8013cea:	9201      	str	r2, [sp, #4]
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	2300      	movs	r3, #0
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	4629      	mov	r1, r5
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	f7fc fc7b 	bl	80105f0 <aci_gap_set_authentication_requirement>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013cfe:	7dfb      	ldrb	r3, [r7, #23]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d00f      	beq.n	8013d24 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013d04:	482a      	ldr	r0, [pc, #168]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d06:	f7fe fc69 	bl	80125dc <DbgTraceGetFileName>
 8013d0a:	4601      	mov	r1, r0
 8013d0c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8013d10:	4a28      	ldr	r2, [pc, #160]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d12:	4829      	ldr	r0, [pc, #164]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d14:	f002 fb96 	bl	8016444 <iprintf>
 8013d18:	7dfb      	ldrb	r3, [r7, #23]
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	482e      	ldr	r0, [pc, #184]	@ (8013dd8 <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013d1e:	f002 fb91 	bl	8016444 <iprintf>
 8013d22:	e00c      	b.n	8013d3e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8013d24:	4822      	ldr	r0, [pc, #136]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d26:	f7fe fc59 	bl	80125dc <DbgTraceGetFileName>
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	f240 4314 	movw	r3, #1044	@ 0x414
 8013d30:	4a20      	ldr	r2, [pc, #128]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d32:	4821      	ldr	r0, [pc, #132]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d34:	f002 fb86 	bl	8016444 <iprintf>
 8013d38:	4828      	ldr	r0, [pc, #160]	@ (8013ddc <Ble_Hci_Gap_Gatt_Init+0x518>)
 8013d3a:	f002 fbf3 	bl	8016524 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8013d3e:	4b22      	ldr	r3, [pc, #136]	@ (8013dc8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013d40:	789b      	ldrb	r3, [r3, #2]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d023      	beq.n	8013d8e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 8013d46:	f7fc fe9d 	bl	8010a84 <aci_gap_configure_filter_accept_list>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8013d4e:	7dfb      	ldrb	r3, [r7, #23]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d00f      	beq.n	8013d74 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8013d54:	4816      	ldr	r0, [pc, #88]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d56:	f7fe fc41 	bl	80125dc <DbgTraceGetFileName>
 8013d5a:	4601      	mov	r1, r0
 8013d5c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8013d60:	4a14      	ldr	r2, [pc, #80]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d62:	4815      	ldr	r0, [pc, #84]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d64:	f002 fb6e 	bl	8016444 <iprintf>
 8013d68:	7dfb      	ldrb	r3, [r7, #23]
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	481c      	ldr	r0, [pc, #112]	@ (8013de0 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8013d6e:	f002 fb69 	bl	8016444 <iprintf>
 8013d72:	e00c      	b.n	8013d8e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8013d74:	480e      	ldr	r0, [pc, #56]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d76:	f7fe fc31 	bl	80125dc <DbgTraceGetFileName>
 8013d7a:	4601      	mov	r1, r0
 8013d7c:	f240 4323 	movw	r3, #1059	@ 0x423
 8013d80:	4a0c      	ldr	r2, [pc, #48]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d82:	480d      	ldr	r0, [pc, #52]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d84:	f002 fb5e 	bl	8016444 <iprintf>
 8013d88:	4816      	ldr	r0, [pc, #88]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x520>)
 8013d8a:	f002 fbcb 	bl	8016524 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8013d8e:	4808      	ldr	r0, [pc, #32]	@ (8013db0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d90:	f7fe fc24 	bl	80125dc <DbgTraceGetFileName>
 8013d94:	4601      	mov	r1, r0
 8013d96:	f240 4326 	movw	r3, #1062	@ 0x426
 8013d9a:	4a06      	ldr	r2, [pc, #24]	@ (8013db4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d9c:	4806      	ldr	r0, [pc, #24]	@ (8013db8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d9e:	f002 fb51 	bl	8016444 <iprintf>
 8013da2:	4811      	ldr	r0, [pc, #68]	@ (8013de8 <Ble_Hci_Gap_Gatt_Init+0x524>)
 8013da4:	f002 fb4e 	bl	8016444 <iprintf>
}
 8013da8:	bf00      	nop
 8013daa:	371c      	adds	r7, #28
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013db0:	08017bb8 	.word	0x08017bb8
 8013db4:	08019324 	.word	0x08019324
 8013db8:	08017bd4 	.word	0x08017bd4
 8013dbc:	0801856c 	.word	0x0801856c
 8013dc0:	0801858c 	.word	0x0801858c
 8013dc4:	080185c8 	.word	0x080185c8
 8013dc8:	20001154 	.word	0x20001154
 8013dcc:	080185f4 	.word	0x080185f4
 8013dd0:	08018634 	.word	0x08018634
 8013dd4:	0001b207 	.word	0x0001b207
 8013dd8:	08018664 	.word	0x08018664
 8013ddc:	080186b0 	.word	0x080186b0
 8013de0:	080186ec 	.word	0x080186ec
 8013de4:	0801872c 	.word	0x0801872c
 8013de8:	0801875c 	.word	0x0801875c

08013dec <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08c      	sub	sp, #48	@ 0x30
 8013df0:	af08      	add	r7, sp, #32
 8013df2:	4603      	mov	r3, r0
 8013df4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013df6:	2392      	movs	r3, #146	@ 0x92
 8013df8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8013dfa:	4a32      	ldr	r2, [pc, #200]	@ (8013ec4 <Adv_Request+0xd8>)
 8013dfc:	79fb      	ldrb	r3, [r7, #7]
 8013dfe:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013e02:	2300      	movs	r3, #0
 8013e04:	9306      	str	r3, [sp, #24]
 8013e06:	2300      	movs	r3, #0
 8013e08:	9305      	str	r3, [sp, #20]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9303      	str	r3, [sp, #12]
 8013e12:	2300      	movs	r3, #0
 8013e14:	9302      	str	r3, [sp, #8]
 8013e16:	2300      	movs	r3, #0
 8013e18:	9301      	str	r3, [sp, #4]
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	2300      	movs	r3, #0
 8013e20:	22a0      	movs	r2, #160	@ 0xa0
 8013e22:	2180      	movs	r1, #128	@ 0x80
 8013e24:	2000      	movs	r0, #0
 8013e26:	f7fc fa95 	bl	8010354 <aci_gap_set_discoverable>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013e2e:	7bfb      	ldrb	r3, [r7, #15]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00f      	beq.n	8013e54 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8013e34:	4824      	ldr	r0, [pc, #144]	@ (8013ec8 <Adv_Request+0xdc>)
 8013e36:	f7fe fbd1 	bl	80125dc <DbgTraceGetFileName>
 8013e3a:	4601      	mov	r1, r0
 8013e3c:	f240 433c 	movw	r3, #1084	@ 0x43c
 8013e40:	4a22      	ldr	r2, [pc, #136]	@ (8013ecc <Adv_Request+0xe0>)
 8013e42:	4823      	ldr	r0, [pc, #140]	@ (8013ed0 <Adv_Request+0xe4>)
 8013e44:	f002 fafe 	bl	8016444 <iprintf>
 8013e48:	7bfb      	ldrb	r3, [r7, #15]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	4821      	ldr	r0, [pc, #132]	@ (8013ed4 <Adv_Request+0xe8>)
 8013e4e:	f002 faf9 	bl	8016444 <iprintf>
 8013e52:	e00c      	b.n	8013e6e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8013e54:	481c      	ldr	r0, [pc, #112]	@ (8013ec8 <Adv_Request+0xdc>)
 8013e56:	f7fe fbc1 	bl	80125dc <DbgTraceGetFileName>
 8013e5a:	4601      	mov	r1, r0
 8013e5c:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8013e60:	4a1a      	ldr	r2, [pc, #104]	@ (8013ecc <Adv_Request+0xe0>)
 8013e62:	481b      	ldr	r0, [pc, #108]	@ (8013ed0 <Adv_Request+0xe4>)
 8013e64:	f002 faee 	bl	8016444 <iprintf>
 8013e68:	481b      	ldr	r0, [pc, #108]	@ (8013ed8 <Adv_Request+0xec>)
 8013e6a:	f002 fb5b 	bl	8016524 <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8013e6e:	491b      	ldr	r1, [pc, #108]	@ (8013edc <Adv_Request+0xf0>)
 8013e70:	2013      	movs	r0, #19
 8013e72:	f7fc fd95 	bl	80109a0 <aci_gap_update_adv_data>
 8013e76:	4603      	mov	r3, r0
 8013e78:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8013e7a:	7bfb      	ldrb	r3, [r7, #15]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00f      	beq.n	8013ea0 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8013e80:	4811      	ldr	r0, [pc, #68]	@ (8013ec8 <Adv_Request+0xdc>)
 8013e82:	f7fe fbab 	bl	80125dc <DbgTraceGetFileName>
 8013e86:	4601      	mov	r1, r0
 8013e88:	f240 434f 	movw	r3, #1103	@ 0x44f
 8013e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8013ecc <Adv_Request+0xe0>)
 8013e8e:	4810      	ldr	r0, [pc, #64]	@ (8013ed0 <Adv_Request+0xe4>)
 8013e90:	f002 fad8 	bl	8016444 <iprintf>
 8013e94:	7bfb      	ldrb	r3, [r7, #15]
 8013e96:	4619      	mov	r1, r3
 8013e98:	4811      	ldr	r0, [pc, #68]	@ (8013ee0 <Adv_Request+0xf4>)
 8013e9a:	f002 fad3 	bl	8016444 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8013e9e:	e00d      	b.n	8013ebc <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8013ea0:	4809      	ldr	r0, [pc, #36]	@ (8013ec8 <Adv_Request+0xdc>)
 8013ea2:	f7fe fb9b 	bl	80125dc <DbgTraceGetFileName>
 8013ea6:	4601      	mov	r1, r0
 8013ea8:	f240 4353 	movw	r3, #1107	@ 0x453
 8013eac:	4a07      	ldr	r2, [pc, #28]	@ (8013ecc <Adv_Request+0xe0>)
 8013eae:	4808      	ldr	r0, [pc, #32]	@ (8013ed0 <Adv_Request+0xe4>)
 8013eb0:	f002 fac8 	bl	8016444 <iprintf>
 8013eb4:	480b      	ldr	r0, [pc, #44]	@ (8013ee4 <Adv_Request+0xf8>)
 8013eb6:	f002 fac5 	bl	8016444 <iprintf>
  return;
 8013eba:	bf00      	nop
}
 8013ebc:	3710      	adds	r7, #16
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	20001154 	.word	0x20001154
 8013ec8:	08017bb8 	.word	0x08017bb8
 8013ecc:	0801933c 	.word	0x0801933c
 8013ed0:	08017bd4 	.word	0x08017bd4
 8013ed4:	08018788 	.word	0x08018788
 8013ed8:	080187c0 	.word	0x080187c0
 8013edc:	200000a4 	.word	0x200000a4
 8013ee0:	080187e8 	.word	0x080187e8
 8013ee4:	0801881c 	.word	0x0801881c

08013ee8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b086      	sub	sp, #24
 8013eec:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013eee:	f7ff f8ed 	bl	80130cc <LL_FLASH_GetUDN>
 8013ef2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efa:	d023      	beq.n	8013f44 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013efc:	f7ff f8fe 	bl	80130fc <LL_FLASH_GetSTCompanyID>
 8013f00:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013f02:	f7ff f8ef 	bl	80130e4 <LL_FLASH_GetDeviceID>
 8013f06:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	b2da      	uxtb	r2, r3
 8013f0c:	4b16      	ldr	r3, [pc, #88]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f0e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	0a1b      	lsrs	r3, r3, #8
 8013f14:	b2da      	uxtb	r2, r3
 8013f16:	4b14      	ldr	r3, [pc, #80]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f18:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	b2da      	uxtb	r2, r3
 8013f1e:	4b12      	ldr	r3, [pc, #72]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f20:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	4b10      	ldr	r3, [pc, #64]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f28:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	0a1b      	lsrs	r3, r3, #8
 8013f2e:	b2da      	uxtb	r2, r3
 8013f30:	4b0d      	ldr	r3, [pc, #52]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f32:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	0c1b      	lsrs	r3, r3, #16
 8013f38:	b2da      	uxtb	r2, r3
 8013f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f3c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8013f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8013f68 <BleGetBdAddress+0x80>)
 8013f40:	617b      	str	r3, [r7, #20]
 8013f42:	e00b      	b.n	8013f5c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8013f44:	2000      	movs	r0, #0
 8013f46:	f7fe fc11 	bl	801276c <OTP_Read>
 8013f4a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	617b      	str	r3, [r7, #20]
 8013f56:	e001      	b.n	8013f5c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8013f58:	4b04      	ldr	r3, [pc, #16]	@ (8013f6c <BleGetBdAddress+0x84>)
 8013f5a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8013f5c:	697b      	ldr	r3, [r7, #20]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	2000114c 	.word	0x2000114c
 8013f6c:	080192d4 	.word	0x080192d4

08013f70 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8013f76:	4b1f      	ldr	r3, [pc, #124]	@ (8013ff4 <Adv_Cancel+0x84>)
 8013f78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013f7c:	2b05      	cmp	r3, #5
 8013f7e:	d035      	beq.n	8013fec <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013f80:	2392      	movs	r3, #146	@ 0x92
 8013f82:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8013f84:	f7fc f9c2 	bl	801030c <aci_gap_set_non_discoverable>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013f8c:	4b19      	ldr	r3, [pc, #100]	@ (8013ff4 <Adv_Cancel+0x84>)
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8013f94:	79fb      	ldrb	r3, [r7, #7]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00d      	beq.n	8013fb6 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8013f9a:	4817      	ldr	r0, [pc, #92]	@ (8013ff8 <Adv_Cancel+0x88>)
 8013f9c:	f7fe fb1e 	bl	80125dc <DbgTraceGetFileName>
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	f240 43a5 	movw	r3, #1189	@ 0x4a5
 8013fa6:	4a15      	ldr	r2, [pc, #84]	@ (8013ffc <Adv_Cancel+0x8c>)
 8013fa8:	4815      	ldr	r0, [pc, #84]	@ (8014000 <Adv_Cancel+0x90>)
 8013faa:	f002 fa4b 	bl	8016444 <iprintf>
 8013fae:	4815      	ldr	r0, [pc, #84]	@ (8014004 <Adv_Cancel+0x94>)
 8013fb0:	f002 fa48 	bl	8016444 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8013fb4:	e01a      	b.n	8013fec <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8013fb6:	4810      	ldr	r0, [pc, #64]	@ (8013ff8 <Adv_Cancel+0x88>)
 8013fb8:	f7fe fb10 	bl	80125dc <DbgTraceGetFileName>
 8013fbc:	4601      	mov	r1, r0
 8013fbe:	f240 43a9 	movw	r3, #1193	@ 0x4a9
 8013fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8013ffc <Adv_Cancel+0x8c>)
 8013fc4:	480e      	ldr	r0, [pc, #56]	@ (8014000 <Adv_Cancel+0x90>)
 8013fc6:	f002 fa3d 	bl	8016444 <iprintf>
 8013fca:	480f      	ldr	r0, [pc, #60]	@ (8014008 <Adv_Cancel+0x98>)
 8013fcc:	f002 fa3a 	bl	8016444 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013fd0:	4809      	ldr	r0, [pc, #36]	@ (8013ff8 <Adv_Cancel+0x88>)
 8013fd2:	f7fe fb03 	bl	80125dc <DbgTraceGetFileName>
 8013fd6:	4601      	mov	r1, r0
 8013fd8:	f240 43aa 	movw	r3, #1194	@ 0x4aa
 8013fdc:	4a07      	ldr	r2, [pc, #28]	@ (8013ffc <Adv_Cancel+0x8c>)
 8013fde:	4808      	ldr	r0, [pc, #32]	@ (8014000 <Adv_Cancel+0x90>)
 8013fe0:	f002 fa30 	bl	8016444 <iprintf>
 8013fe4:	4809      	ldr	r0, [pc, #36]	@ (801400c <Adv_Cancel+0x9c>)
 8013fe6:	f002 fa2d 	bl	8016444 <iprintf>
  return;
 8013fea:	bf00      	nop
 8013fec:	bf00      	nop
}
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	20001154 	.word	0x20001154
 8013ff8:	08017bb8 	.word	0x08017bb8
 8013ffc:	08019348 	.word	0x08019348
 8014000:	08017bd4 	.word	0x08017bd4
 8014004:	08018844 	.word	0x08018844
 8014008:	08018868 	.word	0x08018868
 801400c:	08018870 	.word	0x08018870

08014010 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b08d      	sub	sp, #52	@ 0x34
 8014014:	af02      	add	r7, sp, #8
 8014016:	4603      	mov	r3, r0
 8014018:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {10, 25}; /* ms */
 801401a:	4a59      	ldr	r2, [pc, #356]	@ (8014180 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 801401c:	f107 030c 	add.w	r3, r7, #12
 8014020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014024:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8014028:	4b56      	ldr	r3, [pc, #344]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	3301      	adds	r3, #1
 801402e:	2b00      	cmp	r3, #0
 8014030:	f003 0301 	and.w	r3, r3, #1
 8014034:	bfb8      	it	lt
 8014036:	425b      	neglt	r3, r3
 8014038:	b2da      	uxtb	r2, r3
 801403a:	4b52      	ldr	r3, [pc, #328]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801403c:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 801403e:	4b51      	ldr	r3, [pc, #324]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	3328      	adds	r3, #40	@ 0x28
 8014046:	443b      	add	r3, r7
 8014048:	3b1c      	subs	r3, #28
 801404a:	ed93 7a00 	vldr	s14, [r3]
 801404e:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8014052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801405a:	ee17 3a90 	vmov	r3, s15
 801405e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8014060:	4b48      	ldr	r3, [pc, #288]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	3328      	adds	r3, #40	@ 0x28
 8014068:	443b      	add	r3, r7
 801406a:	3b1c      	subs	r3, #28
 801406c:	ed93 7a00 	vldr	s14, [r3]
 8014070:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8014074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801407c:	ee17 3a90 	vmov	r3, s15
 8014080:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8014082:	2300      	movs	r3, #0
 8014084:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8014086:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801408a:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 801408c:	4b3e      	ldr	r3, [pc, #248]	@ (8014188 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	2b01      	cmp	r3, #1
 8014092:	d15e      	bne.n	8014152 <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 8014094:	4b3c      	ldr	r3, [pc, #240]	@ (8014188 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 8014096:	2200      	movs	r2, #0
 8014098:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 801409a:	4b3a      	ldr	r3, [pc, #232]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	3301      	adds	r3, #1
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	f003 0301 	and.w	r3, r3, #1
 80140a6:	bfb8      	it	lt
 80140a8:	425b      	neglt	r3, r3
 80140aa:	b2da      	uxtb	r2, r3
 80140ac:	4b35      	ldr	r3, [pc, #212]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140ae:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80140b0:	4b34      	ldr	r3, [pc, #208]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	009b      	lsls	r3, r3, #2
 80140b6:	3328      	adds	r3, #40	@ 0x28
 80140b8:	443b      	add	r3, r7
 80140ba:	3b1c      	subs	r3, #28
 80140bc:	ed93 7a00 	vldr	s14, [r3]
 80140c0:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80140c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80140c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140cc:	ee17 3a90 	vmov	r3, s15
 80140d0:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80140d2:	4b2c      	ldr	r3, [pc, #176]	@ (8014184 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	3328      	adds	r3, #40	@ 0x28
 80140da:	443b      	add	r3, r7
 80140dc:	3b1c      	subs	r3, #28
 80140de:	ed93 7a00 	vldr	s14, [r3]
 80140e2:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80140e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80140ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140ee:	ee17 3a90 	vmov	r3, s15
 80140f2:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 80140f4:	2300      	movs	r3, #0
 80140f6:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80140f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80140fc:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80140fe:	4b23      	ldr	r3, [pc, #140]	@ (801418c <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8014100:	8ad8      	ldrh	r0, [r3, #22]
 8014102:	8b7c      	ldrh	r4, [r7, #26]
 8014104:	8bba      	ldrh	r2, [r7, #28]
 8014106:	8bf9      	ldrh	r1, [r7, #30]
 8014108:	8b3b      	ldrh	r3, [r7, #24]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	4623      	mov	r3, r4
 801410e:	f7fd fa7b 	bl	8011608 <aci_l2cap_connection_parameter_update_req>
 8014112:	4603      	mov	r3, r0
 8014114:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8014116:	7dfb      	ldrb	r3, [r7, #23]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00d      	beq.n	8014138 <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 801411c:	481c      	ldr	r0, [pc, #112]	@ (8014190 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 801411e:	f7fe fa5d 	bl	80125dc <DbgTraceGetFileName>
 8014122:	4601      	mov	r1, r0
 8014124:	f240 43d7 	movw	r3, #1239	@ 0x4d7
 8014128:	4a1a      	ldr	r2, [pc, #104]	@ (8014194 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 801412a:	481b      	ldr	r0, [pc, #108]	@ (8014198 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 801412c:	f002 f98a 	bl	8016444 <iprintf>
 8014130:	481a      	ldr	r0, [pc, #104]	@ (801419c <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 8014132:	f002 f987 	bl	8016444 <iprintf>
 8014136:	e00c      	b.n	8014152 <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8014138:	4815      	ldr	r0, [pc, #84]	@ (8014190 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 801413a:	f7fe fa4f 	bl	80125dc <DbgTraceGetFileName>
 801413e:	4601      	mov	r1, r0
 8014140:	f240 43db 	movw	r3, #1243	@ 0x4db
 8014144:	4a13      	ldr	r2, [pc, #76]	@ (8014194 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8014146:	4814      	ldr	r0, [pc, #80]	@ (8014198 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8014148:	f002 f97c 	bl	8016444 <iprintf>
 801414c:	4814      	ldr	r0, [pc, #80]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 801414e:	f002 f979 	bl	8016444 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 8014152:	7dbb      	ldrb	r3, [r7, #22]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d003      	beq.n	8014160 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8014158:	4812      	ldr	r0, [pc, #72]	@ (80141a4 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 801415a:	f7ee fc8b 	bl	8002a74 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 801415e:	e00c      	b.n	801417a <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8014160:	4811      	ldr	r0, [pc, #68]	@ (80141a8 <BLE_SVC_L2CAP_Conn_Update+0x198>)
 8014162:	f7ee fc87 	bl	8002a74 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8014166:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8014168:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801416a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 801416c:	8c3b      	ldrh	r3, [r7, #32]
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	4603      	mov	r3, r0
 8014172:	480e      	ldr	r0, [pc, #56]	@ (80141ac <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 8014174:	f7ee fc7e 	bl	8002a74 <DIAG>
  return;
 8014178:	bf00      	nop
}
 801417a:	372c      	adds	r7, #44	@ 0x2c
 801417c:	46bd      	mov	sp, r7
 801417e:	bd90      	pop	{r4, r7, pc}
 8014180:	080189c0 	.word	0x080189c0
 8014184:	200011dc 	.word	0x200011dc
 8014188:	200011dd 	.word	0x200011dd
 801418c:	20001154 	.word	0x20001154
 8014190:	08017bb8 	.word	0x08017bb8
 8014194:	08019354 	.word	0x08019354
 8014198:	08017bd4 	.word	0x08017bd4
 801419c:	0801888c 	.word	0x0801888c
 80141a0:	080188b4 	.word	0x080188b4
 80141a4:	080188e4 	.word	0x080188e4
 80141a8:	0801891c 	.word	0x0801891c
 80141ac:	08018958 	.word	0x08018958

080141b0 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80141b4:	4b08      	ldr	r3, [pc, #32]	@ (80141d8 <Connection_Interval_Update_Req+0x28>)
 80141b6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d00a      	beq.n	80141d4 <Connection_Interval_Update_Req+0x24>
 80141be:	4b06      	ldr	r3, [pc, #24]	@ (80141d8 <Connection_Interval_Update_Req+0x28>)
 80141c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d005      	beq.n	80141d4 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80141c8:	4b03      	ldr	r3, [pc, #12]	@ (80141d8 <Connection_Interval_Update_Req+0x28>)
 80141ca:	8adb      	ldrh	r3, [r3, #22]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7ff ff1f 	bl	8014010 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80141d2:	bf00      	nop
 80141d4:	bf00      	nop
}
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	20001154 	.word	0x20001154

080141dc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80141e4:	2100      	movs	r1, #0
 80141e6:	2004      	movs	r0, #4
 80141e8:	f001 ff4e 	bl	8016088 <UTIL_SEQ_SetTask>

  return;
 80141ec:	bf00      	nop
}
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80141fc:	2001      	movs	r0, #1
 80141fe:	f001 ffaf 	bl	8016160 <UTIL_SEQ_SetEvt>

  return;
 8014202:	bf00      	nop
}
 8014204:	3708      	adds	r7, #8
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801420a:	b580      	push	{r7, lr}
 801420c:	b082      	sub	sp, #8
 801420e:	af00      	add	r7, sp, #0
 8014210:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8014212:	2001      	movs	r0, #1
 8014214:	f001 ffc4 	bl	80161a0 <UTIL_SEQ_WaitEvt>

  return;
 8014218:	bf00      	nop
}
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	3308      	adds	r3, #8
 8014232:	4618      	mov	r0, r3
 8014234:	f7fd fb70 	bl	8011918 <SVCCTL_UserEvtRx>
 8014238:	4603      	mov	r3, r0
 801423a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801423c:	7afb      	ldrb	r3, [r7, #11]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d003      	beq.n	801424a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2201      	movs	r2, #1
 8014246:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8014248:	e003      	b.n	8014252 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2200      	movs	r2, #0
 801424e:	701a      	strb	r2, [r3, #0]
  return;
 8014250:	bf00      	nop
}
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	4603      	mov	r3, r0
 8014260:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8014262:	79fb      	ldrb	r3, [r7, #7]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d002      	beq.n	801426e <BLE_StatusNot+0x16>
 8014268:	2b01      	cmp	r3, #1
 801426a:	d006      	beq.n	801427a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 801426c:	e00b      	b.n	8014286 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801426e:	233f      	movs	r3, #63	@ 0x3f
 8014270:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	f001 ff34 	bl	80160e0 <UTIL_SEQ_PauseTask>
      break;
 8014278:	e005      	b.n	8014286 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801427a:	233f      	movs	r3, #63	@ 0x3f
 801427c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f001 ff4e 	bl	8016120 <UTIL_SEQ_ResumeTask>
      break;
 8014284:	bf00      	nop
  }

  return;
 8014286:	bf00      	nop
}
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
	...

08014290 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	af00      	add	r7, sp, #0
	if ( tsBle.App.ScgSetTask )
 8014294:	4b06      	ldr	r3, [pc, #24]	@ (80142b0 <ALL_SENs_Task+0x20>)
 8014296:	7a5b      	ldrb	r3, [r3, #9]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d006      	beq.n	80142aa <ALL_SENs_Task+0x1a>
	{
		tsBle.App.ScgSetTask = false;
 801429c:	4b04      	ldr	r3, [pc, #16]	@ (80142b0 <ALL_SENs_Task+0x20>)
 801429e:	2200      	movs	r2, #0
 80142a0:	725a      	strb	r2, [r3, #9]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamSCG.u8TxData));
 80142a2:	4904      	ldr	r1, [pc, #16]	@ (80142b4 <ALL_SENs_Task+0x24>)
 80142a4:	2003      	movs	r0, #3
 80142a6:	f000 fc95 	bl	8014bd4 <Custom_STM_App_Update_Char>
	}
}
 80142aa:	bf00      	nop
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	20001140 	.word	0x20001140
 80142b4:	20000426 	.word	0x20000426

080142b8 <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 80142bc:	4b06      	ldr	r3, [pc, #24]	@ (80142d8 <ACCEL_Task+0x20>)
 80142be:	7a9b      	ldrb	r3, [r3, #10]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d006      	beq.n	80142d2 <ACCEL_Task+0x1a>
	{
		tsBle.App.AccelSetTask = false;
 80142c4:	4b04      	ldr	r3, [pc, #16]	@ (80142d8 <ACCEL_Task+0x20>)
 80142c6:	2200      	movs	r2, #0
 80142c8:	729a      	strb	r2, [r3, #10]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 80142ca:	4904      	ldr	r1, [pc, #16]	@ (80142dc <ACCEL_Task+0x24>)
 80142cc:	2000      	movs	r0, #0
 80142ce:	f000 fc81 	bl	8014bd4 <Custom_STM_App_Update_Char>
	}
}
 80142d2:	bf00      	nop
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	20001140 	.word	0x20001140
 80142dc:	20000826 	.word	0x20000826

080142e0 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	2b08      	cmp	r3, #8
 80142ee:	d831      	bhi.n	8014354 <Custom_STM_App_Notification+0x74>
 80142f0:	a201      	add	r2, pc, #4	@ (adr r2, 80142f8 <Custom_STM_App_Notification+0x18>)
 80142f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f6:	bf00      	nop
 80142f8:	0801431d 	.word	0x0801431d
 80142fc:	08014331 	.word	0x08014331
 8014300:	08014355 	.word	0x08014355
 8014304:	08014355 	.word	0x08014355
 8014308:	08014355 	.word	0x08014355
 801430c:	0801433f 	.word	0x0801433f
 8014310:	08014347 	.word	0x08014347
 8014314:	08014355 	.word	0x08014355
 8014318:	08014355 	.word	0x08014355

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.McgNotification = true;
 801431c:	4b10      	ldr	r3, [pc, #64]	@ (8014360 <Custom_STM_App_Notification+0x80>)
 801431e:	2201      	movs	r2, #1
 8014320:	719a      	strb	r2, [r3, #6]
    	tsBle.App.AccelNotification = true;
 8014322:	4b0f      	ldr	r3, [pc, #60]	@ (8014360 <Custom_STM_App_Notification+0x80>)
 8014324:	2201      	movs	r2, #1
 8014326:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 8014328:	480e      	ldr	r0, [pc, #56]	@ (8014364 <Custom_STM_App_Notification+0x84>)
 801432a:	f7ee fba3 	bl	8002a74 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 801432e:	e012      	b.n	8014356 <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 8014330:	4b0b      	ldr	r3, [pc, #44]	@ (8014360 <Custom_STM_App_Notification+0x80>)
 8014332:	2200      	movs	r2, #0
 8014334:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 8014336:	480c      	ldr	r0, [pc, #48]	@ (8014368 <Custom_STM_App_Notification+0x88>)
 8014338:	f7ee fb9c 	bl	8002a74 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 801433c:	e00b      	b.n	8014356 <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 801433e:	480b      	ldr	r0, [pc, #44]	@ (801436c <Custom_STM_App_Notification+0x8c>)
 8014340:	f7ee fb98 	bl	8002a74 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 8014344:	e007      	b.n	8014356 <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.McgNotification = false;
 8014346:	4b06      	ldr	r3, [pc, #24]	@ (8014360 <Custom_STM_App_Notification+0x80>)
 8014348:	2200      	movs	r2, #0
 801434a:	719a      	strb	r2, [r3, #6]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 801434c:	4808      	ldr	r0, [pc, #32]	@ (8014370 <Custom_STM_App_Notification+0x90>)
 801434e:	f7ee fb91 	bl	8002a74 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 8014352:	e000      	b.n	8014356 <Custom_STM_App_Notification+0x76>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8014354:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8014356:	bf00      	nop
}
 8014358:	3708      	adds	r7, #8
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
 801435e:	bf00      	nop
 8014360:	20001140 	.word	0x20001140
 8014364:	080189c8 	.word	0x080189c8
 8014368:	080189f8 	.word	0x080189f8
 801436c:	08018a2c 	.word	0x08018a2c
 8014370:	08018a5c 	.word	0x08018a5c

08014374 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <Custom_APP_Notification+0x16>
 8014384:	2b01      	cmp	r3, #1
 8014386:	d002      	beq.n	801438e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8014388:	e002      	b.n	8014390 <Custom_APP_Notification+0x1c>
      break;
 801438a:	bf00      	nop
 801438c:	e000      	b.n	8014390 <Custom_APP_Notification+0x1c>
      break;
 801438e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8014390:	bf00      	nop
}
 8014392:	370c      	adds	r7, #12
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 801439c:	b480      	push	{r7}
 801439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80143a0:	bf00      	nop
}
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr
	...

080143ac <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b090      	sub	sp, #64	@ 0x40
 80143b0:	af02      	add	r7, sp, #8
 80143b2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80143b4:	2300      	movs	r3, #0
 80143b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	3301      	adds	r3, #1
 80143be:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 80143c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	2bff      	cmp	r3, #255	@ 0xff
 80143c6:	f040 81ae 	bne.w	8014726 <Custom_STM_Event_Handler+0x37a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80143ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143cc:	3302      	adds	r3, #2
 80143ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	881b      	ldrh	r3, [r3, #0]
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80143da:	2b1a      	cmp	r3, #26
 80143dc:	f200 819d 	bhi.w	801471a <Custom_STM_Event_Handler+0x36e>
 80143e0:	a201      	add	r2, pc, #4	@ (adr r2, 80143e8 <Custom_STM_Event_Handler+0x3c>)
 80143e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e6:	bf00      	nop
 80143e8:	08014455 	.word	0x08014455
 80143ec:	0801471b 	.word	0x0801471b
 80143f0:	0801471b 	.word	0x0801471b
 80143f4:	0801471b 	.word	0x0801471b
 80143f8:	0801471b 	.word	0x0801471b
 80143fc:	0801471b 	.word	0x0801471b
 8014400:	0801471b 	.word	0x0801471b
 8014404:	0801471b 	.word	0x0801471b
 8014408:	0801471b 	.word	0x0801471b
 801440c:	0801471b 	.word	0x0801471b
 8014410:	0801471b 	.word	0x0801471b
 8014414:	0801471b 	.word	0x0801471b
 8014418:	0801471b 	.word	0x0801471b
 801441c:	0801471b 	.word	0x0801471b
 8014420:	0801471b 	.word	0x0801471b
 8014424:	0801471b 	.word	0x0801471b
 8014428:	0801471b 	.word	0x0801471b
 801442c:	0801471b 	.word	0x0801471b
 8014430:	0801471b 	.word	0x0801471b
 8014434:	080146a3 	.word	0x080146a3
 8014438:	0801471b 	.word	0x0801471b
 801443c:	0801471b 	.word	0x0801471b
 8014440:	0801471b 	.word	0x0801471b
 8014444:	0801471b 	.word	0x0801471b
 8014448:	0801471b 	.word	0x0801471b
 801444c:	0801471b 	.word	0x0801471b
 8014450:	080146fd 	.word	0x080146fd
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8014454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014456:	3302      	adds	r3, #2
 8014458:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801445a:	6a3b      	ldr	r3, [r7, #32]
 801445c:	885b      	ldrh	r3, [r3, #2]
 801445e:	b29b      	uxth	r3, r3
 8014460:	461a      	mov	r2, r3
 8014462:	4ba0      	ldr	r3, [pc, #640]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 8014464:	885b      	ldrh	r3, [r3, #2]
 8014466:	3302      	adds	r3, #2
 8014468:	429a      	cmp	r2, r3
 801446a:	d119      	bne.n	80144a0 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801446c:	2301      	movs	r3, #1
 801446e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	7a1b      	ldrb	r3, [r3, #8]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d002      	beq.n	8014480 <Custom_STM_Event_Handler+0xd4>
 801447a:	2b01      	cmp	r3, #1
 801447c:	d008      	beq.n	8014490 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 801447e:	e10f      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 8014480:	2301      	movs	r3, #1
 8014482:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014484:	f107 030c 	add.w	r3, r7, #12
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff ff29 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 801448e:	e107      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 8014490:	2300      	movs	r3, #0
 8014492:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014494:	f107 030c 	add.w	r3, r7, #12
 8014498:	4618      	mov	r0, r3
 801449a:	f7ff ff21 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 801449e:	e0ff      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	885b      	ldrh	r3, [r3, #2]
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	461a      	mov	r2, r3
 80144a8:	4b8e      	ldr	r3, [pc, #568]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 80144aa:	889b      	ldrh	r3, [r3, #4]
 80144ac:	3302      	adds	r3, #2
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d119      	bne.n	80144e6 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80144b2:	2301      	movs	r3, #1
 80144b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80144b8:	6a3b      	ldr	r3, [r7, #32]
 80144ba:	7a1b      	ldrb	r3, [r3, #8]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <Custom_STM_Event_Handler+0x11a>
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	d008      	beq.n	80144d6 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80144c4:	e0ec      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 80144c6:	2303      	movs	r3, #3
 80144c8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80144ca:	f107 030c 	add.w	r3, r7, #12
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7ff ff06 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 80144d4:	e0e4      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 80144d6:	2302      	movs	r3, #2
 80144d8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80144da:	f107 030c 	add.w	r3, r7, #12
 80144de:	4618      	mov	r0, r3
 80144e0:	f7ff fefe 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 80144e4:	e0dc      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80144e6:	6a3b      	ldr	r3, [r7, #32]
 80144e8:	885b      	ldrh	r3, [r3, #2]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	461a      	mov	r2, r3
 80144ee:	4b7d      	ldr	r3, [pc, #500]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 80144f0:	891b      	ldrh	r3, [r3, #8]
 80144f2:	3302      	adds	r3, #2
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d119      	bne.n	801452c <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80144f8:	2301      	movs	r3, #1
 80144fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	7a1b      	ldrb	r3, [r3, #8]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d002      	beq.n	801450c <Custom_STM_Event_Handler+0x160>
 8014506:	2b01      	cmp	r3, #1
 8014508:	d008      	beq.n	801451c <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 801450a:	e0c9      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 801450c:	2306      	movs	r3, #6
 801450e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014510:	f107 030c 	add.w	r3, r7, #12
 8014514:	4618      	mov	r0, r3
 8014516:	f7ff fee3 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 801451a:	e0c1      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 801451c:	2305      	movs	r3, #5
 801451e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014520:	f107 030c 	add.w	r3, r7, #12
 8014524:	4618      	mov	r0, r3
 8014526:	f7ff fedb 	bl	80142e0 <Custom_STM_App_Notification>
                break;
 801452a:	e0b9      	b.n	80146a0 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 801452c:	6a3b      	ldr	r3, [r7, #32]
 801452e:	885b      	ldrh	r3, [r3, #2]
 8014530:	b29b      	uxth	r3, r3
 8014532:	461a      	mov	r2, r3
 8014534:	4b6b      	ldr	r3, [pc, #428]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 8014536:	88db      	ldrh	r3, [r3, #6]
 8014538:	3301      	adds	r3, #1
 801453a:	429a      	cmp	r2, r3
 801453c:	f040 80ef 	bne.w	801471e <Custom_STM_Event_Handler+0x372>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8014540:	2301      	movs	r3, #1
 8014542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 8014546:	6a3b      	ldr	r3, [r7, #32]
 8014548:	f103 0208 	add.w	r2, r3, #8
 801454c:	4b66      	ldr	r3, [pc, #408]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801454e:	3301      	adds	r3, #1
 8014550:	6810      	ldr	r0, [r2, #0]
 8014552:	6851      	ldr	r1, [r2, #4]
 8014554:	6018      	str	r0, [r3, #0]
 8014556:	6059      	str	r1, [r3, #4]
 8014558:	8912      	ldrh	r2, [r2, #8]
 801455a:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 801455c:	220a      	movs	r2, #10
 801455e:	4963      	ldr	r1, [pc, #396]	@ (80146ec <Custom_STM_Event_Handler+0x340>)
 8014560:	4863      	ldr	r0, [pc, #396]	@ (80146f0 <Custom_STM_Event_Handler+0x344>)
 8014562:	f001 ff6f 	bl	8016444 <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 8014566:	2300      	movs	r3, #0
 8014568:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 801456a:	2300      	movs	r3, #0
 801456c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8014570:	e090      	b.n	8014694 <Custom_STM_Event_Handler+0x2e8>
            {
            	// Check for CMD:  'SN'
            	if( strncmp( &tsCmd.u8RxCmd[i], "WS,", 3 ) == 0 )
 8014572:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8014576:	4a5c      	ldr	r2, [pc, #368]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014578:	4413      	add	r3, r2
 801457a:	3301      	adds	r3, #1
 801457c:	2203      	movs	r2, #3
 801457e:	495d      	ldr	r1, [pc, #372]	@ (80146f4 <Custom_STM_Event_Handler+0x348>)
 8014580:	4618      	mov	r0, r3
 8014582:	f002 f8ef 	bl	8016764 <strncmp>
 8014586:	4603      	mov	r3, r0
 8014588:	2b00      	cmp	r3, #0
 801458a:	d17e      	bne.n	801468a <Custom_STM_Event_Handler+0x2de>
                    {
							 if (tsCmd.u8RxCmd[8] == STOP)			{ tsCmd.MODE 	= Stop;}
 801458c:	4b56      	ldr	r3, [pc, #344]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801458e:	7a5b      	ldrb	r3, [r3, #9]
 8014590:	2b01      	cmp	r3, #1
 8014592:	d103      	bne.n	801459c <Custom_STM_Event_Handler+0x1f0>
 8014594:	4b54      	ldr	r3, [pc, #336]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014596:	2200      	movs	r2, #0
 8014598:	755a      	strb	r2, [r3, #21]
 801459a:	e076      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == START)			{ tsCmd.MODE 	= Start;}
 801459c:	4b52      	ldr	r3, [pc, #328]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801459e:	7a5b      	ldrb	r3, [r3, #9]
 80145a0:	2b02      	cmp	r3, #2
 80145a2:	d103      	bne.n	80145ac <Custom_STM_Event_Handler+0x200>
 80145a4:	4b50      	ldr	r3, [pc, #320]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145a6:	2201      	movs	r2, #1
 80145a8:	755a      	strb	r2, [r3, #21]
 80145aa:	e06e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_ON)		{ tsCmd.ECG 	= true; }
 80145ac:	4b4e      	ldr	r3, [pc, #312]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145ae:	7a5b      	ldrb	r3, [r3, #9]
 80145b0:	2b03      	cmp	r3, #3
 80145b2:	d103      	bne.n	80145bc <Custom_STM_Event_Handler+0x210>
 80145b4:	4b4c      	ldr	r3, [pc, #304]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145b6:	2201      	movs	r2, #1
 80145b8:	761a      	strb	r2, [r3, #24]
 80145ba:	e066      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_OFF)		{ tsCmd.ECG 	= false;}
 80145bc:	4b4a      	ldr	r3, [pc, #296]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145be:	7a5b      	ldrb	r3, [r3, #9]
 80145c0:	2b04      	cmp	r3, #4
 80145c2:	d103      	bne.n	80145cc <Custom_STM_Event_Handler+0x220>
 80145c4:	4b48      	ldr	r3, [pc, #288]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145c6:	2200      	movs	r2, #0
 80145c8:	761a      	strb	r2, [r3, #24]
 80145ca:	e05e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_ON)	{ tsCmd.ECG_N50 = true;}
 80145cc:	4b46      	ldr	r3, [pc, #280]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145ce:	7a5b      	ldrb	r3, [r3, #9]
 80145d0:	2b05      	cmp	r3, #5
 80145d2:	d103      	bne.n	80145dc <Custom_STM_Event_Handler+0x230>
 80145d4:	4b44      	ldr	r3, [pc, #272]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145d6:	2201      	movs	r2, #1
 80145d8:	765a      	strb	r2, [r3, #25]
 80145da:	e056      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_OFF)	{ tsCmd.ECG_N50 = false;}
 80145dc:	4b42      	ldr	r3, [pc, #264]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145de:	7a5b      	ldrb	r3, [r3, #9]
 80145e0:	2b06      	cmp	r3, #6
 80145e2:	d103      	bne.n	80145ec <Custom_STM_Event_Handler+0x240>
 80145e4:	4b40      	ldr	r3, [pc, #256]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145e6:	2200      	movs	r2, #0
 80145e8:	765a      	strb	r2, [r3, #25]
 80145ea:	e04e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_ON)	{ tsCmd.ECG_HPF = true;}
 80145ec:	4b3e      	ldr	r3, [pc, #248]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145ee:	7a5b      	ldrb	r3, [r3, #9]
 80145f0:	2b07      	cmp	r3, #7
 80145f2:	d103      	bne.n	80145fc <Custom_STM_Event_Handler+0x250>
 80145f4:	4b3c      	ldr	r3, [pc, #240]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145f6:	2201      	movs	r2, #1
 80145f8:	769a      	strb	r2, [r3, #26]
 80145fa:	e046      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_OFF)	{ tsCmd.ECG_HPF = false;}
 80145fc:	4b3a      	ldr	r3, [pc, #232]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 80145fe:	7a5b      	ldrb	r3, [r3, #9]
 8014600:	2b08      	cmp	r3, #8
 8014602:	d103      	bne.n	801460c <Custom_STM_Event_Handler+0x260>
 8014604:	4b38      	ldr	r3, [pc, #224]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014606:	2200      	movs	r2, #0
 8014608:	769a      	strb	r2, [r3, #26]
 801460a:	e03e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_ON)		{ tsCmd.MCG 	= true;}
 801460c:	4b36      	ldr	r3, [pc, #216]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801460e:	7a5b      	ldrb	r3, [r3, #9]
 8014610:	2b09      	cmp	r3, #9
 8014612:	d103      	bne.n	801461c <Custom_STM_Event_Handler+0x270>
 8014614:	4b34      	ldr	r3, [pc, #208]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014616:	2201      	movs	r2, #1
 8014618:	76da      	strb	r2, [r3, #27]
 801461a:	e036      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_OFF)		{ tsCmd.MCG 	= false;}
 801461c:	4b32      	ldr	r3, [pc, #200]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801461e:	7a5b      	ldrb	r3, [r3, #9]
 8014620:	2b0a      	cmp	r3, #10
 8014622:	d103      	bne.n	801462c <Custom_STM_Event_Handler+0x280>
 8014624:	4b30      	ldr	r3, [pc, #192]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014626:	2200      	movs	r2, #0
 8014628:	76da      	strb	r2, [r3, #27]
 801462a:	e02e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_ON)	{ tsCmd.MCG_N50 = true;}
 801462c:	4b2e      	ldr	r3, [pc, #184]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801462e:	7a5b      	ldrb	r3, [r3, #9]
 8014630:	2b0b      	cmp	r3, #11
 8014632:	d103      	bne.n	801463c <Custom_STM_Event_Handler+0x290>
 8014634:	4b2c      	ldr	r3, [pc, #176]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014636:	2201      	movs	r2, #1
 8014638:	771a      	strb	r2, [r3, #28]
 801463a:	e026      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_OFF)	{ tsCmd.MCG_N50 = false;}
 801463c:	4b2a      	ldr	r3, [pc, #168]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801463e:	7a5b      	ldrb	r3, [r3, #9]
 8014640:	2b0c      	cmp	r3, #12
 8014642:	d103      	bne.n	801464c <Custom_STM_Event_Handler+0x2a0>
 8014644:	4b28      	ldr	r3, [pc, #160]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014646:	2200      	movs	r2, #0
 8014648:	771a      	strb	r2, [r3, #28]
 801464a:	e01e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_ON)	{ tsCmd.MCG_HPF = true;}
 801464c:	4b26      	ldr	r3, [pc, #152]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801464e:	7a5b      	ldrb	r3, [r3, #9]
 8014650:	2b0d      	cmp	r3, #13
 8014652:	d103      	bne.n	801465c <Custom_STM_Event_Handler+0x2b0>
 8014654:	4b24      	ldr	r3, [pc, #144]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014656:	2201      	movs	r2, #1
 8014658:	775a      	strb	r2, [r3, #29]
 801465a:	e016      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_OFF)	{ tsCmd.MCG_HPF = false;}
 801465c:	4b22      	ldr	r3, [pc, #136]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801465e:	7a5b      	ldrb	r3, [r3, #9]
 8014660:	2b0e      	cmp	r3, #14
 8014662:	d103      	bne.n	801466c <Custom_STM_Event_Handler+0x2c0>
 8014664:	4b20      	ldr	r3, [pc, #128]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014666:	2200      	movs	r2, #0
 8014668:	775a      	strb	r2, [r3, #29]
 801466a:	e00e      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_ON)		{ tsCmd.LED 	= true; }
 801466c:	4b1e      	ldr	r3, [pc, #120]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801466e:	7a5b      	ldrb	r3, [r3, #9]
 8014670:	2b0f      	cmp	r3, #15
 8014672:	d103      	bne.n	801467c <Custom_STM_Event_Handler+0x2d0>
 8014674:	4b1c      	ldr	r3, [pc, #112]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014676:	2201      	movs	r2, #1
 8014678:	75da      	strb	r2, [r3, #23]
 801467a:	e006      	b.n	801468a <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_OFF)  		{ tsCmd.LED 	= false; }
 801467c:	4b1a      	ldr	r3, [pc, #104]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 801467e:	7a5b      	ldrb	r3, [r3, #9]
 8014680:	2b10      	cmp	r3, #16
 8014682:	d102      	bne.n	801468a <Custom_STM_Event_Handler+0x2de>
 8014684:	4b18      	ldr	r3, [pc, #96]	@ (80146e8 <Custom_STM_Event_Handler+0x33c>)
 8014686:	2200      	movs	r2, #0
 8014688:	75da      	strb	r2, [r3, #23]
            for (uint8_t i=0 ; i < 10 ; i++)
 801468a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801468e:	3301      	adds	r3, #1
 8014690:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8014694:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8014698:	2b09      	cmp	r3, #9
 801469a:	f67f af6a 	bls.w	8014572 <Custom_STM_Event_Handler+0x1c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 801469e:	e03e      	b.n	801471e <Custom_STM_Event_Handler+0x372>
 80146a0:	e03d      	b.n	801471e <Custom_STM_Event_Handler+0x372>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80146a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a4:	3302      	adds	r3, #2
 80146a6:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80146a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146aa:	885b      	ldrh	r3, [r3, #2]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	461a      	mov	r2, r3
 80146b0:	4b0c      	ldr	r3, [pc, #48]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 80146b2:	895b      	ldrh	r3, [r3, #10]
 80146b4:	3301      	adds	r3, #1
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d133      	bne.n	8014722 <Custom_STM_Event_Handler+0x376>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80146ba:	2301      	movs	r3, #1
 80146bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80146c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c2:	881b      	ldrh	r3, [r3, #0]
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7fc fd68 	bl	801119c <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 80146cc:	4b05      	ldr	r3, [pc, #20]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 80146ce:	8818      	ldrh	r0, [r3, #0]
 80146d0:	4b04      	ldr	r3, [pc, #16]	@ (80146e4 <Custom_STM_Event_Handler+0x338>)
 80146d2:	8959      	ldrh	r1, [r3, #10]
 80146d4:	4b08      	ldr	r3, [pc, #32]	@ (80146f8 <Custom_STM_Event_Handler+0x34c>)
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	2314      	movs	r3, #20
 80146da:	2200      	movs	r2, #0
 80146dc:	f7fc fc60 	bl	8010fa0 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80146e0:	e01f      	b.n	8014722 <Custom_STM_Event_Handler+0x376>
 80146e2:	bf00      	nop
 80146e4:	200011e0 	.word	0x200011e0
 80146e8:	20000da0 	.word	0x20000da0
 80146ec:	20000da1 	.word	0x20000da1
 80146f0:	20000dab 	.word	0x20000dab
 80146f4:	08018a94 	.word	0x08018a94
 80146f8:	08018a98 	.word	0x08018a98
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80146fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146fe:	3302      	adds	r3, #2
 8014700:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8014702:	2308      	movs	r3, #8
 8014704:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8014706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014708:	881b      	ldrh	r3, [r3, #0]
 801470a:	b29b      	uxth	r3, r3
 801470c:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 801470e:	f107 030c 	add.w	r3, r7, #12
 8014712:	4618      	mov	r0, r3
 8014714:	f7ff fde4 	bl	80142e0 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8014718:	e004      	b.n	8014724 <Custom_STM_Event_Handler+0x378>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801471a:	bf00      	nop
 801471c:	e004      	b.n	8014728 <Custom_STM_Event_Handler+0x37c>
          break;
 801471e:	bf00      	nop
 8014720:	e002      	b.n	8014728 <Custom_STM_Event_Handler+0x37c>
          break;
 8014722:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8014724:	e000      	b.n	8014728 <Custom_STM_Event_Handler+0x37c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8014726:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8014728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 801472c:	4618      	mov	r0, r3
 801472e:	3738      	adds	r7, #56	@ 0x38
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b08c      	sub	sp, #48	@ 0x30
 8014738:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801473a:	2392      	movs	r3, #146	@ 0x92
 801473c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801473e:	48a5      	ldr	r0, [pc, #660]	@ (80149d4 <SVCCTL_InitCustomSvc+0x2a0>)
 8014740:	f7fd f8d0 	bl	80118e4 <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8014744:	230e      	movs	r3, #14
 8014746:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8014748:	238f      	movs	r3, #143	@ 0x8f
 801474a:	713b      	strb	r3, [r7, #4]
 801474c:	23e5      	movs	r3, #229	@ 0xe5
 801474e:	717b      	strb	r3, [r7, #5]
 8014750:	23b3      	movs	r3, #179	@ 0xb3
 8014752:	71bb      	strb	r3, [r7, #6]
 8014754:	23d5      	movs	r3, #213	@ 0xd5
 8014756:	71fb      	strb	r3, [r7, #7]
 8014758:	232e      	movs	r3, #46	@ 0x2e
 801475a:	723b      	strb	r3, [r7, #8]
 801475c:	237f      	movs	r3, #127	@ 0x7f
 801475e:	727b      	strb	r3, [r7, #9]
 8014760:	234a      	movs	r3, #74	@ 0x4a
 8014762:	72bb      	strb	r3, [r7, #10]
 8014764:	2398      	movs	r3, #152	@ 0x98
 8014766:	72fb      	strb	r3, [r7, #11]
 8014768:	232a      	movs	r3, #42	@ 0x2a
 801476a:	733b      	strb	r3, [r7, #12]
 801476c:	2348      	movs	r3, #72	@ 0x48
 801476e:	737b      	strb	r3, [r7, #13]
 8014770:	237a      	movs	r3, #122	@ 0x7a
 8014772:	73bb      	strb	r3, [r7, #14]
 8014774:	23cc      	movs	r3, #204	@ 0xcc
 8014776:	73fb      	strb	r3, [r7, #15]
 8014778:	2300      	movs	r3, #0
 801477a:	743b      	strb	r3, [r7, #16]
 801477c:	2300      	movs	r3, #0
 801477e:	747b      	strb	r3, [r7, #17]
 8014780:	2300      	movs	r3, #0
 8014782:	74bb      	strb	r3, [r7, #18]
 8014784:	2300      	movs	r3, #0
 8014786:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8014788:	7dbb      	ldrb	r3, [r7, #22]
 801478a:	1d39      	adds	r1, r7, #4
 801478c:	4a92      	ldr	r2, [pc, #584]	@ (80149d8 <SVCCTL_InitCustomSvc+0x2a4>)
 801478e:	9200      	str	r2, [sp, #0]
 8014790:	2201      	movs	r2, #1
 8014792:	2002      	movs	r0, #2
 8014794:	f7fc fa26 	bl	8010be4 <aci_gatt_add_service>
 8014798:	4603      	mov	r3, r0
 801479a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801479c:	7dfb      	ldrb	r3, [r7, #23]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00f      	beq.n	80147c2 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 80147a2:	488e      	ldr	r0, [pc, #568]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 80147a4:	f7fd ff1a 	bl	80125dc <DbgTraceGetFileName>
 80147a8:	4601      	mov	r1, r0
 80147aa:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 80147ae:	4a8c      	ldr	r2, [pc, #560]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 80147b0:	488c      	ldr	r0, [pc, #560]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 80147b2:	f001 fe47 	bl	8016444 <iprintf>
 80147b6:	7dfb      	ldrb	r3, [r7, #23]
 80147b8:	4619      	mov	r1, r3
 80147ba:	488b      	ldr	r0, [pc, #556]	@ (80149e8 <SVCCTL_InitCustomSvc+0x2b4>)
 80147bc:	f001 fe42 	bl	8016444 <iprintf>
 80147c0:	e00c      	b.n	80147dc <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 80147c2:	4886      	ldr	r0, [pc, #536]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 80147c4:	f7fd ff0a 	bl	80125dc <DbgTraceGetFileName>
 80147c8:	4601      	mov	r1, r0
 80147ca:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 80147ce:	4a84      	ldr	r2, [pc, #528]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 80147d0:	4884      	ldr	r0, [pc, #528]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 80147d2:	f001 fe37 	bl	8016444 <iprintf>
 80147d6:	4885      	ldr	r0, [pc, #532]	@ (80149ec <SVCCTL_InitCustomSvc+0x2b8>)
 80147d8:	f001 fe34 	bl	8016444 <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 80147dc:	2319      	movs	r3, #25
 80147de:	713b      	strb	r3, [r7, #4]
 80147e0:	23ed      	movs	r3, #237	@ 0xed
 80147e2:	717b      	strb	r3, [r7, #5]
 80147e4:	2382      	movs	r3, #130	@ 0x82
 80147e6:	71bb      	strb	r3, [r7, #6]
 80147e8:	23ae      	movs	r3, #174	@ 0xae
 80147ea:	71fb      	strb	r3, [r7, #7]
 80147ec:	23ed      	movs	r3, #237	@ 0xed
 80147ee:	723b      	strb	r3, [r7, #8]
 80147f0:	2321      	movs	r3, #33	@ 0x21
 80147f2:	727b      	strb	r3, [r7, #9]
 80147f4:	234c      	movs	r3, #76	@ 0x4c
 80147f6:	72bb      	strb	r3, [r7, #10]
 80147f8:	239d      	movs	r3, #157	@ 0x9d
 80147fa:	72fb      	strb	r3, [r7, #11]
 80147fc:	2341      	movs	r3, #65	@ 0x41
 80147fe:	733b      	strb	r3, [r7, #12]
 8014800:	2345      	movs	r3, #69	@ 0x45
 8014802:	737b      	strb	r3, [r7, #13]
 8014804:	2322      	movs	r3, #34	@ 0x22
 8014806:	73bb      	strb	r3, [r7, #14]
 8014808:	238e      	movs	r3, #142	@ 0x8e
 801480a:	73fb      	strb	r3, [r7, #15]
 801480c:	2336      	movs	r3, #54	@ 0x36
 801480e:	743b      	strb	r3, [r7, #16]
 8014810:	232a      	movs	r3, #42	@ 0x2a
 8014812:	747b      	strb	r3, [r7, #17]
 8014814:	2300      	movs	r3, #0
 8014816:	74bb      	strb	r3, [r7, #18]
 8014818:	2300      	movs	r3, #0
 801481a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801481c:	4b6e      	ldr	r3, [pc, #440]	@ (80149d8 <SVCCTL_InitCustomSvc+0x2a4>)
 801481e:	8818      	ldrh	r0, [r3, #0]
 8014820:	4b73      	ldr	r3, [pc, #460]	@ (80149f0 <SVCCTL_InitCustomSvc+0x2bc>)
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	4619      	mov	r1, r3
 8014826:	1d3a      	adds	r2, r7, #4
 8014828:	4b72      	ldr	r3, [pc, #456]	@ (80149f4 <SVCCTL_InitCustomSvc+0x2c0>)
 801482a:	9305      	str	r3, [sp, #20]
 801482c:	2300      	movs	r3, #0
 801482e:	9304      	str	r3, [sp, #16]
 8014830:	2310      	movs	r3, #16
 8014832:	9303      	str	r3, [sp, #12]
 8014834:	2307      	movs	r3, #7
 8014836:	9302      	str	r3, [sp, #8]
 8014838:	2300      	movs	r3, #0
 801483a:	9301      	str	r3, [sp, #4]
 801483c:	2310      	movs	r3, #16
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	460b      	mov	r3, r1
 8014842:	2102      	movs	r1, #2
 8014844:	f7fc faa4 	bl	8010d90 <aci_gatt_add_char>
 8014848:	4603      	mov	r3, r0
 801484a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801484c:	7dfb      	ldrb	r3, [r7, #23]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d00f      	beq.n	8014872 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8014852:	4862      	ldr	r0, [pc, #392]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 8014854:	f7fd fec2 	bl	80125dc <DbgTraceGetFileName>
 8014858:	4601      	mov	r1, r0
 801485a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 801485e:	4a60      	ldr	r2, [pc, #384]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 8014860:	4860      	ldr	r0, [pc, #384]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 8014862:	f001 fdef 	bl	8016444 <iprintf>
 8014866:	7dfb      	ldrb	r3, [r7, #23]
 8014868:	4619      	mov	r1, r3
 801486a:	4863      	ldr	r0, [pc, #396]	@ (80149f8 <SVCCTL_InitCustomSvc+0x2c4>)
 801486c:	f001 fdea 	bl	8016444 <iprintf>
 8014870:	e00c      	b.n	801488c <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 8014872:	485a      	ldr	r0, [pc, #360]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 8014874:	f7fd feb2 	bl	80125dc <DbgTraceGetFileName>
 8014878:	4601      	mov	r1, r0
 801487a:	f44f 7305 	mov.w	r3, #532	@ 0x214
 801487e:	4a58      	ldr	r2, [pc, #352]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 8014880:	4858      	ldr	r0, [pc, #352]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 8014882:	f001 fddf 	bl	8016444 <iprintf>
 8014886:	485d      	ldr	r0, [pc, #372]	@ (80149fc <SVCCTL_InitCustomSvc+0x2c8>)
 8014888:	f001 fddc 	bl	8016444 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 801488c:	2319      	movs	r3, #25
 801488e:	713b      	strb	r3, [r7, #4]
 8014890:	23ed      	movs	r3, #237	@ 0xed
 8014892:	717b      	strb	r3, [r7, #5]
 8014894:	2382      	movs	r3, #130	@ 0x82
 8014896:	71bb      	strb	r3, [r7, #6]
 8014898:	23ae      	movs	r3, #174	@ 0xae
 801489a:	71fb      	strb	r3, [r7, #7]
 801489c:	23ed      	movs	r3, #237	@ 0xed
 801489e:	723b      	strb	r3, [r7, #8]
 80148a0:	2321      	movs	r3, #33	@ 0x21
 80148a2:	727b      	strb	r3, [r7, #9]
 80148a4:	234c      	movs	r3, #76	@ 0x4c
 80148a6:	72bb      	strb	r3, [r7, #10]
 80148a8:	239d      	movs	r3, #157	@ 0x9d
 80148aa:	72fb      	strb	r3, [r7, #11]
 80148ac:	2341      	movs	r3, #65	@ 0x41
 80148ae:	733b      	strb	r3, [r7, #12]
 80148b0:	2345      	movs	r3, #69	@ 0x45
 80148b2:	737b      	strb	r3, [r7, #13]
 80148b4:	2322      	movs	r3, #34	@ 0x22
 80148b6:	73bb      	strb	r3, [r7, #14]
 80148b8:	238e      	movs	r3, #142	@ 0x8e
 80148ba:	73fb      	strb	r3, [r7, #15]
 80148bc:	2337      	movs	r3, #55	@ 0x37
 80148be:	743b      	strb	r3, [r7, #16]
 80148c0:	232a      	movs	r3, #42	@ 0x2a
 80148c2:	747b      	strb	r3, [r7, #17]
 80148c4:	2300      	movs	r3, #0
 80148c6:	74bb      	strb	r3, [r7, #18]
 80148c8:	2300      	movs	r3, #0
 80148ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80148cc:	4b42      	ldr	r3, [pc, #264]	@ (80149d8 <SVCCTL_InitCustomSvc+0x2a4>)
 80148ce:	8818      	ldrh	r0, [r3, #0]
 80148d0:	4b4b      	ldr	r3, [pc, #300]	@ (8014a00 <SVCCTL_InitCustomSvc+0x2cc>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	4619      	mov	r1, r3
 80148d6:	1d3a      	adds	r2, r7, #4
 80148d8:	4b4a      	ldr	r3, [pc, #296]	@ (8014a04 <SVCCTL_InitCustomSvc+0x2d0>)
 80148da:	9305      	str	r3, [sp, #20]
 80148dc:	2300      	movs	r3, #0
 80148de:	9304      	str	r3, [sp, #16]
 80148e0:	2310      	movs	r3, #16
 80148e2:	9303      	str	r3, [sp, #12]
 80148e4:	2307      	movs	r3, #7
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	2300      	movs	r3, #0
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	2310      	movs	r3, #16
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	460b      	mov	r3, r1
 80148f2:	2102      	movs	r1, #2
 80148f4:	f7fc fa4c 	bl	8010d90 <aci_gatt_add_char>
 80148f8:	4603      	mov	r3, r0
 80148fa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80148fc:	7dfb      	ldrb	r3, [r7, #23]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d00f      	beq.n	8014922 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 8014902:	4836      	ldr	r0, [pc, #216]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 8014904:	f7fd fe6a 	bl	80125dc <DbgTraceGetFileName>
 8014908:	4601      	mov	r1, r0
 801490a:	f240 232a 	movw	r3, #554	@ 0x22a
 801490e:	4a34      	ldr	r2, [pc, #208]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 8014910:	4834      	ldr	r0, [pc, #208]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 8014912:	f001 fd97 	bl	8016444 <iprintf>
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	4619      	mov	r1, r3
 801491a:	483b      	ldr	r0, [pc, #236]	@ (8014a08 <SVCCTL_InitCustomSvc+0x2d4>)
 801491c:	f001 fd92 	bl	8016444 <iprintf>
 8014920:	e00c      	b.n	801493c <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 8014922:	482e      	ldr	r0, [pc, #184]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 8014924:	f7fd fe5a 	bl	80125dc <DbgTraceGetFileName>
 8014928:	4601      	mov	r1, r0
 801492a:	f240 232e 	movw	r3, #558	@ 0x22e
 801492e:	4a2c      	ldr	r2, [pc, #176]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 8014930:	482c      	ldr	r0, [pc, #176]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 8014932:	f001 fd87 	bl	8016444 <iprintf>
 8014936:	4835      	ldr	r0, [pc, #212]	@ (8014a0c <SVCCTL_InitCustomSvc+0x2d8>)
 8014938:	f001 fd84 	bl	8016444 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 801493c:	2319      	movs	r3, #25
 801493e:	713b      	strb	r3, [r7, #4]
 8014940:	23ed      	movs	r3, #237	@ 0xed
 8014942:	717b      	strb	r3, [r7, #5]
 8014944:	2382      	movs	r3, #130	@ 0x82
 8014946:	71bb      	strb	r3, [r7, #6]
 8014948:	23ae      	movs	r3, #174	@ 0xae
 801494a:	71fb      	strb	r3, [r7, #7]
 801494c:	23ed      	movs	r3, #237	@ 0xed
 801494e:	723b      	strb	r3, [r7, #8]
 8014950:	2321      	movs	r3, #33	@ 0x21
 8014952:	727b      	strb	r3, [r7, #9]
 8014954:	234c      	movs	r3, #76	@ 0x4c
 8014956:	72bb      	strb	r3, [r7, #10]
 8014958:	239d      	movs	r3, #157	@ 0x9d
 801495a:	72fb      	strb	r3, [r7, #11]
 801495c:	2341      	movs	r3, #65	@ 0x41
 801495e:	733b      	strb	r3, [r7, #12]
 8014960:	2345      	movs	r3, #69	@ 0x45
 8014962:	737b      	strb	r3, [r7, #13]
 8014964:	2322      	movs	r3, #34	@ 0x22
 8014966:	73bb      	strb	r3, [r7, #14]
 8014968:	238e      	movs	r3, #142	@ 0x8e
 801496a:	73fb      	strb	r3, [r7, #15]
 801496c:	2338      	movs	r3, #56	@ 0x38
 801496e:	743b      	strb	r3, [r7, #16]
 8014970:	232a      	movs	r3, #42	@ 0x2a
 8014972:	747b      	strb	r3, [r7, #17]
 8014974:	2300      	movs	r3, #0
 8014976:	74bb      	strb	r3, [r7, #18]
 8014978:	2300      	movs	r3, #0
 801497a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801497c:	4b16      	ldr	r3, [pc, #88]	@ (80149d8 <SVCCTL_InitCustomSvc+0x2a4>)
 801497e:	8818      	ldrh	r0, [r3, #0]
 8014980:	4b23      	ldr	r3, [pc, #140]	@ (8014a10 <SVCCTL_InitCustomSvc+0x2dc>)
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	4619      	mov	r1, r3
 8014986:	1d3a      	adds	r2, r7, #4
 8014988:	4b22      	ldr	r3, [pc, #136]	@ (8014a14 <SVCCTL_InitCustomSvc+0x2e0>)
 801498a:	9305      	str	r3, [sp, #20]
 801498c:	2300      	movs	r3, #0
 801498e:	9304      	str	r3, [sp, #16]
 8014990:	2310      	movs	r3, #16
 8014992:	9303      	str	r3, [sp, #12]
 8014994:	2301      	movs	r3, #1
 8014996:	9302      	str	r3, [sp, #8]
 8014998:	2300      	movs	r3, #0
 801499a:	9301      	str	r3, [sp, #4]
 801499c:	2308      	movs	r3, #8
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	460b      	mov	r3, r1
 80149a2:	2102      	movs	r1, #2
 80149a4:	f7fc f9f4 	bl	8010d90 <aci_gatt_add_char>
 80149a8:	4603      	mov	r3, r0
 80149aa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80149ac:	7dfb      	ldrb	r3, [r7, #23]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d034      	beq.n	8014a1c <SVCCTL_InitCustomSvc+0x2e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 80149b2:	480a      	ldr	r0, [pc, #40]	@ (80149dc <SVCCTL_InitCustomSvc+0x2a8>)
 80149b4:	f7fd fe12 	bl	80125dc <DbgTraceGetFileName>
 80149b8:	4601      	mov	r1, r0
 80149ba:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80149be:	4a08      	ldr	r2, [pc, #32]	@ (80149e0 <SVCCTL_InitCustomSvc+0x2ac>)
 80149c0:	4808      	ldr	r0, [pc, #32]	@ (80149e4 <SVCCTL_InitCustomSvc+0x2b0>)
 80149c2:	f001 fd3f 	bl	8016444 <iprintf>
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	4619      	mov	r1, r3
 80149ca:	4813      	ldr	r0, [pc, #76]	@ (8014a18 <SVCCTL_InitCustomSvc+0x2e4>)
 80149cc:	f001 fd3a 	bl	8016444 <iprintf>
 80149d0:	e031      	b.n	8014a36 <SVCCTL_InitCustomSvc+0x302>
 80149d2:	bf00      	nop
 80149d4:	080143ad 	.word	0x080143ad
 80149d8:	200011e0 	.word	0x200011e0
 80149dc:	08018aac 	.word	0x08018aac
 80149e0:	08019370 	.word	0x08019370
 80149e4:	08018acc 	.word	0x08018acc
 80149e8:	08018ae0 	.word	0x08018ae0
 80149ec:	08018b28 	.word	0x08018b28
 80149f0:	200000b7 	.word	0x200000b7
 80149f4:	200011e2 	.word	0x200011e2
 80149f8:	08018b5c 	.word	0x08018b5c
 80149fc:	08018ba4 	.word	0x08018ba4
 8014a00:	200000b8 	.word	0x200000b8
 8014a04:	200011e4 	.word	0x200011e4
 8014a08:	08018bd8 	.word	0x08018bd8
 8014a0c:	08018c1c 	.word	0x08018c1c
 8014a10:	200000b9 	.word	0x200000b9
 8014a14:	200011e6 	.word	0x200011e6
 8014a18:	08018c50 	.word	0x08018c50
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8014a1c:	4860      	ldr	r0, [pc, #384]	@ (8014ba0 <SVCCTL_InitCustomSvc+0x46c>)
 8014a1e:	f7fd fddd 	bl	80125dc <DbgTraceGetFileName>
 8014a22:	4601      	mov	r1, r0
 8014a24:	f44f 7312 	mov.w	r3, #584	@ 0x248
 8014a28:	4a5e      	ldr	r2, [pc, #376]	@ (8014ba4 <SVCCTL_InitCustomSvc+0x470>)
 8014a2a:	485f      	ldr	r0, [pc, #380]	@ (8014ba8 <SVCCTL_InitCustomSvc+0x474>)
 8014a2c:	f001 fd0a 	bl	8016444 <iprintf>
 8014a30:	485e      	ldr	r0, [pc, #376]	@ (8014bac <SVCCTL_InitCustomSvc+0x478>)
 8014a32:	f001 fd07 	bl	8016444 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 8014a36:	2319      	movs	r3, #25
 8014a38:	713b      	strb	r3, [r7, #4]
 8014a3a:	23ed      	movs	r3, #237	@ 0xed
 8014a3c:	717b      	strb	r3, [r7, #5]
 8014a3e:	2382      	movs	r3, #130	@ 0x82
 8014a40:	71bb      	strb	r3, [r7, #6]
 8014a42:	23ae      	movs	r3, #174	@ 0xae
 8014a44:	71fb      	strb	r3, [r7, #7]
 8014a46:	23ed      	movs	r3, #237	@ 0xed
 8014a48:	723b      	strb	r3, [r7, #8]
 8014a4a:	2321      	movs	r3, #33	@ 0x21
 8014a4c:	727b      	strb	r3, [r7, #9]
 8014a4e:	234c      	movs	r3, #76	@ 0x4c
 8014a50:	72bb      	strb	r3, [r7, #10]
 8014a52:	239d      	movs	r3, #157	@ 0x9d
 8014a54:	72fb      	strb	r3, [r7, #11]
 8014a56:	2341      	movs	r3, #65	@ 0x41
 8014a58:	733b      	strb	r3, [r7, #12]
 8014a5a:	2345      	movs	r3, #69	@ 0x45
 8014a5c:	737b      	strb	r3, [r7, #13]
 8014a5e:	2322      	movs	r3, #34	@ 0x22
 8014a60:	73bb      	strb	r3, [r7, #14]
 8014a62:	238e      	movs	r3, #142	@ 0x8e
 8014a64:	73fb      	strb	r3, [r7, #15]
 8014a66:	2339      	movs	r3, #57	@ 0x39
 8014a68:	743b      	strb	r3, [r7, #16]
 8014a6a:	232a      	movs	r3, #42	@ 0x2a
 8014a6c:	747b      	strb	r3, [r7, #17]
 8014a6e:	2300      	movs	r3, #0
 8014a70:	74bb      	strb	r3, [r7, #18]
 8014a72:	2300      	movs	r3, #0
 8014a74:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014a76:	4b4e      	ldr	r3, [pc, #312]	@ (8014bb0 <SVCCTL_InitCustomSvc+0x47c>)
 8014a78:	8818      	ldrh	r0, [r3, #0]
 8014a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8014bb4 <SVCCTL_InitCustomSvc+0x480>)
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	4619      	mov	r1, r3
 8014a80:	1d3a      	adds	r2, r7, #4
 8014a82:	4b4d      	ldr	r3, [pc, #308]	@ (8014bb8 <SVCCTL_InitCustomSvc+0x484>)
 8014a84:	9305      	str	r3, [sp, #20]
 8014a86:	2300      	movs	r3, #0
 8014a88:	9304      	str	r3, [sp, #16]
 8014a8a:	2310      	movs	r3, #16
 8014a8c:	9303      	str	r3, [sp, #12]
 8014a8e:	2307      	movs	r3, #7
 8014a90:	9302      	str	r3, [sp, #8]
 8014a92:	2300      	movs	r3, #0
 8014a94:	9301      	str	r3, [sp, #4]
 8014a96:	2310      	movs	r3, #16
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	2102      	movs	r1, #2
 8014a9e:	f7fc f977 	bl	8010d90 <aci_gatt_add_char>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014aa6:	7dfb      	ldrb	r3, [r7, #23]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d00f      	beq.n	8014acc <SVCCTL_InitCustomSvc+0x398>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 8014aac:	483c      	ldr	r0, [pc, #240]	@ (8014ba0 <SVCCTL_InitCustomSvc+0x46c>)
 8014aae:	f7fd fd95 	bl	80125dc <DbgTraceGetFileName>
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	f240 235e 	movw	r3, #606	@ 0x25e
 8014ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8014ba4 <SVCCTL_InitCustomSvc+0x470>)
 8014aba:	483b      	ldr	r0, [pc, #236]	@ (8014ba8 <SVCCTL_InitCustomSvc+0x474>)
 8014abc:	f001 fcc2 	bl	8016444 <iprintf>
 8014ac0:	7dfb      	ldrb	r3, [r7, #23]
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	483d      	ldr	r0, [pc, #244]	@ (8014bbc <SVCCTL_InitCustomSvc+0x488>)
 8014ac6:	f001 fcbd 	bl	8016444 <iprintf>
 8014aca:	e00c      	b.n	8014ae6 <SVCCTL_InitCustomSvc+0x3b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 8014acc:	4834      	ldr	r0, [pc, #208]	@ (8014ba0 <SVCCTL_InitCustomSvc+0x46c>)
 8014ace:	f7fd fd85 	bl	80125dc <DbgTraceGetFileName>
 8014ad2:	4601      	mov	r1, r0
 8014ad4:	f240 2362 	movw	r3, #610	@ 0x262
 8014ad8:	4a32      	ldr	r2, [pc, #200]	@ (8014ba4 <SVCCTL_InitCustomSvc+0x470>)
 8014ada:	4833      	ldr	r0, [pc, #204]	@ (8014ba8 <SVCCTL_InitCustomSvc+0x474>)
 8014adc:	f001 fcb2 	bl	8016444 <iprintf>
 8014ae0:	4837      	ldr	r0, [pc, #220]	@ (8014bc0 <SVCCTL_InitCustomSvc+0x48c>)
 8014ae2:	f001 fcaf 	bl	8016444 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 8014ae6:	2319      	movs	r3, #25
 8014ae8:	713b      	strb	r3, [r7, #4]
 8014aea:	23ed      	movs	r3, #237	@ 0xed
 8014aec:	717b      	strb	r3, [r7, #5]
 8014aee:	2382      	movs	r3, #130	@ 0x82
 8014af0:	71bb      	strb	r3, [r7, #6]
 8014af2:	23ae      	movs	r3, #174	@ 0xae
 8014af4:	71fb      	strb	r3, [r7, #7]
 8014af6:	23ed      	movs	r3, #237	@ 0xed
 8014af8:	723b      	strb	r3, [r7, #8]
 8014afa:	2321      	movs	r3, #33	@ 0x21
 8014afc:	727b      	strb	r3, [r7, #9]
 8014afe:	234c      	movs	r3, #76	@ 0x4c
 8014b00:	72bb      	strb	r3, [r7, #10]
 8014b02:	239d      	movs	r3, #157	@ 0x9d
 8014b04:	72fb      	strb	r3, [r7, #11]
 8014b06:	2341      	movs	r3, #65	@ 0x41
 8014b08:	733b      	strb	r3, [r7, #12]
 8014b0a:	2345      	movs	r3, #69	@ 0x45
 8014b0c:	737b      	strb	r3, [r7, #13]
 8014b0e:	2322      	movs	r3, #34	@ 0x22
 8014b10:	73bb      	strb	r3, [r7, #14]
 8014b12:	238e      	movs	r3, #142	@ 0x8e
 8014b14:	73fb      	strb	r3, [r7, #15]
 8014b16:	2340      	movs	r3, #64	@ 0x40
 8014b18:	743b      	strb	r3, [r7, #16]
 8014b1a:	232a      	movs	r3, #42	@ 0x2a
 8014b1c:	747b      	strb	r3, [r7, #17]
 8014b1e:	2300      	movs	r3, #0
 8014b20:	74bb      	strb	r3, [r7, #18]
 8014b22:	2300      	movs	r3, #0
 8014b24:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014b26:	4b22      	ldr	r3, [pc, #136]	@ (8014bb0 <SVCCTL_InitCustomSvc+0x47c>)
 8014b28:	8818      	ldrh	r0, [r3, #0]
 8014b2a:	4b26      	ldr	r3, [pc, #152]	@ (8014bc4 <SVCCTL_InitCustomSvc+0x490>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	4619      	mov	r1, r3
 8014b30:	1d3a      	adds	r2, r7, #4
 8014b32:	4b25      	ldr	r3, [pc, #148]	@ (8014bc8 <SVCCTL_InitCustomSvc+0x494>)
 8014b34:	9305      	str	r3, [sp, #20]
 8014b36:	2300      	movs	r3, #0
 8014b38:	9304      	str	r3, [sp, #16]
 8014b3a:	2310      	movs	r3, #16
 8014b3c:	9303      	str	r3, [sp, #12]
 8014b3e:	2304      	movs	r3, #4
 8014b40:	9302      	str	r3, [sp, #8]
 8014b42:	2300      	movs	r3, #0
 8014b44:	9301      	str	r3, [sp, #4]
 8014b46:	2302      	movs	r3, #2
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	2102      	movs	r1, #2
 8014b4e:	f7fc f91f 	bl	8010d90 <aci_gatt_add_char>
 8014b52:	4603      	mov	r3, r0
 8014b54:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014b56:	7dfb      	ldrb	r3, [r7, #23]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00f      	beq.n	8014b7c <SVCCTL_InitCustomSvc+0x448>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 8014b5c:	4810      	ldr	r0, [pc, #64]	@ (8014ba0 <SVCCTL_InitCustomSvc+0x46c>)
 8014b5e:	f7fd fd3d 	bl	80125dc <DbgTraceGetFileName>
 8014b62:	4601      	mov	r1, r0
 8014b64:	f44f 731e 	mov.w	r3, #632	@ 0x278
 8014b68:	4a0e      	ldr	r2, [pc, #56]	@ (8014ba4 <SVCCTL_InitCustomSvc+0x470>)
 8014b6a:	480f      	ldr	r0, [pc, #60]	@ (8014ba8 <SVCCTL_InitCustomSvc+0x474>)
 8014b6c:	f001 fc6a 	bl	8016444 <iprintf>
 8014b70:	7dfb      	ldrb	r3, [r7, #23]
 8014b72:	4619      	mov	r1, r3
 8014b74:	4815      	ldr	r0, [pc, #84]	@ (8014bcc <SVCCTL_InitCustomSvc+0x498>)
 8014b76:	f001 fc65 	bl	8016444 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8014b7a:	e00d      	b.n	8014b98 <SVCCTL_InitCustomSvc+0x464>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 8014b7c:	4808      	ldr	r0, [pc, #32]	@ (8014ba0 <SVCCTL_InitCustomSvc+0x46c>)
 8014b7e:	f7fd fd2d 	bl	80125dc <DbgTraceGetFileName>
 8014b82:	4601      	mov	r1, r0
 8014b84:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 8014b88:	4a06      	ldr	r2, [pc, #24]	@ (8014ba4 <SVCCTL_InitCustomSvc+0x470>)
 8014b8a:	4807      	ldr	r0, [pc, #28]	@ (8014ba8 <SVCCTL_InitCustomSvc+0x474>)
 8014b8c:	f001 fc5a 	bl	8016444 <iprintf>
 8014b90:	480f      	ldr	r0, [pc, #60]	@ (8014bd0 <SVCCTL_InitCustomSvc+0x49c>)
 8014b92:	f001 fc57 	bl	8016444 <iprintf>
  return;
 8014b96:	bf00      	nop
}
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08018aac 	.word	0x08018aac
 8014ba4:	08019370 	.word	0x08019370
 8014ba8:	08018acc 	.word	0x08018acc
 8014bac:	08018c94 	.word	0x08018c94
 8014bb0:	200011e0 	.word	0x200011e0
 8014bb4:	200000ba 	.word	0x200000ba
 8014bb8:	200011e8 	.word	0x200011e8
 8014bbc:	08018cc4 	.word	0x08018cc4
 8014bc0:	08018d0c 	.word	0x08018d0c
 8014bc4:	200000bb 	.word	0x200000bb
 8014bc8:	200011ea 	.word	0x200011ea
 8014bcc:	08018d44 	.word	0x08018d44
 8014bd0:	08018d90 	.word	0x08018d90

08014bd4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b086      	sub	sp, #24
 8014bd8:	af02      	add	r7, sp, #8
 8014bda:	4603      	mov	r3, r0
 8014bdc:	6039      	str	r1, [r7, #0]
 8014bde:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014be0:	2392      	movs	r3, #146	@ 0x92
 8014be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014be4:	79fb      	ldrb	r3, [r7, #7]
 8014be6:	2b04      	cmp	r3, #4
 8014be8:	f200 8115 	bhi.w	8014e16 <Custom_STM_App_Update_Char+0x242>
 8014bec:	a201      	add	r2, pc, #4	@ (adr r2, 8014bf4 <Custom_STM_App_Update_Char+0x20>)
 8014bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf2:	bf00      	nop
 8014bf4:	08014c09 	.word	0x08014c09
 8014bf8:	08014c75 	.word	0x08014c75
 8014bfc:	08014cd3 	.word	0x08014cd3
 8014c00:	08014d31 	.word	0x08014d31
 8014c04:	08014db9 	.word	0x08014db9
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014c08:	4b87      	ldr	r3, [pc, #540]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014c0a:	8818      	ldrh	r0, [r3, #0]
 8014c0c:	4b86      	ldr	r3, [pc, #536]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014c0e:	8859      	ldrh	r1, [r3, #2]
 8014c10:	4b86      	ldr	r3, [pc, #536]	@ (8014e2c <Custom_STM_App_Update_Char+0x258>)
 8014c12:	781a      	ldrb	r2, [r3, #0]
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	4613      	mov	r3, r2
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	f7fc f9c0 	bl	8010fa0 <aci_gatt_update_char_value>
 8014c20:	4603      	mov	r3, r0
 8014c22:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014c24:	7bfb      	ldrb	r3, [r7, #15]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d00f      	beq.n	8014c4a <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014c2a:	4881      	ldr	r0, [pc, #516]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014c2c:	f7fd fcd6 	bl	80125dc <DbgTraceGetFileName>
 8014c30:	4601      	mov	r1, r0
 8014c32:	f240 23a3 	movw	r3, #675	@ 0x2a3
 8014c36:	4a7f      	ldr	r2, [pc, #508]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014c38:	487f      	ldr	r0, [pc, #508]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014c3a:	f001 fc03 	bl	8016444 <iprintf>
 8014c3e:	7bfb      	ldrb	r3, [r7, #15]
 8014c40:	4619      	mov	r1, r3
 8014c42:	487e      	ldr	r0, [pc, #504]	@ (8014e3c <Custom_STM_App_Update_Char+0x268>)
 8014c44:	f001 fbfe 	bl	8016444 <iprintf>
 8014c48:	e00c      	b.n	8014c64 <Custom_STM_App_Update_Char+0x90>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014c4a:	4879      	ldr	r0, [pc, #484]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014c4c:	f7fd fcc6 	bl	80125dc <DbgTraceGetFileName>
 8014c50:	4601      	mov	r1, r0
 8014c52:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8014c56:	4a77      	ldr	r2, [pc, #476]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014c58:	4877      	ldr	r0, [pc, #476]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014c5a:	f001 fbf3 	bl	8016444 <iprintf>
 8014c5e:	4878      	ldr	r0, [pc, #480]	@ (8014e40 <Custom_STM_App_Update_Char+0x26c>)
 8014c60:	f001 fbf0 	bl	8016444 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 8014c64:	7bfb      	ldrb	r3, [r7, #15]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	f040 80d7 	bne.w	8014e1a <Custom_STM_App_Update_Char+0x246>
      {
    	  tsBle.ACCEL_XferComplete = true;
 8014c6c:	4b75      	ldr	r3, [pc, #468]	@ (8014e44 <Custom_STM_App_Update_Char+0x270>)
 8014c6e:	2201      	movs	r2, #1
 8014c70:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8014c72:	e0d2      	b.n	8014e1a <Custom_STM_App_Update_Char+0x246>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014c74:	4b6c      	ldr	r3, [pc, #432]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014c76:	8818      	ldrh	r0, [r3, #0]
 8014c78:	4b6b      	ldr	r3, [pc, #428]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014c7a:	8899      	ldrh	r1, [r3, #4]
 8014c7c:	4b72      	ldr	r3, [pc, #456]	@ (8014e48 <Custom_STM_App_Update_Char+0x274>)
 8014c7e:	781a      	ldrb	r2, [r3, #0]
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	4613      	mov	r3, r2
 8014c86:	2200      	movs	r2, #0
 8014c88:	f7fc f98a 	bl	8010fa0 <aci_gatt_update_char_value>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d00f      	beq.n	8014cb6 <Custom_STM_App_Update_Char+0xe2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 8014c96:	4866      	ldr	r0, [pc, #408]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014c98:	f7fd fca0 	bl	80125dc <DbgTraceGetFileName>
 8014c9c:	4601      	mov	r1, r0
 8014c9e:	f240 23c5 	movw	r3, #709	@ 0x2c5
 8014ca2:	4a64      	ldr	r2, [pc, #400]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014ca4:	4864      	ldr	r0, [pc, #400]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014ca6:	f001 fbcd 	bl	8016444 <iprintf>
 8014caa:	7bfb      	ldrb	r3, [r7, #15]
 8014cac:	4619      	mov	r1, r3
 8014cae:	4867      	ldr	r0, [pc, #412]	@ (8014e4c <Custom_STM_App_Update_Char+0x278>)
 8014cb0:	f001 fbc8 	bl	8016444 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8014cb4:	e0b2      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 8014cb6:	485e      	ldr	r0, [pc, #376]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014cb8:	f7fd fc90 	bl	80125dc <DbgTraceGetFileName>
 8014cbc:	4601      	mov	r1, r0
 8014cbe:	f240 23c9 	movw	r3, #713	@ 0x2c9
 8014cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014cc4:	485c      	ldr	r0, [pc, #368]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014cc6:	f001 fbbd 	bl	8016444 <iprintf>
 8014cca:	4861      	ldr	r0, [pc, #388]	@ (8014e50 <Custom_STM_App_Update_Char+0x27c>)
 8014ccc:	f001 fbba 	bl	8016444 <iprintf>
      break;
 8014cd0:	e0a4      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014cd2:	4b55      	ldr	r3, [pc, #340]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014cd4:	8818      	ldrh	r0, [r3, #0]
 8014cd6:	4b54      	ldr	r3, [pc, #336]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014cd8:	88d9      	ldrh	r1, [r3, #6]
 8014cda:	4b5e      	ldr	r3, [pc, #376]	@ (8014e54 <Custom_STM_App_Update_Char+0x280>)
 8014cdc:	781a      	ldrb	r2, [r3, #0]
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	9300      	str	r3, [sp, #0]
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	f7fc f95b 	bl	8010fa0 <aci_gatt_update_char_value>
 8014cea:	4603      	mov	r3, r0
 8014cec:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014cee:	7bfb      	ldrb	r3, [r7, #15]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00f      	beq.n	8014d14 <Custom_STM_App_Update_Char+0x140>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014cf4:	484e      	ldr	r0, [pc, #312]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014cf6:	f7fd fc71 	bl	80125dc <DbgTraceGetFileName>
 8014cfa:	4601      	mov	r1, r0
 8014cfc:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8014d00:	4a4c      	ldr	r2, [pc, #304]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014d02:	484d      	ldr	r0, [pc, #308]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014d04:	f001 fb9e 	bl	8016444 <iprintf>
 8014d08:	7bfb      	ldrb	r3, [r7, #15]
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	4852      	ldr	r0, [pc, #328]	@ (8014e58 <Custom_STM_App_Update_Char+0x284>)
 8014d0e:	f001 fb99 	bl	8016444 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014d12:	e083      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014d14:	4846      	ldr	r0, [pc, #280]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014d16:	f7fd fc61 	bl	80125dc <DbgTraceGetFileName>
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8014d20:	4a44      	ldr	r2, [pc, #272]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014d22:	4845      	ldr	r0, [pc, #276]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014d24:	f001 fb8e 	bl	8016444 <iprintf>
 8014d28:	484c      	ldr	r0, [pc, #304]	@ (8014e5c <Custom_STM_App_Update_Char+0x288>)
 8014d2a:	f001 fb8b 	bl	8016444 <iprintf>
      break;
 8014d2e:	e075      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014d30:	4b3d      	ldr	r3, [pc, #244]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014d32:	8818      	ldrh	r0, [r3, #0]
 8014d34:	4b3c      	ldr	r3, [pc, #240]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014d36:	8919      	ldrh	r1, [r3, #8]
 8014d38:	4b49      	ldr	r3, [pc, #292]	@ (8014e60 <Custom_STM_App_Update_Char+0x28c>)
 8014d3a:	781a      	ldrb	r2, [r3, #0]
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	4613      	mov	r3, r2
 8014d42:	2200      	movs	r2, #0
 8014d44:	f7fc f92c 	bl	8010fa0 <aci_gatt_update_char_value>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014d4c:	7bfb      	ldrb	r3, [r7, #15]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00f      	beq.n	8014d72 <Custom_STM_App_Update_Char+0x19e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 8014d52:	4837      	ldr	r0, [pc, #220]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014d54:	f7fd fc42 	bl	80125dc <DbgTraceGetFileName>
 8014d58:	4601      	mov	r1, r0
 8014d5a:	f240 23eb 	movw	r3, #747	@ 0x2eb
 8014d5e:	4a35      	ldr	r2, [pc, #212]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014d60:	4835      	ldr	r0, [pc, #212]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014d62:	f001 fb6f 	bl	8016444 <iprintf>
 8014d66:	7bfb      	ldrb	r3, [r7, #15]
 8014d68:	4619      	mov	r1, r3
 8014d6a:	483e      	ldr	r0, [pc, #248]	@ (8014e64 <Custom_STM_App_Update_Char+0x290>)
 8014d6c:	f001 fb6a 	bl	8016444 <iprintf>
 8014d70:	e00c      	b.n	8014d8c <Custom_STM_App_Update_Char+0x1b8>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 8014d72:	482f      	ldr	r0, [pc, #188]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014d74:	f7fd fc32 	bl	80125dc <DbgTraceGetFileName>
 8014d78:	4601      	mov	r1, r0
 8014d7a:	f240 23ef 	movw	r3, #751	@ 0x2ef
 8014d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014d80:	482d      	ldr	r0, [pc, #180]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014d82:	f001 fb5f 	bl	8016444 <iprintf>
 8014d86:	4838      	ldr	r0, [pc, #224]	@ (8014e68 <Custom_STM_App_Update_Char+0x294>)
 8014d88:	f001 fb5c 	bl	8016444 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 8014d8c:	7bfb      	ldrb	r3, [r7, #15]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d103      	bne.n	8014d9a <Custom_STM_App_Update_Char+0x1c6>
      {
    	  tsBle.SCG_XferComplete = true;
 8014d92:	4b2c      	ldr	r3, [pc, #176]	@ (8014e44 <Custom_STM_App_Update_Char+0x270>)
 8014d94:	2201      	movs	r2, #1
 8014d96:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 8014d98:	e040      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014d9a:	4b23      	ldr	r3, [pc, #140]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014d9c:	8818      	ldrh	r0, [r3, #0]
 8014d9e:	4b22      	ldr	r3, [pc, #136]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014da0:	8919      	ldrh	r1, [r3, #8]
 8014da2:	4b2f      	ldr	r3, [pc, #188]	@ (8014e60 <Custom_STM_App_Update_Char+0x28c>)
 8014da4:	781a      	ldrb	r2, [r3, #0]
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	4613      	mov	r3, r2
 8014dac:	2200      	movs	r2, #0
 8014dae:	f7fc f8f7 	bl	8010fa0 <aci_gatt_update_char_value>
 8014db2:	4603      	mov	r3, r0
 8014db4:	73fb      	strb	r3, [r7, #15]
      break;
 8014db6:	e031      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014db8:	4b1b      	ldr	r3, [pc, #108]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014dba:	8818      	ldrh	r0, [r3, #0]
 8014dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8014e28 <Custom_STM_App_Update_Char+0x254>)
 8014dbe:	8959      	ldrh	r1, [r3, #10]
 8014dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8014e6c <Custom_STM_App_Update_Char+0x298>)
 8014dc2:	781a      	ldrb	r2, [r3, #0]
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f7fc f8e8 	bl	8010fa0 <aci_gatt_update_char_value>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014dd4:	7bfb      	ldrb	r3, [r7, #15]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d00f      	beq.n	8014dfa <Custom_STM_App_Update_Char+0x226>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014dda:	4815      	ldr	r0, [pc, #84]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014ddc:	f7fd fbfe 	bl	80125dc <DbgTraceGetFileName>
 8014de0:	4601      	mov	r1, r0
 8014de2:	f240 3317 	movw	r3, #791	@ 0x317
 8014de6:	4a13      	ldr	r2, [pc, #76]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014de8:	4813      	ldr	r0, [pc, #76]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014dea:	f001 fb2b 	bl	8016444 <iprintf>
 8014dee:	7bfb      	ldrb	r3, [r7, #15]
 8014df0:	4619      	mov	r1, r3
 8014df2:	481f      	ldr	r0, [pc, #124]	@ (8014e70 <Custom_STM_App_Update_Char+0x29c>)
 8014df4:	f001 fb26 	bl	8016444 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014df8:	e010      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014dfa:	480d      	ldr	r0, [pc, #52]	@ (8014e30 <Custom_STM_App_Update_Char+0x25c>)
 8014dfc:	f7fd fbee 	bl	80125dc <DbgTraceGetFileName>
 8014e00:	4601      	mov	r1, r0
 8014e02:	f240 331b 	movw	r3, #795	@ 0x31b
 8014e06:	4a0b      	ldr	r2, [pc, #44]	@ (8014e34 <Custom_STM_App_Update_Char+0x260>)
 8014e08:	480b      	ldr	r0, [pc, #44]	@ (8014e38 <Custom_STM_App_Update_Char+0x264>)
 8014e0a:	f001 fb1b 	bl	8016444 <iprintf>
 8014e0e:	4819      	ldr	r0, [pc, #100]	@ (8014e74 <Custom_STM_App_Update_Char+0x2a0>)
 8014e10:	f001 fb18 	bl	8016444 <iprintf>
      break;
 8014e14:	e002      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>

    default:
      break;
 8014e16:	bf00      	nop
 8014e18:	e000      	b.n	8014e1c <Custom_STM_App_Update_Char+0x248>
      break;
 8014e1a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	200011e0 	.word	0x200011e0
 8014e2c:	200000b7 	.word	0x200000b7
 8014e30:	08018aac 	.word	0x08018aac
 8014e34:	08019388 	.word	0x08019388
 8014e38:	08018acc 	.word	0x08018acc
 8014e3c:	08018dc8 	.word	0x08018dc8
 8014e40:	08018e10 	.word	0x08018e10
 8014e44:	20001140 	.word	0x20001140
 8014e48:	200000b8 	.word	0x200000b8
 8014e4c:	08018e48 	.word	0x08018e48
 8014e50:	08018e90 	.word	0x08018e90
 8014e54:	200000b9 	.word	0x200000b9
 8014e58:	08018ec8 	.word	0x08018ec8
 8014e5c:	08018f0c 	.word	0x08018f0c
 8014e60:	200000ba 	.word	0x200000ba
 8014e64:	08018f40 	.word	0x08018f40
 8014e68:	08018f8c 	.word	0x08018f8c
 8014e6c:	200000bb 	.word	0x200000bb
 8014e70:	08018fc8 	.word	0x08018fc8
 8014e74:	08019014 	.word	0x08019014

08014e78 <LL_PWR_EnableBootC2>:
{
 8014e78:	b480      	push	{r7}
 8014e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014e7c:	4b05      	ldr	r3, [pc, #20]	@ (8014e94 <LL_PWR_EnableBootC2+0x1c>)
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	4a04      	ldr	r2, [pc, #16]	@ (8014e94 <LL_PWR_EnableBootC2+0x1c>)
 8014e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014e86:	60d3      	str	r3, [r2, #12]
}
 8014e88:	bf00      	nop
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
 8014e92:	bf00      	nop
 8014e94:	58000400 	.word	0x58000400

08014e98 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014ea0:	4b06      	ldr	r3, [pc, #24]	@ (8014ebc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014ea2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8014ea6:	4905      	ldr	r1, [pc, #20]	@ (8014ebc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	4313      	orrs	r3, r2
 8014eac:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8014eb0:	bf00      	nop
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	58000800 	.word	0x58000800

08014ec0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014ec8:	4b05      	ldr	r3, [pc, #20]	@ (8014ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014eca:	6a1a      	ldr	r2, [r3, #32]
 8014ecc:	4904      	ldr	r1, [pc, #16]	@ (8014ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	620b      	str	r3, [r1, #32]
}
 8014ed4:	bf00      	nop
 8014ed6:	370c      	adds	r7, #12
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	4770      	bx	lr
 8014ee0:	58000800 	.word	0x58000800

08014ee4 <LL_AHB3_GRP1_EnableClock>:
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ef2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4313      	orrs	r3, r2
 8014efa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	4013      	ands	r3, r2
 8014f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014f08:	68fb      	ldr	r3, [r7, #12]
}
 8014f0a:	bf00      	nop
 8014f0c:	3714      	adds	r7, #20
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f14:	4770      	bx	lr

08014f16 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014f16:	b480      	push	{r7}
 8014f18:	b085      	sub	sp, #20
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f22:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014f36:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	4013      	ands	r3, r2
 8014f3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014f40:	68fb      	ldr	r3, [r7, #12]
}
 8014f42:	bf00      	nop
 8014f44:	3714      	adds	r7, #20
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr

08014f4e <LL_C1_IPCC_EnableIT_TXF>:
{
 8014f4e:	b480      	push	{r7}
 8014f50:	b083      	sub	sp, #12
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	601a      	str	r2, [r3, #0]
}
 8014f62:	bf00      	nop
 8014f64:	370c      	adds	r7, #12
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr

08014f6e <LL_C1_IPCC_EnableIT_RXO>:
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f043 0201 	orr.w	r2, r3, #1
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	601a      	str	r2, [r3, #0]
}
 8014f82:	bf00      	nop
 8014f84:	370c      	adds	r7, #12
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr

08014f8e <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014f8e:	b480      	push	{r7}
 8014f90:	b083      	sub	sp, #12
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
 8014f96:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	041b      	lsls	r3, r3, #16
 8014fa0:	43db      	mvns	r3, r3
 8014fa2:	401a      	ands	r2, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	605a      	str	r2, [r3, #4]
}
 8014fa8:	bf00      	nop
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	685a      	ldr	r2, [r3, #4]
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	041b      	lsls	r3, r3, #16
 8014fc6:	431a      	orrs	r2, r3
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	605a      	str	r2, [r3, #4]
}
 8014fcc:	bf00      	nop
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b083      	sub	sp, #12
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685a      	ldr	r2, [r3, #4]
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	43db      	mvns	r3, r3
 8014fea:	401a      	ands	r2, r3
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	605a      	str	r2, [r3, #4]
}
 8014ff0:	bf00      	nop
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	683a      	ldr	r2, [r7, #0]
 801500a:	609a      	str	r2, [r3, #8]
}
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <LL_C1_IPCC_SetFlag_CHx>:
{
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	041a      	lsls	r2, r3, #16
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	609a      	str	r2, [r3, #8]
}
 801502a:	bf00      	nop
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8015036:	b480      	push	{r7}
 8015038:	b083      	sub	sp, #12
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	68da      	ldr	r2, [r3, #12]
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	4013      	ands	r3, r2
 8015048:	683a      	ldr	r2, [r7, #0]
 801504a:	429a      	cmp	r2, r3
 801504c:	d101      	bne.n	8015052 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801504e:	2301      	movs	r3, #1
 8015050:	e000      	b.n	8015054 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015060:	b480      	push	{r7}
 8015062:	b083      	sub	sp, #12
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	69da      	ldr	r2, [r3, #28]
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	4013      	ands	r3, r2
 8015072:	683a      	ldr	r2, [r7, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d101      	bne.n	801507c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8015078:	2301      	movs	r3, #1
 801507a:	e000      	b.n	801507e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801507c:	2300      	movs	r3, #0
}
 801507e:	4618      	mov	r0, r3
 8015080:	370c      	adds	r7, #12
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr
	...

0801508c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801508c:	b580      	push	{r7, lr}
 801508e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015090:	2102      	movs	r1, #2
 8015092:	4818      	ldr	r0, [pc, #96]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 8015094:	f7ff ffe4 	bl	8015060 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d008      	beq.n	80150b0 <HW_IPCC_Rx_Handler+0x24>
 801509e:	4b15      	ldr	r3, [pc, #84]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	f003 0302 	and.w	r3, r3, #2
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d102      	bne.n	80150b0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80150aa:	f000 f8d5 	bl	8015258 <HW_IPCC_SYS_EvtHandler>
 80150ae:	e01e      	b.n	80150ee <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80150b0:	2101      	movs	r1, #1
 80150b2:	4810      	ldr	r0, [pc, #64]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 80150b4:	f7ff ffd4 	bl	8015060 <LL_C2_IPCC_IsActiveFlag_CHx>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d008      	beq.n	80150d0 <HW_IPCC_Rx_Handler+0x44>
 80150be:	4b0d      	ldr	r3, [pc, #52]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	f003 0301 	and.w	r3, r3, #1
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d102      	bne.n	80150d0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80150ca:	f000 f889 	bl	80151e0 <HW_IPCC_BLE_EvtHandler>
 80150ce:	e00e      	b.n	80150ee <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80150d0:	2108      	movs	r1, #8
 80150d2:	4808      	ldr	r0, [pc, #32]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 80150d4:	f7ff ffc4 	bl	8015060 <LL_C2_IPCC_IsActiveFlag_CHx>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d008      	beq.n	80150f0 <HW_IPCC_Rx_Handler+0x64>
 80150de:	4b05      	ldr	r3, [pc, #20]	@ (80150f4 <HW_IPCC_Rx_Handler+0x68>)
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	f003 0308 	and.w	r3, r3, #8
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d102      	bne.n	80150f0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80150ea:	f000 f901 	bl	80152f0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80150ee:	bf00      	nop
 80150f0:	bf00      	nop
}
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	58000c00 	.word	0x58000c00

080150f8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80150fc:	2102      	movs	r1, #2
 80150fe:	4818      	ldr	r0, [pc, #96]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 8015100:	f7ff ff99 	bl	8015036 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015104:	4603      	mov	r3, r0
 8015106:	2b00      	cmp	r3, #0
 8015108:	d108      	bne.n	801511c <HW_IPCC_Tx_Handler+0x24>
 801510a:	4b15      	ldr	r3, [pc, #84]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015112:	2b00      	cmp	r3, #0
 8015114:	d102      	bne.n	801511c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015116:	f000 f893 	bl	8015240 <HW_IPCC_SYS_CmdEvtHandler>
 801511a:	e01e      	b.n	801515a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801511c:	2108      	movs	r1, #8
 801511e:	4810      	ldr	r0, [pc, #64]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 8015120:	f7ff ff89 	bl	8015036 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015124:	4603      	mov	r3, r0
 8015126:	2b00      	cmp	r3, #0
 8015128:	d108      	bne.n	801513c <HW_IPCC_Tx_Handler+0x44>
 801512a:	4b0d      	ldr	r3, [pc, #52]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015132:	2b00      	cmp	r3, #0
 8015134:	d102      	bne.n	801513c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015136:	f000 f8bd 	bl	80152b4 <HW_IPCC_MM_FreeBufHandler>
 801513a:	e00e      	b.n	801515a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801513c:	2120      	movs	r1, #32
 801513e:	4808      	ldr	r0, [pc, #32]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 8015140:	f7ff ff79 	bl	8015036 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d108      	bne.n	801515c <HW_IPCC_Tx_Handler+0x64>
 801514a:	4b05      	ldr	r3, [pc, #20]	@ (8015160 <HW_IPCC_Tx_Handler+0x68>)
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015152:	2b00      	cmp	r3, #0
 8015154:	d102      	bne.n	801515c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015156:	f000 f84f 	bl	80151f8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801515a:	bf00      	nop
 801515c:	bf00      	nop
}
 801515e:	bd80      	pop	{r7, pc}
 8015160:	58000c00 	.word	0x58000c00

08015164 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8015168:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801516c:	f7ff fed3 	bl	8014f16 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015170:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8015174:	f7ff fea4 	bl	8014ec0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015178:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801517c:	f7ff fe8c 	bl	8014e98 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015180:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8015182:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015184:	f7ff fe78 	bl	8014e78 <LL_PWR_EnableBootC2>

  return;
 8015188:	bf00      	nop
}
 801518a:	bd80      	pop	{r7, pc}

0801518c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801518c:	b580      	push	{r7, lr}
 801518e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8015190:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8015194:	f7ff fea6 	bl	8014ee4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015198:	4806      	ldr	r0, [pc, #24]	@ (80151b4 <HW_IPCC_Init+0x28>)
 801519a:	f7ff fee8 	bl	8014f6e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801519e:	4805      	ldr	r0, [pc, #20]	@ (80151b4 <HW_IPCC_Init+0x28>)
 80151a0:	f7ff fed5 	bl	8014f4e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80151a4:	202c      	movs	r0, #44	@ 0x2c
 80151a6:	f7ef fe8c 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80151aa:	202d      	movs	r0, #45	@ 0x2d
 80151ac:	f7ef fe89 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

  return;
 80151b0:	bf00      	nop
}
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	58000c00 	.word	0x58000c00

080151b8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80151bc:	2101      	movs	r1, #1
 80151be:	4802      	ldr	r0, [pc, #8]	@ (80151c8 <HW_IPCC_BLE_Init+0x10>)
 80151c0:	f7ff ff0a 	bl	8014fd8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80151c4:	bf00      	nop
}
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	58000c00 	.word	0x58000c00

080151cc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80151d0:	2101      	movs	r1, #1
 80151d2:	4802      	ldr	r0, [pc, #8]	@ (80151dc <HW_IPCC_BLE_SendCmd+0x10>)
 80151d4:	f7ff ff20 	bl	8015018 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80151d8:	bf00      	nop
}
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	58000c00 	.word	0x58000c00

080151e0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80151e4:	f7fd f842 	bl	801226c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80151e8:	2101      	movs	r1, #1
 80151ea:	4802      	ldr	r0, [pc, #8]	@ (80151f4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80151ec:	f7ff ff06 	bl	8014ffc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80151f0:	bf00      	nop
}
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	58000c00 	.word	0x58000c00

080151f8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80151fc:	2120      	movs	r1, #32
 80151fe:	4803      	ldr	r0, [pc, #12]	@ (801520c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015200:	f7ff fed8 	bl	8014fb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015204:	f7fd f862 	bl	80122cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015208:	bf00      	nop
}
 801520a:	bd80      	pop	{r7, pc}
 801520c:	58000c00 	.word	0x58000c00

08015210 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015210:	b580      	push	{r7, lr}
 8015212:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015214:	2102      	movs	r1, #2
 8015216:	4802      	ldr	r0, [pc, #8]	@ (8015220 <HW_IPCC_SYS_Init+0x10>)
 8015218:	f7ff fede 	bl	8014fd8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801521c:	bf00      	nop
}
 801521e:	bd80      	pop	{r7, pc}
 8015220:	58000c00 	.word	0x58000c00

08015224 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015228:	2102      	movs	r1, #2
 801522a:	4804      	ldr	r0, [pc, #16]	@ (801523c <HW_IPCC_SYS_SendCmd+0x18>)
 801522c:	f7ff fef4 	bl	8015018 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015230:	2102      	movs	r1, #2
 8015232:	4802      	ldr	r0, [pc, #8]	@ (801523c <HW_IPCC_SYS_SendCmd+0x18>)
 8015234:	f7ff feab 	bl	8014f8e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015238:	bf00      	nop
}
 801523a:	bd80      	pop	{r7, pc}
 801523c:	58000c00 	.word	0x58000c00

08015240 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015244:	2102      	movs	r1, #2
 8015246:	4803      	ldr	r0, [pc, #12]	@ (8015254 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015248:	f7ff feb4 	bl	8014fb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801524c:	f7fd f88e 	bl	801236c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015250:	bf00      	nop
}
 8015252:	bd80      	pop	{r7, pc}
 8015254:	58000c00 	.word	0x58000c00

08015258 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801525c:	f7fd f89c 	bl	8012398 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015260:	2102      	movs	r1, #2
 8015262:	4802      	ldr	r0, [pc, #8]	@ (801526c <HW_IPCC_SYS_EvtHandler+0x14>)
 8015264:	f7ff feca 	bl	8014ffc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015268:	bf00      	nop
}
 801526a:	bd80      	pop	{r7, pc}
 801526c:	58000c00 	.word	0x58000c00

08015270 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8015278:	2108      	movs	r1, #8
 801527a:	480c      	ldr	r0, [pc, #48]	@ (80152ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801527c:	f7ff fedb 	bl	8015036 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d007      	beq.n	8015296 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8015286:	4a0a      	ldr	r2, [pc, #40]	@ (80152b0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801528c:	2108      	movs	r1, #8
 801528e:	4807      	ldr	r0, [pc, #28]	@ (80152ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015290:	f7ff fe7d 	bl	8014f8e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015294:	e006      	b.n	80152a4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801529a:	2108      	movs	r1, #8
 801529c:	4803      	ldr	r0, [pc, #12]	@ (80152ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801529e:	f7ff febb 	bl	8015018 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80152a2:	bf00      	nop
}
 80152a4:	3708      	adds	r7, #8
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	58000c00 	.word	0x58000c00
 80152b0:	200011ec 	.word	0x200011ec

080152b4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80152b8:	2108      	movs	r1, #8
 80152ba:	4806      	ldr	r0, [pc, #24]	@ (80152d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80152bc:	f7ff fe7a 	bl	8014fb4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80152c0:	4b05      	ldr	r3, [pc, #20]	@ (80152d8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80152c6:	2108      	movs	r1, #8
 80152c8:	4802      	ldr	r0, [pc, #8]	@ (80152d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80152ca:	f7ff fea5 	bl	8015018 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80152ce:	bf00      	nop
}
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	58000c00 	.word	0x58000c00
 80152d8:	200011ec 	.word	0x200011ec

080152dc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80152e0:	2108      	movs	r1, #8
 80152e2:	4802      	ldr	r0, [pc, #8]	@ (80152ec <HW_IPCC_TRACES_Init+0x10>)
 80152e4:	f7ff fe78 	bl	8014fd8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80152e8:	bf00      	nop
}
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	58000c00 	.word	0x58000c00

080152f0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80152f4:	f7fd f8f8 	bl	80124e8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80152f8:	2108      	movs	r1, #8
 80152fa:	4802      	ldr	r0, [pc, #8]	@ (8015304 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80152fc:	f7ff fe7e 	bl	8014ffc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015300:	bf00      	nop
}
 8015302:	bd80      	pop	{r7, pc}
 8015304:	58000c00 	.word	0x58000c00

08015308 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801530c:	2200      	movs	r2, #0
 801530e:	4912      	ldr	r1, [pc, #72]	@ (8015358 <MX_USB_Device_Init+0x50>)
 8015310:	4812      	ldr	r0, [pc, #72]	@ (801535c <MX_USB_Device_Init+0x54>)
 8015312:	f7f9 fd6d 	bl	800edf0 <USBD_Init>
 8015316:	4603      	mov	r3, r0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d001      	beq.n	8015320 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801531c:	f7ef f800 	bl	8004320 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015320:	490f      	ldr	r1, [pc, #60]	@ (8015360 <MX_USB_Device_Init+0x58>)
 8015322:	480e      	ldr	r0, [pc, #56]	@ (801535c <MX_USB_Device_Init+0x54>)
 8015324:	f7f9 fd94 	bl	800ee50 <USBD_RegisterClass>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d001      	beq.n	8015332 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801532e:	f7ee fff7 	bl	8004320 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015332:	490c      	ldr	r1, [pc, #48]	@ (8015364 <MX_USB_Device_Init+0x5c>)
 8015334:	4809      	ldr	r0, [pc, #36]	@ (801535c <MX_USB_Device_Init+0x54>)
 8015336:	f7f9 fc8b 	bl	800ec50 <USBD_CDC_RegisterInterface>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d001      	beq.n	8015344 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015340:	f7ee ffee 	bl	8004320 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015344:	4805      	ldr	r0, [pc, #20]	@ (801535c <MX_USB_Device_Init+0x54>)
 8015346:	f7f9 fdb9 	bl	800eebc <USBD_Start>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	d001      	beq.n	8015354 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015350:	f7ee ffe6 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015354:	bf00      	nop
 8015356:	bd80      	pop	{r7, pc}
 8015358:	200000d0 	.word	0x200000d0
 801535c:	200011f0 	.word	0x200011f0
 8015360:	20000024 	.word	0x20000024
 8015364:	200000bc 	.word	0x200000bc

08015368 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801536c:	2200      	movs	r2, #0
 801536e:	4905      	ldr	r1, [pc, #20]	@ (8015384 <CDC_Init_FS+0x1c>)
 8015370:	4805      	ldr	r0, [pc, #20]	@ (8015388 <CDC_Init_FS+0x20>)
 8015372:	f7f9 fc87 	bl	800ec84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015376:	4905      	ldr	r1, [pc, #20]	@ (801538c <CDC_Init_FS+0x24>)
 8015378:	4803      	ldr	r0, [pc, #12]	@ (8015388 <CDC_Init_FS+0x20>)
 801537a:	f7f9 fca5 	bl	800ecc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801537e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015380:	4618      	mov	r0, r3
 8015382:	bd80      	pop	{r7, pc}
 8015384:	20001ccc 	.word	0x20001ccc
 8015388:	200011f0 	.word	0x200011f0
 801538c:	200014cc 	.word	0x200014cc

08015390 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015390:	b480      	push	{r7}
 8015392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015394:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015396:	4618      	mov	r0, r3
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80153a0:	b480      	push	{r7}
 80153a2:	b083      	sub	sp, #12
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	4603      	mov	r3, r0
 80153a8:	6039      	str	r1, [r7, #0]
 80153aa:	71fb      	strb	r3, [r7, #7]
 80153ac:	4613      	mov	r3, r2
 80153ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80153b0:	79fb      	ldrb	r3, [r7, #7]
 80153b2:	2b23      	cmp	r3, #35	@ 0x23
 80153b4:	d84a      	bhi.n	801544c <CDC_Control_FS+0xac>
 80153b6:	a201      	add	r2, pc, #4	@ (adr r2, 80153bc <CDC_Control_FS+0x1c>)
 80153b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153bc:	0801544d 	.word	0x0801544d
 80153c0:	0801544d 	.word	0x0801544d
 80153c4:	0801544d 	.word	0x0801544d
 80153c8:	0801544d 	.word	0x0801544d
 80153cc:	0801544d 	.word	0x0801544d
 80153d0:	0801544d 	.word	0x0801544d
 80153d4:	0801544d 	.word	0x0801544d
 80153d8:	0801544d 	.word	0x0801544d
 80153dc:	0801544d 	.word	0x0801544d
 80153e0:	0801544d 	.word	0x0801544d
 80153e4:	0801544d 	.word	0x0801544d
 80153e8:	0801544d 	.word	0x0801544d
 80153ec:	0801544d 	.word	0x0801544d
 80153f0:	0801544d 	.word	0x0801544d
 80153f4:	0801544d 	.word	0x0801544d
 80153f8:	0801544d 	.word	0x0801544d
 80153fc:	0801544d 	.word	0x0801544d
 8015400:	0801544d 	.word	0x0801544d
 8015404:	0801544d 	.word	0x0801544d
 8015408:	0801544d 	.word	0x0801544d
 801540c:	0801544d 	.word	0x0801544d
 8015410:	0801544d 	.word	0x0801544d
 8015414:	0801544d 	.word	0x0801544d
 8015418:	0801544d 	.word	0x0801544d
 801541c:	0801544d 	.word	0x0801544d
 8015420:	0801544d 	.word	0x0801544d
 8015424:	0801544d 	.word	0x0801544d
 8015428:	0801544d 	.word	0x0801544d
 801542c:	0801544d 	.word	0x0801544d
 8015430:	0801544d 	.word	0x0801544d
 8015434:	0801544d 	.word	0x0801544d
 8015438:	0801544d 	.word	0x0801544d
 801543c:	0801544d 	.word	0x0801544d
 8015440:	0801544d 	.word	0x0801544d
 8015444:	0801544d 	.word	0x0801544d
 8015448:	0801544d 	.word	0x0801544d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801544c:	bf00      	nop
  }

  return (USBD_OK);
 801544e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015450:	4618      	mov	r0, r3
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	4805      	ldr	r0, [pc, #20]	@ (8015480 <CDC_Receive_FS+0x24>)
 801546a:	f7f9 fc2d 	bl	800ecc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801546e:	4804      	ldr	r0, [pc, #16]	@ (8015480 <CDC_Receive_FS+0x24>)
 8015470:	f7f9 fc88 	bl	800ed84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015474:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015476:	4618      	mov	r0, r3
 8015478:	3708      	adds	r7, #8
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	200011f0 	.word	0x200011f0

08015484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b084      	sub	sp, #16
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	460b      	mov	r3, r1
 801548e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015490:	2300      	movs	r3, #0
 8015492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015494:	4b0d      	ldr	r3, [pc, #52]	@ (80154cc <CDC_Transmit_FS+0x48>)
 8015496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801549a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d001      	beq.n	80154aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80154a6:	2301      	movs	r3, #1
 80154a8:	e00b      	b.n	80154c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80154aa:	887b      	ldrh	r3, [r7, #2]
 80154ac:	461a      	mov	r2, r3
 80154ae:	6879      	ldr	r1, [r7, #4]
 80154b0:	4806      	ldr	r0, [pc, #24]	@ (80154cc <CDC_Transmit_FS+0x48>)
 80154b2:	f7f9 fbe7 	bl	800ec84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80154b6:	4805      	ldr	r0, [pc, #20]	@ (80154cc <CDC_Transmit_FS+0x48>)
 80154b8:	f7f9 fc24 	bl	800ed04 <USBD_CDC_TransmitPacket>
 80154bc:	4603      	mov	r3, r0
 80154be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80154c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	200011f0 	.word	0x200011f0

080154d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b087      	sub	sp, #28
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	4613      	mov	r3, r2
 80154dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80154de:	2300      	movs	r3, #0
 80154e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80154e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	371c      	adds	r7, #28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
	...

080154f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	4603      	mov	r3, r0
 80154fc:	6039      	str	r1, [r7, #0]
 80154fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2212      	movs	r2, #18
 8015504:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015506:	4b03      	ldr	r3, [pc, #12]	@ (8015514 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015508:	4618      	mov	r0, r3
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	200000f0 	.word	0x200000f0

08015518 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015518:	b480      	push	{r7}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	6039      	str	r1, [r7, #0]
 8015522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	2204      	movs	r2, #4
 8015528:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801552a:	4b03      	ldr	r3, [pc, #12]	@ (8015538 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801552c:	4618      	mov	r0, r3
 801552e:	370c      	adds	r7, #12
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr
 8015538:	20000104 	.word	0x20000104

0801553c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	4603      	mov	r3, r0
 8015544:	6039      	str	r1, [r7, #0]
 8015546:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015548:	79fb      	ldrb	r3, [r7, #7]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d105      	bne.n	801555a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801554e:	683a      	ldr	r2, [r7, #0]
 8015550:	4907      	ldr	r1, [pc, #28]	@ (8015570 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015552:	4808      	ldr	r0, [pc, #32]	@ (8015574 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015554:	f7fa fdfa 	bl	801014c <USBD_GetString>
 8015558:	e004      	b.n	8015564 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801555a:	683a      	ldr	r2, [r7, #0]
 801555c:	4904      	ldr	r1, [pc, #16]	@ (8015570 <USBD_CDC_ProductStrDescriptor+0x34>)
 801555e:	4805      	ldr	r0, [pc, #20]	@ (8015574 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015560:	f7fa fdf4 	bl	801014c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015564:	4b02      	ldr	r3, [pc, #8]	@ (8015570 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015566:	4618      	mov	r0, r3
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	200024cc 	.word	0x200024cc
 8015574:	08019050 	.word	0x08019050

08015578 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	4603      	mov	r3, r0
 8015580:	6039      	str	r1, [r7, #0]
 8015582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015584:	683a      	ldr	r2, [r7, #0]
 8015586:	4904      	ldr	r1, [pc, #16]	@ (8015598 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015588:	4804      	ldr	r0, [pc, #16]	@ (801559c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801558a:	f7fa fddf 	bl	801014c <USBD_GetString>
  return USBD_StrDesc;
 801558e:	4b02      	ldr	r3, [pc, #8]	@ (8015598 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015590:	4618      	mov	r0, r3
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	200024cc 	.word	0x200024cc
 801559c:	08019068 	.word	0x08019068

080155a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	4603      	mov	r3, r0
 80155a8:	6039      	str	r1, [r7, #0]
 80155aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	221a      	movs	r2, #26
 80155b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155b2:	f000 f843 	bl	801563c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80155b6:	4b02      	ldr	r3, [pc, #8]	@ (80155c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	20000108 	.word	0x20000108

080155c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	4603      	mov	r3, r0
 80155cc:	6039      	str	r1, [r7, #0]
 80155ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80155d0:	79fb      	ldrb	r3, [r7, #7]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d105      	bne.n	80155e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	4907      	ldr	r1, [pc, #28]	@ (80155f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80155da:	4808      	ldr	r0, [pc, #32]	@ (80155fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80155dc:	f7fa fdb6 	bl	801014c <USBD_GetString>
 80155e0:	e004      	b.n	80155ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80155e2:	683a      	ldr	r2, [r7, #0]
 80155e4:	4904      	ldr	r1, [pc, #16]	@ (80155f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80155e6:	4805      	ldr	r0, [pc, #20]	@ (80155fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80155e8:	f7fa fdb0 	bl	801014c <USBD_GetString>
  }
  return USBD_StrDesc;
 80155ec:	4b02      	ldr	r3, [pc, #8]	@ (80155f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	200024cc 	.word	0x200024cc
 80155fc:	0801907c 	.word	0x0801907c

08015600 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	4603      	mov	r3, r0
 8015608:	6039      	str	r1, [r7, #0]
 801560a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801560c:	79fb      	ldrb	r3, [r7, #7]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d105      	bne.n	801561e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	4907      	ldr	r1, [pc, #28]	@ (8015634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015616:	4808      	ldr	r0, [pc, #32]	@ (8015638 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015618:	f7fa fd98 	bl	801014c <USBD_GetString>
 801561c:	e004      	b.n	8015628 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801561e:	683a      	ldr	r2, [r7, #0]
 8015620:	4904      	ldr	r1, [pc, #16]	@ (8015634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015622:	4805      	ldr	r0, [pc, #20]	@ (8015638 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015624:	f7fa fd92 	bl	801014c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015628:	4b02      	ldr	r3, [pc, #8]	@ (8015634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	200024cc 	.word	0x200024cc
 8015638:	08019088 	.word	0x08019088

0801563c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015642:	4b0f      	ldr	r3, [pc, #60]	@ (8015680 <Get_SerialNum+0x44>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015648:	4b0e      	ldr	r3, [pc, #56]	@ (8015684 <Get_SerialNum+0x48>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801564e:	4b0e      	ldr	r3, [pc, #56]	@ (8015688 <Get_SerialNum+0x4c>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015654:	68fa      	ldr	r2, [r7, #12]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d009      	beq.n	8015676 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015662:	2208      	movs	r2, #8
 8015664:	4909      	ldr	r1, [pc, #36]	@ (801568c <Get_SerialNum+0x50>)
 8015666:	68f8      	ldr	r0, [r7, #12]
 8015668:	f000 f814 	bl	8015694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801566c:	2204      	movs	r2, #4
 801566e:	4908      	ldr	r1, [pc, #32]	@ (8015690 <Get_SerialNum+0x54>)
 8015670:	68b8      	ldr	r0, [r7, #8]
 8015672:	f000 f80f 	bl	8015694 <IntToUnicode>
  }
}
 8015676:	bf00      	nop
 8015678:	3710      	adds	r7, #16
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	1fff7590 	.word	0x1fff7590
 8015684:	1fff7594 	.word	0x1fff7594
 8015688:	1fff7598 	.word	0x1fff7598
 801568c:	2000010a 	.word	0x2000010a
 8015690:	2000011a 	.word	0x2000011a

08015694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015694:	b480      	push	{r7}
 8015696:	b087      	sub	sp, #28
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	4613      	mov	r3, r2
 80156a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80156a2:	2300      	movs	r3, #0
 80156a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80156a6:	2300      	movs	r3, #0
 80156a8:	75fb      	strb	r3, [r7, #23]
 80156aa:	e027      	b.n	80156fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	0f1b      	lsrs	r3, r3, #28
 80156b0:	2b09      	cmp	r3, #9
 80156b2:	d80b      	bhi.n	80156cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	0f1b      	lsrs	r3, r3, #28
 80156b8:	b2da      	uxtb	r2, r3
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4619      	mov	r1, r3
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	440b      	add	r3, r1
 80156c4:	3230      	adds	r2, #48	@ 0x30
 80156c6:	b2d2      	uxtb	r2, r2
 80156c8:	701a      	strb	r2, [r3, #0]
 80156ca:	e00a      	b.n	80156e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	0f1b      	lsrs	r3, r3, #28
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	7dfb      	ldrb	r3, [r7, #23]
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	4619      	mov	r1, r3
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	440b      	add	r3, r1
 80156dc:	3237      	adds	r2, #55	@ 0x37
 80156de:	b2d2      	uxtb	r2, r2
 80156e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	011b      	lsls	r3, r3, #4
 80156e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80156e8:	7dfb      	ldrb	r3, [r7, #23]
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	3301      	adds	r3, #1
 80156ee:	68ba      	ldr	r2, [r7, #8]
 80156f0:	4413      	add	r3, r2
 80156f2:	2200      	movs	r2, #0
 80156f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	3301      	adds	r3, #1
 80156fa:	75fb      	strb	r3, [r7, #23]
 80156fc:	7dfa      	ldrb	r2, [r7, #23]
 80156fe:	79fb      	ldrb	r3, [r7, #7]
 8015700:	429a      	cmp	r2, r3
 8015702:	d3d3      	bcc.n	80156ac <IntToUnicode+0x18>
  }
}
 8015704:	bf00      	nop
 8015706:	bf00      	nop
 8015708:	371c      	adds	r7, #28
 801570a:	46bd      	mov	sp, r7
 801570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015710:	4770      	bx	lr

08015712 <LL_AHB2_GRP1_EnableClock>:
{
 8015712:	b480      	push	{r7}
 8015714:	b085      	sub	sp, #20
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801571a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801571e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	4313      	orrs	r3, r2
 8015728:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801572a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801572e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	4013      	ands	r3, r2
 8015734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015736:	68fb      	ldr	r3, [r7, #12]
}
 8015738:	bf00      	nop
 801573a:	3714      	adds	r7, #20
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <LL_APB1_GRP1_EnableClock>:
{
 8015744:	b480      	push	{r7}
 8015746:	b085      	sub	sp, #20
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801574c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015750:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	4313      	orrs	r3, r2
 801575a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801575c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015760:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4013      	ands	r3, r2
 8015766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015768:	68fb      	ldr	r3, [r7, #12]
}
 801576a:	bf00      	nop
 801576c:	3714      	adds	r7, #20
 801576e:	46bd      	mov	sp, r7
 8015770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015774:	4770      	bx	lr
	...

08015778 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b09c      	sub	sp, #112	@ 0x70
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015780:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8015784:	2200      	movs	r2, #0
 8015786:	601a      	str	r2, [r3, #0]
 8015788:	605a      	str	r2, [r3, #4]
 801578a:	609a      	str	r2, [r3, #8]
 801578c:	60da      	str	r2, [r3, #12]
 801578e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015790:	f107 030c 	add.w	r3, r7, #12
 8015794:	2250      	movs	r2, #80	@ 0x50
 8015796:	2100      	movs	r1, #0
 8015798:	4618      	mov	r0, r3
 801579a:	f000 ffdb 	bl	8016754 <memset>
  if(pcdHandle->Instance==USB)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	4a23      	ldr	r2, [pc, #140]	@ (8015830 <HAL_PCD_MspInit+0xb8>)
 80157a4:	4293      	cmp	r3, r2
 80157a6:	d13e      	bne.n	8015826 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80157a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80157ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80157ae:	2306      	movs	r3, #6
 80157b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80157b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80157b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80157b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80157bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80157be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80157c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80157c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80157c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80157ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80157ce:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80157d0:	f107 030c 	add.w	r3, r7, #12
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f3 fe79 	bl	80094cc <HAL_RCCEx_PeriphCLKConfig>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d001      	beq.n	80157e4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80157e0:	f7ee fd9e 	bl	8004320 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80157e4:	2001      	movs	r0, #1
 80157e6:	f7ff ff94 	bl	8015712 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80157ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80157ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157f0:	2302      	movs	r3, #2
 80157f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80157f8:	2300      	movs	r3, #0
 80157fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80157fc:	230a      	movs	r3, #10
 80157fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015800:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8015804:	4619      	mov	r1, r3
 8015806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801580a:	f7ef fdc5 	bl	8005398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801580e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8015812:	f7ff ff97 	bl	8015744 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8015816:	2200      	movs	r2, #0
 8015818:	2105      	movs	r1, #5
 801581a:	2014      	movs	r0, #20
 801581c:	f7ef fb37 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015820:	2014      	movs	r0, #20
 8015822:	f7ef fb4e 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015826:	bf00      	nop
 8015828:	3770      	adds	r7, #112	@ 0x70
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop
 8015830:	40006800 	.word	0x40006800

08015834 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8015848:	4619      	mov	r1, r3
 801584a:	4610      	mov	r0, r2
 801584c:	f7f9 fb83 	bl	800ef56 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015850:	bf00      	nop
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	460b      	mov	r3, r1
 8015862:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801586a:	78fa      	ldrb	r2, [r7, #3]
 801586c:	6879      	ldr	r1, [r7, #4]
 801586e:	4613      	mov	r3, r2
 8015870:	009b      	lsls	r3, r3, #2
 8015872:	4413      	add	r3, r2
 8015874:	00db      	lsls	r3, r3, #3
 8015876:	440b      	add	r3, r1
 8015878:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	78fb      	ldrb	r3, [r7, #3]
 8015880:	4619      	mov	r1, r3
 8015882:	f7f9 fbbd 	bl	800f000 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015886:	bf00      	nop
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801588e:	b580      	push	{r7, lr}
 8015890:	b082      	sub	sp, #8
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
 8015896:	460b      	mov	r3, r1
 8015898:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80158a0:	78fa      	ldrb	r2, [r7, #3]
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	4613      	mov	r3, r2
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	4413      	add	r3, r2
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	440b      	add	r3, r1
 80158ae:	3324      	adds	r3, #36	@ 0x24
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	78fb      	ldrb	r3, [r7, #3]
 80158b4:	4619      	mov	r1, r3
 80158b6:	f7f9 fc56 	bl	800f166 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80158ba:	bf00      	nop
 80158bc:	3708      	adds	r7, #8
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}

080158c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158c2:	b580      	push	{r7, lr}
 80158c4:	b082      	sub	sp, #8
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f9 fd90 	bl	800f3f6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80158d6:	bf00      	nop
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b084      	sub	sp, #16
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80158e6:	2301      	movs	r3, #1
 80158e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	795b      	ldrb	r3, [r3, #5]
 80158ee:	2b02      	cmp	r3, #2
 80158f0:	d001      	beq.n	80158f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80158f2:	f7ee fd15 	bl	8004320 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80158fc:	7bfa      	ldrb	r2, [r7, #15]
 80158fe:	4611      	mov	r1, r2
 8015900:	4618      	mov	r0, r3
 8015902:	f7f9 fd34 	bl	800f36e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801590c:	4618      	mov	r0, r3
 801590e:	f7f9 fcdc 	bl	800f2ca <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015912:	bf00      	nop
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
	...

0801591c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801592a:	4618      	mov	r0, r3
 801592c:	f7f9 fd2f 	bl	800f38e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	7a5b      	ldrb	r3, [r3, #9]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d005      	beq.n	8015944 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015938:	4b04      	ldr	r3, [pc, #16]	@ (801594c <HAL_PCD_SuspendCallback+0x30>)
 801593a:	691b      	ldr	r3, [r3, #16]
 801593c:	4a03      	ldr	r2, [pc, #12]	@ (801594c <HAL_PCD_SuspendCallback+0x30>)
 801593e:	f043 0306 	orr.w	r3, r3, #6
 8015942:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	e000ed00 	.word	0xe000ed00

08015950 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	7a5b      	ldrb	r3, [r3, #9]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d007      	beq.n	8015970 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015960:	4b08      	ldr	r3, [pc, #32]	@ (8015984 <HAL_PCD_ResumeCallback+0x34>)
 8015962:	691b      	ldr	r3, [r3, #16]
 8015964:	4a07      	ldr	r2, [pc, #28]	@ (8015984 <HAL_PCD_ResumeCallback+0x34>)
 8015966:	f023 0306 	bic.w	r3, r3, #6
 801596a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801596c:	f000 f9fa 	bl	8015d64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015976:	4618      	mov	r0, r3
 8015978:	f7f9 fd25 	bl	800f3c6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801597c:	bf00      	nop
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	e000ed00 	.word	0xe000ed00

08015988 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015990:	4a2c      	ldr	r2, [pc, #176]	@ (8015a44 <USBD_LL_Init+0xbc>)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	4a2a      	ldr	r2, [pc, #168]	@ (8015a44 <USBD_LL_Init+0xbc>)
 801599c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80159a0:	f7f2 fa7c 	bl	8007e9c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80159a4:	4b27      	ldr	r3, [pc, #156]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159a6:	4a28      	ldr	r2, [pc, #160]	@ (8015a48 <USBD_LL_Init+0xc0>)
 80159a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80159aa:	4b26      	ldr	r3, [pc, #152]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159ac:	2208      	movs	r2, #8
 80159ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80159b0:	4b24      	ldr	r3, [pc, #144]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159b2:	2202      	movs	r2, #2
 80159b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159b6:	4b23      	ldr	r3, [pc, #140]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159b8:	2202      	movs	r2, #2
 80159ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80159bc:	4b21      	ldr	r3, [pc, #132]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159be:	2200      	movs	r2, #0
 80159c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80159c2:	4b20      	ldr	r3, [pc, #128]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159c4:	2200      	movs	r2, #0
 80159c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80159c8:	4b1e      	ldr	r3, [pc, #120]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159ca:	2200      	movs	r2, #0
 80159cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80159ce:	4b1d      	ldr	r3, [pc, #116]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159d0:	2200      	movs	r2, #0
 80159d2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80159d4:	481b      	ldr	r0, [pc, #108]	@ (8015a44 <USBD_LL_Init+0xbc>)
 80159d6:	f7f0 fd0f 	bl	80063f8 <HAL_PCD_Init>
 80159da:	4603      	mov	r3, r0
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d001      	beq.n	80159e4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80159e0:	f7ee fc9e 	bl	8004320 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80159ea:	2318      	movs	r3, #24
 80159ec:	2200      	movs	r2, #0
 80159ee:	2100      	movs	r1, #0
 80159f0:	f7f2 f9c8 	bl	8007d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80159fa:	2358      	movs	r3, #88	@ 0x58
 80159fc:	2200      	movs	r2, #0
 80159fe:	2180      	movs	r1, #128	@ 0x80
 8015a00:	f7f2 f9c0 	bl	8007d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015a0a:	23c0      	movs	r3, #192	@ 0xc0
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	2181      	movs	r1, #129	@ 0x81
 8015a10:	f7f2 f9b8 	bl	8007d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015a1a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015a1e:	2200      	movs	r2, #0
 8015a20:	2101      	movs	r1, #1
 8015a22:	f7f2 f9af 	bl	8007d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015a30:	2200      	movs	r2, #0
 8015a32:	2182      	movs	r1, #130	@ 0x82
 8015a34:	f7f2 f9a6 	bl	8007d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015a38:	2300      	movs	r3, #0
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3708      	adds	r7, #8
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	200026cc 	.word	0x200026cc
 8015a48:	40006800 	.word	0x40006800

08015a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b084      	sub	sp, #16
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a54:	2300      	movs	r3, #0
 8015a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7f0 fd96 	bl	8006594 <HAL_PCD_Start>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a6c:	7bfb      	ldrb	r3, [r7, #15]
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f000 f97e 	bl	8015d70 <USBD_Get_USB_Status>
 8015a74:	4603      	mov	r3, r0
 8015a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	3710      	adds	r7, #16
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bd80      	pop	{r7, pc}

08015a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a82:	b580      	push	{r7, lr}
 8015a84:	b084      	sub	sp, #16
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
 8015a8a:	4608      	mov	r0, r1
 8015a8c:	4611      	mov	r1, r2
 8015a8e:	461a      	mov	r2, r3
 8015a90:	4603      	mov	r3, r0
 8015a92:	70fb      	strb	r3, [r7, #3]
 8015a94:	460b      	mov	r3, r1
 8015a96:	70bb      	strb	r3, [r7, #2]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015aaa:	78bb      	ldrb	r3, [r7, #2]
 8015aac:	883a      	ldrh	r2, [r7, #0]
 8015aae:	78f9      	ldrb	r1, [r7, #3]
 8015ab0:	f7f0 fedd 	bl	800686e <HAL_PCD_EP_Open>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ab8:	7bfb      	ldrb	r3, [r7, #15]
 8015aba:	4618      	mov	r0, r3
 8015abc:	f000 f958 	bl	8015d70 <USBD_Get_USB_Status>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}

08015ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ace:	b580      	push	{r7, lr}
 8015ad0:	b084      	sub	sp, #16
 8015ad2:	af00      	add	r7, sp, #0
 8015ad4:	6078      	str	r0, [r7, #4]
 8015ad6:	460b      	mov	r3, r1
 8015ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ada:	2300      	movs	r3, #0
 8015adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015ae8:	78fa      	ldrb	r2, [r7, #3]
 8015aea:	4611      	mov	r1, r2
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7f0 ff1b 	bl	8006928 <HAL_PCD_EP_Close>
 8015af2:	4603      	mov	r3, r0
 8015af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015af6:	7bfb      	ldrb	r3, [r7, #15]
 8015af8:	4618      	mov	r0, r3
 8015afa:	f000 f939 	bl	8015d70 <USBD_Get_USB_Status>
 8015afe:	4603      	mov	r3, r0
 8015b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3710      	adds	r7, #16
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
 8015b14:	460b      	mov	r3, r1
 8015b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b26:	78fa      	ldrb	r2, [r7, #3]
 8015b28:	4611      	mov	r1, r2
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7f0 ffc4 	bl	8006ab8 <HAL_PCD_EP_SetStall>
 8015b30:	4603      	mov	r3, r0
 8015b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f000 f91a 	bl	8015d70 <USBD_Get_USB_Status>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3710      	adds	r7, #16
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b084      	sub	sp, #16
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	6078      	str	r0, [r7, #4]
 8015b52:	460b      	mov	r3, r1
 8015b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b56:	2300      	movs	r3, #0
 8015b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b64:	78fa      	ldrb	r2, [r7, #3]
 8015b66:	4611      	mov	r1, r2
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7f0 fff7 	bl	8006b5c <HAL_PCD_EP_ClrStall>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b72:	7bfb      	ldrb	r3, [r7, #15]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f000 f8fb 	bl	8015d70 <USBD_Get_USB_Status>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3710      	adds	r7, #16
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b085      	sub	sp, #20
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	460b      	mov	r3, r1
 8015b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	da0b      	bge.n	8015bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ba4:	78fb      	ldrb	r3, [r7, #3]
 8015ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015baa:	68f9      	ldr	r1, [r7, #12]
 8015bac:	4613      	mov	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4413      	add	r3, r2
 8015bb2:	00db      	lsls	r3, r3, #3
 8015bb4:	440b      	add	r3, r1
 8015bb6:	3312      	adds	r3, #18
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	e00b      	b.n	8015bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015bbc:	78fb      	ldrb	r3, [r7, #3]
 8015bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015bc2:	68f9      	ldr	r1, [r7, #12]
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	009b      	lsls	r3, r3, #2
 8015bc8:	4413      	add	r3, r2
 8015bca:	00db      	lsls	r3, r3, #3
 8015bcc:	440b      	add	r3, r1
 8015bce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3714      	adds	r7, #20
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr

08015be0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bec:	2300      	movs	r3, #0
 8015bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bfa:	78fa      	ldrb	r2, [r7, #3]
 8015bfc:	4611      	mov	r1, r2
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7f0 fe11 	bl	8006826 <HAL_PCD_SetAddress>
 8015c04:	4603      	mov	r3, r0
 8015c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c08:	7bfb      	ldrb	r3, [r7, #15]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f000 f8b0 	bl	8015d70 <USBD_Get_USB_Status>
 8015c10:	4603      	mov	r3, r0
 8015c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b086      	sub	sp, #24
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	60f8      	str	r0, [r7, #12]
 8015c26:	607a      	str	r2, [r7, #4]
 8015c28:	603b      	str	r3, [r7, #0]
 8015c2a:	460b      	mov	r3, r1
 8015c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c32:	2300      	movs	r3, #0
 8015c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015c3c:	7af9      	ldrb	r1, [r7, #11]
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	f7f0 ff02 	bl	8006a4a <HAL_PCD_EP_Transmit>
 8015c46:	4603      	mov	r3, r0
 8015c48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c4a:	7dfb      	ldrb	r3, [r7, #23]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f000 f88f 	bl	8015d70 <USBD_Get_USB_Status>
 8015c52:	4603      	mov	r3, r0
 8015c54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3718      	adds	r7, #24
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b086      	sub	sp, #24
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	607a      	str	r2, [r7, #4]
 8015c6a:	603b      	str	r3, [r7, #0]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c70:	2300      	movs	r3, #0
 8015c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c74:	2300      	movs	r3, #0
 8015c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015c7e:	7af9      	ldrb	r1, [r7, #11]
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	f7f0 fe98 	bl	80069b8 <HAL_PCD_EP_Receive>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c8c:	7dfb      	ldrb	r3, [r7, #23]
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f000 f86e 	bl	8015d70 <USBD_Get_USB_Status>
 8015c94:	4603      	mov	r3, r0
 8015c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3718      	adds	r7, #24
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}

08015ca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ca2:	b580      	push	{r7, lr}
 8015ca4:	b082      	sub	sp, #8
 8015ca6:	af00      	add	r7, sp, #0
 8015ca8:	6078      	str	r0, [r7, #4]
 8015caa:	460b      	mov	r3, r1
 8015cac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015cb4:	78fa      	ldrb	r2, [r7, #3]
 8015cb6:	4611      	mov	r1, r2
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7f0 feae 	bl	8006a1a <HAL_PCD_EP_GetRxCount>
 8015cbe:	4603      	mov	r3, r0
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015cd4:	78fb      	ldrb	r3, [r7, #3]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d002      	beq.n	8015ce0 <HAL_PCDEx_LPM_Callback+0x18>
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d013      	beq.n	8015d06 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015cde:	e023      	b.n	8015d28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7a5b      	ldrb	r3, [r3, #9]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d007      	beq.n	8015cf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015ce8:	f000 f83c 	bl	8015d64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015cec:	4b10      	ldr	r3, [pc, #64]	@ (8015d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015cee:	691b      	ldr	r3, [r3, #16]
 8015cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8015d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015cf2:	f023 0306 	bic.w	r3, r3, #6
 8015cf6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7f9 fb61 	bl	800f3c6 <USBD_LL_Resume>
    break;
 8015d04:	e010      	b.n	8015d28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7f9 fb3e 	bl	800f38e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	7a5b      	ldrb	r3, [r3, #9]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d005      	beq.n	8015d26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d1a:	4b05      	ldr	r3, [pc, #20]	@ (8015d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	4a04      	ldr	r2, [pc, #16]	@ (8015d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8015d20:	f043 0306 	orr.w	r3, r3, #6
 8015d24:	6113      	str	r3, [r2, #16]
    break;
 8015d26:	bf00      	nop
}
 8015d28:	bf00      	nop
 8015d2a:	3708      	adds	r7, #8
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}
 8015d30:	e000ed00 	.word	0xe000ed00

08015d34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015d3c:	4b03      	ldr	r3, [pc, #12]	@ (8015d4c <USBD_static_malloc+0x18>)
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	370c      	adds	r7, #12
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop
 8015d4c:	200029a8 	.word	0x200029a8

08015d50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015d50:	b480      	push	{r7}
 8015d52:	b083      	sub	sp, #12
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015d58:	bf00      	nop
 8015d5a:	370c      	adds	r7, #12
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d62:	4770      	bx	lr

08015d64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015d68:	f7ee f80c 	bl	8003d84 <SystemClock_Config>
}
 8015d6c:	bf00      	nop
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	4603      	mov	r3, r0
 8015d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d7e:	79fb      	ldrb	r3, [r7, #7]
 8015d80:	2b03      	cmp	r3, #3
 8015d82:	d817      	bhi.n	8015db4 <USBD_Get_USB_Status+0x44>
 8015d84:	a201      	add	r2, pc, #4	@ (adr r2, 8015d8c <USBD_Get_USB_Status+0x1c>)
 8015d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d8a:	bf00      	nop
 8015d8c:	08015d9d 	.word	0x08015d9d
 8015d90:	08015da3 	.word	0x08015da3
 8015d94:	08015da9 	.word	0x08015da9
 8015d98:	08015daf 	.word	0x08015daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8015da0:	e00b      	b.n	8015dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015da2:	2303      	movs	r3, #3
 8015da4:	73fb      	strb	r3, [r7, #15]
    break;
 8015da6:	e008      	b.n	8015dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015da8:	2301      	movs	r3, #1
 8015daa:	73fb      	strb	r3, [r7, #15]
    break;
 8015dac:	e005      	b.n	8015dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015dae:	2303      	movs	r3, #3
 8015db0:	73fb      	strb	r3, [r7, #15]
    break;
 8015db2:	e002      	b.n	8015dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015db4:	2303      	movs	r3, #3
 8015db6:	73fb      	strb	r3, [r7, #15]
    break;
 8015db8:	bf00      	nop
  }
  return usb_status;
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3714      	adds	r7, #20
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015dc8:	b480      	push	{r7}
 8015dca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015dcc:	4b05      	ldr	r3, [pc, #20]	@ (8015de4 <UTIL_LPM_Init+0x1c>)
 8015dce:	2200      	movs	r2, #0
 8015dd0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015dd2:	4b05      	ldr	r3, [pc, #20]	@ (8015de8 <UTIL_LPM_Init+0x20>)
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015dd8:	bf00      	nop
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop
 8015de4:	20002bc8 	.word	0x20002bc8
 8015de8:	20002bcc 	.word	0x20002bcc

08015dec <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015dec:	b480      	push	{r7}
 8015dee:	b087      	sub	sp, #28
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	460b      	mov	r3, r1
 8015df6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015df8:	f3ef 8310 	mrs	r3, PRIMASK
 8015dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8015dfe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e02:	b672      	cpsid	i
}
 8015e04:	bf00      	nop
  
  switch(state)
 8015e06:	78fb      	ldrb	r3, [r7, #3]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d008      	beq.n	8015e1e <UTIL_LPM_SetOffMode+0x32>
 8015e0c:	2b01      	cmp	r3, #1
 8015e0e:	d10e      	bne.n	8015e2e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015e10:	4b0d      	ldr	r3, [pc, #52]	@ (8015e48 <UTIL_LPM_SetOffMode+0x5c>)
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	4313      	orrs	r3, r2
 8015e18:	4a0b      	ldr	r2, [pc, #44]	@ (8015e48 <UTIL_LPM_SetOffMode+0x5c>)
 8015e1a:	6013      	str	r3, [r2, #0]
      break;
 8015e1c:	e008      	b.n	8015e30 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	43da      	mvns	r2, r3
 8015e22:	4b09      	ldr	r3, [pc, #36]	@ (8015e48 <UTIL_LPM_SetOffMode+0x5c>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4013      	ands	r3, r2
 8015e28:	4a07      	ldr	r2, [pc, #28]	@ (8015e48 <UTIL_LPM_SetOffMode+0x5c>)
 8015e2a:	6013      	str	r3, [r2, #0]
      break;
 8015e2c:	e000      	b.n	8015e30 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015e2e:	bf00      	nop
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	f383 8810 	msr	PRIMASK, r3
}
 8015e3a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015e3c:	bf00      	nop
 8015e3e:	371c      	adds	r7, #28
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr
 8015e48:	20002bcc 	.word	0x20002bcc

08015e4c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b090      	sub	sp, #64	@ 0x40
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8015e54:	4b73      	ldr	r3, [pc, #460]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8015e5a:	4b72      	ldr	r3, [pc, #456]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	4013      	ands	r3, r2
 8015e62:	4a70      	ldr	r2, [pc, #448]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015e64:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8015e66:	4b70      	ldr	r3, [pc, #448]	@ (8016028 <UTIL_SEQ_Run+0x1dc>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015e6c:	4b6f      	ldr	r3, [pc, #444]	@ (801602c <UTIL_SEQ_Run+0x1e0>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015e72:	4b6f      	ldr	r3, [pc, #444]	@ (8016030 <UTIL_SEQ_Run+0x1e4>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8015e78:	4b6e      	ldr	r3, [pc, #440]	@ (8016034 <UTIL_SEQ_Run+0x1e8>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015e7e:	e08d      	b.n	8015f9c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8015e80:	2300      	movs	r3, #0
 8015e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015e84:	e002      	b.n	8015e8c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8015e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e88:	3301      	adds	r3, #1
 8015e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e96:	401a      	ands	r2, r3
 8015e98:	4b62      	ldr	r3, [pc, #392]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	4013      	ands	r3, r2
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d0f1      	beq.n	8015e86 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8015ea2:	4a65      	ldr	r2, [pc, #404]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eac:	401a      	ands	r2, r3
 8015eae:	4b5d      	ldr	r3, [pc, #372]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	4013      	ands	r3, r2
 8015eb4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8015eb6:	4a60      	ldr	r2, [pc, #384]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015eba:	00db      	lsls	r3, r3, #3
 8015ebc:	4413      	add	r3, r2
 8015ebe:	685a      	ldr	r2, [r3, #4]
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec2:	4013      	ands	r3, r2
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d106      	bne.n	8015ed6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015ec8:	4a5b      	ldr	r2, [pc, #364]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ecc:	00db      	lsls	r3, r3, #3
 8015ece:	4413      	add	r3, r2
 8015ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8015ed6:	4a58      	ldr	r2, [pc, #352]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015eda:	00db      	lsls	r3, r3, #3
 8015edc:	4413      	add	r3, r2
 8015ede:	685a      	ldr	r2, [r3, #4]
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee2:	4013      	ands	r3, r2
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f000 f9b3 	bl	8016250 <SEQ_BitPosition>
 8015eea:	4603      	mov	r3, r0
 8015eec:	461a      	mov	r2, r3
 8015eee:	4b53      	ldr	r3, [pc, #332]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015ef0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8015ef2:	4a51      	ldr	r2, [pc, #324]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ef6:	00db      	lsls	r3, r3, #3
 8015ef8:	4413      	add	r3, r2
 8015efa:	685a      	ldr	r2, [r3, #4]
 8015efc:	4b4f      	ldr	r3, [pc, #316]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	2101      	movs	r1, #1
 8015f02:	fa01 f303 	lsl.w	r3, r1, r3
 8015f06:	43db      	mvns	r3, r3
 8015f08:	401a      	ands	r2, r3
 8015f0a:	494b      	ldr	r1, [pc, #300]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	440b      	add	r3, r1
 8015f12:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f14:	f3ef 8310 	mrs	r3, PRIMASK
 8015f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8015f1a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015f1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f1e:	b672      	cpsid	i
}
 8015f20:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8015f22:	4b46      	ldr	r3, [pc, #280]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2201      	movs	r2, #1
 8015f28:	fa02 f303 	lsl.w	r3, r2, r3
 8015f2c:	43da      	mvns	r2, r3
 8015f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8016028 <UTIL_SEQ_Run+0x1dc>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4013      	ands	r3, r2
 8015f34:	4a3c      	ldr	r2, [pc, #240]	@ (8016028 <UTIL_SEQ_Run+0x1dc>)
 8015f36:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015f38:	2302      	movs	r3, #2
 8015f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015f3c:	e013      	b.n	8015f66 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f40:	3b01      	subs	r3, #1
 8015f42:	4a3d      	ldr	r2, [pc, #244]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015f44:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8015f48:	4b3c      	ldr	r3, [pc, #240]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015f52:	43da      	mvns	r2, r3
 8015f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f56:	3b01      	subs	r3, #1
 8015f58:	400a      	ands	r2, r1
 8015f5a:	4937      	ldr	r1, [pc, #220]	@ (8016038 <UTIL_SEQ_Run+0x1ec>)
 8015f5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f62:	3b01      	subs	r3, #1
 8015f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d1e8      	bne.n	8015f3e <UTIL_SEQ_Run+0xf2>
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	f383 8810 	msr	PRIMASK, r3
}
 8015f76:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8015f78:	4b30      	ldr	r3, [pc, #192]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	4a30      	ldr	r2, [pc, #192]	@ (8016040 <UTIL_SEQ_Run+0x1f4>)
 8015f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f82:	4798      	blx	r3

    local_taskset = TaskSet;
 8015f84:	4b28      	ldr	r3, [pc, #160]	@ (8016028 <UTIL_SEQ_Run+0x1dc>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8015f8a:	4b28      	ldr	r3, [pc, #160]	@ (801602c <UTIL_SEQ_Run+0x1e0>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8015f90:	4b27      	ldr	r3, [pc, #156]	@ (8016030 <UTIL_SEQ_Run+0x1e4>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8015f96:	4b27      	ldr	r3, [pc, #156]	@ (8016034 <UTIL_SEQ_Run+0x1e8>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa0:	401a      	ands	r2, r3
 8015fa2:	4b20      	ldr	r3, [pc, #128]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d005      	beq.n	8015fb8 <UTIL_SEQ_Run+0x16c>
 8015fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb0:	4013      	ands	r3, r2
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	f43f af64 	beq.w	8015e80 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015fb8:	4b20      	ldr	r3, [pc, #128]	@ (801603c <UTIL_SEQ_Run+0x1f0>)
 8015fba:	f04f 32ff 	mov.w	r2, #4294967295
 8015fbe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015fc0:	f000 f938 	bl	8016234 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8015fca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fce:	b672      	cpsid	i
}
 8015fd0:	bf00      	nop
  local_taskset = TaskSet;
 8015fd2:	4b15      	ldr	r3, [pc, #84]	@ (8016028 <UTIL_SEQ_Run+0x1dc>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015fd8:	4b14      	ldr	r3, [pc, #80]	@ (801602c <UTIL_SEQ_Run+0x1e0>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015fde:	4b14      	ldr	r3, [pc, #80]	@ (8016030 <UTIL_SEQ_Run+0x1e4>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8015fe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fe8:	401a      	ands	r2, r3
 8015fea:	4b0e      	ldr	r3, [pc, #56]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	4013      	ands	r3, r2
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d107      	bne.n	8016004 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8015ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8016034 <UTIL_SEQ_Run+0x1e8>)
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d101      	bne.n	8016004 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016000:	f7ec fcb7 	bl	8002972 <UTIL_SEQ_Idle>
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	f383 8810 	msr	PRIMASK, r3
}
 801600e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016010:	f000 f917 	bl	8016242 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016014:	4a03      	ldr	r2, [pc, #12]	@ (8016024 <UTIL_SEQ_Run+0x1d8>)
 8016016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016018:	6013      	str	r3, [r2, #0]

  return;
 801601a:	bf00      	nop
}
 801601c:	3740      	adds	r7, #64	@ 0x40
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	20000128 	.word	0x20000128
 8016028:	20002bd0 	.word	0x20002bd0
 801602c:	20002bd4 	.word	0x20002bd4
 8016030:	20000124 	.word	0x20000124
 8016034:	20002bd8 	.word	0x20002bd8
 8016038:	20002c60 	.word	0x20002c60
 801603c:	20002bdc 	.word	0x20002bdc
 8016040:	20002be0 	.word	0x20002be0

08016044 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b088      	sub	sp, #32
 8016048:	af00      	add	r7, sp, #0
 801604a:	60f8      	str	r0, [r7, #12]
 801604c:	60b9      	str	r1, [r7, #8]
 801604e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016050:	f3ef 8310 	mrs	r3, PRIMASK
 8016054:	617b      	str	r3, [r7, #20]
  return(result);
 8016056:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801605a:	b672      	cpsid	i
}
 801605c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f000 f8f6 	bl	8016250 <SEQ_BitPosition>
 8016064:	4603      	mov	r3, r0
 8016066:	4619      	mov	r1, r3
 8016068:	4a06      	ldr	r2, [pc, #24]	@ (8016084 <UTIL_SEQ_RegTask+0x40>)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	f383 8810 	msr	PRIMASK, r3
}
 801607a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801607c:	bf00      	nop
}
 801607e:	3720      	adds	r7, #32
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	20002be0 	.word	0x20002be0

08016088 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016088:	b480      	push	{r7}
 801608a:	b087      	sub	sp, #28
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016092:	f3ef 8310 	mrs	r3, PRIMASK
 8016096:	60fb      	str	r3, [r7, #12]
  return(result);
 8016098:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801609a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801609c:	b672      	cpsid	i
}
 801609e:	bf00      	nop

  TaskSet |= TaskId_bm;
 80160a0:	4b0d      	ldr	r3, [pc, #52]	@ (80160d8 <UTIL_SEQ_SetTask+0x50>)
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	4313      	orrs	r3, r2
 80160a8:	4a0b      	ldr	r2, [pc, #44]	@ (80160d8 <UTIL_SEQ_SetTask+0x50>)
 80160aa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80160ac:	4a0b      	ldr	r2, [pc, #44]	@ (80160dc <UTIL_SEQ_SetTask+0x54>)
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	431a      	orrs	r2, r3
 80160b8:	4908      	ldr	r1, [pc, #32]	@ (80160dc <UTIL_SEQ_SetTask+0x54>)
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	f383 8810 	msr	PRIMASK, r3
}
 80160ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80160cc:	bf00      	nop
}
 80160ce:	371c      	adds	r7, #28
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	20002bd0 	.word	0x20002bd0
 80160dc:	20002c60 	.word	0x20002c60

080160e0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80160e0:	b480      	push	{r7}
 80160e2:	b087      	sub	sp, #28
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160e8:	f3ef 8310 	mrs	r3, PRIMASK
 80160ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80160ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80160f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80160f2:	b672      	cpsid	i
}
 80160f4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	43da      	mvns	r2, r3
 80160fa:	4b08      	ldr	r3, [pc, #32]	@ (801611c <UTIL_SEQ_PauseTask+0x3c>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	4013      	ands	r3, r2
 8016100:	4a06      	ldr	r2, [pc, #24]	@ (801611c <UTIL_SEQ_PauseTask+0x3c>)
 8016102:	6013      	str	r3, [r2, #0]
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	f383 8810 	msr	PRIMASK, r3
}
 801610e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016110:	bf00      	nop
}
 8016112:	371c      	adds	r7, #28
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr
 801611c:	20000124 	.word	0x20000124

08016120 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016120:	b480      	push	{r7}
 8016122:	b087      	sub	sp, #28
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016128:	f3ef 8310 	mrs	r3, PRIMASK
 801612c:	60fb      	str	r3, [r7, #12]
  return(result);
 801612e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016132:	b672      	cpsid	i
}
 8016134:	bf00      	nop

  TaskMask |= TaskId_bm;
 8016136:	4b09      	ldr	r3, [pc, #36]	@ (801615c <UTIL_SEQ_ResumeTask+0x3c>)
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	4313      	orrs	r3, r2
 801613e:	4a07      	ldr	r2, [pc, #28]	@ (801615c <UTIL_SEQ_ResumeTask+0x3c>)
 8016140:	6013      	str	r3, [r2, #0]
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	f383 8810 	msr	PRIMASK, r3
}
 801614c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801614e:	bf00      	nop
}
 8016150:	371c      	adds	r7, #28
 8016152:	46bd      	mov	sp, r7
 8016154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	20000124 	.word	0x20000124

08016160 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016160:	b480      	push	{r7}
 8016162:	b087      	sub	sp, #28
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016168:	f3ef 8310 	mrs	r3, PRIMASK
 801616c:	60fb      	str	r3, [r7, #12]
  return(result);
 801616e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016170:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016172:	b672      	cpsid	i
}
 8016174:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016176:	4b09      	ldr	r3, [pc, #36]	@ (801619c <UTIL_SEQ_SetEvt+0x3c>)
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4313      	orrs	r3, r2
 801617e:	4a07      	ldr	r2, [pc, #28]	@ (801619c <UTIL_SEQ_SetEvt+0x3c>)
 8016180:	6013      	str	r3, [r2, #0]
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	f383 8810 	msr	PRIMASK, r3
}
 801618c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801618e:	bf00      	nop
}
 8016190:	371c      	adds	r7, #28
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop
 801619c:	20002bd4 	.word	0x20002bd4

080161a0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b088      	sub	sp, #32
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80161a8:	4b1f      	ldr	r3, [pc, #124]	@ (8016228 <UTIL_SEQ_WaitEvt+0x88>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80161ae:	4b1e      	ldr	r3, [pc, #120]	@ (8016228 <UTIL_SEQ_WaitEvt+0x88>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161b6:	d102      	bne.n	80161be <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80161b8:	2300      	movs	r3, #0
 80161ba:	61fb      	str	r3, [r7, #28]
 80161bc:	e005      	b.n	80161ca <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80161be:	4b1a      	ldr	r3, [pc, #104]	@ (8016228 <UTIL_SEQ_WaitEvt+0x88>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2201      	movs	r2, #1
 80161c4:	fa02 f303 	lsl.w	r3, r2, r3
 80161c8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80161ca:	4b18      	ldr	r3, [pc, #96]	@ (801622c <UTIL_SEQ_WaitEvt+0x8c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80161d0:	4a16      	ldr	r2, [pc, #88]	@ (801622c <UTIL_SEQ_WaitEvt+0x8c>)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80161d6:	e003      	b.n	80161e0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80161d8:	6879      	ldr	r1, [r7, #4]
 80161da:	69f8      	ldr	r0, [r7, #28]
 80161dc:	f7ec fbd0 	bl	8002980 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80161e0:	4b13      	ldr	r3, [pc, #76]	@ (8016230 <UTIL_SEQ_WaitEvt+0x90>)
 80161e2:	681a      	ldr	r2, [r3, #0]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	4013      	ands	r3, r2
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d0f5      	beq.n	80161d8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80161ec:	4a0e      	ldr	r2, [pc, #56]	@ (8016228 <UTIL_SEQ_WaitEvt+0x88>)
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161f2:	f3ef 8310 	mrs	r3, PRIMASK
 80161f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80161f8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80161fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80161fc:	b672      	cpsid	i
}
 80161fe:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	43da      	mvns	r2, r3
 8016204:	4b0a      	ldr	r3, [pc, #40]	@ (8016230 <UTIL_SEQ_WaitEvt+0x90>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4013      	ands	r3, r2
 801620a:	4a09      	ldr	r2, [pc, #36]	@ (8016230 <UTIL_SEQ_WaitEvt+0x90>)
 801620c:	6013      	str	r3, [r2, #0]
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	f383 8810 	msr	PRIMASK, r3
}
 8016218:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801621a:	4a04      	ldr	r2, [pc, #16]	@ (801622c <UTIL_SEQ_WaitEvt+0x8c>)
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	6013      	str	r3, [r2, #0]
  return;
 8016220:	bf00      	nop
}
 8016222:	3720      	adds	r7, #32
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}
 8016228:	20002bdc 	.word	0x20002bdc
 801622c:	20002bd8 	.word	0x20002bd8
 8016230:	20002bd4 	.word	0x20002bd4

08016234 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016234:	b480      	push	{r7}
 8016236:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016238:	bf00      	nop
}
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr

08016242 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016242:	b480      	push	{r7}
 8016244:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016246:	bf00      	nop
}
 8016248:	46bd      	mov	sp, r7
 801624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624e:	4770      	bx	lr

08016250 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016250:	b480      	push	{r7}
 8016252:	b085      	sub	sp, #20
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016258:	2300      	movs	r3, #0
 801625a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016266:	d204      	bcs.n	8016272 <SEQ_BitPosition+0x22>
 8016268:	2310      	movs	r3, #16
 801626a:	73fb      	strb	r3, [r7, #15]
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	041b      	lsls	r3, r3, #16
 8016270:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016278:	d205      	bcs.n	8016286 <SEQ_BitPosition+0x36>
 801627a:	7bfb      	ldrb	r3, [r7, #15]
 801627c:	3308      	adds	r3, #8
 801627e:	73fb      	strb	r3, [r7, #15]
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	021b      	lsls	r3, r3, #8
 8016284:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801628c:	d205      	bcs.n	801629a <SEQ_BitPosition+0x4a>
 801628e:	7bfb      	ldrb	r3, [r7, #15]
 8016290:	3304      	adds	r3, #4
 8016292:	73fb      	strb	r3, [r7, #15]
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	011b      	lsls	r3, r3, #4
 8016298:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	0f1b      	lsrs	r3, r3, #28
 801629e:	4a07      	ldr	r2, [pc, #28]	@ (80162bc <SEQ_BitPosition+0x6c>)
 80162a0:	5cd2      	ldrb	r2, [r2, r3]
 80162a2:	7bfb      	ldrb	r3, [r7, #15]
 80162a4:	4413      	add	r3, r2
 80162a6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80162a8:	7bfb      	ldrb	r3, [r7, #15]
 80162aa:	f1c3 031f 	rsb	r3, r3, #31
 80162ae:	b2db      	uxtb	r3, r3
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr
 80162bc:	080193a4 	.word	0x080193a4

080162c0 <std>:
 80162c0:	2300      	movs	r3, #0
 80162c2:	b510      	push	{r4, lr}
 80162c4:	4604      	mov	r4, r0
 80162c6:	e9c0 3300 	strd	r3, r3, [r0]
 80162ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162ce:	6083      	str	r3, [r0, #8]
 80162d0:	8181      	strh	r1, [r0, #12]
 80162d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80162d4:	81c2      	strh	r2, [r0, #14]
 80162d6:	6183      	str	r3, [r0, #24]
 80162d8:	4619      	mov	r1, r3
 80162da:	2208      	movs	r2, #8
 80162dc:	305c      	adds	r0, #92	@ 0x5c
 80162de:	f000 fa39 	bl	8016754 <memset>
 80162e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016318 <std+0x58>)
 80162e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80162e6:	4b0d      	ldr	r3, [pc, #52]	@ (801631c <std+0x5c>)
 80162e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80162ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016320 <std+0x60>)
 80162ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80162ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016324 <std+0x64>)
 80162f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80162f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016328 <std+0x68>)
 80162f4:	6224      	str	r4, [r4, #32]
 80162f6:	429c      	cmp	r4, r3
 80162f8:	d006      	beq.n	8016308 <std+0x48>
 80162fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80162fe:	4294      	cmp	r4, r2
 8016300:	d002      	beq.n	8016308 <std+0x48>
 8016302:	33d0      	adds	r3, #208	@ 0xd0
 8016304:	429c      	cmp	r4, r3
 8016306:	d105      	bne.n	8016314 <std+0x54>
 8016308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016310:	f000 bac0 	b.w	8016894 <__retarget_lock_init_recursive>
 8016314:	bd10      	pop	{r4, pc}
 8016316:	bf00      	nop
 8016318:	08016535 	.word	0x08016535
 801631c:	08016557 	.word	0x08016557
 8016320:	0801658f 	.word	0x0801658f
 8016324:	080165b3 	.word	0x080165b3
 8016328:	20002c70 	.word	0x20002c70

0801632c <stdio_exit_handler>:
 801632c:	4a02      	ldr	r2, [pc, #8]	@ (8016338 <stdio_exit_handler+0xc>)
 801632e:	4903      	ldr	r1, [pc, #12]	@ (801633c <stdio_exit_handler+0x10>)
 8016330:	4803      	ldr	r0, [pc, #12]	@ (8016340 <stdio_exit_handler+0x14>)
 8016332:	f000 b869 	b.w	8016408 <_fwalk_sglue>
 8016336:	bf00      	nop
 8016338:	2000012c 	.word	0x2000012c
 801633c:	08017401 	.word	0x08017401
 8016340:	2000013c 	.word	0x2000013c

08016344 <cleanup_stdio>:
 8016344:	6841      	ldr	r1, [r0, #4]
 8016346:	4b0c      	ldr	r3, [pc, #48]	@ (8016378 <cleanup_stdio+0x34>)
 8016348:	4299      	cmp	r1, r3
 801634a:	b510      	push	{r4, lr}
 801634c:	4604      	mov	r4, r0
 801634e:	d001      	beq.n	8016354 <cleanup_stdio+0x10>
 8016350:	f001 f856 	bl	8017400 <_fflush_r>
 8016354:	68a1      	ldr	r1, [r4, #8]
 8016356:	4b09      	ldr	r3, [pc, #36]	@ (801637c <cleanup_stdio+0x38>)
 8016358:	4299      	cmp	r1, r3
 801635a:	d002      	beq.n	8016362 <cleanup_stdio+0x1e>
 801635c:	4620      	mov	r0, r4
 801635e:	f001 f84f 	bl	8017400 <_fflush_r>
 8016362:	68e1      	ldr	r1, [r4, #12]
 8016364:	4b06      	ldr	r3, [pc, #24]	@ (8016380 <cleanup_stdio+0x3c>)
 8016366:	4299      	cmp	r1, r3
 8016368:	d004      	beq.n	8016374 <cleanup_stdio+0x30>
 801636a:	4620      	mov	r0, r4
 801636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016370:	f001 b846 	b.w	8017400 <_fflush_r>
 8016374:	bd10      	pop	{r4, pc}
 8016376:	bf00      	nop
 8016378:	20002c70 	.word	0x20002c70
 801637c:	20002cd8 	.word	0x20002cd8
 8016380:	20002d40 	.word	0x20002d40

08016384 <global_stdio_init.part.0>:
 8016384:	b510      	push	{r4, lr}
 8016386:	4b0b      	ldr	r3, [pc, #44]	@ (80163b4 <global_stdio_init.part.0+0x30>)
 8016388:	4c0b      	ldr	r4, [pc, #44]	@ (80163b8 <global_stdio_init.part.0+0x34>)
 801638a:	4a0c      	ldr	r2, [pc, #48]	@ (80163bc <global_stdio_init.part.0+0x38>)
 801638c:	601a      	str	r2, [r3, #0]
 801638e:	4620      	mov	r0, r4
 8016390:	2200      	movs	r2, #0
 8016392:	2104      	movs	r1, #4
 8016394:	f7ff ff94 	bl	80162c0 <std>
 8016398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801639c:	2201      	movs	r2, #1
 801639e:	2109      	movs	r1, #9
 80163a0:	f7ff ff8e 	bl	80162c0 <std>
 80163a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80163a8:	2202      	movs	r2, #2
 80163aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163ae:	2112      	movs	r1, #18
 80163b0:	f7ff bf86 	b.w	80162c0 <std>
 80163b4:	20002da8 	.word	0x20002da8
 80163b8:	20002c70 	.word	0x20002c70
 80163bc:	0801632d 	.word	0x0801632d

080163c0 <__sfp_lock_acquire>:
 80163c0:	4801      	ldr	r0, [pc, #4]	@ (80163c8 <__sfp_lock_acquire+0x8>)
 80163c2:	f000 ba68 	b.w	8016896 <__retarget_lock_acquire_recursive>
 80163c6:	bf00      	nop
 80163c8:	20002db1 	.word	0x20002db1

080163cc <__sfp_lock_release>:
 80163cc:	4801      	ldr	r0, [pc, #4]	@ (80163d4 <__sfp_lock_release+0x8>)
 80163ce:	f000 ba63 	b.w	8016898 <__retarget_lock_release_recursive>
 80163d2:	bf00      	nop
 80163d4:	20002db1 	.word	0x20002db1

080163d8 <__sinit>:
 80163d8:	b510      	push	{r4, lr}
 80163da:	4604      	mov	r4, r0
 80163dc:	f7ff fff0 	bl	80163c0 <__sfp_lock_acquire>
 80163e0:	6a23      	ldr	r3, [r4, #32]
 80163e2:	b11b      	cbz	r3, 80163ec <__sinit+0x14>
 80163e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163e8:	f7ff bff0 	b.w	80163cc <__sfp_lock_release>
 80163ec:	4b04      	ldr	r3, [pc, #16]	@ (8016400 <__sinit+0x28>)
 80163ee:	6223      	str	r3, [r4, #32]
 80163f0:	4b04      	ldr	r3, [pc, #16]	@ (8016404 <__sinit+0x2c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1f5      	bne.n	80163e4 <__sinit+0xc>
 80163f8:	f7ff ffc4 	bl	8016384 <global_stdio_init.part.0>
 80163fc:	e7f2      	b.n	80163e4 <__sinit+0xc>
 80163fe:	bf00      	nop
 8016400:	08016345 	.word	0x08016345
 8016404:	20002da8 	.word	0x20002da8

08016408 <_fwalk_sglue>:
 8016408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801640c:	4607      	mov	r7, r0
 801640e:	4688      	mov	r8, r1
 8016410:	4614      	mov	r4, r2
 8016412:	2600      	movs	r6, #0
 8016414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016418:	f1b9 0901 	subs.w	r9, r9, #1
 801641c:	d505      	bpl.n	801642a <_fwalk_sglue+0x22>
 801641e:	6824      	ldr	r4, [r4, #0]
 8016420:	2c00      	cmp	r4, #0
 8016422:	d1f7      	bne.n	8016414 <_fwalk_sglue+0xc>
 8016424:	4630      	mov	r0, r6
 8016426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801642a:	89ab      	ldrh	r3, [r5, #12]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d907      	bls.n	8016440 <_fwalk_sglue+0x38>
 8016430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016434:	3301      	adds	r3, #1
 8016436:	d003      	beq.n	8016440 <_fwalk_sglue+0x38>
 8016438:	4629      	mov	r1, r5
 801643a:	4638      	mov	r0, r7
 801643c:	47c0      	blx	r8
 801643e:	4306      	orrs	r6, r0
 8016440:	3568      	adds	r5, #104	@ 0x68
 8016442:	e7e9      	b.n	8016418 <_fwalk_sglue+0x10>

08016444 <iprintf>:
 8016444:	b40f      	push	{r0, r1, r2, r3}
 8016446:	b507      	push	{r0, r1, r2, lr}
 8016448:	4906      	ldr	r1, [pc, #24]	@ (8016464 <iprintf+0x20>)
 801644a:	ab04      	add	r3, sp, #16
 801644c:	6808      	ldr	r0, [r1, #0]
 801644e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016452:	6881      	ldr	r1, [r0, #8]
 8016454:	9301      	str	r3, [sp, #4]
 8016456:	f000 fca9 	bl	8016dac <_vfiprintf_r>
 801645a:	b003      	add	sp, #12
 801645c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016460:	b004      	add	sp, #16
 8016462:	4770      	bx	lr
 8016464:	20000138 	.word	0x20000138

08016468 <putchar>:
 8016468:	4b02      	ldr	r3, [pc, #8]	@ (8016474 <putchar+0xc>)
 801646a:	4601      	mov	r1, r0
 801646c:	6818      	ldr	r0, [r3, #0]
 801646e:	6882      	ldr	r2, [r0, #8]
 8016470:	f001 b850 	b.w	8017514 <_putc_r>
 8016474:	20000138 	.word	0x20000138

08016478 <_puts_r>:
 8016478:	6a03      	ldr	r3, [r0, #32]
 801647a:	b570      	push	{r4, r5, r6, lr}
 801647c:	6884      	ldr	r4, [r0, #8]
 801647e:	4605      	mov	r5, r0
 8016480:	460e      	mov	r6, r1
 8016482:	b90b      	cbnz	r3, 8016488 <_puts_r+0x10>
 8016484:	f7ff ffa8 	bl	80163d8 <__sinit>
 8016488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801648a:	07db      	lsls	r3, r3, #31
 801648c:	d405      	bmi.n	801649a <_puts_r+0x22>
 801648e:	89a3      	ldrh	r3, [r4, #12]
 8016490:	0598      	lsls	r0, r3, #22
 8016492:	d402      	bmi.n	801649a <_puts_r+0x22>
 8016494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016496:	f000 f9fe 	bl	8016896 <__retarget_lock_acquire_recursive>
 801649a:	89a3      	ldrh	r3, [r4, #12]
 801649c:	0719      	lsls	r1, r3, #28
 801649e:	d502      	bpl.n	80164a6 <_puts_r+0x2e>
 80164a0:	6923      	ldr	r3, [r4, #16]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d135      	bne.n	8016512 <_puts_r+0x9a>
 80164a6:	4621      	mov	r1, r4
 80164a8:	4628      	mov	r0, r5
 80164aa:	f000 f8fd 	bl	80166a8 <__swsetup_r>
 80164ae:	b380      	cbz	r0, 8016512 <_puts_r+0x9a>
 80164b0:	f04f 35ff 	mov.w	r5, #4294967295
 80164b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80164b6:	07da      	lsls	r2, r3, #31
 80164b8:	d405      	bmi.n	80164c6 <_puts_r+0x4e>
 80164ba:	89a3      	ldrh	r3, [r4, #12]
 80164bc:	059b      	lsls	r3, r3, #22
 80164be:	d402      	bmi.n	80164c6 <_puts_r+0x4e>
 80164c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80164c2:	f000 f9e9 	bl	8016898 <__retarget_lock_release_recursive>
 80164c6:	4628      	mov	r0, r5
 80164c8:	bd70      	pop	{r4, r5, r6, pc}
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	da04      	bge.n	80164d8 <_puts_r+0x60>
 80164ce:	69a2      	ldr	r2, [r4, #24]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	dc17      	bgt.n	8016504 <_puts_r+0x8c>
 80164d4:	290a      	cmp	r1, #10
 80164d6:	d015      	beq.n	8016504 <_puts_r+0x8c>
 80164d8:	6823      	ldr	r3, [r4, #0]
 80164da:	1c5a      	adds	r2, r3, #1
 80164dc:	6022      	str	r2, [r4, #0]
 80164de:	7019      	strb	r1, [r3, #0]
 80164e0:	68a3      	ldr	r3, [r4, #8]
 80164e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80164e6:	3b01      	subs	r3, #1
 80164e8:	60a3      	str	r3, [r4, #8]
 80164ea:	2900      	cmp	r1, #0
 80164ec:	d1ed      	bne.n	80164ca <_puts_r+0x52>
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	da11      	bge.n	8016516 <_puts_r+0x9e>
 80164f2:	4622      	mov	r2, r4
 80164f4:	210a      	movs	r1, #10
 80164f6:	4628      	mov	r0, r5
 80164f8:	f000 f898 	bl	801662c <__swbuf_r>
 80164fc:	3001      	adds	r0, #1
 80164fe:	d0d7      	beq.n	80164b0 <_puts_r+0x38>
 8016500:	250a      	movs	r5, #10
 8016502:	e7d7      	b.n	80164b4 <_puts_r+0x3c>
 8016504:	4622      	mov	r2, r4
 8016506:	4628      	mov	r0, r5
 8016508:	f000 f890 	bl	801662c <__swbuf_r>
 801650c:	3001      	adds	r0, #1
 801650e:	d1e7      	bne.n	80164e0 <_puts_r+0x68>
 8016510:	e7ce      	b.n	80164b0 <_puts_r+0x38>
 8016512:	3e01      	subs	r6, #1
 8016514:	e7e4      	b.n	80164e0 <_puts_r+0x68>
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	1c5a      	adds	r2, r3, #1
 801651a:	6022      	str	r2, [r4, #0]
 801651c:	220a      	movs	r2, #10
 801651e:	701a      	strb	r2, [r3, #0]
 8016520:	e7ee      	b.n	8016500 <_puts_r+0x88>
	...

08016524 <puts>:
 8016524:	4b02      	ldr	r3, [pc, #8]	@ (8016530 <puts+0xc>)
 8016526:	4601      	mov	r1, r0
 8016528:	6818      	ldr	r0, [r3, #0]
 801652a:	f7ff bfa5 	b.w	8016478 <_puts_r>
 801652e:	bf00      	nop
 8016530:	20000138 	.word	0x20000138

08016534 <__sread>:
 8016534:	b510      	push	{r4, lr}
 8016536:	460c      	mov	r4, r1
 8016538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801653c:	f000 f95c 	bl	80167f8 <_read_r>
 8016540:	2800      	cmp	r0, #0
 8016542:	bfab      	itete	ge
 8016544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016546:	89a3      	ldrhlt	r3, [r4, #12]
 8016548:	181b      	addge	r3, r3, r0
 801654a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801654e:	bfac      	ite	ge
 8016550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016552:	81a3      	strhlt	r3, [r4, #12]
 8016554:	bd10      	pop	{r4, pc}

08016556 <__swrite>:
 8016556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801655a:	461f      	mov	r7, r3
 801655c:	898b      	ldrh	r3, [r1, #12]
 801655e:	05db      	lsls	r3, r3, #23
 8016560:	4605      	mov	r5, r0
 8016562:	460c      	mov	r4, r1
 8016564:	4616      	mov	r6, r2
 8016566:	d505      	bpl.n	8016574 <__swrite+0x1e>
 8016568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801656c:	2302      	movs	r3, #2
 801656e:	2200      	movs	r2, #0
 8016570:	f000 f930 	bl	80167d4 <_lseek_r>
 8016574:	89a3      	ldrh	r3, [r4, #12]
 8016576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801657a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801657e:	81a3      	strh	r3, [r4, #12]
 8016580:	4632      	mov	r2, r6
 8016582:	463b      	mov	r3, r7
 8016584:	4628      	mov	r0, r5
 8016586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801658a:	f000 b947 	b.w	801681c <_write_r>

0801658e <__sseek>:
 801658e:	b510      	push	{r4, lr}
 8016590:	460c      	mov	r4, r1
 8016592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016596:	f000 f91d 	bl	80167d4 <_lseek_r>
 801659a:	1c43      	adds	r3, r0, #1
 801659c:	89a3      	ldrh	r3, [r4, #12]
 801659e:	bf15      	itete	ne
 80165a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80165a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80165a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80165aa:	81a3      	strheq	r3, [r4, #12]
 80165ac:	bf18      	it	ne
 80165ae:	81a3      	strhne	r3, [r4, #12]
 80165b0:	bd10      	pop	{r4, pc}

080165b2 <__sclose>:
 80165b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165b6:	f000 b8fd 	b.w	80167b4 <_close_r>

080165ba <_vsniprintf_r>:
 80165ba:	b530      	push	{r4, r5, lr}
 80165bc:	4614      	mov	r4, r2
 80165be:	2c00      	cmp	r4, #0
 80165c0:	b09b      	sub	sp, #108	@ 0x6c
 80165c2:	4605      	mov	r5, r0
 80165c4:	461a      	mov	r2, r3
 80165c6:	da05      	bge.n	80165d4 <_vsniprintf_r+0x1a>
 80165c8:	238b      	movs	r3, #139	@ 0x8b
 80165ca:	6003      	str	r3, [r0, #0]
 80165cc:	f04f 30ff 	mov.w	r0, #4294967295
 80165d0:	b01b      	add	sp, #108	@ 0x6c
 80165d2:	bd30      	pop	{r4, r5, pc}
 80165d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80165d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80165dc:	bf14      	ite	ne
 80165de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165e2:	4623      	moveq	r3, r4
 80165e4:	9302      	str	r3, [sp, #8]
 80165e6:	9305      	str	r3, [sp, #20]
 80165e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80165ec:	9100      	str	r1, [sp, #0]
 80165ee:	9104      	str	r1, [sp, #16]
 80165f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165f4:	4669      	mov	r1, sp
 80165f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80165f8:	f000 fab2 	bl	8016b60 <_svfiprintf_r>
 80165fc:	1c43      	adds	r3, r0, #1
 80165fe:	bfbc      	itt	lt
 8016600:	238b      	movlt	r3, #139	@ 0x8b
 8016602:	602b      	strlt	r3, [r5, #0]
 8016604:	2c00      	cmp	r4, #0
 8016606:	d0e3      	beq.n	80165d0 <_vsniprintf_r+0x16>
 8016608:	9b00      	ldr	r3, [sp, #0]
 801660a:	2200      	movs	r2, #0
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	e7df      	b.n	80165d0 <_vsniprintf_r+0x16>

08016610 <vsniprintf>:
 8016610:	b507      	push	{r0, r1, r2, lr}
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	4613      	mov	r3, r2
 8016616:	460a      	mov	r2, r1
 8016618:	4601      	mov	r1, r0
 801661a:	4803      	ldr	r0, [pc, #12]	@ (8016628 <vsniprintf+0x18>)
 801661c:	6800      	ldr	r0, [r0, #0]
 801661e:	f7ff ffcc 	bl	80165ba <_vsniprintf_r>
 8016622:	b003      	add	sp, #12
 8016624:	f85d fb04 	ldr.w	pc, [sp], #4
 8016628:	20000138 	.word	0x20000138

0801662c <__swbuf_r>:
 801662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801662e:	460e      	mov	r6, r1
 8016630:	4614      	mov	r4, r2
 8016632:	4605      	mov	r5, r0
 8016634:	b118      	cbz	r0, 801663e <__swbuf_r+0x12>
 8016636:	6a03      	ldr	r3, [r0, #32]
 8016638:	b90b      	cbnz	r3, 801663e <__swbuf_r+0x12>
 801663a:	f7ff fecd 	bl	80163d8 <__sinit>
 801663e:	69a3      	ldr	r3, [r4, #24]
 8016640:	60a3      	str	r3, [r4, #8]
 8016642:	89a3      	ldrh	r3, [r4, #12]
 8016644:	071a      	lsls	r2, r3, #28
 8016646:	d501      	bpl.n	801664c <__swbuf_r+0x20>
 8016648:	6923      	ldr	r3, [r4, #16]
 801664a:	b943      	cbnz	r3, 801665e <__swbuf_r+0x32>
 801664c:	4621      	mov	r1, r4
 801664e:	4628      	mov	r0, r5
 8016650:	f000 f82a 	bl	80166a8 <__swsetup_r>
 8016654:	b118      	cbz	r0, 801665e <__swbuf_r+0x32>
 8016656:	f04f 37ff 	mov.w	r7, #4294967295
 801665a:	4638      	mov	r0, r7
 801665c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	6922      	ldr	r2, [r4, #16]
 8016662:	1a98      	subs	r0, r3, r2
 8016664:	6963      	ldr	r3, [r4, #20]
 8016666:	b2f6      	uxtb	r6, r6
 8016668:	4283      	cmp	r3, r0
 801666a:	4637      	mov	r7, r6
 801666c:	dc05      	bgt.n	801667a <__swbuf_r+0x4e>
 801666e:	4621      	mov	r1, r4
 8016670:	4628      	mov	r0, r5
 8016672:	f000 fec5 	bl	8017400 <_fflush_r>
 8016676:	2800      	cmp	r0, #0
 8016678:	d1ed      	bne.n	8016656 <__swbuf_r+0x2a>
 801667a:	68a3      	ldr	r3, [r4, #8]
 801667c:	3b01      	subs	r3, #1
 801667e:	60a3      	str	r3, [r4, #8]
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	1c5a      	adds	r2, r3, #1
 8016684:	6022      	str	r2, [r4, #0]
 8016686:	701e      	strb	r6, [r3, #0]
 8016688:	6962      	ldr	r2, [r4, #20]
 801668a:	1c43      	adds	r3, r0, #1
 801668c:	429a      	cmp	r2, r3
 801668e:	d004      	beq.n	801669a <__swbuf_r+0x6e>
 8016690:	89a3      	ldrh	r3, [r4, #12]
 8016692:	07db      	lsls	r3, r3, #31
 8016694:	d5e1      	bpl.n	801665a <__swbuf_r+0x2e>
 8016696:	2e0a      	cmp	r6, #10
 8016698:	d1df      	bne.n	801665a <__swbuf_r+0x2e>
 801669a:	4621      	mov	r1, r4
 801669c:	4628      	mov	r0, r5
 801669e:	f000 feaf 	bl	8017400 <_fflush_r>
 80166a2:	2800      	cmp	r0, #0
 80166a4:	d0d9      	beq.n	801665a <__swbuf_r+0x2e>
 80166a6:	e7d6      	b.n	8016656 <__swbuf_r+0x2a>

080166a8 <__swsetup_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4b29      	ldr	r3, [pc, #164]	@ (8016750 <__swsetup_r+0xa8>)
 80166ac:	4605      	mov	r5, r0
 80166ae:	6818      	ldr	r0, [r3, #0]
 80166b0:	460c      	mov	r4, r1
 80166b2:	b118      	cbz	r0, 80166bc <__swsetup_r+0x14>
 80166b4:	6a03      	ldr	r3, [r0, #32]
 80166b6:	b90b      	cbnz	r3, 80166bc <__swsetup_r+0x14>
 80166b8:	f7ff fe8e 	bl	80163d8 <__sinit>
 80166bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166c0:	0719      	lsls	r1, r3, #28
 80166c2:	d422      	bmi.n	801670a <__swsetup_r+0x62>
 80166c4:	06da      	lsls	r2, r3, #27
 80166c6:	d407      	bmi.n	80166d8 <__swsetup_r+0x30>
 80166c8:	2209      	movs	r2, #9
 80166ca:	602a      	str	r2, [r5, #0]
 80166cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	f04f 30ff 	mov.w	r0, #4294967295
 80166d6:	e033      	b.n	8016740 <__swsetup_r+0x98>
 80166d8:	0758      	lsls	r0, r3, #29
 80166da:	d512      	bpl.n	8016702 <__swsetup_r+0x5a>
 80166dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166de:	b141      	cbz	r1, 80166f2 <__swsetup_r+0x4a>
 80166e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166e4:	4299      	cmp	r1, r3
 80166e6:	d002      	beq.n	80166ee <__swsetup_r+0x46>
 80166e8:	4628      	mov	r0, r5
 80166ea:	f000 f8e5 	bl	80168b8 <_free_r>
 80166ee:	2300      	movs	r3, #0
 80166f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80166f2:	89a3      	ldrh	r3, [r4, #12]
 80166f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80166f8:	81a3      	strh	r3, [r4, #12]
 80166fa:	2300      	movs	r3, #0
 80166fc:	6063      	str	r3, [r4, #4]
 80166fe:	6923      	ldr	r3, [r4, #16]
 8016700:	6023      	str	r3, [r4, #0]
 8016702:	89a3      	ldrh	r3, [r4, #12]
 8016704:	f043 0308 	orr.w	r3, r3, #8
 8016708:	81a3      	strh	r3, [r4, #12]
 801670a:	6923      	ldr	r3, [r4, #16]
 801670c:	b94b      	cbnz	r3, 8016722 <__swsetup_r+0x7a>
 801670e:	89a3      	ldrh	r3, [r4, #12]
 8016710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016718:	d003      	beq.n	8016722 <__swsetup_r+0x7a>
 801671a:	4621      	mov	r1, r4
 801671c:	4628      	mov	r0, r5
 801671e:	f000 febd 	bl	801749c <__smakebuf_r>
 8016722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016726:	f013 0201 	ands.w	r2, r3, #1
 801672a:	d00a      	beq.n	8016742 <__swsetup_r+0x9a>
 801672c:	2200      	movs	r2, #0
 801672e:	60a2      	str	r2, [r4, #8]
 8016730:	6962      	ldr	r2, [r4, #20]
 8016732:	4252      	negs	r2, r2
 8016734:	61a2      	str	r2, [r4, #24]
 8016736:	6922      	ldr	r2, [r4, #16]
 8016738:	b942      	cbnz	r2, 801674c <__swsetup_r+0xa4>
 801673a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801673e:	d1c5      	bne.n	80166cc <__swsetup_r+0x24>
 8016740:	bd38      	pop	{r3, r4, r5, pc}
 8016742:	0799      	lsls	r1, r3, #30
 8016744:	bf58      	it	pl
 8016746:	6962      	ldrpl	r2, [r4, #20]
 8016748:	60a2      	str	r2, [r4, #8]
 801674a:	e7f4      	b.n	8016736 <__swsetup_r+0x8e>
 801674c:	2000      	movs	r0, #0
 801674e:	e7f7      	b.n	8016740 <__swsetup_r+0x98>
 8016750:	20000138 	.word	0x20000138

08016754 <memset>:
 8016754:	4402      	add	r2, r0
 8016756:	4603      	mov	r3, r0
 8016758:	4293      	cmp	r3, r2
 801675a:	d100      	bne.n	801675e <memset+0xa>
 801675c:	4770      	bx	lr
 801675e:	f803 1b01 	strb.w	r1, [r3], #1
 8016762:	e7f9      	b.n	8016758 <memset+0x4>

08016764 <strncmp>:
 8016764:	b510      	push	{r4, lr}
 8016766:	b16a      	cbz	r2, 8016784 <strncmp+0x20>
 8016768:	3901      	subs	r1, #1
 801676a:	1884      	adds	r4, r0, r2
 801676c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016770:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016774:	429a      	cmp	r2, r3
 8016776:	d103      	bne.n	8016780 <strncmp+0x1c>
 8016778:	42a0      	cmp	r0, r4
 801677a:	d001      	beq.n	8016780 <strncmp+0x1c>
 801677c:	2a00      	cmp	r2, #0
 801677e:	d1f5      	bne.n	801676c <strncmp+0x8>
 8016780:	1ad0      	subs	r0, r2, r3
 8016782:	bd10      	pop	{r4, pc}
 8016784:	4610      	mov	r0, r2
 8016786:	e7fc      	b.n	8016782 <strncmp+0x1e>

08016788 <strrchr>:
 8016788:	b538      	push	{r3, r4, r5, lr}
 801678a:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801678e:	4603      	mov	r3, r0
 8016790:	d10e      	bne.n	80167b0 <strrchr+0x28>
 8016792:	4621      	mov	r1, r4
 8016794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016798:	f000 bf0a 	b.w	80175b0 <strchr>
 801679c:	1c43      	adds	r3, r0, #1
 801679e:	4605      	mov	r5, r0
 80167a0:	4621      	mov	r1, r4
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 ff04 	bl	80175b0 <strchr>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d1f7      	bne.n	801679c <strrchr+0x14>
 80167ac:	4628      	mov	r0, r5
 80167ae:	bd38      	pop	{r3, r4, r5, pc}
 80167b0:	2500      	movs	r5, #0
 80167b2:	e7f5      	b.n	80167a0 <strrchr+0x18>

080167b4 <_close_r>:
 80167b4:	b538      	push	{r3, r4, r5, lr}
 80167b6:	4d06      	ldr	r5, [pc, #24]	@ (80167d0 <_close_r+0x1c>)
 80167b8:	2300      	movs	r3, #0
 80167ba:	4604      	mov	r4, r0
 80167bc:	4608      	mov	r0, r1
 80167be:	602b      	str	r3, [r5, #0]
 80167c0:	f7ee f83b 	bl	800483a <_close>
 80167c4:	1c43      	adds	r3, r0, #1
 80167c6:	d102      	bne.n	80167ce <_close_r+0x1a>
 80167c8:	682b      	ldr	r3, [r5, #0]
 80167ca:	b103      	cbz	r3, 80167ce <_close_r+0x1a>
 80167cc:	6023      	str	r3, [r4, #0]
 80167ce:	bd38      	pop	{r3, r4, r5, pc}
 80167d0:	20002dac 	.word	0x20002dac

080167d4 <_lseek_r>:
 80167d4:	b538      	push	{r3, r4, r5, lr}
 80167d6:	4d07      	ldr	r5, [pc, #28]	@ (80167f4 <_lseek_r+0x20>)
 80167d8:	4604      	mov	r4, r0
 80167da:	4608      	mov	r0, r1
 80167dc:	4611      	mov	r1, r2
 80167de:	2200      	movs	r2, #0
 80167e0:	602a      	str	r2, [r5, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	f7ee f850 	bl	8004888 <_lseek>
 80167e8:	1c43      	adds	r3, r0, #1
 80167ea:	d102      	bne.n	80167f2 <_lseek_r+0x1e>
 80167ec:	682b      	ldr	r3, [r5, #0]
 80167ee:	b103      	cbz	r3, 80167f2 <_lseek_r+0x1e>
 80167f0:	6023      	str	r3, [r4, #0]
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	20002dac 	.word	0x20002dac

080167f8 <_read_r>:
 80167f8:	b538      	push	{r3, r4, r5, lr}
 80167fa:	4d07      	ldr	r5, [pc, #28]	@ (8016818 <_read_r+0x20>)
 80167fc:	4604      	mov	r4, r0
 80167fe:	4608      	mov	r0, r1
 8016800:	4611      	mov	r1, r2
 8016802:	2200      	movs	r2, #0
 8016804:	602a      	str	r2, [r5, #0]
 8016806:	461a      	mov	r2, r3
 8016808:	f7ed fffa 	bl	8004800 <_read>
 801680c:	1c43      	adds	r3, r0, #1
 801680e:	d102      	bne.n	8016816 <_read_r+0x1e>
 8016810:	682b      	ldr	r3, [r5, #0]
 8016812:	b103      	cbz	r3, 8016816 <_read_r+0x1e>
 8016814:	6023      	str	r3, [r4, #0]
 8016816:	bd38      	pop	{r3, r4, r5, pc}
 8016818:	20002dac 	.word	0x20002dac

0801681c <_write_r>:
 801681c:	b538      	push	{r3, r4, r5, lr}
 801681e:	4d07      	ldr	r5, [pc, #28]	@ (801683c <_write_r+0x20>)
 8016820:	4604      	mov	r4, r0
 8016822:	4608      	mov	r0, r1
 8016824:	4611      	mov	r1, r2
 8016826:	2200      	movs	r2, #0
 8016828:	602a      	str	r2, [r5, #0]
 801682a:	461a      	mov	r2, r3
 801682c:	f7fb ff36 	bl	801269c <_write>
 8016830:	1c43      	adds	r3, r0, #1
 8016832:	d102      	bne.n	801683a <_write_r+0x1e>
 8016834:	682b      	ldr	r3, [r5, #0]
 8016836:	b103      	cbz	r3, 801683a <_write_r+0x1e>
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	bd38      	pop	{r3, r4, r5, pc}
 801683c:	20002dac 	.word	0x20002dac

08016840 <__errno>:
 8016840:	4b01      	ldr	r3, [pc, #4]	@ (8016848 <__errno+0x8>)
 8016842:	6818      	ldr	r0, [r3, #0]
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	20000138 	.word	0x20000138

0801684c <__libc_init_array>:
 801684c:	b570      	push	{r4, r5, r6, lr}
 801684e:	4d0d      	ldr	r5, [pc, #52]	@ (8016884 <__libc_init_array+0x38>)
 8016850:	4c0d      	ldr	r4, [pc, #52]	@ (8016888 <__libc_init_array+0x3c>)
 8016852:	1b64      	subs	r4, r4, r5
 8016854:	10a4      	asrs	r4, r4, #2
 8016856:	2600      	movs	r6, #0
 8016858:	42a6      	cmp	r6, r4
 801685a:	d109      	bne.n	8016870 <__libc_init_array+0x24>
 801685c:	4d0b      	ldr	r5, [pc, #44]	@ (801688c <__libc_init_array+0x40>)
 801685e:	4c0c      	ldr	r4, [pc, #48]	@ (8016890 <__libc_init_array+0x44>)
 8016860:	f000 ff1c 	bl	801769c <_init>
 8016864:	1b64      	subs	r4, r4, r5
 8016866:	10a4      	asrs	r4, r4, #2
 8016868:	2600      	movs	r6, #0
 801686a:	42a6      	cmp	r6, r4
 801686c:	d105      	bne.n	801687a <__libc_init_array+0x2e>
 801686e:	bd70      	pop	{r4, r5, r6, pc}
 8016870:	f855 3b04 	ldr.w	r3, [r5], #4
 8016874:	4798      	blx	r3
 8016876:	3601      	adds	r6, #1
 8016878:	e7ee      	b.n	8016858 <__libc_init_array+0xc>
 801687a:	f855 3b04 	ldr.w	r3, [r5], #4
 801687e:	4798      	blx	r3
 8016880:	3601      	adds	r6, #1
 8016882:	e7f2      	b.n	801686a <__libc_init_array+0x1e>
 8016884:	080193f0 	.word	0x080193f0
 8016888:	080193f0 	.word	0x080193f0
 801688c:	080193f0 	.word	0x080193f0
 8016890:	080193f4 	.word	0x080193f4

08016894 <__retarget_lock_init_recursive>:
 8016894:	4770      	bx	lr

08016896 <__retarget_lock_acquire_recursive>:
 8016896:	4770      	bx	lr

08016898 <__retarget_lock_release_recursive>:
 8016898:	4770      	bx	lr

0801689a <memcpy>:
 801689a:	440a      	add	r2, r1
 801689c:	4291      	cmp	r1, r2
 801689e:	f100 33ff 	add.w	r3, r0, #4294967295
 80168a2:	d100      	bne.n	80168a6 <memcpy+0xc>
 80168a4:	4770      	bx	lr
 80168a6:	b510      	push	{r4, lr}
 80168a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168b0:	4291      	cmp	r1, r2
 80168b2:	d1f9      	bne.n	80168a8 <memcpy+0xe>
 80168b4:	bd10      	pop	{r4, pc}
	...

080168b8 <_free_r>:
 80168b8:	b538      	push	{r3, r4, r5, lr}
 80168ba:	4605      	mov	r5, r0
 80168bc:	2900      	cmp	r1, #0
 80168be:	d041      	beq.n	8016944 <_free_r+0x8c>
 80168c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168c4:	1f0c      	subs	r4, r1, #4
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	bfb8      	it	lt
 80168ca:	18e4      	addlt	r4, r4, r3
 80168cc:	f000 f8e0 	bl	8016a90 <__malloc_lock>
 80168d0:	4a1d      	ldr	r2, [pc, #116]	@ (8016948 <_free_r+0x90>)
 80168d2:	6813      	ldr	r3, [r2, #0]
 80168d4:	b933      	cbnz	r3, 80168e4 <_free_r+0x2c>
 80168d6:	6063      	str	r3, [r4, #4]
 80168d8:	6014      	str	r4, [r2, #0]
 80168da:	4628      	mov	r0, r5
 80168dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168e0:	f000 b8dc 	b.w	8016a9c <__malloc_unlock>
 80168e4:	42a3      	cmp	r3, r4
 80168e6:	d908      	bls.n	80168fa <_free_r+0x42>
 80168e8:	6820      	ldr	r0, [r4, #0]
 80168ea:	1821      	adds	r1, r4, r0
 80168ec:	428b      	cmp	r3, r1
 80168ee:	bf01      	itttt	eq
 80168f0:	6819      	ldreq	r1, [r3, #0]
 80168f2:	685b      	ldreq	r3, [r3, #4]
 80168f4:	1809      	addeq	r1, r1, r0
 80168f6:	6021      	streq	r1, [r4, #0]
 80168f8:	e7ed      	b.n	80168d6 <_free_r+0x1e>
 80168fa:	461a      	mov	r2, r3
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	b10b      	cbz	r3, 8016904 <_free_r+0x4c>
 8016900:	42a3      	cmp	r3, r4
 8016902:	d9fa      	bls.n	80168fa <_free_r+0x42>
 8016904:	6811      	ldr	r1, [r2, #0]
 8016906:	1850      	adds	r0, r2, r1
 8016908:	42a0      	cmp	r0, r4
 801690a:	d10b      	bne.n	8016924 <_free_r+0x6c>
 801690c:	6820      	ldr	r0, [r4, #0]
 801690e:	4401      	add	r1, r0
 8016910:	1850      	adds	r0, r2, r1
 8016912:	4283      	cmp	r3, r0
 8016914:	6011      	str	r1, [r2, #0]
 8016916:	d1e0      	bne.n	80168da <_free_r+0x22>
 8016918:	6818      	ldr	r0, [r3, #0]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	6053      	str	r3, [r2, #4]
 801691e:	4408      	add	r0, r1
 8016920:	6010      	str	r0, [r2, #0]
 8016922:	e7da      	b.n	80168da <_free_r+0x22>
 8016924:	d902      	bls.n	801692c <_free_r+0x74>
 8016926:	230c      	movs	r3, #12
 8016928:	602b      	str	r3, [r5, #0]
 801692a:	e7d6      	b.n	80168da <_free_r+0x22>
 801692c:	6820      	ldr	r0, [r4, #0]
 801692e:	1821      	adds	r1, r4, r0
 8016930:	428b      	cmp	r3, r1
 8016932:	bf04      	itt	eq
 8016934:	6819      	ldreq	r1, [r3, #0]
 8016936:	685b      	ldreq	r3, [r3, #4]
 8016938:	6063      	str	r3, [r4, #4]
 801693a:	bf04      	itt	eq
 801693c:	1809      	addeq	r1, r1, r0
 801693e:	6021      	streq	r1, [r4, #0]
 8016940:	6054      	str	r4, [r2, #4]
 8016942:	e7ca      	b.n	80168da <_free_r+0x22>
 8016944:	bd38      	pop	{r3, r4, r5, pc}
 8016946:	bf00      	nop
 8016948:	20002db8 	.word	0x20002db8

0801694c <sbrk_aligned>:
 801694c:	b570      	push	{r4, r5, r6, lr}
 801694e:	4e0f      	ldr	r6, [pc, #60]	@ (801698c <sbrk_aligned+0x40>)
 8016950:	460c      	mov	r4, r1
 8016952:	6831      	ldr	r1, [r6, #0]
 8016954:	4605      	mov	r5, r0
 8016956:	b911      	cbnz	r1, 801695e <sbrk_aligned+0x12>
 8016958:	f000 fe5a 	bl	8017610 <_sbrk_r>
 801695c:	6030      	str	r0, [r6, #0]
 801695e:	4621      	mov	r1, r4
 8016960:	4628      	mov	r0, r5
 8016962:	f000 fe55 	bl	8017610 <_sbrk_r>
 8016966:	1c43      	adds	r3, r0, #1
 8016968:	d103      	bne.n	8016972 <sbrk_aligned+0x26>
 801696a:	f04f 34ff 	mov.w	r4, #4294967295
 801696e:	4620      	mov	r0, r4
 8016970:	bd70      	pop	{r4, r5, r6, pc}
 8016972:	1cc4      	adds	r4, r0, #3
 8016974:	f024 0403 	bic.w	r4, r4, #3
 8016978:	42a0      	cmp	r0, r4
 801697a:	d0f8      	beq.n	801696e <sbrk_aligned+0x22>
 801697c:	1a21      	subs	r1, r4, r0
 801697e:	4628      	mov	r0, r5
 8016980:	f000 fe46 	bl	8017610 <_sbrk_r>
 8016984:	3001      	adds	r0, #1
 8016986:	d1f2      	bne.n	801696e <sbrk_aligned+0x22>
 8016988:	e7ef      	b.n	801696a <sbrk_aligned+0x1e>
 801698a:	bf00      	nop
 801698c:	20002db4 	.word	0x20002db4

08016990 <_malloc_r>:
 8016990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016994:	1ccd      	adds	r5, r1, #3
 8016996:	f025 0503 	bic.w	r5, r5, #3
 801699a:	3508      	adds	r5, #8
 801699c:	2d0c      	cmp	r5, #12
 801699e:	bf38      	it	cc
 80169a0:	250c      	movcc	r5, #12
 80169a2:	2d00      	cmp	r5, #0
 80169a4:	4606      	mov	r6, r0
 80169a6:	db01      	blt.n	80169ac <_malloc_r+0x1c>
 80169a8:	42a9      	cmp	r1, r5
 80169aa:	d904      	bls.n	80169b6 <_malloc_r+0x26>
 80169ac:	230c      	movs	r3, #12
 80169ae:	6033      	str	r3, [r6, #0]
 80169b0:	2000      	movs	r0, #0
 80169b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016a8c <_malloc_r+0xfc>
 80169ba:	f000 f869 	bl	8016a90 <__malloc_lock>
 80169be:	f8d8 3000 	ldr.w	r3, [r8]
 80169c2:	461c      	mov	r4, r3
 80169c4:	bb44      	cbnz	r4, 8016a18 <_malloc_r+0x88>
 80169c6:	4629      	mov	r1, r5
 80169c8:	4630      	mov	r0, r6
 80169ca:	f7ff ffbf 	bl	801694c <sbrk_aligned>
 80169ce:	1c43      	adds	r3, r0, #1
 80169d0:	4604      	mov	r4, r0
 80169d2:	d158      	bne.n	8016a86 <_malloc_r+0xf6>
 80169d4:	f8d8 4000 	ldr.w	r4, [r8]
 80169d8:	4627      	mov	r7, r4
 80169da:	2f00      	cmp	r7, #0
 80169dc:	d143      	bne.n	8016a66 <_malloc_r+0xd6>
 80169de:	2c00      	cmp	r4, #0
 80169e0:	d04b      	beq.n	8016a7a <_malloc_r+0xea>
 80169e2:	6823      	ldr	r3, [r4, #0]
 80169e4:	4639      	mov	r1, r7
 80169e6:	4630      	mov	r0, r6
 80169e8:	eb04 0903 	add.w	r9, r4, r3
 80169ec:	f000 fe10 	bl	8017610 <_sbrk_r>
 80169f0:	4581      	cmp	r9, r0
 80169f2:	d142      	bne.n	8016a7a <_malloc_r+0xea>
 80169f4:	6821      	ldr	r1, [r4, #0]
 80169f6:	1a6d      	subs	r5, r5, r1
 80169f8:	4629      	mov	r1, r5
 80169fa:	4630      	mov	r0, r6
 80169fc:	f7ff ffa6 	bl	801694c <sbrk_aligned>
 8016a00:	3001      	adds	r0, #1
 8016a02:	d03a      	beq.n	8016a7a <_malloc_r+0xea>
 8016a04:	6823      	ldr	r3, [r4, #0]
 8016a06:	442b      	add	r3, r5
 8016a08:	6023      	str	r3, [r4, #0]
 8016a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8016a0e:	685a      	ldr	r2, [r3, #4]
 8016a10:	bb62      	cbnz	r2, 8016a6c <_malloc_r+0xdc>
 8016a12:	f8c8 7000 	str.w	r7, [r8]
 8016a16:	e00f      	b.n	8016a38 <_malloc_r+0xa8>
 8016a18:	6822      	ldr	r2, [r4, #0]
 8016a1a:	1b52      	subs	r2, r2, r5
 8016a1c:	d420      	bmi.n	8016a60 <_malloc_r+0xd0>
 8016a1e:	2a0b      	cmp	r2, #11
 8016a20:	d917      	bls.n	8016a52 <_malloc_r+0xc2>
 8016a22:	1961      	adds	r1, r4, r5
 8016a24:	42a3      	cmp	r3, r4
 8016a26:	6025      	str	r5, [r4, #0]
 8016a28:	bf18      	it	ne
 8016a2a:	6059      	strne	r1, [r3, #4]
 8016a2c:	6863      	ldr	r3, [r4, #4]
 8016a2e:	bf08      	it	eq
 8016a30:	f8c8 1000 	streq.w	r1, [r8]
 8016a34:	5162      	str	r2, [r4, r5]
 8016a36:	604b      	str	r3, [r1, #4]
 8016a38:	4630      	mov	r0, r6
 8016a3a:	f000 f82f 	bl	8016a9c <__malloc_unlock>
 8016a3e:	f104 000b 	add.w	r0, r4, #11
 8016a42:	1d23      	adds	r3, r4, #4
 8016a44:	f020 0007 	bic.w	r0, r0, #7
 8016a48:	1ac2      	subs	r2, r0, r3
 8016a4a:	bf1c      	itt	ne
 8016a4c:	1a1b      	subne	r3, r3, r0
 8016a4e:	50a3      	strne	r3, [r4, r2]
 8016a50:	e7af      	b.n	80169b2 <_malloc_r+0x22>
 8016a52:	6862      	ldr	r2, [r4, #4]
 8016a54:	42a3      	cmp	r3, r4
 8016a56:	bf0c      	ite	eq
 8016a58:	f8c8 2000 	streq.w	r2, [r8]
 8016a5c:	605a      	strne	r2, [r3, #4]
 8016a5e:	e7eb      	b.n	8016a38 <_malloc_r+0xa8>
 8016a60:	4623      	mov	r3, r4
 8016a62:	6864      	ldr	r4, [r4, #4]
 8016a64:	e7ae      	b.n	80169c4 <_malloc_r+0x34>
 8016a66:	463c      	mov	r4, r7
 8016a68:	687f      	ldr	r7, [r7, #4]
 8016a6a:	e7b6      	b.n	80169da <_malloc_r+0x4a>
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	42a3      	cmp	r3, r4
 8016a72:	d1fb      	bne.n	8016a6c <_malloc_r+0xdc>
 8016a74:	2300      	movs	r3, #0
 8016a76:	6053      	str	r3, [r2, #4]
 8016a78:	e7de      	b.n	8016a38 <_malloc_r+0xa8>
 8016a7a:	230c      	movs	r3, #12
 8016a7c:	6033      	str	r3, [r6, #0]
 8016a7e:	4630      	mov	r0, r6
 8016a80:	f000 f80c 	bl	8016a9c <__malloc_unlock>
 8016a84:	e794      	b.n	80169b0 <_malloc_r+0x20>
 8016a86:	6005      	str	r5, [r0, #0]
 8016a88:	e7d6      	b.n	8016a38 <_malloc_r+0xa8>
 8016a8a:	bf00      	nop
 8016a8c:	20002db8 	.word	0x20002db8

08016a90 <__malloc_lock>:
 8016a90:	4801      	ldr	r0, [pc, #4]	@ (8016a98 <__malloc_lock+0x8>)
 8016a92:	f7ff bf00 	b.w	8016896 <__retarget_lock_acquire_recursive>
 8016a96:	bf00      	nop
 8016a98:	20002db0 	.word	0x20002db0

08016a9c <__malloc_unlock>:
 8016a9c:	4801      	ldr	r0, [pc, #4]	@ (8016aa4 <__malloc_unlock+0x8>)
 8016a9e:	f7ff befb 	b.w	8016898 <__retarget_lock_release_recursive>
 8016aa2:	bf00      	nop
 8016aa4:	20002db0 	.word	0x20002db0

08016aa8 <__ssputs_r>:
 8016aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aac:	688e      	ldr	r6, [r1, #8]
 8016aae:	461f      	mov	r7, r3
 8016ab0:	42be      	cmp	r6, r7
 8016ab2:	680b      	ldr	r3, [r1, #0]
 8016ab4:	4682      	mov	sl, r0
 8016ab6:	460c      	mov	r4, r1
 8016ab8:	4690      	mov	r8, r2
 8016aba:	d82d      	bhi.n	8016b18 <__ssputs_r+0x70>
 8016abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ac0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016ac4:	d026      	beq.n	8016b14 <__ssputs_r+0x6c>
 8016ac6:	6965      	ldr	r5, [r4, #20]
 8016ac8:	6909      	ldr	r1, [r1, #16]
 8016aca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ace:	eba3 0901 	sub.w	r9, r3, r1
 8016ad2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ad6:	1c7b      	adds	r3, r7, #1
 8016ad8:	444b      	add	r3, r9
 8016ada:	106d      	asrs	r5, r5, #1
 8016adc:	429d      	cmp	r5, r3
 8016ade:	bf38      	it	cc
 8016ae0:	461d      	movcc	r5, r3
 8016ae2:	0553      	lsls	r3, r2, #21
 8016ae4:	d527      	bpl.n	8016b36 <__ssputs_r+0x8e>
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7ff ff52 	bl	8016990 <_malloc_r>
 8016aec:	4606      	mov	r6, r0
 8016aee:	b360      	cbz	r0, 8016b4a <__ssputs_r+0xa2>
 8016af0:	6921      	ldr	r1, [r4, #16]
 8016af2:	464a      	mov	r2, r9
 8016af4:	f7ff fed1 	bl	801689a <memcpy>
 8016af8:	89a3      	ldrh	r3, [r4, #12]
 8016afa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b02:	81a3      	strh	r3, [r4, #12]
 8016b04:	6126      	str	r6, [r4, #16]
 8016b06:	6165      	str	r5, [r4, #20]
 8016b08:	444e      	add	r6, r9
 8016b0a:	eba5 0509 	sub.w	r5, r5, r9
 8016b0e:	6026      	str	r6, [r4, #0]
 8016b10:	60a5      	str	r5, [r4, #8]
 8016b12:	463e      	mov	r6, r7
 8016b14:	42be      	cmp	r6, r7
 8016b16:	d900      	bls.n	8016b1a <__ssputs_r+0x72>
 8016b18:	463e      	mov	r6, r7
 8016b1a:	6820      	ldr	r0, [r4, #0]
 8016b1c:	4632      	mov	r2, r6
 8016b1e:	4641      	mov	r1, r8
 8016b20:	f000 fd2c 	bl	801757c <memmove>
 8016b24:	68a3      	ldr	r3, [r4, #8]
 8016b26:	1b9b      	subs	r3, r3, r6
 8016b28:	60a3      	str	r3, [r4, #8]
 8016b2a:	6823      	ldr	r3, [r4, #0]
 8016b2c:	4433      	add	r3, r6
 8016b2e:	6023      	str	r3, [r4, #0]
 8016b30:	2000      	movs	r0, #0
 8016b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b36:	462a      	mov	r2, r5
 8016b38:	f000 fd7a 	bl	8017630 <_realloc_r>
 8016b3c:	4606      	mov	r6, r0
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d1e0      	bne.n	8016b04 <__ssputs_r+0x5c>
 8016b42:	6921      	ldr	r1, [r4, #16]
 8016b44:	4650      	mov	r0, sl
 8016b46:	f7ff feb7 	bl	80168b8 <_free_r>
 8016b4a:	230c      	movs	r3, #12
 8016b4c:	f8ca 3000 	str.w	r3, [sl]
 8016b50:	89a3      	ldrh	r3, [r4, #12]
 8016b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b56:	81a3      	strh	r3, [r4, #12]
 8016b58:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5c:	e7e9      	b.n	8016b32 <__ssputs_r+0x8a>
	...

08016b60 <_svfiprintf_r>:
 8016b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b64:	4698      	mov	r8, r3
 8016b66:	898b      	ldrh	r3, [r1, #12]
 8016b68:	061b      	lsls	r3, r3, #24
 8016b6a:	b09d      	sub	sp, #116	@ 0x74
 8016b6c:	4607      	mov	r7, r0
 8016b6e:	460d      	mov	r5, r1
 8016b70:	4614      	mov	r4, r2
 8016b72:	d510      	bpl.n	8016b96 <_svfiprintf_r+0x36>
 8016b74:	690b      	ldr	r3, [r1, #16]
 8016b76:	b973      	cbnz	r3, 8016b96 <_svfiprintf_r+0x36>
 8016b78:	2140      	movs	r1, #64	@ 0x40
 8016b7a:	f7ff ff09 	bl	8016990 <_malloc_r>
 8016b7e:	6028      	str	r0, [r5, #0]
 8016b80:	6128      	str	r0, [r5, #16]
 8016b82:	b930      	cbnz	r0, 8016b92 <_svfiprintf_r+0x32>
 8016b84:	230c      	movs	r3, #12
 8016b86:	603b      	str	r3, [r7, #0]
 8016b88:	f04f 30ff 	mov.w	r0, #4294967295
 8016b8c:	b01d      	add	sp, #116	@ 0x74
 8016b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b92:	2340      	movs	r3, #64	@ 0x40
 8016b94:	616b      	str	r3, [r5, #20]
 8016b96:	2300      	movs	r3, #0
 8016b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b9a:	2320      	movs	r3, #32
 8016b9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ba4:	2330      	movs	r3, #48	@ 0x30
 8016ba6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016d44 <_svfiprintf_r+0x1e4>
 8016baa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016bae:	f04f 0901 	mov.w	r9, #1
 8016bb2:	4623      	mov	r3, r4
 8016bb4:	469a      	mov	sl, r3
 8016bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bba:	b10a      	cbz	r2, 8016bc0 <_svfiprintf_r+0x60>
 8016bbc:	2a25      	cmp	r2, #37	@ 0x25
 8016bbe:	d1f9      	bne.n	8016bb4 <_svfiprintf_r+0x54>
 8016bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8016bc4:	d00b      	beq.n	8016bde <_svfiprintf_r+0x7e>
 8016bc6:	465b      	mov	r3, fp
 8016bc8:	4622      	mov	r2, r4
 8016bca:	4629      	mov	r1, r5
 8016bcc:	4638      	mov	r0, r7
 8016bce:	f7ff ff6b 	bl	8016aa8 <__ssputs_r>
 8016bd2:	3001      	adds	r0, #1
 8016bd4:	f000 80a7 	beq.w	8016d26 <_svfiprintf_r+0x1c6>
 8016bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bda:	445a      	add	r2, fp
 8016bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8016bde:	f89a 3000 	ldrb.w	r3, [sl]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	f000 809f 	beq.w	8016d26 <_svfiprintf_r+0x1c6>
 8016be8:	2300      	movs	r3, #0
 8016bea:	f04f 32ff 	mov.w	r2, #4294967295
 8016bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bf2:	f10a 0a01 	add.w	sl, sl, #1
 8016bf6:	9304      	str	r3, [sp, #16]
 8016bf8:	9307      	str	r3, [sp, #28]
 8016bfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016bfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c00:	4654      	mov	r4, sl
 8016c02:	2205      	movs	r2, #5
 8016c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c08:	484e      	ldr	r0, [pc, #312]	@ (8016d44 <_svfiprintf_r+0x1e4>)
 8016c0a:	f7e9 fac1 	bl	8000190 <memchr>
 8016c0e:	9a04      	ldr	r2, [sp, #16]
 8016c10:	b9d8      	cbnz	r0, 8016c4a <_svfiprintf_r+0xea>
 8016c12:	06d0      	lsls	r0, r2, #27
 8016c14:	bf44      	itt	mi
 8016c16:	2320      	movmi	r3, #32
 8016c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c1c:	0711      	lsls	r1, r2, #28
 8016c1e:	bf44      	itt	mi
 8016c20:	232b      	movmi	r3, #43	@ 0x2b
 8016c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c26:	f89a 3000 	ldrb.w	r3, [sl]
 8016c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c2c:	d015      	beq.n	8016c5a <_svfiprintf_r+0xfa>
 8016c2e:	9a07      	ldr	r2, [sp, #28]
 8016c30:	4654      	mov	r4, sl
 8016c32:	2000      	movs	r0, #0
 8016c34:	f04f 0c0a 	mov.w	ip, #10
 8016c38:	4621      	mov	r1, r4
 8016c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c3e:	3b30      	subs	r3, #48	@ 0x30
 8016c40:	2b09      	cmp	r3, #9
 8016c42:	d94b      	bls.n	8016cdc <_svfiprintf_r+0x17c>
 8016c44:	b1b0      	cbz	r0, 8016c74 <_svfiprintf_r+0x114>
 8016c46:	9207      	str	r2, [sp, #28]
 8016c48:	e014      	b.n	8016c74 <_svfiprintf_r+0x114>
 8016c4a:	eba0 0308 	sub.w	r3, r0, r8
 8016c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8016c52:	4313      	orrs	r3, r2
 8016c54:	9304      	str	r3, [sp, #16]
 8016c56:	46a2      	mov	sl, r4
 8016c58:	e7d2      	b.n	8016c00 <_svfiprintf_r+0xa0>
 8016c5a:	9b03      	ldr	r3, [sp, #12]
 8016c5c:	1d19      	adds	r1, r3, #4
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	9103      	str	r1, [sp, #12]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	bfbb      	ittet	lt
 8016c66:	425b      	neglt	r3, r3
 8016c68:	f042 0202 	orrlt.w	r2, r2, #2
 8016c6c:	9307      	strge	r3, [sp, #28]
 8016c6e:	9307      	strlt	r3, [sp, #28]
 8016c70:	bfb8      	it	lt
 8016c72:	9204      	strlt	r2, [sp, #16]
 8016c74:	7823      	ldrb	r3, [r4, #0]
 8016c76:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c78:	d10a      	bne.n	8016c90 <_svfiprintf_r+0x130>
 8016c7a:	7863      	ldrb	r3, [r4, #1]
 8016c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c7e:	d132      	bne.n	8016ce6 <_svfiprintf_r+0x186>
 8016c80:	9b03      	ldr	r3, [sp, #12]
 8016c82:	1d1a      	adds	r2, r3, #4
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	9203      	str	r2, [sp, #12]
 8016c88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c8c:	3402      	adds	r4, #2
 8016c8e:	9305      	str	r3, [sp, #20]
 8016c90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016d54 <_svfiprintf_r+0x1f4>
 8016c94:	7821      	ldrb	r1, [r4, #0]
 8016c96:	2203      	movs	r2, #3
 8016c98:	4650      	mov	r0, sl
 8016c9a:	f7e9 fa79 	bl	8000190 <memchr>
 8016c9e:	b138      	cbz	r0, 8016cb0 <_svfiprintf_r+0x150>
 8016ca0:	9b04      	ldr	r3, [sp, #16]
 8016ca2:	eba0 000a 	sub.w	r0, r0, sl
 8016ca6:	2240      	movs	r2, #64	@ 0x40
 8016ca8:	4082      	lsls	r2, r0
 8016caa:	4313      	orrs	r3, r2
 8016cac:	3401      	adds	r4, #1
 8016cae:	9304      	str	r3, [sp, #16]
 8016cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cb4:	4824      	ldr	r0, [pc, #144]	@ (8016d48 <_svfiprintf_r+0x1e8>)
 8016cb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016cba:	2206      	movs	r2, #6
 8016cbc:	f7e9 fa68 	bl	8000190 <memchr>
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	d036      	beq.n	8016d32 <_svfiprintf_r+0x1d2>
 8016cc4:	4b21      	ldr	r3, [pc, #132]	@ (8016d4c <_svfiprintf_r+0x1ec>)
 8016cc6:	bb1b      	cbnz	r3, 8016d10 <_svfiprintf_r+0x1b0>
 8016cc8:	9b03      	ldr	r3, [sp, #12]
 8016cca:	3307      	adds	r3, #7
 8016ccc:	f023 0307 	bic.w	r3, r3, #7
 8016cd0:	3308      	adds	r3, #8
 8016cd2:	9303      	str	r3, [sp, #12]
 8016cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cd6:	4433      	add	r3, r6
 8016cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cda:	e76a      	b.n	8016bb2 <_svfiprintf_r+0x52>
 8016cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ce0:	460c      	mov	r4, r1
 8016ce2:	2001      	movs	r0, #1
 8016ce4:	e7a8      	b.n	8016c38 <_svfiprintf_r+0xd8>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	3401      	adds	r4, #1
 8016cea:	9305      	str	r3, [sp, #20]
 8016cec:	4619      	mov	r1, r3
 8016cee:	f04f 0c0a 	mov.w	ip, #10
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cf8:	3a30      	subs	r2, #48	@ 0x30
 8016cfa:	2a09      	cmp	r2, #9
 8016cfc:	d903      	bls.n	8016d06 <_svfiprintf_r+0x1a6>
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d0c6      	beq.n	8016c90 <_svfiprintf_r+0x130>
 8016d02:	9105      	str	r1, [sp, #20]
 8016d04:	e7c4      	b.n	8016c90 <_svfiprintf_r+0x130>
 8016d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	e7f0      	b.n	8016cf2 <_svfiprintf_r+0x192>
 8016d10:	ab03      	add	r3, sp, #12
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	462a      	mov	r2, r5
 8016d16:	4b0e      	ldr	r3, [pc, #56]	@ (8016d50 <_svfiprintf_r+0x1f0>)
 8016d18:	a904      	add	r1, sp, #16
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	f3af 8000 	nop.w
 8016d20:	1c42      	adds	r2, r0, #1
 8016d22:	4606      	mov	r6, r0
 8016d24:	d1d6      	bne.n	8016cd4 <_svfiprintf_r+0x174>
 8016d26:	89ab      	ldrh	r3, [r5, #12]
 8016d28:	065b      	lsls	r3, r3, #25
 8016d2a:	f53f af2d 	bmi.w	8016b88 <_svfiprintf_r+0x28>
 8016d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d30:	e72c      	b.n	8016b8c <_svfiprintf_r+0x2c>
 8016d32:	ab03      	add	r3, sp, #12
 8016d34:	9300      	str	r3, [sp, #0]
 8016d36:	462a      	mov	r2, r5
 8016d38:	4b05      	ldr	r3, [pc, #20]	@ (8016d50 <_svfiprintf_r+0x1f0>)
 8016d3a:	a904      	add	r1, sp, #16
 8016d3c:	4638      	mov	r0, r7
 8016d3e:	f000 f9bb 	bl	80170b8 <_printf_i>
 8016d42:	e7ed      	b.n	8016d20 <_svfiprintf_r+0x1c0>
 8016d44:	080193b4 	.word	0x080193b4
 8016d48:	080193be 	.word	0x080193be
 8016d4c:	00000000 	.word	0x00000000
 8016d50:	08016aa9 	.word	0x08016aa9
 8016d54:	080193ba 	.word	0x080193ba

08016d58 <__sfputc_r>:
 8016d58:	6893      	ldr	r3, [r2, #8]
 8016d5a:	3b01      	subs	r3, #1
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	b410      	push	{r4}
 8016d60:	6093      	str	r3, [r2, #8]
 8016d62:	da08      	bge.n	8016d76 <__sfputc_r+0x1e>
 8016d64:	6994      	ldr	r4, [r2, #24]
 8016d66:	42a3      	cmp	r3, r4
 8016d68:	db01      	blt.n	8016d6e <__sfputc_r+0x16>
 8016d6a:	290a      	cmp	r1, #10
 8016d6c:	d103      	bne.n	8016d76 <__sfputc_r+0x1e>
 8016d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d72:	f7ff bc5b 	b.w	801662c <__swbuf_r>
 8016d76:	6813      	ldr	r3, [r2, #0]
 8016d78:	1c58      	adds	r0, r3, #1
 8016d7a:	6010      	str	r0, [r2, #0]
 8016d7c:	7019      	strb	r1, [r3, #0]
 8016d7e:	4608      	mov	r0, r1
 8016d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d84:	4770      	bx	lr

08016d86 <__sfputs_r>:
 8016d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d88:	4606      	mov	r6, r0
 8016d8a:	460f      	mov	r7, r1
 8016d8c:	4614      	mov	r4, r2
 8016d8e:	18d5      	adds	r5, r2, r3
 8016d90:	42ac      	cmp	r4, r5
 8016d92:	d101      	bne.n	8016d98 <__sfputs_r+0x12>
 8016d94:	2000      	movs	r0, #0
 8016d96:	e007      	b.n	8016da8 <__sfputs_r+0x22>
 8016d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d9c:	463a      	mov	r2, r7
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f7ff ffda 	bl	8016d58 <__sfputc_r>
 8016da4:	1c43      	adds	r3, r0, #1
 8016da6:	d1f3      	bne.n	8016d90 <__sfputs_r+0xa>
 8016da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016dac <_vfiprintf_r>:
 8016dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	460d      	mov	r5, r1
 8016db2:	b09d      	sub	sp, #116	@ 0x74
 8016db4:	4614      	mov	r4, r2
 8016db6:	4698      	mov	r8, r3
 8016db8:	4606      	mov	r6, r0
 8016dba:	b118      	cbz	r0, 8016dc4 <_vfiprintf_r+0x18>
 8016dbc:	6a03      	ldr	r3, [r0, #32]
 8016dbe:	b90b      	cbnz	r3, 8016dc4 <_vfiprintf_r+0x18>
 8016dc0:	f7ff fb0a 	bl	80163d8 <__sinit>
 8016dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dc6:	07d9      	lsls	r1, r3, #31
 8016dc8:	d405      	bmi.n	8016dd6 <_vfiprintf_r+0x2a>
 8016dca:	89ab      	ldrh	r3, [r5, #12]
 8016dcc:	059a      	lsls	r2, r3, #22
 8016dce:	d402      	bmi.n	8016dd6 <_vfiprintf_r+0x2a>
 8016dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016dd2:	f7ff fd60 	bl	8016896 <__retarget_lock_acquire_recursive>
 8016dd6:	89ab      	ldrh	r3, [r5, #12]
 8016dd8:	071b      	lsls	r3, r3, #28
 8016dda:	d501      	bpl.n	8016de0 <_vfiprintf_r+0x34>
 8016ddc:	692b      	ldr	r3, [r5, #16]
 8016dde:	b99b      	cbnz	r3, 8016e08 <_vfiprintf_r+0x5c>
 8016de0:	4629      	mov	r1, r5
 8016de2:	4630      	mov	r0, r6
 8016de4:	f7ff fc60 	bl	80166a8 <__swsetup_r>
 8016de8:	b170      	cbz	r0, 8016e08 <_vfiprintf_r+0x5c>
 8016dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dec:	07dc      	lsls	r4, r3, #31
 8016dee:	d504      	bpl.n	8016dfa <_vfiprintf_r+0x4e>
 8016df0:	f04f 30ff 	mov.w	r0, #4294967295
 8016df4:	b01d      	add	sp, #116	@ 0x74
 8016df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfa:	89ab      	ldrh	r3, [r5, #12]
 8016dfc:	0598      	lsls	r0, r3, #22
 8016dfe:	d4f7      	bmi.n	8016df0 <_vfiprintf_r+0x44>
 8016e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e02:	f7ff fd49 	bl	8016898 <__retarget_lock_release_recursive>
 8016e06:	e7f3      	b.n	8016df0 <_vfiprintf_r+0x44>
 8016e08:	2300      	movs	r3, #0
 8016e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e0c:	2320      	movs	r3, #32
 8016e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e16:	2330      	movs	r3, #48	@ 0x30
 8016e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016fc8 <_vfiprintf_r+0x21c>
 8016e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e20:	f04f 0901 	mov.w	r9, #1
 8016e24:	4623      	mov	r3, r4
 8016e26:	469a      	mov	sl, r3
 8016e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e2c:	b10a      	cbz	r2, 8016e32 <_vfiprintf_r+0x86>
 8016e2e:	2a25      	cmp	r2, #37	@ 0x25
 8016e30:	d1f9      	bne.n	8016e26 <_vfiprintf_r+0x7a>
 8016e32:	ebba 0b04 	subs.w	fp, sl, r4
 8016e36:	d00b      	beq.n	8016e50 <_vfiprintf_r+0xa4>
 8016e38:	465b      	mov	r3, fp
 8016e3a:	4622      	mov	r2, r4
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	4630      	mov	r0, r6
 8016e40:	f7ff ffa1 	bl	8016d86 <__sfputs_r>
 8016e44:	3001      	adds	r0, #1
 8016e46:	f000 80a7 	beq.w	8016f98 <_vfiprintf_r+0x1ec>
 8016e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e4c:	445a      	add	r2, fp
 8016e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e50:	f89a 3000 	ldrb.w	r3, [sl]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f000 809f 	beq.w	8016f98 <_vfiprintf_r+0x1ec>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e64:	f10a 0a01 	add.w	sl, sl, #1
 8016e68:	9304      	str	r3, [sp, #16]
 8016e6a:	9307      	str	r3, [sp, #28]
 8016e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e72:	4654      	mov	r4, sl
 8016e74:	2205      	movs	r2, #5
 8016e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e7a:	4853      	ldr	r0, [pc, #332]	@ (8016fc8 <_vfiprintf_r+0x21c>)
 8016e7c:	f7e9 f988 	bl	8000190 <memchr>
 8016e80:	9a04      	ldr	r2, [sp, #16]
 8016e82:	b9d8      	cbnz	r0, 8016ebc <_vfiprintf_r+0x110>
 8016e84:	06d1      	lsls	r1, r2, #27
 8016e86:	bf44      	itt	mi
 8016e88:	2320      	movmi	r3, #32
 8016e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e8e:	0713      	lsls	r3, r2, #28
 8016e90:	bf44      	itt	mi
 8016e92:	232b      	movmi	r3, #43	@ 0x2b
 8016e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e98:	f89a 3000 	ldrb.w	r3, [sl]
 8016e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e9e:	d015      	beq.n	8016ecc <_vfiprintf_r+0x120>
 8016ea0:	9a07      	ldr	r2, [sp, #28]
 8016ea2:	4654      	mov	r4, sl
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	f04f 0c0a 	mov.w	ip, #10
 8016eaa:	4621      	mov	r1, r4
 8016eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016eb0:	3b30      	subs	r3, #48	@ 0x30
 8016eb2:	2b09      	cmp	r3, #9
 8016eb4:	d94b      	bls.n	8016f4e <_vfiprintf_r+0x1a2>
 8016eb6:	b1b0      	cbz	r0, 8016ee6 <_vfiprintf_r+0x13a>
 8016eb8:	9207      	str	r2, [sp, #28]
 8016eba:	e014      	b.n	8016ee6 <_vfiprintf_r+0x13a>
 8016ebc:	eba0 0308 	sub.w	r3, r0, r8
 8016ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8016ec4:	4313      	orrs	r3, r2
 8016ec6:	9304      	str	r3, [sp, #16]
 8016ec8:	46a2      	mov	sl, r4
 8016eca:	e7d2      	b.n	8016e72 <_vfiprintf_r+0xc6>
 8016ecc:	9b03      	ldr	r3, [sp, #12]
 8016ece:	1d19      	adds	r1, r3, #4
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	9103      	str	r1, [sp, #12]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	bfbb      	ittet	lt
 8016ed8:	425b      	neglt	r3, r3
 8016eda:	f042 0202 	orrlt.w	r2, r2, #2
 8016ede:	9307      	strge	r3, [sp, #28]
 8016ee0:	9307      	strlt	r3, [sp, #28]
 8016ee2:	bfb8      	it	lt
 8016ee4:	9204      	strlt	r2, [sp, #16]
 8016ee6:	7823      	ldrb	r3, [r4, #0]
 8016ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8016eea:	d10a      	bne.n	8016f02 <_vfiprintf_r+0x156>
 8016eec:	7863      	ldrb	r3, [r4, #1]
 8016eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ef0:	d132      	bne.n	8016f58 <_vfiprintf_r+0x1ac>
 8016ef2:	9b03      	ldr	r3, [sp, #12]
 8016ef4:	1d1a      	adds	r2, r3, #4
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	9203      	str	r2, [sp, #12]
 8016efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016efe:	3402      	adds	r4, #2
 8016f00:	9305      	str	r3, [sp, #20]
 8016f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016fd8 <_vfiprintf_r+0x22c>
 8016f06:	7821      	ldrb	r1, [r4, #0]
 8016f08:	2203      	movs	r2, #3
 8016f0a:	4650      	mov	r0, sl
 8016f0c:	f7e9 f940 	bl	8000190 <memchr>
 8016f10:	b138      	cbz	r0, 8016f22 <_vfiprintf_r+0x176>
 8016f12:	9b04      	ldr	r3, [sp, #16]
 8016f14:	eba0 000a 	sub.w	r0, r0, sl
 8016f18:	2240      	movs	r2, #64	@ 0x40
 8016f1a:	4082      	lsls	r2, r0
 8016f1c:	4313      	orrs	r3, r2
 8016f1e:	3401      	adds	r4, #1
 8016f20:	9304      	str	r3, [sp, #16]
 8016f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f26:	4829      	ldr	r0, [pc, #164]	@ (8016fcc <_vfiprintf_r+0x220>)
 8016f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f2c:	2206      	movs	r2, #6
 8016f2e:	f7e9 f92f 	bl	8000190 <memchr>
 8016f32:	2800      	cmp	r0, #0
 8016f34:	d03f      	beq.n	8016fb6 <_vfiprintf_r+0x20a>
 8016f36:	4b26      	ldr	r3, [pc, #152]	@ (8016fd0 <_vfiprintf_r+0x224>)
 8016f38:	bb1b      	cbnz	r3, 8016f82 <_vfiprintf_r+0x1d6>
 8016f3a:	9b03      	ldr	r3, [sp, #12]
 8016f3c:	3307      	adds	r3, #7
 8016f3e:	f023 0307 	bic.w	r3, r3, #7
 8016f42:	3308      	adds	r3, #8
 8016f44:	9303      	str	r3, [sp, #12]
 8016f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f48:	443b      	add	r3, r7
 8016f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f4c:	e76a      	b.n	8016e24 <_vfiprintf_r+0x78>
 8016f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f52:	460c      	mov	r4, r1
 8016f54:	2001      	movs	r0, #1
 8016f56:	e7a8      	b.n	8016eaa <_vfiprintf_r+0xfe>
 8016f58:	2300      	movs	r3, #0
 8016f5a:	3401      	adds	r4, #1
 8016f5c:	9305      	str	r3, [sp, #20]
 8016f5e:	4619      	mov	r1, r3
 8016f60:	f04f 0c0a 	mov.w	ip, #10
 8016f64:	4620      	mov	r0, r4
 8016f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f6a:	3a30      	subs	r2, #48	@ 0x30
 8016f6c:	2a09      	cmp	r2, #9
 8016f6e:	d903      	bls.n	8016f78 <_vfiprintf_r+0x1cc>
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d0c6      	beq.n	8016f02 <_vfiprintf_r+0x156>
 8016f74:	9105      	str	r1, [sp, #20]
 8016f76:	e7c4      	b.n	8016f02 <_vfiprintf_r+0x156>
 8016f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f7c:	4604      	mov	r4, r0
 8016f7e:	2301      	movs	r3, #1
 8016f80:	e7f0      	b.n	8016f64 <_vfiprintf_r+0x1b8>
 8016f82:	ab03      	add	r3, sp, #12
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	462a      	mov	r2, r5
 8016f88:	4b12      	ldr	r3, [pc, #72]	@ (8016fd4 <_vfiprintf_r+0x228>)
 8016f8a:	a904      	add	r1, sp, #16
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f3af 8000 	nop.w
 8016f92:	4607      	mov	r7, r0
 8016f94:	1c78      	adds	r0, r7, #1
 8016f96:	d1d6      	bne.n	8016f46 <_vfiprintf_r+0x19a>
 8016f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f9a:	07d9      	lsls	r1, r3, #31
 8016f9c:	d405      	bmi.n	8016faa <_vfiprintf_r+0x1fe>
 8016f9e:	89ab      	ldrh	r3, [r5, #12]
 8016fa0:	059a      	lsls	r2, r3, #22
 8016fa2:	d402      	bmi.n	8016faa <_vfiprintf_r+0x1fe>
 8016fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fa6:	f7ff fc77 	bl	8016898 <__retarget_lock_release_recursive>
 8016faa:	89ab      	ldrh	r3, [r5, #12]
 8016fac:	065b      	lsls	r3, r3, #25
 8016fae:	f53f af1f 	bmi.w	8016df0 <_vfiprintf_r+0x44>
 8016fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fb4:	e71e      	b.n	8016df4 <_vfiprintf_r+0x48>
 8016fb6:	ab03      	add	r3, sp, #12
 8016fb8:	9300      	str	r3, [sp, #0]
 8016fba:	462a      	mov	r2, r5
 8016fbc:	4b05      	ldr	r3, [pc, #20]	@ (8016fd4 <_vfiprintf_r+0x228>)
 8016fbe:	a904      	add	r1, sp, #16
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f000 f879 	bl	80170b8 <_printf_i>
 8016fc6:	e7e4      	b.n	8016f92 <_vfiprintf_r+0x1e6>
 8016fc8:	080193b4 	.word	0x080193b4
 8016fcc:	080193be 	.word	0x080193be
 8016fd0:	00000000 	.word	0x00000000
 8016fd4:	08016d87 	.word	0x08016d87
 8016fd8:	080193ba 	.word	0x080193ba

08016fdc <_printf_common>:
 8016fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fe0:	4616      	mov	r6, r2
 8016fe2:	4698      	mov	r8, r3
 8016fe4:	688a      	ldr	r2, [r1, #8]
 8016fe6:	690b      	ldr	r3, [r1, #16]
 8016fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016fec:	4293      	cmp	r3, r2
 8016fee:	bfb8      	it	lt
 8016ff0:	4613      	movlt	r3, r2
 8016ff2:	6033      	str	r3, [r6, #0]
 8016ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016ff8:	4607      	mov	r7, r0
 8016ffa:	460c      	mov	r4, r1
 8016ffc:	b10a      	cbz	r2, 8017002 <_printf_common+0x26>
 8016ffe:	3301      	adds	r3, #1
 8017000:	6033      	str	r3, [r6, #0]
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	0699      	lsls	r1, r3, #26
 8017006:	bf42      	ittt	mi
 8017008:	6833      	ldrmi	r3, [r6, #0]
 801700a:	3302      	addmi	r3, #2
 801700c:	6033      	strmi	r3, [r6, #0]
 801700e:	6825      	ldr	r5, [r4, #0]
 8017010:	f015 0506 	ands.w	r5, r5, #6
 8017014:	d106      	bne.n	8017024 <_printf_common+0x48>
 8017016:	f104 0a19 	add.w	sl, r4, #25
 801701a:	68e3      	ldr	r3, [r4, #12]
 801701c:	6832      	ldr	r2, [r6, #0]
 801701e:	1a9b      	subs	r3, r3, r2
 8017020:	42ab      	cmp	r3, r5
 8017022:	dc26      	bgt.n	8017072 <_printf_common+0x96>
 8017024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017028:	6822      	ldr	r2, [r4, #0]
 801702a:	3b00      	subs	r3, #0
 801702c:	bf18      	it	ne
 801702e:	2301      	movne	r3, #1
 8017030:	0692      	lsls	r2, r2, #26
 8017032:	d42b      	bmi.n	801708c <_printf_common+0xb0>
 8017034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017038:	4641      	mov	r1, r8
 801703a:	4638      	mov	r0, r7
 801703c:	47c8      	blx	r9
 801703e:	3001      	adds	r0, #1
 8017040:	d01e      	beq.n	8017080 <_printf_common+0xa4>
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	6922      	ldr	r2, [r4, #16]
 8017046:	f003 0306 	and.w	r3, r3, #6
 801704a:	2b04      	cmp	r3, #4
 801704c:	bf02      	ittt	eq
 801704e:	68e5      	ldreq	r5, [r4, #12]
 8017050:	6833      	ldreq	r3, [r6, #0]
 8017052:	1aed      	subeq	r5, r5, r3
 8017054:	68a3      	ldr	r3, [r4, #8]
 8017056:	bf0c      	ite	eq
 8017058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801705c:	2500      	movne	r5, #0
 801705e:	4293      	cmp	r3, r2
 8017060:	bfc4      	itt	gt
 8017062:	1a9b      	subgt	r3, r3, r2
 8017064:	18ed      	addgt	r5, r5, r3
 8017066:	2600      	movs	r6, #0
 8017068:	341a      	adds	r4, #26
 801706a:	42b5      	cmp	r5, r6
 801706c:	d11a      	bne.n	80170a4 <_printf_common+0xc8>
 801706e:	2000      	movs	r0, #0
 8017070:	e008      	b.n	8017084 <_printf_common+0xa8>
 8017072:	2301      	movs	r3, #1
 8017074:	4652      	mov	r2, sl
 8017076:	4641      	mov	r1, r8
 8017078:	4638      	mov	r0, r7
 801707a:	47c8      	blx	r9
 801707c:	3001      	adds	r0, #1
 801707e:	d103      	bne.n	8017088 <_printf_common+0xac>
 8017080:	f04f 30ff 	mov.w	r0, #4294967295
 8017084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017088:	3501      	adds	r5, #1
 801708a:	e7c6      	b.n	801701a <_printf_common+0x3e>
 801708c:	18e1      	adds	r1, r4, r3
 801708e:	1c5a      	adds	r2, r3, #1
 8017090:	2030      	movs	r0, #48	@ 0x30
 8017092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017096:	4422      	add	r2, r4
 8017098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801709c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80170a0:	3302      	adds	r3, #2
 80170a2:	e7c7      	b.n	8017034 <_printf_common+0x58>
 80170a4:	2301      	movs	r3, #1
 80170a6:	4622      	mov	r2, r4
 80170a8:	4641      	mov	r1, r8
 80170aa:	4638      	mov	r0, r7
 80170ac:	47c8      	blx	r9
 80170ae:	3001      	adds	r0, #1
 80170b0:	d0e6      	beq.n	8017080 <_printf_common+0xa4>
 80170b2:	3601      	adds	r6, #1
 80170b4:	e7d9      	b.n	801706a <_printf_common+0x8e>
	...

080170b8 <_printf_i>:
 80170b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170bc:	7e0f      	ldrb	r7, [r1, #24]
 80170be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80170c0:	2f78      	cmp	r7, #120	@ 0x78
 80170c2:	4691      	mov	r9, r2
 80170c4:	4680      	mov	r8, r0
 80170c6:	460c      	mov	r4, r1
 80170c8:	469a      	mov	sl, r3
 80170ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80170ce:	d807      	bhi.n	80170e0 <_printf_i+0x28>
 80170d0:	2f62      	cmp	r7, #98	@ 0x62
 80170d2:	d80a      	bhi.n	80170ea <_printf_i+0x32>
 80170d4:	2f00      	cmp	r7, #0
 80170d6:	f000 80d2 	beq.w	801727e <_printf_i+0x1c6>
 80170da:	2f58      	cmp	r7, #88	@ 0x58
 80170dc:	f000 80b9 	beq.w	8017252 <_printf_i+0x19a>
 80170e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80170e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80170e8:	e03a      	b.n	8017160 <_printf_i+0xa8>
 80170ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80170ee:	2b15      	cmp	r3, #21
 80170f0:	d8f6      	bhi.n	80170e0 <_printf_i+0x28>
 80170f2:	a101      	add	r1, pc, #4	@ (adr r1, 80170f8 <_printf_i+0x40>)
 80170f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80170f8:	08017151 	.word	0x08017151
 80170fc:	08017165 	.word	0x08017165
 8017100:	080170e1 	.word	0x080170e1
 8017104:	080170e1 	.word	0x080170e1
 8017108:	080170e1 	.word	0x080170e1
 801710c:	080170e1 	.word	0x080170e1
 8017110:	08017165 	.word	0x08017165
 8017114:	080170e1 	.word	0x080170e1
 8017118:	080170e1 	.word	0x080170e1
 801711c:	080170e1 	.word	0x080170e1
 8017120:	080170e1 	.word	0x080170e1
 8017124:	08017265 	.word	0x08017265
 8017128:	0801718f 	.word	0x0801718f
 801712c:	0801721f 	.word	0x0801721f
 8017130:	080170e1 	.word	0x080170e1
 8017134:	080170e1 	.word	0x080170e1
 8017138:	08017287 	.word	0x08017287
 801713c:	080170e1 	.word	0x080170e1
 8017140:	0801718f 	.word	0x0801718f
 8017144:	080170e1 	.word	0x080170e1
 8017148:	080170e1 	.word	0x080170e1
 801714c:	08017227 	.word	0x08017227
 8017150:	6833      	ldr	r3, [r6, #0]
 8017152:	1d1a      	adds	r2, r3, #4
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	6032      	str	r2, [r6, #0]
 8017158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801715c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017160:	2301      	movs	r3, #1
 8017162:	e09d      	b.n	80172a0 <_printf_i+0x1e8>
 8017164:	6833      	ldr	r3, [r6, #0]
 8017166:	6820      	ldr	r0, [r4, #0]
 8017168:	1d19      	adds	r1, r3, #4
 801716a:	6031      	str	r1, [r6, #0]
 801716c:	0606      	lsls	r6, r0, #24
 801716e:	d501      	bpl.n	8017174 <_printf_i+0xbc>
 8017170:	681d      	ldr	r5, [r3, #0]
 8017172:	e003      	b.n	801717c <_printf_i+0xc4>
 8017174:	0645      	lsls	r5, r0, #25
 8017176:	d5fb      	bpl.n	8017170 <_printf_i+0xb8>
 8017178:	f9b3 5000 	ldrsh.w	r5, [r3]
 801717c:	2d00      	cmp	r5, #0
 801717e:	da03      	bge.n	8017188 <_printf_i+0xd0>
 8017180:	232d      	movs	r3, #45	@ 0x2d
 8017182:	426d      	negs	r5, r5
 8017184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017188:	4859      	ldr	r0, [pc, #356]	@ (80172f0 <_printf_i+0x238>)
 801718a:	230a      	movs	r3, #10
 801718c:	e011      	b.n	80171b2 <_printf_i+0xfa>
 801718e:	6821      	ldr	r1, [r4, #0]
 8017190:	6833      	ldr	r3, [r6, #0]
 8017192:	0608      	lsls	r0, r1, #24
 8017194:	f853 5b04 	ldr.w	r5, [r3], #4
 8017198:	d402      	bmi.n	80171a0 <_printf_i+0xe8>
 801719a:	0649      	lsls	r1, r1, #25
 801719c:	bf48      	it	mi
 801719e:	b2ad      	uxthmi	r5, r5
 80171a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80171a2:	4853      	ldr	r0, [pc, #332]	@ (80172f0 <_printf_i+0x238>)
 80171a4:	6033      	str	r3, [r6, #0]
 80171a6:	bf14      	ite	ne
 80171a8:	230a      	movne	r3, #10
 80171aa:	2308      	moveq	r3, #8
 80171ac:	2100      	movs	r1, #0
 80171ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80171b2:	6866      	ldr	r6, [r4, #4]
 80171b4:	60a6      	str	r6, [r4, #8]
 80171b6:	2e00      	cmp	r6, #0
 80171b8:	bfa2      	ittt	ge
 80171ba:	6821      	ldrge	r1, [r4, #0]
 80171bc:	f021 0104 	bicge.w	r1, r1, #4
 80171c0:	6021      	strge	r1, [r4, #0]
 80171c2:	b90d      	cbnz	r5, 80171c8 <_printf_i+0x110>
 80171c4:	2e00      	cmp	r6, #0
 80171c6:	d04b      	beq.n	8017260 <_printf_i+0x1a8>
 80171c8:	4616      	mov	r6, r2
 80171ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80171ce:	fb03 5711 	mls	r7, r3, r1, r5
 80171d2:	5dc7      	ldrb	r7, [r0, r7]
 80171d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80171d8:	462f      	mov	r7, r5
 80171da:	42bb      	cmp	r3, r7
 80171dc:	460d      	mov	r5, r1
 80171de:	d9f4      	bls.n	80171ca <_printf_i+0x112>
 80171e0:	2b08      	cmp	r3, #8
 80171e2:	d10b      	bne.n	80171fc <_printf_i+0x144>
 80171e4:	6823      	ldr	r3, [r4, #0]
 80171e6:	07df      	lsls	r7, r3, #31
 80171e8:	d508      	bpl.n	80171fc <_printf_i+0x144>
 80171ea:	6923      	ldr	r3, [r4, #16]
 80171ec:	6861      	ldr	r1, [r4, #4]
 80171ee:	4299      	cmp	r1, r3
 80171f0:	bfde      	ittt	le
 80171f2:	2330      	movle	r3, #48	@ 0x30
 80171f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80171f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80171fc:	1b92      	subs	r2, r2, r6
 80171fe:	6122      	str	r2, [r4, #16]
 8017200:	f8cd a000 	str.w	sl, [sp]
 8017204:	464b      	mov	r3, r9
 8017206:	aa03      	add	r2, sp, #12
 8017208:	4621      	mov	r1, r4
 801720a:	4640      	mov	r0, r8
 801720c:	f7ff fee6 	bl	8016fdc <_printf_common>
 8017210:	3001      	adds	r0, #1
 8017212:	d14a      	bne.n	80172aa <_printf_i+0x1f2>
 8017214:	f04f 30ff 	mov.w	r0, #4294967295
 8017218:	b004      	add	sp, #16
 801721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	f043 0320 	orr.w	r3, r3, #32
 8017224:	6023      	str	r3, [r4, #0]
 8017226:	4833      	ldr	r0, [pc, #204]	@ (80172f4 <_printf_i+0x23c>)
 8017228:	2778      	movs	r7, #120	@ 0x78
 801722a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801722e:	6823      	ldr	r3, [r4, #0]
 8017230:	6831      	ldr	r1, [r6, #0]
 8017232:	061f      	lsls	r7, r3, #24
 8017234:	f851 5b04 	ldr.w	r5, [r1], #4
 8017238:	d402      	bmi.n	8017240 <_printf_i+0x188>
 801723a:	065f      	lsls	r7, r3, #25
 801723c:	bf48      	it	mi
 801723e:	b2ad      	uxthmi	r5, r5
 8017240:	6031      	str	r1, [r6, #0]
 8017242:	07d9      	lsls	r1, r3, #31
 8017244:	bf44      	itt	mi
 8017246:	f043 0320 	orrmi.w	r3, r3, #32
 801724a:	6023      	strmi	r3, [r4, #0]
 801724c:	b11d      	cbz	r5, 8017256 <_printf_i+0x19e>
 801724e:	2310      	movs	r3, #16
 8017250:	e7ac      	b.n	80171ac <_printf_i+0xf4>
 8017252:	4827      	ldr	r0, [pc, #156]	@ (80172f0 <_printf_i+0x238>)
 8017254:	e7e9      	b.n	801722a <_printf_i+0x172>
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	f023 0320 	bic.w	r3, r3, #32
 801725c:	6023      	str	r3, [r4, #0]
 801725e:	e7f6      	b.n	801724e <_printf_i+0x196>
 8017260:	4616      	mov	r6, r2
 8017262:	e7bd      	b.n	80171e0 <_printf_i+0x128>
 8017264:	6833      	ldr	r3, [r6, #0]
 8017266:	6825      	ldr	r5, [r4, #0]
 8017268:	6961      	ldr	r1, [r4, #20]
 801726a:	1d18      	adds	r0, r3, #4
 801726c:	6030      	str	r0, [r6, #0]
 801726e:	062e      	lsls	r6, r5, #24
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	d501      	bpl.n	8017278 <_printf_i+0x1c0>
 8017274:	6019      	str	r1, [r3, #0]
 8017276:	e002      	b.n	801727e <_printf_i+0x1c6>
 8017278:	0668      	lsls	r0, r5, #25
 801727a:	d5fb      	bpl.n	8017274 <_printf_i+0x1bc>
 801727c:	8019      	strh	r1, [r3, #0]
 801727e:	2300      	movs	r3, #0
 8017280:	6123      	str	r3, [r4, #16]
 8017282:	4616      	mov	r6, r2
 8017284:	e7bc      	b.n	8017200 <_printf_i+0x148>
 8017286:	6833      	ldr	r3, [r6, #0]
 8017288:	1d1a      	adds	r2, r3, #4
 801728a:	6032      	str	r2, [r6, #0]
 801728c:	681e      	ldr	r6, [r3, #0]
 801728e:	6862      	ldr	r2, [r4, #4]
 8017290:	2100      	movs	r1, #0
 8017292:	4630      	mov	r0, r6
 8017294:	f7e8 ff7c 	bl	8000190 <memchr>
 8017298:	b108      	cbz	r0, 801729e <_printf_i+0x1e6>
 801729a:	1b80      	subs	r0, r0, r6
 801729c:	6060      	str	r0, [r4, #4]
 801729e:	6863      	ldr	r3, [r4, #4]
 80172a0:	6123      	str	r3, [r4, #16]
 80172a2:	2300      	movs	r3, #0
 80172a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80172a8:	e7aa      	b.n	8017200 <_printf_i+0x148>
 80172aa:	6923      	ldr	r3, [r4, #16]
 80172ac:	4632      	mov	r2, r6
 80172ae:	4649      	mov	r1, r9
 80172b0:	4640      	mov	r0, r8
 80172b2:	47d0      	blx	sl
 80172b4:	3001      	adds	r0, #1
 80172b6:	d0ad      	beq.n	8017214 <_printf_i+0x15c>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	079b      	lsls	r3, r3, #30
 80172bc:	d413      	bmi.n	80172e6 <_printf_i+0x22e>
 80172be:	68e0      	ldr	r0, [r4, #12]
 80172c0:	9b03      	ldr	r3, [sp, #12]
 80172c2:	4298      	cmp	r0, r3
 80172c4:	bfb8      	it	lt
 80172c6:	4618      	movlt	r0, r3
 80172c8:	e7a6      	b.n	8017218 <_printf_i+0x160>
 80172ca:	2301      	movs	r3, #1
 80172cc:	4632      	mov	r2, r6
 80172ce:	4649      	mov	r1, r9
 80172d0:	4640      	mov	r0, r8
 80172d2:	47d0      	blx	sl
 80172d4:	3001      	adds	r0, #1
 80172d6:	d09d      	beq.n	8017214 <_printf_i+0x15c>
 80172d8:	3501      	adds	r5, #1
 80172da:	68e3      	ldr	r3, [r4, #12]
 80172dc:	9903      	ldr	r1, [sp, #12]
 80172de:	1a5b      	subs	r3, r3, r1
 80172e0:	42ab      	cmp	r3, r5
 80172e2:	dcf2      	bgt.n	80172ca <_printf_i+0x212>
 80172e4:	e7eb      	b.n	80172be <_printf_i+0x206>
 80172e6:	2500      	movs	r5, #0
 80172e8:	f104 0619 	add.w	r6, r4, #25
 80172ec:	e7f5      	b.n	80172da <_printf_i+0x222>
 80172ee:	bf00      	nop
 80172f0:	080193c5 	.word	0x080193c5
 80172f4:	080193d6 	.word	0x080193d6

080172f8 <__sflush_r>:
 80172f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017300:	0716      	lsls	r6, r2, #28
 8017302:	4605      	mov	r5, r0
 8017304:	460c      	mov	r4, r1
 8017306:	d454      	bmi.n	80173b2 <__sflush_r+0xba>
 8017308:	684b      	ldr	r3, [r1, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	dc02      	bgt.n	8017314 <__sflush_r+0x1c>
 801730e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017310:	2b00      	cmp	r3, #0
 8017312:	dd48      	ble.n	80173a6 <__sflush_r+0xae>
 8017314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017316:	2e00      	cmp	r6, #0
 8017318:	d045      	beq.n	80173a6 <__sflush_r+0xae>
 801731a:	2300      	movs	r3, #0
 801731c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017320:	682f      	ldr	r7, [r5, #0]
 8017322:	6a21      	ldr	r1, [r4, #32]
 8017324:	602b      	str	r3, [r5, #0]
 8017326:	d030      	beq.n	801738a <__sflush_r+0x92>
 8017328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801732a:	89a3      	ldrh	r3, [r4, #12]
 801732c:	0759      	lsls	r1, r3, #29
 801732e:	d505      	bpl.n	801733c <__sflush_r+0x44>
 8017330:	6863      	ldr	r3, [r4, #4]
 8017332:	1ad2      	subs	r2, r2, r3
 8017334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017336:	b10b      	cbz	r3, 801733c <__sflush_r+0x44>
 8017338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801733a:	1ad2      	subs	r2, r2, r3
 801733c:	2300      	movs	r3, #0
 801733e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017340:	6a21      	ldr	r1, [r4, #32]
 8017342:	4628      	mov	r0, r5
 8017344:	47b0      	blx	r6
 8017346:	1c43      	adds	r3, r0, #1
 8017348:	89a3      	ldrh	r3, [r4, #12]
 801734a:	d106      	bne.n	801735a <__sflush_r+0x62>
 801734c:	6829      	ldr	r1, [r5, #0]
 801734e:	291d      	cmp	r1, #29
 8017350:	d82b      	bhi.n	80173aa <__sflush_r+0xb2>
 8017352:	4a2a      	ldr	r2, [pc, #168]	@ (80173fc <__sflush_r+0x104>)
 8017354:	410a      	asrs	r2, r1
 8017356:	07d6      	lsls	r6, r2, #31
 8017358:	d427      	bmi.n	80173aa <__sflush_r+0xb2>
 801735a:	2200      	movs	r2, #0
 801735c:	6062      	str	r2, [r4, #4]
 801735e:	04d9      	lsls	r1, r3, #19
 8017360:	6922      	ldr	r2, [r4, #16]
 8017362:	6022      	str	r2, [r4, #0]
 8017364:	d504      	bpl.n	8017370 <__sflush_r+0x78>
 8017366:	1c42      	adds	r2, r0, #1
 8017368:	d101      	bne.n	801736e <__sflush_r+0x76>
 801736a:	682b      	ldr	r3, [r5, #0]
 801736c:	b903      	cbnz	r3, 8017370 <__sflush_r+0x78>
 801736e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017372:	602f      	str	r7, [r5, #0]
 8017374:	b1b9      	cbz	r1, 80173a6 <__sflush_r+0xae>
 8017376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801737a:	4299      	cmp	r1, r3
 801737c:	d002      	beq.n	8017384 <__sflush_r+0x8c>
 801737e:	4628      	mov	r0, r5
 8017380:	f7ff fa9a 	bl	80168b8 <_free_r>
 8017384:	2300      	movs	r3, #0
 8017386:	6363      	str	r3, [r4, #52]	@ 0x34
 8017388:	e00d      	b.n	80173a6 <__sflush_r+0xae>
 801738a:	2301      	movs	r3, #1
 801738c:	4628      	mov	r0, r5
 801738e:	47b0      	blx	r6
 8017390:	4602      	mov	r2, r0
 8017392:	1c50      	adds	r0, r2, #1
 8017394:	d1c9      	bne.n	801732a <__sflush_r+0x32>
 8017396:	682b      	ldr	r3, [r5, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d0c6      	beq.n	801732a <__sflush_r+0x32>
 801739c:	2b1d      	cmp	r3, #29
 801739e:	d001      	beq.n	80173a4 <__sflush_r+0xac>
 80173a0:	2b16      	cmp	r3, #22
 80173a2:	d11e      	bne.n	80173e2 <__sflush_r+0xea>
 80173a4:	602f      	str	r7, [r5, #0]
 80173a6:	2000      	movs	r0, #0
 80173a8:	e022      	b.n	80173f0 <__sflush_r+0xf8>
 80173aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173ae:	b21b      	sxth	r3, r3
 80173b0:	e01b      	b.n	80173ea <__sflush_r+0xf2>
 80173b2:	690f      	ldr	r7, [r1, #16]
 80173b4:	2f00      	cmp	r7, #0
 80173b6:	d0f6      	beq.n	80173a6 <__sflush_r+0xae>
 80173b8:	0793      	lsls	r3, r2, #30
 80173ba:	680e      	ldr	r6, [r1, #0]
 80173bc:	bf08      	it	eq
 80173be:	694b      	ldreq	r3, [r1, #20]
 80173c0:	600f      	str	r7, [r1, #0]
 80173c2:	bf18      	it	ne
 80173c4:	2300      	movne	r3, #0
 80173c6:	eba6 0807 	sub.w	r8, r6, r7
 80173ca:	608b      	str	r3, [r1, #8]
 80173cc:	f1b8 0f00 	cmp.w	r8, #0
 80173d0:	dde9      	ble.n	80173a6 <__sflush_r+0xae>
 80173d2:	6a21      	ldr	r1, [r4, #32]
 80173d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80173d6:	4643      	mov	r3, r8
 80173d8:	463a      	mov	r2, r7
 80173da:	4628      	mov	r0, r5
 80173dc:	47b0      	blx	r6
 80173de:	2800      	cmp	r0, #0
 80173e0:	dc08      	bgt.n	80173f4 <__sflush_r+0xfc>
 80173e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173ea:	81a3      	strh	r3, [r4, #12]
 80173ec:	f04f 30ff 	mov.w	r0, #4294967295
 80173f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f4:	4407      	add	r7, r0
 80173f6:	eba8 0800 	sub.w	r8, r8, r0
 80173fa:	e7e7      	b.n	80173cc <__sflush_r+0xd4>
 80173fc:	dfbffffe 	.word	0xdfbffffe

08017400 <_fflush_r>:
 8017400:	b538      	push	{r3, r4, r5, lr}
 8017402:	690b      	ldr	r3, [r1, #16]
 8017404:	4605      	mov	r5, r0
 8017406:	460c      	mov	r4, r1
 8017408:	b913      	cbnz	r3, 8017410 <_fflush_r+0x10>
 801740a:	2500      	movs	r5, #0
 801740c:	4628      	mov	r0, r5
 801740e:	bd38      	pop	{r3, r4, r5, pc}
 8017410:	b118      	cbz	r0, 801741a <_fflush_r+0x1a>
 8017412:	6a03      	ldr	r3, [r0, #32]
 8017414:	b90b      	cbnz	r3, 801741a <_fflush_r+0x1a>
 8017416:	f7fe ffdf 	bl	80163d8 <__sinit>
 801741a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d0f3      	beq.n	801740a <_fflush_r+0xa>
 8017422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017424:	07d0      	lsls	r0, r2, #31
 8017426:	d404      	bmi.n	8017432 <_fflush_r+0x32>
 8017428:	0599      	lsls	r1, r3, #22
 801742a:	d402      	bmi.n	8017432 <_fflush_r+0x32>
 801742c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801742e:	f7ff fa32 	bl	8016896 <__retarget_lock_acquire_recursive>
 8017432:	4628      	mov	r0, r5
 8017434:	4621      	mov	r1, r4
 8017436:	f7ff ff5f 	bl	80172f8 <__sflush_r>
 801743a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801743c:	07da      	lsls	r2, r3, #31
 801743e:	4605      	mov	r5, r0
 8017440:	d4e4      	bmi.n	801740c <_fflush_r+0xc>
 8017442:	89a3      	ldrh	r3, [r4, #12]
 8017444:	059b      	lsls	r3, r3, #22
 8017446:	d4e1      	bmi.n	801740c <_fflush_r+0xc>
 8017448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801744a:	f7ff fa25 	bl	8016898 <__retarget_lock_release_recursive>
 801744e:	e7dd      	b.n	801740c <_fflush_r+0xc>

08017450 <__swhatbuf_r>:
 8017450:	b570      	push	{r4, r5, r6, lr}
 8017452:	460c      	mov	r4, r1
 8017454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017458:	2900      	cmp	r1, #0
 801745a:	b096      	sub	sp, #88	@ 0x58
 801745c:	4615      	mov	r5, r2
 801745e:	461e      	mov	r6, r3
 8017460:	da0d      	bge.n	801747e <__swhatbuf_r+0x2e>
 8017462:	89a3      	ldrh	r3, [r4, #12]
 8017464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017468:	f04f 0100 	mov.w	r1, #0
 801746c:	bf14      	ite	ne
 801746e:	2340      	movne	r3, #64	@ 0x40
 8017470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017474:	2000      	movs	r0, #0
 8017476:	6031      	str	r1, [r6, #0]
 8017478:	602b      	str	r3, [r5, #0]
 801747a:	b016      	add	sp, #88	@ 0x58
 801747c:	bd70      	pop	{r4, r5, r6, pc}
 801747e:	466a      	mov	r2, sp
 8017480:	f000 f8a4 	bl	80175cc <_fstat_r>
 8017484:	2800      	cmp	r0, #0
 8017486:	dbec      	blt.n	8017462 <__swhatbuf_r+0x12>
 8017488:	9901      	ldr	r1, [sp, #4]
 801748a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801748e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017492:	4259      	negs	r1, r3
 8017494:	4159      	adcs	r1, r3
 8017496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801749a:	e7eb      	b.n	8017474 <__swhatbuf_r+0x24>

0801749c <__smakebuf_r>:
 801749c:	898b      	ldrh	r3, [r1, #12]
 801749e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174a0:	079d      	lsls	r5, r3, #30
 80174a2:	4606      	mov	r6, r0
 80174a4:	460c      	mov	r4, r1
 80174a6:	d507      	bpl.n	80174b8 <__smakebuf_r+0x1c>
 80174a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80174ac:	6023      	str	r3, [r4, #0]
 80174ae:	6123      	str	r3, [r4, #16]
 80174b0:	2301      	movs	r3, #1
 80174b2:	6163      	str	r3, [r4, #20]
 80174b4:	b003      	add	sp, #12
 80174b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174b8:	ab01      	add	r3, sp, #4
 80174ba:	466a      	mov	r2, sp
 80174bc:	f7ff ffc8 	bl	8017450 <__swhatbuf_r>
 80174c0:	9f00      	ldr	r7, [sp, #0]
 80174c2:	4605      	mov	r5, r0
 80174c4:	4639      	mov	r1, r7
 80174c6:	4630      	mov	r0, r6
 80174c8:	f7ff fa62 	bl	8016990 <_malloc_r>
 80174cc:	b948      	cbnz	r0, 80174e2 <__smakebuf_r+0x46>
 80174ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174d2:	059a      	lsls	r2, r3, #22
 80174d4:	d4ee      	bmi.n	80174b4 <__smakebuf_r+0x18>
 80174d6:	f023 0303 	bic.w	r3, r3, #3
 80174da:	f043 0302 	orr.w	r3, r3, #2
 80174de:	81a3      	strh	r3, [r4, #12]
 80174e0:	e7e2      	b.n	80174a8 <__smakebuf_r+0xc>
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	6020      	str	r0, [r4, #0]
 80174e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	9b01      	ldr	r3, [sp, #4]
 80174ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80174f2:	b15b      	cbz	r3, 801750c <__smakebuf_r+0x70>
 80174f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174f8:	4630      	mov	r0, r6
 80174fa:	f000 f879 	bl	80175f0 <_isatty_r>
 80174fe:	b128      	cbz	r0, 801750c <__smakebuf_r+0x70>
 8017500:	89a3      	ldrh	r3, [r4, #12]
 8017502:	f023 0303 	bic.w	r3, r3, #3
 8017506:	f043 0301 	orr.w	r3, r3, #1
 801750a:	81a3      	strh	r3, [r4, #12]
 801750c:	89a3      	ldrh	r3, [r4, #12]
 801750e:	431d      	orrs	r5, r3
 8017510:	81a5      	strh	r5, [r4, #12]
 8017512:	e7cf      	b.n	80174b4 <__smakebuf_r+0x18>

08017514 <_putc_r>:
 8017514:	b570      	push	{r4, r5, r6, lr}
 8017516:	460d      	mov	r5, r1
 8017518:	4614      	mov	r4, r2
 801751a:	4606      	mov	r6, r0
 801751c:	b118      	cbz	r0, 8017526 <_putc_r+0x12>
 801751e:	6a03      	ldr	r3, [r0, #32]
 8017520:	b90b      	cbnz	r3, 8017526 <_putc_r+0x12>
 8017522:	f7fe ff59 	bl	80163d8 <__sinit>
 8017526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017528:	07d8      	lsls	r0, r3, #31
 801752a:	d405      	bmi.n	8017538 <_putc_r+0x24>
 801752c:	89a3      	ldrh	r3, [r4, #12]
 801752e:	0599      	lsls	r1, r3, #22
 8017530:	d402      	bmi.n	8017538 <_putc_r+0x24>
 8017532:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017534:	f7ff f9af 	bl	8016896 <__retarget_lock_acquire_recursive>
 8017538:	68a3      	ldr	r3, [r4, #8]
 801753a:	3b01      	subs	r3, #1
 801753c:	2b00      	cmp	r3, #0
 801753e:	60a3      	str	r3, [r4, #8]
 8017540:	da05      	bge.n	801754e <_putc_r+0x3a>
 8017542:	69a2      	ldr	r2, [r4, #24]
 8017544:	4293      	cmp	r3, r2
 8017546:	db12      	blt.n	801756e <_putc_r+0x5a>
 8017548:	b2eb      	uxtb	r3, r5
 801754a:	2b0a      	cmp	r3, #10
 801754c:	d00f      	beq.n	801756e <_putc_r+0x5a>
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	1c5a      	adds	r2, r3, #1
 8017552:	6022      	str	r2, [r4, #0]
 8017554:	701d      	strb	r5, [r3, #0]
 8017556:	b2ed      	uxtb	r5, r5
 8017558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801755a:	07da      	lsls	r2, r3, #31
 801755c:	d405      	bmi.n	801756a <_putc_r+0x56>
 801755e:	89a3      	ldrh	r3, [r4, #12]
 8017560:	059b      	lsls	r3, r3, #22
 8017562:	d402      	bmi.n	801756a <_putc_r+0x56>
 8017564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017566:	f7ff f997 	bl	8016898 <__retarget_lock_release_recursive>
 801756a:	4628      	mov	r0, r5
 801756c:	bd70      	pop	{r4, r5, r6, pc}
 801756e:	4629      	mov	r1, r5
 8017570:	4622      	mov	r2, r4
 8017572:	4630      	mov	r0, r6
 8017574:	f7ff f85a 	bl	801662c <__swbuf_r>
 8017578:	4605      	mov	r5, r0
 801757a:	e7ed      	b.n	8017558 <_putc_r+0x44>

0801757c <memmove>:
 801757c:	4288      	cmp	r0, r1
 801757e:	b510      	push	{r4, lr}
 8017580:	eb01 0402 	add.w	r4, r1, r2
 8017584:	d902      	bls.n	801758c <memmove+0x10>
 8017586:	4284      	cmp	r4, r0
 8017588:	4623      	mov	r3, r4
 801758a:	d807      	bhi.n	801759c <memmove+0x20>
 801758c:	1e43      	subs	r3, r0, #1
 801758e:	42a1      	cmp	r1, r4
 8017590:	d008      	beq.n	80175a4 <memmove+0x28>
 8017592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017596:	f803 2f01 	strb.w	r2, [r3, #1]!
 801759a:	e7f8      	b.n	801758e <memmove+0x12>
 801759c:	4402      	add	r2, r0
 801759e:	4601      	mov	r1, r0
 80175a0:	428a      	cmp	r2, r1
 80175a2:	d100      	bne.n	80175a6 <memmove+0x2a>
 80175a4:	bd10      	pop	{r4, pc}
 80175a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80175ae:	e7f7      	b.n	80175a0 <memmove+0x24>

080175b0 <strchr>:
 80175b0:	b2c9      	uxtb	r1, r1
 80175b2:	4603      	mov	r3, r0
 80175b4:	4618      	mov	r0, r3
 80175b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175ba:	b112      	cbz	r2, 80175c2 <strchr+0x12>
 80175bc:	428a      	cmp	r2, r1
 80175be:	d1f9      	bne.n	80175b4 <strchr+0x4>
 80175c0:	4770      	bx	lr
 80175c2:	2900      	cmp	r1, #0
 80175c4:	bf18      	it	ne
 80175c6:	2000      	movne	r0, #0
 80175c8:	4770      	bx	lr
	...

080175cc <_fstat_r>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	4d07      	ldr	r5, [pc, #28]	@ (80175ec <_fstat_r+0x20>)
 80175d0:	2300      	movs	r3, #0
 80175d2:	4604      	mov	r4, r0
 80175d4:	4608      	mov	r0, r1
 80175d6:	4611      	mov	r1, r2
 80175d8:	602b      	str	r3, [r5, #0]
 80175da:	f7ed f93a 	bl	8004852 <_fstat>
 80175de:	1c43      	adds	r3, r0, #1
 80175e0:	d102      	bne.n	80175e8 <_fstat_r+0x1c>
 80175e2:	682b      	ldr	r3, [r5, #0]
 80175e4:	b103      	cbz	r3, 80175e8 <_fstat_r+0x1c>
 80175e6:	6023      	str	r3, [r4, #0]
 80175e8:	bd38      	pop	{r3, r4, r5, pc}
 80175ea:	bf00      	nop
 80175ec:	20002dac 	.word	0x20002dac

080175f0 <_isatty_r>:
 80175f0:	b538      	push	{r3, r4, r5, lr}
 80175f2:	4d06      	ldr	r5, [pc, #24]	@ (801760c <_isatty_r+0x1c>)
 80175f4:	2300      	movs	r3, #0
 80175f6:	4604      	mov	r4, r0
 80175f8:	4608      	mov	r0, r1
 80175fa:	602b      	str	r3, [r5, #0]
 80175fc:	f7ed f939 	bl	8004872 <_isatty>
 8017600:	1c43      	adds	r3, r0, #1
 8017602:	d102      	bne.n	801760a <_isatty_r+0x1a>
 8017604:	682b      	ldr	r3, [r5, #0]
 8017606:	b103      	cbz	r3, 801760a <_isatty_r+0x1a>
 8017608:	6023      	str	r3, [r4, #0]
 801760a:	bd38      	pop	{r3, r4, r5, pc}
 801760c:	20002dac 	.word	0x20002dac

08017610 <_sbrk_r>:
 8017610:	b538      	push	{r3, r4, r5, lr}
 8017612:	4d06      	ldr	r5, [pc, #24]	@ (801762c <_sbrk_r+0x1c>)
 8017614:	2300      	movs	r3, #0
 8017616:	4604      	mov	r4, r0
 8017618:	4608      	mov	r0, r1
 801761a:	602b      	str	r3, [r5, #0]
 801761c:	f7ed f942 	bl	80048a4 <_sbrk>
 8017620:	1c43      	adds	r3, r0, #1
 8017622:	d102      	bne.n	801762a <_sbrk_r+0x1a>
 8017624:	682b      	ldr	r3, [r5, #0]
 8017626:	b103      	cbz	r3, 801762a <_sbrk_r+0x1a>
 8017628:	6023      	str	r3, [r4, #0]
 801762a:	bd38      	pop	{r3, r4, r5, pc}
 801762c:	20002dac 	.word	0x20002dac

08017630 <_realloc_r>:
 8017630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017634:	4680      	mov	r8, r0
 8017636:	4615      	mov	r5, r2
 8017638:	460c      	mov	r4, r1
 801763a:	b921      	cbnz	r1, 8017646 <_realloc_r+0x16>
 801763c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017640:	4611      	mov	r1, r2
 8017642:	f7ff b9a5 	b.w	8016990 <_malloc_r>
 8017646:	b92a      	cbnz	r2, 8017654 <_realloc_r+0x24>
 8017648:	f7ff f936 	bl	80168b8 <_free_r>
 801764c:	2400      	movs	r4, #0
 801764e:	4620      	mov	r0, r4
 8017650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017654:	f000 f81a 	bl	801768c <_malloc_usable_size_r>
 8017658:	4285      	cmp	r5, r0
 801765a:	4606      	mov	r6, r0
 801765c:	d802      	bhi.n	8017664 <_realloc_r+0x34>
 801765e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017662:	d8f4      	bhi.n	801764e <_realloc_r+0x1e>
 8017664:	4629      	mov	r1, r5
 8017666:	4640      	mov	r0, r8
 8017668:	f7ff f992 	bl	8016990 <_malloc_r>
 801766c:	4607      	mov	r7, r0
 801766e:	2800      	cmp	r0, #0
 8017670:	d0ec      	beq.n	801764c <_realloc_r+0x1c>
 8017672:	42b5      	cmp	r5, r6
 8017674:	462a      	mov	r2, r5
 8017676:	4621      	mov	r1, r4
 8017678:	bf28      	it	cs
 801767a:	4632      	movcs	r2, r6
 801767c:	f7ff f90d 	bl	801689a <memcpy>
 8017680:	4621      	mov	r1, r4
 8017682:	4640      	mov	r0, r8
 8017684:	f7ff f918 	bl	80168b8 <_free_r>
 8017688:	463c      	mov	r4, r7
 801768a:	e7e0      	b.n	801764e <_realloc_r+0x1e>

0801768c <_malloc_usable_size_r>:
 801768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017690:	1f18      	subs	r0, r3, #4
 8017692:	2b00      	cmp	r3, #0
 8017694:	bfbc      	itt	lt
 8017696:	580b      	ldrlt	r3, [r1, r0]
 8017698:	18c0      	addlt	r0, r0, r3
 801769a:	4770      	bx	lr

0801769c <_init>:
 801769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801769e:	bf00      	nop
 80176a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176a2:	bc08      	pop	{r3}
 80176a4:	469e      	mov	lr, r3
 80176a6:	4770      	bx	lr

080176a8 <_fini>:
 80176a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176aa:	bf00      	nop
 80176ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ae:	bc08      	pop	{r3}
 80176b0:	469e      	mov	lr, r3
 80176b2:	4770      	bx	lr
