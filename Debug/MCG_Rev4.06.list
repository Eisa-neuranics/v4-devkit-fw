
MCG_Rev4.06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173b8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d2c  080174f8  080174f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019224  08019224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801922c  0801922c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019230  08019230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  08019234  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  080193b4  0001b188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  080193e9  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002aac  200001d4  080193fa  0001b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002c80  080193fa  0001bc80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001cf57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001d000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  080193fa  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000483be  00000000  00000000  0001cf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a18d  00000000  00000000  00065345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d48  00000000  00000000  0006f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002eff  00000000  00000000  00073220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037136  00000000  00000000  0007611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005115d  00000000  00000000  000ad255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011190f  00000000  00000000  000fe3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020fcc1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010a54  00000000  00000000  0020fd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  00220758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	080174e0 	.word	0x080174e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	080174e0 	.word	0x080174e0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a78:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 ff42 	bl	8002904 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a84:	2204      	movs	r2, #4
 8000a86:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f001 ff3b 	bl	8002904 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f87f 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f001 ff34 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f000 f878 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f001 ff2d 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000aaa:	210a      	movs	r1, #10
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f871 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f001 ff26 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x00 );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f86a 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f001 ff1f 	bl	8002904 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x08 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f000 f863 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f001 ff18 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x03 );				// 0x04: RLD amplifier powered down
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 f85c 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f001 ff11 	bl	8002904 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_5 );				// Configures the R2 decimation rate as 5 for all channels.
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2021      	movs	r0, #33	@ 0x21
 8000ae6:	f000 f855 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aea:	2019      	movs	r0, #25
 8000aec:	f001 ff0a 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000af0:	2104      	movs	r1, #4
 8000af2:	2022      	movs	r0, #34	@ 0x22
 8000af4:	f000 f84e 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000af8:	2019      	movs	r0, #25
 8000afa:	f001 ff03 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000afe:	2104      	movs	r1, #4
 8000b00:	2023      	movs	r0, #35	@ 0x23
 8000b02:	f000 f847 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f001 fefc 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	2024      	movs	r0, #36	@ 0x24
 8000b10:	f000 f840 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b14:	2019      	movs	r0, #25
 8000b16:	f001 fef5 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	2027      	movs	r0, #39	@ 0x27
 8000b1e:	f000 f839 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f001 feee 	bl	8002904 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x10 );				// Channel for Loop Read Back: CH1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	202f      	movs	r0, #47	@ 0x2f
 8000b2c:	f000 f832 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f001 fee7 	bl	8002904 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b50:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b60:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2302      	movs	r3, #2
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <ADS1293_SPIReadReg+0x54>)
 8000b6e:	f009 fb03 	bl	800a178 <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b76:	2208      	movs	r2, #8
 8000b78:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	200001fc 	.word	0x200001fc
 8000b90:	20000db8 	.word	0x20000db8

08000b94 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bae:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bbe:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4905      	ldr	r1, [pc, #20]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <ADS1293_SPIWriteReg+0x4c>)
 8000bc8:	f009 f961 	bl	8009e8e <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001f0 	.word	0x200001f0
 8000be0:	20000db8 	.word	0x20000db8

08000be4 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg(uint8_t *buffer, uint8_t count)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf2:	22d0      	movs	r2, #208	@ 0xd0
 8000bf4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	70da      	strb	r2, [r3, #3]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	711a      	strb	r2, [r3, #4]
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	719a      	strb	r2, [r3, #6]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	71da      	strb	r2, [r3, #7]
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	721a      	strb	r2, [r3, #8]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c30:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c34:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2264      	movs	r2, #100	@ 0x64
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <ADS1293_SPIStreamReadReg+0x7c>)
 8000c48:	f009 fa96 	bl	800a178 <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c50:	2208      	movs	r2, #8
 8000c52:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001f0 	.word	0x200001f0
 8000c60:	20000db8 	.word	0x20000db8

08000c64 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0



 	DIAG ("\t\tAFE initialised\r\n");
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <AFE_Init+0x14>)
 8000c6a:	f001 fee3 	bl	8002a34 <DIAG>
 	HAL_Delay (10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f001 fe48 	bl	8002904 <HAL_Delay>
 }
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	080174f8 	.word	0x080174f8
 8000c7c:	00000000 	.word	0x00000000

08000c80 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000c80:	b598      	push	{r3, r4, r7, lr}
 8000c82:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000c84:	4b9e      	ldr	r3, [pc, #632]	@ (8000f00 <AFE_Control+0x280>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d813      	bhi.n	8000cb4 <AFE_Control+0x34>
 8000c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <AFE_Control+0x14>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	08000ce3 	.word	0x08000ce3
 8000c9c:	08000cef 	.word	0x08000cef
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d39 	.word	0x08000d39
 8000ca8:	08000d67 	.word	0x08000d67
 8000cac:	08000fc5 	.word	0x08000fc5
 8000cb0:	08000fcd 	.word	0x08000fcd
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000cb4:	4b92      	ldr	r3, [pc, #584]	@ (8000f00 <AFE_Control+0x280>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000cba:	e18b      	b.n	8000fd4 <AFE_Control+0x354>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000cbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cc4:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f001 fe1c 	bl	8002904 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000cd4:	2019      	movs	r0, #25
 8000cd6:	f001 fe15 	bl	8002904 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000cda:	4b89      	ldr	r3, [pc, #548]	@ (8000f00 <AFE_Control+0x280>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ce0:	e178      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000ce2:	f7ff fec3 	bl	8000a6c <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000ce6:	4b86      	ldr	r3, [pc, #536]	@ (8000f00 <AFE_Control+0x280>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000cec:	e172      	b.n	8000fd4 <AFE_Control+0x354>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000cee:	2040      	movs	r0, #64	@ 0x40
 8000cf0:	f7ff ff24 	bl	8000b3c <ADS1293_SPIReadReg>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b82      	ldr	r3, [pc, #520]	@ (8000f04 <AFE_Control+0x284>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000cfc:	4b81      	ldr	r3, [pc, #516]	@ (8000f04 <AFE_Control+0x284>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000d04:	4b7e      	ldr	r3, [pc, #504]	@ (8000f00 <AFE_Control+0x280>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000d0a:	e163      	b.n	8000fd4 <AFE_Control+0x354>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <AFE_Control+0x280>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d12:	e15f      	b.n	8000fd4 <AFE_Control+0x354>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff3c 	bl	8000b94 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	@ 0x32
 8000d1e:	f001 fdf1 	bl	8002904 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000d22:	2101      	movs	r1, #1
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ff35 	bl	8000b94 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	@ 0x32
 8000d2c:	f001 fdea 	bl	8002904 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d30:	4b73      	ldr	r3, [pc, #460]	@ (8000f00 <AFE_Control+0x280>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d36:	e14d      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000d38:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <AFE_Control+0x288>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10d      	bne.n	8000d5e <AFE_Control+0xde>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000d42:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <AFE_Control+0x28c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000d48:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <AFE_Control+0x288>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 3 );
 8000d4e:	2103      	movs	r1, #3
 8000d50:	486f      	ldr	r0, [pc, #444]	@ (8000f10 <AFE_Control+0x290>)
 8000d52:	f7ff ff47 	bl	8000be4 <ADS1293_SPIStreamReadReg>

 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000d56:	4b6a      	ldr	r3, [pc, #424]	@ (8000f00 <AFE_Control+0x280>)
 8000d58:	2205      	movs	r2, #5
 8000d5a:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000d5c:	e13a      	b.n	8000fd4 <AFE_Control+0x354>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d5e:	4b68      	ldr	r3, [pc, #416]	@ (8000f00 <AFE_Control+0x280>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d64:	e136      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  MCG.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000d66:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <AFE_Control+0x290>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	041b      	lsls	r3, r3, #16
 8000d6c:	4a68      	ldr	r2, [pc, #416]	@ (8000f10 <AFE_Control+0x290>)
 8000d6e:	7892      	ldrb	r2, [r2, #2]
 8000d70:	0212      	lsls	r2, r2, #8
 8000d72:	b292      	uxth	r2, r2
 8000d74:	4313      	orrs	r3, r2
 8000d76:	4a66      	ldr	r2, [pc, #408]	@ (8000f10 <AFE_Control+0x290>)
 8000d78:	78d2      	ldrb	r2, [r2, #3]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	4a65      	ldr	r2, [pc, #404]	@ (8000f14 <AFE_Control+0x294>)
 8000d7e:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
 	  		  MCG.Vin = ( 2.4 * ( ( (2.0 * (double)MCG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000d82:	4b64      	ldr	r3, [pc, #400]	@ (8000f14 <AFE_Control+0x294>)
 8000d84:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fba3 	bl	80004d4 <__aeabi_i2d>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	f7ff fa53 	bl	800023c <__adddf3>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	a354      	add	r3, pc, #336	@ (adr r3, 8000ef0 <AFE_Control+0x270>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f7ff fd2a 	bl	80007fc <__aeabi_ddiv>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <AFE_Control+0x298>)
 8000db6:	f7ff fa3f 	bl	8000238 <__aeabi_dsub>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000ef8 <AFE_Control+0x278>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fbee 	bl	80005a8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b50      	ldr	r3, [pc, #320]	@ (8000f1c <AFE_Control+0x29c>)
 8000dda:	f7ff fd0f 	bl	80007fc <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fdf1 	bl	80009cc <__aeabi_d2f>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a49      	ldr	r2, [pc, #292]	@ (8000f14 <AFE_Control+0x294>)
 8000dee:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
 	  		  MCG.Raw[Temp_buff_count] = (int)(MCG.Vin * 1000000);
 8000df2:	4b48      	ldr	r3, [pc, #288]	@ (8000f14 <AFE_Control+0x294>)
 8000df4:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 8000df8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000f20 <AFE_Control+0x2a0>
 8000dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0a:	ee17 1a90 	vmov	r1, s15
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <AFE_Control+0x294>)
 8000e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

// 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG_BPF_50_60Hz (Temp_buff_count);
 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG (Temp_buff_count);
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4a42      	ldr	r2, [pc, #264]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fac4 	bl	80013ac <IIR_MCG>
 8000e24:	4602      	mov	r2, r0
 8000e26:	493b      	ldr	r1, [pc, #236]	@ (8000f14 <AFE_Control+0x294>)
 8000e28:	f104 030e 	add.w	r3, r4, #14
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	605a      	str	r2, [r3, #4]

 	  		  MCG.u8TxData[u8McgDataLen++] = ( (  		 MCG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8000e32:	4b3c      	ldr	r3, [pc, #240]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4a37      	ldr	r2, [pc, #220]	@ (8000f14 <AFE_Control+0x294>)
 8000e38:	330e      	adds	r3, #14
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1218      	asrs	r0, r3, #8
 8000e42:	4b39      	ldr	r3, [pc, #228]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	b2d1      	uxtb	r1, r2
 8000e4a:	4a37      	ldr	r2, [pc, #220]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e4c:	7011      	strb	r1, [r2, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	b2c2      	uxtb	r2, r0
 8000e52:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <AFE_Control+0x294>)
 8000e54:	440b      	add	r3, r1
 8000e56:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
 	  		  MCG.u8TxData[u8McgDataLen++] = ( (uint8_t) MCG.Filtered [Temp_buff_count] & 0x00FF );
 8000e5a:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f14 <AFE_Control+0x294>)
 8000e60:	330e      	adds	r3, #14
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	6858      	ldr	r0, [r3, #4]
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	b2d1      	uxtb	r1, r2
 8000e70:	4a2d      	ldr	r2, [pc, #180]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e72:	7011      	strb	r1, [r2, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	b2c2      	uxtb	r2, r0
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <AFE_Control+0x294>)
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.ECG == true && tsCmd.MCG == true)
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <AFE_Control+0x2ac>)
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d11a      	bne.n	8000ebe <AFE_Control+0x23e>
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <AFE_Control+0x2ac>)
 8000e8a:	7edb      	ldrb	r3, [r3, #27]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d116      	bne.n	8000ebe <AFE_Control+0x23e>
 				  {
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <AFE_Control+0x294>)
 8000e96:	330e      	adds	r3, #14
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ea2:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <AFE_Control+0x2a4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <AFE_Control+0x294>)
 8000eac:	330e      	adds	r3, #14
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <AFE_Control+0x2b0>)
 8000eb8:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000ebc:	e058      	b.n	8000f70 <AFE_Control+0x2f0>
 				  }
 				  else if (tsCmd.ECG == true && tsCmd.MCG == false )
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <AFE_Control+0x2ac>)
 8000ec0:	7e1b      	ldrb	r3, [r3, #24]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d136      	bne.n	8000f34 <AFE_Control+0x2b4>
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <AFE_Control+0x2ac>)
 8000ec8:	7edb      	ldrb	r3, [r3, #27]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d132      	bne.n	8000f34 <AFE_Control+0x2b4>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <AFE_Control+0x2a4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <AFE_Control+0x294>)
 8000ed4:	330e      	adds	r3, #14
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ee0:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = 0x00;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000eec:	e040      	b.n	8000f70 <AFE_Control+0x2f0>
 8000eee:	bf00      	nop
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	41686a00 	.word	0x41686a00
 8000ef8:	33333333 	.word	0x33333333
 8000efc:	40033333 	.word	0x40033333
 8000f00:	20000206 	.word	0x20000206
 8000f04:	2000064a 	.word	0x2000064a
 8000f08:	20000208 	.word	0x20000208
 8000f0c:	20000f60 	.word	0x20000f60
 8000f10:	2000064c 	.word	0x2000064c
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	400c0000 	.word	0x400c0000
 8000f20:	49742400 	.word	0x49742400
 8000f24:	20000656 	.word	0x20000656
 8000f28:	2000064b 	.word	0x2000064b
 8000f2c:	20000cc4 	.word	0x20000cc4
 8000f30:	200009b4 	.word	0x200009b4
 				  }

 				  else if (tsCmd.ECG == false && tsCmd.MCG == true )
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <AFE_Control+0x358>)
 8000f36:	7e1b      	ldrb	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d119      	bne.n	8000f70 <AFE_Control+0x2f0>
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <AFE_Control+0x358>)
 8000f3e:	7edb      	ldrb	r3, [r3, #27]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d115      	bne.n	8000f70 <AFE_Control+0x2f0>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f44:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <AFE_Control+0x35c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4a25      	ldr	r2, [pc, #148]	@ (8000fe0 <AFE_Control+0x360>)
 8000f4a:	330e      	adds	r3, #14
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <AFE_Control+0x364>)
 8000f56:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <AFE_Control+0x35c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4a20      	ldr	r2, [pc, #128]	@ (8000fe0 <AFE_Control+0x360>)
 8000f60:	330e      	adds	r3, #14
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <AFE_Control+0x364>)
 8000f6c:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 				  }
 				 tsDebug.bReleaseAFEData= true;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <AFE_Control+0x364>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
 			  #endif


 	  		  Temp_buff_count++;		if (Temp_buff_count  ==  15 ) 	{ Temp_buff_count = 0; }
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <AFE_Control+0x35c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <AFE_Control+0x35c>)
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <AFE_Control+0x35c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d102      	bne.n	8000f92 <AFE_Control+0x312>
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <AFE_Control+0x35c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

 	  		if ( u8McgDataLen >=  BLE_Data_Length )
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <AFE_Control+0x368>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f98:	d910      	bls.n	8000fbc <AFE_Control+0x33c>
 	  		{
 	  			memcpy ( tsStreamSCG.u8McgTxCpy, MCG.u8TxData, 64 );
 8000f9a:	2240      	movs	r2, #64	@ 0x40
 8000f9c:	4913      	ldr	r1, [pc, #76]	@ (8000fec <AFE_Control+0x36c>)
 8000f9e:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <AFE_Control+0x370>)
 8000fa0:	f015 fb9d 	bl	80166de <memcpy>

 	  			// Copy MCG data length
 	  			MCG.u8TxLen = u8McgDataLen;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <AFE_Control+0x368>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <AFE_Control+0x360>)
 8000faa:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

 	  			// Enable BLE data transmission
 	  			tsStreamSCG.bReleaseScgData = true;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <AFE_Control+0x374>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
 	  			u8McgDataLen = 0;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <AFE_Control+0x368>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <AFE_Control+0x378>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fc2:	e007      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <AFE_Control+0x378>)
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fca:	e003      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <AFE_Control+0x378>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fd2:	bf00      	nop
 	  	  }
 }
 8000fd4:	bf00      	nop
 8000fd6:	bd98      	pop	{r3, r4, r7, pc}
 8000fd8:	20000cc4 	.word	0x20000cc4
 8000fdc:	20000656 	.word	0x20000656
 8000fe0:	2000020c 	.word	0x2000020c
 8000fe4:	200009b4 	.word	0x200009b4
 8000fe8:	2000064b 	.word	0x2000064b
 8000fec:	20000378 	.word	0x20000378
 8000ff0:	20000526 	.word	0x20000526
 8000ff4:	20000420 	.word	0x20000420
 8000ff8:	20000206 	.word	0x20000206

08000ffc <MCG_StreamDataPack>:
 //***********************************************************************************************
 //***********************************************************************************************

 void MCG_StreamDataPack ( uint8_t *ecgData, uint8_t ecgDataLen, uint8_t *mcgData, uint8_t mcgDataLen, uint8_t *outputString  )
 {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	461a      	mov	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	4613      	mov	r3, r2
 800100e:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamSCG.u8TxData, 0, sizeof(tsStreamSCG.u8TxData) );
 8001014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001018:	2100      	movs	r1, #0
 800101a:	4848      	ldr	r0, [pc, #288]	@ (800113c <MCG_StreamDataPack+0x140>)
 800101c:	f015 fabc 	bl	8016598 <memset>

#ifdef IMU_ENABLE
 	outputString [index++] = 'S';
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	75fa      	strb	r2, [r7, #23]
 8001026:	461a      	mov	r2, r3
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	4413      	add	r3, r2
 800102c:	2253      	movs	r2, #83	@ 0x53
 800102e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <MCG_StreamDataPack+0x144>)
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	b2d1      	uxtb	r1, r2
 8001038:	4a41      	ldr	r2, [pc, #260]	@ (8001140 <MCG_StreamDataPack+0x144>)
 800103a:	7151      	strb	r1, [r2, #5]
 800103c:	7dfa      	ldrb	r2, [r7, #23]
 800103e:	1c51      	adds	r1, r2, #1
 8001040:	75f9      	strb	r1, [r7, #23]
 8001042:	4611      	mov	r1, r2
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	440a      	add	r2, r1
 8001048:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	75fa      	strb	r2, [r7, #23]
 8001050:	461a      	mov	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	4413      	add	r3, r2
 8001056:	222c      	movs	r2, #44	@ 0x2c
 8001058:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	75fa      	strb	r2, [r7, #23]
 8001060:	461a      	mov	r2, r3
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	4413      	add	r3, r2
 8001066:	2243      	movs	r2, #67	@ 0x43
 8001068:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	75fa      	strb	r2, [r7, #23]
 8001070:	461a      	mov	r2, r3
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	4413      	add	r3, r2
 8001076:	2230      	movs	r2, #48	@ 0x30
 8001078:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	75fa      	strb	r2, [r7, #23]
 8001080:	461a      	mov	r2, r3
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	4413      	add	r3, r2
 8001086:	222c      	movs	r2, #44	@ 0x2c
 8001088:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ecgDataLen;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	75fa      	strb	r2, [r7, #23]
 8001090:	461a      	mov	r2, r3
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4413      	add	r3, r2
 8001096:	7afa      	ldrb	r2, [r7, #11]
 8001098:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	75fa      	strb	r2, [r7, #23]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	4413      	add	r3, r2
 80010a6:	222c      	movs	r2, #44	@ 0x2c
 80010a8:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, ecgData, ecgDataLen );
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	4413      	add	r3, r2
 80010b0:	7afa      	ldrb	r2, [r7, #11]
 80010b2:	68f9      	ldr	r1, [r7, #12]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f015 fb12 	bl	80166de <memcpy>

 	index += ecgDataLen;
 80010ba:	7dfa      	ldrb	r2, [r7, #23]
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	4413      	add	r3, r2
 80010c0:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	75fa      	strb	r2, [r7, #23]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	4413      	add	r3, r2
 80010ce:	222c      	movs	r2, #44	@ 0x2c
 80010d0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	75fa      	strb	r2, [r7, #23]
 80010d8:	461a      	mov	r2, r3
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	4413      	add	r3, r2
 80010de:	2243      	movs	r2, #67	@ 0x43
 80010e0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	75fa      	strb	r2, [r7, #23]
 80010e8:	461a      	mov	r2, r3
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	4413      	add	r3, r2
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	75fa      	strb	r2, [r7, #23]
 80010f8:	461a      	mov	r2, r3
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	4413      	add	r3, r2
 80010fe:	222c      	movs	r2, #44	@ 0x2c
 8001100:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = mcgDataLen;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	75fa      	strb	r2, [r7, #23]
 8001108:	461a      	mov	r2, r3
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	4413      	add	r3, r2
 800110e:	7aba      	ldrb	r2, [r7, #10]
 8001110:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	75fa      	strb	r2, [r7, #23]
 8001118:	461a      	mov	r2, r3
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	4413      	add	r3, r2
 800111e:	222c      	movs	r2, #44	@ 0x2c
 8001120:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, mcgData, mcgDataLen );
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	4413      	add	r3, r2
 8001128:	7aba      	ldrb	r2, [r7, #10]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	f015 fad6 	bl	80166de <memcpy>
	outputString [index++] = ',';

	memcpy ( outputString + index, mcgData, mcgDataLen );
#endif

 }
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000426 	.word	0x20000426
 8001140:	20001004 	.word	0x20001004

08001144 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <BLE_Init+0x28>)
 800114a:	2200      	movs	r2, #0
 800114c:	71da      	strb	r2, [r3, #7]
	 tsBle.App.GyroNotification = false;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <BLE_Init+0x28>)
 8001150:	2200      	movs	r2, #0
 8001152:	721a      	strb	r2, [r3, #8]
	 tsBle.App.McgNotification = false;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <BLE_Init+0x28>)
 8001156:	2200      	movs	r2, #0
 8001158:	719a      	strb	r2, [r3, #6]

	 DIAG ("\t\tBLE initialised\r\n");
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <BLE_Init+0x2c>)
 800115c:	f001 fc6a 	bl	8002a34 <DIAG>
	 HAL_Delay (10);
 8001160:	200a      	movs	r0, #10
 8001162:	f001 fbcf 	bl	8002904 <HAL_Delay>
 }
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001004 	.word	0x20001004
 8001170:	0801750c 	.word	0x0801750c

08001174 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af02      	add	r7, sp, #8

	 switch( eBLE_STATE )
 800117a:	4b80      	ldr	r3, [pc, #512]	@ (800137c <BLE_Control+0x208>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	f200 80f4 	bhi.w	800136c <BLE_Control+0x1f8>
 8001184:	a201      	add	r2, pc, #4	@ (adr r2, 800118c <BLE_Control+0x18>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011c1 	.word	0x080011c1
 8001190:	080011c9 	.word	0x080011c9
 8001194:	080011d1 	.word	0x080011d1
 8001198:	080011d9 	.word	0x080011d9
 800119c:	080011f3 	.word	0x080011f3
 80011a0:	0800120d 	.word	0x0800120d
 80011a4:	08001265 	.word	0x08001265
 80011a8:	08001289 	.word	0x08001289
 80011ac:	080012df 	.word	0x080012df
 80011b0:	080012fd 	.word	0x080012fd
 80011b4:	08001339 	.word	0x08001339
 80011b8:	0800135d 	.word	0x0800135d
 80011bc:	08001365 	.word	0x08001365
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 80011c0:	4b6e      	ldr	r3, [pc, #440]	@ (800137c <BLE_Control+0x208>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		 break;
 80011c6:	e0d5      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 80011c8:	4b6c      	ldr	r3, [pc, #432]	@ (800137c <BLE_Control+0x208>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
		 break;
 80011ce:	e0d1      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011d0:	4b6a      	ldr	r3, [pc, #424]	@ (800137c <BLE_Control+0x208>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	701a      	strb	r2, [r3, #0]
		 break;
 80011d6:	e0cd      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 80011d8:	4b69      	ldr	r3, [pc, #420]	@ (8001380 <BLE_Control+0x20c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011e2:	4b66      	ldr	r3, [pc, #408]	@ (800137c <BLE_Control+0x208>)
 80011e4:	2205      	movs	r2, #5
 80011e6:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 80011e8:	e0c4      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011ea:	4b64      	ldr	r3, [pc, #400]	@ (800137c <BLE_Control+0x208>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	701a      	strb	r2, [r3, #0]
		 break;
 80011f0:	e0c0      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 80011f2:	4b63      	ldr	r3, [pc, #396]	@ (8001380 <BLE_Control+0x20c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011fc:	4b5f      	ldr	r3, [pc, #380]	@ (800137c <BLE_Control+0x208>)
 80011fe:	2205      	movs	r2, #5
 8001200:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 8001202:	e0b7      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_ADV;
 8001204:	4b5d      	ldr	r3, [pc, #372]	@ (800137c <BLE_Control+0x208>)
 8001206:	2202      	movs	r2, #2
 8001208:	701a      	strb	r2, [r3, #0]
		 break;
 800120a:	e0b3      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.McgNotification )
 800120c:	4b5c      	ldr	r3, [pc, #368]	@ (8001380 <BLE_Control+0x20c>)
 800120e:	799b      	ldrb	r3, [r3, #6]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <BLE_Control+0xe8>
		 {
			 if ( tsStreamSCG.bReleaseScgData == true )
 8001214:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <BLE_Control+0x210>)
 8001216:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 800121a:	2b01      	cmp	r3, #1
 800121c:	d11a      	bne.n	8001254 <BLE_Control+0xe0>
			 {
				 tsStreamSCG.bReleaseScgData = false;
 800121e:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <BLE_Control+0x210>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
				 MCG_StreamDataPack ( tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8TxData );
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <BLE_Control+0x214>)
 8001228:	f893 1202 	ldrb.w	r1, [r3, #514]	@ 0x202
 800122c:	4b56      	ldr	r3, [pc, #344]	@ (8001388 <BLE_Control+0x214>)
 800122e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8001232:	4a56      	ldr	r2, [pc, #344]	@ (800138c <BLE_Control+0x218>)
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <BLE_Control+0x21c>)
 8001238:	4855      	ldr	r0, [pc, #340]	@ (8001390 <BLE_Control+0x21c>)
 800123a:	f7ff fedf 	bl	8000ffc <MCG_StreamDataPack>
				 // Reset data length
				 MCG.u8TxLen = 0;
 800123e:	4b52      	ldr	r3, [pc, #328]	@ (8001388 <BLE_Control+0x214>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
				 // Set the task for BLE
				 tsBle.App.ScgSetTask = true;
 8001246:	4b4e      	ldr	r3, [pc, #312]	@ (8001380 <BLE_Control+0x20c>)
 8001248:	2201      	movs	r2, #1
 800124a:	725a      	strb	r2, [r3, #9]
//				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 800124c:	4b4b      	ldr	r3, [pc, #300]	@ (800137c <BLE_Control+0x208>)
 800124e:	2206      	movs	r2, #6
 8001250:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 8001252:	e08f      	b.n	8001374 <BLE_Control+0x200>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001254:	4b49      	ldr	r3, [pc, #292]	@ (800137c <BLE_Control+0x208>)
 8001256:	2205      	movs	r2, #5
 8001258:	701a      	strb	r2, [r3, #0]
		 break;
 800125a:	e08b      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 800125c:	4b47      	ldr	r3, [pc, #284]	@ (800137c <BLE_Control+0x208>)
 800125e:	2207      	movs	r2, #7
 8001260:	701a      	strb	r2, [r3, #0]
		 break;
 8001262:	e087      	b.n	8001374 <BLE_Control+0x200>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.SCG_XferComplete )
 8001264:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <BLE_Control+0x20c>)
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <BLE_Control+0x10c>
		 {
			 tsBle.SCG_XferComplete = false;
 800126c:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <BLE_Control+0x20c>)
 800126e:	2200      	movs	r2, #0
 8001270:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 8001272:	4b42      	ldr	r3, [pc, #264]	@ (800137c <BLE_Control+0x208>)
 8001274:	220b      	movs	r2, #11
 8001276:	701a      	strb	r2, [r3, #0]
			 #ifdef IMU_ENABLE
			 	 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 8001278:	4b40      	ldr	r3, [pc, #256]	@ (800137c <BLE_Control+0x208>)
 800127a:	2207      	movs	r2, #7
 800127c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 800127e:	e079      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001280:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <BLE_Control+0x208>)
 8001282:	2206      	movs	r2, #6
 8001284:	701a      	strb	r2, [r3, #0]
		 break;
 8001286:	e075      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 8001288:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <BLE_Control+0x20c>)
 800128a:	79db      	ldrb	r3, [r3, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d022      	beq.n	80012d6 <BLE_Control+0x162>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 8001290:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <BLE_Control+0x220>)
 8001292:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8001296:	2b01      	cmp	r3, #1
 8001298:	d119      	bne.n	80012ce <BLE_Control+0x15a>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 800129a:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <BLE_Control+0x220>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				 IMU_StreamDataPack ( IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <BLE_Control+0x224>)
 80012a4:	4a3d      	ldr	r2, [pc, #244]	@ (800139c <BLE_Control+0x228>)
 80012a6:	493e      	ldr	r1, [pc, #248]	@ (80013a0 <BLE_Control+0x22c>)
 80012a8:	483e      	ldr	r0, [pc, #248]	@ (80013a4 <BLE_Control+0x230>)
 80012aa:	f000 fca5 	bl	8001bf8 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 80012ae:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <BLE_Control+0x234>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 80012b4:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <BLE_Control+0x234>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <BLE_Control+0x234>)
 80012bc:	2200      	movs	r2, #0
 80012be:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <BLE_Control+0x20c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	729a      	strb	r2, [r3, #10]
				 //				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <BLE_Control+0x208>)
 80012c8:	2208      	movs	r2, #8
 80012ca:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 80012cc:	e052      	b.n	8001374 <BLE_Control+0x200>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <BLE_Control+0x208>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	701a      	strb	r2, [r3, #0]
		 break;
 80012d4:	e04e      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_IDLE;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <BLE_Control+0x208>)
 80012d8:	220b      	movs	r2, #11
 80012da:	701a      	strb	r2, [r3, #0]
		 break;
 80012dc:	e04a      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 80012de:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <BLE_Control+0x20c>)
 80012e0:	78db      	ldrb	r3, [r3, #3]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <BLE_Control+0x180>
		 {
			 tsBle.ACCEL_XferComplete = false;
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <BLE_Control+0x20c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	70da      	strb	r2, [r3, #3]
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <BLE_Control+0x208>)
 80012ee:	2209      	movs	r2, #9
 80012f0:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 80012f2:	e03f      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <BLE_Control+0x208>)
 80012f6:	2208      	movs	r2, #8
 80012f8:	701a      	strb	r2, [r3, #0]
		 break;
 80012fa:	e03b      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <BLE_Control+0x220>)
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
		 if ( tsStreamIMU.bReleaseGyroData == true )
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <BLE_Control+0x220>)
 8001306:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 800130a:	2b01      	cmp	r3, #1
 800130c:	d110      	bne.n	8001330 <BLE_Control+0x1bc>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 800130e:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <BLE_Control+0x234>)
 8001310:	2200      	movs	r2, #0
 8001312:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 8001314:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <BLE_Control+0x234>)
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <BLE_Control+0x234>)
 800131c:	2200      	movs	r2, #0
 800131e:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <BLE_Control+0x220>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <BLE_Control+0x208>)
 800132a:	220a      	movs	r2, #10
 800132c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 800132e:	e021      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <BLE_Control+0x208>)
 8001332:	2209      	movs	r2, #9
 8001334:	701a      	strb	r2, [r3, #0]
		 break;
 8001336:	e01d      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <BLE_Control+0x20c>)
 800133a:	2201      	movs	r2, #1
 800133c:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <BLE_Control+0x20c>)
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <BLE_Control+0x1e0>
		 {
			 tsBle.GYRO_XferComplete = false;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <BLE_Control+0x20c>)
 8001348:	2200      	movs	r2, #0
 800134a:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <BLE_Control+0x208>)
 800134e:	220b      	movs	r2, #11
 8001350:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 8001352:	e00f      	b.n	8001374 <BLE_Control+0x200>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <BLE_Control+0x208>)
 8001356:	2209      	movs	r2, #9
 8001358:	701a      	strb	r2, [r3, #0]
		 break;
 800135a:	e00b      	b.n	8001374 <BLE_Control+0x200>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <BLE_Control+0x208>)
 800135e:	2203      	movs	r2, #3
 8001360:	701a      	strb	r2, [r3, #0]
		 break;
 8001362:	e007      	b.n	8001374 <BLE_Control+0x200>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <BLE_Control+0x208>)
 8001366:	2202      	movs	r2, #2
 8001368:	701a      	strb	r2, [r3, #0]
		 break;
 800136a:	e003      	b.n	8001374 <BLE_Control+0x200>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <BLE_Control+0x208>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		 break;
 8001372:	bf00      	nop

	 }
// ---------------------------------------------

 }
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000657 	.word	0x20000657
 8001380:	20001004 	.word	0x20001004
 8001384:	20000420 	.word	0x20000420
 8001388:	2000020c 	.word	0x2000020c
 800138c:	20000426 	.word	0x20000426
 8001390:	20000526 	.word	0x20000526
 8001394:	20000744 	.word	0x20000744
 8001398:	2000074a 	.word	0x2000074a
 800139c:	200006fa 	.word	0x200006fa
 80013a0:	200006b2 	.word	0x200006b2
 80013a4:	2000066a 	.word	0x2000066a
 80013a8:	20000658 	.word	0x20000658

080013ac <IIR_MCG>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_MCG ( uint8_t Temp_xyptr )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]

	float  		convM = 0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	float  		conv1M = 0, conv2M = 0;
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
	uint8_t 	o = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	72fb      	strb	r3, [r7, #11]

	// BPF Implementation ------------------------------------------------------------------------------------
	if (tsCmd.MCG_HPF)
 80013cc:	4bc1      	ldr	r3, [pc, #772]	@ (80016d4 <IIR_MCG+0x328>)
 80013ce:	7f5b      	ldrb	r3, [r3, #29]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d07e      	beq.n	80014d2 <IIR_MCG+0x126>
	{
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 80013d4:	2300      	movs	r3, #0
 80013d6:	75fb      	strb	r3, [r7, #23]
 80013d8:	e020      	b.n	800141c <IIR_MCG+0x70>
		{
			o= RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80013da:	7dfa      	ldrb	r2, [r7, #23]
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4619      	mov	r1, r3
 80013e0:	200f      	movs	r0, #15
 80013e2:	f000 f987 	bl	80016f4 <RecentValueIndex>
 80013e6:	4603      	mov	r3, r0
 80013e8:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b[i] * MCG.Raw[o];
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	4aba      	ldr	r2, [pc, #744]	@ (80016d8 <IIR_MCG+0x32c>)
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	4ab8      	ldr	r2, [pc, #736]	@ (80016dc <IIR_MCG+0x330>)
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	ed97 7a07 	vldr	s14, [r7, #28]
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	3301      	adds	r3, #1
 800141a:	75fb      	strb	r3, [r7, #23]
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d9db      	bls.n	80013da <IIR_MCG+0x2e>
		}

		o=0;
 8001422:	2300      	movs	r3, #0
 8001424:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 8001426:	2301      	movs	r3, #1
 8001428:	75bb      	strb	r3, [r7, #22]
 800142a:	e03f      	b.n	80014ac <IIR_MCG+0x100>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 800142c:	7dba      	ldrb	r2, [r7, #22]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f95e 	bl	80016f4 <RecentValueIndex>
 8001438:	4603      	mov	r3, r0
 800143a:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_N50) {conv2M += a[i] * MCG.HPF [o];} else {conv2M += a[i] * MCG.Filtered [o];}
 800143c:	4ba5      	ldr	r3, [pc, #660]	@ (80016d4 <IIR_MCG+0x328>)
 800143e:	7f1b      	ldrb	r3, [r3, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d018      	beq.n	8001476 <IIR_MCG+0xca>
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	4aa6      	ldr	r2, [pc, #664]	@ (80016e0 <IIR_MCG+0x334>)
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	4aa2      	ldr	r2, [pc, #648]	@ (80016dc <IIR_MCG+0x330>)
 8001454:	332c      	adds	r3, #44	@ 0x2c
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	ed97 7a06 	vldr	s14, [r7, #24]
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	edc7 7a06 	vstr	s15, [r7, #24]
 8001474:	e017      	b.n	80014a6 <IIR_MCG+0xfa>
 8001476:	7dbb      	ldrb	r3, [r7, #22]
 8001478:	4a99      	ldr	r2, [pc, #612]	@ (80016e0 <IIR_MCG+0x334>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	4a95      	ldr	r2, [pc, #596]	@ (80016dc <IIR_MCG+0x330>)
 8001486:	330e      	adds	r3, #14
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	ed97 7a06 	vldr	s14, [r7, #24]
 800149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a2:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	3301      	adds	r3, #1
 80014aa:	75bb      	strb	r3, [r7, #22]
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d9bc      	bls.n	800142c <IIR_MCG+0x80>
		}

		MCG.HPF [Temp_xyptr] =  conv1M -  conv2M ;
 80014b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c4:	ee17 1a90 	vmov	r1, s15
 80014c8:	4a84      	ldr	r2, [pc, #528]	@ (80016dc <IIR_MCG+0x330>)
 80014ca:	332c      	adds	r3, #44	@ 0x2c
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	6059      	str	r1, [r3, #4]
	}

	// Notch Filter implementation ---------------------------------------------------------------------------
	if (tsCmd.MCG_N50)
 80014d2:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <IIR_MCG+0x328>)
 80014d4:	7f1b      	ldrb	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80dc 	beq.w	8001694 <IIR_MCG+0x2e8>
	{
		conv1M= 0;		conv2M= 0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]

		// 50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 80014e8:	2300      	movs	r3, #0
 80014ea:	757b      	strb	r3, [r7, #21]
 80014ec:	e03d      	b.n	800156a <IIR_MCG+0x1be>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80014ee:	7d7a      	ldrb	r2, [r7, #21]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4619      	mov	r1, r3
 80014f4:	200f      	movs	r0, #15
 80014f6:	f000 f8fd 	bl	80016f4 <RecentValueIndex>
 80014fa:	4603      	mov	r3, r0
 80014fc:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_HPF) { conv1M +=  b_N50[i] * MCG.HPF[o]; } else { conv1M +=  b_N50[i] * MCG.Raw[o]; }
 80014fe:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <IIR_MCG+0x328>)
 8001500:	7f5b      	ldrb	r3, [r3, #29]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d018      	beq.n	8001538 <IIR_MCG+0x18c>
 8001506:	7d7b      	ldrb	r3, [r7, #21]
 8001508:	4a76      	ldr	r2, [pc, #472]	@ (80016e4 <IIR_MCG+0x338>)
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	4a71      	ldr	r2, [pc, #452]	@ (80016dc <IIR_MCG+0x330>)
 8001516:	332c      	adds	r3, #44	@ 0x2c
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152a:	ed97 7a07 	vldr	s14, [r7, #28]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	edc7 7a07 	vstr	s15, [r7, #28]
 8001536:	e015      	b.n	8001564 <IIR_MCG+0x1b8>
 8001538:	7d7b      	ldrb	r3, [r7, #21]
 800153a:	4a6a      	ldr	r2, [pc, #424]	@ (80016e4 <IIR_MCG+0x338>)
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	4a65      	ldr	r2, [pc, #404]	@ (80016dc <IIR_MCG+0x330>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	ed97 7a07 	vldr	s14, [r7, #28]
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 8001564:	7d7b      	ldrb	r3, [r7, #21]
 8001566:	3301      	adds	r3, #1
 8001568:	757b      	strb	r3, [r7, #21]
 800156a:	7d7b      	ldrb	r3, [r7, #21]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d9be      	bls.n	80014ee <IIR_MCG+0x142>
		}

		o=0;
 8001570:	2300      	movs	r3, #0
 8001572:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 8001574:	2301      	movs	r3, #1
 8001576:	753b      	strb	r3, [r7, #20]
 8001578:	e021      	b.n	80015be <IIR_MCG+0x212>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 800157a:	7d3a      	ldrb	r2, [r7, #20]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4619      	mov	r1, r3
 8001580:	200f      	movs	r0, #15
 8001582:	f000 f8b7 	bl	80016f4 <RecentValueIndex>
 8001586:	4603      	mov	r3, r0
 8001588:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N50[i] * MCG.Notch50[o] ;
 800158a:	7d3b      	ldrb	r3, [r7, #20]
 800158c:	4a56      	ldr	r2, [pc, #344]	@ (80016e8 <IIR_MCG+0x33c>)
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	7afb      	ldrb	r3, [r7, #11]
 8001598:	4a50      	ldr	r2, [pc, #320]	@ (80016dc <IIR_MCG+0x330>)
 800159a:	333c      	adds	r3, #60	@ 0x3c
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80015b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b4:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 80015b8:	7d3b      	ldrb	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	753b      	strb	r3, [r7, #20]
 80015be:	7d3b      	ldrb	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d9da      	bls.n	800157a <IIR_MCG+0x1ce>
		}

		MCG.Notch50[Temp_xyptr]= conv1M - conv2M;
 80015c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80015c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 1a90 	vmov	r1, s15
 80015da:	4a40      	ldr	r2, [pc, #256]	@ (80016dc <IIR_MCG+0x330>)
 80015dc:	333c      	adds	r3, #60	@ 0x3c
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		conv1M= 0;		conv2M= 0;
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]

		// 60 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 80015ee:	2300      	movs	r3, #0
 80015f0:	74fb      	strb	r3, [r7, #19]
 80015f2:	e021      	b.n	8001638 <IIR_MCG+0x28c>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80015f4:	7cfa      	ldrb	r2, [r7, #19]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4619      	mov	r1, r3
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f87a 	bl	80016f4 <RecentValueIndex>
 8001600:	4603      	mov	r3, r0
 8001602:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b_N60[i] * MCG.Notch50[o];
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	4a39      	ldr	r2, [pc, #228]	@ (80016ec <IIR_MCG+0x340>)
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	7afb      	ldrb	r3, [r7, #11]
 8001612:	4a32      	ldr	r2, [pc, #200]	@ (80016dc <IIR_MCG+0x330>)
 8001614:	333c      	adds	r3, #60	@ 0x3c
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	ed97 7a07 	vldr	s14, [r7, #28]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 8001632:	7cfb      	ldrb	r3, [r7, #19]
 8001634:	3301      	adds	r3, #1
 8001636:	74fb      	strb	r3, [r7, #19]
 8001638:	7cfb      	ldrb	r3, [r7, #19]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d9da      	bls.n	80015f4 <IIR_MCG+0x248>
		}

		o=0;
 800163e:	2300      	movs	r3, #0
 8001640:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 8001642:	2301      	movs	r3, #1
 8001644:	74bb      	strb	r3, [r7, #18]
 8001646:	e022      	b.n	800168e <IIR_MCG+0x2e2>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001648:	7cba      	ldrb	r2, [r7, #18]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4619      	mov	r1, r3
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f850 	bl	80016f4 <RecentValueIndex>
 8001654:	4603      	mov	r3, r0
 8001656:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N60[i] * MCG.Filtered[o] ;
 8001658:	7cbb      	ldrb	r3, [r7, #18]
 800165a:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <IIR_MCG+0x344>)
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <IIR_MCG+0x330>)
 8001668:	330e      	adds	r3, #14
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 8001688:	7cbb      	ldrb	r3, [r7, #18]
 800168a:	3301      	adds	r3, #1
 800168c:	74bb      	strb	r3, [r7, #18]
 800168e:	7cbb      	ldrb	r3, [r7, #18]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d9d9      	bls.n	8001648 <IIR_MCG+0x29c>
		}
	}

	convM =  conv1M - conv2M ;
 8001694:	ed97 7a07 	vldr	s14, [r7, #28]
 8001698:	edd7 7a06 	vldr	s15, [r7, #24]
 800169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a0:	edc7 7a03 	vstr	s15, [r7, #12]

	if (tsCmd.MCG_HPF == false && tsCmd.MCG_N50 == false)
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <IIR_MCG+0x328>)
 80016a6:	7f5b      	ldrb	r3, [r3, #29]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <IIR_MCG+0x312>
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <IIR_MCG+0x328>)
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <IIR_MCG+0x312>
	{
		return MCG.Raw[Temp_xyptr];
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <IIR_MCG+0x330>)
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	e005      	b.n	80016ca <IIR_MCG+0x31e>
	}
	else
	{
		return  (int)convM; //(int)conv;
 80016be:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	ee17 3a90 	vmov	r3, s15
	}

}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000cc4 	.word	0x20000cc4
 80016d8:	08018ed4 	.word	0x08018ed4
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	08018ee0 	.word	0x08018ee0
 80016e4:	08018eec 	.word	0x08018eec
 80016e8:	08018ef8 	.word	0x08018ef8
 80016ec:	08018f04 	.word	0x08018f04
 80016f0:	08018f10 	.word	0x08018f10

080016f4 <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	460b      	mov	r3, r1
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 800170a:	79ba      	ldrb	r2, [r7, #6]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	da06      	bge.n	8001722 <RecentValueIndex+0x2e>
 8001714:	79fa      	ldrb	r2, [r7, #7]
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	4413      	add	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 8001722:	79ba      	ldrb	r2, [r7, #6]
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	db03      	blt.n	8001734 <RecentValueIndex+0x40>
 800172c:	79ba      	ldrb	r2, [r7, #6]
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <IMU_Init>:

#define 	M_PI 			3.14159265358979323846

//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <IMU_Init+0xc0>)
 800174e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001752:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 8001754:	2310      	movs	r3, #16
 8001756:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001758:	2340      	movs	r3, #64	@ 0x40
 800175a:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	230a      	movs	r3, #10
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	21d4      	movs	r1, #212	@ 0xd4
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f003 ffa9 	bl	80056c0 <HAL_I2C_Master_Transmit>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <IMU_Init+0x34>
    {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e041      	b.n	80017fc <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001778:	2311      	movs	r3, #17
 800177a:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 800177c:	2340      	movs	r3, #64	@ 0x40
 800177e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	230a      	movs	r3, #10
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2302      	movs	r3, #2
 800178a:	21d4      	movs	r1, #212	@ 0xd4
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f003 ff97 	bl	80056c0 <HAL_I2C_Master_Transmit>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <IMU_Init+0x58>
    {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e02f      	b.n	80017fc <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 800179c:	2312      	movs	r3, #18
 800179e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 80017a0:	2344      	movs	r3, #68	@ 0x44
 80017a2:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 80017a4:	f107 020c 	add.w	r2, r7, #12
 80017a8:	230a      	movs	r3, #10
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2302      	movs	r3, #2
 80017ae:	21d4      	movs	r1, #212	@ 0xd4
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f003 ff85 	bl	80056c0 <HAL_I2C_Master_Transmit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e01d      	b.n	80017fc <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, 640 );
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <IMU_Init+0xc4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017cc:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800180c <IMU_Init+0xc8>
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	480e      	ldr	r0, [pc, #56]	@ (8001810 <IMU_Init+0xcc>)
 80017d6:	f000 fae7 	bl	8001da8 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, 640 );
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <IMU_Init+0xc4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e6:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800180c <IMU_Init+0xc8>
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	4809      	ldr	r0, [pc, #36]	@ (8001814 <IMU_Init+0xd0>)
 80017f0:	f000 fada 	bl	8001da8 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 80017f4:	4808      	ldr	r0, [pc, #32]	@ (8001818 <IMU_Init+0xd4>)
 80017f6:	f001 f91d 	bl	8002a34 <DIAG>

    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	48000400 	.word	0x48000400
 8001808:	2000000a 	.word	0x2000000a
 800180c:	44200000 	.word	0x44200000
 8001810:	20000970 	.word	0x20000970
 8001814:	20000980 	.word	0x20000980
 8001818:	08017520 	.word	0x08017520

0800181c <IMU_Control>:

//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//
void IMU_Control ( void )
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	switch (teIMU_State)
 8001820:	4b9b      	ldr	r3, [pc, #620]	@ (8001a90 <IMU_Control+0x274>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b08      	cmp	r3, #8
 8001826:	f200 812a 	bhi.w	8001a7e <IMU_Control+0x262>
 800182a:	a201      	add	r2, pc, #4	@ (adr r2, 8001830 <IMU_Control+0x14>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	0800185d 	.word	0x0800185d
 8001834:	08001855 	.word	0x08001855
 8001838:	08001885 	.word	0x08001885
 800183c:	0800188d 	.word	0x0800188d
 8001840:	080018b5 	.word	0x080018b5
 8001844:	080018d5 	.word	0x080018d5
 8001848:	080018f5 	.word	0x080018f5
 800184c:	080018fd 	.word	0x080018fd
 8001850:	08001905 	.word	0x08001905

	{
		case IMU_STATE_IDLE:

			teIMU_State = IMU_STATE_INIT;
 8001854:	4b8e      	ldr	r3, [pc, #568]	@ (8001a90 <IMU_Control+0x274>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
			break;
 800185a:	e116      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_INIT:

			ENABLE_IMU_CS;
 800185c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	619a      	str	r2, [r3, #24]
			if (IMU_Init(&hi2c1) != HAL_OK)
 8001864:	488b      	ldr	r0, [pc, #556]	@ (8001a94 <IMU_Control+0x278>)
 8001866:	f7ff ff6d 	bl	8001744 <IMU_Init>
				#ifdef IMU_DEBUG_EN
				DIAG ( " IMU ERROR\r\n" );
				#endif
			}

			if ( IMU_ReadID(&hi2c1, &id) == HAL_OK )
 800186a:	498b      	ldr	r1, [pc, #556]	@ (8001a98 <IMU_Control+0x27c>)
 800186c:	4889      	ldr	r0, [pc, #548]	@ (8001a94 <IMU_Control+0x278>)
 800186e:	f000 f935 	bl	8001adc <IMU_ReadID>
			{
				#ifdef IMU_DEBUG_EN
				DIAG ( "No IMU= %X\r\n", id );
				#endif
			}
			DISABLE_IMU_CS;
 8001872:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001876:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800187a:	619a      	str	r2, [r3, #24]

			teIMU_State = IMU_STATE_WAIT_INT;
 800187c:	4b84      	ldr	r3, [pc, #528]	@ (8001a90 <IMU_Control+0x274>)
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
			break;
 8001882:	e102      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_WAIT_INT:

			teIMU_State = IMU_STATE_SELECT_SLAVE;
 8001884:	4b82      	ldr	r3, [pc, #520]	@ (8001a90 <IMU_Control+0x274>)
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]

			break;
 800188a:	e0fe      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_SELECT_SLAVE:

			if ( tsTimer.bImuFlag )
 800188c:	4b83      	ldr	r3, [pc, #524]	@ (8001a9c <IMU_Control+0x280>)
 800188e:	78db      	ldrb	r3, [r3, #3]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <IMU_Control+0x90>
			{
				#ifdef IMU_DEBUG_EN
					DIAG ( "IMU Sampling\r\n" );
				#endif
				tsTimer.bImuFlag = false;
 8001896:	4b81      	ldr	r3, [pc, #516]	@ (8001a9c <IMU_Control+0x280>)
 8001898:	2200      	movs	r2, #0
 800189a:	70da      	strb	r2, [r3, #3]
				ENABLE_IMU_CS;
 800189c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	619a      	str	r2, [r3, #24]
				teIMU_State = IMU_STATE_REQ_ACCEL;
 80018a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <IMU_Control+0x274>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	701a      	strb	r2, [r3, #0]
			else
			{
				teIMU_State = IMU_STATE_SELECT_SLAVE;
			}

			break;
 80018aa:	e0ee      	b.n	8001a8a <IMU_Control+0x26e>
				teIMU_State = IMU_STATE_SELECT_SLAVE;
 80018ac:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <IMU_Control+0x274>)
 80018ae:	2203      	movs	r2, #3
 80018b0:	701a      	strb	r2, [r3, #0]
			break;
 80018b2:	e0ea      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_REQ_ACCEL:

			if ( IMU_ReadAccel(&hi2c1, &accelData ) == HAL_OK )
 80018b4:	497a      	ldr	r1, [pc, #488]	@ (8001aa0 <IMU_Control+0x284>)
 80018b6:	4877      	ldr	r0, [pc, #476]	@ (8001a94 <IMU_Control+0x278>)
 80018b8:	f000 f926 	bl	8001b08 <IMU_ReadAccel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <IMU_Control+0xb0>
			{

				HighPassFilter_Apply ( &accelFilter, &accelData, &filteredAccelData );
 80018c2:	4a78      	ldr	r2, [pc, #480]	@ (8001aa4 <IMU_Control+0x288>)
 80018c4:	4976      	ldr	r1, [pc, #472]	@ (8001aa0 <IMU_Control+0x284>)
 80018c6:	4878      	ldr	r0, [pc, #480]	@ (8001aa8 <IMU_Control+0x28c>)
 80018c8:	f000 fac0 	bl	8001e4c <HighPassFilter_Apply>
				#ifdef IMU_DEBUG_EN
				DIAG ( "No Accel. Data\r\n" );
				#endif
			}

			teIMU_State = IMU_STATE_REQ_GYRO;
 80018cc:	4b70      	ldr	r3, [pc, #448]	@ (8001a90 <IMU_Control+0x274>)
 80018ce:	2205      	movs	r2, #5
 80018d0:	701a      	strb	r2, [r3, #0]
			break;
 80018d2:	e0da      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_REQ_GYRO:

			if ( IMU_ReadGyro(&hi2c1, &gyroData ) == HAL_OK )
 80018d4:	4975      	ldr	r1, [pc, #468]	@ (8001aac <IMU_Control+0x290>)
 80018d6:	486f      	ldr	r0, [pc, #444]	@ (8001a94 <IMU_Control+0x278>)
 80018d8:	f000 f94d 	bl	8001b76 <IMU_ReadGyro>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <IMU_Control+0xd0>
			{
				 HighPassFilter_Apply( &gyroFilter, &gyroData, &filteredGyroData );
 80018e2:	4a73      	ldr	r2, [pc, #460]	@ (8001ab0 <IMU_Control+0x294>)
 80018e4:	4971      	ldr	r1, [pc, #452]	@ (8001aac <IMU_Control+0x290>)
 80018e6:	4873      	ldr	r0, [pc, #460]	@ (8001ab4 <IMU_Control+0x298>)
 80018e8:	f000 fab0 	bl	8001e4c <HighPassFilter_Apply>
			{
				#ifdef IMU_DEBUG_EN
				DIAG ( "No Gyro. Data\r\n" );
				#endif
			}
			teIMU_State = IMU_STATE_DESELECT_SLAVE;
 80018ec:	4b68      	ldr	r3, [pc, #416]	@ (8001a90 <IMU_Control+0x274>)
 80018ee:	2206      	movs	r2, #6
 80018f0:	701a      	strb	r2, [r3, #0]
			break;
 80018f2:	e0ca      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_DESELECT_SLAVE:

			//DISABLE_IMU_CS;
			teIMU_State = IMU_STATE_PROCESS_DATA;
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <IMU_Control+0x274>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	701a      	strb	r2, [r3, #0]
			break;
 80018fa:	e0c6      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_PROCESS_DATA:

			teIMU_State = IMU_STATE_RELEASE_DATA;
 80018fc:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <IMU_Control+0x274>)
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
			break;
 8001902:	e0c2      	b.n	8001a8a <IMU_Control+0x26e>

		case IMU_STATE_RELEASE_DATA:

			// Put into buffer for Serial/USB data output
			tsDebug.u16Accel[0] = filteredAccelData.x;
 8001904:	4b67      	ldr	r3, [pc, #412]	@ (8001aa4 <IMU_Control+0x288>)
 8001906:	f9b3 2000 	ldrsh.w	r2, [r3]
 800190a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab8 <IMU_Control+0x29c>)
 800190c:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252
			tsDebug.u16Accel[1] = filteredAccelData.y;
 8001910:	4b64      	ldr	r3, [pc, #400]	@ (8001aa4 <IMU_Control+0x288>)
 8001912:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001916:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <IMU_Control+0x29c>)
 8001918:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254
			tsDebug.u16Accel[2] = filteredAccelData.z;
 800191c:	4b61      	ldr	r3, [pc, #388]	@ (8001aa4 <IMU_Control+0x288>)
 800191e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001922:	4b65      	ldr	r3, [pc, #404]	@ (8001ab8 <IMU_Control+0x29c>)
 8001924:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
			tsDebug.u16Gyro [0] = filteredGyroData.x;
 8001928:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <IMU_Control+0x294>)
 800192a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800192e:	4b62      	ldr	r3, [pc, #392]	@ (8001ab8 <IMU_Control+0x29c>)
 8001930:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
			tsDebug.u16Gyro [1] = filteredGyroData.y;
 8001934:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab0 <IMU_Control+0x294>)
 8001936:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800193a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab8 <IMU_Control+0x29c>)
 800193c:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
			tsDebug.u16Gyro [2] = filteredGyroData.z;
 8001940:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <IMU_Control+0x294>)
 8001942:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001946:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab8 <IMU_Control+0x29c>)
 8001948:	f8a3 225c 	strh.w	r2, [r3, #604]	@ 0x25c
			tsDebug.bReleaseIMUData = true;
 800194c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab8 <IMU_Control+0x29c>)
 800194e:	2201      	movs	r2, #1
 8001950:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e

			// Put into buffer for BLE data output
			IMU.u8AxTxData[u8AxDataLen++] = ( (  		filteredAccelData.x & 0xFF00 ) >> 8 );
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <IMU_Control+0x288>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	1218      	asrs	r0, r3, #8
 800195c:	4b57      	ldr	r3, [pc, #348]	@ (8001abc <IMU_Control+0x2a0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	b2d1      	uxtb	r1, r2
 8001964:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <IMU_Control+0x2a0>)
 8001966:	7011      	strb	r1, [r2, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	b2c2      	uxtb	r2, r0
 800196c:	4b54      	ldr	r3, [pc, #336]	@ (8001ac0 <IMU_Control+0x2a4>)
 800196e:	440b      	add	r3, r1
 8001970:	749a      	strb	r2, [r3, #18]
			IMU.u8AxTxData[u8AxDataLen++] = ( (uint8_t)  filteredAccelData.x & 0x00FF 		);
 8001972:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <IMU_Control+0x288>)
 8001974:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001978:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <IMU_Control+0x2a0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	b2d1      	uxtb	r1, r2
 8001980:	4a4e      	ldr	r2, [pc, #312]	@ (8001abc <IMU_Control+0x2a0>)
 8001982:	7011      	strb	r1, [r2, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	b2c2      	uxtb	r2, r0
 8001988:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <IMU_Control+0x2a4>)
 800198a:	440b      	add	r3, r1
 800198c:	749a      	strb	r2, [r3, #18]
			IMU.u8AyTxData[u8AyDataLen++] = ( (  		filteredAccelData.y & 0xFF00 ) >> 8 );
 800198e:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <IMU_Control+0x288>)
 8001990:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001994:	1218      	asrs	r0, r3, #8
 8001996:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac4 <IMU_Control+0x2a8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	b2d1      	uxtb	r1, r2
 800199e:	4a49      	ldr	r2, [pc, #292]	@ (8001ac4 <IMU_Control+0x2a8>)
 80019a0:	7011      	strb	r1, [r2, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	b2c2      	uxtb	r2, r0
 80019a6:	4b46      	ldr	r3, [pc, #280]	@ (8001ac0 <IMU_Control+0x2a4>)
 80019a8:	440b      	add	r3, r1
 80019aa:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			IMU.u8AyTxData[u8AyDataLen++] = ( (uint8_t)  filteredAccelData.y & 0x00FF 		);
 80019ae:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <IMU_Control+0x288>)
 80019b0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80019b4:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <IMU_Control+0x2a8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	b2d1      	uxtb	r1, r2
 80019bc:	4a41      	ldr	r2, [pc, #260]	@ (8001ac4 <IMU_Control+0x2a8>)
 80019be:	7011      	strb	r1, [r2, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	b2c2      	uxtb	r2, r0
 80019c4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <IMU_Control+0x2a4>)
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			IMU.u8AzTxData[u8AzDataLen++] = ( (  		filteredAccelData.z & 0xFF00 ) >> 8 );
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <IMU_Control+0x288>)
 80019ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d2:	1218      	asrs	r0, r3, #8
 80019d4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <IMU_Control+0x2ac>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	b2d1      	uxtb	r1, r2
 80019dc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ac8 <IMU_Control+0x2ac>)
 80019de:	7011      	strb	r1, [r2, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	b2c2      	uxtb	r2, r0
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <IMU_Control+0x2a4>)
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
			IMU.u8AzTxData[u8AzDataLen++] = ( (uint8_t)  filteredAccelData.z & 0x00FF 		);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <IMU_Control+0x288>)
 80019ee:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <IMU_Control+0x2ac>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	b2d1      	uxtb	r1, r2
 80019fa:	4a33      	ldr	r2, [pc, #204]	@ (8001ac8 <IMU_Control+0x2ac>)
 80019fc:	7011      	strb	r1, [r2, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	b2c2      	uxtb	r2, r0
 8001a02:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a04:	440b      	add	r3, r1
 8001a06:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

			// Check if buffer is getting full
			if ( u8AxDataLen >=  IMU_Data_Length )
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <IMU_Control+0x2a0>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a10:	d931      	bls.n	8001a76 <IMU_Control+0x25a>
//				memcpy ( tsStreamIMU.u8AxTxData, IMU.u8AxTxData, 64 );
//				memcpy ( tsStreamIMU.u8AyTxData, IMU.u8AyTxData, 64 );
//				memcpy ( tsStreamIMU.u8AzTxData, IMU.u8AzTxData, 64 );

				// Release the data into BLE notification
				tsStreamIMU.bReleaseAccelData = true;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <IMU_Control+0x2b0>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				tsStreamIMU.bReleaseGyroData = true;
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001acc <IMU_Control+0x2b0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
				// Copy data lengths
				IMU.u8AxTxLen = u8AxDataLen; 	IMU.u8AyTxLen = u8AyDataLen; 	IMU.u8AzTxLen = u8AzDataLen;
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <IMU_Control+0x2a0>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a28:	731a      	strb	r2, [r3, #12]
 8001a2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <IMU_Control+0x2a8>)
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a30:	735a      	strb	r2, [r3, #13]
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <IMU_Control+0x2ac>)
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a38:	739a      	strb	r2, [r3, #14]
				IMU.u8GxTxLen = u8GxDataLen; 	IMU.u8GyTxLen = u8GyDataLen; 	IMU.u8GzTxLen = u8GzDataLen;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <IMU_Control+0x2b4>)
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a40:	73da      	strb	r2, [r3, #15]
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <IMU_Control+0x2b8>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a48:	741a      	strb	r2, [r3, #16]
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <IMU_Control+0x2bc>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <IMU_Control+0x2a4>)
 8001a50:	745a      	strb	r2, [r3, #17]
//				 IMU.u8AyTxLen = 0;
//				 IMU.u8AzTxLen = 0;


				// Reset the pointer
				u8AxDataLen = 0;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <IMU_Control+0x2a0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
				u8AyDataLen = 0;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <IMU_Control+0x2a8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
				u8AzDataLen = 0;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <IMU_Control+0x2ac>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
				u8GxDataLen = 0;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <IMU_Control+0x2b4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
				u8GyDataLen = 0;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <IMU_Control+0x2b8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
				u8GzDataLen = 0;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <IMU_Control+0x2bc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			}

			teIMU_State = IMU_STATE_SELECT_SLAVE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <IMU_Control+0x274>)
 8001a78:	2203      	movs	r2, #3
 8001a7a:	701a      	strb	r2, [r3, #0]
			break;
 8001a7c:	e005      	b.n	8001a8a <IMU_Control+0x26e>

		//----------------------------------------------------
		default:

			teIMU_State = IMU_STATE_ERROR;
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <IMU_Control+0x274>)
 8001a80:	2209      	movs	r2, #9
 8001a82:	701a      	strb	r2, [r3, #0]
			IMU_Error();
 8001a84:	f000 f8ae 	bl	8001be4 <IMU_Error>
			break;
 8001a88:	bf00      	nop
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000cf0 	.word	0x20000cf0
 8001a98:	20000009 	.word	0x20000009
 8001a9c:	20000f60 	.word	0x20000f60
 8001aa0:	200009a0 	.word	0x200009a0
 8001aa4:	20000990 	.word	0x20000990
 8001aa8:	20000970 	.word	0x20000970
 8001aac:	200009a8 	.word	0x200009a8
 8001ab0:	20000998 	.word	0x20000998
 8001ab4:	20000980 	.word	0x20000980
 8001ab8:	200009b4 	.word	0x200009b4
 8001abc:	200009ae 	.word	0x200009ae
 8001ac0:	20000658 	.word	0x20000658
 8001ac4:	200009af 	.word	0x200009af
 8001ac8:	200009b0 	.word	0x200009b0
 8001acc:	20000744 	.word	0x20000744
 8001ad0:	200009b1 	.word	0x200009b1
 8001ad4:	200009b2 	.word	0x200009b2
 8001ad8:	200009b3 	.word	0x200009b3

08001adc <IMU_ReadID>:

//-----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_ReadID(I2C_HandleTypeDef *hi2c, uint8_t *id)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    return HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_WHO_AM_I, 1, id, 1, I2C_DELAY);
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	220f      	movs	r2, #15
 8001af6:	21d4      	movs	r1, #212	@ 0xd4
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f003 fef9 	bl	80058f0 <HAL_I2C_Mem_Read>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <IMU_ReadAccel>:
//-----------------------------------------------------------------------------------------------------

HAL_StatusTypeDef IMU_ReadAccel(I2C_HandleTypeDef *hi2c, tsVector3D *pData)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];

    if ( HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_OUTX_L_XL, 1, rawData, 6, I2C_DELAY) != HAL_OK )
 8001b12:	230a      	movs	r3, #10
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	2306      	movs	r3, #6
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	2228      	movs	r2, #40	@ 0x28
 8001b24:	21d4      	movs	r1, #212	@ 0xd4
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f003 fee2 	bl	80058f0 <HAL_I2C_Mem_Read>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <IMU_ReadAccel+0x2e>
    {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01b      	b.n	8001b6e <IMU_ReadAccel+0x66>
    }

    pData->x = (int16_t)((rawData[1] << 8) | rawData[0]);
 8001b36:	7a7b      	ldrb	r3, [r7, #9]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	7a3b      	ldrb	r3, [r7, #8]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	801a      	strh	r2, [r3, #0]
    pData->y = (int16_t)((rawData[3] << 8) | rawData[2]);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	7abb      	ldrb	r3, [r7, #10]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	805a      	strh	r2, [r3, #2]
    pData->z = (int16_t)((rawData[5] << 8) | rawData[4]);
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	7b3b      	ldrb	r3, [r7, #12]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <IMU_ReadGyro>:
//-----------------------------------------------------------------------------------------------------

HAL_StatusTypeDef IMU_ReadGyro(I2C_HandleTypeDef *hi2c, tsVector3D *pData)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b088      	sub	sp, #32
 8001b7a:	af04      	add	r7, sp, #16
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];

    if ( HAL_I2C_Mem_Read(hi2c, IMU_ADDR, IMU_OUTX_L_G, 1, rawData, 6, I2C_DELAY) != HAL_OK )
 8001b80:	230a      	movs	r3, #10
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	2306      	movs	r3, #6
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2222      	movs	r2, #34	@ 0x22
 8001b92:	21d4      	movs	r1, #212	@ 0xd4
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f003 feab 	bl	80058f0 <HAL_I2C_Mem_Read>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <IMU_ReadGyro+0x2e>
    {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e01b      	b.n	8001bdc <IMU_ReadGyro+0x66>
    }

    pData->x = (int16_t)((rawData[1] << 8) | rawData[0]);
 8001ba4:	7a7b      	ldrb	r3, [r7, #9]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	7a3b      	ldrb	r3, [r7, #8]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	801a      	strh	r2, [r3, #0]
    pData->y = (int16_t)((rawData[3] << 8) | rawData[2]);
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	7abb      	ldrb	r3, [r7, #10]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	805a      	strh	r2, [r3, #2]
    pData->z = (int16_t)((rawData[5] << 8) | rawData[4]);
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	7b3b      	ldrb	r3, [r7, #12]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <IMU_Error>:
//--------------------------------------------------------------------------------------------

void IMU_Error ( void )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	DIAG (" IMU ERROR\r\n");
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <IMU_Error+0x10>)
 8001bea:	f000 ff23 	bl	8002a34 <DIAG>
	//SET_RGB_COLOR (RED);
	//tsSystem.u8Error |= eBus_Error;
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08017534 	.word	0x08017534

08001bf8 <IMU_StreamDataPack>:
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t *Ax_pData, uint8_t *Ay_pData, uint8_t *Az_pData, uint8_t *outputString   )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 	uint8_t index=0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4862      	ldr	r0, [pc, #392]	@ (8001d9c <IMU_StreamDataPack+0x1a4>)
 8001c12:	f014 fcc1 	bl	8016598 <memset>

 	outputString [index++] = 'S';
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	75fa      	strb	r2, [r7, #23]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	2253      	movs	r2, #83	@ 0x53
 8001c24:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	75fa      	strb	r2, [r7, #23]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a5b      	ldr	r2, [pc, #364]	@ (8001da0 <IMU_StreamDataPack+0x1a8>)
 8001c34:	7952      	ldrb	r2, [r2, #5]
 8001c36:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	75fa      	strb	r2, [r7, #23]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	222c      	movs	r2, #44	@ 0x2c
 8001c46:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	75fa      	strb	r2, [r7, #23]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	2243      	movs	r2, #67	@ 0x43
 8001c56:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	75fa      	strb	r2, [r7, #23]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	2231      	movs	r2, #49	@ 0x31
 8001c66:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	75fa      	strb	r2, [r7, #23]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	222c      	movs	r2, #44	@ 0x2c
 8001c76:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	75fa      	strb	r2, [r7, #23]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	75fa      	strb	r2, [r7, #23]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	222c      	movs	r2, #44	@ 0x2c
 8001c96:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, Ax_pData, 64 );
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f014 fd1b 	bl	80166de <memcpy>
 	index += 64;
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	3340      	adds	r3, #64	@ 0x40
 8001cac:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	75fa      	strb	r2, [r7, #23]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	222c      	movs	r2, #44	@ 0x2c
 8001cbc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	75fa      	strb	r2, [r7, #23]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	2243      	movs	r2, #67	@ 0x43
 8001ccc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	75fa      	strb	r2, [r7, #23]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2232      	movs	r2, #50	@ 0x32
 8001cdc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	75fa      	strb	r2, [r7, #23]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	222c      	movs	r2, #44	@ 0x2c
 8001cec:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	75fa      	strb	r2, [r7, #23]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	75fa      	strb	r2, [r7, #23]
 8001d04:	461a      	mov	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	222c      	movs	r2, #44	@ 0x2c
 8001d0c:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Ay_pData, 64 );
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f014 fce0 	bl	80166de <memcpy>
 	index += 64;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	3340      	adds	r3, #64	@ 0x40
 8001d22:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	75fa      	strb	r2, [r7, #23]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	222c      	movs	r2, #44	@ 0x2c
 8001d32:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	75fa      	strb	r2, [r7, #23]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	2243      	movs	r2, #67	@ 0x43
 8001d42:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '3';
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	75fa      	strb	r2, [r7, #23]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2233      	movs	r2, #51	@ 0x33
 8001d52:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	75fa      	strb	r2, [r7, #23]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	222c      	movs	r2, #44	@ 0x2c
 8001d62:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	75fa      	strb	r2, [r7, #23]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	2240      	movs	r2, #64	@ 0x40
 8001d72:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	75fa      	strb	r2, [r7, #23]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	222c      	movs	r2, #44	@ 0x2c
 8001d82:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Az_pData, 64 );
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	2240      	movs	r2, #64	@ 0x40
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f014 fca5 	bl	80166de <memcpy>
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000074a 	.word	0x2000074a
 8001da0:	20001004 	.word	0x20001004
 8001da4:	00000000 	.word	0x00000000

08001da8 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001db4:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8001db8:	68b8      	ldr	r0, [r7, #8]
 8001dba:	f7fe fb9d 	bl	80004f8 <__aeabi_f2d>
 8001dbe:	a321      	add	r3, pc, #132	@ (adr r3, 8001e44 <HighPassFilter_Init+0x9c>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fbf0 	bl	80005a8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	491b      	ldr	r1, [pc, #108]	@ (8001e40 <HighPassFilter_Init+0x98>)
 8001dd2:	f7fe fd13 	bl	80007fc <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fdf5 	bl	80009cc <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 8001de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 8001df6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e02:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	81da      	strh	r2, [r3, #14]
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	3ff00000 	.word	0x3ff00000
 8001e44:	54442d18 	.word	0x54442d18
 8001e48:	401921fb 	.word	0x401921fb

08001e4c <HighPassFilter_Apply>:

//--------------------------------------------------------------------------------------------
void HighPassFilter_Apply(tsHighPassFilter *filter, tsVector3D *input,  tsVector3D *output)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	//tsVector3D output;
    output->x = filter->alpha * (filter->prev_output.x + input->x - filter->prev_input.x);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e86:	ee17 3a90 	vmov	r3, s15
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	801a      	strh	r2, [r3, #0]
    output->y = filter->alpha * (filter->prev_output.y + input->y - filter->prev_input.y);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebe:	ee17 3a90 	vmov	r3, s15
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	805a      	strh	r2, [r3, #2]
    output->z = filter->alpha * (filter->prev_output.z + input->z - filter->prev_input.z);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	809a      	strh	r2, [r3, #4]

    filter->prev_input.x = input->x;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = input->y;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = input->z;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = output->x;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = output->y;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = output->z;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	81da      	strh	r2, [r3, #14]

}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <APPD_EnableCPU2+0x34>)
 8001f50:	1d3c      	adds	r4, r7, #4
 8001f52:	461d      	mov	r5, r3
 8001f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f5c:	c403      	stmia	r4!, {r0, r1}
 8001f5e:	8022      	strh	r2, [r4, #0]
 8001f60:	3402      	adds	r4, #2
 8001f62:	0c13      	lsrs	r3, r2, #16
 8001f64:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001f66:	f010 f9cf 	bl	8012308 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00f fc60 	bl	8011832 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001f72:	bf00      	nop
}
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08017544 	.word	0x08017544

08001f80 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001f8e:	897a      	ldrh	r2, [r7, #10]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	2000      	movs	r0, #0
 8001f96:	f001 fbb7 	bl	8003708 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001f9a:	bf00      	nop
}
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <LL_PWR_SMPS_Enable+0x1c>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <LL_PWR_SMPS_Enable+0x1c>)
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb2:	61d3      	str	r3, [r2, #28]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	58000400 	.word	0x58000400

08001fc4 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fd4:	4904      	ldr	r1, [pc, #16]	@ (8001fe8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61cb      	str	r3, [r1, #28]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f023 020f 	bic.w	r2, r3, #15
 800200e:	4913      	ldr	r1, [pc, #76]	@ (800205c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4313      	orrs	r3, r2
 8002014:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8002016:	e019      	b.n	800204c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3b06      	subs	r3, #6
 800201c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da02      	bge.n	8002032 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e004      	b.n	800203c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	dd01      	ble.n	800203c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8002038:	230f      	movs	r3, #15
 800203a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f023 020f 	bic.w	r2, r3, #15
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4905      	ldr	r1, [pc, #20]	@ (800205c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	1fff7558 	.word	0x1fff7558
 800205c:	58000400 	.word	0x58000400

08002060 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <LL_C2_PWR_SetPowerMode+0x28>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4905      	ldr	r1, [pc, #20]	@ (8002088 <LL_C2_PWR_SetPowerMode+0x28>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	58000400 	.word	0x58000400

0800208c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002096:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800209a:	4905      	ldr	r1, [pc, #20]	@ (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	58000800 	.word	0x58000800

080020b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80020c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020ce:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	cafecafe 	.word	0xcafecafe

080020f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002168:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800216c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002170:	d101      	bne.n	8002176 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002196:	d101      	bne.n	800219c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4313      	orrs	r3, r2
 80021be:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <LL_DBGMCU_GetDeviceID+0x18>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e0042000 	.word	0xe0042000

080021f8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <LL_DBGMCU_GetRevisionID+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b29b      	uxth	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e0042000 	.word	0xe0042000

08002214 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	615a      	str	r2, [r3, #20]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	615a      	str	r2, [r3, #20]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	619a      	str	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <LL_LPM_EnableSleep+0x1c>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <LL_LPM_EnableSleep+0x1c>)
 80022e2:	f023 0304 	bic.w	r3, r3, #4
 80022e6:	6113      	str	r3, [r2, #16]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	22ff      	movs	r2, #255	@ 0xff
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	22ca      	movs	r2, #202	@ 0xca
 800231e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <MX_APPE_Config+0x18>)
 800235e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002362:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002364:	f000 f829 	bl	80023ba <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002368:	f000 f868 	bl	800243c <Config_HSE>

  return;
 800236c:	bf00      	nop
}
 800236e:	bd80      	pop	{r7, pc}
 8002370:	58004000 	.word	0x58004000

08002374 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002378:	f000 f874 	bl	8002464 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800237c:	f000 f88c 	bl	8002498 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002380:	4903      	ldr	r1, [pc, #12]	@ (8002390 <MX_APPE_Init+0x1c>)
 8002382:	2000      	movs	r0, #0
 8002384:	f000 ffce 	bl	8003324 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002388:	f000 f896 	bl	80024b8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800238c:	bf00      	nop
}
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000d94 	.word	0x20000d94

08002394 <Init_Smps>:

void Init_Smps(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fe13 	bl	8001fc4 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800239e:	2004      	movs	r0, #4
 80023a0:	f7ff fe24 	bl	8001fec <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80023a4:	f7ff fdfe 	bl	8001fa4 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80023a8:	bf00      	nop
}
 80023aa:	bd80      	pop	{r7, pc}

080023ac <Init_Exti>:

void Init_Exti(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80023b0:	2050      	movs	r0, #80	@ 0x50
 80023b2:	f7ff fe6b 	bl	800208c <LL_EXTI_EnableIT_32_63>

  return;
 80023b6:	bf00      	nop
}
 80023b8:	bd80      	pop	{r7, pc}

080023ba <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80023be:	f000 f804 	bl	80023ca <Reset_BackupDomain>

  Reset_IPCC();
 80023c2:	f000 f819 	bl	80023f8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80023c6:	bf00      	nop
}
 80023c8:	bd80      	pop	{r7, pc}

080023ca <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80023ce:	f7ff fec5 	bl	800215c <LL_RCC_IsActiveFlag_PINRST>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <Reset_BackupDomain+0x2a>
 80023d8:	f7ff fed3 	bl	8002182 <LL_RCC_IsActiveFlag_SFTRST>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80023e2:	f005 fc5f 	bl	8007ca4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80023e6:	f005 fc5d 	bl	8007ca4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80023ea:	f7ff fe95 	bl	8002118 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	f7ff fea4 	bl	800213a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
}
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80023fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002400:	f7ff fed2 	bl	80021a8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002404:	213f      	movs	r1, #63	@ 0x3f
 8002406:	480c      	ldr	r0, [pc, #48]	@ (8002438 <Reset_IPCC+0x40>)
 8002408:	f7ff ff4a 	bl	80022a0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800240c:	213f      	movs	r1, #63	@ 0x3f
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <Reset_IPCC+0x40>)
 8002410:	f7ff ff54 	bl	80022bc <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002414:	213f      	movs	r1, #63	@ 0x3f
 8002416:	4808      	ldr	r0, [pc, #32]	@ (8002438 <Reset_IPCC+0x40>)
 8002418:	f7ff fefc 	bl	8002214 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800241c:	213f      	movs	r1, #63	@ 0x3f
 800241e:	4806      	ldr	r0, [pc, #24]	@ (8002438 <Reset_IPCC+0x40>)
 8002420:	f7ff ff1b 	bl	800225a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002424:	213f      	movs	r1, #63	@ 0x3f
 8002426:	4804      	ldr	r0, [pc, #16]	@ (8002438 <Reset_IPCC+0x40>)
 8002428:	f7ff ff06 	bl	8002238 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800242c:	213f      	movs	r1, #63	@ 0x3f
 800242e:	4802      	ldr	r0, [pc, #8]	@ (8002438 <Reset_IPCC+0x40>)
 8002430:	f7ff ff25 	bl	800227e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002434:	bf00      	nop
}
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58000c00 	.word	0x58000c00

0800243c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002442:	2000      	movs	r0, #0
 8002444:	f010 f8b4 	bl	80125b0 <OTP_Read>
 8002448:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	799b      	ldrb	r3, [r3, #6]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe2d 	bl	80020b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800245a:	bf00      	nop
 800245c:	bf00      	nop
}
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <System_Init>:

static void System_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  Init_Smps();
 8002468:	f7ff ff94 	bl	8002394 <Init_Smps>

  Init_Exti();
 800246c:	f7ff ff9e 	bl	80023ac <Init_Exti>

  Init_Rtc();
 8002470:	f000 f802 	bl	8002478 <Init_Rtc>

  return;
 8002474:	bf00      	nop
}
 8002476:	bd80      	pop	{r7, pc}

08002478 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <Init_Rtc+0x1c>)
 800247e:	f7ff ff48 	bl	8002312 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002482:	2100      	movs	r1, #0
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <Init_Rtc+0x1c>)
 8002486:	f7ff ff54 	bl	8002332 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800248a:	4802      	ldr	r0, [pc, #8]	@ (8002494 <Init_Rtc+0x1c>)
 800248c:	f7ff ff34 	bl	80022f8 <LL_RTC_EnableWriteProtection>

  return;
 8002490:	bf00      	nop
}
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40002800 	.word	0x40002800

08002498 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800249c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024a0:	f7ff fe26 	bl	80020f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80024a4:	f013 fbb2 	bl	8015c0c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80024a8:	2004      	movs	r0, #4
 80024aa:	f7ff fdd9 	bl	8002060 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 80024ae:	f005 fc17 	bl	8007ce0 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80024b2:	bf00      	nop
}
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80024be:	f00f fd6d 	bl	8011f9c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80024c2:	4a11      	ldr	r2, [pc, #68]	@ (8002508 <appe_Tl_Init+0x50>)
 80024c4:	2100      	movs	r1, #0
 80024c6:	2040      	movs	r0, #64	@ 0x40
 80024c8:	f013 fcde 	bl	8015e88 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <appe_Tl_Init+0x54>)
 80024ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <appe_Tl_Init+0x58>)
 80024d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	480e      	ldr	r0, [pc, #56]	@ (8002514 <appe_Tl_Init+0x5c>)
 80024da:	f00f fc21 	bl	8011d20 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <appe_Tl_Init+0x60>)
 80024e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <appe_Tl_Init+0x64>)
 80024e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <appe_Tl_Init+0x68>)
 80024e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80024ea:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 80024ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4618      	mov	r0, r3
 80024f6:	f00f fe93 	bl	8012220 <TL_MM_Init>

  TL_Enable();
 80024fa:	f00f fd49 	bl	8011f90 <TL_Enable>

  return;
 80024fe:	bf00      	nop
}
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	08011d59 	.word	0x08011d59
 800250c:	20031c24 	.word	0x20031c24
 8002510:	08002525 	.word	0x08002525
 8002514:	0800253d 	.word	0x0800253d
 8002518:	20031e3c 	.word	0x20031e3c
 800251c:	20031d30 	.word	0x20031d30
 8002520:	200301f8 	.word	0x200301f8

08002524 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800252e:	bf00      	nop
}
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	330b      	adds	r3, #11
 800254a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8002556:	2b07      	cmp	r3, #7
 8002558:	f200 80d0 	bhi.w	80026fc <APPE_SysUserEvtRx+0x1c0>
 800255c:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <APPE_SysUserEvtRx+0x28>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002585 	.word	0x08002585
 8002568:	08002617 	.word	0x08002617
 800256c:	08002639 	.word	0x08002639
 8002570:	080026fd 	.word	0x080026fd
 8002574:	0800267d 	.word	0x0800267d
 8002578:	080026a1 	.word	0x080026a1
 800257c:	080026bd 	.word	0x080026bd
 8002580:	080026e1 	.word	0x080026e1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4618      	mov	r0, r3
 800258a:	f00f f97f 	bl	801188c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800258e:	485e      	ldr	r0, [pc, #376]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 8002590:	f00f ff46 	bl	8012420 <DbgTraceGetFileName>
 8002594:	4601      	mov	r1, r0
 8002596:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 800259a:	4a5c      	ldr	r2, [pc, #368]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 800259c:	485c      	ldr	r0, [pc, #368]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 800259e:	f013 fe73 	bl	8016288 <iprintf>
 80025a2:	7b3b      	ldrb	r3, [r7, #12]
 80025a4:	4619      	mov	r1, r3
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	461a      	mov	r2, r3
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	4859      	ldr	r0, [pc, #356]	@ (8002714 <APPE_SysUserEvtRx+0x1d8>)
 80025ae:	f013 fe6b 	bl	8016288 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80025b2:	4855      	ldr	r0, [pc, #340]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80025b4:	f00f ff34 	bl	8012420 <DbgTraceGetFileName>
 80025b8:	4601      	mov	r1, r0
 80025ba:	f240 136b 	movw	r3, #363	@ 0x16b
 80025be:	4a53      	ldr	r2, [pc, #332]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 80025c0:	4853      	ldr	r0, [pc, #332]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 80025c2:	f013 fe61 	bl	8016288 <iprintf>
 80025c6:	7c3b      	ldrb	r3, [r7, #16]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4853      	ldr	r0, [pc, #332]	@ (8002718 <APPE_SysUserEvtRx+0x1dc>)
 80025cc:	f013 fe5c 	bl	8016288 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80025d0:	484d      	ldr	r0, [pc, #308]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80025d2:	f00f ff25 	bl	8012420 <DbgTraceGetFileName>
 80025d6:	4601      	mov	r1, r0
 80025d8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80025dc:	4a4b      	ldr	r2, [pc, #300]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 80025de:	484c      	ldr	r0, [pc, #304]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 80025e0:	f013 fe52 	bl	8016288 <iprintf>
 80025e4:	7dbb      	ldrb	r3, [r7, #22]
 80025e6:	4619      	mov	r1, r3
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	461a      	mov	r2, r3
 80025ec:	7e3b      	ldrb	r3, [r7, #24]
 80025ee:	484b      	ldr	r0, [pc, #300]	@ (800271c <APPE_SysUserEvtRx+0x1e0>)
 80025f0:	f013 fe4a 	bl	8016288 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80025f4:	4844      	ldr	r0, [pc, #272]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80025f6:	f00f ff13 	bl	8012420 <DbgTraceGetFileName>
 80025fa:	4601      	mov	r1, r0
 80025fc:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 8002602:	4843      	ldr	r0, [pc, #268]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 8002604:	f013 fe40 	bl	8016288 <iprintf>
 8002608:	4845      	ldr	r0, [pc, #276]	@ (8002720 <APPE_SysUserEvtRx+0x1e4>)
 800260a:	f013 fe3d 	bl	8016288 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8e0 	bl	80027d4 <APPE_SysEvtReadyProcessing>
    break;
 8002614:	e073      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8002616:	483c      	ldr	r0, [pc, #240]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 8002618:	f00f ff02 	bl	8012420 <DbgTraceGetFileName>
 800261c:	4601      	mov	r1, r0
 800261e:	f240 1373 	movw	r3, #371	@ 0x173
 8002622:	4a3a      	ldr	r2, [pc, #232]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 8002624:	483a      	ldr	r0, [pc, #232]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 8002626:	f013 fe2f 	bl	8016288 <iprintf>
 800262a:	483e      	ldr	r0, [pc, #248]	@ (8002724 <APPE_SysUserEvtRx+0x1e8>)
 800262c:	f013 fe2c 	bl	8016288 <iprintf>
    APPE_SysEvtError(pPayload);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f885 	bl	8002740 <APPE_SysEvtError>
    break;
 8002636:	e062      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8002638:	4833      	ldr	r0, [pc, #204]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 800263a:	f00f fef1 	bl	8012420 <DbgTraceGetFileName>
 800263e:	4601      	mov	r1, r0
 8002640:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002644:	4a31      	ldr	r2, [pc, #196]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 8002646:	4832      	ldr	r0, [pc, #200]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 8002648:	f013 fe1e 	bl	8016288 <iprintf>
 800264c:	4836      	ldr	r0, [pc, #216]	@ (8002728 <APPE_SysUserEvtRx+0x1ec>)
 800264e:	f013 fe8b 	bl	8016368 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8002652:	482d      	ldr	r0, [pc, #180]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 8002654:	f00f fee4 	bl	8012420 <DbgTraceGetFileName>
 8002658:	4601      	mov	r1, r0
 800265a:	f240 1379 	movw	r3, #377	@ 0x179
 800265e:	4a2b      	ldr	r2, [pc, #172]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 8002660:	482b      	ldr	r0, [pc, #172]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 8002662:	f013 fe11 	bl	8016288 <iprintf>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3302      	adds	r3, #2
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3302      	adds	r3, #2
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	482d      	ldr	r0, [pc, #180]	@ (800272c <APPE_SysUserEvtRx+0x1f0>)
 8002676:	f013 fe07 	bl	8016288 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800267a:	e040      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800267c:	4822      	ldr	r0, [pc, #136]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 800267e:	f00f fecf 	bl	8012420 <DbgTraceGetFileName>
 8002682:	4601      	mov	r1, r0
 8002684:	f240 137f 	movw	r3, #383	@ 0x17f
 8002688:	4a20      	ldr	r2, [pc, #128]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 800268a:	4821      	ldr	r0, [pc, #132]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 800268c:	f013 fdfc 	bl	8016288 <iprintf>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3302      	adds	r3, #2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4825      	ldr	r0, [pc, #148]	@ (8002730 <APPE_SysUserEvtRx+0x1f4>)
 800269a:	f013 fdf5 	bl	8016288 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800269e:	e02e      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80026a0:	4819      	ldr	r0, [pc, #100]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80026a2:	f00f febd 	bl	8012420 <DbgTraceGetFileName>
 80026a6:	4601      	mov	r1, r0
 80026a8:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80026ac:	4a17      	ldr	r2, [pc, #92]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 80026ae:	4818      	ldr	r0, [pc, #96]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 80026b0:	f013 fdea 	bl	8016288 <iprintf>
 80026b4:	481f      	ldr	r0, [pc, #124]	@ (8002734 <APPE_SysUserEvtRx+0x1f8>)
 80026b6:	f013 fde7 	bl	8016288 <iprintf>
    break;
 80026ba:	e020      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80026bc:	4812      	ldr	r0, [pc, #72]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80026be:	f00f feaf 	bl	8012420 <DbgTraceGetFileName>
 80026c2:	4601      	mov	r1, r0
 80026c4:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80026c8:	4a10      	ldr	r2, [pc, #64]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 80026ca:	4811      	ldr	r0, [pc, #68]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 80026cc:	f013 fddc 	bl	8016288 <iprintf>
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3302      	adds	r3, #2
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4817      	ldr	r0, [pc, #92]	@ (8002738 <APPE_SysUserEvtRx+0x1fc>)
 80026da:	f013 fdd5 	bl	8016288 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80026de:	e00e      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80026e0:	4809      	ldr	r0, [pc, #36]	@ (8002708 <APPE_SysUserEvtRx+0x1cc>)
 80026e2:	f00f fe9d 	bl	8012420 <DbgTraceGetFileName>
 80026e6:	4601      	mov	r1, r0
 80026e8:	f240 138d 	movw	r3, #397	@ 0x18d
 80026ec:	4a07      	ldr	r2, [pc, #28]	@ (800270c <APPE_SysUserEvtRx+0x1d0>)
 80026ee:	4808      	ldr	r0, [pc, #32]	@ (8002710 <APPE_SysUserEvtRx+0x1d4>)
 80026f0:	f013 fdca 	bl	8016288 <iprintf>
 80026f4:	4811      	ldr	r0, [pc, #68]	@ (800273c <APPE_SysUserEvtRx+0x200>)
 80026f6:	f013 fdc7 	bl	8016288 <iprintf>
    break;
 80026fa:	e000      	b.n	80026fe <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80026fc:	bf00      	nop
  }

  return;
 80026fe:	bf00      	nop
}
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	08017560 	.word	0x08017560
 800270c:	0801904c 	.word	0x0801904c
 8002710:	08017578 	.word	0x08017578
 8002714:	0801758c 	.word	0x0801758c
 8002718:	080175b0 	.word	0x080175b0
 800271c:	080175cc 	.word	0x080175cc
 8002720:	080175e4 	.word	0x080175e4
 8002724:	08017604 	.word	0x08017604
 8002728:	08017628 	.word	0x08017628
 800272c:	08017678 	.word	0x08017678
 8002730:	080176a0 	.word	0x080176a0
 8002734:	080176dc 	.word	0x080176dc
 8002738:	08017700 	.word	0x08017700
 800273c:	0801773c 	.word	0x0801773c

08002740 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	330b      	adds	r3, #11
 800274e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3302      	adds	r3, #2
 8002754:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8002756:	4819      	ldr	r0, [pc, #100]	@ (80027bc <APPE_SysEvtError+0x7c>)
 8002758:	f00f fe62 	bl	8012420 <DbgTraceGetFileName>
 800275c:	4601      	mov	r1, r0
 800275e:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8002762:	4a17      	ldr	r2, [pc, #92]	@ (80027c0 <APPE_SysEvtError+0x80>)
 8002764:	4817      	ldr	r0, [pc, #92]	@ (80027c4 <APPE_SysEvtError+0x84>)
 8002766:	f013 fd8f 	bl	8016288 <iprintf>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	4815      	ldr	r0, [pc, #84]	@ (80027c8 <APPE_SysEvtError+0x88>)
 8002772:	f013 fd89 	bl	8016288 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800277e:	480f      	ldr	r0, [pc, #60]	@ (80027bc <APPE_SysEvtError+0x7c>)
 8002780:	f00f fe4e 	bl	8012420 <DbgTraceGetFileName>
 8002784:	4601      	mov	r1, r0
 8002786:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800278a:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <APPE_SysEvtError+0x80>)
 800278c:	480d      	ldr	r0, [pc, #52]	@ (80027c4 <APPE_SysEvtError+0x84>)
 800278e:	f013 fd7b 	bl	8016288 <iprintf>
 8002792:	480e      	ldr	r0, [pc, #56]	@ (80027cc <APPE_SysEvtError+0x8c>)
 8002794:	f013 fde8 	bl	8016368 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002798:	e00d      	b.n	80027b6 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800279a:	4808      	ldr	r0, [pc, #32]	@ (80027bc <APPE_SysEvtError+0x7c>)
 800279c:	f00f fe40 	bl	8012420 <DbgTraceGetFileName>
 80027a0:	4601      	mov	r1, r0
 80027a2:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80027a6:	4a06      	ldr	r2, [pc, #24]	@ (80027c0 <APPE_SysEvtError+0x80>)
 80027a8:	4806      	ldr	r0, [pc, #24]	@ (80027c4 <APPE_SysEvtError+0x84>)
 80027aa:	f013 fd6d 	bl	8016288 <iprintf>
 80027ae:	4808      	ldr	r0, [pc, #32]	@ (80027d0 <APPE_SysEvtError+0x90>)
 80027b0:	f013 fdda 	bl	8016368 <puts>
  return;
 80027b4:	bf00      	nop
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	08017560 	.word	0x08017560
 80027c0:	08019060 	.word	0x08019060
 80027c4:	08017578 	.word	0x08017578
 80027c8:	08017760 	.word	0x08017760
 80027cc:	08017790 	.word	0x08017790
 80027d0:	080177cc 	.word	0x080177cc

080027d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	330b      	adds	r3, #11
 80027f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3302      	adds	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d146      	bne.n	8002896 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002808:	4836      	ldr	r0, [pc, #216]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x110>)
 800280a:	f00f fe09 	bl	8012420 <DbgTraceGetFileName>
 800280e:	4601      	mov	r1, r0
 8002810:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002814:	4a34      	ldr	r2, [pc, #208]	@ (80028e8 <APPE_SysEvtReadyProcessing+0x114>)
 8002816:	4835      	ldr	r0, [pc, #212]	@ (80028ec <APPE_SysEvtReadyProcessing+0x118>)
 8002818:	f013 fd36 	bl	8016288 <iprintf>
 800281c:	4834      	ldr	r0, [pc, #208]	@ (80028f0 <APPE_SysEvtReadyProcessing+0x11c>)
 800281e:	f013 fda3 	bl	8016368 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002822:	f7ff fb91 	bl	8001f48 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002826:	230f      	movs	r3, #15
 8002828:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800282a:	237f      	movs	r3, #127	@ 0x7f
 800282c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800282e:	f7ff fce3 	bl	80021f8 <LL_DBGMCU_GetRevisionID>
 8002832:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002834:	482b      	ldr	r0, [pc, #172]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x110>)
 8002836:	f00f fdf3 	bl	8012420 <DbgTraceGetFileName>
 800283a:	4601      	mov	r1, r0
 800283c:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002840:	4a29      	ldr	r2, [pc, #164]	@ (80028e8 <APPE_SysEvtReadyProcessing+0x114>)
 8002842:	482a      	ldr	r0, [pc, #168]	@ (80028ec <APPE_SysEvtReadyProcessing+0x118>)
 8002844:	f013 fd20 	bl	8016288 <iprintf>
 8002848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800284a:	482a      	ldr	r0, [pc, #168]	@ (80028f4 <APPE_SysEvtReadyProcessing+0x120>)
 800284c:	f013 fd1c 	bl	8016288 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	b29b      	uxth	r3, r3
 8002854:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002856:	f7ff fcc1 	bl	80021dc <LL_DBGMCU_GetDeviceID>
 800285a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800285c:	4821      	ldr	r0, [pc, #132]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x110>)
 800285e:	f00f fddf 	bl	8012420 <DbgTraceGetFileName>
 8002862:	4601      	mov	r1, r0
 8002864:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002868:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <APPE_SysEvtReadyProcessing+0x114>)
 800286a:	4820      	ldr	r0, [pc, #128]	@ (80028ec <APPE_SysEvtReadyProcessing+0x118>)
 800286c:	f013 fd0c 	bl	8016288 <iprintf>
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	4821      	ldr	r0, [pc, #132]	@ (80028f8 <APPE_SysEvtReadyProcessing+0x124>)
 8002874:	f013 fd08 	bl	8016288 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	b29b      	uxth	r3, r3
 800287c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4618      	mov	r0, r3
 8002884:	f00e ffec 	bl	8011860 <SHCI_C2_Config>

    APP_BLE_Init();
 8002888:	f010 fb66 	bl	8012f58 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800288c:	2100      	movs	r1, #0
 800288e:	2001      	movs	r0, #1
 8002890:	f013 f9ce 	bl	8015c30 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002894:	e022      	b.n	80028dc <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d110      	bne.n	80028c0 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800289e:	4811      	ldr	r0, [pc, #68]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x110>)
 80028a0:	f00f fdbe 	bl	8012420 <DbgTraceGetFileName>
 80028a4:	4601      	mov	r1, r0
 80028a6:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80028aa:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <APPE_SysEvtReadyProcessing+0x114>)
 80028ac:	480f      	ldr	r0, [pc, #60]	@ (80028ec <APPE_SysEvtReadyProcessing+0x118>)
 80028ae:	f013 fceb 	bl	8016288 <iprintf>
 80028b2:	4812      	ldr	r0, [pc, #72]	@ (80028fc <APPE_SysEvtReadyProcessing+0x128>)
 80028b4:	f013 fce8 	bl	8016288 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  return;
 80028be:	e00d      	b.n	80028dc <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80028c0:	4808      	ldr	r0, [pc, #32]	@ (80028e4 <APPE_SysEvtReadyProcessing+0x110>)
 80028c2:	f00f fdad 	bl	8012420 <DbgTraceGetFileName>
 80028c6:	4601      	mov	r1, r0
 80028c8:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <APPE_SysEvtReadyProcessing+0x114>)
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <APPE_SysEvtReadyProcessing+0x118>)
 80028d0:	f013 fcda 	bl	8016288 <iprintf>
 80028d4:	480a      	ldr	r0, [pc, #40]	@ (8002900 <APPE_SysEvtReadyProcessing+0x12c>)
 80028d6:	f013 fcd7 	bl	8016288 <iprintf>
  return;
 80028da:	bf00      	nop
}
 80028dc:	3728      	adds	r7, #40	@ 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	08017560 	.word	0x08017560
 80028e8:	08019074 	.word	0x08019074
 80028ec:	08017578 	.word	0x08017578
 80028f0:	08017804 	.word	0x08017804
 80028f4:	08017820 	.word	0x08017820
 80028f8:	08017844 	.word	0x08017844
 80028fc:	08017864 	.word	0x08017864
 8002900:	08017898 	.word	0x08017898

08002904 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f002 f894 	bl	8004a38 <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d00a      	beq.n	8002934 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800291e:	f002 f8a3 	bl	8004a68 <HAL_GetTickFreq>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292c:	e002      	b.n	8002934 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800292e:	f7ff fcd3 	bl	80022d8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002932:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002934:	f002 f880 	bl	8004a38 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d8f4      	bhi.n	800292e <HAL_Delay+0x2a>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	f013 f99b 	bl	8015c90 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002962:	bf00      	nop
}
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	f013 f989 	bl	8015c90 <UTIL_SEQ_Run>
  return;
 800297e:	bf00      	nop
}
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800298e:	2100      	movs	r1, #0
 8002990:	2040      	movs	r0, #64	@ 0x40
 8002992:	f013 fa9b 	bl	8015ecc <UTIL_SEQ_SetTask>
  return;
 8002996:	bf00      	nop
}
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029a6:	2002      	movs	r0, #2
 80029a8:	f013 fafc 	bl	8015fa4 <UTIL_SEQ_SetEvt>
  return;
 80029ac:	bf00      	nop
}
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029bc:	2002      	movs	r0, #2
 80029be:	f013 fb11 	bl	8015fe4 <UTIL_SEQ_WaitEvt>
  return;
 80029c2:	bf00      	nop
}
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <Debug_Init>:



//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <Debug_Init+0x14>)
 80029d2:	f000 f82f 	bl	8002a34 <DIAG>
	HAL_Delay(10);
 80029d6:	200a      	movs	r0, #10
 80029d8:	f7ff ff94 	bl	8002904 <HAL_Delay>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	080178cc 	.word	0x080178cc

080029e4 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af02      	add	r7, sp, #8
			}
		#endif


		#ifdef 	IMU_ENABLE
			if ( tsDebug.bReleaseIMUData )
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <Debug_Control+0x48>)
 80029ec:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <Debug_Control+0x40>
//				DIAG (  "%d,%d,%d,%d,%d,%d,%d\r\n",
//						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2],
//						tsDebug.u16Gyro[0], tsDebug.u16Gyro[1], tsDebug.u16Gyro[2] );

				DIAG (  "%d,%d,%d,%d\r\n",
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2]);
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <Debug_Control+0x48>)
 80029f6:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
				DIAG (  "%d,%d,%d,%d\r\n",
 80029fa:	4619      	mov	r1, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2]);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <Debug_Control+0x48>)
 80029fe:	f9b3 3252 	ldrsh.w	r3, [r3, #594]	@ 0x252
				DIAG (  "%d,%d,%d,%d\r\n",
 8002a02:	461a      	mov	r2, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2]);
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <Debug_Control+0x48>)
 8002a06:	f9b3 3254 	ldrsh.w	r3, [r3, #596]	@ 0x254
				DIAG (  "%d,%d,%d,%d\r\n",
 8002a0a:	4618      	mov	r0, r3
						tsDebug.i16TxMCG, tsDebug.u16Accel[0], tsDebug.u16Accel[1], tsDebug.u16Accel[2]);
 8002a0c:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <Debug_Control+0x48>)
 8002a0e:	f9b3 3256 	ldrsh.w	r3, [r3, #598]	@ 0x256
				DIAG (  "%d,%d,%d,%d\r\n",
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4603      	mov	r3, r0
 8002a16:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <Debug_Control+0x4c>)
 8002a18:	f000 f80c 	bl	8002a34 <DIAG>

				tsDebug.bReleaseIMUData= false;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <Debug_Control+0x48>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
			}
		#endif

#endif
#endif
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200009b4 	.word	0x200009b4
 8002a30:	080178e4 	.word	0x080178e4

08002a34 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002a34:	b40f      	push	{r0, r1, r2, r3}
 8002a36:	b580      	push	{r7, lr}
 8002a38:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002a3c:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002a3e:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002a42:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a46:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a4a:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002a4c:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002a50:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002a54:	f107 0008 	add.w	r0, r7, #8
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002a5e:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002a62:	f013 fcf7 	bl	8016454 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002a66:	f107 0308 	add.w	r3, r7, #8
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fb88 	bl	8000180 <strlen>
 8002a70:	4603      	mov	r3, r0
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f012 fc24 	bl	80152c8 <CDC_Transmit_FS>
}
 8002a80:	bf00      	nop
 8002a82:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a8c:	b004      	add	sp, #16
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b80      	cmp	r3, #128	@ 0x80
 8002a9e:	d105      	bne.n	8002aac <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002aa8:	2280      	movs	r2, #128	@ 0x80
 8002aaa:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d109      	bne.n	8002ac6 <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002abc:	2210      	movs	r2, #16
 8002abe:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002ac0:	480c      	ldr	r0, [pc, #48]	@ (8002af4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ac2:	f7ff ffb7 	bl	8002a34 <DIAG>
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT2_Pin)
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d109      	bne.n	8002ae0 <HAL_GPIO_EXTI_Callback+0x50>
	{
		IMU.bInt2 = true;
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT2_Pin);
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT2 \r\n");
 8002ada:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002adc:	f7ff ffaa 	bl	8002a34 <DIAG>
	}

}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000208 	.word	0x20000208
 8002aec:	58000800 	.word	0x58000800
 8002af0:	20000658 	.word	0x20000658
 8002af4:	0801790c 	.word	0x0801790c
 8002af8:	0801791c 	.word	0x0801791c

08002afc <LL_EXTI_EnableIT_0_31>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b0a:	4905      	ldr	r1, [pc, #20]	@ (8002b20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	58000800 	.word	0x58000800

08002b24 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]

}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	58000800 	.word	0x58000800

08002b48 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <ReadRtcSsrValue+0x3c>)
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <ReadRtcSsrValue+0x3c>)
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b5e:	e005      	b.n	8002b6c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b64:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <ReadRtcSsrValue+0x3c>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1f5      	bne.n	8002b60 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b74:	683b      	ldr	r3, [r7, #0]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40002800 	.word	0x40002800

08002b88 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460a      	mov	r2, r1
 8002b92:	71fb      	strb	r3, [r7, #7]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b98:	79ba      	ldrb	r2, [r7, #6]
 8002b9a:	491d      	ldr	r1, [pc, #116]	@ (8002c10 <LinkTimerAfter+0x88>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3315      	adds	r3, #21
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d009      	beq.n	8002bc6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	4916      	ldr	r1, [pc, #88]	@ (8002c10 <LinkTimerAfter+0x88>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	4911      	ldr	r1, [pc, #68]	@ (8002c10 <LinkTimerAfter+0x88>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3315      	adds	r3, #21
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	490c      	ldr	r1, [pc, #48]	@ (8002c10 <LinkTimerAfter+0x88>)
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3314      	adds	r3, #20
 8002bea:	79ba      	ldrb	r2, [r7, #6]
 8002bec:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002bee:	79ba      	ldrb	r2, [r7, #6]
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <LinkTimerAfter+0x88>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3315      	adds	r3, #21
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	701a      	strb	r2, [r3, #0]

  return;
 8002c02:	bf00      	nop
}
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000c1c 	.word	0x20000c1c

08002c14 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002c24:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <LinkTimerBefore+0xb8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	79ba      	ldrb	r2, [r7, #6]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d032      	beq.n	8002c96 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c30:	79ba      	ldrb	r2, [r7, #6]
 8002c32:	4927      	ldr	r1, [pc, #156]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3314      	adds	r3, #20
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	4922      	ldr	r1, [pc, #136]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3315      	adds	r3, #21
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c58:	79fa      	ldrb	r2, [r7, #7]
 8002c5a:	491d      	ldr	r1, [pc, #116]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	3315      	adds	r3, #21
 8002c68:	79ba      	ldrb	r2, [r7, #6]
 8002c6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c6c:	79fa      	ldrb	r2, [r7, #7]
 8002c6e:	4918      	ldr	r1, [pc, #96]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c80:	79ba      	ldrb	r2, [r7, #6]
 8002c82:	4913      	ldr	r1, [pc, #76]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3314      	adds	r3, #20
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c94:	e014      	b.n	8002cc0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c96:	79fa      	ldrb	r2, [r7, #7]
 8002c98:	490d      	ldr	r1, [pc, #52]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3315      	adds	r3, #21
 8002ca6:	79ba      	ldrb	r2, [r7, #6]
 8002ca8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002caa:	79ba      	ldrb	r2, [r7, #6]
 8002cac:	4908      	ldr	r1, [pc, #32]	@ (8002cd0 <LinkTimerBefore+0xbc>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3314      	adds	r3, #20
 8002cba:	79fa      	ldrb	r2, [r7, #7]
 8002cbc:	701a      	strb	r2, [r3, #0]
  return;
 8002cbe:	bf00      	nop
}
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000cac 	.word	0x20000cac
 8002cd0:	20000c1c 	.word	0x20000c1c

08002cd4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cde:	4b4e      	ldr	r3, [pc, #312]	@ (8002e18 <linkTimer+0x144>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d118      	bne.n	8002d1a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e18 <linkTimer+0x144>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <linkTimer+0x148>)
 8002cf0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002cf2:	4a49      	ldr	r2, [pc, #292]	@ (8002e18 <linkTimer+0x144>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	4949      	ldr	r1, [pc, #292]	@ (8002e20 <linkTimer+0x14c>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	3315      	adds	r3, #21
 8002d08:	2206      	movs	r2, #6
 8002d0a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d0c:	4b45      	ldr	r3, [pc, #276]	@ (8002e24 <linkTimer+0x150>)
 8002d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d12:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	81fb      	strh	r3, [r7, #14]
 8002d18:	e078      	b.n	8002e0c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002d1a:	f000 f909 	bl	8002f30 <ReturnTimeElapsed>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002d22:	79fa      	ldrb	r2, [r7, #7]
 8002d24:	493e      	ldr	r1, [pc, #248]	@ (8002e20 <linkTimer+0x14c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3308      	adds	r3, #8
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	89fb      	ldrh	r3, [r7, #14]
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	4419      	add	r1, r3
 8002d3a:	4839      	ldr	r0, [pc, #228]	@ (8002e20 <linkTimer+0x14c>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4403      	add	r3, r0
 8002d46:	3308      	adds	r3, #8
 8002d48:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d4a:	79fa      	ldrb	r2, [r7, #7]
 8002d4c:	4934      	ldr	r1, [pc, #208]	@ (8002e20 <linkTimer+0x14c>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	3308      	adds	r3, #8
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <linkTimer+0x144>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4619      	mov	r1, r3
 8002d66:	4a2e      	ldr	r2, [pc, #184]	@ (8002e20 <linkTimer+0x14c>)
 8002d68:	460b      	mov	r3, r1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	440b      	add	r3, r1
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	3308      	adds	r3, #8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d337      	bcc.n	8002dec <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d7c:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <linkTimer+0x144>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d82:	7b7a      	ldrb	r2, [r7, #13]
 8002d84:	4926      	ldr	r1, [pc, #152]	@ (8002e20 <linkTimer+0x14c>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3315      	adds	r3, #21
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d96:	e013      	b.n	8002dc0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d98:	7b7a      	ldrb	r2, [r7, #13]
 8002d9a:	4921      	ldr	r1, [pc, #132]	@ (8002e20 <linkTimer+0x14c>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	3315      	adds	r3, #21
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002dac:	7b7a      	ldrb	r2, [r7, #13]
 8002dae:	491c      	ldr	r1, [pc, #112]	@ (8002e20 <linkTimer+0x14c>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	3315      	adds	r3, #21
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002dc0:	7b3b      	ldrb	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d00b      	beq.n	8002dde <linkTimer+0x10a>
 8002dc6:	7b3a      	ldrb	r2, [r7, #12]
 8002dc8:	4915      	ldr	r1, [pc, #84]	@ (8002e20 <linkTimer+0x14c>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d2dc      	bcs.n	8002d98 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002dde:	7b7a      	ldrb	r2, [r7, #13]
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fecf 	bl	8002b88 <LinkTimerAfter>
 8002dea:	e00f      	b.n	8002e0c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <linkTimer+0x144>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff0c 	bl	8002c14 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <linkTimer+0x144>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <linkTimer+0x148>)
 8002e04:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002e06:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <linkTimer+0x144>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000cac 	.word	0x20000cac
 8002e1c:	20000cad 	.word	0x20000cad
 8002e20:	20000c1c 	.word	0x20000c1c
 8002e24:	20000cb0 	.word	0x20000cb0

08002e28 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460a      	mov	r2, r1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <UnlinkTimer+0xf8>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d111      	bne.n	8002e68 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <UnlinkTimer+0xf8>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <UnlinkTimer+0xfc>)
 8002e4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e4e:	79fa      	ldrb	r2, [r7, #7]
 8002e50:	4935      	ldr	r1, [pc, #212]	@ (8002f28 <UnlinkTimer+0x100>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3315      	adds	r3, #21
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <UnlinkTimer+0xf8>)
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e03e      	b.n	8002ee6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e68:	79fa      	ldrb	r2, [r7, #7]
 8002e6a:	492f      	ldr	r1, [pc, #188]	@ (8002f28 <UnlinkTimer+0x100>)
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3314      	adds	r3, #20
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	492a      	ldr	r1, [pc, #168]	@ (8002f28 <UnlinkTimer+0x100>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	3315      	adds	r3, #21
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e90:	79f9      	ldrb	r1, [r7, #7]
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <UnlinkTimer+0x100>)
 8002e96:	460b      	mov	r3, r1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	440b      	add	r3, r1
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4403      	add	r3, r0
 8002ea0:	3315      	adds	r3, #21
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	4920      	ldr	r1, [pc, #128]	@ (8002f28 <UnlinkTimer+0x100>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3315      	adds	r3, #21
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d013      	beq.n	8002ee6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002ebe:	79f9      	ldrb	r1, [r7, #7]
 8002ec0:	7bba      	ldrb	r2, [r7, #14]
 8002ec2:	4819      	ldr	r0, [pc, #100]	@ (8002f28 <UnlinkTimer+0x100>)
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4403      	add	r3, r0
 8002ece:	3314      	adds	r3, #20
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	4914      	ldr	r1, [pc, #80]	@ (8002f28 <UnlinkTimer+0x100>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	490f      	ldr	r1, [pc, #60]	@ (8002f28 <UnlinkTimer+0x100>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <UnlinkTimer+0xf8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d107      	bne.n	8002f14 <UnlinkTimer+0xec>
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f0a:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <UnlinkTimer+0x104>)
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	601a      	str	r2, [r3, #0]
  }

  return;
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
}
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20000cac 	.word	0x20000cac
 8002f24:	20000cad 	.word	0x20000cad
 8002f28:	20000c1c 	.word	0x20000c1c
 8002f2c:	20000cb0 	.word	0x20000cb0

08002f30 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f36:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <ReturnTimeElapsed+0x70>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d026      	beq.n	8002f8e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f40:	f7ff fe02 	bl	8002b48 <ReadRtcSsrValue>
 8002f44:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f46:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <ReturnTimeElapsed+0x70>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d805      	bhi.n	8002f5c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <ReturnTimeElapsed+0x70>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	e00a      	b.n	8002f72 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <ReturnTimeElapsed+0x74>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <ReturnTimeElapsed+0x70>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <ReturnTimeElapsed+0x78>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <ReturnTimeElapsed+0x7c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	40d3      	lsrs	r3, r2
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	e001      	b.n	8002f92 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	b29b      	uxth	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000cb0 	.word	0x20000cb0
 8002fa4:	20000cb8 	.word	0x20000cb8
 8002fa8:	20000cb6 	.word	0x20000cb6
 8002fac:	20000cb5 	.word	0x20000cb5

08002fb0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002fc0:	f7ff fdc2 	bl	8002b48 <ReadRtcSsrValue>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a21      	ldr	r2, [pc, #132]	@ (800304c <RestartWakeupCounter+0x9c>)
 8002fc8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002fca:	2003      	movs	r0, #3
 8002fcc:	f001 fed5 	bl	8004d7a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002fd0:	e039      	b.n	8003046 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d803      	bhi.n	8002fe0 <RestartWakeupCounter+0x30>
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <RestartWakeupCounter+0xa0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002fe6:	bf00      	nop
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <RestartWakeupCounter+0xa4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f8      	beq.n	8002fe8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ff6:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <RestartWakeupCounter+0xa4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <RestartWakeupCounter+0xa4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003006:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <RestartWakeupCounter+0xa8>)
 800300a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800300e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003010:	2003      	movs	r0, #3
 8003012:	f001 fec0 	bl	8004d96 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <RestartWakeupCounter+0xac>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	490e      	ldr	r1, [pc, #56]	@ (800305c <RestartWakeupCounter+0xac>)
 8003022:	4313      	orrs	r3, r2
 8003024:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003026:	f7ff fd8f 	bl	8002b48 <ReadRtcSsrValue>
 800302a:	4603      	mov	r3, r0
 800302c:	4a07      	ldr	r2, [pc, #28]	@ (800304c <RestartWakeupCounter+0x9c>)
 800302e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <RestartWakeupCounter+0xa4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <RestartWakeupCounter+0xa4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800303e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003040:	f3af 8000 	nop.w
  return ;
 8003044:	bf00      	nop
}
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000cb0 	.word	0x20000cb0
 8003050:	20000cb5 	.word	0x20000cb5
 8003054:	20000d94 	.word	0x20000d94
 8003058:	58000800 	.word	0x58000800
 800305c:	40002800 	.word	0x40002800

08003060 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003066:	4b45      	ldr	r3, [pc, #276]	@ (800317c <RescheduleTimerList+0x11c>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	d107      	bne.n	8003084 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003074:	bf00      	nop
 8003076:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <RescheduleTimerList+0x120>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f8      	bne.n	8003076 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003084:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <RescheduleTimerList+0x120>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <RescheduleTimerList+0x120>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003092:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003094:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <RescheduleTimerList+0x124>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	493a      	ldr	r1, [pc, #232]	@ (8003188 <RescheduleTimerList+0x128>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	3308      	adds	r3, #8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80030ae:	f7ff ff3f 	bl	8002f30 <ReturnTimeElapsed>
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d205      	bcs.n	80030ca <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030c2:	4b32      	ldr	r3, [pc, #200]	@ (800318c <RescheduleTimerList+0x12c>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e04d      	b.n	8003166 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <RescheduleTimerList+0x130>)
 80030ce:	8812      	ldrh	r2, [r2, #0]
 80030d0:	b292      	uxth	r2, r2
 80030d2:	4413      	add	r3, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4293      	cmp	r3, r2
 80030da:	d906      	bls.n	80030ea <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80030dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <RescheduleTimerList+0x130>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <RescheduleTimerList+0x12c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e03d      	b.n	8003166 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030f4:	4b25      	ldr	r3, [pc, #148]	@ (800318c <RescheduleTimerList+0x12c>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030fa:	e034      	b.n	8003166 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	4922      	ldr	r1, [pc, #136]	@ (8003188 <RescheduleTimerList+0x128>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	3308      	adds	r3, #8
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	429a      	cmp	r2, r3
 8003112:	d20a      	bcs.n	800312a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	491c      	ldr	r1, [pc, #112]	@ (8003188 <RescheduleTimerList+0x128>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3308      	adds	r3, #8
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e013      	b.n	8003152 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	4916      	ldr	r1, [pc, #88]	@ (8003188 <RescheduleTimerList+0x128>)
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3308      	adds	r3, #8
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	1ac9      	subs	r1, r1, r3
 8003142:	4811      	ldr	r0, [pc, #68]	@ (8003188 <RescheduleTimerList+0x128>)
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4403      	add	r3, r0
 800314e:	3308      	adds	r3, #8
 8003150:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	490c      	ldr	r1, [pc, #48]	@ (8003188 <RescheduleTimerList+0x128>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3315      	adds	r3, #21
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d1c7      	bne.n	80030fc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800316c:	89bb      	ldrh	r3, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff1e 	bl	8002fb0 <RestartWakeupCounter>

  return ;
 8003174:	bf00      	nop
}
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40002800 	.word	0x40002800
 8003180:	20000d94 	.word	0x20000d94
 8003184:	20000cac 	.word	0x20000cac
 8003188:	20000c1c 	.word	0x20000c1c
 800318c:	20000cb4 	.word	0x20000cb4
 8003190:	20000cba 	.word	0x20000cba

08003194 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	@ 0x28
 8003198:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319a:	f3ef 8310 	mrs	r3, PRIMASK
 800319e:	617b      	str	r3, [r7, #20]
  return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80031a4:	b672      	cpsid	i
}
 80031a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80031a8:	4b59      	ldr	r3, [pc, #356]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	22ca      	movs	r2, #202	@ 0xca
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80031b0:	4b57      	ldr	r3, [pc, #348]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2253      	movs	r2, #83	@ 0x53
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80031b8:	4b55      	ldr	r3, [pc, #340]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	4b54      	ldr	r3, [pc, #336]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80031c8:	4b52      	ldr	r3, [pc, #328]	@ (8003314 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80031d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031d4:	4950      	ldr	r1, [pc, #320]	@ (8003318 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	330c      	adds	r3, #12
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d16e      	bne.n	80032c8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80031ea:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031ee:	494a      	ldr	r1, [pc, #296]	@ (8003318 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80031fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003202:	4945      	ldr	r1, [pc, #276]	@ (8003318 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	3310      	adds	r3, #16
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003214:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04c      	beq.n	80032b8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800321e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003222:	493d      	ldr	r1, [pc, #244]	@ (8003318 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	330d      	adds	r3, #13
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d124      	bne.n	8003282 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003238:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fdf2 	bl	8002e28 <UnlinkTimer>
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003250:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003254:	4930      	ldr	r1, [pc, #192]	@ (8003318 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3304      	adds	r3, #4
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f9b8 	bl	80035e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	22ca      	movs	r2, #202	@ 0xca
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
 8003278:	4b25      	ldr	r3, [pc, #148]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2253      	movs	r2, #83	@ 0x53
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003280:	e012      	b.n	80032a8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800328e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f920 	bl	80034d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ca      	movs	r2, #202	@ 0xca
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2253      	movs	r2, #83	@ 0x53
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80032a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	4619      	mov	r1, r3
 80032b0:	69b8      	ldr	r0, [r7, #24]
 80032b2:	f000 fa1b 	bl	80036ec <HW_TS_RTC_Int_AppNot>
 80032b6:	e022      	b.n	80032fe <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80032b8:	f7ff fed2 	bl	8003060 <RescheduleTimerList>
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	e01a      	b.n	80032fe <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80032c8:	bf00      	nop
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f8      	beq.n	80032ca <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80032e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80032fe:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	22ff      	movs	r2, #255	@ 0xff
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8003306:	bf00      	nop
}
 8003308:	3728      	adds	r7, #40	@ 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000d94 	.word	0x20000d94
 8003314:	20000cac 	.word	0x20000cac
 8003318:	20000c1c 	.word	0x20000c1c
 800331c:	20000cb4 	.word	0x20000cb4
 8003320:	58000800 	.word	0x58000800

08003324 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003330:	4b5e      	ldr	r3, [pc, #376]	@ (80034ac <HW_TS_Init+0x188>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	22ca      	movs	r2, #202	@ 0xca
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24
 8003338:	4b5c      	ldr	r3, [pc, #368]	@ (80034ac <HW_TS_Init+0x188>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2253      	movs	r2, #83	@ 0x53
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003340:	4b5b      	ldr	r3, [pc, #364]	@ (80034b0 <HW_TS_Init+0x18c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a5a      	ldr	r2, [pc, #360]	@ (80034b0 <HW_TS_Init+0x18c>)
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800334c:	4b58      	ldr	r3, [pc, #352]	@ (80034b0 <HW_TS_Init+0x18c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f1c3 0304 	rsb	r3, r3, #4
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b55      	ldr	r3, [pc, #340]	@ (80034b4 <HW_TS_Init+0x190>)
 8003360:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003362:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HW_TS_Init+0x18c>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800336a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800336e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	fa92 f2a2 	rbit	r2, r2
 8003376:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	2a00      	cmp	r2, #0
 8003380:	d101      	bne.n	8003386 <HW_TS_Init+0x62>
  {
    return 32U;
 8003382:	2220      	movs	r2, #32
 8003384:	e003      	b.n	800338e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	40d3      	lsrs	r3, r2
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3301      	adds	r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b48      	ldr	r3, [pc, #288]	@ (80034b8 <HW_TS_Init+0x194>)
 8003398:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800339a:	4b45      	ldr	r3, [pc, #276]	@ (80034b0 <HW_TS_Init+0x18c>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	4b44      	ldr	r3, [pc, #272]	@ (80034bc <HW_TS_Init+0x198>)
 80033ac:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80033ae:	4b43      	ldr	r3, [pc, #268]	@ (80034bc <HW_TS_Init+0x198>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	4a40      	ldr	r2, [pc, #256]	@ (80034b8 <HW_TS_Init+0x194>)
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033c0:	4a3c      	ldr	r2, [pc, #240]	@ (80034b4 <HW_TS_Init+0x190>)
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	40d3      	lsrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d904      	bls.n	80033dc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80033d2:	4b3b      	ldr	r3, [pc, #236]	@ (80034c0 <HW_TS_Init+0x19c>)
 80033d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	e003      	b.n	80033e4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	4b37      	ldr	r3, [pc, #220]	@ (80034c0 <HW_TS_Init+0x19c>)
 80033e2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033e8:	f7ff fb9c 	bl	8002b24 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033f0:	f7ff fb84 	bl	8002afc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d13d      	bne.n	8003476 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033fa:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <HW_TS_Init+0x1a0>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HW_TS_Init+0x1a4>)
 8003402:	f04f 32ff 	mov.w	r2, #4294967295
 8003406:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003408:	2300      	movs	r3, #0
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e00c      	b.n	8003428 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800340e:	7ffa      	ldrb	r2, [r7, #31]
 8003410:	492e      	ldr	r1, [pc, #184]	@ (80034cc <HW_TS_Init+0x1a8>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	330c      	adds	r3, #12
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003422:	7ffb      	ldrb	r3, [r7, #31]
 8003424:	3301      	adds	r3, #1
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	7ffb      	ldrb	r3, [r7, #31]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d9ef      	bls.n	800340e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800342e:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <HW_TS_Init+0x1ac>)
 8003430:	2206      	movs	r2, #6
 8003432:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003434:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <HW_TS_Init+0x188>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <HW_TS_Init+0x188>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003442:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <HW_TS_Init+0x188>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <HW_TS_Init+0x188>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003454:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <HW_TS_Init+0x1b0>)
 8003458:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800345c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800345e:	2003      	movs	r0, #3
 8003460:	f001 fc99 	bl	8004d96 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <HW_TS_Init+0x188>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HW_TS_Init+0x188>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e009      	b.n	800348a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <HW_TS_Init+0x188>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003484:	2003      	movs	r0, #3
 8003486:	f001 fc78 	bl	8004d7a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <HW_TS_Init+0x188>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	22ff      	movs	r2, #255	@ 0xff
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003492:	2200      	movs	r2, #0
 8003494:	2103      	movs	r1, #3
 8003496:	2003      	movs	r0, #3
 8003498:	f001 fc2d 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800349c:	2003      	movs	r0, #3
 800349e:	f001 fc44 	bl	8004d2a <HAL_NVIC_EnableIRQ>

  return;
 80034a2:	bf00      	nop
}
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000d94 	.word	0x20000d94
 80034b0:	40002800 	.word	0x40002800
 80034b4:	20000cb5 	.word	0x20000cb5
 80034b8:	20000cb6 	.word	0x20000cb6
 80034bc:	20000cb8 	.word	0x20000cb8
 80034c0:	20000cba 	.word	0x20000cba
 80034c4:	20000cb4 	.word	0x20000cb4
 80034c8:	20000cb0 	.word	0x20000cb0
 80034cc:	20000c1c 	.word	0x20000c1c
 80034d0:	20000cac 	.word	0x20000cac
 80034d4:	58000800 	.word	0x58000800

080034d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80034ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80034f0:	2003      	movs	r0, #3
 80034f2:	f001 fc28 	bl	8004d46 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034f6:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HW_TS_Stop+0xf0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	22ca      	movs	r2, #202	@ 0xca
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80034fe:	4b32      	ldr	r3, [pc, #200]	@ (80035c8 <HW_TS_Stop+0xf0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2253      	movs	r2, #83	@ 0x53
 8003504:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003506:	79fa      	ldrb	r2, [r7, #7]
 8003508:	4930      	ldr	r1, [pc, #192]	@ (80035cc <HW_TS_Stop+0xf4>)
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	330c      	adds	r3, #12
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d142      	bne.n	80035a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fc80 	bl	8002e28 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003528:	4b29      	ldr	r3, [pc, #164]	@ (80035d0 <HW_TS_Stop+0xf8>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d12f      	bne.n	8003594 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003534:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <HW_TS_Stop+0xfc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003540:	d107      	bne.n	8003552 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003542:	bf00      	nop
 8003544:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <HW_TS_Stop+0xf0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f8      	bne.n	8003544 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <HW_TS_Stop+0xf0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HW_TS_Stop+0xf0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003560:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003562:	bf00      	nop
 8003564:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <HW_TS_Stop+0xf0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f8      	beq.n	8003564 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003572:	4b15      	ldr	r3, [pc, #84]	@ (80035c8 <HW_TS_Stop+0xf0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <HW_TS_Stop+0xf0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003582:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003584:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HW_TS_Stop+0x100>)
 8003586:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800358a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800358c:	2003      	movs	r0, #3
 800358e:	f001 fc02 	bl	8004d96 <HAL_NVIC_ClearPendingIRQ>
 8003592:	e007      	b.n	80035a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HW_TS_Stop+0x104>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	7cfa      	ldrb	r2, [r7, #19]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80035a0:	f7ff fd5e 	bl	8003060 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80035a4:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <HW_TS_Stop+0xf0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	22ff      	movs	r2, #255	@ 0xff
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035ac:	2003      	movs	r0, #3
 80035ae:	f001 fbbc 	bl	8004d2a <HAL_NVIC_EnableIRQ>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80035be:	bf00      	nop
}
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000d94 	.word	0x20000d94
 80035cc:	20000c1c 	.word	0x20000c1c
 80035d0:	20000cac 	.word	0x20000cac
 80035d4:	40002800 	.word	0x40002800
 80035d8:	58000800 	.word	0x58000800
 80035dc:	20000cad 	.word	0x20000cad

080035e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	493b      	ldr	r1, [pc, #236]	@ (80036dc <HW_TS_Start+0xfc>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	330c      	adds	r3, #12
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d103      	bne.n	800360c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff66 	bl	80034d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360c:	f3ef 8310 	mrs	r3, PRIMASK
 8003610:	60fb      	str	r3, [r7, #12]
  return(result);
 8003612:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003616:	b672      	cpsid	i
}
 8003618:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800361a:	2003      	movs	r0, #3
 800361c:	f001 fb93 	bl	8004d46 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003620:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HW_TS_Start+0x100>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	22ca      	movs	r2, #202	@ 0xca
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24
 8003628:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <HW_TS_Start+0x100>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2253      	movs	r2, #83	@ 0x53
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	492a      	ldr	r1, [pc, #168]	@ (80036dc <HW_TS_Start+0xfc>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	330c      	adds	r3, #12
 8003640:	2202      	movs	r2, #2
 8003642:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003644:	79fa      	ldrb	r2, [r7, #7]
 8003646:	4925      	ldr	r1, [pc, #148]	@ (80036dc <HW_TS_Start+0xfc>)
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	3308      	adds	r3, #8
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003658:	79fa      	ldrb	r2, [r7, #7]
 800365a:	4920      	ldr	r1, [pc, #128]	@ (80036dc <HW_TS_Start+0xfc>)
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3304      	adds	r3, #4
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fb30 	bl	8002cd4 <linkTimer>
 8003674:	4603      	mov	r3, r0
 8003676:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HW_TS_Start+0x104>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800367e:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HW_TS_Start+0x108>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	7c7a      	ldrb	r2, [r7, #17]
 8003686:	429a      	cmp	r2, r3
 8003688:	d002      	beq.n	8003690 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800368a:	f7ff fce9 	bl	8003060 <RescheduleTimerList>
 800368e:	e013      	b.n	80036b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003690:	79fa      	ldrb	r2, [r7, #7]
 8003692:	4912      	ldr	r1, [pc, #72]	@ (80036dc <HW_TS_Start+0xfc>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	3308      	adds	r3, #8
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	8a7b      	ldrh	r3, [r7, #18]
 80036a4:	79fa      	ldrb	r2, [r7, #7]
 80036a6:	1ac9      	subs	r1, r1, r3
 80036a8:	480c      	ldr	r0, [pc, #48]	@ (80036dc <HW_TS_Start+0xfc>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4403      	add	r3, r0
 80036b4:	3308      	adds	r3, #8
 80036b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HW_TS_Start+0x100>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	22ff      	movs	r2, #255	@ 0xff
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80036c0:	2003      	movs	r0, #3
 80036c2:	f001 fb32 	bl	8004d2a <HAL_NVIC_EnableIRQ>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80036d2:	bf00      	nop
}
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000c1c 	.word	0x20000c1c
 80036e0:	20000d94 	.word	0x20000d94
 80036e4:	20000cac 	.word	0x20000cac
 80036e8:	20000cad 	.word	0x20000cad

080036ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	460b      	mov	r3, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4798      	blx	r3

  return;
 80036fe:	bf00      	nop
}
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	4613      	mov	r3, r2
 8003718:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800371e:	2300      	movs	r3, #0
 8003720:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HW_UART_Transmit_DMA+0x80>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800372e:	4b17      	ldr	r3, [pc, #92]	@ (800378c <HW_UART_Transmit_DMA+0x84>)
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HW_UART_Transmit_DMA+0x88>)
 8003732:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003734:	89bb      	ldrh	r3, [r7, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4814      	ldr	r0, [pc, #80]	@ (800378c <HW_UART_Transmit_DMA+0x84>)
 800373c:	f007 fcca 	bl	800b0d4 <HAL_UART_Transmit_DMA>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]
            break;
 8003744:	e000      	b.n	8003748 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003746:	bf00      	nop
    }

    switch (hal_status)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d816      	bhi.n	800377c <HW_UART_Transmit_DMA+0x74>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HW_UART_Transmit_DMA+0x4c>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	0800376b 	.word	0x0800376b
 800375c:	08003771 	.word	0x08003771
 8003760:	08003777 	.word	0x08003777
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003764:	2300      	movs	r3, #0
 8003766:	75bb      	strb	r3, [r7, #22]
            break;
 8003768:	e009      	b.n	800377e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800376a:	2301      	movs	r3, #1
 800376c:	75bb      	strb	r3, [r7, #22]
            break;
 800376e:	e006      	b.n	800377e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003770:	2302      	movs	r3, #2
 8003772:	75bb      	strb	r3, [r7, #22]
            break;
 8003774:	e003      	b.n	800377e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003776:	2303      	movs	r3, #3
 8003778:	75bb      	strb	r3, [r7, #22]
            break;
 800377a:	e000      	b.n	800377e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800377c:	bf00      	nop
    }

    return hw_status;
 800377e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000cbc 	.word	0x20000cbc
 800378c:	20000e68 	.word	0x20000e68
 8003790:	40013800 	.word	0x40013800

08003794 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_UART_TxCpltCallback+0x34>)
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <HAL_UART_TxCpltCallback+0x38>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_UART_TxCpltCallback+0x38>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4798      	blx	r3
            }
            break;
 80037b6:	e001      	b.n	80037bc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_UART_TxCpltCallback+0x2a>
            break;
 80037bc:	bf00      	nop
    }

    return;
 80037be:	bf00      	nop
}
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40013800 	.word	0x40013800
 80037cc:	20000cbc 	.word	0x20000cbc

080037d0 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	SET_RGB_COLOR(OFF);
 80037d4:	2201      	movs	r2, #1
 80037d6:	2110      	movs	r1, #16
 80037d8:	4820      	ldr	r0, [pc, #128]	@ (800385c <Kernel_Init+0x8c>)
 80037da:	f001 fe81 	bl	80054e0 <HAL_GPIO_WritePin>
 80037de:	2201      	movs	r2, #1
 80037e0:	2102      	movs	r1, #2
 80037e2:	481f      	ldr	r0, [pc, #124]	@ (8003860 <Kernel_Init+0x90>)
 80037e4:	f001 fe7c 	bl	80054e0 <HAL_GPIO_WritePin>
 80037e8:	2201      	movs	r2, #1
 80037ea:	2101      	movs	r1, #1
 80037ec:	481c      	ldr	r0, [pc, #112]	@ (8003860 <Kernel_Init+0x90>)
 80037ee:	f001 fe77 	bl	80054e0 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80037f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037f6:	f7ff f885 	bl	8002904 <HAL_Delay>

	tsCmd.MODE		= Start;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003864 <Kernel_Init+0x94>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003800:	4b18      	ldr	r3, [pc, #96]	@ (8003864 <Kernel_Init+0x94>)
 8003802:	2201      	movs	r2, #1
 8003804:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 8003806:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <Kernel_Init+0x94>)
 8003808:	2201      	movs	r2, #1
 800380a:	759a      	strb	r2, [r3, #22]

	tsCmd.ECG 		= false;
 800380c:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <Kernel_Init+0x94>)
 800380e:	2200      	movs	r2, #0
 8003810:	761a      	strb	r2, [r3, #24]
	tsCmd.ECG_N50 	= true;
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <Kernel_Init+0x94>)
 8003814:	2201      	movs	r2, #1
 8003816:	765a      	strb	r2, [r3, #25]
	tsCmd.ECG_HPF	= true;
 8003818:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <Kernel_Init+0x94>)
 800381a:	2201      	movs	r2, #1
 800381c:	769a      	strb	r2, [r3, #26]

	tsCmd.MCG		= true;
 800381e:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <Kernel_Init+0x94>)
 8003820:	2201      	movs	r2, #1
 8003822:	76da      	strb	r2, [r3, #27]
	tsCmd.MCG_N50	= true;
 8003824:	4b0f      	ldr	r3, [pc, #60]	@ (8003864 <Kernel_Init+0x94>)
 8003826:	2201      	movs	r2, #1
 8003828:	771a      	strb	r2, [r3, #28]
	tsCmd.MCG_HPF	= true;
 800382a:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <Kernel_Init+0x94>)
 800382c:	2201      	movs	r2, #1
 800382e:	775a      	strb	r2, [r3, #29]


	tsSystem.Power	= true;
 8003830:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <Kernel_Init+0x98>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
	tsBle.Connected	= false;
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <Kernel_Init+0x9c>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]

	DIAG ("-----------------------------------------\r\n");
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <Kernel_Init+0xa0>)
 800383e:	f7ff f8f9 	bl	8002a34 <DIAG>
	HAL_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f7ff f85e 	bl	8002904 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003848:	490a      	ldr	r1, [pc, #40]	@ (8003874 <Kernel_Init+0xa4>)
 800384a:	480b      	ldr	r0, [pc, #44]	@ (8003878 <Kernel_Init+0xa8>)
 800384c:	f7ff f8f2 	bl	8002a34 <DIAG>
	HAL_Delay(1);
 8003850:	2001      	movs	r0, #1
 8003852:	f7ff f857 	bl	8002904 <HAL_Delay>

	// Wait until USB being recognised by the PC.


}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	48001000 	.word	0x48001000
 8003860:	48000400 	.word	0x48000400
 8003864:	20000cc4 	.word	0x20000cc4
 8003868:	20000ce4 	.word	0x20000ce4
 800386c:	20001004 	.word	0x20001004
 8003870:	0801792c 	.word	0x0801792c
 8003874:	08017958 	.word	0x08017958
 8003878:	0801796c 	.word	0x0801796c

0800387c <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 8003880:	4b99      	ldr	r3, [pc, #612]	@ (8003ae8 <Main_Process+0x26c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	f000 80ec 	beq.w	8003a62 <Main_Process+0x1e6>
 800388a:	2b04      	cmp	r3, #4
 800388c:	dc03      	bgt.n	8003896 <Main_Process+0x1a>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <Main_Process+0x22>
 8003892:	2b03      	cmp	r3, #3
 8003894:	d01a      	beq.n	80038cc <Main_Process+0x50>
	{

	default:
		eSYS_STATE = SYS_STATE_INIT;
 8003896:	4b94      	ldr	r3, [pc, #592]	@ (8003ae8 <Main_Process+0x26c>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
		break;
 800389c:	e122      	b.n	8003ae4 <Main_Process+0x268>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 800389e:	f7fd f9e1 	bl	8000c64 <AFE_Init>
		IMU_Init( &hi2c1 );
 80038a2:	4892      	ldr	r0, [pc, #584]	@ (8003aec <Main_Process+0x270>)
 80038a4:	f7fd ff4e 	bl	8001744 <IMU_Init>
		BLE_Init();
 80038a8:	f7fd fc4c 	bl	8001144 <BLE_Init>
		Debug_Init();
 80038ac:	f7ff f88e 	bl	80029cc <Debug_Init>
		Timer_Init();
 80038b0:	f000 ffe8 	bl	8004884 <Timer_Init>
		BLE_Init();
 80038b4:	f7fd fc46 	bl	8001144 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 80038b8:	488d      	ldr	r0, [pc, #564]	@ (8003af0 <Main_Process+0x274>)
 80038ba:	f7ff f8bb 	bl	8002a34 <DIAG>
		HAL_Delay(1);
 80038be:	2001      	movs	r0, #1
 80038c0:	f7ff f820 	bl	8002904 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 80038c4:	4b88      	ldr	r3, [pc, #544]	@ (8003ae8 <Main_Process+0x26c>)
 80038c6:	2203      	movs	r2, #3
 80038c8:	701a      	strb	r2, [r3, #0]
		break;
 80038ca:	e10b      	b.n	8003ae4 <Main_Process+0x268>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 80038cc:	4b89      	ldr	r3, [pc, #548]	@ (8003af4 <Main_Process+0x278>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80b3 	beq.w	8003a3c <Main_Process+0x1c0>
		{

			AFE_Control();
 80038d6:	f7fd f9d3 	bl	8000c80 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
 80038da:	f7fd ff9f 	bl	800181c <IMU_Control>
	        #endif

			Debug_Control();
 80038de:	f7ff f881 	bl	80029e4 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 80038e2:	f7fd fc47 	bl	8001174 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 80038e6:	4b84      	ldr	r3, [pc, #528]	@ (8003af8 <Main_Process+0x27c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d112      	bne.n	8003916 <Main_Process+0x9a>
			{
				SET_RGB_COLOR(GREEN);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2110      	movs	r1, #16
 80038f4:	4881      	ldr	r0, [pc, #516]	@ (8003afc <Main_Process+0x280>)
 80038f6:	f001 fdf3 	bl	80054e0 <HAL_GPIO_WritePin>
 80038fa:	2200      	movs	r2, #0
 80038fc:	2102      	movs	r1, #2
 80038fe:	4880      	ldr	r0, [pc, #512]	@ (8003b00 <Main_Process+0x284>)
 8003900:	f001 fdee 	bl	80054e0 <HAL_GPIO_WritePin>
 8003904:	2201      	movs	r2, #1
 8003906:	2101      	movs	r1, #1
 8003908:	487d      	ldr	r0, [pc, #500]	@ (8003b00 <Main_Process+0x284>)
 800390a:	f001 fde9 	bl	80054e0 <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 800390e:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <Main_Process+0x27c>)
 8003910:	2200      	movs	r2, #0
 8003912:	715a      	strb	r2, [r3, #5]
 8003914:	e0a1      	b.n	8003a5a <Main_Process+0x1de>
			}
			else
			{
				if (tsTimer.TimeFlag)
 8003916:	4b7b      	ldr	r3, [pc, #492]	@ (8003b04 <Main_Process+0x288>)
 8003918:	789b      	ldrb	r3, [r3, #2]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 809c 	beq.w	8003a5a <Main_Process+0x1de>
				{
					tsTimer.TimeFlag = false;
 8003922:	4b78      	ldr	r3, [pc, #480]	@ (8003b04 <Main_Process+0x288>)
 8003924:	2200      	movs	r2, #0
 8003926:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003928:	4b77      	ldr	r3, [pc, #476]	@ (8003b08 <Main_Process+0x28c>)
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	2b07      	cmp	r3, #7
 800392e:	d813      	bhi.n	8003958 <Main_Process+0xdc>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <Main_Process+0xbc>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800397f 	.word	0x0800397f
 800393c:	08003a17 	.word	0x08003a17
 8003940:	08003959 	.word	0x08003959
 8003944:	080039cb 	.word	0x080039cb
 8003948:	080039a5 	.word	0x080039a5
 800394c:	08003959 	.word	0x08003959
 8003950:	08003959 	.word	0x08003959
 8003954:	080039f1 	.word	0x080039f1
					{
					default:
						SET_RGB_COLOR(OFF);
 8003958:	2201      	movs	r2, #1
 800395a:	2110      	movs	r1, #16
 800395c:	4867      	ldr	r0, [pc, #412]	@ (8003afc <Main_Process+0x280>)
 800395e:	f001 fdbf 	bl	80054e0 <HAL_GPIO_WritePin>
 8003962:	2201      	movs	r2, #1
 8003964:	2102      	movs	r1, #2
 8003966:	4866      	ldr	r0, [pc, #408]	@ (8003b00 <Main_Process+0x284>)
 8003968:	f001 fdba 	bl	80054e0 <HAL_GPIO_WritePin>
 800396c:	2201      	movs	r2, #1
 800396e:	2101      	movs	r1, #1
 8003970:	4863      	ldr	r0, [pc, #396]	@ (8003b00 <Main_Process+0x284>)
 8003972:	f001 fdb5 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003976:	4b64      	ldr	r3, [pc, #400]	@ (8003b08 <Main_Process+0x28c>)
 8003978:	2204      	movs	r2, #4
 800397a:	711a      	strb	r2, [r3, #4]
						break;
 800397c:	e06d      	b.n	8003a5a <Main_Process+0x1de>

					case OFF:
						SET_RGB_COLOR(OFF);
 800397e:	2201      	movs	r2, #1
 8003980:	2110      	movs	r1, #16
 8003982:	485e      	ldr	r0, [pc, #376]	@ (8003afc <Main_Process+0x280>)
 8003984:	f001 fdac 	bl	80054e0 <HAL_GPIO_WritePin>
 8003988:	2201      	movs	r2, #1
 800398a:	2102      	movs	r1, #2
 800398c:	485c      	ldr	r0, [pc, #368]	@ (8003b00 <Main_Process+0x284>)
 800398e:	f001 fda7 	bl	80054e0 <HAL_GPIO_WritePin>
 8003992:	2201      	movs	r2, #1
 8003994:	2101      	movs	r1, #1
 8003996:	485a      	ldr	r0, [pc, #360]	@ (8003b00 <Main_Process+0x284>)
 8003998:	f001 fda2 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 800399c:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <Main_Process+0x28c>)
 800399e:	2204      	movs	r2, #4
 80039a0:	711a      	strb	r2, [r3, #4]
						break;
 80039a2:	e05a      	b.n	8003a5a <Main_Process+0x1de>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 80039a4:	2201      	movs	r2, #1
 80039a6:	2110      	movs	r1, #16
 80039a8:	4854      	ldr	r0, [pc, #336]	@ (8003afc <Main_Process+0x280>)
 80039aa:	f001 fd99 	bl	80054e0 <HAL_GPIO_WritePin>
 80039ae:	2201      	movs	r2, #1
 80039b0:	2102      	movs	r1, #2
 80039b2:	4853      	ldr	r0, [pc, #332]	@ (8003b00 <Main_Process+0x284>)
 80039b4:	f001 fd94 	bl	80054e0 <HAL_GPIO_WritePin>
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	4850      	ldr	r0, [pc, #320]	@ (8003b00 <Main_Process+0x284>)
 80039be:	f001 fd8f 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 80039c2:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <Main_Process+0x28c>)
 80039c4:	2203      	movs	r2, #3
 80039c6:	711a      	strb	r2, [r3, #4]
						break;
 80039c8:	e047      	b.n	8003a5a <Main_Process+0x1de>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 80039ca:	2201      	movs	r2, #1
 80039cc:	2110      	movs	r1, #16
 80039ce:	484b      	ldr	r0, [pc, #300]	@ (8003afc <Main_Process+0x280>)
 80039d0:	f001 fd86 	bl	80054e0 <HAL_GPIO_WritePin>
 80039d4:	2201      	movs	r2, #1
 80039d6:	2102      	movs	r1, #2
 80039d8:	4849      	ldr	r0, [pc, #292]	@ (8003b00 <Main_Process+0x284>)
 80039da:	f001 fd81 	bl	80054e0 <HAL_GPIO_WritePin>
 80039de:	2201      	movs	r2, #1
 80039e0:	2101      	movs	r1, #1
 80039e2:	4847      	ldr	r0, [pc, #284]	@ (8003b00 <Main_Process+0x284>)
 80039e4:	f001 fd7c 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 80039e8:	4b47      	ldr	r3, [pc, #284]	@ (8003b08 <Main_Process+0x28c>)
 80039ea:	2207      	movs	r2, #7
 80039ec:	711a      	strb	r2, [r3, #4]
						break;
 80039ee:	e034      	b.n	8003a5a <Main_Process+0x1de>

					case WHITE:
						SET_RGB_COLOR(OFF);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2110      	movs	r1, #16
 80039f4:	4841      	ldr	r0, [pc, #260]	@ (8003afc <Main_Process+0x280>)
 80039f6:	f001 fd73 	bl	80054e0 <HAL_GPIO_WritePin>
 80039fa:	2201      	movs	r2, #1
 80039fc:	2102      	movs	r1, #2
 80039fe:	4840      	ldr	r0, [pc, #256]	@ (8003b00 <Main_Process+0x284>)
 8003a00:	f001 fd6e 	bl	80054e0 <HAL_GPIO_WritePin>
 8003a04:	2201      	movs	r2, #1
 8003a06:	2101      	movs	r1, #1
 8003a08:	483d      	ldr	r0, [pc, #244]	@ (8003b00 <Main_Process+0x284>)
 8003a0a:	f001 fd69 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b08 <Main_Process+0x28c>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	711a      	strb	r2, [r3, #4]
						break;
 8003a14:	e021      	b.n	8003a5a <Main_Process+0x1de>

					case RED:
						SET_RGB_COLOR(OFF);
 8003a16:	2201      	movs	r2, #1
 8003a18:	2110      	movs	r1, #16
 8003a1a:	4838      	ldr	r0, [pc, #224]	@ (8003afc <Main_Process+0x280>)
 8003a1c:	f001 fd60 	bl	80054e0 <HAL_GPIO_WritePin>
 8003a20:	2201      	movs	r2, #1
 8003a22:	2102      	movs	r1, #2
 8003a24:	4836      	ldr	r0, [pc, #216]	@ (8003b00 <Main_Process+0x284>)
 8003a26:	f001 fd5b 	bl	80054e0 <HAL_GPIO_WritePin>
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4834      	ldr	r0, [pc, #208]	@ (8003b00 <Main_Process+0x284>)
 8003a30:	f001 fd56 	bl	80054e0 <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003a34:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <Main_Process+0x28c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	711a      	strb	r2, [r3, #4]
						break;
 8003a3a:	e00e      	b.n	8003a5a <Main_Process+0x1de>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2110      	movs	r1, #16
 8003a40:	482e      	ldr	r0, [pc, #184]	@ (8003afc <Main_Process+0x280>)
 8003a42:	f001 fd4d 	bl	80054e0 <HAL_GPIO_WritePin>
 8003a46:	2201      	movs	r2, #1
 8003a48:	2102      	movs	r1, #2
 8003a4a:	482d      	ldr	r0, [pc, #180]	@ (8003b00 <Main_Process+0x284>)
 8003a4c:	f001 fd48 	bl	80054e0 <HAL_GPIO_WritePin>
 8003a50:	2201      	movs	r2, #1
 8003a52:	2101      	movs	r1, #1
 8003a54:	482a      	ldr	r0, [pc, #168]	@ (8003b00 <Main_Process+0x284>)
 8003a56:	f001 fd43 	bl	80054e0 <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003a5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <Main_Process+0x26c>)
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	701a      	strb	r2, [r3, #0]
		break;
 8003a60:	e040      	b.n	8003ae4 <Main_Process+0x268>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003a62:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <Main_Process+0x290>)
 8003a64:	7d5b      	ldrb	r3, [r3, #21]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d106      	bne.n	8003a78 <Main_Process+0x1fc>
		{
			tsCmd.MODE = Idle;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <Main_Process+0x290>)
 8003a6c:	22ff      	movs	r2, #255	@ 0xff
 8003a6e:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003a70:	2101      	movs	r1, #1
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fd f88e 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003a78:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <Main_Process+0x290>)
 8003a7a:	7d5b      	ldrb	r3, [r3, #21]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <Main_Process+0x212>
		{
			tsCmd.MODE = Idle;
 8003a80:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <Main_Process+0x290>)
 8003a82:	22ff      	movs	r2, #255	@ 0xff
 8003a84:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003a86:	2100      	movs	r1, #0
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7fd f883 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <Main_Process+0x290>)
 8003a90:	7d5b      	ldrb	r3, [r3, #21]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d104      	bne.n	8003aa0 <Main_Process+0x224>
		{
			tsCmd.MODE = Idle;
 8003a96:	4b1d      	ldr	r3, [pc, #116]	@ (8003b0c <Main_Process+0x290>)
 8003a98:	22ff      	movs	r2, #255	@ 0xff
 8003a9a:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 8003a9c:	f000 f83f 	bl	8003b1e <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <Main_Process+0x290>)
 8003aa2:	7d9b      	ldrb	r3, [r3, #22]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d104      	bne.n	8003ab2 <Main_Process+0x236>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003aa8:	f000 f832 	bl	8003b10 <Print_Help>
			tsCmd.HLP = false;
 8003aac:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <Main_Process+0x290>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	759a      	strb	r2, [r3, #22]
		}

					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <Main_Process+0x27c>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00f      	beq.n	8003adc <Main_Process+0x260>
						{
							 if ( tsBle.App.McgNotification )
 8003abc:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <Main_Process+0x27c>)
 8003abe:	799b      	ldrb	r3, [r3, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <Main_Process+0x250>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2020      	movs	r0, #32
 8003ac8:	f012 fa00 	bl	8015ecc <UTIL_SEQ_SetTask>
							 }

							 #ifdef IMU_ENABLE
								 if ( tsBle.App.AccelNotification )
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <Main_Process+0x27c>)
 8003ace:	79db      	ldrb	r3, [r3, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <Main_Process+0x260>
								 {
									UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2008      	movs	r0, #8
 8003ad8:	f012 f9f8 	bl	8015ecc <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_NORMAL;
 8003adc:	4b02      	ldr	r3, [pc, #8]	@ (8003ae8 <Main_Process+0x26c>)
 8003ade:	2203      	movs	r2, #3
 8003ae0:	701a      	strb	r2, [r3, #0]
		break;
 8003ae2:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000cc0 	.word	0x20000cc0
 8003aec:	20000cf0 	.word	0x20000cf0
 8003af0:	08017980 	.word	0x08017980
 8003af4:	20000ce4 	.word	0x20000ce4
 8003af8:	20001004 	.word	0x20001004
 8003afc:	48001000 	.word	0x48001000
 8003b00:	48000400 	.word	0x48000400
 8003b04:	20000f60 	.word	0x20000f60
 8003b08:	20000ce8 	.word	0x20000ce8
 8003b0c:	20000cc4 	.word	0x20000cc4

08003b10 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d101      	bne.n	8003b66 <LL_RCC_HSI48_IsReady+0x18>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_RCC_HSI48_IsReady+0x1a>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f023 0218 	bic.w	r2, r3, #24
 8003b86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4013      	ands	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	3220      	adds	r2, #32
 8003c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c48:	4a05      	ldr	r2, [pc, #20]	@ (8003c60 <LL_HSEM_1StepLock+0x2c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d001      	beq.n	8003c52 <LL_HSEM_1StepLock+0x1e>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_HSEM_1StepLock+0x20>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	80000400 	.word	0x80000400

08003c64 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b09a      	sub	sp, #104	@ 0x68
 8003c68:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003c6a:	f107 0318 	add.w	r3, r7, #24
 8003c6e:	2250      	movs	r2, #80	@ 0x50
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f012 fc90 	bl	8016598 <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003c78:	463b      	mov	r3, r7
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8003c88:	2105      	movs	r1, #5
 8003c8a:	4817      	ldr	r0, [pc, #92]	@ (8003ce8 <PeriphUsbClock_Config+0x84>)
 8003c8c:	f7ff ffd2 	bl	8003c34 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8003c90:	f7ff ff4c 	bl	8003b2c <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8003c94:	bf00      	nop
 8003c96:	f7ff ff5a 	bl	8003b4e <LL_RCC_HSI48_IsReady>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0fa      	beq.n	8003c96 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ca4:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f005 fb2e 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8003cb4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003cb8:	f7ff ffa3 	bl	8003c02 <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8003cc0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003cc4:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8003cc6:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8003cca:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8003ccc:	2322      	movs	r3, #34	@ 0x22
 8003cce:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8003cd8:	463b      	mov	r3, r7
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fc8e 	bl	80095fc <HAL_RCCEx_CRSConfig>

#endif

	return;
 8003ce0:	bf00      	nop
}
 8003ce2:	3768      	adds	r7, #104	@ 0x68
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58001400 	.word	0x58001400

08003cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf0:	f000 fe34 	bl	800495c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003cf4:	f7fe fb30 	bl	8002358 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cf8:	f000 f822 	bl	8003d40 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003cfc:	f000 f88e 	bl	8003e1c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003d00:	f000 f8ec 	bl	8003edc <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d04:	f000 f9ee 	bl	80040e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d08:	f000 f9da 	bl	80040c0 <MX_DMA_Init>
  MX_TIM2_Init();
 8003d0c:	f000 f98a 	bl	8004024 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003d10:	f000 f94a 	bl	8003fa8 <MX_SPI1_Init>
  MX_RTC_Init();
 8003d14:	f000 f914 	bl	8003f40 <MX_RTC_Init>
  MX_USB_Device_Init();
 8003d18:	f011 fa18 	bl	801514c <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003d1c:	f000 f89e 	bl	8003e5c <MX_I2C1_Init>
  MX_RNG_Init();
 8003d20:	f000 f8f8 	bl	8003f14 <MX_RNG_Init>
  MX_RF_Init();
 8003d24:	f000 f8ee 	bl	8003f04 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8003d28:	f7ff fd52 	bl	80037d0 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003d2c:	f7fe fb22 	bl	8002374 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 8003d30:	f7ff ff98 	bl	8003c64 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003d34:	f7fe fe0b 	bl	800294e <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8003d38:	f7ff fda0 	bl	800387c <Main_Process>
    MX_APPE_Process();
 8003d3c:	bf00      	nop
 8003d3e:	e7f9      	b.n	8003d34 <main+0x48>

08003d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09a      	sub	sp, #104	@ 0x68
 8003d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d46:	f107 0320 	add.w	r3, r7, #32
 8003d4a:	2248      	movs	r2, #72	@ 0x48
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f012 fc22 	bl	8016598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	611a      	str	r2, [r3, #16]
 8003d62:	615a      	str	r2, [r3, #20]
 8003d64:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d74:	f043 0310 	orr.w	r3, r3, #16
 8003d78:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d84:	f043 0303 	orr.w	r3, r3, #3
 8003d88:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003d8a:	f003 ff8b 	bl	8007ca4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7ff feef 	bl	8003b72 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d94:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <SystemClock_Config+0xd8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <SystemClock_Config+0xd8>)
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <SystemClock_Config+0xd8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003db0:	2307      	movs	r3, #7
 8003db2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dc4:	2340      	movs	r3, #64	@ 0x40
 8003dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dcc:	f107 0320 	add.w	r3, r7, #32
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 faf3 	bl	80083bc <HAL_RCC_OscConfig>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003ddc:	f000 fa26 	bl	800422c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003de0:	236f      	movs	r3, #111	@ 0x6f
 8003de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003de4:	2302      	movs	r3, #2
 8003de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f004 fe4f 	bl	8008aa4 <HAL_RCC_ClockConfig>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003e0c:	f000 fa0e 	bl	800422c <Error_Handler>
  }
}
 8003e10:	bf00      	nop
 8003e12:	3768      	adds	r7, #104	@ 0x68
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	58000400 	.word	0x58000400

08003e1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b094      	sub	sp, #80	@ 0x50
 8003e20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e22:	463b      	mov	r3, r7
 8003e24:	2250      	movs	r2, #80	@ 0x50
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f012 fbb5 	bl	8016598 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003e2e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003e32:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003e34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003e3e:	2310      	movs	r3, #16
 8003e40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e42:	463b      	mov	r3, r7
 8003e44:	4618      	mov	r0, r3
 8003e46:	f005 fa63 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003e50:	f000 f9ec 	bl	800422c <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 8003e54:	bf00      	nop
 8003e56:	3750      	adds	r7, #80	@ 0x50
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <MX_I2C1_Init+0x78>)
 8003e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003e66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <MX_I2C1_Init+0x7c>)
 8003e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e72:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e96:	480e      	ldr	r0, [pc, #56]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003e98:	f001 fb76 	bl	8005588 <HAL_I2C_Init>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ea2:	f000 f9c3 	bl	800422c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4809      	ldr	r0, [pc, #36]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003eaa:	f002 f8a9 	bl	8006000 <HAL_I2CEx_ConfigAnalogFilter>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003eb4:	f000 f9ba 	bl	800422c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <MX_I2C1_Init+0x74>)
 8003ebc:	f002 f8eb 	bl	8006096 <HAL_I2CEx_ConfigDigitalFilter>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ec6:	f000 f9b1 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000cf0 	.word	0x20000cf0
 8003ed4:	40005400 	.word	0x40005400
 8003ed8:	00707cbb 	.word	0x00707cbb

08003edc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <MX_IPCC_Init+0x20>)
 8003ee2:	4a07      	ldr	r2, [pc, #28]	@ (8003f00 <MX_IPCC_Init+0x24>)
 8003ee4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003ee6:	4805      	ldr	r0, [pc, #20]	@ (8003efc <MX_IPCC_Init+0x20>)
 8003ee8:	f002 f922 	bl	8006130 <HAL_IPCC_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003ef2:	f000 f99b 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000d44 	.word	0x20000d44
 8003f00:	58000c00 	.word	0x58000c00

08003f04 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <MX_RNG_Init+0x24>)
 8003f1a:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <MX_RNG_Init+0x28>)
 8003f1c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <MX_RNG_Init+0x24>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <MX_RNG_Init+0x24>)
 8003f26:	f005 fcb4 	bl	8009892 <HAL_RNG_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003f30:	f000 f97c 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000d80 	.word	0x20000d80
 8003f3c:	58001000 	.word	0x58001000

08003f40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f44:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f46:	4a17      	ldr	r2, [pc, #92]	@ (8003fa4 <MX_RTC_Init+0x64>)
 8003f48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003f50:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f52:	220f      	movs	r2, #15
 8003f54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003f56:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f58:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003f5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f64:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f76:	480a      	ldr	r0, [pc, #40]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f78:	f005 fd2a 	bl	80099d0 <HAL_RTC_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003f82:	f000 f953 	bl	800422c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <MX_RTC_Init+0x60>)
 8003f8c:	f005 fe20 	bl	8009bd0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003f96:	f000 f949 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000d94 	.word	0x20000d94
 8003fa4:	40002800 	.word	0x40002800

08003fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fae:	4a1c      	ldr	r2, [pc, #112]	@ (8004020 <MX_SPI1_Init+0x78>)
 8003fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fba:	4b18      	ldr	r3, [pc, #96]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fc0:	4b16      	ldr	r3, [pc, #88]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003fc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc8:	4b14      	ldr	r3, [pc, #80]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fce:	4b13      	ldr	r3, [pc, #76]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fde:	2208      	movs	r2, #8
 8003fe0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <MX_SPI1_Init+0x74>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <MX_SPI1_Init+0x74>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ff4:	4b09      	ldr	r3, [pc, #36]	@ (800401c <MX_SPI1_Init+0x74>)
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <MX_SPI1_Init+0x74>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <MX_SPI1_Init+0x74>)
 8004002:	2208      	movs	r2, #8
 8004004:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004006:	4805      	ldr	r0, [pc, #20]	@ (800401c <MX_SPI1_Init+0x74>)
 8004008:	f005 fe9e 	bl	8009d48 <HAL_SPI_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004012:	f000 f90b 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000db8 	.word	0x20000db8
 8004020:	40013000 	.word	0x40013000

08004024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004042:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <MX_TIM2_Init+0x98>)
 8004044:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800404a:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <MX_TIM2_Init+0x98>)
 800404c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8004050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004052:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <MX_TIM2_Init+0x98>)
 8004054:	2210      	movs	r2, #16
 8004056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004058:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <MX_TIM2_Init+0x98>)
 800405a:	2264      	movs	r2, #100	@ 0x64
 800405c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405e:	4b17      	ldr	r3, [pc, #92]	@ (80040bc <MX_TIM2_Init+0x98>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004064:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <MX_TIM2_Init+0x98>)
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800406a:	4814      	ldr	r0, [pc, #80]	@ (80040bc <MX_TIM2_Init+0x98>)
 800406c:	f006 fc0a 	bl	800a884 <HAL_TIM_Base_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004076:	f000 f8d9 	bl	800422c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800407a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800407e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004080:	f107 0310 	add.w	r3, r7, #16
 8004084:	4619      	mov	r1, r3
 8004086:	480d      	ldr	r0, [pc, #52]	@ (80040bc <MX_TIM2_Init+0x98>)
 8004088:	f006 fda9 	bl	800abde <HAL_TIM_ConfigClockSource>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004092:	f000 f8cb 	bl	800422c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4806      	ldr	r0, [pc, #24]	@ (80040bc <MX_TIM2_Init+0x98>)
 80040a4:	f006 ff98 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80040ae:	f000 f8bd 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80040b2:	bf00      	nop
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000e1c 	.word	0x20000e1c

080040c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040c4:	2004      	movs	r0, #4
 80040c6:	f7ff fd6a 	bl	8003b9e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff fd67 	bl	8003b9e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2100      	movs	r1, #0
 80040d4:	200b      	movs	r0, #11
 80040d6:	f000 fe0e 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040da:	200b      	movs	r0, #11
 80040dc:	f000 fe25 	bl	8004d2a <HAL_NVIC_EnableIRQ>

}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f8:	2004      	movs	r0, #4
 80040fa:	f7ff fd69 	bl	8003bd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2002      	movs	r0, #2
 8004100:	f7ff fd66 	bl	8003bd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	2001      	movs	r0, #1
 8004106:	f7ff fd63 	bl	8003bd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800410a:	2010      	movs	r0, #16
 800410c:	f7ff fd60 	bl	8003bd0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8004110:	2201      	movs	r2, #1
 8004112:	210c      	movs	r1, #12
 8004114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004118:	f001 f9e2 	bl	80054e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	@ 0x40
 8004120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004124:	f001 f9dc 	bl	80054e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	2104      	movs	r1, #4
 800412c:	483d      	ldr	r0, [pc, #244]	@ (8004224 <MX_GPIO_Init+0x140>)
 800412e:	f001 f9d7 	bl	80054e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8004132:	2201      	movs	r2, #1
 8004134:	2103      	movs	r1, #3
 8004136:	483b      	ldr	r0, [pc, #236]	@ (8004224 <MX_GPIO_Init+0x140>)
 8004138:	f001 f9d2 	bl	80054e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 800413c:	2201      	movs	r2, #1
 800413e:	2110      	movs	r1, #16
 8004140:	4839      	ldr	r0, [pc, #228]	@ (8004228 <MX_GPIO_Init+0x144>)
 8004142:	f001 f9cd 	bl	80054e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 8004146:	230c      	movs	r3, #12
 8004148:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414a:	2301      	movs	r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800414e:	2301      	movs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	4619      	mov	r1, r3
 800415a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800415e:	f001 f84f 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8004162:	2330      	movs	r3, #48	@ 0x30
 8004164:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004166:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800416a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800416c:	2301      	movs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	4619      	mov	r1, r3
 8004174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004178:	f001 f842 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800417c:	2340      	movs	r3, #64	@ 0x40
 800417e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004180:	2301      	movs	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004194:	f001 f834 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 8004198:	2307      	movs	r3, #7
 800419a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419c:	2301      	movs	r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	481d      	ldr	r0, [pc, #116]	@ (8004224 <MX_GPIO_Init+0x140>)
 80041ae:	f001 f827 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 80041b2:	2310      	movs	r3, #16
 80041b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b6:	2301      	movs	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4818      	ldr	r0, [pc, #96]	@ (8004228 <MX_GPIO_Init+0x144>)
 80041c8:	f001 f81a 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 80041cc:	2340      	movs	r3, #64	@ 0x40
 80041ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041d4:	2301      	movs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4811      	ldr	r0, [pc, #68]	@ (8004224 <MX_GPIO_Init+0x140>)
 80041de:	f001 f80f 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80041ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ec:	2301      	movs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	480b      	ldr	r0, [pc, #44]	@ (8004224 <MX_GPIO_Init+0x140>)
 80041f6:	f001 f803 	bl	8005200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	200a      	movs	r0, #10
 8004200:	f000 fd79 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004204:	200a      	movs	r0, #10
 8004206:	f000 fd90 	bl	8004d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	2017      	movs	r0, #23
 8004210:	f000 fd71 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004214:	2017      	movs	r0, #23
 8004216:	f000 fd88 	bl	8004d2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	48000400 	.word	0x48000400
 8004228:	48001000 	.word	0x48001000

0800422c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004230:	b672      	cpsid	i
}
 8004232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 8004234:	2200      	movs	r2, #0
 8004236:	2110      	movs	r1, #16
 8004238:	4806      	ldr	r0, [pc, #24]	@ (8004254 <Error_Handler+0x28>)
 800423a:	f001 f951 	bl	80054e0 <HAL_GPIO_WritePin>
 800423e:	2201      	movs	r2, #1
 8004240:	2102      	movs	r1, #2
 8004242:	4805      	ldr	r0, [pc, #20]	@ (8004258 <Error_Handler+0x2c>)
 8004244:	f001 f94c 	bl	80054e0 <HAL_GPIO_WritePin>
 8004248:	2201      	movs	r2, #1
 800424a:	2101      	movs	r1, #1
 800424c:	4802      	ldr	r0, [pc, #8]	@ (8004258 <Error_Handler+0x2c>)
 800424e:	f001 f947 	bl	80054e0 <HAL_GPIO_WritePin>
 8004252:	e7ef      	b.n	8004234 <Error_Handler+0x8>
 8004254:	48001000 	.word	0x48001000
 8004258:	48000400 	.word	0x48000400

0800425c <LL_RCC_EnableRTC>:
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800426c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <LL_AHB2_GRP1_EnableClock>:
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800428c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4313      	orrs	r3, r2
 8004294:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_AHB3_GRP1_EnableClock>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042d4:	68fb      	ldr	r3, [r7, #12]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004320:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004330:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004338:	68fb      	ldr	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800434a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800434e:	f7ff ffaf 	bl	80042b0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	2005      	movs	r0, #5
 8004358:	f000 fccd 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800435c:	2005      	movs	r0, #5
 800435e:	f000 fce4 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	202e      	movs	r0, #46	@ 0x2e
 8004368:	f000 fcc5 	bl	8004cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800436c:	202e      	movs	r0, #46	@ 0x2e
 800436e:	f000 fcdc 	bl	8004d2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b09c      	sub	sp, #112	@ 0x70
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2250      	movs	r2, #80	@ 0x50
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f012 f8fd 	bl	8016598 <memset>
  if(hi2c->Instance==I2C1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <HAL_I2C_MspInit+0x88>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d126      	bne.n	80043f6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80043a8:	2304      	movs	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80043ac:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 ffaa 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80043c2:	f7ff ff33 	bl	800422c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	2002      	movs	r0, #2
 80043c8:	f7ff ff59 	bl	800427e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80043d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043d2:	2312      	movs	r3, #18
 80043d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043de:	2304      	movs	r3, #4
 80043e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80043e6:	4619      	mov	r1, r3
 80043e8:	4806      	ldr	r0, [pc, #24]	@ (8004404 <HAL_I2C_MspInit+0x8c>)
 80043ea:	f000 ff09 	bl	8005200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043ee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80043f2:	f7ff ff76 	bl	80042e2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043f6:	bf00      	nop
 80043f8:	3770      	adds	r7, #112	@ 0x70
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40005400 	.word	0x40005400
 8004404:	48000400 	.word	0x48000400

08004408 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <HAL_IPCC_MspInit+0x44>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d113      	bne.n	8004442 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800441a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800441e:	f7ff ff47 	bl	80042b0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	202c      	movs	r0, #44	@ 0x2c
 8004428:	f000 fc65 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800442c:	202c      	movs	r0, #44	@ 0x2c
 800442e:	f000 fc7c 	bl	8004d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	202d      	movs	r0, #45	@ 0x2d
 8004438:	f000 fc5d 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800443c:	202d      	movs	r0, #45	@ 0x2d
 800443e:	f000 fc74 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	58000c00 	.word	0x58000c00

08004450 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b096      	sub	sp, #88	@ 0x58
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	2250      	movs	r2, #80	@ 0x50
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f012 f899 	bl	8016598 <memset>
  if(hrng->Instance==RNG)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a11      	ldr	r2, [pc, #68]	@ (80044b0 <HAL_RNG_MspInit+0x60>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d11b      	bne.n	80044a8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004474:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8004476:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800447a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f004 ff45 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800448c:	f7ff fece 	bl	800422c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004490:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004494:	f7ff ff0c 	bl	80042b0 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	2100      	movs	r1, #0
 800449c:	2035      	movs	r0, #53	@ 0x35
 800449e:	f000 fc2a 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80044a2:	2035      	movs	r0, #53	@ 0x35
 80044a4:	f000 fc41 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80044a8:	bf00      	nop
 80044aa:	3758      	adds	r7, #88	@ 0x58
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58001000 	.word	0x58001000

080044b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b096      	sub	sp, #88	@ 0x58
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044bc:	f107 0308 	add.w	r3, r7, #8
 80044c0:	2250      	movs	r2, #80	@ 0x50
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f012 f867 	bl	8016598 <memset>
  if(hrtc->Instance==RTC)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	@ (8004518 <HAL_RTC_MspInit+0x64>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d11d      	bne.n	8004510 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80044d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80044da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 ff13 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80044f0:	f7ff fe9c 	bl	800422c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044f4:	f7ff feb2 	bl	800425c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80044f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80044fc:	f7ff fef1 	bl	80042e2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004500:	2200      	movs	r2, #0
 8004502:	2100      	movs	r1, #0
 8004504:	2003      	movs	r0, #3
 8004506:	f000 fbf6 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800450a:	2003      	movs	r0, #3
 800450c:	f000 fc0d 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004510:	bf00      	nop
 8004512:	3758      	adds	r7, #88	@ 0x58
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40002800 	.word	0x40002800

0800451c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0e      	ldr	r2, [pc, #56]	@ (8004574 <HAL_SPI_MspInit+0x58>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d116      	bne.n	800456c <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800453e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004542:	f7ff fee7 	bl	8004314 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004546:	2002      	movs	r0, #2
 8004548:	f7ff fe99 	bl	800427e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800454c:	2338      	movs	r3, #56	@ 0x38
 800454e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800455c:	2305      	movs	r3, #5
 800455e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4619      	mov	r1, r3
 8004566:	4804      	ldr	r0, [pc, #16]	@ (8004578 <HAL_SPI_MspInit+0x5c>)
 8004568:	f000 fe4a 	bl	8005200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800456c:	bf00      	nop
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40013000 	.word	0x40013000
 8004578:	48000400 	.word	0x48000400

0800457c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d10a      	bne.n	80045a4 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800458e:	2001      	movs	r0, #1
 8004590:	f7ff fea7 	bl	80042e2 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	201c      	movs	r0, #28
 800459a:	f000 fbac 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800459e:	201c      	movs	r0, #28
 80045a0:	f000 fbc3 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <NMI_Handler+0x4>

080045b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <HardFault_Handler+0x4>

080045bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <MemManage_Handler+0x4>

080045c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <BusFault_Handler+0x4>

080045cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <UsageFault_Handler+0x4>

080045d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004602:	f000 fa05 	bl	8004a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}

0800460a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800460e:	f7fe fdc1 	bl	8003194 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}

08004616 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004628:	2010      	movs	r0, #16
 800462a:	f000 ff71 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004638:	4802      	ldr	r0, [pc, #8]	@ (8004644 <DMA1_Channel1_IRQHandler+0x10>)
 800463a:	f000 fcf3 	bl	8005024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000efc 	.word	0x20000efc

08004648 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800464c:	4802      	ldr	r0, [pc, #8]	@ (8004658 <USB_LP_IRQHandler+0x10>)
 800464e:	f001 fee5 	bl	800641c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20002590 	.word	0x20002590

0800465c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 8004660:	2020      	movs	r0, #32
 8004662:	f000 ff55 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004666:	2080      	movs	r0, #128	@ 0x80
 8004668:	f000 ff52 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}

08004670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004674:	4802      	ldr	r0, [pc, #8]	@ (8004680 <TIM2_IRQHandler+0x10>)
 8004676:	f006 f9ab 	bl	800a9d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000e1c 	.word	0x20000e1c

08004684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004688:	4802      	ldr	r0, [pc, #8]	@ (8004694 <USART1_IRQHandler+0x10>)
 800468a:	f006 fda3 	bl	800b1d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000e68 	.word	0x20000e68

08004698 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800469c:	f010 fc18 	bl	8014ed0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80046a0:	bf00      	nop
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80046a8:	f010 fc48 	bl	8014f3c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80046b4:	f000 ff44 	bl	8005540 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}

080046bc <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80046c0:	4802      	ldr	r0, [pc, #8]	@ (80046cc <RNG_IRQHandler+0x10>)
 80046c2:	f005 f91b 	bl	80098fc <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000d80 	.word	0x20000d80

080046d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e00a      	b.n	80046f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046e2:	f3af 8000 	nop.w
 80046e6:	4601      	mov	r1, r0
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	60ba      	str	r2, [r7, #8]
 80046ee:	b2ca      	uxtb	r2, r1
 80046f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	dbf0      	blt.n	80046e2 <_read+0x12>
  }

  return len;
 8004700:	687b      	ldr	r3, [r7, #4]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_close>:
  }
  return len;
}

int _close(int file)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004732:	605a      	str	r2, [r3, #4]
  return 0;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_isatty>:

int _isatty(int file)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800477c:	4a14      	ldr	r2, [pc, #80]	@ (80047d0 <_sbrk+0x5c>)
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <_sbrk+0x60>)
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <_sbrk+0x64>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004790:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <_sbrk+0x64>)
 8004792:	4a12      	ldr	r2, [pc, #72]	@ (80047dc <_sbrk+0x68>)
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <_sbrk+0x64>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d207      	bcs.n	80047b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a4:	f011 ff6e 	bl	8016684 <__errno>
 80047a8:	4603      	mov	r3, r0
 80047aa:	220c      	movs	r2, #12
 80047ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	e009      	b.n	80047c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <_sbrk+0x64>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <_sbrk+0x64>)
 80047c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20030000 	.word	0x20030000
 80047d4:	00000600 	.word	0x00000600
 80047d8:	20000f5c 	.word	0x20000f5c
 80047dc:	20002c80 	.word	0x20002c80

080047e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <SystemInit+0x98>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <SystemInit+0x98>)
 80047ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80047f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004808:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800480c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004818:	4b18      	ldr	r3, [pc, #96]	@ (800487c <SystemInit+0x9c>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482a:	f023 0305 	bic.w	r3, r3, #5
 800482e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484a:	4a0d      	ldr	r2, [pc, #52]	@ (8004880 <SystemInit+0xa0>)
 800484c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004852:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <SystemInit+0xa0>)
 8004854:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004864:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	faf6fefb 	.word	0xfaf6fefb
 8004880:	22041000 	.word	0x22041000

08004884 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 8004888:	4805      	ldr	r0, [pc, #20]	@ (80048a0 <Timer_Init+0x1c>)
 800488a:	f7fe f8d3 	bl	8002a34 <DIAG>
	HAL_Delay (10);
 800488e:	200a      	movs	r0, #10
 8004890:	f7fe f838 	bl	8002904 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 8004894:	4803      	ldr	r0, [pc, #12]	@ (80048a4 <Timer_Init+0x20>)
 8004896:	f006 f84d 	bl	800a934 <HAL_TIM_Base_Start_IT>
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	080179b0 	.word	0x080179b0
 80048a4:	20000e1c 	.word	0x20000e1c

080048a8 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b8:	d10b      	bne.n	80048d2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{

//		tsTimer.bImuFlag = true;
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0201 	mvn.w	r2, #1
 80048c2:	611a      	str	r2, [r3, #16]
		tsTimer.TimeFlag = true;
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	709a      	strb	r2, [r3, #2]
//		tsTimer.bImuFlag = true;
		htim2.Init.Period = Interrupt_ms;
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80048d0:	60da      	str	r2, [r3, #12]

		//DIAG ("%d\r",  i++);
	}
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000f60 	.word	0x20000f60
 80048e4:	20000e1c 	.word	0x20000e1c

080048e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80048e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ec:	3304      	adds	r3, #4

080048ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80048f2:	d3f9      	bcc.n	80048e8 <CopyDataInit>
  bx lr
 80048f4:	4770      	bx	lr

080048f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80048f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80048f8:	3004      	adds	r0, #4

080048fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80048fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80048fc:	d3fb      	bcc.n	80048f6 <FillZerobss>
  bx lr
 80048fe:	4770      	bx	lr

08004900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004900:	480c      	ldr	r0, [pc, #48]	@ (8004934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004904:	f7ff ff6c 	bl	80047e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004908:	480b      	ldr	r0, [pc, #44]	@ (8004938 <LoopForever+0x6>)
 800490a:	490c      	ldr	r1, [pc, #48]	@ (800493c <LoopForever+0xa>)
 800490c:	4a0c      	ldr	r2, [pc, #48]	@ (8004940 <LoopForever+0xe>)
 800490e:	2300      	movs	r3, #0
 8004910:	f7ff ffed 	bl	80048ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004914:	480b      	ldr	r0, [pc, #44]	@ (8004944 <LoopForever+0x12>)
 8004916:	490c      	ldr	r1, [pc, #48]	@ (8004948 <LoopForever+0x16>)
 8004918:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <LoopForever+0x1a>)
 800491a:	2300      	movs	r3, #0
 800491c:	f7ff ffe7 	bl	80048ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004920:	480b      	ldr	r0, [pc, #44]	@ (8004950 <LoopForever+0x1e>)
 8004922:	490c      	ldr	r1, [pc, #48]	@ (8004954 <LoopForever+0x22>)
 8004924:	2300      	movs	r3, #0
 8004926:	f7ff ffe8 	bl	80048fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800492a:	f011 feb1 	bl	8016690 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800492e:	f7ff f9dd 	bl	8003cec <main>

08004932 <LoopForever>:

LoopForever:
  b LoopForever
 8004932:	e7fe      	b.n	8004932 <LoopForever>
  ldr   r0, =_estack
 8004934:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004938:	20000008 	.word	0x20000008
 800493c:	20000188 	.word	0x20000188
 8004940:	08019234 	.word	0x08019234
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004944:	200301e4 	.word	0x200301e4
 8004948:	20031f57 	.word	0x20031f57
 800494c:	080193fa 	.word	0x080193fa
  INIT_BSS _sbss, _ebss
 8004950:	200001d4 	.word	0x200001d4
 8004954:	20002c80 	.word	0x20002c80

08004958 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004958:	e7fe      	b.n	8004958 <ADC1_IRQHandler>
	...

0800495c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004966:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <HAL_Init+0x3c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a0b      	ldr	r2, [pc, #44]	@ (8004998 <HAL_Init+0x3c>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004970:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004972:	2003      	movs	r0, #3
 8004974:	f000 f9b4 	bl	8004ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004978:	2000      	movs	r0, #0
 800497a:	f000 f80f 	bl	800499c <HAL_InitTick>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	71fb      	strb	r3, [r7, #7]
 8004988:	e001      	b.n	800498e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800498a:	f7ff fcdc 	bl	8004346 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800498e:	79fb      	ldrb	r3, [r7, #7]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	58004000 	.word	0x58004000

0800499c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80049a8:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <HAL_InitTick+0x6c>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d024      	beq.n	80049fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80049b0:	f004 fa24 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <HAL_InitTick+0x6c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f9ca 	bl	8004d62 <HAL_SYSTICK_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10f      	bne.n	80049f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d809      	bhi.n	80049ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049da:	2200      	movs	r2, #0
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	f04f 30ff 	mov.w	r0, #4294967295
 80049e2:	f000 f988 	bl	8004cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049e6:	4a09      	ldr	r2, [pc, #36]	@ (8004a0c <HAL_InitTick+0x70>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e007      	b.n	80049fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	e004      	b.n	80049fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	e001      	b.n	80049fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000014 	.word	0x20000014
 8004a0c:	20000010 	.word	0x20000010

08004a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_IncTick+0x20>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_IncTick+0x24>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4413      	add	r3, r2
 8004a20:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <HAL_IncTick+0x24>)
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000014 	.word	0x20000014
 8004a34:	20000f68 	.word	0x20000f68

08004a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_GetTick+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000f68 	.word	0x20000f68

08004a50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_GetTickPrio+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000010 	.word	0x20000010

08004a68 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	@ (8004a7c <HAL_GetTickFreq+0x14>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000014 	.word	0x20000014

08004a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab2:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	60d3      	str	r3, [r2, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004acc:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 0307 	and.w	r3, r3, #7
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	db0b      	blt.n	8004b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	4907      	ldr	r1, [pc, #28]	@ (8004b1c <__NVIC_EnableIRQ+0x38>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2001      	movs	r0, #1
 8004b06:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	e000e100 	.word	0xe000e100

08004b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db12      	blt.n	8004b58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <__NVIC_DisableIRQ+0x44>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	3320      	adds	r3, #32
 8004b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b4c:	f3bf 8f4f 	dsb	sy
}
 8004b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b52:	f3bf 8f6f 	isb	sy
}
 8004b56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100

08004b68 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db0c      	blt.n	8004b94 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4907      	ldr	r1, [pc, #28]	@ (8004ba0 <__NVIC_SetPendingIRQ+0x38>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8e:	3340      	adds	r3, #64	@ 0x40
 8004b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db0c      	blt.n	8004bd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	f003 021f 	and.w	r2, r3, #31
 8004bbc:	4907      	ldr	r1, [pc, #28]	@ (8004bdc <__NVIC_ClearPendingIRQ+0x38>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bca:	3360      	adds	r3, #96	@ 0x60
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000e100 	.word	0xe000e100

08004be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db0a      	blt.n	8004c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	490c      	ldr	r1, [pc, #48]	@ (8004c2c <__NVIC_SetPriority+0x4c>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	440b      	add	r3, r1
 8004c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c08:	e00a      	b.n	8004c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4908      	ldr	r1, [pc, #32]	@ (8004c30 <__NVIC_SetPriority+0x50>)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	3b04      	subs	r3, #4
 8004c18:	0112      	lsls	r2, r2, #4
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	761a      	strb	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	@ 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	bf28      	it	cs
 8004c52:	2304      	movcs	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d902      	bls.n	8004c64 <NVIC_EncodePriority+0x30>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3b03      	subs	r3, #3
 8004c62:	e000      	b.n	8004c66 <NVIC_EncodePriority+0x32>
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	401a      	ands	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43d9      	mvns	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	4313      	orrs	r3, r2
         );
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	@ 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cac:	d301      	bcc.n	8004cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00f      	b.n	8004cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <SysTick_Config+0x40>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cba:	210f      	movs	r1, #15
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	f7ff ff8e 	bl	8004be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <SysTick_Config+0x40>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cca:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <SysTick_Config+0x40>)
 8004ccc:	2207      	movs	r2, #7
 8004cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	e000e010 	.word	0xe000e010

08004ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fec9 	bl	8004a80 <__NVIC_SetPriorityGrouping>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d04:	f7ff fee0 	bl	8004ac8 <__NVIC_GetPriorityGrouping>
 8004d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff ff90 	bl	8004c34 <NVIC_EncodePriority>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff5f 	bl	8004be0 <__NVIC_SetPriority>
}
 8004d22:	bf00      	nop
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fed3 	bl	8004ae4 <__NVIC_EnableIRQ>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fee3 	bl	8004b20 <__NVIC_DisableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ff96 	bl	8004c9c <SysTick_Config>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	4603      	mov	r3, r0
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff feed 	bl	8004b68 <__NVIC_SetPendingIRQ>
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fefd 	bl	8004ba4 <__NVIC_ClearPendingIRQ>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_DMA_Start_IT+0x20>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e066      	b.n	8004ea0 <HAL_DMA_Start_IT+0xee>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d155      	bne.n	8004e92 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f9b9 	bl	8005182 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 020e 	orr.w	r2, r2, #14
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e00f      	b.n	8004e4a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 020a 	orr.w	r2, r2, #10
 8004e48:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e66:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e7e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e005      	b.n	8004e9e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e04f      	b.n	8004f5a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d008      	beq.n	8004ed8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e040      	b.n	8004f5a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 020e 	bic.w	r2, r2, #14
 8004ee6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	f003 021c 	and.w	r2, r3, #28
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2101      	movs	r1, #1
 8004f16:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d005      	beq.n	8004f8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e047      	b.n	800501a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 020e 	bic.w	r2, r2, #14
 8004f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	f003 021c 	and.w	r2, r3, #28
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fcc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ff8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
    }
  }
  return status;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005040:	f003 031c 	and.w	r3, r3, #28
 8005044:	2204      	movs	r2, #4
 8005046:	409a      	lsls	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d026      	beq.n	800509e <HAL_DMA_IRQHandler+0x7a>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d021      	beq.n	800509e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	f003 021c 	and.w	r2, r3, #28
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	2104      	movs	r1, #4
 8005086:	fa01 f202 	lsl.w	r2, r1, r2
 800508a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d071      	beq.n	8005178 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800509c:	e06c      	b.n	8005178 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f003 031c 	and.w	r3, r3, #28
 80050a6:	2202      	movs	r2, #2
 80050a8:	409a      	lsls	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02e      	beq.n	8005110 <HAL_DMA_IRQHandler+0xec>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d029      	beq.n	8005110 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 020a 	bic.w	r2, r2, #10
 80050d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	f003 021c 	and.w	r2, r3, #28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	2102      	movs	r1, #2
 80050f0:	fa01 f202 	lsl.w	r2, r1, r2
 80050f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d038      	beq.n	8005178 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800510e:	e033      	b.n	8005178 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005114:	f003 031c 	and.w	r3, r3, #28
 8005118:	2208      	movs	r2, #8
 800511a:	409a      	lsls	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02a      	beq.n	800517a <HAL_DMA_IRQHandler+0x156>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d025      	beq.n	800517a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 020e 	bic.w	r2, r2, #14
 800513c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f003 021c 	and.w	r2, r3, #28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f202 	lsl.w	r2, r1, r2
 8005150:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005178:	bf00      	nop
 800517a:	bf00      	nop
}
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005198:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	f003 021c 	and.w	r2, r3, #28
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	2101      	movs	r1, #1
 80051ba:	fa01 f202 	lsl.w	r2, r1, r2
 80051be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d108      	bne.n	80051e2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051e0:	e007      	b.n	80051f2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800520e:	e14c      	b.n	80054aa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2101      	movs	r1, #1
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 813e 	beq.w	80054a4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d005      	beq.n	8005240 <HAL_GPIO_Init+0x40>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d130      	bne.n	80052a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005276:	2201      	movs	r2, #1
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4013      	ands	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 0201 	and.w	r2, r3, #1
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d017      	beq.n	80052de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	2203      	movs	r2, #3
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d123      	bne.n	8005332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3208      	adds	r2, #8
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2203      	movs	r2, #3
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8098 	beq.w	80054a4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005374:	4a54      	ldr	r2, [pc, #336]	@ (80054c8 <HAL_GPIO_Init+0x2c8>)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	220f      	movs	r2, #15
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800539e:	d019      	beq.n	80053d4 <HAL_GPIO_Init+0x1d4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a4a      	ldr	r2, [pc, #296]	@ (80054cc <HAL_GPIO_Init+0x2cc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_GPIO_Init+0x1d0>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a49      	ldr	r2, [pc, #292]	@ (80054d0 <HAL_GPIO_Init+0x2d0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00d      	beq.n	80053cc <HAL_GPIO_Init+0x1cc>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a48      	ldr	r2, [pc, #288]	@ (80054d4 <HAL_GPIO_Init+0x2d4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <HAL_GPIO_Init+0x1c8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a47      	ldr	r2, [pc, #284]	@ (80054d8 <HAL_GPIO_Init+0x2d8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d101      	bne.n	80053c4 <HAL_GPIO_Init+0x1c4>
 80053c0:	2304      	movs	r3, #4
 80053c2:	e008      	b.n	80053d6 <HAL_GPIO_Init+0x1d6>
 80053c4:	2307      	movs	r3, #7
 80053c6:	e006      	b.n	80053d6 <HAL_GPIO_Init+0x1d6>
 80053c8:	2303      	movs	r3, #3
 80053ca:	e004      	b.n	80053d6 <HAL_GPIO_Init+0x1d6>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e002      	b.n	80053d6 <HAL_GPIO_Init+0x1d6>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_GPIO_Init+0x1d6>
 80053d4:	2300      	movs	r3, #0
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	f002 0203 	and.w	r2, r2, #3
 80053dc:	0092      	lsls	r2, r2, #2
 80053de:	4093      	lsls	r3, r2
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053e6:	4938      	ldr	r1, [pc, #224]	@ (80054c8 <HAL_GPIO_Init+0x2c8>)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	3302      	adds	r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053f4:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4013      	ands	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005418:	4a30      	ldr	r2, [pc, #192]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800541e:	4b2f      	ldr	r3, [pc, #188]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	43db      	mvns	r3, r3
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4013      	ands	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005442:	4a26      	ldr	r2, [pc, #152]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005448:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800544e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	43db      	mvns	r3, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800546e:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005476:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800549c:	4a0f      	ldr	r2, [pc, #60]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3301      	adds	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f47f aeab 	bne.w	8005210 <HAL_GPIO_Init+0x10>
  }
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	40010000 	.word	0x40010000
 80054cc:	48000400 	.word	0x48000400
 80054d0:	48000800 	.word	0x48000800
 80054d4:	48000c00 	.word	0x48000c00
 80054d8:	48001000 	.word	0x48001000
 80054dc:	58000800 	.word	0x58000800

080054e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	807b      	strh	r3, [r7, #2]
 80054ec:	4613      	mov	r3, r2
 80054ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054f0:	787b      	ldrb	r3, [r7, #1]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054f6:	887a      	ldrh	r2, [r7, #2]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054fc:	e002      	b.n	8005504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800551a:	4b08      	ldr	r3, [pc, #32]	@ (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd faae 	bl	8002a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	58000800 	.word	0x58000800

08005540 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <HAL_HSEM_IRQHandler+0x30>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800554c:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <HAL_HSEM_IRQHandler+0x30>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	43db      	mvns	r3, r3
 8005554:	4906      	ldr	r1, [pc, #24]	@ (8005570 <HAL_HSEM_IRQHandler+0x30>)
 8005556:	4013      	ands	r3, r2
 8005558:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800555a:	4a05      	ldr	r2, [pc, #20]	@ (8005570 <HAL_HSEM_IRQHandler+0x30>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f807 	bl	8005574 <HAL_HSEM_FreeCallback>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	58001500 	.word	0x58001500

08005574 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e08d      	b.n	80056b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fe fee2 	bl	8004378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d107      	bne.n	8005602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	e006      	b.n	8005610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800560e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d108      	bne.n	800562a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	e007      	b.n	800563a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800564c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800565c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
 80056d0:	4613      	mov	r3, r2
 80056d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	f040 80fd 	bne.w	80058dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2C_Master_Transmit+0x30>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0f6      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056f8:	f7ff f99e 	bl	8004a38 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2319      	movs	r3, #25
 8005704:	2201      	movs	r2, #1
 8005706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fa82 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0e1      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2221      	movs	r2, #33	@ 0x21
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2210      	movs	r2, #16
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2bff      	cmp	r3, #255	@ 0xff
 800574a:	d906      	bls.n	800575a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005752:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e007      	b.n	800576a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005764:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005768:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d024      	beq.n	80057bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	8979      	ldrh	r1, [r7, #10]
 80057ae:	4b4e      	ldr	r3, [pc, #312]	@ (80058e8 <HAL_I2C_Master_Transmit+0x228>)
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fbf1 	bl	8005f9c <I2C_TransferConfig>
 80057ba:	e066      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	4b48      	ldr	r3, [pc, #288]	@ (80058e8 <HAL_I2C_Master_Transmit+0x228>)
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fbe6 	bl	8005f9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80057d0:	e05b      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fa75 	bl	8005cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07b      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d034      	beq.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d130      	bne.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2200      	movs	r2, #0
 8005830:	2180      	movs	r1, #128	@ 0x80
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f9ee 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e04d      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2bff      	cmp	r3, #255	@ 0xff
 800584a:	d90e      	bls.n	800586a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	22ff      	movs	r2, #255	@ 0xff
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	b2da      	uxtb	r2, r3
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	2300      	movs	r3, #0
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fb9a 	bl	8005f9c <I2C_TransferConfig>
 8005868:	e00f      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	2300      	movs	r3, #0
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fb89 	bl	8005f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d19e      	bne.n	80057d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fa5b 	bl	8005d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e01a      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2220      	movs	r2, #32
 80058ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_I2C_Master_Transmit+0x22c>)
 80058bc:	400b      	ands	r3, r1
 80058be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	80002000 	.word	0x80002000
 80058ec:	fe00e800 	.word	0xfe00e800

080058f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	460b      	mov	r3, r1
 8005904:	813b      	strh	r3, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b20      	cmp	r3, #32
 8005914:	f040 80fd 	bne.w	8005b12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_I2C_Mem_Read+0x34>
 800591e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0f1      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_I2C_Mem_Read+0x4e>
 800593a:	2302      	movs	r3, #2
 800593c:	e0ea      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005946:	f7ff f877 	bl	8004a38 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2319      	movs	r3, #25
 8005952:	2201      	movs	r2, #1
 8005954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f95b 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0d5      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2222      	movs	r2, #34	@ 0x22
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2240      	movs	r2, #64	@ 0x40
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005990:	88f8      	ldrh	r0, [r7, #6]
 8005992:	893a      	ldrh	r2, [r7, #8]
 8005994:	8979      	ldrh	r1, [r7, #10]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4603      	mov	r3, r0
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f8bf 	bl	8005b24 <I2C_RequestMemoryRead>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0ad      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2bff      	cmp	r3, #255	@ 0xff
 80059c0:	d90e      	bls.n	80059e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	22ff      	movs	r2, #255	@ 0xff
 80059c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	4b52      	ldr	r3, [pc, #328]	@ (8005b1c <HAL_I2C_Mem_Read+0x22c>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fadf 	bl	8005f9c <I2C_TransferConfig>
 80059de:	e00f      	b.n	8005a00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	8979      	ldrh	r1, [r7, #10]
 80059f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005b1c <HAL_I2C_Mem_Read+0x22c>)
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 face 	bl	8005f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	2200      	movs	r2, #0
 8005a08:	2104      	movs	r1, #4
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f902 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07c      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d034      	beq.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d130      	bne.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	2200      	movs	r2, #0
 8005a66:	2180      	movs	r1, #128	@ 0x80
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f8d3 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e04d      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2bff      	cmp	r3, #255	@ 0xff
 8005a80:	d90e      	bls.n	8005aa0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	@ 0xff
 8005a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	8979      	ldrh	r1, [r7, #10]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fa7f 	bl	8005f9c <I2C_TransferConfig>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	8979      	ldrh	r1, [r7, #10]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fa6e 	bl	8005f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d19a      	bne.n	8005a00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f940 	bl	8005d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e01a      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <HAL_I2C_Mem_Read+0x230>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	80002400 	.word	0x80002400
 8005b20:	fe00e800 	.word	0xfe00e800

08005b24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	817b      	strh	r3, [r7, #10]
 8005b36:	460b      	mov	r3, r1
 8005b38:	813b      	strh	r3, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	4b20      	ldr	r3, [pc, #128]	@ (8005bc8 <I2C_RequestMemoryRead+0xa4>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fa26 	bl	8005f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	69b9      	ldr	r1, [r7, #24]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f8b6 	bl	8005cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e02c      	b.n	8005bbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6a:	893b      	ldrh	r3, [r7, #8]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b74:	e015      	b.n	8005ba2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b76:	893b      	ldrh	r3, [r7, #8]
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f89c 	bl	8005cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e012      	b.n	8005bbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b98:	893b      	ldrh	r3, [r7, #8]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2140      	movs	r1, #64	@ 0x40
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f831 	bl	8005c14 <I2C_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	80002000 	.word	0x80002000

08005bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d103      	bne.n	8005bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d007      	beq.n	8005c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	619a      	str	r2, [r3, #24]
  }
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c24:	e03b      	b.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8d6 	bl	8005ddc <I2C_IsErrorOccurred>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e041      	b.n	8005cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d02d      	beq.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fe fef9 	bl	8004a38 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d122      	bne.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d113      	bne.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e00f      	b.n	8005cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d0b4      	beq.n	8005c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cd2:	e033      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f87f 	bl	8005ddc <I2C_IsErrorOccurred>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e031      	b.n	8005d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d025      	beq.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf0:	f7fe fea2 	bl	8004a38 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11a      	bne.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d013      	beq.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d1c4      	bne.n	8005cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d60:	e02f      	b.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f838 	bl	8005ddc <I2C_IsErrorOccurred>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e02d      	b.n	8005dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fe fe5f 	bl	8004a38 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11a      	bne.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d013      	beq.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e007      	b.n	8005dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d1c8      	bne.n	8005d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d068      	beq.n	8005eda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e10:	e049      	b.n	8005ea6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d045      	beq.n	8005ea6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fe fe0d 	bl	8004a38 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <I2C_IsErrorOccurred+0x54>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d13a      	bne.n	8005ea6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e52:	d121      	bne.n	8005e98 <I2C_IsErrorOccurred+0xbc>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e5a:	d01d      	beq.n	8005e98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d01a      	beq.n	8005e98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e72:	f7fe fde1 	bl	8004a38 <HAL_GetTick>
 8005e76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e78:	e00e      	b.n	8005e98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e7a:	f7fe fddd 	bl	8004a38 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b19      	cmp	r3, #25
 8005e86:	d907      	bls.n	8005e98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	f043 0320 	orr.w	r3, r3, #32
 8005e8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e96:	e006      	b.n	8005ea6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d1e9      	bne.n	8005e7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d003      	beq.n	8005ebc <I2C_IsErrorOccurred+0xe0>
 8005eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0aa      	beq.n	8005e12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f043 0308 	orr.w	r3, r3, #8
 8005f14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	f043 0302 	orr.w	r3, r3, #2
 8005f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01c      	beq.n	8005f8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fe3b 	bl	8005bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <I2C_IsErrorOccurred+0x1bc>)
 8005f62:	400b      	ands	r3, r1
 8005f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	fe00e800 	.word	0xfe00e800

08005f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	817b      	strh	r3, [r7, #10]
 8005faa:	4613      	mov	r3, r2
 8005fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fae:	897b      	ldrh	r3, [r7, #10]
 8005fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fb4:	7a7b      	ldrb	r3, [r7, #9]
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	0d5b      	lsrs	r3, r3, #21
 8005fd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005fda:	4b08      	ldr	r3, [pc, #32]	@ (8005ffc <I2C_TransferConfig+0x60>)
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	ea02 0103 	and.w	r1, r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	03ff63ff 	.word	0x03ff63ff

08006000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b20      	cmp	r3, #32
 8006014:	d138      	bne.n	8006088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006020:	2302      	movs	r3, #2
 8006022:	e032      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2224      	movs	r2, #36	@ 0x24
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d139      	bne.n	8006120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e033      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2224      	movs	r2, #36	@ 0x24
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01e      	beq.n	8006180 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006142:	4b13      	ldr	r3, [pc, #76]	@ (8006190 <HAL_IPCC_Init+0x60>)
 8006144:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fe f958 	bl	8004408 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	f000 f85b 	bl	8006214 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f82c 	bl	80061c8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800617e:	e001      	b.n	8006184 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	58000c00 	.word	0x58000c00

08006194 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	4613      	mov	r3, r2
 80061ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e00f      	b.n	80061f6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	4a0b      	ldr	r2, [pc, #44]	@ (800620c <IPCC_SetDefaultCallbacks+0x44>)
 80061e0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3306      	adds	r3, #6
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <IPCC_SetDefaultCallbacks+0x48>)
 80061ee:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d9ec      	bls.n	80061d6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	08006195 	.word	0x08006195
 8006210:	080061af 	.word	0x080061af

08006214 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8006228:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	223f      	movs	r2, #63	@ 0x3f
 800622e:	609a      	str	r2, [r3, #8]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e0c0      	b.n	80063d0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f00f f9aa 	bl	80155bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f005 fca9 	bl	800bbcc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e03e      	b.n	80062fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	440b      	add	r3, r1
 800628e:	3311      	adds	r3, #17
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	3310      	adds	r3, #16
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	440b      	add	r3, r1
 80062b6:	3313      	adds	r3, #19
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	440b      	add	r3, r1
 80062ca:	3320      	adds	r3, #32
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	440b      	add	r3, r1
 80062de:	3324      	adds	r3, #36	@ 0x24
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	440b      	add	r3, r1
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	3301      	adds	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	791b      	ldrb	r3, [r3, #4]
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	429a      	cmp	r2, r3
 8006306:	d3bb      	bcc.n	8006280 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e044      	b.n	8006398 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	440b      	add	r3, r1
 800631c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006324:	7bfa      	ldrb	r2, [r7, #15]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	440b      	add	r3, r1
 8006332:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006336:	7bfa      	ldrb	r2, [r7, #15]
 8006338:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	3301      	adds	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	791b      	ldrb	r3, [r3, #4]
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3b5      	bcc.n	800630e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80063ae:	f005 fc28 	bl	800bc02 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7a9b      	ldrb	r3, [r3, #10]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d102      	bne.n	80063ce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fc40 	bl	8007c4e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_PCD_Start+0x16>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e012      	b.n	8006414 <HAL_PCD_Start+0x3c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f005 fbcf 	bl	800bb9e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f007 fe90 	bl	800e12a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f007 fe95 	bl	800e158 <USB_ReadInterrupts>
 800642e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb04 	bl	8006a48 <PCD_EP_ISR_Handler>

    return;
 8006440:	e110      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d013      	beq.n	8006474 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645e:	b292      	uxth	r2, r2
 8006460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f00f f95c 	bl	8015722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800646a:	2100      	movs	r1, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8fc 	bl	800666a <HAL_PCD_SetAddress>

    return;
 8006472:	e0f7      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006490:	b292      	uxth	r2, r2
 8006492:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006496:	e0e5      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064b4:	b292      	uxth	r2, r2
 80064b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80064ba:	e0d3      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d034      	beq.n	8006530 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0204 	bic.w	r2, r2, #4
 80064d8:	b292      	uxth	r2, r2
 80064da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0208 	bic.w	r2, r2, #8
 80064f0:	b292      	uxth	r2, r2
 80064f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d107      	bne.n	8006510 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f00f fafe 	bl	8015b0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f00f f93f 	bl	8015794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006528:	b292      	uxth	r2, r2
 800652a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800652e:	e099      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006536:	2b00      	cmp	r3, #0
 8006538:	d027      	beq.n	800658a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0208 	orr.w	r2, r2, #8
 800654c:	b292      	uxth	r2, r2
 800654e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006564:	b292      	uxth	r2, r2
 8006566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0204 	orr.w	r2, r2, #4
 800657c:	b292      	uxth	r2, r2
 800657e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f00f f8ec 	bl	8015760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006588:	e06c      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d040      	beq.n	8006616 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065a6:	b292      	uxth	r2, r2
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d12b      	bne.n	800660e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0204 	orr.w	r2, r2, #4
 80065c8:	b292      	uxth	r2, r2
 80065ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0208 	orr.w	r2, r2, #8
 80065e0:	b292      	uxth	r2, r2
 80065e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006604:	2101      	movs	r1, #1
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f00f fa80 	bl	8015b0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800660c:	e02a      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f00f f8a6 	bl	8015760 <HAL_PCD_SuspendCallback>
    return;
 8006614:	e026      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006632:	b292      	uxth	r2, r2
 8006634:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f00f f864 	bl	8015706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800663e:	e011      	b.n	8006664 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800665c:	b292      	uxth	r2, r2
 800665e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006662:	bf00      	nop
  }
}
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_PCD_SetAddress+0x1a>
 8006680:	2302      	movs	r3, #2
 8006682:	e012      	b.n	80066aa <HAL_PCD_SetAddress+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f007 fd31 	bl	800e102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	4608      	mov	r0, r1
 80066bc:	4611      	mov	r1, r2
 80066be:	461a      	mov	r2, r3
 80066c0:	4603      	mov	r3, r0
 80066c2:	70fb      	strb	r3, [r7, #3]
 80066c4:	460b      	mov	r3, r1
 80066c6:	803b      	strh	r3, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0e      	bge.n	80066f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 0207 	and.w	r2, r3, #7
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	3310      	adds	r3, #16
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	705a      	strb	r2, [r3, #1]
 80066f4:	e00e      	b.n	8006714 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	f003 0207 	and.w	r2, r3, #7
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006720:	883a      	ldrh	r2, [r7, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	78ba      	ldrb	r2, [r7, #2]
 800672a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800672c:	78bb      	ldrb	r3, [r7, #2]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d102      	bne.n	8006738 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_PCD_EP_Open+0x94>
 8006742:	2302      	movs	r3, #2
 8006744:	e00e      	b.n	8006764 <HAL_PCD_EP_Open+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	4618      	mov	r0, r3
 8006756:	f005 fa73 	bl	800bc40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006762:	7afb      	ldrb	r3, [r7, #11]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	da0e      	bge.n	800679e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 0207 	and.w	r2, r3, #7
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	3310      	adds	r3, #16
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	705a      	strb	r2, [r3, #1]
 800679c:	e00e      	b.n	80067bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	f003 0207 	and.w	r2, r3, #7
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_PCD_EP_Close+0x6a>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e00e      	b.n	80067f4 <HAL_PCD_EP_Close+0x88>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fdef 	bl	800c3c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	460b      	mov	r3, r1
 800680a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	f003 0207 	and.w	r2, r3, #7
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2200      	movs	r2, #0
 8006834:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2200      	movs	r2, #0
 800683a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	b2da      	uxtb	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6979      	ldr	r1, [r7, #20]
 800684e:	4618      	mov	r0, r3
 8006850:	f005 ffa7 	bl	800c7a2 <USB_EPStartXfer>

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 0207 	and.w	r2, r3, #7
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	440b      	add	r3, r1
 800687c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006880:	681b      	ldr	r3, [r3, #0]
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	460b      	mov	r3, r1
 800689c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	f003 0207 	and.w	r2, r3, #7
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3310      	adds	r3, #16
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2200      	movs	r2, #0
 80068d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2201      	movs	r2, #1
 80068d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6979      	ldr	r1, [r7, #20]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f005 ff58 	bl	800c7a2 <USB_EPStartXfer>

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	7912      	ldrb	r2, [r2, #4]
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e03e      	b.n	8006998 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800691a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da0e      	bge.n	8006940 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 0207 	and.w	r2, r3, #7
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	3310      	adds	r3, #16
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	705a      	strb	r2, [r3, #1]
 800693e:	e00c      	b.n	800695a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	b2da      	uxtb	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_PCD_EP_SetStall+0x7e>
 8006976:	2302      	movs	r3, #2
 8006978:	e00e      	b.n	8006998 <HAL_PCD_EP_SetStall+0x9c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4618      	mov	r0, r3
 800698a:	f007 fabb 	bl	800df04 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	7912      	ldrb	r2, [r2, #4]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d901      	bls.n	80069be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e040      	b.n	8006a40 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	da0e      	bge.n	80069e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	f003 0207 	and.w	r2, r3, #7
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	3310      	adds	r3, #16
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	705a      	strb	r2, [r3, #1]
 80069e2:	e00e      	b.n	8006a02 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 0207 	and.w	r2, r3, #7
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	4413      	add	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_PCD_EP_ClrStall+0x82>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e00e      	b.n	8006a40 <HAL_PCD_EP_ClrStall+0xa0>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f007 fab8 	bl	800dfa6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b096      	sub	sp, #88	@ 0x58
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a50:	e3ad      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 816f 	bne.w	8006d54 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d14c      	bne.n	8006b1c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a92:	81fb      	strh	r3, [r7, #14]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	4413      	add	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	441a      	add	r2, r3
 8006ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f00e fdf4 	bl	80156d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7b1b      	ldrb	r3, [r3, #12]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 835c 	beq.w	80071ae <PCD_EP_ISR_Handler+0x766>
 8006af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8357 	bne.w	80071ae <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	731a      	strb	r2, [r3, #12]
 8006b1a:	e348      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b22:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006b2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d032      	beq.n	8006ba0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f007 fb41 	bl	800e1fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006b86:	4013      	ands	r3, r2
 8006b88:	823b      	strh	r3, [r7, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	8a3a      	ldrh	r2, [r7, #16]
 8006b90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b94:	b292      	uxth	r2, r2
 8006b96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f00e fd6d 	bl	8015678 <HAL_PCD_SetupStageCallback>
 8006b9e:	e306      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ba0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f280 8302 	bge.w	80071ae <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	83fb      	strh	r3, [r7, #30]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	8bfa      	ldrh	r2, [r7, #30]
 8006bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d019      	beq.n	8006c2c <PCD_EP_ISR_Handler+0x1e4>
 8006bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d015      	beq.n	8006c2c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c06:	6959      	ldr	r1, [r3, #20]
 8006c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f007 faf3 	bl	800e1fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	441a      	add	r2, r3
 8006c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f00e fd38 	bl	801569c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006c36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 82b5 	bne.w	80071ae <PCD_EP_ISR_Handler+0x766>
 8006c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c48:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006c4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c50:	f000 82ad 	beq.w	80071ae <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	4413      	add	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c8a:	d91d      	bls.n	8006cc8 <PCD_EP_ISR_Handler+0x280>
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <PCD_EP_ISR_Handler+0x25e>
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	029b      	lsls	r3, r3, #10
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e026      	b.n	8006d16 <PCD_EP_ISR_Handler+0x2ce>
 8006cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <PCD_EP_ISR_Handler+0x29e>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e017      	b.n	8006d16 <PCD_EP_ISR_Handler+0x2ce>
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <PCD_EP_ISR_Handler+0x2b8>
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	827b      	strh	r3, [r7, #18]
 8006d28:	8a7b      	ldrh	r3, [r7, #18]
 8006d2a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d2e:	827b      	strh	r3, [r7, #18]
 8006d30:	8a7b      	ldrh	r3, [r7, #18]
 8006d32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d36:	827b      	strh	r3, [r7, #18]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	8a7b      	ldrh	r3, [r7, #18]
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]
 8006d52:	e22c      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d68:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f280 80f6 	bge.w	8006f5e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006d88:	4013      	ands	r3, r2
 8006d8a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006da0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006da4:	b292      	uxth	r2, r2
 8006da6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006da8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dc0:	7b1b      	ldrb	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d123      	bne.n	8006e0e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	4413      	add	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006dee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 808e 	beq.w	8006f14 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e02:	88da      	ldrh	r2, [r3, #6]
 8006e04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006e08:	f007 f9f8 	bl	800e1fc <USB_ReadPMA>
 8006e0c:	e082      	b.n	8006f14 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e10:	78db      	ldrb	r3, [r3, #3]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d10a      	bne.n	8006e2c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006e16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9d3 	bl	80071ca <HAL_PCD_EP_DB_Receive>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006e2a:	e073      	b.n	8006f14 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d022      	beq.n	8006ed0 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006eb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d02c      	beq.n	8006f14 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec0:	6959      	ldr	r1, [r3, #20]
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec4:	891a      	ldrh	r2, [r3, #8]
 8006ec6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006eca:	f007 f997 	bl	800e1fc <USB_ReadPMA>
 8006ece:	e021      	b.n	8006f14 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006ef8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f06:	6959      	ldr	r1, [r3, #20]
 8006f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0a:	895a      	ldrh	r2, [r3, #10]
 8006f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006f10:	f007 f974 	bl	800e1fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006f1c:	441a      	add	r2, r3
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006f2a:	441a      	add	r2, r3
 8006f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <PCD_EP_ISR_Handler+0x4fc>
 8006f38:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d206      	bcs.n	8006f52 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f00e fba6 	bl	801569c <HAL_PCD_DataOutStageCallback>
 8006f50:	e005      	b.n	8006f5e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f005 fc22 	bl	800c7a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006f5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8121 	beq.w	80071ae <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8006f6c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	3310      	adds	r3, #16
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbe:	78db      	ldrb	r3, [r3, #3]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f040 80a2 	bne.w	800710a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc8:	2200      	movs	r2, #0
 8006fca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fce:	7b1b      	ldrb	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8093 	beq.w	80070fc <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d046      	beq.n	8007070 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d126      	bne.n	8007038 <PCD_EP_ISR_Handler+0x5f0>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	4413      	add	r3, r2
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
 8007002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	00da      	lsls	r2, r3, #3
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	4413      	add	r3, r2
 800700c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007030:	b29a      	uxth	r2, r3
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e061      	b.n	80070fc <PCD_EP_ISR_Handler+0x6b4>
 8007038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d15d      	bne.n	80070fc <PCD_EP_ISR_Handler+0x6b4>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	4413      	add	r3, r2
 8007056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00da      	lsls	r2, r3, #3
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	4413      	add	r3, r2
 8007062:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2200      	movs	r2, #0
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e045      	b.n	80070fc <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d126      	bne.n	80070cc <PCD_EP_ISR_Handler+0x684>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	637b      	str	r3, [r7, #52]	@ 0x34
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007092:	4413      	add	r3, r2
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
 8007096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00da      	lsls	r2, r3, #3
 800709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e017      	b.n	80070fc <PCD_EP_ISR_Handler+0x6b4>
 80070cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d113      	bne.n	80070fc <PCD_EP_ISR_Handler+0x6b4>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070dc:	b29b      	uxth	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e2:	4413      	add	r3, r2
 80070e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	00da      	lsls	r2, r3, #3
 80070ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ee:	4413      	add	r3, r2
 80070f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	2200      	movs	r2, #0
 80070fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f00e fae5 	bl	80156d2 <HAL_PCD_DataInStageCallback>
 8007108:	e051      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800710a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d144      	bne.n	80071a0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	4413      	add	r3, r2
 8007130:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800713e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007146:	429a      	cmp	r2, r3
 8007148:	d907      	bls.n	800715a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800714a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007156:	619a      	str	r2, [r3, #24]
 8007158:	e002      	b.n	8007160 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f00e faaf 	bl	80156d2 <HAL_PCD_DataInStageCallback>
 8007174:	e01b      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800717e:	441a      	add	r2, r3
 8007180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007182:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800718c:	441a      	add	r2, r3
 800718e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007190:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007198:	4618      	mov	r0, r3
 800719a:	f005 fb02 	bl	800c7a2 <USB_EPStartXfer>
 800719e:	e006      	b.n	80071ae <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80071a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80071a4:	461a      	mov	r2, r3
 80071a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f917 	bl	80073dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	b21b      	sxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f6ff ac49 	blt.w	8006a52 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3758      	adds	r7, #88	@ 0x58
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b088      	sub	sp, #32
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	4613      	mov	r3, r2
 80071d6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d07c      	beq.n	80072dc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4413      	add	r3, r2
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	4413      	add	r3, r2
 80071fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007206:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	8b7b      	ldrh	r3, [r7, #26]
 800720e:	429a      	cmp	r2, r3
 8007210:	d306      	bcc.n	8007220 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	8b7b      	ldrh	r3, [r7, #26]
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	619a      	str	r2, [r3, #24]
 800721e:	e002      	b.n	8007226 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2200      	movs	r2, #0
 8007224:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d123      	bne.n	8007276 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007248:	833b      	strh	r3, [r7, #24]
 800724a:	8b3b      	ldrh	r3, [r7, #24]
 800724c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007250:	833b      	strh	r3, [r7, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	8b3b      	ldrh	r3, [r7, #24]
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01f      	beq.n	80072c0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729a:	82fb      	strh	r3, [r7, #22]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	441a      	add	r2, r3
 80072aa:	8afb      	ldrh	r3, [r7, #22]
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80072c0:	8b7b      	ldrh	r3, [r7, #26]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8085 	beq.w	80073d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6959      	ldr	r1, [r3, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	891a      	ldrh	r2, [r3, #8]
 80072d4:	8b7b      	ldrh	r3, [r7, #26]
 80072d6:	f006 ff91 	bl	800e1fc <USB_ReadPMA>
 80072da:	e07a      	b.n	80073d2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	8b7b      	ldrh	r3, [r7, #26]
 8007308:	429a      	cmp	r2, r3
 800730a:	d306      	bcc.n	800731a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	8b7b      	ldrh	r3, [r7, #26]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	619a      	str	r2, [r3, #24]
 8007318:	e002      	b.n	8007320 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d123      	bne.n	8007370 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800733e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007342:	83fb      	strh	r3, [r7, #30]
 8007344:	8bfb      	ldrh	r3, [r7, #30]
 8007346:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800734a:	83fb      	strh	r3, [r7, #30]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	8bfb      	ldrh	r3, [r7, #30]
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d11f      	bne.n	80073ba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007394:	83bb      	strh	r3, [r7, #28]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	8bbb      	ldrh	r3, [r7, #28]
 80073a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80073ba:	8b7b      	ldrh	r3, [r7, #26]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6959      	ldr	r1, [r3, #20]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	895a      	ldrh	r2, [r3, #10]
 80073cc:	8b7b      	ldrh	r3, [r7, #26]
 80073ce:	f006 ff15 	bl	800e1fc <USB_ReadPMA>
    }
  }

  return count;
 80073d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b0a4      	sub	sp, #144	@ 0x90
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 81db 	beq.w	80077ac <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073fe:	b29b      	uxth	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4413      	add	r3, r2
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	4413      	add	r3, r2
 8007410:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007426:	429a      	cmp	r2, r3
 8007428:	d907      	bls.n	800743a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	619a      	str	r2, [r3, #24]
 8007438:	e002      	b.n	8007440 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 80b9 	bne.w	80075bc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d126      	bne.n	80074a0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007460:	b29b      	uxth	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	4413      	add	r3, r2
 8007468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	00da      	lsls	r2, r3, #3
 8007470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007472:	4413      	add	r3, r2
 8007474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007484:	b29a      	uxth	r2, r3
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007498:	b29a      	uxth	r2, r3
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e01a      	b.n	80074d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d116      	bne.n	80074d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	4413      	add	r3, r2
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00da      	lsls	r2, r3, #3
 80074c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d126      	bne.n	8007532 <HAL_PCD_EP_DB_Transmit+0x156>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00da      	lsls	r2, r3, #3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007516:	b29a      	uxth	r2, r3
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752a:	b29a      	uxth	r2, r3
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e017      	b.n	8007562 <HAL_PCD_EP_DB_Transmit+0x186>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d113      	bne.n	8007562 <HAL_PCD_EP_DB_Transmit+0x186>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007542:	b29b      	uxth	r3, r3
 8007544:	461a      	mov	r2, r3
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	4413      	add	r3, r2
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	00da      	lsls	r2, r3, #3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	4413      	add	r3, r2
 8007556:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2200      	movs	r2, #0
 8007560:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f00e f8b2 	bl	80156d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 82fa 	beq.w	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007594:	82fb      	strh	r3, [r7, #22]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	8afb      	ldrh	r3, [r7, #22]
 80075a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	8013      	strh	r3, [r2, #0]
 80075ba:	e2d8      	b.n	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d021      	beq.n	800760a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	441a      	add	r2, r3
 80075f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007610:	2b01      	cmp	r3, #1
 8007612:	f040 82ac 	bne.w	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800761e:	441a      	add	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800762c:	441a      	add	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	429a      	cmp	r2, r3
 800763c:	d30b      	bcc.n	8007656 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6a1a      	ldr	r2, [r3, #32]
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	621a      	str	r2, [r3, #32]
 8007654:	e017      	b.n	8007686 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d108      	bne.n	8007670 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800765e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800766e:	e00a      	b.n	8007686 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d165      	bne.n	800775a <HAL_PCD_EP_DB_Transmit+0x37e>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a2:	4413      	add	r3, r2
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ae:	4413      	add	r3, r2
 80076b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80076cc:	d91d      	bls.n	800770a <HAL_PCD_EP_DB_Transmit+0x32e>
 80076ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80076e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e4:	3b01      	subs	r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	029b      	lsls	r3, r3, #10
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4313      	orrs	r3, r2
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29a      	uxth	r2, r3
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e044      	b.n	8007794 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800770a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <HAL_PCD_EP_DB_Transmit+0x34c>
 8007712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e035      	b.n	8007794 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_PCD_EP_DB_Transmit+0x366>
 800773c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800773e:	3301      	adds	r3, #1
 8007740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29a      	uxth	r2, r3
 8007748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e01c      	b.n	8007794 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d118      	bne.n	8007794 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	647b      	str	r3, [r7, #68]	@ 0x44
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007776:	4413      	add	r3, r2
 8007778:	647b      	str	r3, [r7, #68]	@ 0x44
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00da      	lsls	r2, r3, #3
 8007780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007782:	4413      	add	r3, r2
 8007784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007788:	643b      	str	r3, [r7, #64]	@ 0x40
 800778a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800778e:	b29a      	uxth	r2, r3
 8007790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007792:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6959      	ldr	r1, [r3, #20]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	891a      	ldrh	r2, [r3, #8]
 80077a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f006 fce7 	bl	800e178 <USB_WritePMA>
 80077aa:	e1e0      	b.n	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	4413      	add	r3, r2
 80077c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077dc:	429a      	cmp	r2, r3
 80077de:	d307      	bcc.n	80077f0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	619a      	str	r2, [r3, #24]
 80077ee:	e002      	b.n	80077f6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 80c0 	bne.w	8007980 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d126      	bne.n	8007856 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781c:	4413      	add	r3, r2
 800781e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	00da      	lsls	r2, r3, #3
 8007826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007828:	4413      	add	r3, r2
 800782a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800782e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783a:	b29a      	uxth	r2, r3
 800783c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e01a      	b.n	800788c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d116      	bne.n	800788c <HAL_PCD_EP_DB_Transmit+0x4b0>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	667b      	str	r3, [r7, #100]	@ 0x64
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007872:	4413      	add	r3, r2
 8007874:	667b      	str	r3, [r7, #100]	@ 0x64
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00da      	lsls	r2, r3, #3
 800787c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800787e:	4413      	add	r3, r2
 8007880:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007884:	663b      	str	r3, [r7, #96]	@ 0x60
 8007886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007888:	2200      	movs	r2, #0
 800788a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	677b      	str	r3, [r7, #116]	@ 0x74
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d12b      	bne.n	80078f2 <HAL_PCD_EP_DB_Transmit+0x516>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ae:	4413      	add	r3, r2
 80078b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	00da      	lsls	r2, r3, #3
 80078b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e017      	b.n	8007922 <HAL_PCD_EP_DB_Transmit+0x546>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d113      	bne.n	8007922 <HAL_PCD_EP_DB_Transmit+0x546>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007902:	b29b      	uxth	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007908:	4413      	add	r3, r2
 800790a:	677b      	str	r3, [r7, #116]	@ 0x74
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	00da      	lsls	r2, r3, #3
 8007912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007914:	4413      	add	r3, r2
 8007916:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800791a:	673b      	str	r3, [r7, #112]	@ 0x70
 800791c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800791e:	2200      	movs	r2, #0
 8007920:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f00d fed2 	bl	80156d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 811a 	bne.w	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007954:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	441a      	add	r2, r3
 8007966:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]
 800797e:	e0f6      	b.n	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d121      	bne.n	80079ce <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80079ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	f040 80ca 	bne.w	8007b6e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	695a      	ldr	r2, [r3, #20]
 80079de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80079e2:	441a      	add	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80079f0:	441a      	add	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d30b      	bcc.n	8007a1a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	621a      	str	r2, [r3, #32]
 8007a18:	e017      	b.n	8007a4a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d108      	bne.n	8007a34 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007a32:	e00a      	b.n	8007a4a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d165      	bne.n	8007b24 <HAL_PCD_EP_DB_Transmit+0x748>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6c:	4413      	add	r3, r2
 8007a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	00da      	lsls	r2, r3, #3
 8007a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a78:	4413      	add	r3, r2
 8007a7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a96:	d91d      	bls.n	8007ad4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e041      	b.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <HAL_PCD_EP_DB_Transmit+0x716>
 8007adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e032      	b.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_PCD_EP_DB_Transmit+0x730>
 8007b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b08:	3301      	adds	r3, #1
 8007b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	029b      	lsls	r3, r3, #10
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e019      	b.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d115      	bne.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3a:	4413      	add	r3, r2
 8007b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	00da      	lsls	r2, r3, #3
 8007b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6959      	ldr	r1, [r3, #20]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	895a      	ldrh	r2, [r3, #10]
 8007b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f006 fb05 	bl	800e178 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b88:	82bb      	strh	r3, [r7, #20]
 8007b8a:	8abb      	ldrh	r3, [r7, #20]
 8007b8c:	f083 0310 	eor.w	r3, r3, #16
 8007b90:	82bb      	strh	r3, [r7, #20]
 8007b92:	8abb      	ldrh	r3, [r7, #20]
 8007b94:	f083 0320 	eor.w	r3, r3, #32
 8007b98:	82bb      	strh	r3, [r7, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	8abb      	ldrh	r3, [r7, #20]
 8007baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3790      	adds	r7, #144	@ 0x90
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	817b      	strh	r3, [r7, #10]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007bda:	897b      	ldrh	r3, [r7, #10]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007be6:	897b      	ldrh	r3, [r7, #10]
 8007be8:	f003 0207 	and.w	r2, r3, #7
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	3310      	adds	r3, #16
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e009      	b.n	8007c12 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007bfe:	897a      	ldrh	r2, [r7, #10]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007c12:	893b      	ldrh	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d107      	bne.n	8007c28 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	80da      	strh	r2, [r3, #6]
 8007c26:	e00b      	b.n	8007c40 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f043 0301 	orr.w	r3, r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ca8:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a04      	ldr	r2, [pc, #16]	@ (8007cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb2:	6013      	str	r3, [r2, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	58000400 	.word	0x58000400

08007cc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007cc8:	4b04      	ldr	r3, [pc, #16]	@ (8007cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	58000400 	.word	0x58000400

08007ce0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4a04      	ldr	r2, [pc, #16]	@ (8007cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cee:	6053      	str	r3, [r2, #4]
}
 8007cf0:	bf00      	nop
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	58000400 	.word	0x58000400

08007d00 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d12:	d101      	bne.n	8007d18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <LL_RCC_HSE_Enable>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <LL_RCC_HSE_Disable>:
{
 8007d42:	b480      	push	{r7}
 8007d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
}
 8007d56:	bf00      	nop
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <LL_RCC_HSE_IsReady>:
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d72:	d101      	bne.n	8007d78 <LL_RCC_HSE_IsReady+0x18>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <LL_RCC_HSE_IsReady+0x1a>
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <LL_RCC_HSI_Enable>:
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d96:	6013      	str	r3, [r2, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <LL_RCC_HSI_Disable>:
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db4:	6013      	str	r3, [r2, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <LL_RCC_HSI_IsReady>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd2:	d101      	bne.n	8007dd8 <LL_RCC_HSI_IsReady+0x18>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e000      	b.n	8007dda <LL_RCC_HSI_IsReady+0x1a>
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	061b      	lsls	r3, r3, #24
 8007dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	604b      	str	r3, [r1, #4]
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <LL_RCC_HSI48_Enable>:
{
 8007e0e:	b480      	push	{r7}
 8007e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007e26:	bf00      	nop
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <LL_RCC_HSI48_Disable>:
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <LL_RCC_HSI48_IsReady>:
{
 8007e52:	b480      	push	{r7}
 8007e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d101      	bne.n	8007e6a <LL_RCC_HSI48_IsReady+0x18>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <LL_RCC_HSI48_IsReady+0x1a>
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <LL_RCC_LSE_Enable>:
{
 8007e76:	b480      	push	{r7}
 8007e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e8e:	bf00      	nop
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <LL_RCC_LSE_Disable>:
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007eb0:	bf00      	nop
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <LL_RCC_LSE_EnableBypass>:
{
 8007eba:	b480      	push	{r7}
 8007ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eca:	f043 0304 	orr.w	r3, r3, #4
 8007ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <LL_RCC_LSE_DisableBypass>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eec:	f023 0304 	bic.w	r3, r3, #4
 8007ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <LL_RCC_LSE_IsReady>:
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d101      	bne.n	8007f16 <LL_RCC_LSE_IsReady+0x18>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <LL_RCC_LSE_IsReady+0x1a>
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <LL_RCC_LSI1_Enable>:
{
 8007f22:	b480      	push	{r7}
 8007f24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007f3a:	bf00      	nop
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <LL_RCC_LSI1_Disable>:
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007f5c:	bf00      	nop
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <LL_RCC_LSI1_IsReady>:
{
 8007f66:	b480      	push	{r7}
 8007f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d101      	bne.n	8007f7e <LL_RCC_LSI1_IsReady+0x18>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <LL_RCC_LSI1_IsReady+0x1a>
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <LL_RCC_LSI2_Enable>:
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f9a:	f043 0304 	orr.w	r3, r3, #4
 8007f9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007fa2:	bf00      	nop
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <LL_RCC_LSI2_Disable>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fbc:	f023 0304 	bic.w	r3, r3, #4
 8007fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <LL_RCC_LSI2_IsReady>:
{
 8007fce:	b480      	push	{r7}
 8007fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d101      	bne.n	8007fe6 <LL_RCC_LSI2_IsReady+0x18>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <LL_RCC_LSI2_IsReady+0x1a>
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <LL_RCC_LSI2_SetTrimming>:
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008002:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <LL_RCC_MSI_Enable>:
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	6013      	str	r3, [r2, #0]
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <LL_RCC_MSI_Disable>:
{
 800803e:	b480      	push	{r7}
 8008040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800804c:	f023 0301 	bic.w	r3, r3, #1
 8008050:	6013      	str	r3, [r2, #0]
}
 8008052:	bf00      	nop
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_RCC_MSI_IsReady>:
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d101      	bne.n	8008072 <LL_RCC_MSI_IsReady+0x16>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <LL_RCC_MSI_IsReady+0x18>
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <LL_RCC_MSI_SetRange>:
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008090:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4313      	orrs	r3, r2
 8008098:	600b      	str	r3, [r1, #0]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <LL_RCC_MSI_GetRange>:
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80080ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80080bc:	d901      	bls.n	80080c2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80080be:	23b0      	movs	r3, #176	@ 0xb0
 80080c0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80080c2:	687b      	ldr	r3, [r7, #4]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80080d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080ea:	4313      	orrs	r3, r2
 80080ec:	604b      	str	r3, [r1, #4]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <LL_RCC_SetSysClkSource>:
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f023 0203 	bic.w	r2, r3, #3
 800810c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4313      	orrs	r3, r2
 8008114:	608b      	str	r3, [r1, #8]
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <LL_RCC_GetSysClkSource>:
{
 8008122:	b480      	push	{r7}
 8008124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 030c 	and.w	r3, r3, #12
}
 8008130:	4618      	mov	r0, r3
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <LL_RCC_SetAHBPrescaler>:
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800814c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4313      	orrs	r3, r2
 8008154:	608b      	str	r3, [r1, #8]
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800816a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800816e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008172:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4313      	orrs	r3, r2
 800817e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <LL_RCC_SetAHB4Prescaler>:
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800819a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800819e:	f023 020f 	bic.w	r2, r3, #15
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <LL_RCC_SetAPB1Prescaler>:
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80081c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	608b      	str	r3, [r1, #8]
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <LL_RCC_SetAPB2Prescaler>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80081ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80081f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	608b      	str	r3, [r1, #8]
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <LL_RCC_GetAHBPrescaler>:
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800821a:	4618      	mov	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <LL_RCC_GetAHB4Prescaler>:
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800822c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008236:	4618      	mov	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <LL_RCC_PLL_Enable>:
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800824e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008252:	6013      	str	r3, [r2, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <LL_RCC_PLL_Disable>:
{
 800825e:	b480      	push	{r7}
 8008260:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800826c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008270:	6013      	str	r3, [r2, #0]
}
 8008272:	bf00      	nop
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <LL_RCC_PLL_IsReady>:
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800828a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800828e:	d101      	bne.n	8008294 <LL_RCC_PLL_IsReady+0x18>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <LL_RCC_PLL_IsReady+0x1a>
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <LL_RCC_PLL_GetN>:
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80082a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <LL_RCC_PLL_GetR>:
{
 80082ba:	b480      	push	{r7}
 80082bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80082be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <LL_RCC_PLL_GetDivider>:
{
 80082d2:	b480      	push	{r7}
 80082d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80082d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <LL_RCC_PLL_GetMainSource>:
{
 80082ea:	b480      	push	{r7}
 80082ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80082ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f003 0303 	and.w	r3, r3, #3
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008302:	b480      	push	{r7}
 8008304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008314:	d101      	bne.n	800831a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800832a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800832e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800833a:	d101      	bne.n	8008340 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008354:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008360:	d101      	bne.n	8008366 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008372:	b480      	push	{r7}
 8008374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008384:	d101      	bne.n	800838a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008396:	b480      	push	{r7}
 8008398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083a8:	d101      	bne.n	80083ae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b08d      	sub	sp, #52	@ 0x34
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e363      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 808d 	beq.w	80084f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083dc:	f7ff fea1 	bl	8008122 <LL_RCC_GetSysClkSource>
 80083e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083e2:	f7ff ff82 	bl	80082ea <LL_RCC_PLL_GetMainSource>
 80083e6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <HAL_RCC_OscConfig+0x3e>
 80083ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d147      	bne.n	8008484 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d144      	bne.n	8008484 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e347      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800840a:	f7ff fe4c 	bl	80080a6 <LL_RCC_MSI_GetRange>
 800840e:	4603      	mov	r3, r0
 8008410:	429c      	cmp	r4, r3
 8008412:	d914      	bls.n	800843e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fd03 	bl	8008e24 <RCC_SetFlashLatencyFromMSIRange>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e336      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fe26 	bl	800807e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fe4a 	bl	80080d0 <LL_RCC_MSI_SetCalibTrimming>
 800843c:	e013      	b.n	8008466 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fe1b 	bl	800807e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff fe3f 	bl	80080d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fce4 	bl	8008e24 <RCC_SetFlashLatencyFromMSIRange>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e317      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008466:	f000 fcc9 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 800846a:	4603      	mov	r3, r0
 800846c:	4aa4      	ldr	r2, [pc, #656]	@ (8008700 <HAL_RCC_OscConfig+0x344>)
 800846e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008470:	4ba4      	ldr	r3, [pc, #656]	@ (8008704 <HAL_RCC_OscConfig+0x348>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f7fc fa91 	bl	800499c <HAL_InitTick>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d039      	beq.n	80084f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e308      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01e      	beq.n	80084ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800848c:	f7ff fdc8 	bl	8008020 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008490:	f7fc fad2 	bl	8004a38 <HAL_GetTick>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008498:	f7fc face 	bl	8004a38 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e2f5      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80084aa:	f7ff fdd7 	bl	800805c <LL_RCC_MSI_IsReady>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f1      	beq.n	8008498 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff fde0 	bl	800807e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fe04 	bl	80080d0 <LL_RCC_MSI_SetCalibTrimming>
 80084c8:	e015      	b.n	80084f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80084ca:	f7ff fdb8 	bl	800803e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80084ce:	f7fc fab3 	bl	8004a38 <HAL_GetTick>
 80084d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80084d4:	e008      	b.n	80084e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084d6:	f7fc faaf 	bl	8004a38 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e2d6      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80084e8:	f7ff fdb8 	bl	800805c <LL_RCC_MSI_IsReady>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f1      	bne.n	80084d6 <HAL_RCC_OscConfig+0x11a>
 80084f2:	e000      	b.n	80084f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80084f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d047      	beq.n	8008592 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008502:	f7ff fe0e 	bl	8008122 <LL_RCC_GetSysClkSource>
 8008506:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008508:	f7ff feef 	bl	80082ea <LL_RCC_PLL_GetMainSource>
 800850c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d005      	beq.n	8008520 <HAL_RCC_OscConfig+0x164>
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	2b0c      	cmp	r3, #12
 8008518:	d108      	bne.n	800852c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d105      	bne.n	800852c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d134      	bne.n	8008592 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e2b4      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008534:	d102      	bne.n	800853c <HAL_RCC_OscConfig+0x180>
 8008536:	f7ff fbf5 	bl	8007d24 <LL_RCC_HSE_Enable>
 800853a:	e001      	b.n	8008540 <HAL_RCC_OscConfig+0x184>
 800853c:	f7ff fc01 	bl	8007d42 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d012      	beq.n	800856e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fc fa76 	bl	8004a38 <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008550:	f7fc fa72 	bl	8004a38 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b64      	cmp	r3, #100	@ 0x64
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e299      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008562:	f7ff fbfd 	bl	8007d60 <LL_RCC_HSE_IsReady>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0f1      	beq.n	8008550 <HAL_RCC_OscConfig+0x194>
 800856c:	e011      	b.n	8008592 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856e:	f7fc fa63 	bl	8004a38 <HAL_GetTick>
 8008572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008574:	e008      	b.n	8008588 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008576:	f7fc fa5f 	bl	8004a38 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b64      	cmp	r3, #100	@ 0x64
 8008582:	d901      	bls.n	8008588 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e286      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008588:	f7ff fbea 	bl	8007d60 <LL_RCC_HSE_IsReady>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1f1      	bne.n	8008576 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d04c      	beq.n	8008638 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859e:	f7ff fdc0 	bl	8008122 <LL_RCC_GetSysClkSource>
 80085a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085a4:	f7ff fea1 	bl	80082ea <LL_RCC_PLL_GetMainSource>
 80085a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d005      	beq.n	80085bc <HAL_RCC_OscConfig+0x200>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b0c      	cmp	r3, #12
 80085b4:	d10e      	bne.n	80085d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d10b      	bne.n	80085d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e266      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fc09 	bl	8007de4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80085d2:	e031      	b.n	8008638 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d019      	beq.n	8008610 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085dc:	f7ff fbd2 	bl	8007d84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e0:	f7fc fa2a 	bl	8004a38 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085e8:	f7fc fa26 	bl	8004a38 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e24d      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80085fa:	f7ff fbe1 	bl	8007dc0 <LL_RCC_HSI_IsReady>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0f1      	beq.n	80085e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fbeb 	bl	8007de4 <LL_RCC_HSI_SetCalibTrimming>
 800860e:	e013      	b.n	8008638 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008610:	f7ff fbc7 	bl	8007da2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008614:	f7fc fa10 	bl	8004a38 <HAL_GetTick>
 8008618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800861c:	f7fc fa0c 	bl	8004a38 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e233      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800862e:	f7ff fbc7 	bl	8007dc0 <LL_RCC_HSI_IsReady>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f1      	bne.n	800861c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80a3 	beq.w	8008798 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d076      	beq.n	8008748 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b00      	cmp	r3, #0
 8008664:	d046      	beq.n	80086f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008666:	f7ff fc7e 	bl	8007f66 <LL_RCC_LSI1_IsReady>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d113      	bne.n	8008698 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008670:	f7ff fc57 	bl	8007f22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008674:	f7fc f9e0 	bl	8004a38 <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800867c:	f7fc f9dc 	bl	8004a38 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e203      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800868e:	f7ff fc6a 	bl	8007f66 <LL_RCC_LSI1_IsReady>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f1      	beq.n	800867c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008698:	f7ff fc77 	bl	8007f8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869c:	f7fc f9cc 	bl	8004a38 <HAL_GetTick>
 80086a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80086a4:	f7fc f9c8 	bl	8004a38 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e1ef      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80086b6:	f7ff fc8a 	bl	8007fce <LL_RCC_LSI2_IsReady>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0f1      	beq.n	80086a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fc94 	bl	8007ff2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80086ca:	f7ff fc3b 	bl	8007f44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ce:	f7fc f9b3 	bl	8004a38 <HAL_GetTick>
 80086d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80086d4:	e008      	b.n	80086e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80086d6:	f7fc f9af 	bl	8004a38 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d901      	bls.n	80086e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e1d6      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80086e8:	f7ff fc3d 	bl	8007f66 <LL_RCC_LSI1_IsReady>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f1      	bne.n	80086d6 <HAL_RCC_OscConfig+0x31a>
 80086f2:	e051      	b.n	8008798 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80086f4:	f7ff fc15 	bl	8007f22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fc f99e 	bl	8004a38 <HAL_GetTick>
 80086fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80086fe:	e00c      	b.n	800871a <HAL_RCC_OscConfig+0x35e>
 8008700:	2000000c 	.word	0x2000000c
 8008704:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008708:	f7fc f996 	bl	8004a38 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e1bd      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800871a:	f7ff fc24 	bl	8007f66 <LL_RCC_LSI1_IsReady>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f1      	beq.n	8008708 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008724:	f7ff fc42 	bl	8007fac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800872a:	f7fc f985 	bl	8004a38 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b03      	cmp	r3, #3
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e1ac      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800873c:	f7ff fc47 	bl	8007fce <LL_RCC_LSI2_IsReady>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f1      	bne.n	800872a <HAL_RCC_OscConfig+0x36e>
 8008746:	e027      	b.n	8008798 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008748:	f7ff fc30 	bl	8007fac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874c:	f7fc f974 	bl	8004a38 <HAL_GetTick>
 8008750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008754:	f7fc f970 	bl	8004a38 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e197      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008766:	f7ff fc32 	bl	8007fce <LL_RCC_LSI2_IsReady>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f1      	bne.n	8008754 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008770:	f7ff fbe8 	bl	8007f44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7fc f960 	bl	8004a38 <HAL_GetTick>
 8008778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800877c:	f7fc f95c 	bl	8004a38 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e183      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800878e:	f7ff fbea 	bl	8007f66 <LL_RCC_LSI1_IsReady>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1f1      	bne.n	800877c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d05b      	beq.n	800885c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087a4:	4ba7      	ldr	r3, [pc, #668]	@ (8008a44 <HAL_RCC_OscConfig+0x688>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d114      	bne.n	80087da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80087b0:	f7ff fa78 	bl	8007ca4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087b4:	f7fc f940 	bl	8004a38 <HAL_GetTick>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087bc:	f7fc f93c 	bl	8004a38 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e163      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ce:	4b9d      	ldr	r3, [pc, #628]	@ (8008a44 <HAL_RCC_OscConfig+0x688>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d102      	bne.n	80087e8 <HAL_RCC_OscConfig+0x42c>
 80087e2:	f7ff fb48 	bl	8007e76 <LL_RCC_LSE_Enable>
 80087e6:	e00c      	b.n	8008802 <HAL_RCC_OscConfig+0x446>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d104      	bne.n	80087fa <HAL_RCC_OscConfig+0x43e>
 80087f0:	f7ff fb63 	bl	8007eba <LL_RCC_LSE_EnableBypass>
 80087f4:	f7ff fb3f 	bl	8007e76 <LL_RCC_LSE_Enable>
 80087f8:	e003      	b.n	8008802 <HAL_RCC_OscConfig+0x446>
 80087fa:	f7ff fb4d 	bl	8007e98 <LL_RCC_LSE_Disable>
 80087fe:	f7ff fb6d 	bl	8007edc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d014      	beq.n	8008834 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880a:	f7fc f915 	bl	8004a38 <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008810:	e00a      	b.n	8008828 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008812:	f7fc f911 	bl	8004a38 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008820:	4293      	cmp	r3, r2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e136      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008828:	f7ff fb69 	bl	8007efe <LL_RCC_LSE_IsReady>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0ef      	beq.n	8008812 <HAL_RCC_OscConfig+0x456>
 8008832:	e013      	b.n	800885c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008834:	f7fc f900 	bl	8004a38 <HAL_GetTick>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800883a:	e00a      	b.n	8008852 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800883c:	f7fc f8fc 	bl	8004a38 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800884a:	4293      	cmp	r3, r2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e121      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008852:	f7ff fb54 	bl	8007efe <LL_RCC_LSE_IsReady>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ef      	bne.n	800883c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d02c      	beq.n	80088c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886c:	2b00      	cmp	r3, #0
 800886e:	d014      	beq.n	800889a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008870:	f7ff facd 	bl	8007e0e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008874:	f7fc f8e0 	bl	8004a38 <HAL_GetTick>
 8008878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800887c:	f7fc f8dc 	bl	8004a38 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e103      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800888e:	f7ff fae0 	bl	8007e52 <LL_RCC_HSI48_IsReady>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0f1      	beq.n	800887c <HAL_RCC_OscConfig+0x4c0>
 8008898:	e013      	b.n	80088c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800889a:	f7ff fac9 	bl	8007e30 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889e:	f7fc f8cb 	bl	8004a38 <HAL_GetTick>
 80088a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80088a4:	e008      	b.n	80088b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088a6:	f7fc f8c7 	bl	8004a38 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e0ee      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80088b8:	f7ff facb 	bl	8007e52 <LL_RCC_HSI48_IsReady>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f1      	bne.n	80088a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80e4 	beq.w	8008a94 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088cc:	f7ff fc29 	bl	8008122 <LL_RCC_GetSysClkSource>
 80088d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80088d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	2b02      	cmp	r3, #2
 80088e0:	f040 80b4 	bne.w	8008a4c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0203 	and.w	r2, r3, #3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d123      	bne.n	800893a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d11c      	bne.n	800893a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800890c:	429a      	cmp	r2, r3
 800890e:	d114      	bne.n	800893a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d10d      	bne.n	800893a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008928:	429a      	cmp	r2, r3
 800892a:	d106      	bne.n	800893a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008936:	429a      	cmp	r2, r3
 8008938:	d05d      	beq.n	80089f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b0c      	cmp	r3, #12
 800893e:	d058      	beq.n	80089f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e0a1      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008952:	f7ff fc84 	bl	800825e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008956:	f7fc f86f 	bl	8004a38 <HAL_GetTick>
 800895a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800895e:	f7fc f86b 	bl	8004a38 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e092      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ef      	bne.n	800895e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800897e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	4b30      	ldr	r3, [pc, #192]	@ (8008a48 <HAL_RCC_OscConfig+0x68c>)
 8008986:	4013      	ands	r3, r2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008990:	4311      	orrs	r1, r2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008996:	0212      	lsls	r2, r2, #8
 8008998:	4311      	orrs	r1, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800899e:	4311      	orrs	r1, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80089a4:	4311      	orrs	r1, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80089aa:	430a      	orrs	r2, r1
 80089ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80089b4:	f7ff fc44 	bl	8008240 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089c8:	f7fc f836 	bl	8004a38 <HAL_GetTick>
 80089cc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089ce:	e008      	b.n	80089e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d0:	f7fc f832 	bl	8004a38 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e059      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0ef      	beq.n	80089d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089f0:	e050      	b.n	8008a94 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e04f      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d147      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a04:	f7ff fc1c 	bl	8008240 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a18:	f7fc f80e 	bl	8004a38 <HAL_GetTick>
 8008a1c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a20:	f7fc f80a 	bl	8004a38 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e031      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0ef      	beq.n	8008a20 <HAL_RCC_OscConfig+0x664>
 8008a40:	e028      	b.n	8008a94 <HAL_RCC_OscConfig+0x6d8>
 8008a42:	bf00      	nop
 8008a44:	58000400 	.word	0x58000400
 8008a48:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b0c      	cmp	r3, #12
 8008a50:	d01e      	beq.n	8008a90 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a52:	f7ff fc04 	bl	800825e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a56:	f7fb ffef 	bl	8004a38 <HAL_GetTick>
 8008a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a5c:	e008      	b.n	8008a70 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a5e:	f7fb ffeb 	bl	8004a38 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d901      	bls.n	8008a70 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e012      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1ef      	bne.n	8008a5e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a88:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <HAL_RCC_OscConfig+0x6e4>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	60cb      	str	r3, [r1, #12]
 8008a8e:	e001      	b.n	8008a94 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3734      	adds	r7, #52	@ 0x34
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd90      	pop	{r4, r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	eefefffc 	.word	0xeefefffc

08008aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e12d      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab8:	4b98      	ldr	r3, [pc, #608]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d91b      	bls.n	8008afe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac6:	4b95      	ldr	r3, [pc, #596]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f023 0207 	bic.w	r2, r3, #7
 8008ace:	4993      	ldr	r1, [pc, #588]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad6:	f7fb ffaf 	bl	8004a38 <HAL_GetTick>
 8008ada:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008ade:	f7fb ffab 	bl	8004a38 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e111      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af0:	4b8a      	ldr	r3, [pc, #552]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d1ef      	bne.n	8008ade <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fb13 	bl	800813a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b14:	f7fb ff90 	bl	8004a38 <HAL_GetTick>
 8008b18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b1c:	f7fb ff8c 	bl	8004a38 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e0f2      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008b2e:	f7ff fbe8 	bl	8008302 <LL_RCC_IsActiveFlag_HPRE>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f1      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff fb0a 	bl	8008162 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b4e:	f7fb ff73 	bl	8004a38 <HAL_GetTick>
 8008b52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008b54:	e008      	b.n	8008b68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b56:	f7fb ff6f 	bl	8004a38 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e0d5      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008b68:	f7ff fbdd 	bl	8008326 <LL_RCC_IsActiveFlag_C2HPRE>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f1      	beq.n	8008b56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d016      	beq.n	8008bac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fb03 	bl	800818e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008b88:	f7fb ff56 	bl	8004a38 <HAL_GetTick>
 8008b8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008b90:	f7fb ff52 	bl	8004a38 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e0b8      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008ba2:	f7ff fbd3 	bl	800834c <LL_RCC_IsActiveFlag_SHDHPRE>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0f1      	beq.n	8008b90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d016      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fafd 	bl	80081bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008bc2:	f7fb ff39 	bl	8004a38 <HAL_GetTick>
 8008bc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008bca:	f7fb ff35 	bl	8004a38 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e09b      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008bdc:	f7ff fbc9 	bl	8008372 <LL_RCC_IsActiveFlag_PPRE1>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f1      	beq.n	8008bca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d017      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff faf3 	bl	80081e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008bfe:	f7fb ff1b 	bl	8004a38 <HAL_GetTick>
 8008c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c06:	f7fb ff17 	bl	8004a38 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e07d      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008c18:	f7ff fbbd 	bl	8008396 <LL_RCC_IsActiveFlag_PPRE2>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f1      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d043      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d106      	bne.n	8008c44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008c36:	f7ff f893 	bl	8007d60 <LL_RCC_HSE_IsReady>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d11e      	bne.n	8008c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e067      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d106      	bne.n	8008c5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008c4c:	f7ff fb16 	bl	800827c <LL_RCC_PLL_IsReady>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d113      	bne.n	8008c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e05c      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008c62:	f7ff f9fb 	bl	800805c <LL_RCC_MSI_IsReady>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d108      	bne.n	8008c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e051      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008c70:	f7ff f8a6 	bl	8007dc0 <LL_RCC_HSI_IsReady>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e04a      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fa39 	bl	80080fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c88:	f7fb fed6 	bl	8004a38 <HAL_GetTick>
 8008c8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8e:	e00a      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c90:	f7fb fed2 	bl	8004a38 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e036      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ca6:	f7ff fa3c 	bl	8008122 <LL_RCC_GetSysClkSource>
 8008caa:	4602      	mov	r2, r0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d1ec      	bne.n	8008c90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cb6:	4b19      	ldr	r3, [pc, #100]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d21b      	bcs.n	8008cfc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc4:	4b15      	ldr	r3, [pc, #84]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f023 0207 	bic.w	r2, r3, #7
 8008ccc:	4913      	ldr	r1, [pc, #76]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cd4:	f7fb feb0 	bl	8004a38 <HAL_GetTick>
 8008cd8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cda:	e008      	b.n	8008cee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008cdc:	f7fb feac 	bl	8004a38 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d901      	bls.n	8008cee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e012      	b.n	8008d14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cee:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <HAL_RCC_ClockConfig+0x278>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d1ef      	bne.n	8008cdc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008cfc:	f000 f87e 	bl	8008dfc <HAL_RCC_GetHCLKFreq>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4a07      	ldr	r2, [pc, #28]	@ (8008d20 <HAL_RCC_ClockConfig+0x27c>)
 8008d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008d06:	f7fb fea3 	bl	8004a50 <HAL_GetTickPrio>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fb fe45 	bl	800499c <HAL_InitTick>
 8008d12:	4603      	mov	r3, r0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	58004000 	.word	0x58004000
 8008d20:	2000000c 	.word	0x2000000c

08008d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d2a:	f7ff f9fa 	bl	8008122 <LL_RCC_GetSysClkSource>
 8008d2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008d36:	f7ff f9b6 	bl	80080a6 <LL_RCC_MSI_GetRange>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	091b      	lsrs	r3, r3, #4
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	4a2b      	ldr	r2, [pc, #172]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e04b      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d102      	bne.n	8008d58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008d52:	4b28      	ldr	r3, [pc, #160]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e045      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d10a      	bne.n	8008d74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008d5e:	f7fe ffcf 	bl	8007d00 <LL_RCC_HSE_IsEnabledDiv2>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d102      	bne.n	8008d6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008d68:	4b22      	ldr	r3, [pc, #136]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e03a      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008d6e:	4b22      	ldr	r3, [pc, #136]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e037      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008d74:	f7ff fab9 	bl	80082ea <LL_RCC_PLL_GetMainSource>
 8008d78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d003      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0x64>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d003      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x6a>
 8008d86:	e00d      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008d88:	4b1a      	ldr	r3, [pc, #104]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d8a:	60bb      	str	r3, [r7, #8]
        break;
 8008d8c:	e015      	b.n	8008dba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008d8e:	f7fe ffb7 	bl	8007d00 <LL_RCC_HSE_IsEnabledDiv2>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d102      	bne.n	8008d9e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008d98:	4b16      	ldr	r3, [pc, #88]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d9a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008d9c:	e00d      	b.n	8008dba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008d9e:	4b16      	ldr	r3, [pc, #88]	@ (8008df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008da0:	60bb      	str	r3, [r7, #8]
        break;
 8008da2:	e00a      	b.n	8008dba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008da4:	f7ff f97f 	bl	80080a6 <LL_RCC_MSI_GetRange>
 8008da8:	4603      	mov	r3, r0
 8008daa:	091b      	lsrs	r3, r3, #4
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	4a0f      	ldr	r2, [pc, #60]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db6:	60bb      	str	r3, [r7, #8]
        break;
 8008db8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008dba:	f7ff fa71 	bl	80082a0 <LL_RCC_PLL_GetN>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	fb03 f402 	mul.w	r4, r3, r2
 8008dc6:	f7ff fa84 	bl	80082d2 <LL_RCC_PLL_GetDivider>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	3301      	adds	r3, #1
 8008dd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8008dd4:	f7ff fa71 	bl	80082ba <LL_RCC_PLL_GetR>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	0f5b      	lsrs	r3, r3, #29
 8008ddc:	3301      	adds	r3, #1
 8008dde:	fbb4 f3f3 	udiv	r3, r4, r3
 8008de2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008de4:	68fb      	ldr	r3, [r7, #12]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd90      	pop	{r4, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	080190d0 	.word	0x080190d0
 8008df4:	00f42400 	.word	0x00f42400
 8008df8:	01e84800 	.word	0x01e84800

08008dfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dfc:	b598      	push	{r3, r4, r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008e00:	f7ff ff90 	bl	8008d24 <HAL_RCC_GetSysClockFreq>
 8008e04:	4604      	mov	r4, r0
 8008e06:	f7ff fa01 	bl	800820c <LL_RCC_GetAHBPrescaler>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	4a03      	ldr	r2, [pc, #12]	@ (8008e20 <HAL_RCC_GetHCLKFreq+0x24>)
 8008e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd98      	pop	{r3, r4, r7, pc}
 8008e20:	08019090 	.word	0x08019090

08008e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008e24:	b590      	push	{r4, r7, lr}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008e30:	d903      	bls.n	8008e3a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008e32:	4b15      	ldr	r3, [pc, #84]	@ (8008e88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e007      	b.n	8008e4a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	f003 030f 	and.w	r3, r3, #15
 8008e42:	4a11      	ldr	r2, [pc, #68]	@ (8008e88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008e4a:	f7ff f9eb 	bl	8008224 <LL_RCC_GetAHB4Prescaler>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	4a0d      	ldr	r2, [pc, #52]	@ (8008e8c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e62:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4a0a      	ldr	r2, [pc, #40]	@ (8008e90 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	0c9c      	lsrs	r4, r3, #18
 8008e6e:	f7fe ff29 	bl	8007cc4 <HAL_PWREx_GetVoltageRange>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4619      	mov	r1, r3
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f80c 	bl	8008e94 <RCC_SetFlashLatency>
 8008e7c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd90      	pop	{r4, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	080190d0 	.word	0x080190d0
 8008e8c:	08019090 	.word	0x08019090
 8008e90:	431bde83 	.word	0x431bde83

08008e94 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b093      	sub	sp, #76	@ 0x4c
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008e9e:	4b37      	ldr	r3, [pc, #220]	@ (8008f7c <RCC_SetFlashLatency+0xe8>)
 8008ea0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008eaa:	4a35      	ldr	r2, [pc, #212]	@ (8008f80 <RCC_SetFlashLatency+0xec>)
 8008eac:	f107 031c 	add.w	r3, r7, #28
 8008eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008eb6:	4b33      	ldr	r3, [pc, #204]	@ (8008f84 <RCC_SetFlashLatency+0xf0>)
 8008eb8:	f107 040c 	add.w	r4, r7, #12
 8008ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ecc:	d11a      	bne.n	8008f04 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008ece:	2300      	movs	r3, #0
 8008ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ed2:	e013      	b.n	8008efc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	3348      	adds	r3, #72	@ 0x48
 8008eda:	443b      	add	r3, r7
 8008edc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d807      	bhi.n	8008ef6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	3348      	adds	r3, #72	@ 0x48
 8008eec:	443b      	add	r3, r7
 8008eee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ef2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008ef4:	e020      	b.n	8008f38 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ef8:	3301      	adds	r3, #1
 8008efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d9e8      	bls.n	8008ed4 <RCC_SetFlashLatency+0x40>
 8008f02:	e019      	b.n	8008f38 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008f04:	2300      	movs	r3, #0
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f08:	e013      	b.n	8008f32 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	3348      	adds	r3, #72	@ 0x48
 8008f10:	443b      	add	r3, r7
 8008f12:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d807      	bhi.n	8008f2c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	3348      	adds	r3, #72	@ 0x48
 8008f22:	443b      	add	r3, r7
 8008f24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008f28:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008f2a:	e005      	b.n	8008f38 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2e:	3301      	adds	r3, #1
 8008f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d9e8      	bls.n	8008f0a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008f38:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <RCC_SetFlashLatency+0xf4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f023 0207 	bic.w	r2, r3, #7
 8008f40:	4911      	ldr	r1, [pc, #68]	@ (8008f88 <RCC_SetFlashLatency+0xf4>)
 8008f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f44:	4313      	orrs	r3, r2
 8008f46:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f48:	f7fb fd76 	bl	8004a38 <HAL_GetTick>
 8008f4c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008f4e:	e008      	b.n	8008f62 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f50:	f7fb fd72 	bl	8004a38 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e007      	b.n	8008f72 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <RCC_SetFlashLatency+0xf4>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d1ef      	bne.n	8008f50 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	374c      	adds	r7, #76	@ 0x4c
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	080179c8 	.word	0x080179c8
 8008f80:	080179d8 	.word	0x080179d8
 8008f84:	080179e4 	.word	0x080179e4
 8008f88:	58004000 	.word	0x58004000

08008f8c <LL_RCC_LSE_IsEnabled>:
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <LL_RCC_LSE_IsEnabled+0x18>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <LL_RCC_LSE_IsEnabled+0x1a>
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_RCC_LSE_IsReady>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d101      	bne.n	8008fc8 <LL_RCC_LSE_IsReady+0x18>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <LL_RCC_LSE_IsReady+0x1a>
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <LL_RCC_SetRFWKPClockSource>:
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fe4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <LL_RCC_SetSMPSClockSource>:
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800900c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900e:	f023 0203 	bic.w	r2, r3, #3
 8009012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4313      	orrs	r3, r2
 800901a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <LL_RCC_SetSMPSPrescaler>:
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800903a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4313      	orrs	r3, r2
 8009042:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <LL_RCC_SetUSARTClockSource>:
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009060:	f023 0203 	bic.w	r2, r3, #3
 8009064:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4313      	orrs	r3, r2
 800906c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <LL_RCC_SetLPUARTClockSource>:
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009090:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4313      	orrs	r3, r2
 8009098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <LL_RCC_SetI2CClockSource>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80090b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	091b      	lsrs	r3, r3, #4
 80090bc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80090c0:	43db      	mvns	r3, r3
 80090c2:	401a      	ands	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80090cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <LL_RCC_SetLPTIMClockSource>:
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80090ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	43db      	mvns	r3, r3
 80090fa:	401a      	ands	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009104:	4313      	orrs	r3, r2
 8009106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <LL_RCC_SetSAIClockSource>:
{
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800911e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009126:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800912a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4313      	orrs	r3, r2
 8009132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <LL_RCC_SetRNGClockSource>:
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800914a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009152:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <LL_RCC_SetCLK48ClockSource>:
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <LL_RCC_SetUSBClockSource>:
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff ffe3 	bl	800916e <LL_RCC_SetCLK48ClockSource>
}
 80091a8:	bf00      	nop
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <LL_RCC_SetADCClockSource>:
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80091b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80091c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <LL_RCC_SetRTCClockSource>:
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80091e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <LL_RCC_GetRTCClockSource>:
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800920c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8009218:	4618      	mov	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <LL_RCC_ForceBackupDomainReset>:
{
 8009222:	b480      	push	{r7}
 8009224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800922a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800922e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009250:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800925c:	bf00      	nop
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <LL_RCC_PLLSAI1_Enable>:
{
 8009266:	b480      	push	{r7}
 8009268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800926a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009278:	6013      	str	r3, [r2, #0]
}
 800927a:	bf00      	nop
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <LL_RCC_PLLSAI1_Disable>:
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80092a2:	b480      	push	{r7}
 80092a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80092a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092b4:	d101      	bne.n	80092ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <LL_APB1_GRP1_ForceReset>:
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80092ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4313      	orrs	r3, r2
 80092dc:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <LL_APB1_GRP1_ReleaseReset>:
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80092f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	43db      	mvns	r3, r3
 80092fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009300:	4013      	ands	r3, r2
 8009302:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009318:	2300      	movs	r3, #0
 800931a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800931c:	2300      	movs	r3, #0
 800931e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	d034      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009330:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009334:	d021      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009336:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800933a:	d81b      	bhi.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800933c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009340:	d01d      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009346:	d815      	bhi.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800934c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009350:	d110      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800935c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009360:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009362:	e00d      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f981 	bl	8009670 <RCCEx_PLLSAI1_ConfigNP>
 800936e:	4603      	mov	r3, r0
 8009370:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009372:	e005      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	77fb      	strb	r3, [r7, #31]
        break;
 8009378:	e002      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800937a:	bf00      	nop
 800937c:	e000      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800937e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009380:	7ffb      	ldrb	r3, [r7, #31]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d105      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff fec3 	bl	8009116 <LL_RCC_SetSAIClockSource>
 8009390:	e001      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009392:	7ffb      	ldrb	r3, [r7, #31]
 8009394:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d046      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80093a2:	f7ff ff31 	bl	8009208 <LL_RCC_GetRTCClockSource>
 80093a6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d03c      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80093b2:	f7fe fc77 	bl	8007ca4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff ff0b 	bl	80091dc <LL_RCC_SetRTCClockSource>
 80093c6:	e02e      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80093c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80093d2:	f7ff ff26 	bl	8009222 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80093d6:	f7ff ff35 	bl	8009244 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80093e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80093f2:	f7ff fdcb 	bl	8008f8c <LL_RCC_LSE_IsEnabled>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d114      	bne.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093fc:	f7fb fb1c 	bl	8004a38 <HAL_GetTick>
 8009400:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009402:	e00b      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009404:	f7fb fb18 	bl	8004a38 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009412:	4293      	cmp	r3, r2
 8009414:	d902      	bls.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	77fb      	strb	r3, [r7, #31]
              break;
 800941a:	e004      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800941c:	f7ff fdc8 	bl	8008fb0 <LL_RCC_LSE_IsReady>
 8009420:	4603      	mov	r3, r0
 8009422:	2b01      	cmp	r3, #1
 8009424:	d1ee      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	77bb      	strb	r3, [r7, #30]
 800942a:	e001      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	7ffb      	ldrb	r3, [r7, #31]
 800942e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fe05 	bl	8009050 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff fe10 	bl	800907c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0310 	and.w	r3, r3, #16
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fe38 	bl	80090e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fe2d 	bl	80090e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fe05 	bl	80090a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff fdfa 	bl	80090a8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d022      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fe68 	bl	800919a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094d2:	d107      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80094d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094e2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094ec:	d10b      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f917 	bl	8009726 <RCCEx_PLLSAI1_ConfigNQ>
 80094f8:	4603      	mov	r3, r0
 80094fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80094fc:	7ffb      	ldrb	r3, [r7, #31]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009502:	7ffb      	ldrb	r3, [r7, #31]
 8009504:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800950e:	2b00      	cmp	r3, #0
 8009510:	d02b      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800951a:	d008      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009524:	d003      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fe05 	bl	8009142 <LL_RCC_SetRNGClockSource>
 8009538:	e00a      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	2000      	movs	r0, #0
 8009546:	f7ff fdfc 	bl	8009142 <LL_RCC_SetRNGClockSource>
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fe0f 	bl	800916e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009554:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009558:	d107      	bne.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800955a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009568:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009572:	2b00      	cmp	r3, #0
 8009574:	d022      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fe18 	bl	80091b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009588:	d107      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800958a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009598:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800959e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095a2:	d10b      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f917 	bl	80097dc <RCCEx_PLLSAI1_ConfigNR>
 80095ae:	4603      	mov	r3, r0
 80095b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80095b2:	7ffb      	ldrb	r3, [r7, #31]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fd01 	bl	8008fd4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d009      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fd20 	bl	8009028 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fd07 	bl	8009000 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80095f2:	7fbb      	ldrb	r3, [r7, #30]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009604:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8009608:	f7ff fe5d 	bl	80092c6 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 800960c:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8009610:	f7ff fe6b 	bl	80092ea <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	431a      	orrs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	041b      	lsls	r3, r3, #16
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800963c:	4a0b      	ldr	r2, [pc, #44]	@ (800966c <HAL_RCCEx_CRSConfig+0x70>)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009642:	4b0a      	ldr	r3, [pc, #40]	@ (800966c <HAL_RCCEx_CRSConfig+0x70>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	4906      	ldr	r1, [pc, #24]	@ (800966c <HAL_RCCEx_CRSConfig+0x70>)
 8009652:	4313      	orrs	r3, r2
 8009654:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009656:	4b05      	ldr	r3, [pc, #20]	@ (800966c <HAL_RCCEx_CRSConfig+0x70>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a04      	ldr	r2, [pc, #16]	@ (800966c <HAL_RCCEx_CRSConfig+0x70>)
 800965c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009660:	6013      	str	r3, [r2, #0]
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40006000 	.word	0x40006000

08009670 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800967c:	f7ff fe02 	bl	8009284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009680:	f7fb f9da 	bl	8004a38 <HAL_GetTick>
 8009684:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009686:	e009      	b.n	800969c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009688:	f7fb f9d6 	bl	8004a38 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d902      	bls.n	800969c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	73fb      	strb	r3, [r7, #15]
      break;
 800969a:	e004      	b.n	80096a6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800969c:	f7ff fe01 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f0      	bne.n	8009688 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d137      	bne.n	800971c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80096ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	021b      	lsls	r3, r3, #8
 80096bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096c0:	4313      	orrs	r3, r2
 80096c2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80096c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096d6:	4313      	orrs	r3, r2
 80096d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80096da:	f7ff fdc4 	bl	8009266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096de:	f7fb f9ab 	bl	8004a38 <HAL_GetTick>
 80096e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80096e4:	e009      	b.n	80096fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096e6:	f7fb f9a7 	bl	8004a38 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d902      	bls.n	80096fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
        break;
 80096f8:	e004      	b.n	8009704 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80096fa:	f7ff fdd2 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b01      	cmp	r3, #1
 8009702:	d1f0      	bne.n	80096e6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d108      	bne.n	800971c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800970a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800970e:	691a      	ldr	r2, [r3, #16]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009718:	4313      	orrs	r3, r2
 800971a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009732:	f7ff fda7 	bl	8009284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009736:	f7fb f97f 	bl	8004a38 <HAL_GetTick>
 800973a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800973c:	e009      	b.n	8009752 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800973e:	f7fb f97b 	bl	8004a38 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d902      	bls.n	8009752 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	73fb      	strb	r3, [r7, #15]
      break;
 8009750:	e004      	b.n	800975c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009752:	f7ff fda6 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f0      	bne.n	800973e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d137      	bne.n	80097d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	021b      	lsls	r3, r3, #8
 8009772:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009776:	4313      	orrs	r3, r2
 8009778:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800977a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800978c:	4313      	orrs	r3, r2
 800978e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009790:	f7ff fd69 	bl	8009266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009794:	f7fb f950 	bl	8004a38 <HAL_GetTick>
 8009798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800979a:	e009      	b.n	80097b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800979c:	f7fb f94c 	bl	8004a38 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d902      	bls.n	80097b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	73fb      	strb	r3, [r7, #15]
        break;
 80097ae:	e004      	b.n	80097ba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80097b0:	f7ff fd77 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d1f0      	bne.n	800979c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d108      	bne.n	80097d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80097c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097c4:	691a      	ldr	r2, [r3, #16]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80097ce:	4313      	orrs	r3, r2
 80097d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80097e8:	f7ff fd4c 	bl	8009284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80097ec:	f7fb f924 	bl	8004a38 <HAL_GetTick>
 80097f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097f2:	e009      	b.n	8009808 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097f4:	f7fb f920 	bl	8004a38 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d902      	bls.n	8009808 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	73fb      	strb	r3, [r7, #15]
      break;
 8009806:	e004      	b.n	8009812 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009808:	f7ff fd4b 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1f0      	bne.n	80097f4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d137      	bne.n	8009888 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800982c:	4313      	orrs	r3, r2
 800982e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009842:	4313      	orrs	r3, r2
 8009844:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009846:	f7ff fd0e 	bl	8009266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984a:	f7fb f8f5 	bl	8004a38 <HAL_GetTick>
 800984e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009850:	e009      	b.n	8009866 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009852:	f7fb f8f1 	bl	8004a38 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d902      	bls.n	8009866 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]
        break;
 8009864:	e004      	b.n	8009870 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009866:	f7ff fd1c 	bl	80092a2 <LL_RCC_PLLSAI1_IsReady>
 800986a:	4603      	mov	r3, r0
 800986c:	2b01      	cmp	r3, #1
 800986e:	d1f0      	bne.n	8009852 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d108      	bne.n	8009888 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009884:	4313      	orrs	r3, r2
 8009886:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e027      	b.n	80098f4 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7a5b      	ldrb	r3, [r3, #9]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d105      	bne.n	80098ba <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fa fdcb 	bl	8004450 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f023 0120 	bic.w	r1, r3, #32
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0204 	orr.w	r2, r2, #4
 80098e4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2210      	movs	r2, #16
 800991e:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009920:	2301      	movs	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e009      	b.n	800993a <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2208      	movs	r2, #8
 8009934:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009936:	2301      	movs	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10b      	bne.n	8009958 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2204      	movs	r2, #4
 8009944:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f837 	bl	80099ba <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009954:	605a      	str	r2, [r3, #4]

    return;
 8009956:	e022      	b.n	800999e <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01d      	beq.n	800999e <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0208 	bic.w	r2, r2, #8
 8009970:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7a5b      	ldrb	r3, [r3, #9]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b04      	cmp	r3, #4
 8009984:	d00b      	beq.n	800999e <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f803 	bl	80099a4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b083      	sub	sp, #12
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80099c2:	bf00      	nop
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
	...

080099d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e09f      	b.n	8009b22 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fa fd5c 	bl	80044b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a04:	4b49      	ldr	r3, [pc, #292]	@ (8009b2c <HAL_RTC_Init+0x15c>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d07e      	beq.n	8009b0e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	22ca      	movs	r2, #202	@ 0xca
 8009a16:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2253      	movs	r2, #83	@ 0x53
 8009a1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8ab 	bl	8009b7c <RTC_EnterInitMode>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	22ff      	movs	r2, #255	@ 0xff
 8009a32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2204      	movs	r2, #4
 8009a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	e067      	b.n	8009b12 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a54:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6899      	ldr	r1, [r3, #8]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	431a      	orrs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	68d2      	ldr	r2, [r2, #12]
 8009a7c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6919      	ldr	r1, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	041a      	lsls	r2, r3, #16
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009aa0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0203 	bic.w	r2, r2, #3
 8009ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	69da      	ldr	r2, [r3, #28]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d113      	bne.n	8009b00 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f829 	bl	8009b30 <HAL_RTC_WaitForSynchro>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00d      	beq.n	8009b00 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	22ff      	movs	r2, #255	@ 0xff
 8009aea:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2204      	movs	r2, #4
 8009af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e010      	b.n	8009b22 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	22ff      	movs	r2, #255	@ 0xff
 8009b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
 8009b0c:	e001      	b.n	8009b12 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	40002800 	.word	0x40002800

08009b30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009b46:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009b48:	f7fa ff76 	bl	8004a38 <HAL_GetTick>
 8009b4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b4e:	e009      	b.n	8009b64 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b50:	f7fa ff72 	bl	8004a38 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b5e:	d901      	bls.n	8009b64 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e007      	b.n	8009b74 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0ee      	beq.n	8009b50 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d119      	bne.n	8009bc6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b9c:	f7fa ff4c 	bl	8004a38 <HAL_GetTick>
 8009ba0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ba2:	e009      	b.n	8009bb8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ba4:	f7fa ff48 	bl	8004a38 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bb2:	d901      	bls.n	8009bb8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e007      	b.n	8009bc8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0ee      	beq.n	8009ba4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e0a8      	b.n	8009d3c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	22ca      	movs	r2, #202	@ 0xca
 8009c00:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2253      	movs	r2, #83	@ 0x53
 8009c08:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d020      	beq.n	8009c5a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009c18:	f7fa ff0e 	bl	8004a38 <HAL_GetTick>
 8009c1c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009c1e:	e015      	b.n	8009c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c20:	f7fa ff0a 	bl	8004a38 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c2e:	d90d      	bls.n	8009c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	22ff      	movs	r2, #255	@ 0xff
 8009c36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e077      	b.n	8009d3c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e2      	bne.n	8009c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c68:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009c7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009c7c:	f7fa fedc 	bl	8004a38 <HAL_GetTick>
 8009c80:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009c82:	e015      	b.n	8009cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c84:	f7fa fed8 	bl	8004a38 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c92:	d90d      	bls.n	8009cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	22ff      	movs	r2, #255	@ 0xff
 8009c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2203      	movs	r2, #3
 8009ca0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e045      	b.n	8009d3c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0e2      	beq.n	8009c84 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 0207 	bic.w	r2, r2, #7
 8009cd4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6899      	ldr	r1, [r3, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009ce6:	4b17      	ldr	r3, [pc, #92]	@ (8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cec:	4a15      	ldr	r2, [pc, #84]	@ (8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cf2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009cf6:	4b13      	ldr	r3, [pc, #76]	@ (8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a12      	ldr	r2, [pc, #72]	@ (8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d00:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d10:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d20:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	22ff      	movs	r2, #255	@ 0xff
 8009d28:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	58000800 	.word	0x58000800

08009d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e095      	b.n	8009e86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d108      	bne.n	8009d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d6a:	d009      	beq.n	8009d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	61da      	str	r2, [r3, #28]
 8009d72:	e005      	b.n	8009d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fa fbbe 	bl	800451c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009db6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009dc0:	d902      	bls.n	8009dc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e002      	b.n	8009dce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009dcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009dd6:	d007      	beq.n	8009de8 <HAL_SPI_Init+0xa0>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009de0:	d002      	beq.n	8009de8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e2a:	ea42 0103 	orr.w	r1, r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	0c1b      	lsrs	r3, r3, #16
 8009e44:	f003 0204 	and.w	r2, r3, #4
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	431a      	orrs	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009e64:	ea42 0103 	orr.w	r1, r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	603b      	str	r3, [r7, #0]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_SPI_Transmit+0x22>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e15f      	b.n	800a170 <HAL_SPI_Transmit+0x2e2>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009eb8:	f7fa fdbe 	bl	8004a38 <HAL_GetTick>
 8009ebc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d002      	beq.n	8009ed4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ed2:	e148      	b.n	800a166 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <HAL_SPI_Transmit+0x52>
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ee4:	e13f      	b.n	800a166 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2203      	movs	r2, #3
 8009eea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	88fa      	ldrh	r2, [r7, #6]
 8009efe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	88fa      	ldrh	r2, [r7, #6]
 8009f04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f30:	d10f      	bne.n	8009f52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5c:	2b40      	cmp	r3, #64	@ 0x40
 8009f5e:	d007      	beq.n	8009f70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f78:	d94f      	bls.n	800a01a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <HAL_SPI_Transmit+0xfa>
 8009f82:	8afb      	ldrh	r3, [r7, #22]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d142      	bne.n	800a00e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8c:	881a      	ldrh	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f98:	1c9a      	adds	r2, r3, #2
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009fac:	e02f      	b.n	800a00e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d112      	bne.n	8009fe2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc0:	881a      	ldrh	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fcc:	1c9a      	adds	r2, r3, #2
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009fe0:	e015      	b.n	800a00e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fe2:	f7fa fd29 	bl	8004a38 <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d803      	bhi.n	8009ffa <HAL_SPI_Transmit+0x16c>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d102      	bne.n	800a000 <HAL_SPI_Transmit+0x172>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d106      	bne.n	800a00e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a00c:	e0ab      	b.n	800a166 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a012:	b29b      	uxth	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1ca      	bne.n	8009fae <HAL_SPI_Transmit+0x120>
 800a018:	e080      	b.n	800a11c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <HAL_SPI_Transmit+0x19a>
 800a022:	8afb      	ldrh	r3, [r7, #22]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d174      	bne.n	800a112 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d912      	bls.n	800a058 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a036:	881a      	ldrh	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a042:	1c9a      	adds	r2, r3, #2
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	3b02      	subs	r3, #2
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a056:	e05c      	b.n	800a112 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	7812      	ldrb	r2, [r2, #0]
 800a064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a07e:	e048      	b.n	800a112 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d12b      	bne.n	800a0e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a092:	b29b      	uxth	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	d912      	bls.n	800a0be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09c:	881a      	ldrh	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a8:	1c9a      	adds	r2, r3, #2
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	3b02      	subs	r3, #2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a0bc:	e029      	b.n	800a112 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	330c      	adds	r3, #12
 800a0c8:	7812      	ldrb	r2, [r2, #0]
 800a0ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a0e4:	e015      	b.n	800a112 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0e6:	f7fa fca7 	bl	8004a38 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d803      	bhi.n	800a0fe <HAL_SPI_Transmit+0x270>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d102      	bne.n	800a104 <HAL_SPI_Transmit+0x276>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a110:	e029      	b.n	800a166 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a116:	b29b      	uxth	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1b1      	bne.n	800a080 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fb69 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2220      	movs	r2, #32
 800a130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	77fb      	strb	r3, [r7, #31]
 800a15c:	e003      	b.n	800a166 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	@ 0x28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a186:	2301      	movs	r3, #1
 800a188:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a196:	2b01      	cmp	r3, #1
 800a198:	d101      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x26>
 800a19a:	2302      	movs	r3, #2
 800a19c:	e20a      	b.n	800a5b4 <HAL_SPI_TransmitReceive+0x43c>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1a6:	f7fa fc47 	bl	8004a38 <HAL_GetTick>
 800a1aa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a1be:	887b      	ldrh	r3, [r7, #2]
 800a1c0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1c2:	7efb      	ldrb	r3, [r7, #27]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d00e      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x6e>
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1ce:	d106      	bne.n	800a1de <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <HAL_SPI_TransmitReceive+0x66>
 800a1d8:	7efb      	ldrb	r3, [r7, #27]
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d003      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a1e4:	e1e0      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <HAL_SPI_TransmitReceive+0x80>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <HAL_SPI_TransmitReceive+0x80>
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a1fe:	e1d3      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d003      	beq.n	800a214 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2205      	movs	r2, #5
 800a210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	887a      	ldrh	r2, [r7, #2]
 800a224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	887a      	ldrh	r2, [r7, #2]
 800a22c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	887a      	ldrh	r2, [r7, #2]
 800a23a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	887a      	ldrh	r2, [r7, #2]
 800a240:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a256:	d802      	bhi.n	800a25e <HAL_SPI_TransmitReceive+0xe6>
 800a258:	8a3b      	ldrh	r3, [r7, #16]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d908      	bls.n	800a270 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	e007      	b.n	800a280 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a27e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28a:	2b40      	cmp	r3, #64	@ 0x40
 800a28c:	d007      	beq.n	800a29e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a29c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2a6:	f240 8081 	bls.w	800a3ac <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SPI_TransmitReceive+0x140>
 800a2b2:	8a7b      	ldrh	r3, [r7, #18]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d16d      	bne.n	800a394 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2bc:	881a      	ldrh	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c8:	1c9a      	adds	r2, r3, #2
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2dc:	e05a      	b.n	800a394 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d11b      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x1ac>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <HAL_SPI_TransmitReceive+0x1ac>
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d113      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a300:	881a      	ldrh	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30c:	1c9a      	adds	r2, r3, #2
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a316:	b29b      	uxth	r3, r3
 800a318:	3b01      	subs	r3, #1
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d11c      	bne.n	800a36c <HAL_SPI_TransmitReceive+0x1f4>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d016      	beq.n	800a36c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a348:	b292      	uxth	r2, r2
 800a34a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a350:	1c9a      	adds	r2, r3, #2
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a368:	2301      	movs	r3, #1
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a36c:	f7fa fb64 	bl	8004a38 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a378:	429a      	cmp	r2, r3
 800a37a:	d80b      	bhi.n	800a394 <HAL_SPI_TransmitReceive+0x21c>
 800a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a382:	d007      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a392:	e109      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d19f      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x166>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d199      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x166>
 800a3aa:	e0e3      	b.n	800a574 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <HAL_SPI_TransmitReceive+0x244>
 800a3b4:	8a7b      	ldrh	r3, [r7, #18]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	f040 80cf 	bne.w	800a55a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d912      	bls.n	800a3ec <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ca:	881a      	ldrh	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	3b02      	subs	r3, #2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a3ea:	e0b6      	b.n	800a55a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	7812      	ldrb	r2, [r2, #0]
 800a3f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a408:	b29b      	uxth	r3, r3
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a412:	e0a2      	b.n	800a55a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d134      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x314>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d02f      	beq.n	800a48c <HAL_SPI_TransmitReceive+0x314>
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d12c      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d912      	bls.n	800a462 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a440:	881a      	ldrh	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44c:	1c9a      	adds	r2, r3, #2
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b02      	subs	r3, #2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a460:	e012      	b.n	800a488 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	330c      	adds	r3, #12
 800a46c:	7812      	ldrb	r2, [r2, #0]
 800a46e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a47e:	b29b      	uxth	r3, r3
 800a480:	3b01      	subs	r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b01      	cmp	r3, #1
 800a498:	d148      	bne.n	800a52c <HAL_SPI_TransmitReceive+0x3b4>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d042      	beq.n	800a52c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d923      	bls.n	800a4fa <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4bc:	b292      	uxth	r2, r2
 800a4be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c4:	1c9a      	adds	r2, r3, #2
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b02      	subs	r3, #2
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d81f      	bhi.n	800a528 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	e016      	b.n	800a528 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f103 020c 	add.w	r2, r3, #12
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a506:	7812      	ldrb	r2, [r2, #0]
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	b29a      	uxth	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a528:	2301      	movs	r3, #1
 800a52a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a52c:	f7fa fa84 	bl	8004a38 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a538:	429a      	cmp	r2, r3
 800a53a:	d803      	bhi.n	800a544 <HAL_SPI_TransmitReceive+0x3cc>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a542:	d102      	bne.n	800a54a <HAL_SPI_TransmitReceive+0x3d2>
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	2b00      	cmp	r3, #0
 800a548:	d107      	bne.n	800a55a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a558:	e026      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	f47f af57 	bne.w	800a414 <HAL_SPI_TransmitReceive+0x29c>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f af50 	bne.w	800a414 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a574:	69fa      	ldr	r2, [r7, #28]
 800a576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f93d 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2220      	movs	r2, #32
 800a58e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a59e:	e003      	b.n	800a5a8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a5b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3728      	adds	r7, #40	@ 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a5cc:	f7fa fa34 	bl	8004a38 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5dc:	f7fa fa2c 	bl	8004a38 <HAL_GetTick>
 800a5e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5e2:	4b39      	ldr	r3, [pc, #228]	@ (800a6c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	015b      	lsls	r3, r3, #5
 800a5e8:	0d1b      	lsrs	r3, r3, #20
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	fb02 f303 	mul.w	r3, r2, r3
 800a5f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5f2:	e054      	b.n	800a69e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fa:	d050      	beq.n	800a69e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5fc:	f7fa fa1c 	bl	8004a38 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d902      	bls.n	800a612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d13d      	bne.n	800a68e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a62a:	d111      	bne.n	800a650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a634:	d004      	beq.n	800a640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a63e:	d107      	bne.n	800a650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a64e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a658:	d10f      	bne.n	800a67a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e017      	b.n	800a6be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	bf0c      	ite	eq
 800a6ae:	2301      	moveq	r3, #1
 800a6b0:	2300      	movne	r3, #0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d19b      	bne.n	800a5f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	2000000c 	.word	0x2000000c

0800a6cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	@ 0x28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a6de:	f7fa f9ab 	bl	8004a38 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	1a9b      	subs	r3, r3, r2
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a6ee:	f7fa f9a3 	bl	8004a38 <HAL_GetTick>
 800a6f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a6fc:	4b3d      	ldr	r3, [pc, #244]	@ (800a7f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	00da      	lsls	r2, r3, #3
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	0d1b      	lsrs	r3, r3, #20
 800a70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a70e:	fb02 f303 	mul.w	r3, r2, r3
 800a712:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a714:	e060      	b.n	800a7d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a71c:	d107      	bne.n	800a72e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d050      	beq.n	800a7d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a736:	f7fa f97f 	bl	8004a38 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a742:	429a      	cmp	r2, r3
 800a744:	d902      	bls.n	800a74c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d13d      	bne.n	800a7c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a75a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a764:	d111      	bne.n	800a78a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a76e:	d004      	beq.n	800a77a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a778:	d107      	bne.n	800a78a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a792:	d10f      	bne.n	800a7b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a7b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e010      	b.n	800a7ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d196      	bne.n	800a716 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3728      	adds	r7, #40	@ 0x28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2000000c 	.word	0x2000000c

0800a7f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff ff5b 	bl	800a6cc <SPI_WaitFifoStateUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a820:	f043 0220 	orr.w	r2, r3, #32
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e027      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	2180      	movs	r1, #128	@ 0x80
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff fec0 	bl	800a5bc <SPI_WaitFlagStateUntilTimeout>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a846:	f043 0220 	orr.w	r2, r3, #32
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e014      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff ff34 	bl	800a6cc <SPI_WaitFifoStateUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d007      	beq.n	800a87a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a86e:	f043 0220 	orr.w	r2, r3, #32
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e000      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e049      	b.n	800a92a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7f9 fe66 	bl	800457c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f000 fa7c 	bl	800adc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b01      	cmp	r3, #1
 800a946:	d001      	beq.n	800a94c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e036      	b.n	800a9ba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2202      	movs	r2, #2
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a17      	ldr	r2, [pc, #92]	@ (800a9c8 <HAL_TIM_Base_Start_IT+0x94>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d004      	beq.n	800a978 <HAL_TIM_Base_Start_IT+0x44>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a976:	d115      	bne.n	800a9a4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	4b13      	ldr	r3, [pc, #76]	@ (800a9cc <HAL_TIM_Base_Start_IT+0x98>)
 800a980:	4013      	ands	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b06      	cmp	r3, #6
 800a988:	d015      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0x82>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a990:	d011      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0201 	orr.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a2:	e008      	b.n	800a9b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0201 	orr.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e000      	b.n	800a9b8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	40012c00 	.word	0x40012c00
 800a9cc:	00010007 	.word	0x00010007

0800a9d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f003 0302 	and.w	r3, r3, #2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d020      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01b      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0202 	mvn.w	r2, #2
 800aa04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9b2 	bl	800ad84 <HAL_TIM_IC_CaptureCallback>
 800aa20:	e005      	b.n	800aa2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f9a4 	bl	800ad70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9b5 	bl	800ad98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f003 0304 	and.w	r3, r3, #4
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d020      	beq.n	800aa80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01b      	beq.n	800aa80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f06f 0204 	mvn.w	r2, #4
 800aa50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2202      	movs	r2, #2
 800aa56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f98c 	bl	800ad84 <HAL_TIM_IC_CaptureCallback>
 800aa6c:	e005      	b.n	800aa7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f97e 	bl	800ad70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f98f 	bl	800ad98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f003 0308 	and.w	r3, r3, #8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d020      	beq.n	800aacc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01b      	beq.n	800aacc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f06f 0208 	mvn.w	r2, #8
 800aa9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2204      	movs	r2, #4
 800aaa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f966 	bl	800ad84 <HAL_TIM_IC_CaptureCallback>
 800aab8:	e005      	b.n	800aac6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f958 	bl	800ad70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f969 	bl	800ad98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d020      	beq.n	800ab18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01b      	beq.n	800ab18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0210 	mvn.w	r2, #16
 800aae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2208      	movs	r2, #8
 800aaee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f940 	bl	800ad84 <HAL_TIM_IC_CaptureCallback>
 800ab04:	e005      	b.n	800ab12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f932 	bl	800ad70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f943 	bl	800ad98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00c      	beq.n	800ab3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d007      	beq.n	800ab3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f06f 0201 	mvn.w	r2, #1
 800ab34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f9 feb6 	bl	80048a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d104      	bne.n	800ab50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00c      	beq.n	800ab6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 faa1 	bl	800b0ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa99 	bl	800b0c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00c      	beq.n	800abb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800abaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f8fd 	bl	800adac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00c      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f06f 0220 	mvn.w	r2, #32
 800abce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa61 	bl	800b098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_ConfigClockSource+0x1c>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e0b6      	b.n	800ad68 <HAL_TIM_ConfigClockSource+0x18a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ac18:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ac1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac36:	d03e      	beq.n	800acb6 <HAL_TIM_ConfigClockSource+0xd8>
 800ac38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac3c:	f200 8087 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac44:	f000 8086 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0x176>
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac4c:	d87f      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac4e:	2b70      	cmp	r3, #112	@ 0x70
 800ac50:	d01a      	beq.n	800ac88 <HAL_TIM_ConfigClockSource+0xaa>
 800ac52:	2b70      	cmp	r3, #112	@ 0x70
 800ac54:	d87b      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac56:	2b60      	cmp	r3, #96	@ 0x60
 800ac58:	d050      	beq.n	800acfc <HAL_TIM_ConfigClockSource+0x11e>
 800ac5a:	2b60      	cmp	r3, #96	@ 0x60
 800ac5c:	d877      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac5e:	2b50      	cmp	r3, #80	@ 0x50
 800ac60:	d03c      	beq.n	800acdc <HAL_TIM_ConfigClockSource+0xfe>
 800ac62:	2b50      	cmp	r3, #80	@ 0x50
 800ac64:	d873      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac66:	2b40      	cmp	r3, #64	@ 0x40
 800ac68:	d058      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x13e>
 800ac6a:	2b40      	cmp	r3, #64	@ 0x40
 800ac6c:	d86f      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac6e:	2b30      	cmp	r3, #48	@ 0x30
 800ac70:	d064      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0x15e>
 800ac72:	2b30      	cmp	r3, #48	@ 0x30
 800ac74:	d86b      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d060      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0x15e>
 800ac7a:	2b20      	cmp	r3, #32
 800ac7c:	d867      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d05c      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0x15e>
 800ac82:	2b10      	cmp	r3, #16
 800ac84:	d05a      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0x15e>
 800ac86:	e062      	b.n	800ad4e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac98:	f000 f97e 	bl	800af98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800acaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	609a      	str	r2, [r3, #8]
      break;
 800acb4:	e04f      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800acc6:	f000 f967 	bl	800af98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800acd8:	609a      	str	r2, [r3, #8]
      break;
 800acda:	e03c      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ace8:	461a      	mov	r2, r3
 800acea:	f000 f8d9 	bl	800aea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2150      	movs	r1, #80	@ 0x50
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f932 	bl	800af5e <TIM_ITRx_SetConfig>
      break;
 800acfa:	e02c      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad08:	461a      	mov	r2, r3
 800ad0a:	f000 f8f8 	bl	800aefe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2160      	movs	r1, #96	@ 0x60
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f922 	bl	800af5e <TIM_ITRx_SetConfig>
      break;
 800ad1a:	e01c      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f000 f8b9 	bl	800aea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2140      	movs	r1, #64	@ 0x40
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f912 	bl	800af5e <TIM_ITRx_SetConfig>
      break;
 800ad3a:	e00c      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f000 f909 	bl	800af5e <TIM_ITRx_SetConfig>
      break;
 800ad4c:	e003      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
      break;
 800ad52:	e000      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ad54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a30      	ldr	r2, [pc, #192]	@ (800ae94 <TIM_Base_SetConfig+0xd4>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d003      	beq.n	800ade0 <TIM_Base_SetConfig+0x20>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adde:	d108      	bne.n	800adf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a27      	ldr	r2, [pc, #156]	@ (800ae94 <TIM_Base_SetConfig+0xd4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00b      	beq.n	800ae12 <TIM_Base_SetConfig+0x52>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae00:	d007      	beq.n	800ae12 <TIM_Base_SetConfig+0x52>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a24      	ldr	r2, [pc, #144]	@ (800ae98 <TIM_Base_SetConfig+0xd8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d003      	beq.n	800ae12 <TIM_Base_SetConfig+0x52>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a23      	ldr	r2, [pc, #140]	@ (800ae9c <TIM_Base_SetConfig+0xdc>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d108      	bne.n	800ae24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a12      	ldr	r2, [pc, #72]	@ (800ae94 <TIM_Base_SetConfig+0xd4>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d007      	beq.n	800ae60 <TIM_Base_SetConfig+0xa0>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a11      	ldr	r2, [pc, #68]	@ (800ae98 <TIM_Base_SetConfig+0xd8>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d003      	beq.n	800ae60 <TIM_Base_SetConfig+0xa0>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a10      	ldr	r2, [pc, #64]	@ (800ae9c <TIM_Base_SetConfig+0xdc>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d103      	bne.n	800ae68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d105      	bne.n	800ae86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f023 0201 	bic.w	r2, r3, #1
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	611a      	str	r2, [r3, #16]
  }
}
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	40012c00 	.word	0x40012c00
 800ae98:	40014400 	.word	0x40014400
 800ae9c:	40014800 	.word	0x40014800

0800aea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	f023 0201 	bic.w	r2, r3, #1
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aeca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	011b      	lsls	r3, r3, #4
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f023 030a 	bic.w	r3, r3, #10
 800aedc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	621a      	str	r2, [r3, #32]
}
 800aef2:	bf00      	nop
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aefe:	b480      	push	{r7}
 800af00:	b087      	sub	sp, #28
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	f023 0210 	bic.w	r2, r3, #16
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	031b      	lsls	r3, r3, #12
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	4313      	orrs	r3, r2
 800af32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	621a      	str	r2, [r3, #32]
}
 800af52:	bf00      	nop
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	f043 0307 	orr.w	r3, r3, #7
 800af84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	609a      	str	r2, [r3, #8]
}
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	021a      	lsls	r2, r3, #8
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afec:	2302      	movs	r3, #2
 800afee:	e04a      	b.n	800b086 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a1f      	ldr	r2, [pc, #124]	@ (800b094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d108      	bne.n	800b02c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a12      	ldr	r2, [pc, #72]	@ (800b094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d004      	beq.n	800b05a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b058:	d10c      	bne.n	800b074 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	40012c00 	.word	0x40012c00

0800b098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	@ 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d167      	bne.n	800b1bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_UART_Transmit_DMA+0x24>
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e060      	b.n	800b1be <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	88fa      	ldrh	r2, [r7, #6]
 800b10e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2221      	movs	r2, #33	@ 0x21
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d028      	beq.n	800b17c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b12e:	4a26      	ldr	r2, [pc, #152]	@ (800b1c8 <HAL_UART_Transmit_DMA+0xf4>)
 800b130:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b136:	4a25      	ldr	r2, [pc, #148]	@ (800b1cc <HAL_UART_Transmit_DMA+0xf8>)
 800b138:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b13e:	4a24      	ldr	r2, [pc, #144]	@ (800b1d0 <HAL_UART_Transmit_DMA+0xfc>)
 800b140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b146:	2200      	movs	r2, #0
 800b148:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b152:	4619      	mov	r1, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3328      	adds	r3, #40	@ 0x28
 800b15a:	461a      	mov	r2, r3
 800b15c:	88fb      	ldrh	r3, [r7, #6]
 800b15e:	f7f9 fe28 	bl	8004db2 <HAL_DMA_Start_IT>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d009      	beq.n	800b17c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2210      	movs	r2, #16
 800b16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2220      	movs	r2, #32
 800b174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e020      	b.n	800b1be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2240      	movs	r2, #64	@ 0x40
 800b182:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3308      	adds	r3, #8
 800b18a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	e853 3f00 	ldrex	r3, [r3]
 800b192:	613b      	str	r3, [r7, #16]
   return(result);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a4:	623a      	str	r2, [r7, #32]
 800b1a6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a8:	69f9      	ldr	r1, [r7, #28]
 800b1aa:	6a3a      	ldr	r2, [r7, #32]
 800b1ac:	e841 2300 	strex	r3, r2, [r1]
 800b1b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e5      	bne.n	800b184 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e000      	b.n	800b1be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
  }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3728      	adds	r7, #40	@ 0x28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800b9ab 	.word	0x0800b9ab
 800b1cc:	0800ba45 	.word	0x0800ba45
 800b1d0:	0800ba61 	.word	0x0800ba61

0800b1d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b0ba      	sub	sp, #232	@ 0xe8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b202:	4013      	ands	r3, r2
 800b204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d11b      	bne.n	800b248 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b214:	f003 0320 	and.w	r3, r3, #32
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d015      	beq.n	800b248 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	d105      	bne.n	800b234 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b22c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d009      	beq.n	800b248 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 82e3 	beq.w	800b804 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
      }
      return;
 800b246:	e2dd      	b.n	800b804 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 8123 	beq.w	800b498 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b252:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b256:	4b8d      	ldr	r3, [pc, #564]	@ (800b48c <HAL_UART_IRQHandler+0x2b8>)
 800b258:	4013      	ands	r3, r2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d106      	bne.n	800b26c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b25e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b262:	4b8b      	ldr	r3, [pc, #556]	@ (800b490 <HAL_UART_IRQHandler+0x2bc>)
 800b264:	4013      	ands	r3, r2
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 8116 	beq.w	800b498 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d011      	beq.n	800b29c <HAL_UART_IRQHandler+0xc8>
 800b278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b27c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00b      	beq.n	800b29c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2201      	movs	r2, #1
 800b28a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b292:	f043 0201 	orr.w	r2, r3, #1
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d011      	beq.n	800b2cc <HAL_UART_IRQHandler+0xf8>
 800b2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c2:	f043 0204 	orr.w	r2, r3, #4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d011      	beq.n	800b2fc <HAL_UART_IRQHandler+0x128>
 800b2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2204      	movs	r2, #4
 800b2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2f2:	f043 0202 	orr.w	r2, r3, #2
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b00      	cmp	r3, #0
 800b306:	d017      	beq.n	800b338 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30c:	f003 0320 	and.w	r3, r3, #32
 800b310:	2b00      	cmp	r3, #0
 800b312:	d105      	bne.n	800b320 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b314:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b318:	4b5c      	ldr	r3, [pc, #368]	@ (800b48c <HAL_UART_IRQHandler+0x2b8>)
 800b31a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00b      	beq.n	800b338 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2208      	movs	r2, #8
 800b326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b32e:	f043 0208 	orr.w	r2, r3, #8
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b33c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b340:	2b00      	cmp	r3, #0
 800b342:	d012      	beq.n	800b36a <HAL_UART_IRQHandler+0x196>
 800b344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b348:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00c      	beq.n	800b36a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b360:	f043 0220 	orr.w	r2, r3, #32
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 8249 	beq.w	800b808 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d013      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d105      	bne.n	800b39a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b38e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3be:	2b40      	cmp	r3, #64	@ 0x40
 800b3c0:	d005      	beq.n	800b3ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d054      	beq.n	800b478 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa85 	bl	800b8de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3de:	2b40      	cmp	r3, #64	@ 0x40
 800b3e0:	d146      	bne.n	800b470 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3f0:	e853 3f00 	ldrex	r3, [r3]
 800b3f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b40e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b41a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1d9      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b434:	2b00      	cmp	r3, #0
 800b436:	d017      	beq.n	800b468 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b43e:	4a15      	ldr	r2, [pc, #84]	@ (800b494 <HAL_UART_IRQHandler+0x2c0>)
 800b440:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f9 fd8c 	bl	8004f66 <HAL_DMA_Abort_IT>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d019      	beq.n	800b488 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b462:	4610      	mov	r0, r2
 800b464:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b466:	e00f      	b.n	800b488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f9e1 	bl	800b830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46e:	e00b      	b.n	800b488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f9dd 	bl	800b830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b476:	e007      	b.n	800b488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9d9 	bl	800b830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b486:	e1bf      	b.n	800b808 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b488:	bf00      	nop
    return;
 800b48a:	e1bd      	b.n	800b808 <HAL_UART_IRQHandler+0x634>
 800b48c:	10000001 	.word	0x10000001
 800b490:	04000120 	.word	0x04000120
 800b494:	0800bae1 	.word	0x0800bae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	f040 8153 	bne.w	800b748 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a6:	f003 0310 	and.w	r3, r3, #16
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 814c 	beq.w	800b748 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b4:	f003 0310 	and.w	r3, r3, #16
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 8145 	beq.w	800b748 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2210      	movs	r2, #16
 800b4c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4d0:	2b40      	cmp	r3, #64	@ 0x40
 800b4d2:	f040 80bb 	bne.w	800b64c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 818f 	beq.w	800b80c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	f080 8187 	bcs.w	800b80c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0320 	and.w	r3, r3, #32
 800b516:	2b00      	cmp	r3, #0
 800b518:	f040 8087 	bne.w	800b62a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b54a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b552:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b55e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1da      	bne.n	800b51c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3308      	adds	r3, #8
 800b56c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b578:	f023 0301 	bic.w	r3, r3, #1
 800b57c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3308      	adds	r3, #8
 800b586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b58a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b58e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b590:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b592:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e1      	bne.n	800b566 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b5b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b5c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1e3      	bne.n	800b5a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5f8:	f023 0310 	bic.w	r3, r3, #16
 800b5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b60a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b60c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e4      	bne.n	800b5e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b624:	4618      	mov	r0, r3
 800b626:	f7f9 fc3f 	bl	8004ea8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2202      	movs	r2, #2
 800b62e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	b29b      	uxth	r3, r3
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f8fd 	bl	800b844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b64a:	e0df      	b.n	800b80c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b658:	b29b      	uxth	r3, r3
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b666:	b29b      	uxth	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 80d1 	beq.w	800b810 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b66e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80cc 	beq.w	800b810 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b68c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b69a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b69c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e4      	bne.n	800b678 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b6d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e1      	bne.n	800b6ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0310 	bic.w	r3, r3, #16
 800b712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b720:	61fb      	str	r3, [r7, #28]
 800b722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b724:	69b9      	ldr	r1, [r7, #24]
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	e841 2300 	strex	r3, r2, [r1]
 800b72c:	617b      	str	r3, [r7, #20]
   return(result);
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1e4      	bne.n	800b6fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b73a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f87f 	bl	800b844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b746:	e063      	b.n	800b810 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b74c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00e      	beq.n	800b772 <HAL_UART_IRQHandler+0x59e>
 800b754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f9f9 	bl	800bb62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b770:	e051      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d014      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b78e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d008      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d03a      	beq.n	800b814 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
    }
    return;
 800b7a6:	e035      	b.n	800b814 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d009      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x5f4>
 800b7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d003      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f9a3 	bl	800bb0c <UART_EndTransmit_IT>
    return;
 800b7c6:	e026      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x614>
 800b7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f9d2 	bl	800bb8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7e6:	e016      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d010      	beq.n	800b816 <HAL_UART_IRQHandler+0x642>
 800b7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	da0c      	bge.n	800b816 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f9ba 	bl	800bb76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b802:	e008      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
      return;
 800b804:	bf00      	nop
 800b806:	e006      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
    return;
 800b808:	bf00      	nop
 800b80a:	e004      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
      return;
 800b80c:	bf00      	nop
 800b80e:	e002      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
      return;
 800b810:	bf00      	nop
 800b812:	e000      	b.n	800b816 <HAL_UART_IRQHandler+0x642>
    return;
 800b814:	bf00      	nop
  }
}
 800b816:	37e8      	adds	r7, #232	@ 0xe8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b08f      	sub	sp, #60	@ 0x3c
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	61fb      	str	r3, [r7, #28]
   return(result);
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b884:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e6      	bne.n	800b864 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3308      	adds	r3, #8
 800b89c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b8ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b6:	61ba      	str	r2, [r7, #24]
 800b8b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	6979      	ldr	r1, [r7, #20]
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e5      	bne.n	800b896 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b8d2:	bf00      	nop
 800b8d4:	373c      	adds	r7, #60	@ 0x3c
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b095      	sub	sp, #84	@ 0x54
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b904:	643b      	str	r3, [r7, #64]	@ 0x40
 800b906:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b90a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b90c:	e841 2300 	strex	r3, r2, [r1]
 800b910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e6      	bne.n	800b8e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	61fb      	str	r3, [r7, #28]
   return(result);
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b92e:	f023 0301 	bic.w	r3, r3, #1
 800b932:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3308      	adds	r3, #8
 800b93a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b93c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b93e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e3      	bne.n	800b918 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b954:	2b01      	cmp	r3, #1
 800b956:	d118      	bne.n	800b98a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	60bb      	str	r3, [r7, #8]
   return(result);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f023 0310 	bic.w	r3, r3, #16
 800b96c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b976:	61bb      	str	r3, [r7, #24]
 800b978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97a:	6979      	ldr	r1, [r7, #20]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	613b      	str	r3, [r7, #16]
   return(result);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e6      	bne.n	800b958 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b99e:	bf00      	nop
 800b9a0:	3754      	adds	r7, #84	@ 0x54
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b090      	sub	sp, #64	@ 0x40
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d137      	bne.n	800ba36 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e5      	bne.n	800b9ce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	69b9      	ldr	r1, [r7, #24]
 800ba26:	69fa      	ldr	r2, [r7, #28]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba34:	e002      	b.n	800ba3c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba36:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba38:	f7f7 feac 	bl	8003794 <HAL_UART_TxCpltCallback>
}
 800ba3c:	bf00      	nop
 800ba3e:	3740      	adds	r7, #64	@ 0x40
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fee2 	bl	800b81c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba58:	bf00      	nop
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba88:	2b80      	cmp	r3, #128	@ 0x80
 800ba8a:	d109      	bne.n	800baa0 <UART_DMAError+0x40>
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b21      	cmp	r3, #33	@ 0x21
 800ba90:	d106      	bne.n	800baa0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ba9a:	6978      	ldr	r0, [r7, #20]
 800ba9c:	f7ff fede 	bl	800b85c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baaa:	2b40      	cmp	r3, #64	@ 0x40
 800baac:	d109      	bne.n	800bac2 <UART_DMAError+0x62>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b22      	cmp	r3, #34	@ 0x22
 800bab2:	d106      	bne.n	800bac2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800babc:	6978      	ldr	r0, [r7, #20]
 800babe:	f7ff ff0e 	bl	800b8de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bac8:	f043 0210 	orr.w	r2, r3, #16
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bad2:	6978      	ldr	r0, [r7, #20]
 800bad4:	f7ff feac 	bl	800b830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bad8:	bf00      	nop
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fe96 	bl	800b830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6979      	ldr	r1, [r7, #20]
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7f7 fe1d 	bl	8003794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb5a:	bf00      	nop
 800bb5c:	3720      	adds	r7, #32
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb7e:	bf00      	nop
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bbae:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bbb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bbd4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bbd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	43db      	mvns	r3, r3
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4013      	ands	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b085      	sub	sp, #20
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	1d3b      	adds	r3, r7, #4
 800bc0c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
	...

0800bc40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b09d      	sub	sp, #116	@ 0x74
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	4413      	add	r3, r2
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bc62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	78db      	ldrb	r3, [r3, #3]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d81f      	bhi.n	800bcb2 <USB_ActivateEndpoint+0x72>
 800bc72:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <USB_ActivateEndpoint+0x38>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bc89 	.word	0x0800bc89
 800bc7c:	0800bca5 	.word	0x0800bca5
 800bc80:	0800bcbb 	.word	0x0800bcbb
 800bc84:	0800bc97 	.word	0x0800bc97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bc88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bc94:	e012      	b.n	800bcbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bc96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc9a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bc9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bca2:	e00b      	b.n	800bcbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bca4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bcac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bcb0:	e004      	b.n	800bcbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bcb8:	e000      	b.n	800bcbc <USB_ActivateEndpoint+0x7c>
      break;
 800bcba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	441a      	add	r2, r3
 800bcc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bcca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcf6:	b21a      	sxth	r2, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	b21b      	sxth	r3, r3
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	b21b      	sxth	r3, r3
 800bd02:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	441a      	add	r2, r3
 800bd10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bd14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	7b1b      	ldrb	r3, [r3, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f040 8178 	bne.w	800c022 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8084 	beq.w	800be44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	461a      	mov	r2, r3
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	61bb      	str	r3, [r7, #24]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	00da      	lsls	r2, r3, #3
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	085b      	lsrs	r3, r3, #1
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	827b      	strh	r3, [r7, #18]
 800bd7e:	8a7b      	ldrh	r3, [r7, #18]
 800bd80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01b      	beq.n	800bdc0 <USB_ActivateEndpoint+0x180>
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd9e:	823b      	strh	r3, [r7, #16]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	441a      	add	r2, r3
 800bdaa:	8a3b      	ldrh	r3, [r7, #16]
 800bdac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	78db      	ldrb	r3, [r3, #3]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d020      	beq.n	800be0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdde:	81bb      	strh	r3, [r7, #12]
 800bde0:	89bb      	ldrh	r3, [r7, #12]
 800bde2:	f083 0320 	eor.w	r3, r3, #32
 800bde6:	81bb      	strh	r3, [r7, #12]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	441a      	add	r2, r3
 800bdf2:	89bb      	ldrh	r3, [r7, #12]
 800bdf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be04:	b29b      	uxth	r3, r3
 800be06:	8013      	strh	r3, [r2, #0]
 800be08:	e2d5      	b.n	800c3b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be20:	81fb      	strh	r3, [r7, #14]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	441a      	add	r2, r3
 800be2c:	89fb      	ldrh	r3, [r7, #14]
 800be2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be3e:	b29b      	uxth	r3, r3
 800be40:	8013      	strh	r3, [r2, #0]
 800be42:	e2b8      	b.n	800c3b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	633b      	str	r3, [r7, #48]	@ 0x30
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be4e:	b29b      	uxth	r3, r3
 800be50:	461a      	mov	r2, r3
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	4413      	add	r3, r2
 800be56:	633b      	str	r3, [r7, #48]	@ 0x30
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	00da      	lsls	r2, r3, #3
 800be5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be60:	4413      	add	r3, r2
 800be62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800be66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	88db      	ldrh	r3, [r3, #6]
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	b29b      	uxth	r3, r3
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be82:	b29b      	uxth	r3, r3
 800be84:	461a      	mov	r2, r3
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	4413      	add	r3, r2
 800be8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	00da      	lsls	r2, r3, #3
 800be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be94:	4413      	add	r3, r2
 800be96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	801a      	strh	r2, [r3, #0]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800beb2:	d91d      	bls.n	800bef0 <USB_ActivateEndpoint+0x2b0>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	095b      	lsrs	r3, r3, #5
 800beba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	f003 031f 	and.w	r3, r3, #31
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d102      	bne.n	800bece <USB_ActivateEndpoint+0x28e>
 800bec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800beca:	3b01      	subs	r3, #1
 800becc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	029b      	lsls	r3, r3, #10
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4313      	orrs	r3, r2
 800bede:	b29b      	uxth	r3, r3
 800bee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bee8:	b29a      	uxth	r2, r3
 800beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beec:	801a      	strh	r2, [r3, #0]
 800beee:	e026      	b.n	800bf3e <USB_ActivateEndpoint+0x2fe>
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <USB_ActivateEndpoint+0x2ce>
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	b29b      	uxth	r3, r3
 800befe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	801a      	strh	r2, [r3, #0]
 800bf0c:	e017      	b.n	800bf3e <USB_ActivateEndpoint+0x2fe>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	085b      	lsrs	r3, r3, #1
 800bf14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d002      	beq.n	800bf28 <USB_ActivateEndpoint+0x2e8>
 800bf22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf24:	3301      	adds	r3, #1
 800bf26:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	029b      	lsls	r3, r3, #10
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	4313      	orrs	r3, r2
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bf4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d01b      	beq.n	800bf8e <USB_ActivateEndpoint+0x34e>
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf6c:	843b      	strh	r3, [r7, #32]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	441a      	add	r2, r3
 800bf78:	8c3b      	ldrh	r3, [r7, #32]
 800bf7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d124      	bne.n	800bfe0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bfa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfac:	83bb      	strh	r3, [r7, #28]
 800bfae:	8bbb      	ldrh	r3, [r7, #28]
 800bfb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bfb4:	83bb      	strh	r3, [r7, #28]
 800bfb6:	8bbb      	ldrh	r3, [r7, #28]
 800bfb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bfbc:	83bb      	strh	r3, [r7, #28]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	441a      	add	r2, r3
 800bfc8:	8bbb      	ldrh	r3, [r7, #28]
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
 800bfde:	e1ea      	b.n	800c3b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff6:	83fb      	strh	r3, [r7, #30]
 800bff8:	8bfb      	ldrh	r3, [r7, #30]
 800bffa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bffe:	83fb      	strh	r3, [r7, #30]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	441a      	add	r2, r3
 800c00a:	8bfb      	ldrh	r3, [r7, #30]
 800c00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	8013      	strh	r3, [r2, #0]
 800c020:	e1c9      	b.n	800c3b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	78db      	ldrb	r3, [r3, #3]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d11e      	bne.n	800c068 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	b29b      	uxth	r3, r3
 800c038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c03c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c040:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	441a      	add	r2, r3
 800c04e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c05a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c062:	b29b      	uxth	r3, r3
 800c064:	8013      	strh	r3, [r2, #0]
 800c066:	e01d      	b.n	800c0a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c07e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	441a      	add	r2, r3
 800c08c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0b4:	4413      	add	r3, r2
 800c0b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00da      	lsls	r2, r3, #3
 800c0be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	891b      	ldrh	r3, [r3, #8]
 800c0cc:	085b      	lsrs	r3, r3, #1
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0d6:	801a      	strh	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0e8:	4413      	add	r3, r2
 800c0ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	00da      	lsls	r2, r3, #3
 800c0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c0fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	895b      	ldrh	r3, [r3, #10]
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	b29b      	uxth	r3, r3
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	b29a      	uxth	r2, r3
 800c108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c10a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f040 8093 	bne.w	800c23c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c126:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c12a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01b      	beq.n	800c16a <USB_ActivateEndpoint+0x52a>
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c148:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	441a      	add	r2, r3
 800c154:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c15a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c15e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c166:	b29b      	uxth	r3, r3
 800c168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c178:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c17a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d01b      	beq.n	800c1ba <USB_ActivateEndpoint+0x57a>
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c198:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	441a      	add	r2, r3
 800c1a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c1a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c1d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c1d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c1d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c1da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c1dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c1e0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	441a      	add	r2, r3
 800c1ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c1ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c218:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	441a      	add	r2, r3
 800c224:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c22a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c22e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c236:	b29b      	uxth	r3, r3
 800c238:	8013      	strh	r3, [r2, #0]
 800c23a:	e0bc      	b.n	800c3b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c24c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01d      	beq.n	800c294 <USB_ActivateEndpoint+0x654>
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	b29b      	uxth	r3, r3
 800c266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c26a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c26e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	441a      	add	r2, r3
 800c27c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c288:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c290:	b29b      	uxth	r3, r3
 800c292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c2a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01d      	beq.n	800c2ec <USB_ActivateEndpoint+0x6ac>
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	441a      	add	r2, r3
 800c2d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c2d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	78db      	ldrb	r3, [r3, #3]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d024      	beq.n	800c33e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	b29b      	uxth	r3, r3
 800c302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c30a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c30e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c312:	f083 0320 	eor.w	r3, r3, #32
 800c316:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	441a      	add	r2, r3
 800c324:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c32c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c338:	b29b      	uxth	r3, r3
 800c33a:	8013      	strh	r3, [r2, #0]
 800c33c:	e01d      	b.n	800c37a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c354:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	441a      	add	r2, r3
 800c362:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c36a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c376:	b29b      	uxth	r3, r3
 800c378:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c38c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c390:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	441a      	add	r2, r3
 800c39e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c3b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3774      	adds	r7, #116	@ 0x74
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop

0800c3c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b08d      	sub	sp, #52	@ 0x34
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	7b1b      	ldrb	r3, [r3, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f040 808e 	bne.w	800c4f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d044      	beq.n	800c46e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	881b      	ldrh	r3, [r3, #0]
 800c3f0:	81bb      	strh	r3, [r7, #12]
 800c3f2:	89bb      	ldrh	r3, [r7, #12]
 800c3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01b      	beq.n	800c434 <USB_DeactivateEndpoint+0x6c>
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c40e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c412:	817b      	strh	r3, [r7, #10]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	441a      	add	r2, r3
 800c41e:	897b      	ldrh	r3, [r7, #10]
 800c420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c42c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c430:	b29b      	uxth	r3, r3
 800c432:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	b29b      	uxth	r3, r3
 800c442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c44a:	813b      	strh	r3, [r7, #8]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	441a      	add	r2, r3
 800c456:	893b      	ldrh	r3, [r7, #8]
 800c458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c45c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c468:	b29b      	uxth	r3, r3
 800c46a:	8013      	strh	r3, [r2, #0]
 800c46c:	e192      	b.n	800c794 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	827b      	strh	r3, [r7, #18]
 800c47c:	8a7b      	ldrh	r3, [r7, #18]
 800c47e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d01b      	beq.n	800c4be <USB_DeactivateEndpoint+0xf6>
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	b29b      	uxth	r3, r3
 800c494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c49c:	823b      	strh	r3, [r7, #16]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	441a      	add	r2, r3
 800c4a8:	8a3b      	ldrh	r3, [r7, #16]
 800c4aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4d4:	81fb      	strh	r3, [r7, #14]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	441a      	add	r2, r3
 800c4e0:	89fb      	ldrh	r3, [r7, #14]
 800c4e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	8013      	strh	r3, [r2, #0]
 800c4f6:	e14d      	b.n	800c794 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f040 80a5 	bne.w	800c64c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	843b      	strh	r3, [r7, #32]
 800c510:	8c3b      	ldrh	r3, [r7, #32]
 800c512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d01b      	beq.n	800c552 <USB_DeactivateEndpoint+0x18a>
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	b29b      	uxth	r3, r3
 800c528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c52c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c530:	83fb      	strh	r3, [r7, #30]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	441a      	add	r2, r3
 800c53c:	8bfb      	ldrh	r3, [r7, #30]
 800c53e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54e:	b29b      	uxth	r3, r3
 800c550:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	83bb      	strh	r3, [r7, #28]
 800c560:	8bbb      	ldrh	r3, [r7, #28]
 800c562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c566:	2b00      	cmp	r3, #0
 800c568:	d01b      	beq.n	800c5a2 <USB_DeactivateEndpoint+0x1da>
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	b29b      	uxth	r3, r3
 800c578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c57c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c580:	837b      	strh	r3, [r7, #26]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	441a      	add	r2, r3
 800c58c:	8b7b      	ldrh	r3, [r7, #26]
 800c58e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c59a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4413      	add	r3, r2
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5b8:	833b      	strh	r3, [r7, #24]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	441a      	add	r2, r3
 800c5c4:	8b3b      	ldrh	r3, [r7, #24]
 800c5c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5f0:	82fb      	strh	r3, [r7, #22]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	441a      	add	r2, r3
 800c5fc:	8afb      	ldrh	r3, [r7, #22]
 800c5fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c60e:	b29b      	uxth	r3, r3
 800c610:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c628:	82bb      	strh	r3, [r7, #20]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	441a      	add	r2, r3
 800c634:	8abb      	ldrh	r3, [r7, #20]
 800c636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c63a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c63e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c646:	b29b      	uxth	r3, r3
 800c648:	8013      	strh	r3, [r2, #0]
 800c64a:	e0a3      	b.n	800c794 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c65a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c65c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d01b      	beq.n	800c69c <USB_DeactivateEndpoint+0x2d4>
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4413      	add	r3, r2
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	b29b      	uxth	r3, r3
 800c672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c67a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	441a      	add	r2, r3
 800c686:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c68c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c690:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c698:	b29b      	uxth	r3, r3
 800c69a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c6aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d01b      	beq.n	800c6ec <USB_DeactivateEndpoint+0x324>
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	441a      	add	r2, r3
 800c6d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c6d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c702:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	441a      	add	r2, r3
 800c70e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c71c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c720:	b29b      	uxth	r3, r3
 800c722:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c73a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	441a      	add	r2, r3
 800c746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c74c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c758:	b29b      	uxth	r3, r3
 800c75a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c772:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	441a      	add	r2, r3
 800c77e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c78c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c790:	b29b      	uxth	r3, r3
 800c792:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3734      	adds	r7, #52	@ 0x34
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b0c2      	sub	sp, #264	@ 0x108
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7b0:	6018      	str	r0, [r3, #0]
 800c7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c7bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	f040 86b7 	bne.w	800d53c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c7ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	699a      	ldr	r2, [r3, #24]
 800c7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d908      	bls.n	800c7fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c7fa:	e007      	b.n	800c80c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	7b1b      	ldrb	r3, [r3, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d13a      	bne.n	800c892 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c81c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6959      	ldr	r1, [r3, #20]
 800c828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c82c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	88da      	ldrh	r2, [r3, #6]
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c838:	b29b      	uxth	r3, r3
 800c83a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c83e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c842:	6800      	ldr	r0, [r0, #0]
 800c844:	f001 fc98 	bl	800e178 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c84c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	613b      	str	r3, [r7, #16]
 800c854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c862:	b29b      	uxth	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	4413      	add	r3, r2
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	00da      	lsls	r2, r3, #3
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	4413      	add	r3, r2
 800c87e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c888:	b29a      	uxth	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	801a      	strh	r2, [r3, #0]
 800c88e:	f000 be1f 	b.w	800d4d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	78db      	ldrb	r3, [r3, #3]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	f040 8462 	bne.w	800d168 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6a1a      	ldr	r2, [r3, #32]
 800c8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	f240 83df 	bls.w	800d080 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	881b      	ldrh	r3, [r3, #0]
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	441a      	add	r2, r3
 800c906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c90a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c90e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c912:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c91e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6a1a      	ldr	r2, [r3, #32]
 800c92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c94a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 81c7 	beq.w	800ccf2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d177      	bne.n	800ca70 <USB_EPStartXfer+0x2ce>
 800c980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a0:	4413      	add	r3, r2
 800c9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	00da      	lsls	r2, r3, #3
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	801a      	strh	r2, [r3, #0]
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9d2:	d921      	bls.n	800ca18 <USB_EPStartXfer+0x276>
 800c9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d8:	095b      	lsrs	r3, r3, #5
 800c9da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e2:	f003 031f 	and.w	r3, r3, #31
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d104      	bne.n	800c9f4 <USB_EPStartXfer+0x252>
 800c9ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	029b      	lsls	r3, r3, #10
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	4313      	orrs	r3, r2
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca14:	801a      	strh	r2, [r3, #0]
 800ca16:	e050      	b.n	800caba <USB_EPStartXfer+0x318>
 800ca18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <USB_EPStartXfer+0x294>
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	801a      	strh	r2, [r3, #0]
 800ca34:	e041      	b.n	800caba <USB_EPStartXfer+0x318>
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3a:	085b      	lsrs	r3, r3, #1
 800ca3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <USB_EPStartXfer+0x2b4>
 800ca4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ca50:	3301      	adds	r3, #1
 800ca52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	029b      	lsls	r3, r3, #10
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	4313      	orrs	r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	e024      	b.n	800caba <USB_EPStartXfer+0x318>
 800ca70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d11c      	bne.n	800caba <USB_EPStartXfer+0x318>
 800ca80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	461a      	mov	r2, r3
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	4413      	add	r3, r2
 800ca96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	00da      	lsls	r2, r3, #3
 800caa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa8:	4413      	add	r3, r2
 800caaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800caae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800caba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cabe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	895b      	ldrh	r3, [r3, #10]
 800cac6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800caca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6959      	ldr	r1, [r3, #20]
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cae0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cae4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cae8:	6800      	ldr	r0, [r0, #0]
 800caea:	f001 fb45 	bl	800e178 <USB_WritePMA>
            ep->xfer_buff += len;
 800caee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	695a      	ldr	r2, [r3, #20]
 800cafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafe:	441a      	add	r2, r3
 800cb00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6a1a      	ldr	r2, [r3, #32]
 800cb18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d90f      	bls.n	800cb48 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cb28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6a1a      	ldr	r2, [r3, #32]
 800cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	621a      	str	r2, [r3, #32]
 800cb46:	e00e      	b.n	800cb66 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cb58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	785b      	ldrb	r3, [r3, #1]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d177      	bne.n	800cc66 <USB_EPStartXfer+0x4c4>
 800cb76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	61bb      	str	r3, [r7, #24]
 800cb82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	461a      	mov	r2, r3
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	4413      	add	r3, r2
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	00da      	lsls	r2, r3, #3
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	801a      	strh	r2, [r3, #0]
 800cbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbc8:	d921      	bls.n	800cc0e <USB_EPStartXfer+0x46c>
 800cbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd8:	f003 031f 	and.w	r3, r3, #31
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d104      	bne.n	800cbea <USB_EPStartXfer+0x448>
 800cbe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	029b      	lsls	r3, r3, #10
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	801a      	strh	r2, [r3, #0]
 800cc0c:	e056      	b.n	800ccbc <USB_EPStartXfer+0x51a>
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <USB_EPStartXfer+0x48a>
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	801a      	strh	r2, [r3, #0]
 800cc2a:	e047      	b.n	800ccbc <USB_EPStartXfer+0x51a>
 800cc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc30:	085b      	lsrs	r3, r3, #1
 800cc32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d004      	beq.n	800cc4c <USB_EPStartXfer+0x4aa>
 800cc42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc46:	3301      	adds	r3, #1
 800cc48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	029b      	lsls	r3, r3, #10
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	801a      	strh	r2, [r3, #0]
 800cc64:	e02a      	b.n	800ccbc <USB_EPStartXfer+0x51a>
 800cc66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	785b      	ldrb	r3, [r3, #1]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d122      	bne.n	800ccbc <USB_EPStartXfer+0x51a>
 800cc76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	623b      	str	r3, [r7, #32]
 800cc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	461a      	mov	r2, r3
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	4413      	add	r3, r2
 800cc98:	623b      	str	r3, [r7, #32]
 800cc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	00da      	lsls	r2, r3, #3
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	891b      	ldrh	r3, [r3, #8]
 800ccc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6959      	ldr	r1, [r3, #20]
 800ccd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cce2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cce6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	f001 fa44 	bl	800e178 <USB_WritePMA>
 800ccf0:	e3ee      	b.n	800d4d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	785b      	ldrb	r3, [r3, #1]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d177      	bne.n	800cdf2 <USB_EPStartXfer+0x650>
 800cd02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	461a      	mov	r2, r3
 800cd20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd22:	4413      	add	r3, r2
 800cd24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	00da      	lsls	r2, r3, #3
 800cd34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd36:	4413      	add	r3, r2
 800cd38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd4c:	801a      	strh	r2, [r3, #0]
 800cd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd52:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd54:	d921      	bls.n	800cd9a <USB_EPStartXfer+0x5f8>
 800cd56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd5a:	095b      	lsrs	r3, r3, #5
 800cd5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd64:	f003 031f 	and.w	r3, r3, #31
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d104      	bne.n	800cd76 <USB_EPStartXfer+0x5d4>
 800cd6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cd70:	3b01      	subs	r3, #1
 800cd72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	029b      	lsls	r3, r3, #10
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	4313      	orrs	r3, r2
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd96:	801a      	strh	r2, [r3, #0]
 800cd98:	e056      	b.n	800ce48 <USB_EPStartXfer+0x6a6>
 800cd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <USB_EPStartXfer+0x616>
 800cda2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb4:	801a      	strh	r2, [r3, #0]
 800cdb6:	e047      	b.n	800ce48 <USB_EPStartXfer+0x6a6>
 800cdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdbc:	085b      	lsrs	r3, r3, #1
 800cdbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cdc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d004      	beq.n	800cdd8 <USB_EPStartXfer+0x636>
 800cdce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cdd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	029b      	lsls	r3, r3, #10
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4313      	orrs	r3, r2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdee:	801a      	strh	r2, [r3, #0]
 800cdf0:	e02a      	b.n	800ce48 <USB_EPStartXfer+0x6a6>
 800cdf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	785b      	ldrb	r3, [r3, #1]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d122      	bne.n	800ce48 <USB_EPStartXfer+0x6a6>
 800ce02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce22:	4413      	add	r3, r2
 800ce24:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	00da      	lsls	r2, r3, #3
 800ce34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce36:	4413      	add	r3, r2
 800ce38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	891b      	ldrh	r3, [r3, #8]
 800ce54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	6959      	ldr	r1, [r3, #20]
 800ce64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce6e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ce72:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ce76:	6800      	ldr	r0, [r0, #0]
 800ce78:	f001 f97e 	bl	800e178 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	695a      	ldr	r2, [r3, #20]
 800ce88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce8c:	441a      	add	r2, r3
 800ce8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6a1a      	ldr	r2, [r3, #32]
 800cea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d90f      	bls.n	800ced6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ceb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6a1a      	ldr	r2, [r3, #32]
 800cec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	621a      	str	r2, [r3, #32]
 800ced4:	e00e      	b.n	800cef4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ced6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2200      	movs	r2, #0
 800cef2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d177      	bne.n	800d000 <USB_EPStartXfer+0x85e>
 800cf10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf30:	4413      	add	r3, r2
 800cf32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	00da      	lsls	r2, r3, #3
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	4413      	add	r3, r2
 800cf46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5a:	801a      	strh	r2, [r3, #0]
 800cf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf60:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf62:	d921      	bls.n	800cfa8 <USB_EPStartXfer+0x806>
 800cf64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf68:	095b      	lsrs	r3, r3, #5
 800cf6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf72:	f003 031f 	and.w	r3, r3, #31
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d104      	bne.n	800cf84 <USB_EPStartXfer+0x7e2>
 800cf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cf84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf86:	881b      	ldrh	r3, [r3, #0]
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	029b      	lsls	r3, r3, #10
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	4313      	orrs	r3, r2
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa4:	801a      	strh	r2, [r3, #0]
 800cfa6:	e050      	b.n	800d04a <USB_EPStartXfer+0x8a8>
 800cfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10a      	bne.n	800cfc6 <USB_EPStartXfer+0x824>
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc2:	801a      	strh	r2, [r3, #0]
 800cfc4:	e041      	b.n	800d04a <USB_EPStartXfer+0x8a8>
 800cfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfca:	085b      	lsrs	r3, r3, #1
 800cfcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd4:	f003 0301 	and.w	r3, r3, #1
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d004      	beq.n	800cfe6 <USB_EPStartXfer+0x844>
 800cfdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	029b      	lsls	r3, r3, #10
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	4313      	orrs	r3, r2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffc:	801a      	strh	r2, [r3, #0]
 800cffe:	e024      	b.n	800d04a <USB_EPStartXfer+0x8a8>
 800d000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d11c      	bne.n	800d04a <USB_EPStartXfer+0x8a8>
 800d010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d01e:	b29b      	uxth	r3, r3
 800d020:	461a      	mov	r2, r3
 800d022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d024:	4413      	add	r3, r2
 800d026:	643b      	str	r3, [r7, #64]	@ 0x40
 800d028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	00da      	lsls	r2, r3, #3
 800d036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d038:	4413      	add	r3, r2
 800d03a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d044:	b29a      	uxth	r2, r3
 800d046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d048:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	895b      	ldrh	r3, [r3, #10]
 800d056:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6959      	ldr	r1, [r3, #20]
 800d066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d070:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d074:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d078:	6800      	ldr	r0, [r0, #0]
 800d07a:	f001 f87d 	bl	800e178 <USB_WritePMA>
 800d07e:	e227      	b.n	800d4d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d09e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	441a      	add	r2, r3
 800d0d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d0d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d106:	b29b      	uxth	r3, r3
 800d108:	461a      	mov	r2, r3
 800d10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d10c:	4413      	add	r3, r2
 800d10e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	00da      	lsls	r2, r3, #3
 800d11e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d120:	4413      	add	r3, r2
 800d122:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d126:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d130:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	891b      	ldrh	r3, [r3, #8]
 800d13e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6959      	ldr	r1, [r3, #20]
 800d14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d152:	b29b      	uxth	r3, r3
 800d154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d158:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d15c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d160:	6800      	ldr	r0, [r0, #0]
 800d162:	f001 f809 	bl	800e178 <USB_WritePMA>
 800d166:	e1b3      	b.n	800d4d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	6a1a      	ldr	r2, [r3, #32]
 800d174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d178:	1ad2      	subs	r2, r2, r3
 800d17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d18a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80c6 	beq.w	800d33a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	785b      	ldrb	r3, [r3, #1]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d177      	bne.n	800d2ba <USB_EPStartXfer+0xb18>
 800d1ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d1ea:	4413      	add	r3, r2
 800d1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	00da      	lsls	r2, r3, #3
 800d1fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d1fe:	4413      	add	r3, r2
 800d200:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d204:	667b      	str	r3, [r7, #100]	@ 0x64
 800d206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d210:	b29a      	uxth	r2, r3
 800d212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d214:	801a      	strh	r2, [r3, #0]
 800d216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d21a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d21c:	d921      	bls.n	800d262 <USB_EPStartXfer+0xac0>
 800d21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d222:	095b      	lsrs	r3, r3, #5
 800d224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d22c:	f003 031f 	and.w	r3, r3, #31
 800d230:	2b00      	cmp	r3, #0
 800d232:	d104      	bne.n	800d23e <USB_EPStartXfer+0xa9c>
 800d234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d238:	3b01      	subs	r3, #1
 800d23a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	b29a      	uxth	r2, r3
 800d244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d248:	b29b      	uxth	r3, r3
 800d24a:	029b      	lsls	r3, r3, #10
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	4313      	orrs	r3, r2
 800d250:	b29b      	uxth	r3, r3
 800d252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d25e:	801a      	strh	r2, [r3, #0]
 800d260:	e050      	b.n	800d304 <USB_EPStartXfer+0xb62>
 800d262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10a      	bne.n	800d280 <USB_EPStartXfer+0xade>
 800d26a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	b29b      	uxth	r3, r3
 800d270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d278:	b29a      	uxth	r2, r3
 800d27a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d27c:	801a      	strh	r2, [r3, #0]
 800d27e:	e041      	b.n	800d304 <USB_EPStartXfer+0xb62>
 800d280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d284:	085b      	lsrs	r3, r3, #1
 800d286:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d28e:	f003 0301 	and.w	r3, r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <USB_EPStartXfer+0xafe>
 800d296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d29a:	3301      	adds	r3, #1
 800d29c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d2a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	029b      	lsls	r3, r3, #10
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	e024      	b.n	800d304 <USB_EPStartXfer+0xb62>
 800d2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	785b      	ldrb	r3, [r3, #1]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d11c      	bne.n	800d304 <USB_EPStartXfer+0xb62>
 800d2ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2de:	4413      	add	r3, r2
 800d2e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	00da      	lsls	r2, r3, #3
 800d2f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d302:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	895b      	ldrh	r3, [r3, #10]
 800d310:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6959      	ldr	r1, [r3, #20]
 800d320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d324:	b29b      	uxth	r3, r3
 800d326:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d32a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d32e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d332:	6800      	ldr	r0, [r0, #0]
 800d334:	f000 ff20 	bl	800e178 <USB_WritePMA>
 800d338:	e0ca      	b.n	800d4d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	785b      	ldrb	r3, [r3, #1]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d177      	bne.n	800d43a <USB_EPStartXfer+0xc98>
 800d34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d364:	b29b      	uxth	r3, r3
 800d366:	461a      	mov	r2, r3
 800d368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d36a:	4413      	add	r3, r2
 800d36c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	00da      	lsls	r2, r3, #3
 800d37c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d37e:	4413      	add	r3, r2
 800d380:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d384:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d390:	b29a      	uxth	r2, r3
 800d392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d39a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d39c:	d921      	bls.n	800d3e2 <USB_EPStartXfer+0xc40>
 800d39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a2:	095b      	lsrs	r3, r3, #5
 800d3a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ac:	f003 031f 	and.w	r3, r3, #31
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <USB_EPStartXfer+0xc1c>
 800d3b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d3be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	029b      	lsls	r3, r3, #10
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3de:	801a      	strh	r2, [r3, #0]
 800d3e0:	e05c      	b.n	800d49c <USB_EPStartXfer+0xcfa>
 800d3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10a      	bne.n	800d400 <USB_EPStartXfer+0xc5e>
 800d3ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3fc:	801a      	strh	r2, [r3, #0]
 800d3fe:	e04d      	b.n	800d49c <USB_EPStartXfer+0xcfa>
 800d400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d404:	085b      	lsrs	r3, r3, #1
 800d406:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <USB_EPStartXfer+0xc7e>
 800d416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d41a:	3301      	adds	r3, #1
 800d41c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	b29a      	uxth	r2, r3
 800d426:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	029b      	lsls	r3, r3, #10
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4313      	orrs	r3, r2
 800d432:	b29a      	uxth	r2, r3
 800d434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d436:	801a      	strh	r2, [r3, #0]
 800d438:	e030      	b.n	800d49c <USB_EPStartXfer+0xcfa>
 800d43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	785b      	ldrb	r3, [r3, #1]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d128      	bne.n	800d49c <USB_EPStartXfer+0xcfa>
 800d44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d44e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d45c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d466:	b29b      	uxth	r3, r3
 800d468:	461a      	mov	r2, r3
 800d46a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d46e:	4413      	add	r3, r2
 800d470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	00da      	lsls	r2, r3, #3
 800d482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d486:	4413      	add	r3, r2
 800d488:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d48c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d494:	b29a      	uxth	r2, r3
 800d496:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d49a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	891b      	ldrh	r3, [r3, #8]
 800d4a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6959      	ldr	r1, [r3, #20]
 800d4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4ca:	6800      	ldr	r0, [r0, #0]
 800d4cc:	f000 fe54 	bl	800e178 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4f6:	817b      	strh	r3, [r7, #10]
 800d4f8:	897b      	ldrh	r3, [r7, #10]
 800d4fa:	f083 0310 	eor.w	r3, r3, #16
 800d4fe:	817b      	strh	r3, [r7, #10]
 800d500:	897b      	ldrh	r3, [r7, #10]
 800d502:	f083 0320 	eor.w	r3, r3, #32
 800d506:	817b      	strh	r3, [r7, #10]
 800d508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	441a      	add	r2, r3
 800d522:	897b      	ldrh	r3, [r7, #10]
 800d524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d52c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d534:	b29b      	uxth	r3, r3
 800d536:	8013      	strh	r3, [r2, #0]
 800d538:	f000 bcde 	b.w	800def8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d53c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	7b1b      	ldrb	r3, [r3, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f040 80bb 	bne.w	800d6c4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	699a      	ldr	r2, [r3, #24]
 800d55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	429a      	cmp	r2, r3
 800d568:	d917      	bls.n	800d59a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d56e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d57e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	699a      	ldr	r2, [r3, #24]
 800d586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58a:	1ad2      	subs	r2, r2, r3
 800d58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	619a      	str	r2, [r3, #24]
 800d598:	e00e      	b.n	800d5b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5dc:	4413      	add	r3, r2
 800d5de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	00da      	lsls	r2, r3, #3
 800d5f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5f4:	4413      	add	r3, r2
 800d5f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	b29b      	uxth	r3, r3
 800d606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d610:	801a      	strh	r2, [r3, #0]
 800d612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d616:	2b3e      	cmp	r3, #62	@ 0x3e
 800d618:	d924      	bls.n	800d664 <USB_EPStartXfer+0xec2>
 800d61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61e:	095b      	lsrs	r3, r3, #5
 800d620:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d628:	f003 031f 	and.w	r3, r3, #31
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d104      	bne.n	800d63a <USB_EPStartXfer+0xe98>
 800d630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d634:	3b01      	subs	r3, #1
 800d636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d63a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d63e:	881b      	ldrh	r3, [r3, #0]
 800d640:	b29a      	uxth	r2, r3
 800d642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d646:	b29b      	uxth	r3, r3
 800d648:	029b      	lsls	r3, r3, #10
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	4313      	orrs	r3, r2
 800d64e:	b29b      	uxth	r3, r3
 800d650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d658:	b29a      	uxth	r2, r3
 800d65a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d65e:	801a      	strh	r2, [r3, #0]
 800d660:	f000 bc10 	b.w	800de84 <USB_EPStartXfer+0x16e2>
 800d664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10c      	bne.n	800d686 <USB_EPStartXfer+0xee4>
 800d66c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d670:	881b      	ldrh	r3, [r3, #0]
 800d672:	b29b      	uxth	r3, r3
 800d674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d682:	801a      	strh	r2, [r3, #0]
 800d684:	e3fe      	b.n	800de84 <USB_EPStartXfer+0x16e2>
 800d686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68a:	085b      	lsrs	r3, r3, #1
 800d68c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d004      	beq.n	800d6a6 <USB_EPStartXfer+0xf04>
 800d69c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6aa:	881b      	ldrh	r3, [r3, #0]
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	029b      	lsls	r3, r3, #10
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6c0:	801a      	strh	r2, [r3, #0]
 800d6c2:	e3df      	b.n	800de84 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	78db      	ldrb	r3, [r3, #3]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	f040 8218 	bne.w	800db06 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	785b      	ldrb	r3, [r3, #1]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f040 809d 	bne.w	800d822 <USB_EPStartXfer+0x1080>
 800d6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d704:	b29b      	uxth	r3, r3
 800d706:	461a      	mov	r2, r3
 800d708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d70c:	4413      	add	r3, r2
 800d70e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	00da      	lsls	r2, r3, #3
 800d720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d724:	4413      	add	r3, r2
 800d726:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d72a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d72e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d740:	801a      	strh	r2, [r3, #0]
 800d742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d750:	d92b      	bls.n	800d7aa <USB_EPStartXfer+0x1008>
 800d752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	095b      	lsrs	r3, r3, #5
 800d760:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	f003 031f 	and.w	r3, r3, #31
 800d774:	2b00      	cmp	r3, #0
 800d776:	d104      	bne.n	800d782 <USB_EPStartXfer+0xfe0>
 800d778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d77c:	3b01      	subs	r3, #1
 800d77e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	b29a      	uxth	r2, r3
 800d78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d78e:	b29b      	uxth	r3, r3
 800d790:	029b      	lsls	r3, r3, #10
 800d792:	b29b      	uxth	r3, r3
 800d794:	4313      	orrs	r3, r2
 800d796:	b29b      	uxth	r3, r3
 800d798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d7a6:	801a      	strh	r2, [r3, #0]
 800d7a8:	e070      	b.n	800d88c <USB_EPStartXfer+0x10ea>
 800d7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d10c      	bne.n	800d7d4 <USB_EPStartXfer+0x1032>
 800d7ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d7d0:	801a      	strh	r2, [r3, #0]
 800d7d2:	e05b      	b.n	800d88c <USB_EPStartXfer+0x10ea>
 800d7d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	085b      	lsrs	r3, r3, #1
 800d7e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d004      	beq.n	800d804 <USB_EPStartXfer+0x1062>
 800d7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7fe:	3301      	adds	r3, #1
 800d800:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d810:	b29b      	uxth	r3, r3
 800d812:	029b      	lsls	r3, r3, #10
 800d814:	b29b      	uxth	r3, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	b29a      	uxth	r2, r3
 800d81a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d81e:	801a      	strh	r2, [r3, #0]
 800d820:	e034      	b.n	800d88c <USB_EPStartXfer+0x10ea>
 800d822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	785b      	ldrb	r3, [r3, #1]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d12c      	bne.n	800d88c <USB_EPStartXfer+0x10ea>
 800d832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d84e:	b29b      	uxth	r3, r3
 800d850:	461a      	mov	r2, r3
 800d852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d856:	4413      	add	r3, r2
 800d858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	00da      	lsls	r2, r3, #3
 800d86a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d86e:	4413      	add	r3, r2
 800d870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d87c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	b29a      	uxth	r2, r3
 800d886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d88a:	801a      	strh	r2, [r3, #0]
 800d88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 809d 	bne.w	800d9e6 <USB_EPStartXfer+0x1244>
 800d8ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8d0:	4413      	add	r3, r2
 800d8d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	00da      	lsls	r2, r3, #3
 800d8e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8e8:	4413      	add	r3, r2
 800d8ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d904:	801a      	strh	r2, [r3, #0]
 800d906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d90a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	2b3e      	cmp	r3, #62	@ 0x3e
 800d914:	d92b      	bls.n	800d96e <USB_EPStartXfer+0x11cc>
 800d916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	095b      	lsrs	r3, r3, #5
 800d924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	f003 031f 	and.w	r3, r3, #31
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <USB_EPStartXfer+0x11a4>
 800d93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d940:	3b01      	subs	r3, #1
 800d942:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d946:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d952:	b29b      	uxth	r3, r3
 800d954:	029b      	lsls	r3, r3, #10
 800d956:	b29b      	uxth	r3, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d964:	b29a      	uxth	r2, r3
 800d966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d96a:	801a      	strh	r2, [r3, #0]
 800d96c:	e069      	b.n	800da42 <USB_EPStartXfer+0x12a0>
 800d96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d10c      	bne.n	800d998 <USB_EPStartXfer+0x11f6>
 800d97e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d98a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d98e:	b29a      	uxth	r2, r3
 800d990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d994:	801a      	strh	r2, [r3, #0]
 800d996:	e054      	b.n	800da42 <USB_EPStartXfer+0x12a0>
 800d998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	085b      	lsrs	r3, r3, #1
 800d9a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d004      	beq.n	800d9c8 <USB_EPStartXfer+0x1226>
 800d9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d9c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	029b      	lsls	r3, r3, #10
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9e2:	801a      	strh	r2, [r3, #0]
 800d9e4:	e02d      	b.n	800da42 <USB_EPStartXfer+0x12a0>
 800d9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	785b      	ldrb	r3, [r3, #1]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d125      	bne.n	800da42 <USB_EPStartXfer+0x12a0>
 800d9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da04:	b29b      	uxth	r3, r3
 800da06:	461a      	mov	r2, r3
 800da08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da0c:	4413      	add	r3, r2
 800da0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	00da      	lsls	r2, r3, #3
 800da20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da24:	4413      	add	r3, r2
 800da26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800da2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800da42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 8218 	beq.w	800de84 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800da54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800da74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800da78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <USB_EPStartXfer+0x12ea>
 800da80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800da84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10d      	bne.n	800daa8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800da8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800da90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800da94:	2b00      	cmp	r3, #0
 800da96:	f040 81f5 	bne.w	800de84 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800da9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800da9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f040 81ee 	bne.w	800de84 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800daa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dace:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	441a      	add	r2, r3
 800daec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800daf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dafc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db00:	b29b      	uxth	r3, r3
 800db02:	8013      	strh	r3, [r2, #0]
 800db04:	e1be      	b.n	800de84 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800db06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	78db      	ldrb	r3, [r3, #3]
 800db12:	2b01      	cmp	r3, #1
 800db14:	f040 81b4 	bne.w	800de80 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800db18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	699a      	ldr	r2, [r3, #24]
 800db24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	429a      	cmp	r2, r3
 800db32:	d917      	bls.n	800db64 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800db34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800db44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	699a      	ldr	r2, [r3, #24]
 800db50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db54:	1ad2      	subs	r2, r2, r3
 800db56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	619a      	str	r2, [r3, #24]
 800db62:	e00e      	b.n	800db82 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800db64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800db74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2200      	movs	r2, #0
 800db80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800db82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	785b      	ldrb	r3, [r3, #1]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 8085 	bne.w	800dc9e <USB_EPStartXfer+0x14fc>
 800db94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dbb8:	4413      	add	r3, r2
 800dbba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	00da      	lsls	r2, r3, #3
 800dbcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dbda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf2:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbf4:	d923      	bls.n	800dc3e <USB_EPStartXfer+0x149c>
 800dbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfa:	095b      	lsrs	r3, r3, #5
 800dbfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc04:	f003 031f 	and.w	r3, r3, #31
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <USB_EPStartXfer+0x1474>
 800dc0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc10:	3b01      	subs	r3, #1
 800dc12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dc16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	029b      	lsls	r3, r3, #10
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc3a:	801a      	strh	r2, [r3, #0]
 800dc3c:	e060      	b.n	800dd00 <USB_EPStartXfer+0x155e>
 800dc3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10c      	bne.n	800dc60 <USB_EPStartXfer+0x14be>
 800dc46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc5c:	801a      	strh	r2, [r3, #0]
 800dc5e:	e04f      	b.n	800dd00 <USB_EPStartXfer+0x155e>
 800dc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc64:	085b      	lsrs	r3, r3, #1
 800dc66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <USB_EPStartXfer+0x14de>
 800dc76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dc80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	029b      	lsls	r3, r3, #10
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	4313      	orrs	r3, r2
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc9a:	801a      	strh	r2, [r3, #0]
 800dc9c:	e030      	b.n	800dd00 <USB_EPStartXfer+0x155e>
 800dc9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	785b      	ldrb	r3, [r3, #1]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d128      	bne.n	800dd00 <USB_EPStartXfer+0x155e>
 800dcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dcbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	00da      	lsls	r2, r3, #3
 800dce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcea:	4413      	add	r3, r2
 800dcec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dcfe:	801a      	strh	r2, [r3, #0]
 800dd00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	785b      	ldrb	r3, [r3, #1]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f040 8085 	bne.w	800de2a <USB_EPStartXfer+0x1688>
 800dd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dd2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dd44:	4413      	add	r3, r2
 800dd46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	00da      	lsls	r2, r3, #3
 800dd58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dd66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dd78:	801a      	strh	r2, [r3, #0]
 800dd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd80:	d923      	bls.n	800ddca <USB_EPStartXfer+0x1628>
 800dd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd86:	095b      	lsrs	r3, r3, #5
 800dd88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd90:	f003 031f 	and.w	r3, r3, #31
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d104      	bne.n	800dda2 <USB_EPStartXfer+0x1600>
 800dd98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dda2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	029b      	lsls	r3, r3, #10
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ddc6:	801a      	strh	r2, [r3, #0]
 800ddc8:	e05c      	b.n	800de84 <USB_EPStartXfer+0x16e2>
 800ddca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10c      	bne.n	800ddec <USB_EPStartXfer+0x164a>
 800ddd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dde8:	801a      	strh	r2, [r3, #0]
 800ddea:	e04b      	b.n	800de84 <USB_EPStartXfer+0x16e2>
 800ddec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddf0:	085b      	lsrs	r3, r3, #1
 800ddf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ddf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <USB_EPStartXfer+0x166a>
 800de02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de06:	3301      	adds	r3, #1
 800de08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	b29a      	uxth	r2, r3
 800de14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de18:	b29b      	uxth	r3, r3
 800de1a:	029b      	lsls	r3, r3, #10
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	4313      	orrs	r3, r2
 800de20:	b29a      	uxth	r2, r3
 800de22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de26:	801a      	strh	r2, [r3, #0]
 800de28:	e02c      	b.n	800de84 <USB_EPStartXfer+0x16e2>
 800de2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	785b      	ldrb	r3, [r3, #1]
 800de36:	2b01      	cmp	r3, #1
 800de38:	d124      	bne.n	800de84 <USB_EPStartXfer+0x16e2>
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de48:	b29b      	uxth	r3, r3
 800de4a:	461a      	mov	r2, r3
 800de4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800de50:	4413      	add	r3, r2
 800de52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	00da      	lsls	r2, r3, #3
 800de64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800de68:	4413      	add	r3, r2
 800de6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800de72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de76:	b29a      	uxth	r2, r3
 800de78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800de7c:	801a      	strh	r2, [r3, #0]
 800de7e:	e001      	b.n	800de84 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	e03a      	b.n	800defa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800de84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	881b      	ldrh	r3, [r3, #0]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deaa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800deae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800deb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800deb6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800deba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800debe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dec2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	441a      	add	r2, r3
 800dee0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800deec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800def0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800def4:	b29b      	uxth	r3, r3
 800def6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	785b      	ldrb	r3, [r3, #1]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d020      	beq.n	800df58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	b29b      	uxth	r3, r3
 800df24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df2c:	81bb      	strh	r3, [r7, #12]
 800df2e:	89bb      	ldrh	r3, [r7, #12]
 800df30:	f083 0310 	eor.w	r3, r3, #16
 800df34:	81bb      	strh	r3, [r7, #12]
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	441a      	add	r2, r3
 800df40:	89bb      	ldrh	r3, [r7, #12]
 800df42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df52:	b29b      	uxth	r3, r3
 800df54:	8013      	strh	r3, [r2, #0]
 800df56:	e01f      	b.n	800df98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	b29b      	uxth	r3, r3
 800df66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df6e:	81fb      	strh	r3, [r7, #14]
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df76:	81fb      	strh	r3, [r7, #14]
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	441a      	add	r2, r3
 800df82:	89fb      	ldrh	r3, [r7, #14]
 800df84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df94:	b29b      	uxth	r3, r3
 800df96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr

0800dfa6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dfa6:	b480      	push	{r7}
 800dfa8:	b087      	sub	sp, #28
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	7b1b      	ldrb	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 809d 	bne.w	800e0f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	785b      	ldrb	r3, [r3, #1]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d04c      	beq.n	800e05c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4413      	add	r3, r2
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	823b      	strh	r3, [r7, #16]
 800dfd0:	8a3b      	ldrh	r3, [r7, #16]
 800dfd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d01b      	beq.n	800e012 <USB_EPClearStall+0x6c>
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dff0:	81fb      	strh	r3, [r7, #14]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	441a      	add	r2, r3
 800dffc:	89fb      	ldrh	r3, [r7, #14]
 800dffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e00a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e00e:	b29b      	uxth	r3, r3
 800e010:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	78db      	ldrb	r3, [r3, #3]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d06c      	beq.n	800e0f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	b29b      	uxth	r3, r3
 800e028:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e02c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e030:	81bb      	strh	r3, [r7, #12]
 800e032:	89bb      	ldrh	r3, [r7, #12]
 800e034:	f083 0320 	eor.w	r3, r3, #32
 800e038:	81bb      	strh	r3, [r7, #12]
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	441a      	add	r2, r3
 800e044:	89bb      	ldrh	r3, [r7, #12]
 800e046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e056:	b29b      	uxth	r3, r3
 800e058:	8013      	strh	r3, [r2, #0]
 800e05a:	e04b      	b.n	800e0f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	82fb      	strh	r3, [r7, #22]
 800e06a:	8afb      	ldrh	r3, [r7, #22]
 800e06c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d01b      	beq.n	800e0ac <USB_EPClearStall+0x106>
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4413      	add	r3, r2
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	b29b      	uxth	r3, r3
 800e082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e08a:	82bb      	strh	r3, [r7, #20]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	441a      	add	r2, r3
 800e096:	8abb      	ldrh	r3, [r7, #20]
 800e098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e09c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0c2:	827b      	strh	r3, [r7, #18]
 800e0c4:	8a7b      	ldrh	r3, [r7, #18]
 800e0c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e0ca:	827b      	strh	r3, [r7, #18]
 800e0cc:	8a7b      	ldrh	r3, [r7, #18]
 800e0ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e0d2:	827b      	strh	r3, [r7, #18]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	441a      	add	r2, r3
 800e0de:	8a7b      	ldrh	r3, [r7, #18]
 800e0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	371c      	adds	r7, #28
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e102:	b480      	push	{r7}
 800e104:	b083      	sub	sp, #12
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	460b      	mov	r3, r1
 800e10c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d103      	bne.n	800e11c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2280      	movs	r2, #128	@ 0x80
 800e118:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr

0800e12a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e12a:	b480      	push	{r7}
 800e12c:	b083      	sub	sp, #12
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e138:	b29b      	uxth	r3, r3
 800e13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e166:	b29b      	uxth	r3, r3
 800e168:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e16a:	68fb      	ldr	r3, [r7, #12]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3714      	adds	r7, #20
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e178:	b480      	push	{r7}
 800e17a:	b08b      	sub	sp, #44	@ 0x2c
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	4611      	mov	r1, r2
 800e184:	461a      	mov	r2, r3
 800e186:	460b      	mov	r3, r1
 800e188:	80fb      	strh	r3, [r7, #6]
 800e18a:	4613      	mov	r3, r2
 800e18c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e18e:	88bb      	ldrh	r3, [r7, #4]
 800e190:	3301      	adds	r3, #1
 800e192:	085b      	lsrs	r3, r3, #1
 800e194:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e19e:	88fa      	ldrh	r2, [r7, #6]
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1ae:	e01b      	b.n	800e1e8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	021b      	lsls	r3, r3, #8
 800e1be:	b21a      	sxth	r2, r3
 800e1c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	b21b      	sxth	r3, r3
 800e1c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	8a7a      	ldrh	r2, [r7, #18]
 800e1ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	3302      	adds	r3, #2
 800e1d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e0      	bne.n	800e1b0 <USB_WritePMA+0x38>
  }
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	372c      	adds	r7, #44	@ 0x2c
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b08b      	sub	sp, #44	@ 0x2c
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	4611      	mov	r1, r2
 800e208:	461a      	mov	r2, r3
 800e20a:	460b      	mov	r3, r1
 800e20c:	80fb      	strh	r3, [r7, #6]
 800e20e:	4613      	mov	r3, r2
 800e210:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e212:	88bb      	ldrh	r3, [r7, #4]
 800e214:	085b      	lsrs	r3, r3, #1
 800e216:	b29b      	uxth	r3, r3
 800e218:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e222:	88fa      	ldrh	r2, [r7, #6]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	4413      	add	r3, r2
 800e228:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e22c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	627b      	str	r3, [r7, #36]	@ 0x24
 800e232:	e018      	b.n	800e266 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	3302      	adds	r3, #2
 800e240:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	b2da      	uxtb	r2, r3
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	3301      	adds	r3, #1
 800e24e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	0a1b      	lsrs	r3, r3, #8
 800e254:	b2da      	uxtb	r2, r3
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	3301      	adds	r3, #1
 800e25e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	3b01      	subs	r3, #1
 800e264:	627b      	str	r3, [r7, #36]	@ 0x24
 800e266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e3      	bne.n	800e234 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e26c:	88bb      	ldrh	r3, [r7, #4]
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	b29b      	uxth	r3, r3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d007      	beq.n	800e288 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	b2da      	uxtb	r2, r3
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	701a      	strb	r2, [r3, #0]
  }
}
 800e288:	bf00      	nop
 800e28a:	372c      	adds	r7, #44	@ 0x2c
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	460b      	mov	r3, r1
 800e29e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e2a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e2a4:	f007 fc68 	bl	8015b78 <USBD_static_malloc>
 800e2a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d109      	bne.n	800e2c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	32b0      	adds	r2, #176	@ 0xb0
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e0d4      	b.n	800e46e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e2c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f008 f964 	bl	8016598 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	32b0      	adds	r2, #176	@ 0xb0
 800e2da:	68f9      	ldr	r1, [r7, #12]
 800e2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	32b0      	adds	r2, #176	@ 0xb0
 800e2ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	7c1b      	ldrb	r3, [r3, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d138      	bne.n	800e36e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e2fc:	4b5e      	ldr	r3, [pc, #376]	@ (800e478 <USBD_CDC_Init+0x1e4>)
 800e2fe:	7819      	ldrb	r1, [r3, #0]
 800e300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e304:	2202      	movs	r2, #2
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f007 fadd 	bl	80158c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e30c:	4b5a      	ldr	r3, [pc, #360]	@ (800e478 <USBD_CDC_Init+0x1e4>)
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	f003 020f 	and.w	r2, r3, #15
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	4613      	mov	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	440b      	add	r3, r1
 800e320:	3324      	adds	r3, #36	@ 0x24
 800e322:	2201      	movs	r2, #1
 800e324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e326:	4b55      	ldr	r3, [pc, #340]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e328:	7819      	ldrb	r1, [r3, #0]
 800e32a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e32e:	2202      	movs	r2, #2
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f007 fac8 	bl	80158c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e336:	4b51      	ldr	r3, [pc, #324]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	f003 020f 	and.w	r2, r3, #15
 800e33e:	6879      	ldr	r1, [r7, #4]
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	440b      	add	r3, r1
 800e34a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e34e:	2201      	movs	r2, #1
 800e350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e352:	4b4b      	ldr	r3, [pc, #300]	@ (800e480 <USBD_CDC_Init+0x1ec>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	f003 020f 	and.w	r2, r3, #15
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	440b      	add	r3, r1
 800e366:	3326      	adds	r3, #38	@ 0x26
 800e368:	2210      	movs	r2, #16
 800e36a:	801a      	strh	r2, [r3, #0]
 800e36c:	e035      	b.n	800e3da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e36e:	4b42      	ldr	r3, [pc, #264]	@ (800e478 <USBD_CDC_Init+0x1e4>)
 800e370:	7819      	ldrb	r1, [r3, #0]
 800e372:	2340      	movs	r3, #64	@ 0x40
 800e374:	2202      	movs	r2, #2
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f007 faa5 	bl	80158c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e37c:	4b3e      	ldr	r3, [pc, #248]	@ (800e478 <USBD_CDC_Init+0x1e4>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 020f 	and.w	r2, r3, #15
 800e384:	6879      	ldr	r1, [r7, #4]
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	440b      	add	r3, r1
 800e390:	3324      	adds	r3, #36	@ 0x24
 800e392:	2201      	movs	r2, #1
 800e394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e396:	4b39      	ldr	r3, [pc, #228]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e398:	7819      	ldrb	r1, [r3, #0]
 800e39a:	2340      	movs	r3, #64	@ 0x40
 800e39c:	2202      	movs	r2, #2
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f007 fa91 	bl	80158c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e3a4:	4b35      	ldr	r3, [pc, #212]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f003 020f 	and.w	r2, r3, #15
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4413      	add	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	440b      	add	r3, r1
 800e3b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e3bc:	2201      	movs	r2, #1
 800e3be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e3c0:	4b2f      	ldr	r3, [pc, #188]	@ (800e480 <USBD_CDC_Init+0x1ec>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f003 020f 	and.w	r2, r3, #15
 800e3c8:	6879      	ldr	r1, [r7, #4]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	440b      	add	r3, r1
 800e3d4:	3326      	adds	r3, #38	@ 0x26
 800e3d6:	2210      	movs	r2, #16
 800e3d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e3da:	4b29      	ldr	r3, [pc, #164]	@ (800e480 <USBD_CDC_Init+0x1ec>)
 800e3dc:	7819      	ldrb	r1, [r3, #0]
 800e3de:	2308      	movs	r3, #8
 800e3e0:	2203      	movs	r2, #3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f007 fa6f 	bl	80158c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e3e8:	4b25      	ldr	r3, [pc, #148]	@ (800e480 <USBD_CDC_Init+0x1ec>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 020f 	and.w	r2, r3, #15
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	440b      	add	r3, r1
 800e3fc:	3324      	adds	r3, #36	@ 0x24
 800e3fe:	2201      	movs	r2, #1
 800e400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	33b0      	adds	r3, #176	@ 0xb0
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e434:	2b00      	cmp	r3, #0
 800e436:	d101      	bne.n	800e43c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e438:	2302      	movs	r3, #2
 800e43a:	e018      	b.n	800e46e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	7c1b      	ldrb	r3, [r3, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e444:	4b0d      	ldr	r3, [pc, #52]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e446:	7819      	ldrb	r1, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e44e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f007 fb26 	bl	8015aa4 <USBD_LL_PrepareReceive>
 800e458:	e008      	b.n	800e46c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e45a:	4b08      	ldr	r3, [pc, #32]	@ (800e47c <USBD_CDC_Init+0x1e8>)
 800e45c:	7819      	ldrb	r1, [r3, #0]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e464:	2340      	movs	r3, #64	@ 0x40
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f007 fb1c 	bl	8015aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	2000009f 	.word	0x2000009f
 800e47c:	200000a0 	.word	0x200000a0
 800e480:	200000a1 	.word	0x200000a1

0800e484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	460b      	mov	r3, r1
 800e48e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e490:	4b3a      	ldr	r3, [pc, #232]	@ (800e57c <USBD_CDC_DeInit+0xf8>)
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f007 fa3b 	bl	8015912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e49c:	4b37      	ldr	r3, [pc, #220]	@ (800e57c <USBD_CDC_DeInit+0xf8>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f003 020f 	and.w	r2, r3, #15
 800e4a4:	6879      	ldr	r1, [r7, #4]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	440b      	add	r3, r1
 800e4b0:	3324      	adds	r3, #36	@ 0x24
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e4b6:	4b32      	ldr	r3, [pc, #200]	@ (800e580 <USBD_CDC_DeInit+0xfc>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f007 fa28 	bl	8015912 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e4c2:	4b2f      	ldr	r3, [pc, #188]	@ (800e580 <USBD_CDC_DeInit+0xfc>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	f003 020f 	and.w	r2, r3, #15
 800e4ca:	6879      	ldr	r1, [r7, #4]
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	440b      	add	r3, r1
 800e4d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e4da:	2200      	movs	r2, #0
 800e4dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e4de:	4b29      	ldr	r3, [pc, #164]	@ (800e584 <USBD_CDC_DeInit+0x100>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f007 fa14 	bl	8015912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e4ea:	4b26      	ldr	r3, [pc, #152]	@ (800e584 <USBD_CDC_DeInit+0x100>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	f003 020f 	and.w	r2, r3, #15
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	440b      	add	r3, r1
 800e4fe:	3324      	adds	r3, #36	@ 0x24
 800e500:	2200      	movs	r2, #0
 800e502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e504:	4b1f      	ldr	r3, [pc, #124]	@ (800e584 <USBD_CDC_DeInit+0x100>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	f003 020f 	and.w	r2, r3, #15
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	4613      	mov	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	440b      	add	r3, r1
 800e518:	3326      	adds	r3, #38	@ 0x26
 800e51a:	2200      	movs	r2, #0
 800e51c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	32b0      	adds	r2, #176	@ 0xb0
 800e528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d01f      	beq.n	800e570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	33b0      	adds	r3, #176	@ 0xb0
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	32b0      	adds	r2, #176	@ 0xb0
 800e54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e552:	4618      	mov	r0, r3
 800e554:	f007 fb1e 	bl	8015b94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	32b0      	adds	r2, #176	@ 0xb0
 800e562:	2100      	movs	r1, #0
 800e564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	2000009f 	.word	0x2000009f
 800e580:	200000a0 	.word	0x200000a0
 800e584:	200000a1 	.word	0x200000a1

0800e588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	32b0      	adds	r2, #176	@ 0xb0
 800e59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e5b4:	2303      	movs	r3, #3
 800e5b6:	e0bf      	b.n	800e738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d050      	beq.n	800e666 <USBD_CDC_Setup+0xde>
 800e5c4:	2b20      	cmp	r3, #32
 800e5c6:	f040 80af 	bne.w	800e728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	88db      	ldrh	r3, [r3, #6]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d03a      	beq.n	800e648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	b25b      	sxtb	r3, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	da1b      	bge.n	800e614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	33b0      	adds	r3, #176	@ 0xb0
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e5f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	88d2      	ldrh	r2, [r2, #6]
 800e5f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	88db      	ldrh	r3, [r3, #6]
 800e5fe:	2b07      	cmp	r3, #7
 800e600:	bf28      	it	cs
 800e602:	2307      	movcs	r3, #7
 800e604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	89fa      	ldrh	r2, [r7, #14]
 800e60a:	4619      	mov	r1, r3
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f001 fd1f 	bl	8010050 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e612:	e090      	b.n	800e736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	785a      	ldrb	r2, [r3, #1]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	88db      	ldrh	r3, [r3, #6]
 800e622:	2b3f      	cmp	r3, #63	@ 0x3f
 800e624:	d803      	bhi.n	800e62e <USBD_CDC_Setup+0xa6>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	88db      	ldrh	r3, [r3, #6]
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	e000      	b.n	800e630 <USBD_CDC_Setup+0xa8>
 800e62e:	2240      	movs	r2, #64	@ 0x40
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e636:	6939      	ldr	r1, [r7, #16]
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e63e:	461a      	mov	r2, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f001 fd31 	bl	80100a8 <USBD_CtlPrepareRx>
      break;
 800e646:	e076      	b.n	800e736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	33b0      	adds	r3, #176	@ 0xb0
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	7850      	ldrb	r0, [r2, #1]
 800e65e:	2200      	movs	r2, #0
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	4798      	blx	r3
      break;
 800e664:	e067      	b.n	800e736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	2b0b      	cmp	r3, #11
 800e66c:	d851      	bhi.n	800e712 <USBD_CDC_Setup+0x18a>
 800e66e:	a201      	add	r2, pc, #4	@ (adr r2, 800e674 <USBD_CDC_Setup+0xec>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e6a5 	.word	0x0800e6a5
 800e678:	0800e721 	.word	0x0800e721
 800e67c:	0800e713 	.word	0x0800e713
 800e680:	0800e713 	.word	0x0800e713
 800e684:	0800e713 	.word	0x0800e713
 800e688:	0800e713 	.word	0x0800e713
 800e68c:	0800e713 	.word	0x0800e713
 800e690:	0800e713 	.word	0x0800e713
 800e694:	0800e713 	.word	0x0800e713
 800e698:	0800e713 	.word	0x0800e713
 800e69c:	0800e6cf 	.word	0x0800e6cf
 800e6a0:	0800e6f9 	.word	0x0800e6f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b03      	cmp	r3, #3
 800e6ae:	d107      	bne.n	800e6c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e6b0:	f107 030a 	add.w	r3, r7, #10
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f001 fcc9 	bl	8010050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6be:	e032      	b.n	800e726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f001 fc53 	bl	800ff6e <USBD_CtlError>
            ret = USBD_FAIL;
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	75fb      	strb	r3, [r7, #23]
          break;
 800e6cc:	e02b      	b.n	800e726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b03      	cmp	r3, #3
 800e6d8:	d107      	bne.n	800e6ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e6da:	f107 030d 	add.w	r3, r7, #13
 800e6de:	2201      	movs	r2, #1
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f001 fcb4 	bl	8010050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6e8:	e01d      	b.n	800e726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f001 fc3e 	bl	800ff6e <USBD_CtlError>
            ret = USBD_FAIL;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	75fb      	strb	r3, [r7, #23]
          break;
 800e6f6:	e016      	b.n	800e726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b03      	cmp	r3, #3
 800e702:	d00f      	beq.n	800e724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f001 fc31 	bl	800ff6e <USBD_CtlError>
            ret = USBD_FAIL;
 800e70c:	2303      	movs	r3, #3
 800e70e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e710:	e008      	b.n	800e724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 fc2a 	bl	800ff6e <USBD_CtlError>
          ret = USBD_FAIL;
 800e71a:	2303      	movs	r3, #3
 800e71c:	75fb      	strb	r3, [r7, #23]
          break;
 800e71e:	e002      	b.n	800e726 <USBD_CDC_Setup+0x19e>
          break;
 800e720:	bf00      	nop
 800e722:	e008      	b.n	800e736 <USBD_CDC_Setup+0x1ae>
          break;
 800e724:	bf00      	nop
      }
      break;
 800e726:	e006      	b.n	800e736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f001 fc1f 	bl	800ff6e <USBD_CtlError>
      ret = USBD_FAIL;
 800e730:	2303      	movs	r3, #3
 800e732:	75fb      	strb	r3, [r7, #23]
      break;
 800e734:	bf00      	nop
  }

  return (uint8_t)ret;
 800e736:	7dfb      	ldrb	r3, [r7, #23]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	460b      	mov	r3, r1
 800e74a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	32b0      	adds	r2, #176	@ 0xb0
 800e75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d101      	bne.n	800e76a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e766:	2303      	movs	r3, #3
 800e768:	e065      	b.n	800e836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	32b0      	adds	r2, #176	@ 0xb0
 800e774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e77a:	78fb      	ldrb	r3, [r7, #3]
 800e77c:	f003 020f 	and.w	r2, r3, #15
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	4613      	mov	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	4413      	add	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	440b      	add	r3, r1
 800e78c:	3318      	adds	r3, #24
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d02f      	beq.n	800e7f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	f003 020f 	and.w	r2, r3, #15
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	4613      	mov	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	3318      	adds	r3, #24
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	78fb      	ldrb	r3, [r7, #3]
 800e7ac:	f003 010f 	and.w	r1, r3, #15
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	440b      	add	r3, r1
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	4403      	add	r3, r0
 800e7bc:	3320      	adds	r3, #32
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7c4:	fb01 f303 	mul.w	r3, r1, r3
 800e7c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d112      	bne.n	800e7f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e7ce:	78fb      	ldrb	r3, [r7, #3]
 800e7d0:	f003 020f 	and.w	r2, r3, #15
 800e7d4:	6879      	ldr	r1, [r7, #4]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	440b      	add	r3, r1
 800e7e0:	3318      	adds	r3, #24
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e7e6:	78f9      	ldrb	r1, [r7, #3]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f007 f938 	bl	8015a62 <USBD_LL_Transmit>
 800e7f2:	e01f      	b.n	800e834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	33b0      	adds	r3, #176	@ 0xb0
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d010      	beq.n	800e834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	33b0      	adds	r3, #176	@ 0xb0
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e830:	78fa      	ldrb	r2, [r7, #3]
 800e832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	32b0      	adds	r2, #176	@ 0xb0
 800e854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	32b0      	adds	r2, #176	@ 0xb0
 800e864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d101      	bne.n	800e870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e86c:	2303      	movs	r3, #3
 800e86e:	e01a      	b.n	800e8a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e870:	78fb      	ldrb	r3, [r7, #3]
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f007 f936 	bl	8015ae6 <USBD_LL_GetRxDataSize>
 800e87a:	4602      	mov	r2, r0
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	33b0      	adds	r3, #176	@ 0xb0
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	4413      	add	r3, r2
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e8a0:	4611      	mov	r1, r2
 800e8a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	32b0      	adds	r2, #176	@ 0xb0
 800e8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d101      	bne.n	800e8d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	e024      	b.n	800e91a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	33b0      	adds	r3, #176	@ 0xb0
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d019      	beq.n	800e918 <USBD_CDC_EP0_RxReady+0x6a>
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e8ea:	2bff      	cmp	r3, #255	@ 0xff
 800e8ec:	d014      	beq.n	800e918 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	33b0      	adds	r3, #176	@ 0xb0
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e90e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	22ff      	movs	r2, #255	@ 0xff
 800e914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e92c:	2182      	movs	r1, #130	@ 0x82
 800e92e:	4818      	ldr	r0, [pc, #96]	@ (800e990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e930:	f000 fcbd 	bl	800f2ae <USBD_GetEpDesc>
 800e934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e936:	2101      	movs	r1, #1
 800e938:	4815      	ldr	r0, [pc, #84]	@ (800e990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e93a:	f000 fcb8 	bl	800f2ae <USBD_GetEpDesc>
 800e93e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e940:	2181      	movs	r1, #129	@ 0x81
 800e942:	4813      	ldr	r0, [pc, #76]	@ (800e990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e944:	f000 fcb3 	bl	800f2ae <USBD_GetEpDesc>
 800e948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	2210      	movs	r2, #16
 800e954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d006      	beq.n	800e96a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	2200      	movs	r2, #0
 800e960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e964:	711a      	strb	r2, [r3, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d006      	beq.n	800e97e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e978:	711a      	strb	r2, [r3, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2243      	movs	r2, #67	@ 0x43
 800e982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e984:	4b02      	ldr	r3, [pc, #8]	@ (800e990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	2000005c 	.word	0x2000005c

0800e994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e99c:	2182      	movs	r1, #130	@ 0x82
 800e99e:	4818      	ldr	r0, [pc, #96]	@ (800ea00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9a0:	f000 fc85 	bl	800f2ae <USBD_GetEpDesc>
 800e9a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e9a6:	2101      	movs	r1, #1
 800e9a8:	4815      	ldr	r0, [pc, #84]	@ (800ea00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9aa:	f000 fc80 	bl	800f2ae <USBD_GetEpDesc>
 800e9ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e9b0:	2181      	movs	r1, #129	@ 0x81
 800e9b2:	4813      	ldr	r0, [pc, #76]	@ (800ea00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e9b4:	f000 fc7b 	bl	800f2ae <USBD_GetEpDesc>
 800e9b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d002      	beq.n	800e9c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2210      	movs	r2, #16
 800e9c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d006      	beq.n	800e9da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	711a      	strb	r2, [r3, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f042 0202 	orr.w	r2, r2, #2
 800e9d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	711a      	strb	r2, [r3, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f042 0202 	orr.w	r2, r2, #2
 800e9ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2243      	movs	r2, #67	@ 0x43
 800e9f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ea00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3718      	adds	r7, #24
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	2000005c 	.word	0x2000005c

0800ea04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea0c:	2182      	movs	r1, #130	@ 0x82
 800ea0e:	4818      	ldr	r0, [pc, #96]	@ (800ea70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea10:	f000 fc4d 	bl	800f2ae <USBD_GetEpDesc>
 800ea14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea16:	2101      	movs	r1, #1
 800ea18:	4815      	ldr	r0, [pc, #84]	@ (800ea70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea1a:	f000 fc48 	bl	800f2ae <USBD_GetEpDesc>
 800ea1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea20:	2181      	movs	r1, #129	@ 0x81
 800ea22:	4813      	ldr	r0, [pc, #76]	@ (800ea70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ea24:	f000 fc43 	bl	800f2ae <USBD_GetEpDesc>
 800ea28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	2210      	movs	r2, #16
 800ea34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d006      	beq.n	800ea4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea44:	711a      	strb	r2, [r3, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d006      	beq.n	800ea5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea58:	711a      	strb	r2, [r3, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2243      	movs	r2, #67	@ 0x43
 800ea62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea64:	4b02      	ldr	r3, [pc, #8]	@ (800ea70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	2000005c 	.word	0x2000005c

0800ea74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	220a      	movs	r2, #10
 800ea80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea82:	4b03      	ldr	r3, [pc, #12]	@ (800ea90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	20000018 	.word	0x20000018

0800ea94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	e009      	b.n	800eabc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	33b0      	adds	r3, #176	@ 0xb0
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4413      	add	r3, r2
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	32b0      	adds	r2, #176	@ 0xb0
 800eade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e008      	b.n	800eb00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	371c      	adds	r7, #28
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	32b0      	adds	r2, #176	@ 0xb0
 800eb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	e004      	b.n	800eb3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	32b0      	adds	r2, #176	@ 0xb0
 800eb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800eb60:	2301      	movs	r3, #1
 800eb62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	e025      	b.n	800ebba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d11f      	bne.n	800ebb8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eb80:	4b10      	ldr	r3, [pc, #64]	@ (800ebc4 <USBD_CDC_TransmitPacket+0x7c>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 020f 	and.w	r2, r3, #15
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4403      	add	r3, r0
 800eb9a:	3318      	adds	r3, #24
 800eb9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800eb9e:	4b09      	ldr	r3, [pc, #36]	@ (800ebc4 <USBD_CDC_TransmitPacket+0x7c>)
 800eba0:	7819      	ldrb	r1, [r3, #0]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f006 ff57 	bl	8015a62 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	2000009f 	.word	0x2000009f

0800ebc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	32b0      	adds	r2, #176	@ 0xb0
 800ebda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	32b0      	adds	r2, #176	@ 0xb0
 800ebea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d101      	bne.n	800ebf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	e018      	b.n	800ec28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	7c1b      	ldrb	r3, [r3, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10a      	bne.n	800ec14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ec30 <USBD_CDC_ReceivePacket+0x68>)
 800ec00:	7819      	ldrb	r1, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f006 ff49 	bl	8015aa4 <USBD_LL_PrepareReceive>
 800ec12:	e008      	b.n	800ec26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ec14:	4b06      	ldr	r3, [pc, #24]	@ (800ec30 <USBD_CDC_ReceivePacket+0x68>)
 800ec16:	7819      	ldrb	r1, [r3, #0]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec1e:	2340      	movs	r3, #64	@ 0x40
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f006 ff3f 	bl	8015aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	200000a0 	.word	0x200000a0

0800ec34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e01f      	b.n	800ec8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	79fa      	ldrb	r2, [r7, #7]
 800ec7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f006 fda3 	bl	80157cc <USBD_LL_Init>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	e025      	b.n	800ecf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	32ae      	adds	r2, #174	@ 0xae
 800ecbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00f      	beq.n	800ece8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	32ae      	adds	r2, #174	@ 0xae
 800ecd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd8:	f107 020e 	add.w	r2, r7, #14
 800ecdc:	4610      	mov	r0, r2
 800ecde:	4798      	blx	r3
 800ece0:	4602      	mov	r2, r0
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f006 fdc1 	bl	8015890 <USBD_LL_Start>
 800ed0e:	4603      	mov	r3, r0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ed20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	460b      	mov	r3, r1
 800ed38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	78fa      	ldrb	r2, [r7, #3]
 800ed52:	4611      	mov	r1, r2
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	4798      	blx	r3
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	460b      	mov	r3, r1
 800ed70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	78fa      	ldrb	r2, [r7, #3]
 800ed80:	4611      	mov	r1, r2
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	4798      	blx	r3
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800edaa:	6839      	ldr	r1, [r7, #0]
 800edac:	4618      	mov	r0, r3
 800edae:	f001 f8a4 	bl	800fefa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800edc0:	461a      	mov	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800edce:	f003 031f 	and.w	r3, r3, #31
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d01a      	beq.n	800ee0c <USBD_LL_SetupStage+0x72>
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d822      	bhi.n	800ee20 <USBD_LL_SetupStage+0x86>
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <USBD_LL_SetupStage+0x4a>
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d00a      	beq.n	800edf8 <USBD_LL_SetupStage+0x5e>
 800ede2:	e01d      	b.n	800ee20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fad1 	bl	800f394 <USBD_StdDevReq>
 800edf2:	4603      	mov	r3, r0
 800edf4:	73fb      	strb	r3, [r7, #15]
      break;
 800edf6:	e020      	b.n	800ee3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fb39 	bl	800f478 <USBD_StdItfReq>
 800ee06:	4603      	mov	r3, r0
 800ee08:	73fb      	strb	r3, [r7, #15]
      break;
 800ee0a:	e016      	b.n	800ee3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee12:	4619      	mov	r1, r3
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fb9b 	bl	800f550 <USBD_StdEPReq>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ee1e:	e00c      	b.n	800ee3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ee26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f006 fd8e 	bl	8015950 <USBD_LL_StallEP>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73fb      	strb	r3, [r7, #15]
      break;
 800ee38:	bf00      	nop
  }

  return ret;
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	607a      	str	r2, [r7, #4]
 800ee50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ee56:	7afb      	ldrb	r3, [r7, #11]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d16e      	bne.n	800ef3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ee62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	f040 8098 	bne.w	800efa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	689a      	ldr	r2, [r3, #8]
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d913      	bls.n	800eea4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	1ad2      	subs	r2, r2, r3
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	68da      	ldr	r2, [r3, #12]
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	4293      	cmp	r3, r2
 800ee94:	bf28      	it	cs
 800ee96:	4613      	movcs	r3, r2
 800ee98:	461a      	mov	r2, r3
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f001 f920 	bl	80100e2 <USBD_CtlContinueRx>
 800eea2:	e07d      	b.n	800efa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eeaa:	f003 031f 	and.w	r3, r3, #31
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	d014      	beq.n	800eedc <USBD_LL_DataOutStage+0x98>
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d81d      	bhi.n	800eef2 <USBD_LL_DataOutStage+0xae>
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <USBD_LL_DataOutStage+0x7c>
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d003      	beq.n	800eec6 <USBD_LL_DataOutStage+0x82>
 800eebe:	e018      	b.n	800eef2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eec0:	2300      	movs	r3, #0
 800eec2:	75bb      	strb	r3, [r7, #22]
            break;
 800eec4:	e018      	b.n	800eef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	4619      	mov	r1, r3
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f000 f9d2 	bl	800f27a <USBD_CoreFindIF>
 800eed6:	4603      	mov	r3, r0
 800eed8:	75bb      	strb	r3, [r7, #22]
            break;
 800eeda:	e00d      	b.n	800eef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	4619      	mov	r1, r3
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 f9d4 	bl	800f294 <USBD_CoreFindEP>
 800eeec:	4603      	mov	r3, r0
 800eeee:	75bb      	strb	r3, [r7, #22]
            break;
 800eef0:	e002      	b.n	800eef8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eef2:	2300      	movs	r3, #0
 800eef4:	75bb      	strb	r3, [r7, #22]
            break;
 800eef6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eef8:	7dbb      	ldrb	r3, [r7, #22]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d119      	bne.n	800ef32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d113      	bne.n	800ef32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ef0a:	7dba      	ldrb	r2, [r7, #22]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	32ae      	adds	r2, #174	@ 0xae
 800ef10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00b      	beq.n	800ef32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ef1a:	7dba      	ldrb	r2, [r7, #22]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ef22:	7dba      	ldrb	r2, [r7, #22]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	32ae      	adds	r2, #174	@ 0xae
 800ef28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f001 f8e6 	bl	8010104 <USBD_CtlSendStatus>
 800ef38:	e032      	b.n	800efa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ef3a:	7afb      	ldrb	r3, [r7, #11]
 800ef3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	4619      	mov	r1, r3
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 f9a5 	bl	800f294 <USBD_CoreFindEP>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef4e:	7dbb      	ldrb	r3, [r7, #22]
 800ef50:	2bff      	cmp	r3, #255	@ 0xff
 800ef52:	d025      	beq.n	800efa0 <USBD_LL_DataOutStage+0x15c>
 800ef54:	7dbb      	ldrb	r3, [r7, #22]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d122      	bne.n	800efa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d117      	bne.n	800ef96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ef66:	7dba      	ldrb	r2, [r7, #22]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	32ae      	adds	r2, #174	@ 0xae
 800ef6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00f      	beq.n	800ef96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ef76:	7dba      	ldrb	r2, [r7, #22]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ef7e:	7dba      	ldrb	r2, [r7, #22]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	32ae      	adds	r2, #174	@ 0xae
 800ef84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	7afa      	ldrb	r2, [r7, #11]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	4798      	blx	r3
 800ef92:	4603      	mov	r3, r0
 800ef94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ef9c:	7dfb      	ldrb	r3, [r7, #23]
 800ef9e:	e000      	b.n	800efa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b086      	sub	sp, #24
 800efae:	af00      	add	r7, sp, #0
 800efb0:	60f8      	str	r0, [r7, #12]
 800efb2:	460b      	mov	r3, r1
 800efb4:	607a      	str	r2, [r7, #4]
 800efb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800efb8:	7afb      	ldrb	r3, [r7, #11]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d16f      	bne.n	800f09e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3314      	adds	r3, #20
 800efc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d15a      	bne.n	800f084 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	689a      	ldr	r2, [r3, #8]
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d914      	bls.n	800f004 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	689a      	ldr	r2, [r3, #8]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	1ad2      	subs	r2, r2, r3
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	461a      	mov	r2, r3
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f001 f848 	bl	8010086 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eff6:	2300      	movs	r3, #0
 800eff8:	2200      	movs	r2, #0
 800effa:	2100      	movs	r1, #0
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f006 fd51 	bl	8015aa4 <USBD_LL_PrepareReceive>
 800f002:	e03f      	b.n	800f084 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	68da      	ldr	r2, [r3, #12]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d11c      	bne.n	800f04a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f018:	429a      	cmp	r2, r3
 800f01a:	d316      	bcc.n	800f04a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f026:	429a      	cmp	r2, r3
 800f028:	d20f      	bcs.n	800f04a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f02a:	2200      	movs	r2, #0
 800f02c:	2100      	movs	r1, #0
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f001 f829 	bl	8010086 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2200      	movs	r2, #0
 800f038:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f03c:	2300      	movs	r3, #0
 800f03e:	2200      	movs	r2, #0
 800f040:	2100      	movs	r1, #0
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f006 fd2e 	bl	8015aa4 <USBD_LL_PrepareReceive>
 800f048:	e01c      	b.n	800f084 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b03      	cmp	r3, #3
 800f054:	d10f      	bne.n	800f076 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d009      	beq.n	800f076 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f076:	2180      	movs	r1, #128	@ 0x80
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f006 fc69 	bl	8015950 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f001 f853 	bl	801012a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d03a      	beq.n	800f104 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7ff fe42 	bl	800ed18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f09c:	e032      	b.n	800f104 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f09e:	7afb      	ldrb	r3, [r7, #11]
 800f0a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f000 f8f3 	bl	800f294 <USBD_CoreFindEP>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0b2:	7dfb      	ldrb	r3, [r7, #23]
 800f0b4:	2bff      	cmp	r3, #255	@ 0xff
 800f0b6:	d025      	beq.n	800f104 <USBD_LL_DataInStage+0x15a>
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d122      	bne.n	800f104 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	d11c      	bne.n	800f104 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f0ca:	7dfa      	ldrb	r2, [r7, #23]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	32ae      	adds	r2, #174	@ 0xae
 800f0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d014      	beq.n	800f104 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f0da:	7dfa      	ldrb	r2, [r7, #23]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f0e2:	7dfa      	ldrb	r2, [r7, #23]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	32ae      	adds	r2, #174	@ 0xae
 800f0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	7afa      	ldrb	r2, [r7, #11]
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	4798      	blx	r3
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f0fa:	7dbb      	ldrb	r3, [r7, #22]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f100:	7dbb      	ldrb	r3, [r7, #22]
 800f102:	e000      	b.n	800f106 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3718      	adds	r7, #24
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f146:	2b00      	cmp	r3, #0
 800f148:	d014      	beq.n	800f174 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00e      	beq.n	800f174 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	6852      	ldr	r2, [r2, #4]
 800f162:	b2d2      	uxtb	r2, r2
 800f164:	4611      	mov	r1, r2
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	4798      	blx	r3
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f170:	2303      	movs	r3, #3
 800f172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f174:	2340      	movs	r3, #64	@ 0x40
 800f176:	2200      	movs	r2, #0
 800f178:	2100      	movs	r1, #0
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f006 fba3 	bl	80158c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2240      	movs	r2, #64	@ 0x40
 800f18c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f190:	2340      	movs	r3, #64	@ 0x40
 800f192:	2200      	movs	r2, #0
 800f194:	2180      	movs	r1, #128	@ 0x80
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f006 fb95 	bl	80158c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2240      	movs	r2, #64	@ 0x40
 800f1a6:	621a      	str	r2, [r3, #32]

  return ret;
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b083      	sub	sp, #12
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	78fa      	ldrb	r2, [r7, #3]
 800f1c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	2b04      	cmp	r3, #4
 800f1e4:	d006      	beq.n	800f1f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2204      	movs	r2, #4
 800f1f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f20a:	b480      	push	{r7}
 800f20c:	b083      	sub	sp, #12
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d106      	bne.n	800f22c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f224:	b2da      	uxtb	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b082      	sub	sp, #8
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d110      	bne.n	800f270 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f25e:	69db      	ldr	r3, [r3, #28]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	460b      	mov	r3, r1
 800f284:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f286:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	460b      	mov	r3, r1
 800f29e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b086      	sub	sp, #24
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	885b      	ldrh	r3, [r3, #2]
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	7812      	ldrb	r2, [r2, #0]
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d91f      	bls.n	800f314 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f2da:	e013      	b.n	800f304 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f2dc:	f107 030a 	add.w	r3, r7, #10
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	6978      	ldr	r0, [r7, #20]
 800f2e4:	f000 f81b 	bl	800f31e <USBD_GetNextDesc>
 800f2e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	785b      	ldrb	r3, [r3, #1]
 800f2ee:	2b05      	cmp	r3, #5
 800f2f0:	d108      	bne.n	800f304 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	789b      	ldrb	r3, [r3, #2]
 800f2fa:	78fa      	ldrb	r2, [r7, #3]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d008      	beq.n	800f312 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	885b      	ldrh	r3, [r3, #2]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	897b      	ldrh	r3, [r7, #10]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d8e5      	bhi.n	800f2dc <USBD_GetEpDesc+0x2e>
 800f310:	e000      	b.n	800f314 <USBD_GetEpDesc+0x66>
          break;
 800f312:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f314:	693b      	ldr	r3, [r7, #16]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f31e:	b480      	push	{r7}
 800f320:	b085      	sub	sp, #20
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	4413      	add	r3, r2
 800f336:	b29a      	uxth	r2, r3
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4413      	add	r3, r2
 800f346:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f348:	68fb      	ldr	r3, [r7, #12]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f356:	b480      	push	{r7}
 800f358:	b087      	sub	sp, #28
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	3301      	adds	r3, #1
 800f36c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f374:	8a3b      	ldrh	r3, [r7, #16]
 800f376:	021b      	lsls	r3, r3, #8
 800f378:	b21a      	sxth	r2, r3
 800f37a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f37e:	4313      	orrs	r3, r2
 800f380:	b21b      	sxth	r3, r3
 800f382:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f384:	89fb      	ldrh	r3, [r7, #14]
}
 800f386:	4618      	mov	r0, r3
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
	...

0800f394 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f3aa:	2b40      	cmp	r3, #64	@ 0x40
 800f3ac:	d005      	beq.n	800f3ba <USBD_StdDevReq+0x26>
 800f3ae:	2b40      	cmp	r3, #64	@ 0x40
 800f3b0:	d857      	bhi.n	800f462 <USBD_StdDevReq+0xce>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00f      	beq.n	800f3d6 <USBD_StdDevReq+0x42>
 800f3b6:	2b20      	cmp	r3, #32
 800f3b8:	d153      	bne.n	800f462 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	32ae      	adds	r2, #174	@ 0xae
 800f3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	4798      	blx	r3
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3d4:	e04a      	b.n	800f46c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	785b      	ldrb	r3, [r3, #1]
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d83b      	bhi.n	800f456 <USBD_StdDevReq+0xc2>
 800f3de:	a201      	add	r2, pc, #4	@ (adr r2, 800f3e4 <USBD_StdDevReq+0x50>)
 800f3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e4:	0800f439 	.word	0x0800f439
 800f3e8:	0800f44d 	.word	0x0800f44d
 800f3ec:	0800f457 	.word	0x0800f457
 800f3f0:	0800f443 	.word	0x0800f443
 800f3f4:	0800f457 	.word	0x0800f457
 800f3f8:	0800f417 	.word	0x0800f417
 800f3fc:	0800f40d 	.word	0x0800f40d
 800f400:	0800f457 	.word	0x0800f457
 800f404:	0800f42f 	.word	0x0800f42f
 800f408:	0800f421 	.word	0x0800f421
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f40c:	6839      	ldr	r1, [r7, #0]
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fa3c 	bl	800f88c <USBD_GetDescriptor>
          break;
 800f414:	e024      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 fbcb 	bl	800fbb4 <USBD_SetAddress>
          break;
 800f41e:	e01f      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f420:	6839      	ldr	r1, [r7, #0]
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fc0a 	bl	800fc3c <USBD_SetConfig>
 800f428:	4603      	mov	r3, r0
 800f42a:	73fb      	strb	r3, [r7, #15]
          break;
 800f42c:	e018      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fcad 	bl	800fd90 <USBD_GetConfig>
          break;
 800f436:	e013      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f438:	6839      	ldr	r1, [r7, #0]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fcde 	bl	800fdfc <USBD_GetStatus>
          break;
 800f440:	e00e      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 fd0d 	bl	800fe64 <USBD_SetFeature>
          break;
 800f44a:	e009      	b.n	800f460 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 fd31 	bl	800feb6 <USBD_ClrFeature>
          break;
 800f454:	e004      	b.n	800f460 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f456:	6839      	ldr	r1, [r7, #0]
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fd88 	bl	800ff6e <USBD_CtlError>
          break;
 800f45e:	bf00      	nop
      }
      break;
 800f460:	e004      	b.n	800f46c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f462:	6839      	ldr	r1, [r7, #0]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 fd82 	bl	800ff6e <USBD_CtlError>
      break;
 800f46a:	bf00      	nop
  }

  return ret;
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop

0800f478 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f48e:	2b40      	cmp	r3, #64	@ 0x40
 800f490:	d005      	beq.n	800f49e <USBD_StdItfReq+0x26>
 800f492:	2b40      	cmp	r3, #64	@ 0x40
 800f494:	d852      	bhi.n	800f53c <USBD_StdItfReq+0xc4>
 800f496:	2b00      	cmp	r3, #0
 800f498:	d001      	beq.n	800f49e <USBD_StdItfReq+0x26>
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d14e      	bne.n	800f53c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d840      	bhi.n	800f52e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	889b      	ldrh	r3, [r3, #4]
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d836      	bhi.n	800f524 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	889b      	ldrh	r3, [r3, #4]
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff fedb 	bl	800f27a <USBD_CoreFindIF>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f4c8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ca:	2bff      	cmp	r3, #255	@ 0xff
 800f4cc:	d01d      	beq.n	800f50a <USBD_StdItfReq+0x92>
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d11a      	bne.n	800f50a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f4d4:	7bba      	ldrb	r2, [r7, #14]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	32ae      	adds	r2, #174	@ 0xae
 800f4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00f      	beq.n	800f504 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f4e4:	7bba      	ldrb	r2, [r7, #14]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4ec:	7bba      	ldrb	r2, [r7, #14]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	32ae      	adds	r2, #174	@ 0xae
 800f4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	4798      	blx	r3
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f502:	e004      	b.n	800f50e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f504:	2303      	movs	r3, #3
 800f506:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f508:	e001      	b.n	800f50e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f50a:	2303      	movs	r3, #3
 800f50c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	88db      	ldrh	r3, [r3, #6]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d110      	bne.n	800f538 <USBD_StdItfReq+0xc0>
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10d      	bne.n	800f538 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fdf1 	bl	8010104 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f522:	e009      	b.n	800f538 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fd21 	bl	800ff6e <USBD_CtlError>
          break;
 800f52c:	e004      	b.n	800f538 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fd1c 	bl	800ff6e <USBD_CtlError>
          break;
 800f536:	e000      	b.n	800f53a <USBD_StdItfReq+0xc2>
          break;
 800f538:	bf00      	nop
      }
      break;
 800f53a:	e004      	b.n	800f546 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 fd15 	bl	800ff6e <USBD_CtlError>
      break;
 800f544:	bf00      	nop
  }

  return ret;
 800f546:	7bfb      	ldrb	r3, [r7, #15]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	889b      	ldrh	r3, [r3, #4]
 800f562:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f56c:	2b40      	cmp	r3, #64	@ 0x40
 800f56e:	d007      	beq.n	800f580 <USBD_StdEPReq+0x30>
 800f570:	2b40      	cmp	r3, #64	@ 0x40
 800f572:	f200 817f 	bhi.w	800f874 <USBD_StdEPReq+0x324>
 800f576:	2b00      	cmp	r3, #0
 800f578:	d02a      	beq.n	800f5d0 <USBD_StdEPReq+0x80>
 800f57a:	2b20      	cmp	r3, #32
 800f57c:	f040 817a 	bne.w	800f874 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f7ff fe85 	bl	800f294 <USBD_CoreFindEP>
 800f58a:	4603      	mov	r3, r0
 800f58c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f58e:	7b7b      	ldrb	r3, [r7, #13]
 800f590:	2bff      	cmp	r3, #255	@ 0xff
 800f592:	f000 8174 	beq.w	800f87e <USBD_StdEPReq+0x32e>
 800f596:	7b7b      	ldrb	r3, [r7, #13]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f040 8170 	bne.w	800f87e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f59e:	7b7a      	ldrb	r2, [r7, #13]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f5a6:	7b7a      	ldrb	r2, [r7, #13]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	32ae      	adds	r2, #174	@ 0xae
 800f5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 8163 	beq.w	800f87e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f5b8:	7b7a      	ldrb	r2, [r7, #13]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	32ae      	adds	r2, #174	@ 0xae
 800f5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	4798      	blx	r3
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f5ce:	e156      	b.n	800f87e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	785b      	ldrb	r3, [r3, #1]
 800f5d4:	2b03      	cmp	r3, #3
 800f5d6:	d008      	beq.n	800f5ea <USBD_StdEPReq+0x9a>
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	f300 8145 	bgt.w	800f868 <USBD_StdEPReq+0x318>
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 809b 	beq.w	800f71a <USBD_StdEPReq+0x1ca>
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d03c      	beq.n	800f662 <USBD_StdEPReq+0x112>
 800f5e8:	e13e      	b.n	800f868 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d002      	beq.n	800f5fc <USBD_StdEPReq+0xac>
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	d016      	beq.n	800f628 <USBD_StdEPReq+0xd8>
 800f5fa:	e02c      	b.n	800f656 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00d      	beq.n	800f61e <USBD_StdEPReq+0xce>
 800f602:	7bbb      	ldrb	r3, [r7, #14]
 800f604:	2b80      	cmp	r3, #128	@ 0x80
 800f606:	d00a      	beq.n	800f61e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f608:	7bbb      	ldrb	r3, [r7, #14]
 800f60a:	4619      	mov	r1, r3
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f006 f99f 	bl	8015950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f612:	2180      	movs	r1, #128	@ 0x80
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f006 f99b 	bl	8015950 <USBD_LL_StallEP>
 800f61a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f61c:	e020      	b.n	800f660 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fca4 	bl	800ff6e <USBD_CtlError>
              break;
 800f626:	e01b      	b.n	800f660 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	885b      	ldrh	r3, [r3, #2]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10e      	bne.n	800f64e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f630:	7bbb      	ldrb	r3, [r7, #14]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00b      	beq.n	800f64e <USBD_StdEPReq+0xfe>
 800f636:	7bbb      	ldrb	r3, [r7, #14]
 800f638:	2b80      	cmp	r3, #128	@ 0x80
 800f63a:	d008      	beq.n	800f64e <USBD_StdEPReq+0xfe>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	88db      	ldrh	r3, [r3, #6]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	4619      	mov	r1, r3
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f006 f981 	bl	8015950 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 fd58 	bl	8010104 <USBD_CtlSendStatus>

              break;
 800f654:	e004      	b.n	800f660 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 fc88 	bl	800ff6e <USBD_CtlError>
              break;
 800f65e:	bf00      	nop
          }
          break;
 800f660:	e107      	b.n	800f872 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d002      	beq.n	800f674 <USBD_StdEPReq+0x124>
 800f66e:	2b03      	cmp	r3, #3
 800f670:	d016      	beq.n	800f6a0 <USBD_StdEPReq+0x150>
 800f672:	e04b      	b.n	800f70c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f674:	7bbb      	ldrb	r3, [r7, #14]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00d      	beq.n	800f696 <USBD_StdEPReq+0x146>
 800f67a:	7bbb      	ldrb	r3, [r7, #14]
 800f67c:	2b80      	cmp	r3, #128	@ 0x80
 800f67e:	d00a      	beq.n	800f696 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f680:	7bbb      	ldrb	r3, [r7, #14]
 800f682:	4619      	mov	r1, r3
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f006 f963 	bl	8015950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f68a:	2180      	movs	r1, #128	@ 0x80
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f006 f95f 	bl	8015950 <USBD_LL_StallEP>
 800f692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f694:	e040      	b.n	800f718 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 fc68 	bl	800ff6e <USBD_CtlError>
              break;
 800f69e:	e03b      	b.n	800f718 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	885b      	ldrh	r3, [r3, #2]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d136      	bne.n	800f716 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f6a8:	7bbb      	ldrb	r3, [r7, #14]
 800f6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d004      	beq.n	800f6bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f6b2:	7bbb      	ldrb	r3, [r7, #14]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f006 f969 	bl	801598e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 fd21 	bl	8010104 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f6c2:	7bbb      	ldrb	r3, [r7, #14]
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff fde4 	bl	800f294 <USBD_CoreFindEP>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6d0:	7b7b      	ldrb	r3, [r7, #13]
 800f6d2:	2bff      	cmp	r3, #255	@ 0xff
 800f6d4:	d01f      	beq.n	800f716 <USBD_StdEPReq+0x1c6>
 800f6d6:	7b7b      	ldrb	r3, [r7, #13]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d11c      	bne.n	800f716 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f6dc:	7b7a      	ldrb	r2, [r7, #13]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f6e4:	7b7a      	ldrb	r2, [r7, #13]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	32ae      	adds	r2, #174	@ 0xae
 800f6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d010      	beq.n	800f716 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6f4:	7b7a      	ldrb	r2, [r7, #13]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	32ae      	adds	r2, #174	@ 0xae
 800f6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	4798      	blx	r3
 800f706:	4603      	mov	r3, r0
 800f708:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f70a:	e004      	b.n	800f716 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 fc2d 	bl	800ff6e <USBD_CtlError>
              break;
 800f714:	e000      	b.n	800f718 <USBD_StdEPReq+0x1c8>
              break;
 800f716:	bf00      	nop
          }
          break;
 800f718:	e0ab      	b.n	800f872 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b02      	cmp	r3, #2
 800f724:	d002      	beq.n	800f72c <USBD_StdEPReq+0x1dc>
 800f726:	2b03      	cmp	r3, #3
 800f728:	d032      	beq.n	800f790 <USBD_StdEPReq+0x240>
 800f72a:	e097      	b.n	800f85c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f72c:	7bbb      	ldrb	r3, [r7, #14]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d007      	beq.n	800f742 <USBD_StdEPReq+0x1f2>
 800f732:	7bbb      	ldrb	r3, [r7, #14]
 800f734:	2b80      	cmp	r3, #128	@ 0x80
 800f736:	d004      	beq.n	800f742 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fc17 	bl	800ff6e <USBD_CtlError>
                break;
 800f740:	e091      	b.n	800f866 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f746:	2b00      	cmp	r3, #0
 800f748:	da0b      	bge.n	800f762 <USBD_StdEPReq+0x212>
 800f74a:	7bbb      	ldrb	r3, [r7, #14]
 800f74c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	3310      	adds	r3, #16
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	4413      	add	r3, r2
 800f75e:	3304      	adds	r3, #4
 800f760:	e00b      	b.n	800f77a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f762:	7bbb      	ldrb	r3, [r7, #14]
 800f764:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f768:	4613      	mov	r3, r2
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	4413      	add	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	4413      	add	r3, r2
 800f778:	3304      	adds	r3, #4
 800f77a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2202      	movs	r2, #2
 800f786:	4619      	mov	r1, r3
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fc61 	bl	8010050 <USBD_CtlSendData>
              break;
 800f78e:	e06a      	b.n	800f866 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f794:	2b00      	cmp	r3, #0
 800f796:	da11      	bge.n	800f7bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	f003 020f 	and.w	r2, r3, #15
 800f79e:	6879      	ldr	r1, [r7, #4]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	440b      	add	r3, r1
 800f7aa:	3324      	adds	r3, #36	@ 0x24
 800f7ac:	881b      	ldrh	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d117      	bne.n	800f7e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fbda 	bl	800ff6e <USBD_CtlError>
                  break;
 800f7ba:	e054      	b.n	800f866 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f7bc:	7bbb      	ldrb	r3, [r7, #14]
 800f7be:	f003 020f 	and.w	r2, r3, #15
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f7d8:	6839      	ldr	r1, [r7, #0]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 fbc7 	bl	800ff6e <USBD_CtlError>
                  break;
 800f7e0:	e041      	b.n	800f866 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	da0b      	bge.n	800f802 <USBD_StdEPReq+0x2b2>
 800f7ea:	7bbb      	ldrb	r3, [r7, #14]
 800f7ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4413      	add	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	3310      	adds	r3, #16
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	3304      	adds	r3, #4
 800f800:	e00b      	b.n	800f81a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f802:	7bbb      	ldrb	r3, [r7, #14]
 800f804:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f808:	4613      	mov	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	4413      	add	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	4413      	add	r3, r2
 800f818:	3304      	adds	r3, #4
 800f81a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <USBD_StdEPReq+0x2d8>
 800f822:	7bbb      	ldrb	r3, [r7, #14]
 800f824:	2b80      	cmp	r3, #128	@ 0x80
 800f826:	d103      	bne.n	800f830 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	2200      	movs	r2, #0
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	e00e      	b.n	800f84e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	4619      	mov	r1, r3
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f006 f8c9 	bl	80159cc <USBD_LL_IsStallEP>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d003      	beq.n	800f848 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2201      	movs	r2, #1
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	e002      	b.n	800f84e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2200      	movs	r2, #0
 800f84c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2202      	movs	r2, #2
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fbfb 	bl	8010050 <USBD_CtlSendData>
              break;
 800f85a:	e004      	b.n	800f866 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fb85 	bl	800ff6e <USBD_CtlError>
              break;
 800f864:	bf00      	nop
          }
          break;
 800f866:	e004      	b.n	800f872 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fb7f 	bl	800ff6e <USBD_CtlError>
          break;
 800f870:	bf00      	nop
      }
      break;
 800f872:	e005      	b.n	800f880 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fb79 	bl	800ff6e <USBD_CtlError>
      break;
 800f87c:	e000      	b.n	800f880 <USBD_StdEPReq+0x330>
      break;
 800f87e:	bf00      	nop
  }

  return ret;
 800f880:	7bfb      	ldrb	r3, [r7, #15]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
	...

0800f88c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f896:	2300      	movs	r3, #0
 800f898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f89a:	2300      	movs	r3, #0
 800f89c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	885b      	ldrh	r3, [r3, #2]
 800f8a6:	0a1b      	lsrs	r3, r3, #8
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	2b0e      	cmp	r3, #14
 800f8ae:	f200 8152 	bhi.w	800fb56 <USBD_GetDescriptor+0x2ca>
 800f8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8b8 <USBD_GetDescriptor+0x2c>)
 800f8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b8:	0800f929 	.word	0x0800f929
 800f8bc:	0800f941 	.word	0x0800f941
 800f8c0:	0800f981 	.word	0x0800f981
 800f8c4:	0800fb57 	.word	0x0800fb57
 800f8c8:	0800fb57 	.word	0x0800fb57
 800f8cc:	0800faf7 	.word	0x0800faf7
 800f8d0:	0800fb23 	.word	0x0800fb23
 800f8d4:	0800fb57 	.word	0x0800fb57
 800f8d8:	0800fb57 	.word	0x0800fb57
 800f8dc:	0800fb57 	.word	0x0800fb57
 800f8e0:	0800fb57 	.word	0x0800fb57
 800f8e4:	0800fb57 	.word	0x0800fb57
 800f8e8:	0800fb57 	.word	0x0800fb57
 800f8ec:	0800fb57 	.word	0x0800fb57
 800f8f0:	0800f8f5 	.word	0x0800f8f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f8fa:	69db      	ldr	r3, [r3, #28]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00b      	beq.n	800f918 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f906:	69db      	ldr	r3, [r3, #28]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	7c12      	ldrb	r2, [r2, #16]
 800f90c:	f107 0108 	add.w	r1, r7, #8
 800f910:	4610      	mov	r0, r2
 800f912:	4798      	blx	r3
 800f914:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f916:	e126      	b.n	800fb66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 fb27 	bl	800ff6e <USBD_CtlError>
        err++;
 800f920:	7afb      	ldrb	r3, [r7, #11]
 800f922:	3301      	adds	r3, #1
 800f924:	72fb      	strb	r3, [r7, #11]
      break;
 800f926:	e11e      	b.n	800fb66 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	7c12      	ldrb	r2, [r2, #16]
 800f934:	f107 0108 	add.w	r1, r7, #8
 800f938:	4610      	mov	r0, r2
 800f93a:	4798      	blx	r3
 800f93c:	60f8      	str	r0, [r7, #12]
      break;
 800f93e:	e112      	b.n	800fb66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	7c1b      	ldrb	r3, [r3, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d10d      	bne.n	800f964 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f950:	f107 0208 	add.w	r2, r7, #8
 800f954:	4610      	mov	r0, r2
 800f956:	4798      	blx	r3
 800f958:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3301      	adds	r3, #1
 800f95e:	2202      	movs	r2, #2
 800f960:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f962:	e100      	b.n	800fb66 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f96c:	f107 0208 	add.w	r2, r7, #8
 800f970:	4610      	mov	r0, r2
 800f972:	4798      	blx	r3
 800f974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	3301      	adds	r3, #1
 800f97a:	2202      	movs	r2, #2
 800f97c:	701a      	strb	r2, [r3, #0]
      break;
 800f97e:	e0f2      	b.n	800fb66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	885b      	ldrh	r3, [r3, #2]
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b05      	cmp	r3, #5
 800f988:	f200 80ac 	bhi.w	800fae4 <USBD_GetDescriptor+0x258>
 800f98c:	a201      	add	r2, pc, #4	@ (adr r2, 800f994 <USBD_GetDescriptor+0x108>)
 800f98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f992:	bf00      	nop
 800f994:	0800f9ad 	.word	0x0800f9ad
 800f998:	0800f9e1 	.word	0x0800f9e1
 800f99c:	0800fa15 	.word	0x0800fa15
 800f9a0:	0800fa49 	.word	0x0800fa49
 800f9a4:	0800fa7d 	.word	0x0800fa7d
 800f9a8:	0800fab1 	.word	0x0800fab1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00b      	beq.n	800f9d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	7c12      	ldrb	r2, [r2, #16]
 800f9c4:	f107 0108 	add.w	r1, r7, #8
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4798      	blx	r3
 800f9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9ce:	e091      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f9d0:	6839      	ldr	r1, [r7, #0]
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 facb 	bl	800ff6e <USBD_CtlError>
            err++;
 800f9d8:	7afb      	ldrb	r3, [r7, #11]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f9de:	e089      	b.n	800faf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00b      	beq.n	800fa04 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	7c12      	ldrb	r2, [r2, #16]
 800f9f8:	f107 0108 	add.w	r1, r7, #8
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	4798      	blx	r3
 800fa00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa02:	e077      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fab1 	bl	800ff6e <USBD_CtlError>
            err++;
 800fa0c:	7afb      	ldrb	r3, [r7, #11]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	72fb      	strb	r3, [r7, #11]
          break;
 800fa12:	e06f      	b.n	800faf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00b      	beq.n	800fa38 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	7c12      	ldrb	r2, [r2, #16]
 800fa2c:	f107 0108 	add.w	r1, r7, #8
 800fa30:	4610      	mov	r0, r2
 800fa32:	4798      	blx	r3
 800fa34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa36:	e05d      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fa97 	bl	800ff6e <USBD_CtlError>
            err++;
 800fa40:	7afb      	ldrb	r3, [r7, #11]
 800fa42:	3301      	adds	r3, #1
 800fa44:	72fb      	strb	r3, [r7, #11]
          break;
 800fa46:	e055      	b.n	800faf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00b      	beq.n	800fa6c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	7c12      	ldrb	r2, [r2, #16]
 800fa60:	f107 0108 	add.w	r1, r7, #8
 800fa64:	4610      	mov	r0, r2
 800fa66:	4798      	blx	r3
 800fa68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa6a:	e043      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fa7d 	bl	800ff6e <USBD_CtlError>
            err++;
 800fa74:	7afb      	ldrb	r3, [r7, #11]
 800fa76:	3301      	adds	r3, #1
 800fa78:	72fb      	strb	r3, [r7, #11]
          break;
 800fa7a:	e03b      	b.n	800faf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa82:	695b      	ldr	r3, [r3, #20]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00b      	beq.n	800faa0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa8e:	695b      	ldr	r3, [r3, #20]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	7c12      	ldrb	r2, [r2, #16]
 800fa94:	f107 0108 	add.w	r1, r7, #8
 800fa98:	4610      	mov	r0, r2
 800fa9a:	4798      	blx	r3
 800fa9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa9e:	e029      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fa63 	bl	800ff6e <USBD_CtlError>
            err++;
 800faa8:	7afb      	ldrb	r3, [r7, #11]
 800faaa:	3301      	adds	r3, #1
 800faac:	72fb      	strb	r3, [r7, #11]
          break;
 800faae:	e021      	b.n	800faf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fab6:	699b      	ldr	r3, [r3, #24]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00b      	beq.n	800fad4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	7c12      	ldrb	r2, [r2, #16]
 800fac8:	f107 0108 	add.w	r1, r7, #8
 800facc:	4610      	mov	r0, r2
 800face:	4798      	blx	r3
 800fad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fad2:	e00f      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fad4:	6839      	ldr	r1, [r7, #0]
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fa49 	bl	800ff6e <USBD_CtlError>
            err++;
 800fadc:	7afb      	ldrb	r3, [r7, #11]
 800fade:	3301      	adds	r3, #1
 800fae0:	72fb      	strb	r3, [r7, #11]
          break;
 800fae2:	e007      	b.n	800faf4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 fa41 	bl	800ff6e <USBD_CtlError>
          err++;
 800faec:	7afb      	ldrb	r3, [r7, #11]
 800faee:	3301      	adds	r3, #1
 800faf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800faf2:	bf00      	nop
      }
      break;
 800faf4:	e037      	b.n	800fb66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7c1b      	ldrb	r3, [r3, #16]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d109      	bne.n	800fb12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb06:	f107 0208 	add.w	r2, r7, #8
 800fb0a:	4610      	mov	r0, r2
 800fb0c:	4798      	blx	r3
 800fb0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb10:	e029      	b.n	800fb66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 fa2a 	bl	800ff6e <USBD_CtlError>
        err++;
 800fb1a:	7afb      	ldrb	r3, [r7, #11]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	72fb      	strb	r3, [r7, #11]
      break;
 800fb20:	e021      	b.n	800fb66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	7c1b      	ldrb	r3, [r3, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10d      	bne.n	800fb46 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb32:	f107 0208 	add.w	r2, r7, #8
 800fb36:	4610      	mov	r0, r2
 800fb38:	4798      	blx	r3
 800fb3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	2207      	movs	r2, #7
 800fb42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb44:	e00f      	b.n	800fb66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fa10 	bl	800ff6e <USBD_CtlError>
        err++;
 800fb4e:	7afb      	ldrb	r3, [r7, #11]
 800fb50:	3301      	adds	r3, #1
 800fb52:	72fb      	strb	r3, [r7, #11]
      break;
 800fb54:	e007      	b.n	800fb66 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 fa08 	bl	800ff6e <USBD_CtlError>
      err++;
 800fb5e:	7afb      	ldrb	r3, [r7, #11]
 800fb60:	3301      	adds	r3, #1
 800fb62:	72fb      	strb	r3, [r7, #11]
      break;
 800fb64:	bf00      	nop
  }

  if (err != 0U)
 800fb66:	7afb      	ldrb	r3, [r7, #11]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d11e      	bne.n	800fbaa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	88db      	ldrh	r3, [r3, #6]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d016      	beq.n	800fba2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fb74:	893b      	ldrh	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	88da      	ldrh	r2, [r3, #6]
 800fb7e:	893b      	ldrh	r3, [r7, #8]
 800fb80:	4293      	cmp	r3, r2
 800fb82:	bf28      	it	cs
 800fb84:	4613      	movcs	r3, r2
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fb8a:	893b      	ldrh	r3, [r7, #8]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	68f9      	ldr	r1, [r7, #12]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fa5d 	bl	8010050 <USBD_CtlSendData>
 800fb96:	e009      	b.n	800fbac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f9e7 	bl	800ff6e <USBD_CtlError>
 800fba0:	e004      	b.n	800fbac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 faae 	bl	8010104 <USBD_CtlSendStatus>
 800fba8:	e000      	b.n	800fbac <USBD_GetDescriptor+0x320>
    return;
 800fbaa:	bf00      	nop
  }
}
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop

0800fbb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	889b      	ldrh	r3, [r3, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d131      	bne.n	800fc2a <USBD_SetAddress+0x76>
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	88db      	ldrh	r3, [r3, #6]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d12d      	bne.n	800fc2a <USBD_SetAddress+0x76>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	885b      	ldrh	r3, [r3, #2]
 800fbd2:	2b7f      	cmp	r3, #127	@ 0x7f
 800fbd4:	d829      	bhi.n	800fc2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	885b      	ldrh	r3, [r3, #2]
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d104      	bne.n	800fbf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f9bc 	bl	800ff6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbf6:	e01d      	b.n	800fc34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	7bfa      	ldrb	r2, [r7, #15]
 800fbfc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	4619      	mov	r1, r3
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f005 ff0d 	bl	8015a24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fa7a 	bl	8010104 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d004      	beq.n	800fc20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2202      	movs	r2, #2
 800fc1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc1e:	e009      	b.n	800fc34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc28:	e004      	b.n	800fc34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fc2a:	6839      	ldr	r1, [r7, #0]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f99e 	bl	800ff6e <USBD_CtlError>
  }
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	885b      	ldrh	r3, [r3, #2]
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	4b4e      	ldr	r3, [pc, #312]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fc52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc54:	4b4d      	ldr	r3, [pc, #308]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d905      	bls.n	800fc68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 f985 	bl	800ff6e <USBD_CtlError>
    return USBD_FAIL;
 800fc64:	2303      	movs	r3, #3
 800fc66:	e08c      	b.n	800fd82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d002      	beq.n	800fc7a <USBD_SetConfig+0x3e>
 800fc74:	2b03      	cmp	r3, #3
 800fc76:	d029      	beq.n	800fccc <USBD_SetConfig+0x90>
 800fc78:	e075      	b.n	800fd66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fc7a:	4b44      	ldr	r3, [pc, #272]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d020      	beq.n	800fcc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fc82:	4b42      	ldr	r3, [pc, #264]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	461a      	mov	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc8c:	4b3f      	ldr	r3, [pc, #252]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff f84b 	bl	800ed2e <USBD_SetClassConfig>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fc9c:	7bfb      	ldrb	r3, [r7, #15]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d008      	beq.n	800fcb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 f962 	bl	800ff6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2202      	movs	r2, #2
 800fcae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fcb2:	e065      	b.n	800fd80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fa25 	bl	8010104 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2203      	movs	r2, #3
 800fcbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fcc2:	e05d      	b.n	800fd80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 fa1d 	bl	8010104 <USBD_CtlSendStatus>
      break;
 800fcca:	e059      	b.n	800fd80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fccc:	4b2f      	ldr	r3, [pc, #188]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d112      	bne.n	800fcfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fcdc:	4b2b      	ldr	r3, [pc, #172]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fce6:	4b29      	ldr	r3, [pc, #164]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7ff f83a 	bl	800ed66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fa06 	bl	8010104 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fcf8:	e042      	b.n	800fd80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fcfa:	4b24      	ldr	r3, [pc, #144]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d02a      	beq.n	800fd5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7ff f828 	bl	800ed66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fd16:	4b1d      	ldr	r3, [pc, #116]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd20:	4b1a      	ldr	r3, [pc, #104]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	4619      	mov	r1, r3
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7ff f801 	bl	800ed2e <USBD_SetClassConfig>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00f      	beq.n	800fd56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f918 	bl	800ff6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff f80d 	bl	800ed66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2202      	movs	r2, #2
 800fd50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd54:	e014      	b.n	800fd80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f9d4 	bl	8010104 <USBD_CtlSendStatus>
      break;
 800fd5c:	e010      	b.n	800fd80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9d0 	bl	8010104 <USBD_CtlSendStatus>
      break;
 800fd64:	e00c      	b.n	800fd80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f900 	bl	800ff6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd6e:	4b07      	ldr	r3, [pc, #28]	@ (800fd8c <USBD_SetConfig+0x150>)
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	4619      	mov	r1, r3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fe fff6 	bl	800ed66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	73fb      	strb	r3, [r7, #15]
      break;
 800fd7e:	bf00      	nop
  }

  return ret;
 800fd80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20000f6c 	.word	0x20000f6c

0800fd90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	88db      	ldrh	r3, [r3, #6]
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d004      	beq.n	800fdac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 f8e2 	bl	800ff6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fdaa:	e023      	b.n	800fdf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	dc02      	bgt.n	800fdbe <USBD_GetConfig+0x2e>
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dc03      	bgt.n	800fdc4 <USBD_GetConfig+0x34>
 800fdbc:	e015      	b.n	800fdea <USBD_GetConfig+0x5a>
 800fdbe:	2b03      	cmp	r3, #3
 800fdc0:	d00b      	beq.n	800fdda <USBD_GetConfig+0x4a>
 800fdc2:	e012      	b.n	800fdea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	3308      	adds	r3, #8
 800fdce:	2201      	movs	r2, #1
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 f93c 	bl	8010050 <USBD_CtlSendData>
        break;
 800fdd8:	e00c      	b.n	800fdf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3304      	adds	r3, #4
 800fdde:	2201      	movs	r2, #1
 800fde0:	4619      	mov	r1, r3
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f934 	bl	8010050 <USBD_CtlSendData>
        break;
 800fde8:	e004      	b.n	800fdf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fdea:	6839      	ldr	r1, [r7, #0]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 f8be 	bl	800ff6e <USBD_CtlError>
        break;
 800fdf2:	bf00      	nop
}
 800fdf4:	bf00      	nop
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d81e      	bhi.n	800fe52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	88db      	ldrh	r3, [r3, #6]
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d004      	beq.n	800fe26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 f8a5 	bl	800ff6e <USBD_CtlError>
        break;
 800fe24:	e01a      	b.n	800fe5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d005      	beq.n	800fe42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	f043 0202 	orr.w	r2, r3, #2
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	330c      	adds	r3, #12
 800fe46:	2202      	movs	r2, #2
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f900 	bl	8010050 <USBD_CtlSendData>
      break;
 800fe50:	e004      	b.n	800fe5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fe52:	6839      	ldr	r1, [r7, #0]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 f88a 	bl	800ff6e <USBD_CtlError>
      break;
 800fe5a:	bf00      	nop
  }
}
 800fe5c:	bf00      	nop
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	885b      	ldrh	r3, [r3, #2]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d107      	bne.n	800fe86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2201      	movs	r2, #1
 800fe7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f940 	bl	8010104 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fe84:	e013      	b.n	800feae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	885b      	ldrh	r3, [r3, #2]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d10b      	bne.n	800fea6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	889b      	ldrh	r3, [r3, #4]
 800fe92:	0a1b      	lsrs	r3, r3, #8
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 f930 	bl	8010104 <USBD_CtlSendStatus>
}
 800fea4:	e003      	b.n	800feae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fea6:	6839      	ldr	r1, [r7, #0]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f860 	bl	800ff6e <USBD_CtlError>
}
 800feae:	bf00      	nop
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b082      	sub	sp, #8
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	3b01      	subs	r3, #1
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d80b      	bhi.n	800fee6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	885b      	ldrh	r3, [r3, #2]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d10c      	bne.n	800fef0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f910 	bl	8010104 <USBD_CtlSendStatus>
      }
      break;
 800fee4:	e004      	b.n	800fef0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fee6:	6839      	ldr	r1, [r7, #0]
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f840 	bl	800ff6e <USBD_CtlError>
      break;
 800feee:	e000      	b.n	800fef2 <USBD_ClrFeature+0x3c>
      break;
 800fef0:	bf00      	nop
  }
}
 800fef2:	bf00      	nop
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	781a      	ldrb	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3301      	adds	r3, #1
 800ff14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	781a      	ldrb	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3301      	adds	r3, #1
 800ff22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f7ff fa16 	bl	800f356 <SWAPBYTE>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	3301      	adds	r3, #1
 800ff36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f7ff fa09 	bl	800f356 <SWAPBYTE>
 800ff44:	4603      	mov	r3, r0
 800ff46:	461a      	mov	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	3301      	adds	r3, #1
 800ff56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff f9fc 	bl	800f356 <SWAPBYTE>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	461a      	mov	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	80da      	strh	r2, [r3, #6]
}
 800ff66:	bf00      	nop
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b082      	sub	sp, #8
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff78:	2180      	movs	r1, #128	@ 0x80
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f005 fce8 	bl	8015950 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff80:	2100      	movs	r1, #0
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f005 fce4 	bl	8015950 <USBD_LL_StallEP>
}
 800ff88:	bf00      	nop
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b086      	sub	sp, #24
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d036      	beq.n	8010014 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ffaa:	6938      	ldr	r0, [r7, #16]
 800ffac:	f000 f836 	bl	801001c <USBD_GetLen>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	005b      	lsls	r3, r3, #1
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
 800ffc0:	68ba      	ldr	r2, [r7, #8]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	7812      	ldrb	r2, [r2, #0]
 800ffc8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ffd0:	7dfb      	ldrb	r3, [r7, #23]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffda:	7dfb      	ldrb	r3, [r7, #23]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ffe0:	e013      	b.n	801000a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	7812      	ldrb	r2, [r2, #0]
 800ffec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	3301      	adds	r3, #1
 800fff2:	613b      	str	r3, [r7, #16]
    idx++;
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	3301      	adds	r3, #1
 800fff8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	4413      	add	r3, r2
 8010000:	2200      	movs	r2, #0
 8010002:	701a      	strb	r2, [r3, #0]
    idx++;
 8010004:	7dfb      	ldrb	r3, [r7, #23]
 8010006:	3301      	adds	r3, #1
 8010008:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1e7      	bne.n	800ffe2 <USBD_GetString+0x52>
 8010012:	e000      	b.n	8010016 <USBD_GetString+0x86>
    return;
 8010014:	bf00      	nop
  }
}
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010024:	2300      	movs	r3, #0
 8010026:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801002c:	e005      	b.n	801003a <USBD_GetLen+0x1e>
  {
    len++;
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	3301      	adds	r3, #1
 8010032:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	3301      	adds	r3, #1
 8010038:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1f5      	bne.n	801002e <USBD_GetLen+0x12>
  }

  return len;
 8010042:	7bfb      	ldrb	r3, [r7, #15]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2202      	movs	r2, #2
 8010060:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	68ba      	ldr	r2, [r7, #8]
 8010074:	2100      	movs	r1, #0
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f005 fcf3 	bl	8015a62 <USBD_LL_Transmit>

  return USBD_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b084      	sub	sp, #16
 801008a:	af00      	add	r7, sp, #0
 801008c:	60f8      	str	r0, [r7, #12]
 801008e:	60b9      	str	r1, [r7, #8]
 8010090:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	2100      	movs	r1, #0
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f005 fce2 	bl	8015a62 <USBD_LL_Transmit>

  return USBD_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2203      	movs	r2, #3
 80100b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	2100      	movs	r1, #0
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f005 fce6 	bl	8015aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	60f8      	str	r0, [r7, #12]
 80100ea:	60b9      	str	r1, [r7, #8]
 80100ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	2100      	movs	r1, #0
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f005 fcd5 	bl	8015aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2204      	movs	r2, #4
 8010110:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010114:	2300      	movs	r3, #0
 8010116:	2200      	movs	r2, #0
 8010118:	2100      	movs	r1, #0
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f005 fca1 	bl	8015a62 <USBD_LL_Transmit>

  return USBD_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b082      	sub	sp, #8
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2205      	movs	r2, #5
 8010136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801013a:	2300      	movs	r3, #0
 801013c:	2200      	movs	r2, #0
 801013e:	2100      	movs	r1, #0
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f005 fcaf 	bl	8015aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	2218      	movs	r2, #24
 8010160:	2100      	movs	r1, #0
 8010162:	4618      	mov	r0, r3
 8010164:	f001 fa21 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010168:	233f      	movs	r3, #63	@ 0x3f
 801016a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 801016c:	2381      	movs	r3, #129	@ 0x81
 801016e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010170:	1dfb      	adds	r3, r7, #7
 8010172:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010174:	2301      	movs	r3, #1
 8010176:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010178:	f107 0308 	add.w	r3, r7, #8
 801017c:	2100      	movs	r1, #0
 801017e:	4618      	mov	r0, r3
 8010180:	f001 fc9c 	bl	8011abc <hci_send_req>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	da01      	bge.n	801018e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 801018a:	23ff      	movs	r3, #255	@ 0xff
 801018c:	e000      	b.n	8010190 <aci_gap_set_non_discoverable+0x40>
  return status;
 801018e:	79fb      	ldrb	r3, [r7, #7]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3720      	adds	r7, #32
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8010198:	b5b0      	push	{r4, r5, r7, lr}
 801019a:	b0ce      	sub	sp, #312	@ 0x138
 801019c:	af00      	add	r7, sp, #0
 801019e:	4605      	mov	r5, r0
 80101a0:	460c      	mov	r4, r1
 80101a2:	4610      	mov	r0, r2
 80101a4:	4619      	mov	r1, r3
 80101a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80101ae:	462a      	mov	r2, r5
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80101ba:	4622      	mov	r2, r4
 80101bc:	801a      	strh	r2, [r3, #0]
 80101be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101c2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80101c6:	4602      	mov	r2, r0
 80101c8:	801a      	strh	r2, [r3, #0]
 80101ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101ce:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80101d2:	460a      	mov	r2, r1
 80101d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80101d6:	f107 0310 	add.w	r3, r7, #16
 80101da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80101de:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80101e2:	3308      	adds	r3, #8
 80101e4:	f107 0210 	add.w	r2, r7, #16
 80101e8:	4413      	add	r3, r2
 80101ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80101ee:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80101f2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80101f6:	4413      	add	r3, r2
 80101f8:	3309      	adds	r3, #9
 80101fa:	f107 0210 	add.w	r2, r7, #16
 80101fe:	4413      	add	r3, r2
 8010200:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010208:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801020c:	2200      	movs	r2, #0
 801020e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8010216:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801021a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801021e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8010222:	7812      	ldrb	r2, [r2, #0]
 8010224:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801022a:	3301      	adds	r3, #1
 801022c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8010230:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010234:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010238:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 801023c:	8812      	ldrh	r2, [r2, #0]
 801023e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8010242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010246:	3302      	adds	r3, #2
 8010248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 801024c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010250:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010254:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8010258:	8812      	ldrh	r2, [r2, #0]
 801025a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801025e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010262:	3302      	adds	r3, #2
 8010264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010268:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801026c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010270:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010274:	7812      	ldrb	r2, [r2, #0]
 8010276:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801027c:	3301      	adds	r3, #1
 801027e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8010282:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010286:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 801028a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801028c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010290:	3301      	adds	r3, #1
 8010292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801029a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801029e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80102a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80102a4:	3301      	adds	r3, #1
 80102a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80102aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80102ae:	3308      	adds	r3, #8
 80102b0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80102b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80102b8:	4618      	mov	r0, r3
 80102ba:	f001 f966 	bl	801158a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80102be:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80102c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80102c6:	4413      	add	r3, r2
 80102c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80102cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102d0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80102d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80102d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80102da:	3301      	adds	r3, #1
 80102dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80102e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102e4:	3301      	adds	r3, #1
 80102e6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80102ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80102ee:	4618      	mov	r0, r3
 80102f0:	f001 f94b 	bl	801158a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80102f4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80102f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80102fc:	4413      	add	r3, r2
 80102fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8010302:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010306:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 801030a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 801030c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010310:	3302      	adds	r3, #2
 8010312:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8010316:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801031a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 801031e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8010320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010324:	3302      	adds	r3, #2
 8010326:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801032a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801032e:	2218      	movs	r2, #24
 8010330:	2100      	movs	r1, #0
 8010332:	4618      	mov	r0, r3
 8010334:	f001 f939 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010338:	233f      	movs	r3, #63	@ 0x3f
 801033a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 801033e:	2383      	movs	r3, #131	@ 0x83
 8010340:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010344:	f107 0310 	add.w	r3, r7, #16
 8010348:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801034c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010350:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010354:	f107 030f 	add.w	r3, r7, #15
 8010358:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801035c:	2301      	movs	r3, #1
 801035e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010366:	2100      	movs	r1, #0
 8010368:	4618      	mov	r0, r3
 801036a:	f001 fba7 	bl	8011abc <hci_send_req>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	da01      	bge.n	8010378 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8010374:	23ff      	movs	r3, #255	@ 0xff
 8010376:	e004      	b.n	8010382 <aci_gap_set_discoverable+0x1ea>
  return status;
 8010378:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801037c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010380:	781b      	ldrb	r3, [r3, #0]
}
 8010382:	4618      	mov	r0, r3
 8010384:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8010388:	46bd      	mov	sp, r7
 801038a:	bdb0      	pop	{r4, r5, r7, pc}

0801038c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b0cc      	sub	sp, #304	@ 0x130
 8010390:	af00      	add	r7, sp, #0
 8010392:	4602      	mov	r2, r0
 8010394:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010398:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801039c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 801039e:	f107 0310 	add.w	r3, r7, #16
 80103a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80103a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80103aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80103ae:	2200      	movs	r2, #0
 80103b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80103b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80103bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80103c0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80103c4:	7812      	ldrb	r2, [r2, #0]
 80103c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80103c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103cc:	3301      	adds	r3, #1
 80103ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80103d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80103d6:	2218      	movs	r2, #24
 80103d8:	2100      	movs	r1, #0
 80103da:	4618      	mov	r0, r3
 80103dc:	f001 f8e5 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80103e0:	233f      	movs	r3, #63	@ 0x3f
 80103e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80103e6:	2385      	movs	r3, #133	@ 0x85
 80103e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80103ec:	f107 0310 	add.w	r3, r7, #16
 80103f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80103f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80103fc:	f107 030f 	add.w	r3, r7, #15
 8010400:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010404:	2301      	movs	r3, #1
 8010406:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801040a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801040e:	2100      	movs	r1, #0
 8010410:	4618      	mov	r0, r3
 8010412:	f001 fb53 	bl	8011abc <hci_send_req>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	da01      	bge.n	8010420 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 801041c:	23ff      	movs	r3, #255	@ 0xff
 801041e:	e004      	b.n	801042a <aci_gap_set_io_capability+0x9e>
  return status;
 8010420:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010424:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010428:	781b      	ldrb	r3, [r3, #0]
}
 801042a:	4618      	mov	r0, r3
 801042c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8010434:	b5b0      	push	{r4, r5, r7, lr}
 8010436:	b0cc      	sub	sp, #304	@ 0x130
 8010438:	af00      	add	r7, sp, #0
 801043a:	4605      	mov	r5, r0
 801043c:	460c      	mov	r4, r1
 801043e:	4610      	mov	r0, r2
 8010440:	4619      	mov	r1, r3
 8010442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010446:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801044a:	462a      	mov	r2, r5
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010452:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010456:	4622      	mov	r2, r4
 8010458:	701a      	strb	r2, [r3, #0]
 801045a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801045e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010462:	4602      	mov	r2, r0
 8010464:	701a      	strb	r2, [r3, #0]
 8010466:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801046a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801046e:	460a      	mov	r2, r1
 8010470:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8010472:	f107 0310 	add.w	r3, r7, #16
 8010476:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801047a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801047e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010482:	2200      	movs	r2, #0
 8010484:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010486:	2300      	movs	r3, #0
 8010488:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 801048c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010490:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010494:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010498:	7812      	ldrb	r2, [r2, #0]
 801049a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801049c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104a0:	3301      	adds	r3, #1
 80104a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80104a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104ae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80104b2:	7812      	ldrb	r2, [r2, #0]
 80104b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80104b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104ba:	3301      	adds	r3, #1
 80104bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80104c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104c8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80104cc:	7812      	ldrb	r2, [r2, #0]
 80104ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80104d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104d4:	3301      	adds	r3, #1
 80104d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80104da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80104e2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80104e6:	7812      	ldrb	r2, [r2, #0]
 80104e8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80104ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104ee:	3301      	adds	r3, #1
 80104f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80104f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104f8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80104fc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80104fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010502:	3301      	adds	r3, #1
 8010504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8010508:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801050c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8010510:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010516:	3301      	adds	r3, #1
 8010518:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 801051c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010520:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8010524:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801052a:	3301      	adds	r3, #1
 801052c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8010530:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010534:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8010538:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 801053c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010540:	3304      	adds	r3, #4
 8010542:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8010546:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801054a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801054e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8010550:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010554:	3301      	adds	r3, #1
 8010556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801055a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801055e:	2218      	movs	r2, #24
 8010560:	2100      	movs	r1, #0
 8010562:	4618      	mov	r0, r3
 8010564:	f001 f821 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010568:	233f      	movs	r3, #63	@ 0x3f
 801056a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801056e:	2386      	movs	r3, #134	@ 0x86
 8010570:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010574:	f107 0310 	add.w	r3, r7, #16
 8010578:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801057c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010580:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010584:	f107 030f 	add.w	r3, r7, #15
 8010588:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801058c:	2301      	movs	r3, #1
 801058e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010596:	2100      	movs	r1, #0
 8010598:	4618      	mov	r0, r3
 801059a:	f001 fa8f 	bl	8011abc <hci_send_req>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da01      	bge.n	80105a8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80105a4:	23ff      	movs	r3, #255	@ 0xff
 80105a6:	e004      	b.n	80105b2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80105a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80105b0:	781b      	ldrb	r3, [r3, #0]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bdb0      	pop	{r4, r5, r7, pc}

080105bc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b0cc      	sub	sp, #304	@ 0x130
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4602      	mov	r2, r0
 80105c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105c8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80105cc:	6019      	str	r1, [r3, #0]
 80105ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80105d6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80105d8:	f107 0310 	add.w	r3, r7, #16
 80105dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80105e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80105e8:	2200      	movs	r2, #0
 80105ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80105ec:	2300      	movs	r3, #0
 80105ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80105f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80105f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80105fa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80105fe:	8812      	ldrh	r2, [r2, #0]
 8010600:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010602:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010606:	3302      	adds	r3, #2
 8010608:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 801060c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010610:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010614:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010618:	6812      	ldr	r2, [r2, #0]
 801061a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801061e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010622:	3304      	adds	r3, #4
 8010624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010628:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801062c:	2218      	movs	r2, #24
 801062e:	2100      	movs	r1, #0
 8010630:	4618      	mov	r0, r3
 8010632:	f000 ffba 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010636:	233f      	movs	r3, #63	@ 0x3f
 8010638:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 801063c:	2388      	movs	r3, #136	@ 0x88
 801063e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010642:	f107 0310 	add.w	r3, r7, #16
 8010646:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801064a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801064e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010652:	f107 030f 	add.w	r3, r7, #15
 8010656:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801065a:	2301      	movs	r3, #1
 801065c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f001 fa28 	bl	8011abc <hci_send_req>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	da01      	bge.n	8010676 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8010672:	23ff      	movs	r3, #255	@ 0xff
 8010674:	e004      	b.n	8010680 <aci_gap_pass_key_resp+0xc4>
  return status;
 8010676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801067a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801067e:	781b      	ldrb	r3, [r3, #0]
}
 8010680:	4618      	mov	r0, r3
 8010682:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 801068a:	b590      	push	{r4, r7, lr}
 801068c:	b0cd      	sub	sp, #308	@ 0x134
 801068e:	af00      	add	r7, sp, #0
 8010690:	4604      	mov	r4, r0
 8010692:	4608      	mov	r0, r1
 8010694:	4611      	mov	r1, r2
 8010696:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801069a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801069e:	6013      	str	r3, [r2, #0]
 80106a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80106a8:	4622      	mov	r2, r4
 80106aa:	701a      	strb	r2, [r3, #0]
 80106ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80106b4:	4602      	mov	r2, r0
 80106b6:	701a      	strb	r2, [r3, #0]
 80106b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106bc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80106c0:	460a      	mov	r2, r1
 80106c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80106c4:	f107 0310 	add.w	r3, r7, #16
 80106c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80106cc:	f107 0308 	add.w	r3, r7, #8
 80106d0:	2207      	movs	r2, #7
 80106d2:	2100      	movs	r1, #0
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 ff68 	bl	80115aa <Osal_MemSet>
  int index_input = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80106e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80106e8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80106ec:	7812      	ldrb	r2, [r2, #0]
 80106ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80106f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106f4:	3301      	adds	r3, #1
 80106f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80106fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010702:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010706:	7812      	ldrb	r2, [r2, #0]
 8010708:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801070a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801070e:	3301      	adds	r3, #1
 8010710:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8010714:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010718:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801071c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010720:	7812      	ldrb	r2, [r2, #0]
 8010722:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010728:	3301      	adds	r3, #1
 801072a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801072e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010732:	2218      	movs	r2, #24
 8010734:	2100      	movs	r1, #0
 8010736:	4618      	mov	r0, r3
 8010738:	f000 ff37 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 801073c:	233f      	movs	r3, #63	@ 0x3f
 801073e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8010742:	238a      	movs	r3, #138	@ 0x8a
 8010744:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010748:	f107 0310 	add.w	r3, r7, #16
 801074c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010750:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010754:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8010758:	f107 0308 	add.w	r3, r7, #8
 801075c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010760:	2307      	movs	r3, #7
 8010762:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801076a:	2100      	movs	r1, #0
 801076c:	4618      	mov	r0, r3
 801076e:	f001 f9a5 	bl	8011abc <hci_send_req>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	da01      	bge.n	801077c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8010778:	23ff      	movs	r3, #255	@ 0xff
 801077a:	e02e      	b.n	80107da <aci_gap_init+0x150>
  if ( resp.Status )
 801077c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010780:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d005      	beq.n	8010796 <aci_gap_init+0x10c>
    return resp.Status;
 801078a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801078e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	e021      	b.n	80107da <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8010796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801079a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801079e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80107b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80107b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80107bc:	b29a      	uxth	r2, r3
 80107be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80107c2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80107c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80107cc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80107d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd90      	pop	{r4, r7, pc}

080107e4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b0cc      	sub	sp, #304	@ 0x130
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4602      	mov	r2, r0
 80107ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80107f4:	6019      	str	r1, [r3, #0]
 80107f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80107fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8010800:	f107 0310 	add.w	r3, r7, #16
 8010804:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010808:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801080c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010810:	2200      	movs	r2, #0
 8010812:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801081a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801081e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010822:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010826:	7812      	ldrb	r2, [r2, #0]
 8010828:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801082a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801082e:	3301      	adds	r3, #1
 8010830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8010834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010838:	1c58      	adds	r0, r3, #1
 801083a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801083e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010842:	781a      	ldrb	r2, [r3, #0]
 8010844:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010848:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801084c:	6819      	ldr	r1, [r3, #0]
 801084e:	f000 fe9c 	bl	801158a <Osal_MemCpy>
  index_input += AdvDataLen;
 8010852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010856:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010860:	4413      	add	r3, r2
 8010862:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801086a:	2218      	movs	r2, #24
 801086c:	2100      	movs	r1, #0
 801086e:	4618      	mov	r0, r3
 8010870:	f000 fe9b 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010874:	233f      	movs	r3, #63	@ 0x3f
 8010876:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801087a:	238e      	movs	r3, #142	@ 0x8e
 801087c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010880:	f107 0310 	add.w	r3, r7, #16
 8010884:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010888:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801088c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010890:	f107 030f 	add.w	r3, r7, #15
 8010894:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010898:	2301      	movs	r3, #1
 801089a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801089e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108a2:	2100      	movs	r1, #0
 80108a4:	4618      	mov	r0, r3
 80108a6:	f001 f909 	bl	8011abc <hci_send_req>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	da01      	bge.n	80108b4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80108b0:	23ff      	movs	r3, #255	@ 0xff
 80108b2:	e004      	b.n	80108be <aci_gap_update_adv_data+0xda>
  return status;
 80108b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80108bc:	781b      	ldrb	r3, [r3, #0]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b088      	sub	sp, #32
 80108cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80108d2:	f107 0308 	add.w	r3, r7, #8
 80108d6:	2218      	movs	r2, #24
 80108d8:	2100      	movs	r1, #0
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fe65 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80108e0:	233f      	movs	r3, #63	@ 0x3f
 80108e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80108e4:	2392      	movs	r3, #146	@ 0x92
 80108e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80108e8:	1dfb      	adds	r3, r7, #7
 80108ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80108ec:	2301      	movs	r3, #1
 80108ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80108f0:	f107 0308 	add.w	r3, r7, #8
 80108f4:	2100      	movs	r1, #0
 80108f6:	4618      	mov	r0, r3
 80108f8:	f001 f8e0 	bl	8011abc <hci_send_req>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	da01      	bge.n	8010906 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010902:	23ff      	movs	r3, #255	@ 0xff
 8010904:	e000      	b.n	8010908 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8010906:	79fb      	ldrb	r3, [r7, #7]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3720      	adds	r7, #32
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b0cc      	sub	sp, #304	@ 0x130
 8010914:	af00      	add	r7, sp, #0
 8010916:	4602      	mov	r2, r0
 8010918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801091c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010920:	801a      	strh	r2, [r3, #0]
 8010922:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010926:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801092a:	460a      	mov	r2, r1
 801092c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801092e:	f107 0310 	add.w	r3, r7, #16
 8010932:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801093a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801093e:	2200      	movs	r2, #0
 8010940:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010942:	2300      	movs	r3, #0
 8010944:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010948:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801094c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010950:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010954:	8812      	ldrh	r2, [r2, #0]
 8010956:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010958:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801095c:	3302      	adds	r3, #2
 801095e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010962:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010966:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801096a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801096e:	7812      	ldrb	r2, [r2, #0]
 8010970:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010976:	3301      	adds	r3, #1
 8010978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801097c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010980:	2218      	movs	r2, #24
 8010982:	2100      	movs	r1, #0
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fe10 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 801098a:	233f      	movs	r3, #63	@ 0x3f
 801098c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8010990:	23a5      	movs	r3, #165	@ 0xa5
 8010992:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010996:	f107 0310 	add.w	r3, r7, #16
 801099a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801099e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80109a6:	f107 030f 	add.w	r3, r7, #15
 80109aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80109ae:	2301      	movs	r3, #1
 80109b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80109b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80109b8:	2100      	movs	r1, #0
 80109ba:	4618      	mov	r0, r3
 80109bc:	f001 f87e 	bl	8011abc <hci_send_req>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	da01      	bge.n	80109ca <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80109c6:	23ff      	movs	r3, #255	@ 0xff
 80109c8:	e004      	b.n	80109d4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80109ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109d2:	781b      	ldrb	r3, [r3, #0]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b088      	sub	sp, #32
 80109e2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80109e8:	f107 0308 	add.w	r3, r7, #8
 80109ec:	2218      	movs	r2, #24
 80109ee:	2100      	movs	r1, #0
 80109f0:	4618      	mov	r0, r3
 80109f2:	f000 fdda 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80109f6:	233f      	movs	r3, #63	@ 0x3f
 80109f8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80109fa:	f240 1301 	movw	r3, #257	@ 0x101
 80109fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010a00:	1dfb      	adds	r3, r7, #7
 8010a02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010a04:	2301      	movs	r3, #1
 8010a06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a08:	f107 0308 	add.w	r3, r7, #8
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f001 f854 	bl	8011abc <hci_send_req>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	da01      	bge.n	8010a1e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8010a1a:	23ff      	movs	r3, #255	@ 0xff
 8010a1c:	e000      	b.n	8010a20 <aci_gatt_init+0x42>
  return status;
 8010a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3720      	adds	r7, #32
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010a28:	b590      	push	{r4, r7, lr}
 8010a2a:	b0cf      	sub	sp, #316	@ 0x13c
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010a34:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8010a38:	6001      	str	r1, [r0, #0]
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010a42:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010a46:	4622      	mov	r2, r4
 8010a48:	701a      	strb	r2, [r3, #0]
 8010a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010a4e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010a52:	4602      	mov	r2, r0
 8010a54:	701a      	strb	r2, [r3, #0]
 8010a56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010a5a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010a5e:	460a      	mov	r2, r1
 8010a60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010a62:	f107 0310 	add.w	r3, r7, #16
 8010a66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8010a6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010a6e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d00a      	beq.n	8010a8e <aci_gatt_add_service+0x66>
 8010a78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010a7c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	2b02      	cmp	r3, #2
 8010a84:	d101      	bne.n	8010a8a <aci_gatt_add_service+0x62>
 8010a86:	2311      	movs	r3, #17
 8010a88:	e002      	b.n	8010a90 <aci_gatt_add_service+0x68>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e000      	b.n	8010a90 <aci_gatt_add_service+0x68>
 8010a8e:	2303      	movs	r3, #3
 8010a90:	f107 0210 	add.w	r2, r7, #16
 8010a94:	4413      	add	r3, r2
 8010a96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010a9a:	f107 030c 	add.w	r3, r7, #12
 8010a9e:	2203      	movs	r2, #3
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 fd81 	bl	80115aa <Osal_MemSet>
  int index_input = 0;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8010aae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ab2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010ab6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8010aba:	7812      	ldrb	r2, [r2, #0]
 8010abc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8010ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010acc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d002      	beq.n	8010adc <aci_gatt_add_service+0xb4>
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d004      	beq.n	8010ae4 <aci_gatt_add_service+0xbc>
 8010ada:	e007      	b.n	8010aec <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8010adc:	2302      	movs	r3, #2
 8010ade:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010ae2:	e005      	b.n	8010af0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010ae4:	2310      	movs	r3, #16
 8010ae6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010aea:	e001      	b.n	8010af0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010aec:	2397      	movs	r3, #151	@ 0x97
 8010aee:	e06c      	b.n	8010bca <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010af0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010af4:	1c58      	adds	r0, r3, #1
 8010af6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8010afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010afe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010b02:	6819      	ldr	r1, [r3, #0]
 8010b04:	f000 fd41 	bl	801158a <Osal_MemCpy>
    index_input += size;
 8010b08:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010b0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010b10:	4413      	add	r3, r2
 8010b12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8010b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b1a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010b1e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010b22:	7812      	ldrb	r2, [r2, #0]
 8010b24:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010b38:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010b3c:	7812      	ldrb	r2, [r2, #0]
 8010b3e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b44:	3301      	adds	r3, #1
 8010b46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b4e:	2218      	movs	r2, #24
 8010b50:	2100      	movs	r1, #0
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 fd29 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b58:	233f      	movs	r3, #63	@ 0x3f
 8010b5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8010b5e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8010b62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010b66:	f107 0310 	add.w	r3, r7, #16
 8010b6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8010b76:	f107 030c 	add.w	r3, r7, #12
 8010b7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010b7e:	2303      	movs	r3, #3
 8010b80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b88:	2100      	movs	r1, #0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 ff96 	bl	8011abc <hci_send_req>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	da01      	bge.n	8010b9a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8010b96:	23ff      	movs	r3, #255	@ 0xff
 8010b98:	e017      	b.n	8010bca <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8010b9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010b9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d005      	beq.n	8010bb4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8010ba8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	e00a      	b.n	8010bca <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8010bb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010bc6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd90      	pop	{r4, r7, pc}

08010bd4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010bd4:	b590      	push	{r4, r7, lr}
 8010bd6:	b0d1      	sub	sp, #324	@ 0x144
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	4604      	mov	r4, r0
 8010bdc:	4608      	mov	r0, r1
 8010bde:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8010be2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010be6:	600a      	str	r2, [r1, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010bee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010bf2:	4622      	mov	r2, r4
 8010bf4:	801a      	strh	r2, [r3, #0]
 8010bf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010bfa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010bfe:	4602      	mov	r2, r0
 8010c00:	701a      	strb	r2, [r3, #0]
 8010c02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c06:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8010c0a:	460a      	mov	r2, r1
 8010c0c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010c0e:	f107 0318 	add.w	r3, r7, #24
 8010c12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010c16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c1a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d00a      	beq.n	8010c3a <aci_gatt_add_char+0x66>
 8010c24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c28:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b02      	cmp	r3, #2
 8010c30:	d101      	bne.n	8010c36 <aci_gatt_add_char+0x62>
 8010c32:	2313      	movs	r3, #19
 8010c34:	e002      	b.n	8010c3c <aci_gatt_add_char+0x68>
 8010c36:	2303      	movs	r3, #3
 8010c38:	e000      	b.n	8010c3c <aci_gatt_add_char+0x68>
 8010c3a:	2305      	movs	r3, #5
 8010c3c:	f107 0218 	add.w	r2, r7, #24
 8010c40:	4413      	add	r3, r2
 8010c42:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010c46:	f107 0314 	add.w	r3, r7, #20
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 fcab 	bl	80115aa <Osal_MemSet>
  int index_input = 0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8010c5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010c5e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010c62:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010c66:	8812      	ldrh	r2, [r2, #0]
 8010c68:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010c6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010c6e:	3302      	adds	r3, #2
 8010c70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010c74:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010c78:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010c7c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010c80:	7812      	ldrb	r2, [r2, #0]
 8010c82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010c84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010c88:	3301      	adds	r3, #1
 8010c8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010c8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d002      	beq.n	8010ca2 <aci_gatt_add_char+0xce>
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d004      	beq.n	8010caa <aci_gatt_add_char+0xd6>
 8010ca0:	e007      	b.n	8010cb2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010ca8:	e005      	b.n	8010cb6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8010caa:	2310      	movs	r3, #16
 8010cac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010cb0:	e001      	b.n	8010cb6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010cb2:	2397      	movs	r3, #151	@ 0x97
 8010cb4:	e091      	b.n	8010dda <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8010cb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010cba:	1cd8      	adds	r0, r3, #3
 8010cbc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8010cc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010cc4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010cc8:	6819      	ldr	r1, [r3, #0]
 8010cca:	f000 fc5e 	bl	801158a <Osal_MemCpy>
    index_input += size;
 8010cce:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8010cd2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ce0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010ce4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8010ce8:	8812      	ldrh	r2, [r2, #0]
 8010cea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010cec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010cf0:	3302      	adds	r3, #2
 8010cf2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010cf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010cfa:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010cfe:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010d00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d04:	3301      	adds	r3, #1
 8010d06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8010d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d0e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010d12:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010d14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d18:	3301      	adds	r3, #1
 8010d1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010d1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d22:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010d26:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010d28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010d32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d36:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8010d3a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010d3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d40:	3301      	adds	r3, #1
 8010d42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d4a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010d4e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010d50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d54:	3301      	adds	r3, #1
 8010d56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010d5a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010d5e:	2218      	movs	r2, #24
 8010d60:	2100      	movs	r1, #0
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 fc21 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010d68:	233f      	movs	r3, #63	@ 0x3f
 8010d6a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8010d6e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8010d72:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8010d76:	f107 0318 	add.w	r3, r7, #24
 8010d7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8010d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010d82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8010d86:	f107 0314 	add.w	r3, r7, #20
 8010d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8010d8e:	2303      	movs	r3, #3
 8010d90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010d98:	2100      	movs	r1, #0
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f000 fe8e 	bl	8011abc <hci_send_req>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	da01      	bge.n	8010daa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8010da6:	23ff      	movs	r3, #255	@ 0xff
 8010da8:	e017      	b.n	8010dda <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8010daa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8010db8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	e00a      	b.n	8010dda <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010dc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dcc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010dd6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010dd8:	2300      	movs	r3, #0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd90      	pop	{r4, r7, pc}

08010de4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010de4:	b5b0      	push	{r4, r5, r7, lr}
 8010de6:	b0cc      	sub	sp, #304	@ 0x130
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4605      	mov	r5, r0
 8010dec:	460c      	mov	r4, r1
 8010dee:	4610      	mov	r0, r2
 8010df0:	4619      	mov	r1, r3
 8010df2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010df6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010dfa:	462a      	mov	r2, r5
 8010dfc:	801a      	strh	r2, [r3, #0]
 8010dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010e02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e06:	4622      	mov	r2, r4
 8010e08:	801a      	strh	r2, [r3, #0]
 8010e0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010e0e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010e12:	4602      	mov	r2, r0
 8010e14:	701a      	strb	r2, [r3, #0]
 8010e16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010e1a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010e1e:	460a      	mov	r2, r1
 8010e20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010e22:	f107 0310 	add.w	r3, r7, #16
 8010e26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010e2e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010e32:	2200      	movs	r2, #0
 8010e34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010e44:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010e48:	8812      	ldrh	r2, [r2, #0]
 8010e4a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e50:	3302      	adds	r3, #2
 8010e52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8010e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010e5e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010e62:	8812      	ldrh	r2, [r2, #0]
 8010e64:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e6a:	3302      	adds	r3, #2
 8010e6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8010e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010e78:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8010e7c:	7812      	ldrb	r2, [r2, #0]
 8010e7e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e84:	3301      	adds	r3, #1
 8010e86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8010e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010e92:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8010e96:	7812      	ldrb	r2, [r2, #0]
 8010e98:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8010ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ea8:	1d98      	adds	r0, r3, #6
 8010eaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010eae:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010eba:	f000 fb66 	bl	801158a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8010ebe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ec2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010ecc:	4413      	add	r3, r2
 8010ece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ed2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ed6:	2218      	movs	r2, #24
 8010ed8:	2100      	movs	r1, #0
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 fb65 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010ee0:	233f      	movs	r3, #63	@ 0x3f
 8010ee2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8010ee6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8010eea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010eee:	f107 0310 	add.w	r3, r7, #16
 8010ef2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010efa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010efe:	f107 030f 	add.w	r3, r7, #15
 8010f02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010f06:	2301      	movs	r3, #1
 8010f08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010f0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010f10:	2100      	movs	r1, #0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f000 fdd2 	bl	8011abc <hci_send_req>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da01      	bge.n	8010f22 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010f1e:	23ff      	movs	r3, #255	@ 0xff
 8010f20:	e004      	b.n	8010f2c <aci_gatt_update_char_value+0x148>
  return status;
 8010f22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010f26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010f2a:	781b      	ldrb	r3, [r3, #0]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bdb0      	pop	{r4, r5, r7, pc}

08010f36 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b0cc      	sub	sp, #304	@ 0x130
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010f42:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010f46:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8010f48:	f107 0310 	add.w	r3, r7, #16
 8010f4c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010f50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010f54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010f58:	2200      	movs	r2, #0
 8010f5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010f66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010f6a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010f6e:	8812      	ldrh	r2, [r2, #0]
 8010f70:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010f76:	3302      	adds	r3, #2
 8010f78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010f80:	2218      	movs	r2, #24
 8010f82:	2100      	movs	r1, #0
 8010f84:	4618      	mov	r0, r3
 8010f86:	f000 fb10 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8010f8a:	233f      	movs	r3, #63	@ 0x3f
 8010f8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8010f90:	f240 1325 	movw	r3, #293	@ 0x125
 8010f94:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010f98:	f107 0310 	add.w	r3, r7, #16
 8010f9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010fa4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010fa8:	f107 030f 	add.w	r3, r7, #15
 8010fac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010fb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010fba:	2100      	movs	r1, #0
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f000 fd7d 	bl	8011abc <hci_send_req>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da01      	bge.n	8010fcc <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8010fc8:	23ff      	movs	r3, #255	@ 0xff
 8010fca:	e004      	b.n	8010fd6 <aci_gatt_confirm_indication+0xa0>
  return status;
 8010fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fd0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010fd4:	781b      	ldrb	r3, [r3, #0]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b0cc      	sub	sp, #304	@ 0x130
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010ff0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8010ff2:	f107 0310 	add.w	r3, r7, #16
 8010ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010ffa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ffe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011002:	2200      	movs	r2, #0
 8011004:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011006:	2300      	movs	r3, #0
 8011008:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801100c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011010:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011014:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8011018:	8812      	ldrh	r2, [r2, #0]
 801101a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801101c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011020:	3302      	adds	r3, #2
 8011022:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801102a:	2218      	movs	r2, #24
 801102c:	2100      	movs	r1, #0
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fabb 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8011034:	233f      	movs	r3, #63	@ 0x3f
 8011036:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801103a:	f240 1327 	movw	r3, #295	@ 0x127
 801103e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011042:	f107 0310 	add.w	r3, r7, #16
 8011046:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801104a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801104e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011052:	f107 030f 	add.w	r3, r7, #15
 8011056:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801105a:	2301      	movs	r3, #1
 801105c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011060:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011064:	2100      	movs	r1, #0
 8011066:	4618      	mov	r0, r3
 8011068:	f000 fd28 	bl	8011abc <hci_send_req>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	da01      	bge.n	8011076 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8011072:	23ff      	movs	r3, #255	@ 0xff
 8011074:	e004      	b.n	8011080 <aci_gatt_allow_read+0xa0>
  return status;
 8011076:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801107a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801107e:	781b      	ldrb	r3, [r3, #0]
}
 8011080:	4618      	mov	r0, r3
 8011082:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b0cc      	sub	sp, #304	@ 0x130
 801108e:	af00      	add	r7, sp, #0
 8011090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011094:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011098:	601a      	str	r2, [r3, #0]
 801109a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801109e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80110a2:	4602      	mov	r2, r0
 80110a4:	701a      	strb	r2, [r3, #0]
 80110a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110aa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80110ae:	460a      	mov	r2, r1
 80110b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80110b2:	f107 0310 	add.w	r3, r7, #16
 80110b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80110ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80110c2:	2200      	movs	r2, #0
 80110c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80110c6:	2300      	movs	r3, #0
 80110c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80110cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80110d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80110d4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80110d8:	7812      	ldrb	r2, [r2, #0]
 80110da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80110dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80110e0:	3301      	adds	r3, #1
 80110e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80110e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80110ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80110ee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80110f2:	7812      	ldrb	r2, [r2, #0]
 80110f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80110f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80110fa:	3301      	adds	r3, #1
 80110fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8011100:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011104:	1c98      	adds	r0, r3, #2
 8011106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801110a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801110e:	781a      	ldrb	r2, [r3, #0]
 8011110:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011114:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011118:	6819      	ldr	r1, [r3, #0]
 801111a:	f000 fa36 	bl	801158a <Osal_MemCpy>
  index_input += Length;
 801111e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011122:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801112c:	4413      	add	r3, r2
 801112e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011136:	2218      	movs	r2, #24
 8011138:	2100      	movs	r1, #0
 801113a:	4618      	mov	r0, r3
 801113c:	f000 fa35 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8011140:	233f      	movs	r3, #63	@ 0x3f
 8011142:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8011146:	230c      	movs	r3, #12
 8011148:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801114c:	f107 0310 	add.w	r3, r7, #16
 8011150:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011154:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011158:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801115c:	f107 030f 	add.w	r3, r7, #15
 8011160:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011164:	2301      	movs	r3, #1
 8011166:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801116a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801116e:	2100      	movs	r1, #0
 8011170:	4618      	mov	r0, r3
 8011172:	f000 fca3 	bl	8011abc <hci_send_req>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	da01      	bge.n	8011180 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801117c:	23ff      	movs	r3, #255	@ 0xff
 801117e:	e004      	b.n	801118a <aci_hal_write_config_data+0x100>
  return status;
 8011180:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011184:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011188:	781b      	ldrb	r3, [r3, #0]
}
 801118a:	4618      	mov	r0, r3
 801118c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b0cc      	sub	sp, #304	@ 0x130
 8011198:	af00      	add	r7, sp, #0
 801119a:	4602      	mov	r2, r0
 801119c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80111a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80111a4:	701a      	strb	r2, [r3, #0]
 80111a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80111aa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80111ae:	460a      	mov	r2, r1
 80111b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80111b2:	f107 0310 	add.w	r3, r7, #16
 80111b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80111ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80111be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80111c2:	2200      	movs	r2, #0
 80111c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80111cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80111d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80111d4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80111d8:	7812      	ldrb	r2, [r2, #0]
 80111da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80111dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80111e0:	3301      	adds	r3, #1
 80111e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80111e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80111ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80111ee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80111f2:	7812      	ldrb	r2, [r2, #0]
 80111f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80111f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80111fa:	3301      	adds	r3, #1
 80111fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011200:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011204:	2218      	movs	r2, #24
 8011206:	2100      	movs	r1, #0
 8011208:	4618      	mov	r0, r3
 801120a:	f000 f9ce 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 801120e:	233f      	movs	r3, #63	@ 0x3f
 8011210:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8011214:	230f      	movs	r3, #15
 8011216:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801121a:	f107 0310 	add.w	r3, r7, #16
 801121e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011222:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011226:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801122a:	f107 030f 	add.w	r3, r7, #15
 801122e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011232:	2301      	movs	r3, #1
 8011234:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011238:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801123c:	2100      	movs	r1, #0
 801123e:	4618      	mov	r0, r3
 8011240:	f000 fc3c 	bl	8011abc <hci_send_req>
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	da01      	bge.n	801124e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 801124a:	23ff      	movs	r3, #255	@ 0xff
 801124c:	e004      	b.n	8011258 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801124e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011252:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011256:	781b      	ldrb	r3, [r3, #0]
}
 8011258:	4618      	mov	r0, r3
 801125a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}

08011262 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b0cc      	sub	sp, #304	@ 0x130
 8011266:	af00      	add	r7, sp, #0
 8011268:	4602      	mov	r2, r0
 801126a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801126e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011272:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8011274:	f107 0310 	add.w	r3, r7, #16
 8011278:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801127c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011280:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011284:	2200      	movs	r2, #0
 8011286:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011288:	2300      	movs	r3, #0
 801128a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801128e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011292:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011296:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801129a:	8812      	ldrh	r2, [r2, #0]
 801129c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801129e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80112a2:	3302      	adds	r3, #2
 80112a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80112a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80112ac:	2218      	movs	r2, #24
 80112ae:	2100      	movs	r1, #0
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 f97a 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80112b6:	233f      	movs	r3, #63	@ 0x3f
 80112b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80112bc:	2318      	movs	r3, #24
 80112be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80112c2:	f107 0310 	add.w	r3, r7, #16
 80112c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80112ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80112ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80112d2:	f107 030f 	add.w	r3, r7, #15
 80112d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80112da:	2301      	movs	r3, #1
 80112dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80112e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80112e4:	2100      	movs	r1, #0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 fbe8 	bl	8011abc <hci_send_req>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da01      	bge.n	80112f6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80112f2:	23ff      	movs	r3, #255	@ 0xff
 80112f4:	e004      	b.n	8011300 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80112f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80112fe:	781b      	ldrb	r3, [r3, #0]
}
 8011300:	4618      	mov	r0, r3
 8011302:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b088      	sub	sp, #32
 801130e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011310:	2300      	movs	r3, #0
 8011312:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011314:	f107 0308 	add.w	r3, r7, #8
 8011318:	2218      	movs	r2, #24
 801131a:	2100      	movs	r1, #0
 801131c:	4618      	mov	r0, r3
 801131e:	f000 f944 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x03;
 8011322:	2303      	movs	r3, #3
 8011324:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8011326:	2303      	movs	r3, #3
 8011328:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801132a:	1dfb      	adds	r3, r7, #7
 801132c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801132e:	2301      	movs	r3, #1
 8011330:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011332:	f107 0308 	add.w	r3, r7, #8
 8011336:	2100      	movs	r1, #0
 8011338:	4618      	mov	r0, r3
 801133a:	f000 fbbf 	bl	8011abc <hci_send_req>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	da01      	bge.n	8011348 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8011344:	23ff      	movs	r3, #255	@ 0xff
 8011346:	e000      	b.n	801134a <hci_reset+0x40>
  return status;
 8011348:	79fb      	ldrb	r3, [r7, #7]
}
 801134a:	4618      	mov	r0, r3
 801134c:	3720      	adds	r7, #32
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8011352:	b590      	push	{r4, r7, lr}
 8011354:	b0cd      	sub	sp, #308	@ 0x134
 8011356:	af00      	add	r7, sp, #0
 8011358:	4604      	mov	r4, r0
 801135a:	4608      	mov	r0, r1
 801135c:	4611      	mov	r1, r2
 801135e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011362:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011366:	4622      	mov	r2, r4
 8011368:	701a      	strb	r2, [r3, #0]
 801136a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801136e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011372:	4602      	mov	r2, r0
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801137a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801137e:	460a      	mov	r2, r1
 8011380:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8011382:	f107 0310 	add.w	r3, r7, #16
 8011386:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801138a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801138e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011392:	2200      	movs	r2, #0
 8011394:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011396:	2300      	movs	r3, #0
 8011398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 801139c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80113a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80113a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80113a8:	7812      	ldrb	r2, [r2, #0]
 80113aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80113ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113b0:	3301      	adds	r3, #1
 80113b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80113b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80113ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80113be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80113c2:	7812      	ldrb	r2, [r2, #0]
 80113c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80113c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113ca:	3301      	adds	r3, #1
 80113cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80113d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80113d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80113d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80113dc:	7812      	ldrb	r2, [r2, #0]
 80113de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80113e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113e4:	3301      	adds	r3, #1
 80113e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80113ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113ee:	2218      	movs	r2, #24
 80113f0:	2100      	movs	r1, #0
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 f8d9 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x08;
 80113f8:	2308      	movs	r3, #8
 80113fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80113fe:	2331      	movs	r3, #49	@ 0x31
 8011400:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011404:	f107 0310 	add.w	r3, r7, #16
 8011408:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801140c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011410:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011414:	f107 030f 	add.w	r3, r7, #15
 8011418:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801141c:	2301      	movs	r3, #1
 801141e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f000 fb47 	bl	8011abc <hci_send_req>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	da01      	bge.n	8011438 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8011434:	23ff      	movs	r3, #255	@ 0xff
 8011436:	e004      	b.n	8011442 <hci_le_set_default_phy+0xf0>
  return status;
 8011438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801143c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011440:	781b      	ldrb	r3, [r3, #0]
}
 8011442:	4618      	mov	r0, r3
 8011444:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8011448:	46bd      	mov	sp, r7
 801144a:	bd90      	pop	{r4, r7, pc}

0801144c <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 801144c:	b5b0      	push	{r4, r5, r7, lr}
 801144e:	b0cc      	sub	sp, #304	@ 0x130
 8011450:	af00      	add	r7, sp, #0
 8011452:	4605      	mov	r5, r0
 8011454:	460c      	mov	r4, r1
 8011456:	4610      	mov	r0, r2
 8011458:	4619      	mov	r1, r3
 801145a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801145e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011462:	462a      	mov	r2, r5
 8011464:	801a      	strh	r2, [r3, #0]
 8011466:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801146a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801146e:	4622      	mov	r2, r4
 8011470:	801a      	strh	r2, [r3, #0]
 8011472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011476:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801147a:	4602      	mov	r2, r0
 801147c:	801a      	strh	r2, [r3, #0]
 801147e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011482:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011486:	460a      	mov	r2, r1
 8011488:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 801148a:	f107 0310 	add.w	r3, r7, #16
 801148e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011496:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801149a:	2200      	movs	r2, #0
 801149c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80114a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80114a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80114ac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80114b0:	8812      	ldrh	r2, [r2, #0]
 80114b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80114b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80114b8:	3302      	adds	r3, #2
 80114ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80114be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80114c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80114c6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80114ca:	8812      	ldrh	r2, [r2, #0]
 80114cc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80114ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80114d2:	3302      	adds	r3, #2
 80114d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80114d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80114dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80114e0:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80114e4:	8812      	ldrh	r2, [r2, #0]
 80114e6:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80114e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80114ec:	3302      	adds	r3, #2
 80114ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 80114f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80114f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80114fa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80114fe:	8812      	ldrh	r2, [r2, #0]
 8011500:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8011502:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011506:	3302      	adds	r3, #2
 8011508:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 801150c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011510:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8011514:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8011516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801151a:	3302      	adds	r3, #2
 801151c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011524:	2218      	movs	r2, #24
 8011526:	2100      	movs	r1, #0
 8011528:	4618      	mov	r0, r3
 801152a:	f000 f83e 	bl	80115aa <Osal_MemSet>
  rq.ogf = 0x3f;
 801152e:	233f      	movs	r3, #63	@ 0x3f
 8011530:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8011534:	f240 1381 	movw	r3, #385	@ 0x181
 8011538:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 801153c:	230f      	movs	r3, #15
 801153e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8011542:	f107 0310 	add.w	r3, r7, #16
 8011546:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801154a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801154e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011552:	f107 030f 	add.w	r3, r7, #15
 8011556:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801155a:	2301      	movs	r3, #1
 801155c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011560:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011564:	2100      	movs	r1, #0
 8011566:	4618      	mov	r0, r3
 8011568:	f000 faa8 	bl	8011abc <hci_send_req>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	da01      	bge.n	8011576 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8011572:	23ff      	movs	r3, #255	@ 0xff
 8011574:	e004      	b.n	8011580 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8011576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801157a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801157e:	781b      	ldrb	r3, [r3, #0]
}
 8011580:	4618      	mov	r0, r3
 8011582:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011586:	46bd      	mov	sp, r7
 8011588:	bdb0      	pop	{r4, r5, r7, pc}

0801158a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	60f8      	str	r0, [r7, #12]
 8011592:	60b9      	str	r1, [r7, #8]
 8011594:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	68b9      	ldr	r1, [r7, #8]
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f005 f89f 	bl	80166de <memcpy>
 80115a0:	4603      	mov	r3, r0
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	60f8      	str	r0, [r7, #12]
 80115b2:	60b9      	str	r1, [r7, #8]
 80115b4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	68b9      	ldr	r1, [r7, #8]
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f004 ffec 	bl	8016598 <memset>
 80115c0:	4603      	mov	r3, r0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80115ca:	b480      	push	{r7}
 80115cc:	af00      	add	r7, sp, #0
  return;
 80115ce:	bf00      	nop
}
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80115d8:	b480      	push	{r7}
 80115da:	af00      	add	r7, sp, #0
  return;
 80115dc:	bf00      	nop
}
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80115e6:	b480      	push	{r7}
 80115e8:	af00      	add	r7, sp, #0
  return;
 80115ea:	bf00      	nop
}
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80115f4:	b480      	push	{r7}
 80115f6:	af00      	add	r7, sp, #0
  return;
 80115f8:	bf00      	nop
}
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8011602:	b480      	push	{r7}
 8011604:	af00      	add	r7, sp, #0
  return;
 8011606:	bf00      	nop
}
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8011610:	b480      	push	{r7}
 8011612:	af00      	add	r7, sp, #0
  return;
 8011614:	bf00      	nop
}
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801161e:	b480      	push	{r7}
 8011620:	af00      	add	r7, sp, #0
  return;
 8011622:	bf00      	nop
}
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 801162c:	b480      	push	{r7}
 801162e:	af00      	add	r7, sp, #0
  return;
 8011630:	bf00      	nop
}
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr

0801163a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801163a:	b480      	push	{r7}
 801163c:	af00      	add	r7, sp, #0
  return;
 801163e:	bf00      	nop
}
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8011648:	b480      	push	{r7}
 801164a:	af00      	add	r7, sp, #0
  return;
 801164c:	bf00      	nop
}
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr

08011656 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8011656:	b480      	push	{r7}
 8011658:	af00      	add	r7, sp, #0
  return;
 801165a:	bf00      	nop
}
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8011664:	b480      	push	{r7}
 8011666:	af00      	add	r7, sp, #0
  return;
 8011668:	bf00      	nop
}
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr

08011672 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8011672:	b480      	push	{r7}
 8011674:	af00      	add	r7, sp, #0
  return;
 8011676:	bf00      	nop
}
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8011680:	b480      	push	{r7}
 8011682:	af00      	add	r7, sp, #0
  return;
 8011684:	bf00      	nop
}
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr

0801168e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801168e:	b480      	push	{r7}
 8011690:	af00      	add	r7, sp, #0
  return;
 8011692:	bf00      	nop
}
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 801169c:	b480      	push	{r7}
 801169e:	af00      	add	r7, sp, #0
  return;
 80116a0:	bf00      	nop
}
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr

080116aa <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80116aa:	b480      	push	{r7}
 80116ac:	af00      	add	r7, sp, #0
  return;
 80116ae:	bf00      	nop
}
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80116bc:	4b04      	ldr	r3, [pc, #16]	@ (80116d0 <SVCCTL_Init+0x18>)
 80116be:	2200      	movs	r2, #0
 80116c0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80116c2:	4b04      	ldr	r3, [pc, #16]	@ (80116d4 <SVCCTL_Init+0x1c>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80116c8:	f000 f806 	bl	80116d8 <SVCCTL_SvcInit>

  return;
 80116cc:	bf00      	nop
}
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	20000188 	.word	0x20000188
 80116d4:	200001a8 	.word	0x200001a8

080116d8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	af00      	add	r7, sp, #0
  BAS_Init();
 80116dc:	f7ff ff75 	bl	80115ca <BAS_Init>

  BLS_Init();
 80116e0:	f7ff ff7a 	bl	80115d8 <BLS_Init>

  CRS_STM_Init();
 80116e4:	f7ff ff7f 	bl	80115e6 <CRS_STM_Init>

  DIS_Init();
 80116e8:	f7ff ff84 	bl	80115f4 <DIS_Init>

  EDS_STM_Init();
 80116ec:	f7ff ff89 	bl	8011602 <EDS_STM_Init>

  HIDS_Init();
 80116f0:	f7ff ff8e 	bl	8011610 <HIDS_Init>

  HRS_Init();
 80116f4:	f7ff ff93 	bl	801161e <HRS_Init>

  HTS_Init();
 80116f8:	f7ff ff98 	bl	801162c <HTS_Init>

  IAS_Init();
 80116fc:	f7ff ff9d 	bl	801163a <IAS_Init>

  LLS_Init();
 8011700:	f7ff ffa2 	bl	8011648 <LLS_Init>

  TPS_Init();
 8011704:	f7ff ffa7 	bl	8011656 <TPS_Init>

  MOTENV_STM_Init();
 8011708:	f7ff ffac 	bl	8011664 <MOTENV_STM_Init>

  P2PS_STM_Init();
 801170c:	f7ff ffb1 	bl	8011672 <P2PS_STM_Init>

  ZDD_STM_Init();
 8011710:	f7ff ffb6 	bl	8011680 <ZDD_STM_Init>

  OTAS_STM_Init();
 8011714:	f7ff ffbb 	bl	801168e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8011718:	f7ff ffc7 	bl	80116aa <BVOPUS_STM_Init>

  MESH_Init();
 801171c:	f7ff ffbe 	bl	801169c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8011720:	f002 ff2a 	bl	8014578 <SVCCTL_InitCustomSvc>
  
  return;
 8011724:	bf00      	nop
}
 8011726:	bd80      	pop	{r7, pc}

08011728 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8011730:	4b09      	ldr	r3, [pc, #36]	@ (8011758 <SVCCTL_RegisterSvcHandler+0x30>)
 8011732:	7f1b      	ldrb	r3, [r3, #28]
 8011734:	4619      	mov	r1, r3
 8011736:	4a08      	ldr	r2, [pc, #32]	@ (8011758 <SVCCTL_RegisterSvcHandler+0x30>)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801173e:	4b06      	ldr	r3, [pc, #24]	@ (8011758 <SVCCTL_RegisterSvcHandler+0x30>)
 8011740:	7f1b      	ldrb	r3, [r3, #28]
 8011742:	3301      	adds	r3, #1
 8011744:	b2da      	uxtb	r2, r3
 8011746:	4b04      	ldr	r3, [pc, #16]	@ (8011758 <SVCCTL_RegisterSvcHandler+0x30>)
 8011748:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801174a:	bf00      	nop
}
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	20000188 	.word	0x20000188

0801175c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	3301      	adds	r3, #1
 8011768:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801176a:	2300      	movs	r3, #0
 801176c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2bff      	cmp	r3, #255	@ 0xff
 8011774:	d125      	bne.n	80117c2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	3302      	adds	r3, #2
 801177a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	b29b      	uxth	r3, r3
 8011782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801178a:	d118      	bne.n	80117be <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801178c:	2300      	movs	r3, #0
 801178e:	757b      	strb	r3, [r7, #21]
 8011790:	e00d      	b.n	80117ae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8011792:	7d7b      	ldrb	r3, [r7, #21]
 8011794:	4a1a      	ldr	r2, [pc, #104]	@ (8011800 <SVCCTL_UserEvtRx+0xa4>)
 8011796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	4798      	blx	r3
 801179e:	4603      	mov	r3, r0
 80117a0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d108      	bne.n	80117ba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80117a8:	7d7b      	ldrb	r3, [r7, #21]
 80117aa:	3301      	adds	r3, #1
 80117ac:	757b      	strb	r3, [r7, #21]
 80117ae:	4b14      	ldr	r3, [pc, #80]	@ (8011800 <SVCCTL_UserEvtRx+0xa4>)
 80117b0:	7f1b      	ldrb	r3, [r3, #28]
 80117b2:	7d7a      	ldrb	r2, [r7, #21]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d3ec      	bcc.n	8011792 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80117b8:	e002      	b.n	80117c0 <SVCCTL_UserEvtRx+0x64>
              break;
 80117ba:	bf00      	nop
          break;
 80117bc:	e000      	b.n	80117c0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80117be:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80117c0:	e000      	b.n	80117c4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80117c2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80117c4:	7dfb      	ldrb	r3, [r7, #23]
 80117c6:	2b02      	cmp	r3, #2
 80117c8:	d00f      	beq.n	80117ea <SVCCTL_UserEvtRx+0x8e>
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	dc10      	bgt.n	80117f0 <SVCCTL_UserEvtRx+0x94>
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d002      	beq.n	80117d8 <SVCCTL_UserEvtRx+0x7c>
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d006      	beq.n	80117e4 <SVCCTL_UserEvtRx+0x88>
 80117d6:	e00b      	b.n	80117f0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f001 fc7d 	bl	80130d8 <SVCCTL_App_Notification>
 80117de:	4603      	mov	r3, r0
 80117e0:	75bb      	strb	r3, [r7, #22]
      break;
 80117e2:	e008      	b.n	80117f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80117e4:	2301      	movs	r3, #1
 80117e6:	75bb      	strb	r3, [r7, #22]
      break;
 80117e8:	e005      	b.n	80117f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80117ea:	2300      	movs	r3, #0
 80117ec:	75bb      	strb	r3, [r7, #22]
      break;
 80117ee:	e002      	b.n	80117f6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80117f0:	2301      	movs	r3, #1
 80117f2:	75bb      	strb	r3, [r7, #22]
      break;
 80117f4:	bf00      	nop
  }

  return (return_status);
 80117f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3718      	adds	r7, #24
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	20000188 	.word	0x20000188

08011804 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b088      	sub	sp, #32
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801180c:	f107 030c 	add.w	r3, r7, #12
 8011810:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	212e      	movs	r1, #46	@ 0x2e
 801181c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8011820:	f000 fae8 	bl	8011df4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	330b      	adds	r3, #11
 8011828:	78db      	ldrb	r3, [r3, #3]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3720      	adds	r7, #32
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b088      	sub	sp, #32
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801183a:	f107 030c 	add.w	r3, r7, #12
 801183e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	210f      	movs	r1, #15
 801184a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 801184e:	f000 fad1 	bl	8011df4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	330b      	adds	r3, #11
 8011856:	78db      	ldrb	r3, [r3, #3]
}
 8011858:	4618      	mov	r0, r3
 801185a:	3720      	adds	r7, #32
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011868:	f107 030c 	add.w	r3, r7, #12
 801186c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	2110      	movs	r1, #16
 8011874:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8011878:	f000 fabc 	bl	8011df4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	330b      	adds	r3, #11
 8011880:	78db      	ldrb	r3, [r3, #3]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
	...

0801188c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 801188c:	b480      	push	{r7}
 801188e:	b08b      	sub	sp, #44	@ 0x2c
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011894:	2300      	movs	r3, #0
 8011896:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8011898:	2300      	movs	r3, #0
 801189a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 801189c:	2300      	movs	r3, #0
 801189e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80118a4:	2300      	movs	r3, #0
 80118a6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80118a8:	2300      	movs	r3, #0
 80118aa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80118b0:	2300      	movs	r3, #0
 80118b2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80118b4:	4b4a      	ldr	r3, [pc, #296]	@ (80119e0 <SHCI_GetWirelessFwInfo+0x154>)
 80118b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80118bc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80118c6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	4a44      	ldr	r2, [pc, #272]	@ (80119e4 <SHCI_GetWirelessFwInfo+0x158>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	d10f      	bne.n	80118f8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	695b      	ldr	r3, [r3, #20]
 80118dc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	699b      	ldr	r3, [r3, #24]
 80118e2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	617b      	str	r3, [r7, #20]
 80118f6:	e01a      	b.n	801192e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011900:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011904:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	695b      	ldr	r3, [r3, #20]
 8011914:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	689b      	ldr	r3, [r3, #8]
 801192c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011930:	0e1b      	lsrs	r3, r3, #24
 8011932:	b2da      	uxtb	r2, r3
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801193a:	0c1b      	lsrs	r3, r3, #16
 801193c:	b2da      	uxtb	r2, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011944:	0a1b      	lsrs	r3, r3, #8
 8011946:	b2da      	uxtb	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194e:	091b      	lsrs	r3, r3, #4
 8011950:	b2db      	uxtb	r3, r3
 8011952:	f003 030f 	and.w	r3, r3, #15
 8011956:	b2da      	uxtb	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 030f 	and.w	r3, r3, #15
 8011964:	b2da      	uxtb	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	0e1b      	lsrs	r3, r3, #24
 801196e:	b2da      	uxtb	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	0c1b      	lsrs	r3, r3, #16
 8011978:	b2da      	uxtb	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	0a1b      	lsrs	r3, r3, #8
 8011982:	b2da      	uxtb	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011988:	6a3b      	ldr	r3, [r7, #32]
 801198a:	b2da      	uxtb	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	b2da      	uxtb	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	0e1b      	lsrs	r3, r3, #24
 801199c:	b2da      	uxtb	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	0c1b      	lsrs	r3, r3, #16
 80119a6:	b2da      	uxtb	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80119ac:	69bb      	ldr	r3, [r7, #24]
 80119ae:	0a1b      	lsrs	r3, r3, #8
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	0e1b      	lsrs	r3, r3, #24
 80119ba:	b2da      	uxtb	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	0c1b      	lsrs	r3, r3, #16
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	372c      	adds	r7, #44	@ 0x2c
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	58004000 	.word	0x58004000
 80119e4:	a94656b9 	.word	0xa94656b9

080119e8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	4a08      	ldr	r2, [pc, #32]	@ (8011a18 <hci_init+0x30>)
 80119f8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80119fa:	4a08      	ldr	r2, [pc, #32]	@ (8011a1c <hci_init+0x34>)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011a00:	4806      	ldr	r0, [pc, #24]	@ (8011a1c <hci_init+0x34>)
 8011a02:	f000 f979 	bl	8011cf8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 f8da 	bl	8011bc4 <TlInit>

  return;
 8011a10:	bf00      	nop
}
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	20000f98 	.word	0x20000f98
 8011a1c:	20000f70 	.word	0x20000f70

08011a20 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011a26:	4822      	ldr	r0, [pc, #136]	@ (8011ab0 <hci_user_evt_proc+0x90>)
 8011a28:	f000 fdfa 	bl	8012620 <LST_is_empty>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d12b      	bne.n	8011a8a <hci_user_evt_proc+0x6a>
 8011a32:	4b20      	ldr	r3, [pc, #128]	@ (8011ab4 <hci_user_evt_proc+0x94>)
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d027      	beq.n	8011a8a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011a3a:	f107 030c 	add.w	r3, r7, #12
 8011a3e:	4619      	mov	r1, r3
 8011a40:	481b      	ldr	r0, [pc, #108]	@ (8011ab0 <hci_user_evt_proc+0x90>)
 8011a42:	f000 fe7c 	bl	801273e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8011a46:	4b1c      	ldr	r3, [pc, #112]	@ (8011ab8 <hci_user_evt_proc+0x98>)
 8011a48:	69db      	ldr	r3, [r3, #28]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00c      	beq.n	8011a68 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011a52:	2301      	movs	r3, #1
 8011a54:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011a56:	4b18      	ldr	r3, [pc, #96]	@ (8011ab8 <hci_user_evt_proc+0x98>)
 8011a58:	69db      	ldr	r3, [r3, #28]
 8011a5a:	1d3a      	adds	r2, r7, #4
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011a60:	793a      	ldrb	r2, [r7, #4]
 8011a62:	4b14      	ldr	r3, [pc, #80]	@ (8011ab4 <hci_user_evt_proc+0x94>)
 8011a64:	701a      	strb	r2, [r3, #0]
 8011a66:	e002      	b.n	8011a6e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011a68:	4b12      	ldr	r3, [pc, #72]	@ (8011ab4 <hci_user_evt_proc+0x94>)
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011a6e:	4b11      	ldr	r3, [pc, #68]	@ (8011ab4 <hci_user_evt_proc+0x94>)
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f000 fc0d 	bl	8012298 <TL_MM_EvtDone>
 8011a7e:	e004      	b.n	8011a8a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	4619      	mov	r1, r3
 8011a84:	480a      	ldr	r0, [pc, #40]	@ (8011ab0 <hci_user_evt_proc+0x90>)
 8011a86:	f000 fded 	bl	8012664 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011a8a:	4809      	ldr	r0, [pc, #36]	@ (8011ab0 <hci_user_evt_proc+0x90>)
 8011a8c:	f000 fdc8 	bl	8012620 <LST_is_empty>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d107      	bne.n	8011aa6 <hci_user_evt_proc+0x86>
 8011a96:	4b07      	ldr	r3, [pc, #28]	@ (8011ab4 <hci_user_evt_proc+0x94>)
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d003      	beq.n	8011aa6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8011a9e:	4804      	ldr	r0, [pc, #16]	@ (8011ab0 <hci_user_evt_proc+0x90>)
 8011aa0:	f002 fabe 	bl	8014020 <hci_notify_asynch_evt>
  }


  return;
 8011aa4:	bf00      	nop
 8011aa6:	bf00      	nop
}
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	200001b0 	.word	0x200001b0
 8011ab4:	200001bc 	.word	0x200001bc
 8011ab8:	20000f70 	.word	0x20000f70

08011abc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b088      	sub	sp, #32
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011ac8:	2000      	movs	r0, #0
 8011aca:	f000 f8d1 	bl	8011c70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	885b      	ldrh	r3, [r3, #2]
 8011ad6:	b21b      	sxth	r3, r3
 8011ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011adc:	b21a      	sxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	029b      	lsls	r3, r3, #10
 8011ae4:	b21b      	sxth	r3, r3
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	b21b      	sxth	r3, r3
 8011aea:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8011aec:	4b33      	ldr	r3, [pc, #204]	@ (8011bbc <hci_send_req+0x100>)
 8011aee:	2201      	movs	r2, #1
 8011af0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	b2d9      	uxtb	r1, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	689a      	ldr	r2, [r3, #8]
 8011afc:	8bbb      	ldrh	r3, [r7, #28]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f000 f890 	bl	8011c24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011b04:	e04e      	b.n	8011ba4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011b06:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011b0a:	f002 faa0 	bl	801404e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011b0e:	e043      	b.n	8011b98 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011b10:	f107 030c 	add.w	r3, r7, #12
 8011b14:	4619      	mov	r1, r3
 8011b16:	482a      	ldr	r0, [pc, #168]	@ (8011bc0 <hci_send_req+0x104>)
 8011b18:	f000 fe11 	bl	801273e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	7a5b      	ldrb	r3, [r3, #9]
 8011b20:	2b0f      	cmp	r3, #15
 8011b22:	d114      	bne.n	8011b4e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	330b      	adds	r3, #11
 8011b28:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	885b      	ldrh	r3, [r3, #2]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	8bba      	ldrh	r2, [r7, #28]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d104      	bne.n	8011b40 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	691b      	ldr	r3, [r3, #16]
 8011b3a:	693a      	ldr	r2, [r7, #16]
 8011b3c:	7812      	ldrb	r2, [r2, #0]
 8011b3e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	785b      	ldrb	r3, [r3, #1]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d027      	beq.n	8011b98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	77fb      	strb	r3, [r7, #31]
 8011b4c:	e024      	b.n	8011b98 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	330b      	adds	r3, #11
 8011b52:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	8bba      	ldrh	r2, [r7, #28]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d114      	bne.n	8011b8c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	7a9b      	ldrb	r3, [r3, #10]
 8011b66:	3b03      	subs	r3, #3
 8011b68:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695a      	ldr	r2, [r3, #20]
 8011b6e:	7dfb      	ldrb	r3, [r7, #23]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	bfa8      	it	ge
 8011b74:	461a      	movge	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6918      	ldr	r0, [r3, #16]
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	1cd9      	adds	r1, r3, #3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	695b      	ldr	r3, [r3, #20]
 8011b86:	461a      	mov	r2, r3
 8011b88:	f004 fda9 	bl	80166de <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d001      	beq.n	8011b98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011b94:	2301      	movs	r3, #1
 8011b96:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011b98:	4809      	ldr	r0, [pc, #36]	@ (8011bc0 <hci_send_req+0x104>)
 8011b9a:	f000 fd41 	bl	8012620 <LST_is_empty>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d0b5      	beq.n	8011b10 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8011ba4:	7ffb      	ldrb	r3, [r7, #31]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d0ad      	beq.n	8011b06 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8011baa:	2001      	movs	r0, #1
 8011bac:	f000 f860 	bl	8011c70 <NotifyCmdStatus>

  return 0;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3720      	adds	r7, #32
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	20000f9c 	.word	0x20000f9c
 8011bc0:	20000f90 	.word	0x20000f90

08011bc4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8011bcc:	480f      	ldr	r0, [pc, #60]	@ (8011c0c <TlInit+0x48>)
 8011bce:	f000 fd17 	bl	8012600 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8011c10 <TlInit+0x4c>)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011bd8:	480e      	ldr	r0, [pc, #56]	@ (8011c14 <TlInit+0x50>)
 8011bda:	f000 fd11 	bl	8012600 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011bde:	4b0e      	ldr	r3, [pc, #56]	@ (8011c18 <TlInit+0x54>)
 8011be0:	2201      	movs	r2, #1
 8011be2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011be4:	4b0d      	ldr	r3, [pc, #52]	@ (8011c1c <TlInit+0x58>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00a      	beq.n	8011c02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8011c20 <TlInit+0x5c>)
 8011bf2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011bf4:	4b09      	ldr	r3, [pc, #36]	@ (8011c1c <TlInit+0x58>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f107 0208 	add.w	r2, r7, #8
 8011bfc:	4610      	mov	r0, r2
 8011bfe:	4798      	blx	r3
  }

  return;
 8011c00:	bf00      	nop
 8011c02:	bf00      	nop
}
 8011c04:	3718      	adds	r7, #24
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20000f90 	.word	0x20000f90
 8011c10:	200001b8 	.word	0x200001b8
 8011c14:	200001b0 	.word	0x200001b0
 8011c18:	200001bc 	.word	0x200001bc
 8011c1c:	20000f70 	.word	0x20000f70
 8011c20:	08011cb1 	.word	0x08011cb1

08011c24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	603a      	str	r2, [r7, #0]
 8011c2e:	80fb      	strh	r3, [r7, #6]
 8011c30:	460b      	mov	r3, r1
 8011c32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011c34:	4b0c      	ldr	r3, [pc, #48]	@ (8011c68 <SendCmd+0x44>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	88fa      	ldrh	r2, [r7, #6]
 8011c3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8011c68 <SendCmd+0x44>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	797a      	ldrb	r2, [r7, #5]
 8011c44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011c46:	4b08      	ldr	r3, [pc, #32]	@ (8011c68 <SendCmd+0x44>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	330c      	adds	r3, #12
 8011c4c:	797a      	ldrb	r2, [r7, #5]
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f004 fd44 	bl	80166de <memcpy>

  hciContext.io.Send(0,0);
 8011c56:	4b05      	ldr	r3, [pc, #20]	@ (8011c6c <SendCmd+0x48>)
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	4798      	blx	r3

  return;
 8011c60:	bf00      	nop
}
 8011c62:	3708      	adds	r7, #8
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	200001b8 	.word	0x200001b8
 8011c6c:	20000f70 	.word	0x20000f70

08011c70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	4603      	mov	r3, r0
 8011c78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8011c7a:	79fb      	ldrb	r3, [r7, #7]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d108      	bne.n	8011c92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8011c80:	4b0a      	ldr	r3, [pc, #40]	@ (8011cac <NotifyCmdStatus+0x3c>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00d      	beq.n	8011ca4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8011c88:	4b08      	ldr	r3, [pc, #32]	@ (8011cac <NotifyCmdStatus+0x3c>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8011c90:	e008      	b.n	8011ca4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8011c92:	4b06      	ldr	r3, [pc, #24]	@ (8011cac <NotifyCmdStatus+0x3c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d004      	beq.n	8011ca4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8011c9a:	4b04      	ldr	r3, [pc, #16]	@ (8011cac <NotifyCmdStatus+0x3c>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2001      	movs	r0, #1
 8011ca0:	4798      	blx	r3
  return;
 8011ca2:	bf00      	nop
 8011ca4:	bf00      	nop
}
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	20000f98 	.word	0x20000f98

08011cb0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7a5b      	ldrb	r3, [r3, #9]
 8011cbc:	2b0f      	cmp	r3, #15
 8011cbe:	d003      	beq.n	8011cc8 <TlEvtReceived+0x18>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7a5b      	ldrb	r3, [r3, #9]
 8011cc4:	2b0e      	cmp	r3, #14
 8011cc6:	d107      	bne.n	8011cd8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011cc8:	6879      	ldr	r1, [r7, #4]
 8011cca:	4809      	ldr	r0, [pc, #36]	@ (8011cf0 <TlEvtReceived+0x40>)
 8011ccc:	f000 fcf0 	bl	80126b0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	f002 f9b1 	bl	8014038 <hci_cmd_resp_release>
 8011cd6:	e006      	b.n	8011ce6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011cd8:	6879      	ldr	r1, [r7, #4]
 8011cda:	4806      	ldr	r0, [pc, #24]	@ (8011cf4 <TlEvtReceived+0x44>)
 8011cdc:	f000 fce8 	bl	80126b0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011ce0:	4804      	ldr	r0, [pc, #16]	@ (8011cf4 <TlEvtReceived+0x44>)
 8011ce2:	f002 f99d 	bl	8014020 <hci_notify_asynch_evt>
  }

  return;
 8011ce6:	bf00      	nop
}
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	20000f90 	.word	0x20000f90
 8011cf4:	200001b0 	.word	0x200001b0

08011cf8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4a05      	ldr	r2, [pc, #20]	@ (8011d18 <hci_register_io_bus+0x20>)
 8011d04:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4a04      	ldr	r2, [pc, #16]	@ (8011d1c <hci_register_io_bus+0x24>)
 8011d0a:	611a      	str	r2, [r3, #16]

  return;
 8011d0c:	bf00      	nop
}
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	08012011 	.word	0x08012011
 8011d1c:	08012079 	.word	0x08012079

08011d20 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	4a08      	ldr	r2, [pc, #32]	@ (8011d50 <shci_init+0x30>)
 8011d30:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011d32:	4a08      	ldr	r2, [pc, #32]	@ (8011d54 <shci_init+0x34>)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011d38:	4806      	ldr	r0, [pc, #24]	@ (8011d54 <shci_init+0x34>)
 8011d3a:	f000 f915 	bl	8011f68 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 f898 	bl	8011e78 <TlInit>

  return;
 8011d48:	bf00      	nop
}
 8011d4a:	3708      	adds	r7, #8
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	20000fc0 	.word	0x20000fc0
 8011d54:	20000fa0 	.word	0x20000fa0

08011d58 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011d5e:	4822      	ldr	r0, [pc, #136]	@ (8011de8 <shci_user_evt_proc+0x90>)
 8011d60:	f000 fc5e 	bl	8012620 <LST_is_empty>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d12b      	bne.n	8011dc2 <shci_user_evt_proc+0x6a>
 8011d6a:	4b20      	ldr	r3, [pc, #128]	@ (8011dec <shci_user_evt_proc+0x94>)
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d027      	beq.n	8011dc2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011d72:	f107 030c 	add.w	r3, r7, #12
 8011d76:	4619      	mov	r1, r3
 8011d78:	481b      	ldr	r0, [pc, #108]	@ (8011de8 <shci_user_evt_proc+0x90>)
 8011d7a:	f000 fce0 	bl	801273e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8011df0 <shci_user_evt_proc+0x98>)
 8011d80:	69db      	ldr	r3, [r3, #28]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00c      	beq.n	8011da0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011d8e:	4b18      	ldr	r3, [pc, #96]	@ (8011df0 <shci_user_evt_proc+0x98>)
 8011d90:	69db      	ldr	r3, [r3, #28]
 8011d92:	1d3a      	adds	r2, r7, #4
 8011d94:	4610      	mov	r0, r2
 8011d96:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8011d98:	793a      	ldrb	r2, [r7, #4]
 8011d9a:	4b14      	ldr	r3, [pc, #80]	@ (8011dec <shci_user_evt_proc+0x94>)
 8011d9c:	701a      	strb	r2, [r3, #0]
 8011d9e:	e002      	b.n	8011da6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011da0:	4b12      	ldr	r3, [pc, #72]	@ (8011dec <shci_user_evt_proc+0x94>)
 8011da2:	2201      	movs	r2, #1
 8011da4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8011da6:	4b11      	ldr	r3, [pc, #68]	@ (8011dec <shci_user_evt_proc+0x94>)
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d004      	beq.n	8011db8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f000 fa71 	bl	8012298 <TL_MM_EvtDone>
 8011db6:	e004      	b.n	8011dc2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	480a      	ldr	r0, [pc, #40]	@ (8011de8 <shci_user_evt_proc+0x90>)
 8011dbe:	f000 fc51 	bl	8012664 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011dc2:	4809      	ldr	r0, [pc, #36]	@ (8011de8 <shci_user_evt_proc+0x90>)
 8011dc4:	f000 fc2c 	bl	8012620 <LST_is_empty>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d107      	bne.n	8011dde <shci_user_evt_proc+0x86>
 8011dce:	4b07      	ldr	r3, [pc, #28]	@ (8011dec <shci_user_evt_proc+0x94>)
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d003      	beq.n	8011dde <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011dd6:	4804      	ldr	r0, [pc, #16]	@ (8011de8 <shci_user_evt_proc+0x90>)
 8011dd8:	f7f0 fdd5 	bl	8002986 <shci_notify_asynch_evt>
  }


  return;
 8011ddc:	bf00      	nop
 8011dde:	bf00      	nop
}
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	200001c0 	.word	0x200001c0
 8011dec:	200001d0 	.word	0x200001d0
 8011df0:	20000fa0 	.word	0x20000fa0

08011df4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60ba      	str	r2, [r7, #8]
 8011dfc:	607b      	str	r3, [r7, #4]
 8011dfe:	4603      	mov	r3, r0
 8011e00:	81fb      	strh	r3, [r7, #14]
 8011e02:	460b      	mov	r3, r1
 8011e04:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011e06:	2000      	movs	r0, #0
 8011e08:	f000 f868 	bl	8011edc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011e0c:	4b17      	ldr	r3, [pc, #92]	@ (8011e6c <shci_send+0x78>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	89fa      	ldrh	r2, [r7, #14]
 8011e12:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011e16:	4b15      	ldr	r3, [pc, #84]	@ (8011e6c <shci_send+0x78>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	7b7a      	ldrb	r2, [r7, #13]
 8011e1c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011e1e:	4b13      	ldr	r3, [pc, #76]	@ (8011e6c <shci_send+0x78>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	330c      	adds	r3, #12
 8011e24:	7b7a      	ldrb	r2, [r7, #13]
 8011e26:	68b9      	ldr	r1, [r7, #8]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f004 fc58 	bl	80166de <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011e2e:	4b10      	ldr	r3, [pc, #64]	@ (8011e70 <shci_send+0x7c>)
 8011e30:	2201      	movs	r2, #1
 8011e32:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011e34:	4b0f      	ldr	r3, [pc, #60]	@ (8011e74 <shci_send+0x80>)
 8011e36:	691b      	ldr	r3, [r3, #16]
 8011e38:	2100      	movs	r1, #0
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011e3e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011e42:	f7f0 fdb7 	bl	80029b4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f103 0008 	add.w	r0, r3, #8
 8011e4c:	4b07      	ldr	r3, [pc, #28]	@ (8011e6c <shci_send+0x78>)
 8011e4e:	6819      	ldr	r1, [r3, #0]
 8011e50:	4b06      	ldr	r3, [pc, #24]	@ (8011e6c <shci_send+0x78>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	789b      	ldrb	r3, [r3, #2]
 8011e56:	3303      	adds	r3, #3
 8011e58:	461a      	mov	r2, r3
 8011e5a:	f004 fc40 	bl	80166de <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011e5e:	2001      	movs	r0, #1
 8011e60:	f000 f83c 	bl	8011edc <Cmd_SetStatus>

  return;
 8011e64:	bf00      	nop
}
 8011e66:	3710      	adds	r7, #16
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	200001cc 	.word	0x200001cc
 8011e70:	20000fc4 	.word	0x20000fc4
 8011e74:	20000fa0 	.word	0x20000fa0

08011e78 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011e80:	4a10      	ldr	r2, [pc, #64]	@ (8011ec4 <TlInit+0x4c>)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8011e86:	4810      	ldr	r0, [pc, #64]	@ (8011ec8 <TlInit+0x50>)
 8011e88:	f000 fbba 	bl	8012600 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011e8c:	2001      	movs	r0, #1
 8011e8e:	f000 f825 	bl	8011edc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011e92:	4b0e      	ldr	r3, [pc, #56]	@ (8011ecc <TlInit+0x54>)
 8011e94:	2201      	movs	r2, #1
 8011e96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8011e98:	4b0d      	ldr	r3, [pc, #52]	@ (8011ed0 <TlInit+0x58>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d00c      	beq.n	8011eba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8011ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8011ed4 <TlInit+0x5c>)
 8011ea6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8011ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8011ed8 <TlInit+0x60>)
 8011eaa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8011eac:	4b08      	ldr	r3, [pc, #32]	@ (8011ed0 <TlInit+0x58>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f107 020c 	add.w	r2, r7, #12
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	4798      	blx	r3
  }

  return;
 8011eb8:	bf00      	nop
 8011eba:	bf00      	nop
}
 8011ebc:	3718      	adds	r7, #24
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	200001cc 	.word	0x200001cc
 8011ec8:	200001c0 	.word	0x200001c0
 8011ecc:	200001d0 	.word	0x200001d0
 8011ed0:	20000fa0 	.word	0x20000fa0
 8011ed4:	08011f2d 	.word	0x08011f2d
 8011ed8:	08011f45 	.word	0x08011f45

08011edc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8011ee6:	79fb      	ldrb	r3, [r7, #7]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10b      	bne.n	8011f04 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011eec:	4b0d      	ldr	r3, [pc, #52]	@ (8011f24 <Cmd_SetStatus+0x48>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d003      	beq.n	8011efc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8011f24 <Cmd_SetStatus+0x48>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2000      	movs	r0, #0
 8011efa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011efc:	4b0a      	ldr	r3, [pc, #40]	@ (8011f28 <Cmd_SetStatus+0x4c>)
 8011efe:	2200      	movs	r2, #0
 8011f00:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011f02:	e00b      	b.n	8011f1c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011f04:	4b08      	ldr	r3, [pc, #32]	@ (8011f28 <Cmd_SetStatus+0x4c>)
 8011f06:	2201      	movs	r2, #1
 8011f08:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8011f0a:	4b06      	ldr	r3, [pc, #24]	@ (8011f24 <Cmd_SetStatus+0x48>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d004      	beq.n	8011f1c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011f12:	4b04      	ldr	r3, [pc, #16]	@ (8011f24 <Cmd_SetStatus+0x48>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2001      	movs	r0, #1
 8011f18:	4798      	blx	r3
  return;
 8011f1a:	bf00      	nop
 8011f1c:	bf00      	nop
}
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	20000fc0 	.word	0x20000fc0
 8011f28:	200001c8 	.word	0x200001c8

08011f2c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011f34:	2000      	movs	r0, #0
 8011f36:	f7f0 fd32 	bl	800299e <shci_cmd_resp_release>

  return;
 8011f3a:	bf00      	nop
}
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
	...

08011f44 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011f4c:	6879      	ldr	r1, [r7, #4]
 8011f4e:	4805      	ldr	r0, [pc, #20]	@ (8011f64 <TlUserEvtReceived+0x20>)
 8011f50:	f000 fbae 	bl	80126b0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011f54:	4803      	ldr	r0, [pc, #12]	@ (8011f64 <TlUserEvtReceived+0x20>)
 8011f56:	f7f0 fd16 	bl	8002986 <shci_notify_asynch_evt>

  return;
 8011f5a:	bf00      	nop
}
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	200001c0 	.word	0x200001c0

08011f68 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	4a05      	ldr	r2, [pc, #20]	@ (8011f88 <shci_register_io_bus+0x20>)
 8011f74:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	4a04      	ldr	r2, [pc, #16]	@ (8011f8c <shci_register_io_bus+0x24>)
 8011f7a:	611a      	str	r2, [r3, #16]

  return;
 8011f7c:	bf00      	nop
}
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	08012125 	.word	0x08012125
 8011f8c:	08012179 	.word	0x08012179

08011f90 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011f94:	f003 f808 	bl	8014fa8 <HW_IPCC_Enable>

  return;
 8011f98:	bf00      	nop
}
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <TL_Init>:


void TL_Init( void )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8011fa0:	4b10      	ldr	r3, [pc, #64]	@ (8011fe4 <TL_Init+0x48>)
 8011fa2:	4a11      	ldr	r2, [pc, #68]	@ (8011fe8 <TL_Init+0x4c>)
 8011fa4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8011fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8011fe4 <TL_Init+0x48>)
 8011fa8:	4a10      	ldr	r2, [pc, #64]	@ (8011fec <TL_Init+0x50>)
 8011faa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8011fac:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe4 <TL_Init+0x48>)
 8011fae:	4a10      	ldr	r2, [pc, #64]	@ (8011ff0 <TL_Init+0x54>)
 8011fb0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8011fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8011fe4 <TL_Init+0x48>)
 8011fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8011ff4 <TL_Init+0x58>)
 8011fb6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8011fe4 <TL_Init+0x48>)
 8011fba:	4a0f      	ldr	r2, [pc, #60]	@ (8011ff8 <TL_Init+0x5c>)
 8011fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8011fbe:	4b09      	ldr	r3, [pc, #36]	@ (8011fe4 <TL_Init+0x48>)
 8011fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8011ffc <TL_Init+0x60>)
 8011fc2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011fc4:	4b07      	ldr	r3, [pc, #28]	@ (8011fe4 <TL_Init+0x48>)
 8011fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8012000 <TL_Init+0x64>)
 8011fc8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8011fca:	4b06      	ldr	r3, [pc, #24]	@ (8011fe4 <TL_Init+0x48>)
 8011fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8012004 <TL_Init+0x68>)
 8011fce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011fd0:	4b04      	ldr	r3, [pc, #16]	@ (8011fe4 <TL_Init+0x48>)
 8011fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8012008 <TL_Init+0x6c>)
 8011fd4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8011fd6:	4b03      	ldr	r3, [pc, #12]	@ (8011fe4 <TL_Init+0x48>)
 8011fd8:	4a0c      	ldr	r2, [pc, #48]	@ (801200c <TL_Init+0x70>)
 8011fda:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8011fdc:	f002 fff8 	bl	8014fd0 <HW_IPCC_Init>

  return;
 8011fe0:	bf00      	nop
}
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20030000 	.word	0x20030000
 8011fe8:	20030028 	.word	0x20030028
 8011fec:	20030048 	.word	0x20030048
 8011ff0:	20030058 	.word	0x20030058
 8011ff4:	20030068 	.word	0x20030068
 8011ff8:	20030070 	.word	0x20030070
 8011ffc:	20030078 	.word	0x20030078
 8012000:	20030080 	.word	0x20030080
 8012004:	2003009c 	.word	0x2003009c
 8012008:	200300a0 	.word	0x200300a0
 801200c:	200300ac 	.word	0x200300ac

08012010 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 801201c:	4811      	ldr	r0, [pc, #68]	@ (8012064 <TL_BLE_Init+0x54>)
 801201e:	f000 faef 	bl	8012600 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8012022:	4b11      	ldr	r3, [pc, #68]	@ (8012068 <TL_BLE_Init+0x58>)
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	689a      	ldr	r2, [r3, #8]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	68da      	ldr	r2, [r3, #12]
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	4a0c      	ldr	r2, [pc, #48]	@ (801206c <TL_BLE_Init+0x5c>)
 801203c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	4a08      	ldr	r2, [pc, #32]	@ (8012064 <TL_BLE_Init+0x54>)
 8012042:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8012044:	f002 ffda 	bl	8014ffc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a08      	ldr	r2, [pc, #32]	@ (8012070 <TL_BLE_Init+0x60>)
 801204e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	4a07      	ldr	r2, [pc, #28]	@ (8012074 <TL_BLE_Init+0x64>)
 8012056:	6013      	str	r3, [r2, #0]

  return 0;
 8012058:	2300      	movs	r3, #0
}
 801205a:	4618      	mov	r0, r3
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	200300c8 	.word	0x200300c8
 8012068:	20030000 	.word	0x20030000
 801206c:	20031f48 	.word	0x20031f48
 8012070:	20000fd0 	.word	0x20000fd0
 8012074:	20000fd4 	.word	0x20000fd4

08012078 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8012084:	4b09      	ldr	r3, [pc, #36]	@ (80120ac <TL_BLE_SendCmd+0x34>)
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2201      	movs	r2, #1
 801208c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801208e:	4b07      	ldr	r3, [pc, #28]	@ (80120ac <TL_BLE_SendCmd+0x34>)
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4619      	mov	r1, r3
 8012096:	2001      	movs	r0, #1
 8012098:	f000 f96c 	bl	8012374 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801209c:	f002 ffb8 	bl	8015010 <HW_IPCC_BLE_SendCmd>

  return 0;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	20030000 	.word	0x20030000

080120b0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80120b6:	e01c      	b.n	80120f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80120b8:	1d3b      	adds	r3, r7, #4
 80120ba:	4619      	mov	r1, r3
 80120bc:	4812      	ldr	r0, [pc, #72]	@ (8012108 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80120be:	f000 fb3e 	bl	801273e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	7a5b      	ldrb	r3, [r3, #9]
 80120c6:	2b0f      	cmp	r3, #15
 80120c8:	d003      	beq.n	80120d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	7a5b      	ldrb	r3, [r3, #9]
 80120ce:	2b0e      	cmp	r3, #14
 80120d0:	d105      	bne.n	80120de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4619      	mov	r1, r3
 80120d6:	2002      	movs	r0, #2
 80120d8:	f000 f94c 	bl	8012374 <OutputDbgTrace>
 80120dc:	e004      	b.n	80120e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4619      	mov	r1, r3
 80120e2:	2003      	movs	r0, #3
 80120e4:	f000 f946 	bl	8012374 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80120e8:	4b08      	ldr	r3, [pc, #32]	@ (801210c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	4610      	mov	r0, r2
 80120f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80120f2:	4805      	ldr	r0, [pc, #20]	@ (8012108 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80120f4:	f000 fa94 	bl	8012620 <LST_is_empty>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d0dc      	beq.n	80120b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80120fe:	bf00      	nop
}
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	200300c8 	.word	0x200300c8
 801210c:	20000fd0 	.word	0x20000fd0

08012110 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8012114:	4b02      	ldr	r3, [pc, #8]	@ (8012120 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4798      	blx	r3

  return;
 801211a:	bf00      	nop
}
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20000fd4 	.word	0x20000fd4

08012124 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8012130:	480d      	ldr	r0, [pc, #52]	@ (8012168 <TL_SYS_Init+0x44>)
 8012132:	f000 fa65 	bl	8012600 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8012136:	4b0d      	ldr	r3, [pc, #52]	@ (801216c <TL_SYS_Init+0x48>)
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	689a      	ldr	r2, [r3, #8]
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	4a08      	ldr	r2, [pc, #32]	@ (8012168 <TL_SYS_Init+0x44>)
 8012148:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801214a:	f002 ff83 	bl	8015054 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	4a07      	ldr	r2, [pc, #28]	@ (8012170 <TL_SYS_Init+0x4c>)
 8012154:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4a06      	ldr	r2, [pc, #24]	@ (8012174 <TL_SYS_Init+0x50>)
 801215c:	6013      	str	r3, [r2, #0]

  return 0;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	200300d0 	.word	0x200300d0
 801216c:	20030000 	.word	0x20030000
 8012170:	20000fd8 	.word	0x20000fd8
 8012174:	20000fdc 	.word	0x20000fdc

08012178 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012184:	4b09      	ldr	r3, [pc, #36]	@ (80121ac <TL_SYS_SendCmd+0x34>)
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2210      	movs	r2, #16
 801218c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801218e:	4b07      	ldr	r3, [pc, #28]	@ (80121ac <TL_SYS_SendCmd+0x34>)
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4619      	mov	r1, r3
 8012196:	2004      	movs	r0, #4
 8012198:	f000 f8ec 	bl	8012374 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801219c:	f002 ff64 	bl	8015068 <HW_IPCC_SYS_SendCmd>

  return 0;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	20030000 	.word	0x20030000

080121b0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80121b4:	4b07      	ldr	r3, [pc, #28]	@ (80121d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4619      	mov	r1, r3
 80121bc:	2005      	movs	r0, #5
 80121be:	f000 f8d9 	bl	8012374 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80121c2:	4b05      	ldr	r3, [pc, #20]	@ (80121d8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a03      	ldr	r2, [pc, #12]	@ (80121d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80121c8:	68d2      	ldr	r2, [r2, #12]
 80121ca:	6812      	ldr	r2, [r2, #0]
 80121cc:	4610      	mov	r0, r2
 80121ce:	4798      	blx	r3

  return;
 80121d0:	bf00      	nop
}
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	20030000 	.word	0x20030000
 80121d8:	20000fd8 	.word	0x20000fd8

080121dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b082      	sub	sp, #8
 80121e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80121e2:	e00e      	b.n	8012202 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80121e4:	1d3b      	adds	r3, r7, #4
 80121e6:	4619      	mov	r1, r3
 80121e8:	480b      	ldr	r0, [pc, #44]	@ (8012218 <HW_IPCC_SYS_EvtNot+0x3c>)
 80121ea:	f000 faa8 	bl	801273e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	4619      	mov	r1, r3
 80121f2:	2006      	movs	r0, #6
 80121f4:	f000 f8be 	bl	8012374 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80121f8:	4b08      	ldr	r3, [pc, #32]	@ (801221c <HW_IPCC_SYS_EvtNot+0x40>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	4610      	mov	r0, r2
 8012200:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8012202:	4805      	ldr	r0, [pc, #20]	@ (8012218 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012204:	f000 fa0c 	bl	8012620 <LST_is_empty>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d0ea      	beq.n	80121e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801220e:	bf00      	nop
}
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	200300d0 	.word	0x200300d0
 801221c:	20000fdc 	.word	0x20000fdc

08012220 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8012228:	4817      	ldr	r0, [pc, #92]	@ (8012288 <TL_MM_Init+0x68>)
 801222a:	f000 f9e9 	bl	8012600 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801222e:	4817      	ldr	r0, [pc, #92]	@ (801228c <TL_MM_Init+0x6c>)
 8012230:	f000 f9e6 	bl	8012600 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8012234:	4b16      	ldr	r3, [pc, #88]	@ (8012290 <TL_MM_Init+0x70>)
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	4a16      	ldr	r2, [pc, #88]	@ (8012294 <TL_MM_Init+0x74>)
 801223a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801223c:	4b15      	ldr	r3, [pc, #84]	@ (8012294 <TL_MM_Init+0x74>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	6892      	ldr	r2, [r2, #8]
 8012244:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8012246:	4b13      	ldr	r3, [pc, #76]	@ (8012294 <TL_MM_Init+0x74>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	68d2      	ldr	r2, [r2, #12]
 801224e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012250:	4b10      	ldr	r3, [pc, #64]	@ (8012294 <TL_MM_Init+0x74>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a0c      	ldr	r2, [pc, #48]	@ (8012288 <TL_MM_Init+0x68>)
 8012256:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012258:	4b0e      	ldr	r3, [pc, #56]	@ (8012294 <TL_MM_Init+0x74>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	6812      	ldr	r2, [r2, #0]
 8012260:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8012262:	4b0c      	ldr	r3, [pc, #48]	@ (8012294 <TL_MM_Init+0x74>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	6852      	ldr	r2, [r2, #4]
 801226a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801226c:	4b09      	ldr	r3, [pc, #36]	@ (8012294 <TL_MM_Init+0x74>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	6912      	ldr	r2, [r2, #16]
 8012274:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012276:	4b07      	ldr	r3, [pc, #28]	@ (8012294 <TL_MM_Init+0x74>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	6952      	ldr	r2, [r2, #20]
 801227e:	619a      	str	r2, [r3, #24]

  return;
 8012280:	bf00      	nop
}
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	200300b8 	.word	0x200300b8
 801228c:	20000fc8 	.word	0x20000fc8
 8012290:	20030000 	.word	0x20030000
 8012294:	20000fe0 	.word	0x20000fe0

08012298 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	4807      	ldr	r0, [pc, #28]	@ (80122c0 <TL_MM_EvtDone+0x28>)
 80122a4:	f000 fa04 	bl	80126b0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80122a8:	6879      	ldr	r1, [r7, #4]
 80122aa:	2000      	movs	r0, #0
 80122ac:	f000 f862 	bl	8012374 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80122b0:	4804      	ldr	r0, [pc, #16]	@ (80122c4 <TL_MM_EvtDone+0x2c>)
 80122b2:	f002 feff 	bl	80150b4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80122b6:	bf00      	nop
}
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	20000fc8 	.word	0x20000fc8
 80122c4:	080122c9 	.word	0x080122c9

080122c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80122ce:	e00c      	b.n	80122ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80122d0:	1d3b      	adds	r3, r7, #4
 80122d2:	4619      	mov	r1, r3
 80122d4:	480a      	ldr	r0, [pc, #40]	@ (8012300 <SendFreeBuf+0x38>)
 80122d6:	f000 fa32 	bl	801273e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80122da:	4b0a      	ldr	r3, [pc, #40]	@ (8012304 <SendFreeBuf+0x3c>)
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	4611      	mov	r1, r2
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 f9e3 	bl	80126b0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80122ea:	4805      	ldr	r0, [pc, #20]	@ (8012300 <SendFreeBuf+0x38>)
 80122ec:	f000 f998 	bl	8012620 <LST_is_empty>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d0ec      	beq.n	80122d0 <SendFreeBuf+0x8>
  }

  return;
 80122f6:	bf00      	nop
}
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop
 8012300:	20000fc8 	.word	0x20000fc8
 8012304:	20030000 	.word	0x20030000

08012308 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801230c:	4805      	ldr	r0, [pc, #20]	@ (8012324 <TL_TRACES_Init+0x1c>)
 801230e:	f000 f977 	bl	8012600 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8012312:	4b05      	ldr	r3, [pc, #20]	@ (8012328 <TL_TRACES_Init+0x20>)
 8012314:	695b      	ldr	r3, [r3, #20]
 8012316:	4a03      	ldr	r2, [pc, #12]	@ (8012324 <TL_TRACES_Init+0x1c>)
 8012318:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801231a:	f002 ff01 	bl	8015120 <HW_IPCC_TRACES_Init>

  return;
 801231e:	bf00      	nop
}
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	200300c0 	.word	0x200300c0
 8012328:	20030000 	.word	0x20030000

0801232c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012332:	e008      	b.n	8012346 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8012334:	1d3b      	adds	r3, r7, #4
 8012336:	4619      	mov	r1, r3
 8012338:	4808      	ldr	r0, [pc, #32]	@ (801235c <HW_IPCC_TRACES_EvtNot+0x30>)
 801233a:	f000 fa00 	bl	801273e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4618      	mov	r0, r3
 8012342:	f000 f80d 	bl	8012360 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8012346:	4805      	ldr	r0, [pc, #20]	@ (801235c <HW_IPCC_TRACES_EvtNot+0x30>)
 8012348:	f000 f96a 	bl	8012620 <LST_is_empty>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d0f0      	beq.n	8012334 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8012352:	bf00      	nop
}
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	200300c0 	.word	0x200300c0

08012360 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8012368:	bf00      	nop
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	6039      	str	r1, [r7, #0]
 801237e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8012380:	79fb      	ldrb	r3, [r7, #7]
 8012382:	2b06      	cmp	r3, #6
 8012384:	d845      	bhi.n	8012412 <OutputDbgTrace+0x9e>
 8012386:	a201      	add	r2, pc, #4	@ (adr r2, 801238c <OutputDbgTrace+0x18>)
 8012388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238c:	080123a9 	.word	0x080123a9
 8012390:	080123cd 	.word	0x080123cd
 8012394:	080123d3 	.word	0x080123d3
 8012398:	080123e7 	.word	0x080123e7
 801239c:	080123f3 	.word	0x080123f3
 80123a0:	080123f9 	.word	0x080123f9
 80123a4:	08012407 	.word	0x08012407
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	7a5b      	ldrb	r3, [r3, #9]
 80123b0:	2bff      	cmp	r3, #255	@ 0xff
 80123b2:	d005      	beq.n	80123c0 <OutputDbgTrace+0x4c>
 80123b4:	2bff      	cmp	r3, #255	@ 0xff
 80123b6:	dc05      	bgt.n	80123c4 <OutputDbgTrace+0x50>
 80123b8:	2b0e      	cmp	r3, #14
 80123ba:	d005      	beq.n	80123c8 <OutputDbgTrace+0x54>
 80123bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80123be:	e001      	b.n	80123c4 <OutputDbgTrace+0x50>
          break;
 80123c0:	bf00      	nop
 80123c2:	e027      	b.n	8012414 <OutputDbgTrace+0xa0>
          break;
 80123c4:	bf00      	nop
 80123c6:	e025      	b.n	8012414 <OutputDbgTrace+0xa0>
          break;
 80123c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80123ca:	e023      	b.n	8012414 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80123d0:	e020      	b.n	8012414 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	7a5b      	ldrb	r3, [r3, #9]
 80123da:	2b0e      	cmp	r3, #14
 80123dc:	d001      	beq.n	80123e2 <OutputDbgTrace+0x6e>
 80123de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80123e0:	e000      	b.n	80123e4 <OutputDbgTrace+0x70>
          break;
 80123e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80123e4:	e016      	b.n	8012414 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	7a5b      	ldrb	r3, [r3, #9]
 80123ee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80123f0:	e010      	b.n	8012414 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80123f6:	e00d      	b.n	8012414 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	7a5b      	ldrb	r3, [r3, #9]
 8012400:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012402:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012404:	e006      	b.n	8012414 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	7a5b      	ldrb	r3, [r3, #9]
 801240e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012410:	e000      	b.n	8012414 <OutputDbgTrace+0xa0>

    default:
      break;
 8012412:	bf00      	nop
  }

  return;
 8012414:	bf00      	nop
}
 8012416:	3714      	adds	r7, #20
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 801242c:	215c      	movs	r1, #92	@ 0x5c
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f004 f8cc 	bl	80165cc <strrchr>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d007      	beq.n	801244a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 801243a:	215c      	movs	r1, #92	@ 0x5c
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f004 f8c5 	bl	80165cc <strrchr>
 8012442:	4603      	mov	r3, r0
 8012444:	3301      	adds	r3, #1
 8012446:	60fb      	str	r3, [r7, #12]
 8012448:	e00d      	b.n	8012466 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 801244a:	212f      	movs	r1, #47	@ 0x2f
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f004 f8bd 	bl	80165cc <strrchr>
 8012452:	4603      	mov	r3, r0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d006      	beq.n	8012466 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8012458:	212f      	movs	r1, #47	@ 0x2f
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f004 f8b6 	bl	80165cc <strrchr>
 8012460:	4603      	mov	r3, r0
 8012462:	3301      	adds	r3, #1
 8012464:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012466:	68fb      	ldr	r3, [r7, #12]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012476:	f3ef 8310 	mrs	r3, PRIMASK
 801247a:	60fb      	str	r3, [r7, #12]
  return(result);
 801247c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801247e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012480:	b672      	cpsid	i
}
 8012482:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8012484:	1cbb      	adds	r3, r7, #2
 8012486:	4619      	mov	r1, r3
 8012488:	4812      	ldr	r0, [pc, #72]	@ (80124d4 <DbgTrace_TxCpltCallback+0x64>)
 801248a:	f000 fb9d 	bl	8012bc8 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 801248e:	1cbb      	adds	r3, r7, #2
 8012490:	4619      	mov	r1, r3
 8012492:	4810      	ldr	r0, [pc, #64]	@ (80124d4 <DbgTrace_TxCpltCallback+0x64>)
 8012494:	f000 fc87 	bl	8012da6 <CircularQueue_Sense>
 8012498:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00c      	beq.n	80124ba <DbgTrace_TxCpltCallback+0x4a>
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	f383 8810 	msr	PRIMASK, r3
}
 80124aa:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80124ac:	887b      	ldrh	r3, [r7, #2]
 80124ae:	4a0a      	ldr	r2, [pc, #40]	@ (80124d8 <DbgTrace_TxCpltCallback+0x68>)
 80124b0:	4619      	mov	r1, r3
 80124b2:	6938      	ldr	r0, [r7, #16]
 80124b4:	f7ef fd64 	bl	8001f80 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80124b8:	e008      	b.n	80124cc <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80124ba:	4b08      	ldr	r3, [pc, #32]	@ (80124dc <DbgTrace_TxCpltCallback+0x6c>)
 80124bc:	2201      	movs	r2, #1
 80124be:	701a      	strb	r2, [r3, #0]
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f383 8810 	msr	PRIMASK, r3
}
 80124ca:	bf00      	nop
}
 80124cc:	bf00      	nop
 80124ce:	3718      	adds	r7, #24
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	20000fe4 	.word	0x20000fe4
 80124d8:	08012471 	.word	0x08012471
 80124dc:	200000a2 	.word	0x200000a2

080124e0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	68b9      	ldr	r1, [r7, #8]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f000 f805 	bl	8012500 <DbgTraceWrite>
 80124f6:	4603      	mov	r3, r0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b08a      	sub	sp, #40	@ 0x28
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012510:	f3ef 8310 	mrs	r3, PRIMASK
 8012514:	61bb      	str	r3, [r7, #24]
  return(result);
 8012516:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8012518:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012520:	d102      	bne.n	8012528 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8012522:	2300      	movs	r3, #0
 8012524:	627b      	str	r3, [r7, #36]	@ 0x24
 8012526:	e037      	b.n	8012598 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2b01      	cmp	r3, #1
 801252c:	d006      	beq.n	801253c <DbgTraceWrite+0x3c>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2b02      	cmp	r3, #2
 8012532:	d003      	beq.n	801253c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	627b      	str	r3, [r7, #36]	@ 0x24
 801253a:	e02d      	b.n	8012598 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d02a      	beq.n	8012598 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8012546:	b672      	cpsid	i
}
 8012548:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	b29a      	uxth	r2, r3
 801254e:	2301      	movs	r3, #1
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	4814      	ldr	r0, [pc, #80]	@ (80125a4 <DbgTraceWrite+0xa4>)
 8012554:	f000 f912 	bl	801277c <CircularQueue_Add>
 8012558:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d015      	beq.n	801258c <DbgTraceWrite+0x8c>
 8012560:	4b11      	ldr	r3, [pc, #68]	@ (80125a8 <DbgTraceWrite+0xa8>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d010      	beq.n	801258c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801256a:	4b0f      	ldr	r3, [pc, #60]	@ (80125a8 <DbgTraceWrite+0xa8>)
 801256c:	2200      	movs	r2, #0
 801256e:	701a      	strb	r2, [r3, #0]
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	f383 8810 	msr	PRIMASK, r3
}
 801257a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	b29b      	uxth	r3, r3
 8012580:	4a0a      	ldr	r2, [pc, #40]	@ (80125ac <DbgTraceWrite+0xac>)
 8012582:	4619      	mov	r1, r3
 8012584:	69f8      	ldr	r0, [r7, #28]
 8012586:	f7ef fcfb 	bl	8001f80 <DbgOutputTraces>
 801258a:	e005      	b.n	8012598 <DbgTraceWrite+0x98>
 801258c:	6a3b      	ldr	r3, [r7, #32]
 801258e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	f383 8810 	msr	PRIMASK, r3
}
 8012596:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801259a:	4618      	mov	r0, r3
 801259c:	3728      	adds	r7, #40	@ 0x28
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	20000fe4 	.word	0x20000fe4
 80125a8:	200000a2 	.word	0x200000a2
 80125ac:	08012471 	.word	0x08012471

080125b0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	4603      	mov	r3, r0
 80125b8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80125ba:	4b0f      	ldr	r3, [pc, #60]	@ (80125f8 <OTP_Read+0x48>)
 80125bc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80125be:	e002      	b.n	80125c6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3b08      	subs	r3, #8
 80125c4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	3307      	adds	r3, #7
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	79fa      	ldrb	r2, [r7, #7]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d003      	beq.n	80125da <OTP_Read+0x2a>
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	4a09      	ldr	r2, [pc, #36]	@ (80125fc <OTP_Read+0x4c>)
 80125d6:	4293      	cmp	r3, r2
 80125d8:	d1f2      	bne.n	80125c0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	3307      	adds	r3, #7
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	79fa      	ldrb	r2, [r7, #7]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d001      	beq.n	80125ea <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80125ea:	68fb      	ldr	r3, [r7, #12]
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3714      	adds	r7, #20
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr
 80125f8:	1fff73f8 	.word	0x1fff73f8
 80125fc:	1fff7000 	.word	0x1fff7000

08012600 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	605a      	str	r2, [r3, #4]
}
 8012614:	bf00      	nop
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8012620:	b480      	push	{r7}
 8012622:	b087      	sub	sp, #28
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012628:	f3ef 8310 	mrs	r3, PRIMASK
 801262c:	60fb      	str	r3, [r7, #12]
  return(result);
 801262e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012632:	b672      	cpsid	i
}
 8012634:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	429a      	cmp	r2, r3
 801263e:	d102      	bne.n	8012646 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8012640:	2301      	movs	r3, #1
 8012642:	75fb      	strb	r3, [r7, #23]
 8012644:	e001      	b.n	801264a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8012646:	2300      	movs	r3, #0
 8012648:	75fb      	strb	r3, [r7, #23]
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	f383 8810 	msr	PRIMASK, r3
}
 8012654:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012656:	7dfb      	ldrb	r3, [r7, #23]
}
 8012658:	4618      	mov	r0, r3
 801265a:	371c      	adds	r7, #28
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012664:	b480      	push	{r7}
 8012666:	b087      	sub	sp, #28
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801266e:	f3ef 8310 	mrs	r3, PRIMASK
 8012672:	60fb      	str	r3, [r7, #12]
  return(result);
 8012674:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012678:	b672      	cpsid	i
}
 801267a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	605a      	str	r2, [r3, #4]
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	f383 8810 	msr	PRIMASK, r3
}
 80126a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80126a4:	bf00      	nop
 80126a6:	371c      	adds	r7, #28
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b087      	sub	sp, #28
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126ba:	f3ef 8310 	mrs	r3, PRIMASK
 80126be:	60fb      	str	r3, [r7, #12]
  return(result);
 80126c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80126c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80126c4:	b672      	cpsid	i
}
 80126c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685a      	ldr	r2, [r3, #4]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	683a      	ldr	r2, [r7, #0]
 80126da:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	f383 8810 	msr	PRIMASK, r3
}
 80126ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80126f0:	bf00      	nop
 80126f2:	371c      	adds	r7, #28
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80126fc:	b480      	push	{r7}
 80126fe:	b087      	sub	sp, #28
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012704:	f3ef 8310 	mrs	r3, PRIMASK
 8012708:	60fb      	str	r3, [r7, #12]
  return(result);
 801270a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801270c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801270e:	b672      	cpsid	i
}
 8012710:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	6812      	ldr	r2, [r2, #0]
 801271a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	6852      	ldr	r2, [r2, #4]
 8012724:	605a      	str	r2, [r3, #4]
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f383 8810 	msr	PRIMASK, r3
}
 8012730:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012732:	bf00      	nop
 8012734:	371c      	adds	r7, #28
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b086      	sub	sp, #24
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012748:	f3ef 8310 	mrs	r3, PRIMASK
 801274c:	60fb      	str	r3, [r7, #12]
  return(result);
 801274e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012752:	b672      	cpsid	i
}
 8012754:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4618      	mov	r0, r3
 8012764:	f7ff ffca 	bl	80126fc <LST_remove_node>
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	f383 8810 	msr	PRIMASK, r3
}
 8012772:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012774:	bf00      	nop
 8012776:	3718      	adds	r7, #24
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08e      	sub	sp, #56	@ 0x38
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	603b      	str	r3, [r7, #0]
 8012788:	4613      	mov	r3, r2
 801278a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 801278c:	2300      	movs	r3, #0
 801278e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8012790:	2300      	movs	r3, #0
 8012792:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012794:	2300      	movs	r3, #0
 8012796:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012798:	2300      	movs	r3, #0
 801279a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801279c:	2300      	movs	r3, #0
 801279e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80127a0:	2300      	movs	r3, #0
 80127a2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80127a4:	2300      	movs	r3, #0
 80127a6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	891b      	ldrh	r3, [r3, #8]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <CircularQueue_Add+0x38>
 80127b0:	2302      	movs	r3, #2
 80127b2:	e000      	b.n	80127b6 <CircularQueue_Add+0x3a>
 80127b4:	2300      	movs	r3, #0
 80127b6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	695b      	ldr	r3, [r3, #20]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d029      	beq.n	8012814 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	891b      	ldrh	r3, [r3, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d122      	bne.n	801280e <CircularQueue_Add+0x92>
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	691b      	ldr	r3, [r3, #16]
 80127d0:	4413      	add	r3, r2
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	691b      	ldr	r3, [r3, #16]
 80127de:	1c59      	adds	r1, r3, #1
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	4299      	cmp	r1, r3
 80127e6:	d306      	bcc.n	80127f6 <CircularQueue_Add+0x7a>
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	6919      	ldr	r1, [r3, #16]
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	1acb      	subs	r3, r1, r3
 80127f2:	3301      	adds	r3, #1
 80127f4:	e002      	b.n	80127fc <CircularQueue_Add+0x80>
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	691b      	ldr	r3, [r3, #16]
 80127fa:	3301      	adds	r3, #1
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	021b      	lsls	r3, r3, #8
 8012802:	b29b      	uxth	r3, r3
 8012804:	4403      	add	r3, r0
 8012806:	b29b      	uxth	r3, r3
 8012808:	3302      	adds	r3, #2
 801280a:	b29b      	uxth	r3, r3
 801280c:	e001      	b.n	8012812 <CircularQueue_Add+0x96>
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	891b      	ldrh	r3, [r3, #8]
 8012812:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	891b      	ldrh	r3, [r3, #8]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d002      	beq.n	8012822 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	891b      	ldrh	r3, [r3, #8]
 8012820:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	691a      	ldr	r2, [r3, #16]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	429a      	cmp	r2, r3
 801282c:	d307      	bcc.n	801283e <CircularQueue_Add+0xc2>
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	6919      	ldr	r1, [r3, #16]
 8012836:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012838:	440b      	add	r3, r1
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	e000      	b.n	8012840 <CircularQueue_Add+0xc4>
 801283e:	2300      	movs	r3, #0
 8012840:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012842:	88fa      	ldrh	r2, [r7, #6]
 8012844:	7ffb      	ldrb	r3, [r7, #31]
 8012846:	4413      	add	r3, r2
 8012848:	461a      	mov	r2, r3
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	fb02 f303 	mul.w	r3, r2, r3
 8012850:	69ba      	ldr	r2, [r7, #24]
 8012852:	429a      	cmp	r2, r3
 8012854:	d80b      	bhi.n	801286e <CircularQueue_Add+0xf2>
 8012856:	88fa      	ldrh	r2, [r7, #6]
 8012858:	7ffb      	ldrb	r3, [r7, #31]
 801285a:	4413      	add	r3, r2
 801285c:	461a      	mov	r2, r3
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	fbb3 f1f2 	udiv	r1, r3, r2
 8012864:	fb01 f202 	mul.w	r2, r1, r2
 8012868:	1a9b      	subs	r3, r3, r2
 801286a:	b2db      	uxtb	r3, r3
 801286c:	e000      	b.n	8012870 <CircularQueue_Add+0xf4>
 801286e:	2300      	movs	r3, #0
 8012870:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012872:	7dfa      	ldrb	r2, [r7, #23]
 8012874:	7ffb      	ldrb	r3, [r7, #31]
 8012876:	429a      	cmp	r2, r3
 8012878:	bf8c      	ite	hi
 801287a:	2301      	movhi	r3, #1
 801287c:	2300      	movls	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012882:	7fbb      	ldrb	r3, [r7, #30]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d008      	beq.n	801289a <CircularQueue_Add+0x11e>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	7f1b      	ldrb	r3, [r3, #28]
 801288c:	f003 0301 	and.w	r3, r3, #1
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <CircularQueue_Add+0x11e>
 8012894:	7dfb      	ldrb	r3, [r7, #23]
 8012896:	b29b      	uxth	r3, r3
 8012898:	e000      	b.n	801289c <CircularQueue_Add+0x120>
 801289a:	8bbb      	ldrh	r3, [r7, #28]
 801289c:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 801289e:	7fbb      	ldrb	r3, [r7, #30]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d008      	beq.n	80128b6 <CircularQueue_Add+0x13a>
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	7f1b      	ldrb	r3, [r3, #28]
 80128a8:	f003 0302 	and.w	r3, r3, #2
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d002      	beq.n	80128b6 <CircularQueue_Add+0x13a>
 80128b0:	7ffb      	ldrb	r3, [r7, #31]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	e000      	b.n	80128b8 <CircularQueue_Add+0x13c>
 80128b6:	8bbb      	ldrh	r3, [r7, #28]
 80128b8:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80128ba:	88fb      	ldrh	r3, [r7, #6]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f000 817e 	beq.w	8012bbe <CircularQueue_Add+0x442>
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	695a      	ldr	r2, [r3, #20]
 80128c6:	88f9      	ldrh	r1, [r7, #6]
 80128c8:	7ffb      	ldrb	r3, [r7, #31]
 80128ca:	440b      	add	r3, r1
 80128cc:	4619      	mov	r1, r3
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	fb01 f303 	mul.w	r3, r1, r3
 80128d4:	441a      	add	r2, r3
 80128d6:	8bbb      	ldrh	r3, [r7, #28]
 80128d8:	441a      	add	r2, r3
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	429a      	cmp	r2, r3
 80128e0:	f200 816d 	bhi.w	8012bbe <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80128e4:	2300      	movs	r3, #0
 80128e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128e8:	e14a      	b.n	8012b80 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	691a      	ldr	r2, [r3, #16]
 80128ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80128f0:	441a      	add	r2, r3
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d307      	bcc.n	801290a <CircularQueue_Add+0x18e>
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	691a      	ldr	r2, [r3, #16]
 80128fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012900:	441a      	add	r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	1ad3      	subs	r3, r2, r3
 8012908:	e003      	b.n	8012912 <CircularQueue_Add+0x196>
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	691a      	ldr	r2, [r3, #16]
 801290e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012910:	4413      	add	r3, r2
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	691b      	ldr	r3, [r3, #16]
 801291a:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	891b      	ldrh	r3, [r3, #8]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d130      	bne.n	8012986 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801292a:	1c59      	adds	r1, r3, #1
 801292c:	6339      	str	r1, [r7, #48]	@ 0x30
 801292e:	4413      	add	r3, r2
 8012930:	88fa      	ldrh	r2, [r7, #6]
 8012932:	b2d2      	uxtb	r2, r2
 8012934:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801293c:	429a      	cmp	r2, r3
 801293e:	d304      	bcc.n	801294a <CircularQueue_Add+0x1ce>
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	e000      	b.n	801294c <CircularQueue_Add+0x1d0>
 801294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801294c:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801294e:	88fb      	ldrh	r3, [r7, #6]
 8012950:	0a1b      	lsrs	r3, r3, #8
 8012952:	b298      	uxth	r0, r3
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295a:	1c59      	adds	r1, r3, #1
 801295c:	6339      	str	r1, [r7, #48]	@ 0x30
 801295e:	4413      	add	r3, r2
 8012960:	b2c2      	uxtb	r2, r0
 8012962:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801296a:	429a      	cmp	r2, r3
 801296c:	d304      	bcc.n	8012978 <CircularQueue_Add+0x1fc>
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	e000      	b.n	801297a <CircularQueue_Add+0x1fe>
 8012978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801297a:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	695b      	ldr	r3, [r3, #20]
 8012980:	1c9a      	adds	r2, r3, #2
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012986:	88fa      	ldrh	r2, [r7, #6]
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6859      	ldr	r1, [r3, #4]
 801298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801298e:	1acb      	subs	r3, r1, r3
 8012990:	4293      	cmp	r3, r2
 8012992:	bf28      	it	cs
 8012994:	4613      	movcs	r3, r2
 8012996:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012998:	88fb      	ldrh	r3, [r7, #6]
 801299a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801299c:	429a      	cmp	r2, r3
 801299e:	d007      	beq.n	80129b0 <CircularQueue_Add+0x234>
 80129a0:	88fb      	ldrh	r3, [r7, #6]
 80129a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d225      	bcs.n	80129f4 <CircularQueue_Add+0x278>
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	7f1b      	ldrb	r3, [r3, #28]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d121      	bne.n	80129f4 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b6:	18d0      	adds	r0, r2, r3
 80129b8:	88fb      	ldrh	r3, [r7, #6]
 80129ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129bc:	fb02 f303 	mul.w	r3, r2, r3
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	4413      	add	r3, r2
 80129c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129c6:	4619      	mov	r1, r3
 80129c8:	f003 fe89 	bl	80166de <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	695a      	ldr	r2, [r3, #20]
 80129d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d2:	441a      	add	r2, r3
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80129d8:	2300      	movs	r3, #0
 80129da:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80129dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129de:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80129e0:	88fa      	ldrh	r2, [r7, #6]
 80129e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80129e8:	7ffb      	ldrb	r3, [r7, #31]
 80129ea:	b29a      	uxth	r2, r3
 80129ec:	88fb      	ldrh	r3, [r7, #6]
 80129ee:	4413      	add	r3, r2
 80129f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80129f2:	e0a4      	b.n	8012b3e <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80129f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 80a1 	beq.w	8012b3e <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	7f1b      	ldrb	r3, [r3, #28]
 8012a00:	f003 0301 	and.w	r3, r3, #1
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d03a      	beq.n	8012a7e <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	891b      	ldrh	r3, [r3, #8]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d10d      	bne.n	8012a2c <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	681a      	ldr	r2, [r3, #0]
 8012a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a16:	3b02      	subs	r3, #2
 8012a18:	4413      	add	r3, r2
 8012a1a:	22ff      	movs	r2, #255	@ 0xff
 8012a1c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a24:	3b01      	subs	r3, #1
 8012a26:	4413      	add	r3, r2
 8012a28:	22ff      	movs	r2, #255	@ 0xff
 8012a2a:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	695a      	ldr	r2, [r3, #20]
 8012a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a32:	441a      	add	r2, r3
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012a3c:	88fb      	ldrh	r3, [r7, #6]
 8012a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012a40:	2300      	movs	r3, #0
 8012a42:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	891b      	ldrh	r3, [r3, #8]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d16f      	bne.n	8012b2c <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a52:	1c59      	adds	r1, r3, #1
 8012a54:	6339      	str	r1, [r7, #48]	@ 0x30
 8012a56:	4413      	add	r3, r2
 8012a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a5a:	b2d2      	uxtb	r2, r2
 8012a5c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a60:	0a18      	lsrs	r0, r3, #8
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	681a      	ldr	r2, [r3, #0]
 8012a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a68:	1c59      	adds	r1, r3, #1
 8012a6a:	6339      	str	r1, [r7, #48]	@ 0x30
 8012a6c:	4413      	add	r3, r2
 8012a6e:	b2c2      	uxtb	r2, r0
 8012a70:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	695b      	ldr	r3, [r3, #20]
 8012a76:	1c9a      	adds	r2, r3, #2
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	615a      	str	r2, [r3, #20]
 8012a7c:	e056      	b.n	8012b2c <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	7f1b      	ldrb	r3, [r3, #28]
 8012a82:	f003 0302 	and.w	r3, r3, #2
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d050      	beq.n	8012b2c <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	891b      	ldrh	r3, [r3, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d14a      	bne.n	8012b28 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a98:	3b02      	subs	r3, #2
 8012a9a:	4413      	add	r3, r2
 8012a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a9e:	b2d2      	uxtb	r2, r2
 8012aa0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aa4:	0a19      	lsrs	r1, r3, #8
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aac:	3b01      	subs	r3, #1
 8012aae:	4413      	add	r3, r2
 8012ab0:	b2ca      	uxtb	r2, r1
 8012ab2:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aba:	18d0      	adds	r0, r2, r3
 8012abc:	88fb      	ldrh	r3, [r7, #6]
 8012abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ac0:	fb02 f303 	mul.w	r3, r2, r3
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	4413      	add	r3, r2
 8012ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012aca:	4619      	mov	r1, r3
 8012acc:	f003 fe07 	bl	80166de <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	695a      	ldr	r2, [r3, #20]
 8012ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad6:	441a      	add	r2, r3
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8012adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ade:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012ae0:	88fa      	ldrh	r2, [r7, #6]
 8012ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012af2:	2300      	movs	r3, #0
 8012af4:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012afc:	1c59      	adds	r1, r3, #1
 8012afe:	6339      	str	r1, [r7, #48]	@ 0x30
 8012b00:	4413      	add	r3, r2
 8012b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b04:	b2d2      	uxtb	r2, r2
 8012b06:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0a:	0a18      	lsrs	r0, r3, #8
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b12:	1c59      	adds	r1, r3, #1
 8012b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8012b16:	4413      	add	r3, r2
 8012b18:	b2c2      	uxtb	r2, r0
 8012b1a:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	1c9a      	adds	r2, r3, #2
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	615a      	str	r2, [r3, #20]
 8012b26:	e001      	b.n	8012b2c <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e049      	b.n	8012bc0 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012b2c:	7ffb      	ldrb	r3, [r7, #31]
 8012b2e:	b29a      	uxth	r2, r3
 8012b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	4413      	add	r3, r2
 8012b36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d015      	beq.n	8012b70 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b4a:	18d0      	adds	r0, r2, r3
 8012b4c:	88fb      	ldrh	r3, [r7, #6]
 8012b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b50:	fb03 f202 	mul.w	r2, r3, r2
 8012b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b56:	4413      	add	r3, r2
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b5e:	4619      	mov	r1, r3
 8012b60:	f003 fdbd 	bl	80166de <memcpy>
        q->byteCount += NbBytesToCopy;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	695a      	ldr	r2, [r3, #20]
 8012b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6a:	441a      	add	r2, r3
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	699b      	ldr	r3, [r3, #24]
 8012b74:	1c5a      	adds	r2, r3, #1
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8012b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	f4ff aeb0 	bcc.w	80128ea <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6919      	ldr	r1, [r3, #16]
 8012b92:	7ffb      	ldrb	r3, [r7, #31]
 8012b94:	4419      	add	r1, r3
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	4299      	cmp	r1, r3
 8012b9c:	d307      	bcc.n	8012bae <CircularQueue_Add+0x432>
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	6919      	ldr	r1, [r3, #16]
 8012ba2:	7ffb      	ldrb	r3, [r7, #31]
 8012ba4:	4419      	add	r1, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	1acb      	subs	r3, r1, r3
 8012bac:	e003      	b.n	8012bb6 <CircularQueue_Add+0x43a>
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6919      	ldr	r1, [r3, #16]
 8012bb2:	7ffb      	ldrb	r3, [r7, #31]
 8012bb4:	440b      	add	r3, r1
 8012bb6:	4413      	add	r3, r2
 8012bb8:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8012bba:	6a3b      	ldr	r3, [r7, #32]
 8012bbc:	e000      	b.n	8012bc0 <CircularQueue_Add+0x444>
    return NULL;
 8012bbe:	2300      	movs	r3, #0
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3738      	adds	r7, #56	@ 0x38
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b085      	sub	sp, #20
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	891b      	ldrh	r3, [r3, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <CircularQueue_Remove+0x1e>
 8012be2:	2302      	movs	r3, #2
 8012be4:	e000      	b.n	8012be8 <CircularQueue_Remove+0x20>
 8012be6:	2300      	movs	r3, #0
 8012be8:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	695b      	ldr	r3, [r3, #20]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 80ca 	beq.w	8012d8c <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	891b      	ldrh	r3, [r3, #8]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d120      	bne.n	8012c42 <CircularQueue_Remove+0x7a>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	4413      	add	r3, r2
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	1c59      	adds	r1, r3, #1
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	4299      	cmp	r1, r3
 8012c1e:	d306      	bcc.n	8012c2e <CircularQueue_Remove+0x66>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	68d9      	ldr	r1, [r3, #12]
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	1acb      	subs	r3, r1, r3
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	e002      	b.n	8012c34 <CircularQueue_Remove+0x6c>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	3301      	adds	r3, #1
 8012c34:	4413      	add	r3, r2
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	021b      	lsls	r3, r3, #8
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	4403      	add	r3, r0
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	e001      	b.n	8012c46 <CircularQueue_Remove+0x7e>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	891b      	ldrh	r3, [r3, #8]
 8012c46:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	7f1b      	ldrb	r3, [r3, #28]
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d056      	beq.n	8012d02 <CircularQueue_Remove+0x13a>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7f1b      	ldrb	r3, [r3, #28]
 8012c58:	f003 0302 	and.w	r3, r3, #2
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d150      	bne.n	8012d02 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012c60:	897b      	ldrh	r3, [r7, #10]
 8012c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d103      	bne.n	8012c72 <CircularQueue_Remove+0xaa>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	891b      	ldrh	r3, [r3, #8]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d012      	beq.n	8012c98 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68da      	ldr	r2, [r3, #12]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d941      	bls.n	8012d02 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	891b      	ldrh	r3, [r3, #8]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d03d      	beq.n	8012d02 <CircularQueue_Remove+0x13a>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	685a      	ldr	r2, [r3, #4]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	8912      	ldrh	r2, [r2, #8]
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d234      	bcs.n	8012d02 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	695a      	ldr	r2, [r3, #20]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	68d9      	ldr	r1, [r3, #12]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	1acb      	subs	r3, r1, r3
 8012ca6:	441a      	add	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	891b      	ldrh	r3, [r3, #8]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d120      	bne.n	8012cfc <CircularQueue_Remove+0x134>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	1c59      	adds	r1, r3, #1
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	4299      	cmp	r1, r3
 8012cd8:	d306      	bcc.n	8012ce8 <CircularQueue_Remove+0x120>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	68d9      	ldr	r1, [r3, #12]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	1acb      	subs	r3, r1, r3
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	e002      	b.n	8012cee <CircularQueue_Remove+0x126>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	3301      	adds	r3, #1
 8012cee:	4413      	add	r3, r2
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	021b      	lsls	r3, r3, #8
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	4403      	add	r3, r0
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	e001      	b.n	8012d00 <CircularQueue_Remove+0x138>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	891b      	ldrh	r3, [r3, #8]
 8012d00:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681a      	ldr	r2, [r3, #0]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	68d9      	ldr	r1, [r3, #12]
 8012d0a:	7a7b      	ldrb	r3, [r7, #9]
 8012d0c:	4419      	add	r1, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4299      	cmp	r1, r3
 8012d14:	d307      	bcc.n	8012d26 <CircularQueue_Remove+0x15e>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	68d9      	ldr	r1, [r3, #12]
 8012d1a:	7a7b      	ldrb	r3, [r7, #9]
 8012d1c:	4419      	add	r1, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	1acb      	subs	r3, r1, r3
 8012d24:	e003      	b.n	8012d2e <CircularQueue_Remove+0x166>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	68d9      	ldr	r1, [r3, #12]
 8012d2a:	7a7b      	ldrb	r3, [r7, #9]
 8012d2c:	440b      	add	r3, r1
 8012d2e:	4413      	add	r3, r2
 8012d30:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	695b      	ldr	r3, [r3, #20]
 8012d36:	8979      	ldrh	r1, [r7, #10]
 8012d38:	7a7a      	ldrb	r2, [r7, #9]
 8012d3a:	440a      	add	r2, r1
 8012d3c:	1a9a      	subs	r2, r3, r2
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	695b      	ldr	r3, [r3, #20]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d01b      	beq.n	8012d82 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68da      	ldr	r2, [r3, #12]
 8012d4e:	897b      	ldrh	r3, [r7, #10]
 8012d50:	441a      	add	r2, r3
 8012d52:	7a7b      	ldrb	r3, [r7, #9]
 8012d54:	441a      	add	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d309      	bcc.n	8012d72 <CircularQueue_Remove+0x1aa>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	68da      	ldr	r2, [r3, #12]
 8012d62:	897b      	ldrh	r3, [r7, #10]
 8012d64:	441a      	add	r2, r3
 8012d66:	7a7b      	ldrb	r3, [r7, #9]
 8012d68:	441a      	add	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	1ad3      	subs	r3, r2, r3
 8012d70:	e005      	b.n	8012d7e <CircularQueue_Remove+0x1b6>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68da      	ldr	r2, [r3, #12]
 8012d76:	897b      	ldrh	r3, [r7, #10]
 8012d78:	441a      	add	r2, r3
 8012d7a:	7a7b      	ldrb	r3, [r7, #9]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	1e5a      	subs	r2, r3, #1
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d002      	beq.n	8012d98 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	897a      	ldrh	r2, [r7, #10]
 8012d96:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8012d98:	68fb      	ldr	r3, [r7, #12]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3714      	adds	r7, #20
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8012da6:	b480      	push	{r7}
 8012da8:	b087      	sub	sp, #28
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	891b      	ldrh	r3, [r3, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <CircularQueue_Sense+0x1e>
 8012dc0:	2302      	movs	r3, #2
 8012dc2:	e000      	b.n	8012dc6 <CircularQueue_Sense+0x20>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	695b      	ldr	r3, [r3, #20]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f000 808e 	beq.w	8012ef6 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	891b      	ldrh	r3, [r3, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d120      	bne.n	8012e2a <CircularQueue_Sense+0x84>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	4413      	add	r3, r2
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	4618      	mov	r0, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	1c59      	adds	r1, r3, #1
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	4299      	cmp	r1, r3
 8012e06:	d306      	bcc.n	8012e16 <CircularQueue_Sense+0x70>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	68d9      	ldr	r1, [r3, #12]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	1acb      	subs	r3, r1, r3
 8012e12:	3301      	adds	r3, #1
 8012e14:	e002      	b.n	8012e1c <CircularQueue_Sense+0x76>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	4413      	add	r3, r2
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	021b      	lsls	r3, r3, #8
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4403      	add	r3, r0
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	e001      	b.n	8012e2e <CircularQueue_Sense+0x88>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	891b      	ldrh	r3, [r3, #8]
 8012e2e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	7f1b      	ldrb	r3, [r3, #28]
 8012e34:	f003 0301 	and.w	r3, r3, #1
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d047      	beq.n	8012ecc <CircularQueue_Sense+0x126>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	7f1b      	ldrb	r3, [r3, #28]
 8012e40:	f003 0302 	and.w	r3, r3, #2
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d141      	bne.n	8012ecc <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012e48:	8a7b      	ldrh	r3, [r7, #18]
 8012e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d103      	bne.n	8012e5a <CircularQueue_Sense+0xb4>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	891b      	ldrh	r3, [r3, #8]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d012      	beq.n	8012e80 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	68da      	ldr	r2, [r3, #12]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d932      	bls.n	8012ecc <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	891b      	ldrh	r3, [r3, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d02e      	beq.n	8012ecc <CircularQueue_Sense+0x126>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	8912      	ldrh	r2, [r2, #8]
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d225      	bcs.n	8012ecc <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8012e80:	2300      	movs	r3, #0
 8012e82:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	891b      	ldrh	r3, [r3, #8]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d11c      	bne.n	8012ec6 <CircularQueue_Sense+0x120>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	4413      	add	r3, r2
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	4618      	mov	r0, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	1c59      	adds	r1, r3, #1
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4299      	cmp	r1, r3
 8012ea6:	d305      	bcc.n	8012eb4 <CircularQueue_Sense+0x10e>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	68f9      	ldr	r1, [r7, #12]
 8012eae:	1acb      	subs	r3, r1, r3
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	e001      	b.n	8012eb8 <CircularQueue_Sense+0x112>
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	4413      	add	r3, r2
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	021b      	lsls	r3, r3, #8
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	4403      	add	r3, r0
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	e001      	b.n	8012eca <CircularQueue_Sense+0x124>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	891b      	ldrh	r3, [r3, #8]
 8012eca:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	7af9      	ldrb	r1, [r7, #11]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	4419      	add	r1, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	4299      	cmp	r1, r3
 8012edc:	d306      	bcc.n	8012eec <CircularQueue_Sense+0x146>
 8012ede:	7af9      	ldrb	r1, [r7, #11]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	4419      	add	r1, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	1acb      	subs	r3, r1, r3
 8012eea:	e002      	b.n	8012ef2 <CircularQueue_Sense+0x14c>
 8012eec:	7af9      	ldrb	r1, [r7, #11]
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	440b      	add	r3, r1
 8012ef2:	4413      	add	r3, r2
 8012ef4:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	8a7a      	ldrh	r2, [r7, #18]
 8012f00:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8012f02:	697b      	ldr	r3, [r7, #20]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	371c      	adds	r7, #28
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012f10:	b480      	push	{r7}
 8012f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012f14:	4b03      	ldr	r3, [pc, #12]	@ (8012f24 <LL_FLASH_GetUDN+0x14>)
 8012f16:	681b      	ldr	r3, [r3, #0]
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	1fff7580 	.word	0x1fff7580

08012f28 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8012f2c:	4b03      	ldr	r3, [pc, #12]	@ (8012f3c <LL_FLASH_GetDeviceID+0x14>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	b2db      	uxtb	r3, r3
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	1fff7584 	.word	0x1fff7584

08012f40 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012f40:	b480      	push	{r7}
 8012f42:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8012f44:	4b03      	ldr	r3, [pc, #12]	@ (8012f54 <LL_FLASH_GetSTCompanyID+0x14>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	0a1b      	lsrs	r3, r3, #8
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	1fff7584 	.word	0x1fff7584

08012f58 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8012f58:	b5b0      	push	{r4, r5, r7, lr}
 8012f5a:	b090      	sub	sp, #64	@ 0x40
 8012f5c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012f5e:	2392      	movs	r3, #146	@ 0x92
 8012f60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 8012f64:	4a4d      	ldr	r2, [pc, #308]	@ (801309c <APP_BLE_Init+0x144>)
 8012f66:	2100      	movs	r1, #0
 8012f68:	2020      	movs	r0, #32
 8012f6a:	f002 ff8d 	bl	8015e88 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 8012f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80130a0 <APP_BLE_Init+0x148>)
 8012f70:	2100      	movs	r1, #0
 8012f72:	2008      	movs	r0, #8
 8012f74:	f002 ff88 	bl	8015e88 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8012f78:	4b4a      	ldr	r3, [pc, #296]	@ (80130a4 <APP_BLE_Init+0x14c>)
 8012f7a:	1d3c      	adds	r4, r7, #4
 8012f7c:	461d      	mov	r5, r3
 8012f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012f8e:	c403      	stmia	r4!, {r0, r1}
 8012f90:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8012f92:	f000 fba3 	bl	80136dc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8012f96:	2101      	movs	r1, #1
 8012f98:	2002      	movs	r0, #2
 8012f9a:	f002 fe49 	bl	8015c30 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8012f9e:	4a42      	ldr	r2, [pc, #264]	@ (80130a8 <APP_BLE_Init+0x150>)
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	2004      	movs	r0, #4
 8012fa4:	f002 ff70 	bl	8015e88 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8012fa8:	1d3b      	adds	r3, r7, #4
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fe fc2a 	bl	8011804 <SHCI_C2_BLE_Init>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8012fb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d012      	beq.n	8012fe4 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8012fbe:	483b      	ldr	r0, [pc, #236]	@ (80130ac <APP_BLE_Init+0x154>)
 8012fc0:	f7ff fa2e 	bl	8012420 <DbgTraceGetFileName>
 8012fc4:	4601      	mov	r1, r0
 8012fc6:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 8012fca:	4a39      	ldr	r2, [pc, #228]	@ (80130b0 <APP_BLE_Init+0x158>)
 8012fcc:	4839      	ldr	r0, [pc, #228]	@ (80130b4 <APP_BLE_Init+0x15c>)
 8012fce:	f003 f95b 	bl	8016288 <iprintf>
 8012fd2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	4837      	ldr	r0, [pc, #220]	@ (80130b8 <APP_BLE_Init+0x160>)
 8012fda:	f003 f955 	bl	8016288 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8012fde:	f7f1 f925 	bl	800422c <Error_Handler>
 8012fe2:	e00c      	b.n	8012ffe <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8012fe4:	4831      	ldr	r0, [pc, #196]	@ (80130ac <APP_BLE_Init+0x154>)
 8012fe6:	f7ff fa1b 	bl	8012420 <DbgTraceGetFileName>
 8012fea:	4601      	mov	r1, r0
 8012fec:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8012ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80130b0 <APP_BLE_Init+0x158>)
 8012ff2:	4830      	ldr	r0, [pc, #192]	@ (80130b4 <APP_BLE_Init+0x15c>)
 8012ff4:	f003 f948 	bl	8016288 <iprintf>
 8012ff8:	4830      	ldr	r0, [pc, #192]	@ (80130bc <APP_BLE_Init+0x164>)
 8012ffa:	f003 f945 	bl	8016288 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8012ffe:	f000 fb83 	bl	8013708 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8013002:	f7fe fb59 	bl	80116b8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013006:	4b2e      	ldr	r3, [pc, #184]	@ (80130c0 <APP_BLE_Init+0x168>)
 8013008:	2200      	movs	r2, #0
 801300a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801300e:	4b2c      	ldr	r3, [pc, #176]	@ (80130c0 <APP_BLE_Init+0x168>)
 8013010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013014:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8013016:	4a2b      	ldr	r2, [pc, #172]	@ (80130c4 <APP_BLE_Init+0x16c>)
 8013018:	2100      	movs	r1, #0
 801301a:	2001      	movs	r0, #1
 801301c:	f002 ff34 	bl	8015e88 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8013020:	2006      	movs	r0, #6
 8013022:	f7fe f91e 	bl	8011262 <aci_hal_set_radio_activity_mask>
 8013026:	4603      	mov	r3, r0
 8013028:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 801302c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013030:	2b00      	cmp	r3, #0
 8013032:	d010      	beq.n	8013056 <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8013034:	481d      	ldr	r0, [pc, #116]	@ (80130ac <APP_BLE_Init+0x154>)
 8013036:	f7ff f9f3 	bl	8012420 <DbgTraceGetFileName>
 801303a:	4601      	mov	r1, r0
 801303c:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 8013040:	4a1b      	ldr	r2, [pc, #108]	@ (80130b0 <APP_BLE_Init+0x158>)
 8013042:	481c      	ldr	r0, [pc, #112]	@ (80130b4 <APP_BLE_Init+0x15c>)
 8013044:	f003 f920 	bl	8016288 <iprintf>
 8013048:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801304c:	4619      	mov	r1, r3
 801304e:	481e      	ldr	r0, [pc, #120]	@ (80130c8 <APP_BLE_Init+0x170>)
 8013050:	f003 f91a 	bl	8016288 <iprintf>
 8013054:	e00c      	b.n	8013070 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8013056:	4815      	ldr	r0, [pc, #84]	@ (80130ac <APP_BLE_Init+0x154>)
 8013058:	f7ff f9e2 	bl	8012420 <DbgTraceGetFileName>
 801305c:	4601      	mov	r1, r0
 801305e:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8013062:	4a13      	ldr	r2, [pc, #76]	@ (80130b0 <APP_BLE_Init+0x158>)
 8013064:	4813      	ldr	r0, [pc, #76]	@ (80130b4 <APP_BLE_Init+0x15c>)
 8013066:	f003 f90f 	bl	8016288 <iprintf>
 801306a:	4818      	ldr	r0, [pc, #96]	@ (80130cc <APP_BLE_Init+0x174>)
 801306c:	f003 f90c 	bl	8016288 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8013070:	4b17      	ldr	r3, [pc, #92]	@ (80130d0 <APP_BLE_Init+0x178>)
 8013072:	2200      	movs	r2, #0
 8013074:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8013076:	4b17      	ldr	r3, [pc, #92]	@ (80130d4 <APP_BLE_Init+0x17c>)
 8013078:	2201      	movs	r2, #1
 801307a:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 801307c:	f001 f8b0 	bl	80141e0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8013080:	4b0f      	ldr	r3, [pc, #60]	@ (80130c0 <APP_BLE_Init+0x168>)
 8013082:	2200      	movs	r2, #0
 8013084:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8013086:	4b0e      	ldr	r3, [pc, #56]	@ (80130c0 <APP_BLE_Init+0x168>)
 8013088:	2200      	movs	r2, #0
 801308a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801308c:	2001      	movs	r0, #1
 801308e:	f000 fdcf 	bl	8013c30 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8013092:	bf00      	nop
}
 8013094:	3740      	adds	r7, #64	@ 0x40
 8013096:	46bd      	mov	sp, r7
 8013098:	bdb0      	pop	{r4, r5, r7, pc}
 801309a:	bf00      	nop
 801309c:	080140d5 	.word	0x080140d5
 80130a0:	080140fd 	.word	0x080140fd
 80130a4:	08017b00 	.word	0x08017b00
 80130a8:	08011a21 	.word	0x08011a21
 80130ac:	080179f4 	.word	0x080179f4
 80130b0:	08019138 	.word	0x08019138
 80130b4:	08017a10 	.word	0x08017a10
 80130b8:	08017a24 	.word	0x08017a24
 80130bc:	08017a5c 	.word	0x08017a5c
 80130c0:	20001018 	.word	0x20001018
 80130c4:	08013db5 	.word	0x08013db5
 80130c8:	08017a84 	.word	0x08017a84
 80130cc:	08017ac8 	.word	0x08017ac8
 80130d0:	200010a0 	.word	0x200010a0
 80130d4:	200010a1 	.word	0x200010a1

080130d8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80130d8:	b5b0      	push	{r4, r5, r7, lr}
 80130da:	b08e      	sub	sp, #56	@ 0x38
 80130dc:	af04      	add	r7, sp, #16
 80130de:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80130e0:	2392      	movs	r3, #146	@ 0x92
 80130e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	3301      	adds	r3, #1
 80130ea:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80130ec:	6a3b      	ldr	r3, [r7, #32]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2bff      	cmp	r3, #255	@ 0xff
 80130f2:	f000 8173 	beq.w	80133dc <SVCCTL_App_Notification+0x304>
 80130f6:	2bff      	cmp	r3, #255	@ 0xff
 80130f8:	f300 82c0 	bgt.w	801367c <SVCCTL_App_Notification+0x5a4>
 80130fc:	2b05      	cmp	r3, #5
 80130fe:	d002      	beq.n	8013106 <SVCCTL_App_Notification+0x2e>
 8013100:	2b3e      	cmp	r3, #62	@ 0x3e
 8013102:	d04a      	beq.n	801319a <SVCCTL_App_Notification+0xc2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8013104:	e2ba      	b.n	801367c <SVCCTL_App_Notification+0x5a4>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	3302      	adds	r3, #2
 801310a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013112:	b29a      	uxth	r2, r3
 8013114:	4ba1      	ldr	r3, [pc, #644]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013116:	8adb      	ldrh	r3, [r3, #22]
 8013118:	429a      	cmp	r2, r3
 801311a:	d12d      	bne.n	8013178 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801311c:	4b9f      	ldr	r3, [pc, #636]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 801311e:	2200      	movs	r2, #0
 8013120:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013122:	4b9e      	ldr	r3, [pc, #632]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013124:	2200      	movs	r2, #0
 8013126:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 801312a:	489d      	ldr	r0, [pc, #628]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 801312c:	f7ff f978 	bl	8012420 <DbgTraceGetFileName>
 8013130:	4601      	mov	r1, r0
 8013132:	f44f 73e7 	mov.w	r3, #462	@ 0x1ce
 8013136:	4a9b      	ldr	r2, [pc, #620]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 8013138:	489b      	ldr	r0, [pc, #620]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 801313a:	f003 f8a5 	bl	8016288 <iprintf>
 801313e:	489b      	ldr	r0, [pc, #620]	@ (80133ac <SVCCTL_App_Notification+0x2d4>)
 8013140:	f003 f912 	bl	8016368 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8013144:	4896      	ldr	r0, [pc, #600]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 8013146:	f7ff f96b 	bl	8012420 <DbgTraceGetFileName>
 801314a:	4601      	mov	r1, r0
 801314c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8013150:	4a94      	ldr	r2, [pc, #592]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 8013152:	4895      	ldr	r0, [pc, #596]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 8013154:	f003 f898 	bl	8016288 <iprintf>
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801315e:	b29b      	uxth	r3, r3
 8013160:	4619      	mov	r1, r3
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	78db      	ldrb	r3, [r3, #3]
 8013166:	461a      	mov	r2, r3
 8013168:	4891      	ldr	r0, [pc, #580]	@ (80133b0 <SVCCTL_App_Notification+0x2d8>)
 801316a:	f003 f88d 	bl	8016288 <iprintf>
        tsBle.Connected = false;
 801316e:	4b91      	ldr	r3, [pc, #580]	@ (80133b4 <SVCCTL_App_Notification+0x2dc>)
 8013170:	2200      	movs	r2, #0
 8013172:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 8013174:	f7ff fef0 	bl	8012f58 <APP_BLE_Init>
      Adv_Request(APP_BLE_FAST_ADV);
 8013178:	2001      	movs	r0, #1
 801317a:	f000 fd59 	bl	8013c30 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801317e:	4b8e      	ldr	r3, [pc, #568]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 8013180:	2201      	movs	r2, #1
 8013182:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8013184:	4b85      	ldr	r3, [pc, #532]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013186:	8ada      	ldrh	r2, [r3, #22]
 8013188:	4b8b      	ldr	r3, [pc, #556]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 801318a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801318c:	488a      	ldr	r0, [pc, #552]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 801318e:	f001 f813 	bl	80141b8 <Custom_APP_Notification>
      tsCmd.LED = false;
 8013192:	4b8a      	ldr	r3, [pc, #552]	@ (80133bc <SVCCTL_App_Notification+0x2e4>)
 8013194:	2200      	movs	r2, #0
 8013196:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8013198:	e273      	b.n	8013682 <SVCCTL_App_Notification+0x5aa>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801319a:	6a3b      	ldr	r3, [r7, #32]
 801319c:	3302      	adds	r3, #2
 801319e:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d06c      	beq.n	8013282 <SVCCTL_App_Notification+0x1aa>
 80131a8:	2b03      	cmp	r3, #3
 80131aa:	f040 80f4 	bne.w	8013396 <SVCCTL_App_Notification+0x2be>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	3301      	adds	r3, #1
 80131b2:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80131b4:	487a      	ldr	r0, [pc, #488]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 80131b6:	f7ff f933 	bl	8012420 <DbgTraceGetFileName>
 80131ba:	4601      	mov	r1, r0
 80131bc:	f240 2303 	movw	r3, #515	@ 0x203
 80131c0:	4a78      	ldr	r2, [pc, #480]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 80131c2:	4879      	ldr	r0, [pc, #484]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 80131c4:	f003 f860 	bl	8016288 <iprintf>
 80131c8:	487d      	ldr	r0, [pc, #500]	@ (80133c0 <SVCCTL_App_Notification+0x2e8>)
 80131ca:	f003 f8cd 	bl	8016368 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80131ce:	4874      	ldr	r0, [pc, #464]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 80131d0:	f7ff f926 	bl	8012420 <DbgTraceGetFileName>
 80131d4:	4601      	mov	r1, r0
 80131d6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80131da:	4a72      	ldr	r2, [pc, #456]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 80131dc:	4872      	ldr	r0, [pc, #456]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 80131de:	f003 f853 	bl	8016288 <iprintf>
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ed f972 	bl	80004d4 <__aeabi_i2d>
 80131f0:	f04f 0200 	mov.w	r2, #0
 80131f4:	4b73      	ldr	r3, [pc, #460]	@ (80133c4 <SVCCTL_App_Notification+0x2ec>)
 80131f6:	f7ed f9d7 	bl	80005a8 <__aeabi_dmul>
 80131fa:	4602      	mov	r2, r0
 80131fc:	460b      	mov	r3, r1
 80131fe:	4610      	mov	r0, r2
 8013200:	4619      	mov	r1, r3
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8013208:	b29b      	uxth	r3, r3
 801320a:	461c      	mov	r4, r3
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8013212:	b29b      	uxth	r3, r3
 8013214:	461a      	mov	r2, r3
 8013216:	4613      	mov	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4413      	add	r3, r2
 801321c:	005b      	lsls	r3, r3, #1
 801321e:	9301      	str	r3, [sp, #4]
 8013220:	9400      	str	r4, [sp, #0]
 8013222:	4602      	mov	r2, r0
 8013224:	460b      	mov	r3, r1
 8013226:	4868      	ldr	r0, [pc, #416]	@ (80133c8 <SVCCTL_App_Notification+0x2f0>)
 8013228:	f003 f82e 	bl	8016288 <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 801322c:	4867      	ldr	r0, [pc, #412]	@ (80133cc <SVCCTL_App_Notification+0x2f4>)
 801322e:	f7ef fc01 	bl	8002a34 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013238:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801323a:	4618      	mov	r0, r3
 801323c:	f7ed f94a 	bl	80004d4 <__aeabi_i2d>
 8013240:	f04f 0200 	mov.w	r2, #0
 8013244:	4b5f      	ldr	r3, [pc, #380]	@ (80133c4 <SVCCTL_App_Notification+0x2ec>)
 8013246:	f7ed f9af 	bl	80005a8 <__aeabi_dmul>
 801324a:	4602      	mov	r2, r0
 801324c:	460b      	mov	r3, r1
 801324e:	4610      	mov	r0, r2
 8013250:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8013258:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801325a:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8013262:	b29b      	uxth	r3, r3
 8013264:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8013266:	4613      	mov	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4413      	add	r3, r2
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	9301      	str	r3, [sp, #4]
 8013270:	9400      	str	r4, [sp, #0]
 8013272:	4602      	mov	r2, r0
 8013274:	460b      	mov	r3, r1
 8013276:	4856      	ldr	r0, [pc, #344]	@ (80133d0 <SVCCTL_App_Notification+0x2f8>)
 8013278:	f7ef fbdc 	bl	8002a34 <DIAG>
          Connection_Interval_Update_Req();
 801327c:	f000 feba 	bl	8013ff4 <Connection_Interval_Update_Req>
          break;
 8013280:	e08a      	b.n	8013398 <SVCCTL_App_Notification+0x2c0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	3301      	adds	r3, #1
 8013286:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8013288:	4845      	ldr	r0, [pc, #276]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 801328a:	f7ff f8c9 	bl	8012420 <DbgTraceGetFileName>
 801328e:	4601      	mov	r1, r0
 8013290:	f240 231f 	movw	r3, #543	@ 0x21f
 8013294:	4a43      	ldr	r2, [pc, #268]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 8013296:	4844      	ldr	r0, [pc, #272]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 8013298:	f002 fff6 	bl	8016288 <iprintf>
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	4619      	mov	r1, r3
 80132a6:	484b      	ldr	r0, [pc, #300]	@ (80133d4 <SVCCTL_App_Notification+0x2fc>)
 80132a8:	f002 ffee 	bl	8016288 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80132ac:	483c      	ldr	r0, [pc, #240]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 80132ae:	f7ff f8b7 	bl	8012420 <DbgTraceGetFileName>
 80132b2:	4601      	mov	r1, r0
 80132b4:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80132b8:	4a3a      	ldr	r2, [pc, #232]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 80132ba:	483b      	ldr	r0, [pc, #236]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 80132bc:	f002 ffe4 	bl	8016288 <iprintf>
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	7a9b      	ldrb	r3, [r3, #10]
 80132c4:	4618      	mov	r0, r3
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	7a5b      	ldrb	r3, [r3, #9]
 80132ca:	461c      	mov	r4, r3
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	7a1b      	ldrb	r3, [r3, #8]
 80132d0:	461d      	mov	r5, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	79db      	ldrb	r3, [r3, #7]
 80132d6:	461a      	mov	r2, r3
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	799b      	ldrb	r3, [r3, #6]
 80132dc:	4619      	mov	r1, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	795b      	ldrb	r3, [r3, #5]
 80132e2:	9302      	str	r3, [sp, #8]
 80132e4:	9101      	str	r1, [sp, #4]
 80132e6:	9200      	str	r2, [sp, #0]
 80132e8:	462b      	mov	r3, r5
 80132ea:	4622      	mov	r2, r4
 80132ec:	4601      	mov	r1, r0
 80132ee:	483a      	ldr	r0, [pc, #232]	@ (80133d8 <SVCCTL_App_Notification+0x300>)
 80132f0:	f002 ffca 	bl	8016288 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80132f4:	482a      	ldr	r0, [pc, #168]	@ (80133a0 <SVCCTL_App_Notification+0x2c8>)
 80132f6:	f7ff f893 	bl	8012420 <DbgTraceGetFileName>
 80132fa:	4601      	mov	r1, r0
 80132fc:	f240 2327 	movw	r3, #551	@ 0x227
 8013300:	4a28      	ldr	r2, [pc, #160]	@ (80133a4 <SVCCTL_App_Notification+0x2cc>)
 8013302:	4829      	ldr	r0, [pc, #164]	@ (80133a8 <SVCCTL_App_Notification+0x2d0>)
 8013304:	f002 ffc0 	bl	8016288 <iprintf>
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801330e:	b29b      	uxth	r3, r3
 8013310:	4618      	mov	r0, r3
 8013312:	f7ed f8df 	bl	80004d4 <__aeabi_i2d>
 8013316:	f04f 0200 	mov.w	r2, #0
 801331a:	4b2a      	ldr	r3, [pc, #168]	@ (80133c4 <SVCCTL_App_Notification+0x2ec>)
 801331c:	f7ed f944 	bl	80005a8 <__aeabi_dmul>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4610      	mov	r0, r2
 8013326:	4619      	mov	r1, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801332e:	b29b      	uxth	r3, r3
 8013330:	461c      	mov	r4, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8013338:	b29b      	uxth	r3, r3
 801333a:	461a      	mov	r2, r3
 801333c:	4613      	mov	r3, r2
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4413      	add	r3, r2
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	9301      	str	r3, [sp, #4]
 8013346:	9400      	str	r4, [sp, #0]
 8013348:	4602      	mov	r2, r0
 801334a:	460b      	mov	r3, r1
 801334c:	481e      	ldr	r0, [pc, #120]	@ (80133c8 <SVCCTL_App_Notification+0x2f0>)
 801334e:	f002 ff9b 	bl	8016288 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8013352:	4b12      	ldr	r3, [pc, #72]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013354:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013358:	2b04      	cmp	r3, #4
 801335a:	d104      	bne.n	8013366 <SVCCTL_App_Notification+0x28e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801335c:	4b0f      	ldr	r3, [pc, #60]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 801335e:	2206      	movs	r2, #6
 8013360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8013364:	e003      	b.n	801336e <SVCCTL_App_Notification+0x296>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8013366:	4b0d      	ldr	r3, [pc, #52]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013368:	2205      	movs	r2, #5
 801336a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013374:	b29a      	uxth	r2, r3
 8013376:	4b09      	ldr	r3, [pc, #36]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013378:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801337a:	4b0f      	ldr	r3, [pc, #60]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 801337c:	2200      	movs	r2, #0
 801337e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8013380:	4b06      	ldr	r3, [pc, #24]	@ (801339c <SVCCTL_App_Notification+0x2c4>)
 8013382:	8ada      	ldrh	r2, [r3, #22]
 8013384:	4b0c      	ldr	r3, [pc, #48]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 8013386:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8013388:	480b      	ldr	r0, [pc, #44]	@ (80133b8 <SVCCTL_App_Notification+0x2e0>)
 801338a:	f000 ff15 	bl	80141b8 <Custom_APP_Notification>
          tsBle.Connected = true;
 801338e:	4b09      	ldr	r3, [pc, #36]	@ (80133b4 <SVCCTL_App_Notification+0x2dc>)
 8013390:	2201      	movs	r2, #1
 8013392:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8013394:	e000      	b.n	8013398 <SVCCTL_App_Notification+0x2c0>
          break;
 8013396:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8013398:	e173      	b.n	8013682 <SVCCTL_App_Notification+0x5aa>
 801339a:	bf00      	nop
 801339c:	20001018 	.word	0x20001018
 80133a0:	080179f4 	.word	0x080179f4
 80133a4:	08019148 	.word	0x08019148
 80133a8:	08017a10 	.word	0x08017a10
 80133ac:	08017b3c 	.word	0x08017b3c
 80133b0:	08017b68 	.word	0x08017b68
 80133b4:	20001004 	.word	0x20001004
 80133b8:	2000109c 	.word	0x2000109c
 80133bc:	20000cc4 	.word	0x20000cc4
 80133c0:	08017ba4 	.word	0x08017ba4
 80133c4:	3ff40000 	.word	0x3ff40000
 80133c8:	08017bd8 	.word	0x08017bd8
 80133cc:	08017c44 	.word	0x08017c44
 80133d0:	08017c88 	.word	0x08017c88
 80133d4:	08017ce8 	.word	0x08017ce8
 80133d8:	08017d30 	.word	0x08017d30
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80133dc:	6a3b      	ldr	r3, [r7, #32]
 80133de:	3302      	adds	r3, #2
 80133e0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80133ec:	4293      	cmp	r3, r2
 80133ee:	f000 8130 	beq.w	8013652 <SVCCTL_App_Notification+0x57a>
 80133f2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80133f6:	4293      	cmp	r3, r2
 80133f8:	f300 8142 	bgt.w	8013680 <SVCCTL_App_Notification+0x5a8>
 80133fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013400:	d02e      	beq.n	8013460 <SVCCTL_App_Notification+0x388>
 8013402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013406:	f300 813b 	bgt.w	8013680 <SVCCTL_App_Notification+0x5a8>
 801340a:	2b04      	cmp	r3, #4
 801340c:	f000 8134 	beq.w	8013678 <SVCCTL_App_Notification+0x5a0>
 8013410:	2b04      	cmp	r3, #4
 8013412:	f2c0 8135 	blt.w	8013680 <SVCCTL_App_Notification+0x5a8>
 8013416:	f240 420a 	movw	r2, #1034	@ 0x40a
 801341a:	4293      	cmp	r3, r2
 801341c:	f300 8130 	bgt.w	8013680 <SVCCTL_App_Notification+0x5a8>
 8013420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013424:	f340 812c 	ble.w	8013680 <SVCCTL_App_Notification+0x5a8>
 8013428:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801342c:	2b09      	cmp	r3, #9
 801342e:	f200 8127 	bhi.w	8013680 <SVCCTL_App_Notification+0x5a8>
 8013432:	a201      	add	r2, pc, #4	@ (adr r2, 8013438 <SVCCTL_App_Notification+0x360>)
 8013434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013438:	080135cd 	.word	0x080135cd
 801343c:	080134a1 	.word	0x080134a1
 8013440:	08013681 	.word	0x08013681
 8013444:	08013681 	.word	0x08013681
 8013448:	08013681 	.word	0x08013681
 801344c:	08013681 	.word	0x08013681
 8013450:	08013469 	.word	0x08013469
 8013454:	08013681 	.word	0x08013681
 8013458:	08013513 	.word	0x08013513
 801345c:	08013485 	.word	0x08013485
          mutex = 1;
 8013460:	4b8a      	ldr	r3, [pc, #552]	@ (801368c <SVCCTL_App_Notification+0x5b4>)
 8013462:	2201      	movs	r2, #1
 8013464:	701a      	strb	r2, [r3, #0]
          break;
 8013466:	e108      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8013468:	4889      	ldr	r0, [pc, #548]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 801346a:	f7fe ffd9 	bl	8012420 <DbgTraceGetFileName>
 801346e:	4601      	mov	r1, r0
 8013470:	f240 237f 	movw	r3, #639	@ 0x27f
 8013474:	4a87      	ldr	r2, [pc, #540]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013476:	4888      	ldr	r0, [pc, #544]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013478:	f002 ff06 	bl	8016288 <iprintf>
 801347c:	4887      	ldr	r0, [pc, #540]	@ (801369c <SVCCTL_App_Notification+0x5c4>)
 801347e:	f002 ff03 	bl	8016288 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8013482:	e0fa      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8013484:	4882      	ldr	r0, [pc, #520]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013486:	f7fe ffcb 	bl	8012420 <DbgTraceGetFileName>
 801348a:	4601      	mov	r1, r0
 801348c:	f240 238f 	movw	r3, #655	@ 0x28f
 8013490:	4a80      	ldr	r2, [pc, #512]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013492:	4881      	ldr	r0, [pc, #516]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013494:	f002 fef8 	bl	8016288 <iprintf>
 8013498:	4881      	ldr	r0, [pc, #516]	@ (80136a0 <SVCCTL_App_Notification+0x5c8>)
 801349a:	f002 ff65 	bl	8016368 <puts>
          break;
 801349e:	e0ec      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 80134a0:	487b      	ldr	r0, [pc, #492]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80134a2:	f7fe ffbd 	bl	8012420 <DbgTraceGetFileName>
 80134a6:	4601      	mov	r1, r0
 80134a8:	f240 2396 	movw	r3, #662	@ 0x296
 80134ac:	4a79      	ldr	r2, [pc, #484]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 80134ae:	487a      	ldr	r0, [pc, #488]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 80134b0:	f002 feea 	bl	8016288 <iprintf>
 80134b4:	487b      	ldr	r0, [pc, #492]	@ (80136a4 <SVCCTL_App_Notification+0x5cc>)
 80134b6:	f002 ff57 	bl	8016368 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80134ba:	4b7b      	ldr	r3, [pc, #492]	@ (80136a8 <SVCCTL_App_Notification+0x5d0>)
 80134bc:	8adb      	ldrh	r3, [r3, #22]
 80134be:	497b      	ldr	r1, [pc, #492]	@ (80136ac <SVCCTL_App_Notification+0x5d4>)
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fd f87b 	bl	80105bc <aci_gap_pass_key_resp>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80134cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d010      	beq.n	80134f6 <SVCCTL_App_Notification+0x41e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80134d4:	486e      	ldr	r0, [pc, #440]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80134d6:	f7fe ffa3 	bl	8012420 <DbgTraceGetFileName>
 80134da:	4601      	mov	r1, r0
 80134dc:	f240 239b 	movw	r3, #667	@ 0x29b
 80134e0:	4a6c      	ldr	r2, [pc, #432]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 80134e2:	486d      	ldr	r0, [pc, #436]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 80134e4:	f002 fed0 	bl	8016288 <iprintf>
 80134e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134ec:	4619      	mov	r1, r3
 80134ee:	4870      	ldr	r0, [pc, #448]	@ (80136b0 <SVCCTL_App_Notification+0x5d8>)
 80134f0:	f002 feca 	bl	8016288 <iprintf>
          break;
 80134f4:	e0c1      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80134f6:	4866      	ldr	r0, [pc, #408]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80134f8:	f7fe ff92 	bl	8012420 <DbgTraceGetFileName>
 80134fc:	4601      	mov	r1, r0
 80134fe:	f240 239f 	movw	r3, #671	@ 0x29f
 8013502:	4a64      	ldr	r2, [pc, #400]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013504:	4864      	ldr	r0, [pc, #400]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013506:	f002 febf 	bl	8016288 <iprintf>
 801350a:	486a      	ldr	r0, [pc, #424]	@ (80136b4 <SVCCTL_App_Notification+0x5dc>)
 801350c:	f002 ff2c 	bl	8016368 <puts>
          break;
 8013510:	e0b3      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8013512:	485f      	ldr	r0, [pc, #380]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013514:	f7fe ff84 	bl	8012420 <DbgTraceGetFileName>
 8013518:	4601      	mov	r1, r0
 801351a:	f240 23a7 	movw	r3, #679	@ 0x2a7
 801351e:	4a5d      	ldr	r2, [pc, #372]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013520:	485d      	ldr	r0, [pc, #372]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013522:	f002 feb1 	bl	8016288 <iprintf>
 8013526:	4864      	ldr	r0, [pc, #400]	@ (80136b8 <SVCCTL_App_Notification+0x5e0>)
 8013528:	f002 ff1e 	bl	8016368 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 801352c:	4858      	ldr	r0, [pc, #352]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 801352e:	f7fe ff77 	bl	8012420 <DbgTraceGetFileName>
 8013532:	4601      	mov	r1, r0
 8013534:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8013538:	4a56      	ldr	r2, [pc, #344]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 801353a:	4857      	ldr	r0, [pc, #348]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 801353c:	f002 fea4 	bl	8016288 <iprintf>
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	3302      	adds	r3, #2
 8013544:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8013548:	4619      	mov	r1, r3
 801354a:	485c      	ldr	r0, [pc, #368]	@ (80136bc <SVCCTL_App_Notification+0x5e4>)
 801354c:	f002 fe9c 	bl	8016288 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8013550:	484f      	ldr	r0, [pc, #316]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013552:	f7fe ff65 	bl	8012420 <DbgTraceGetFileName>
 8013556:	4601      	mov	r1, r0
 8013558:	f240 23aa 	movw	r3, #682	@ 0x2aa
 801355c:	4a4d      	ldr	r2, [pc, #308]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 801355e:	484e      	ldr	r0, [pc, #312]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013560:	f002 fe92 	bl	8016288 <iprintf>
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	3302      	adds	r3, #2
 8013568:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801356c:	4619      	mov	r1, r3
 801356e:	4854      	ldr	r0, [pc, #336]	@ (80136c0 <SVCCTL_App_Notification+0x5e8>)
 8013570:	f002 fe8a 	bl	8016288 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8013574:	4b4c      	ldr	r3, [pc, #304]	@ (80136a8 <SVCCTL_App_Notification+0x5d0>)
 8013576:	8adb      	ldrh	r3, [r3, #22]
 8013578:	2101      	movs	r1, #1
 801357a:	4618      	mov	r0, r3
 801357c:	f7fd f9c8 	bl	8010910 <aci_gap_numeric_comparison_value_confirm_yesno>
 8013580:	4603      	mov	r3, r0
 8013582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8013586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801358a:	2b00      	cmp	r3, #0
 801358c:	d010      	beq.n	80135b0 <SVCCTL_App_Notification+0x4d8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 801358e:	4840      	ldr	r0, [pc, #256]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013590:	f7fe ff46 	bl	8012420 <DbgTraceGetFileName>
 8013594:	4601      	mov	r1, r0
 8013596:	f240 23af 	movw	r3, #687	@ 0x2af
 801359a:	4a3e      	ldr	r2, [pc, #248]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 801359c:	483e      	ldr	r0, [pc, #248]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 801359e:	f002 fe73 	bl	8016288 <iprintf>
 80135a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135a6:	4619      	mov	r1, r3
 80135a8:	4846      	ldr	r0, [pc, #280]	@ (80136c4 <SVCCTL_App_Notification+0x5ec>)
 80135aa:	f002 fe6d 	bl	8016288 <iprintf>
          break;
 80135ae:	e064      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80135b0:	4837      	ldr	r0, [pc, #220]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80135b2:	f7fe ff35 	bl	8012420 <DbgTraceGetFileName>
 80135b6:	4601      	mov	r1, r0
 80135b8:	f240 23b3 	movw	r3, #691	@ 0x2b3
 80135bc:	4a35      	ldr	r2, [pc, #212]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 80135be:	4836      	ldr	r0, [pc, #216]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 80135c0:	f002 fe62 	bl	8016288 <iprintf>
 80135c4:	4840      	ldr	r0, [pc, #256]	@ (80136c8 <SVCCTL_App_Notification+0x5f0>)
 80135c6:	f002 fecf 	bl	8016368 <puts>
          break;
 80135ca:	e056      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	3302      	adds	r3, #2
 80135d0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80135d2:	482f      	ldr	r0, [pc, #188]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80135d4:	f7fe ff24 	bl	8012420 <DbgTraceGetFileName>
 80135d8:	4601      	mov	r1, r0
 80135da:	f240 23bd 	movw	r3, #701	@ 0x2bd
 80135de:	4a2d      	ldr	r2, [pc, #180]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 80135e0:	482d      	ldr	r0, [pc, #180]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 80135e2:	f002 fe51 	bl	8016288 <iprintf>
 80135e6:	4839      	ldr	r0, [pc, #228]	@ (80136cc <SVCCTL_App_Notification+0x5f4>)
 80135e8:	f002 febe 	bl	8016368 <puts>
          if (p_pairing_complete->Status != 0)
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	789b      	ldrb	r3, [r3, #2]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d013      	beq.n	801361c <SVCCTL_App_Notification+0x544>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80135f4:	4826      	ldr	r0, [pc, #152]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 80135f6:	f7fe ff13 	bl	8012420 <DbgTraceGetFileName>
 80135fa:	4601      	mov	r1, r0
 80135fc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8013600:	4a24      	ldr	r2, [pc, #144]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013602:	4825      	ldr	r0, [pc, #148]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013604:	f002 fe40 	bl	8016288 <iprintf>
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	789b      	ldrb	r3, [r3, #2]
 801360c:	4619      	mov	r1, r3
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	78db      	ldrb	r3, [r3, #3]
 8013612:	461a      	mov	r2, r3
 8013614:	482e      	ldr	r0, [pc, #184]	@ (80136d0 <SVCCTL_App_Notification+0x5f8>)
 8013616:	f002 fe37 	bl	8016288 <iprintf>
 801361a:	e00c      	b.n	8013636 <SVCCTL_App_Notification+0x55e>
            APP_DBG_MSG("     - Pairing Success\n");
 801361c:	481c      	ldr	r0, [pc, #112]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 801361e:	f7fe feff 	bl	8012420 <DbgTraceGetFileName>
 8013622:	4601      	mov	r1, r0
 8013624:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
 8013628:	4a1a      	ldr	r2, [pc, #104]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 801362a:	481b      	ldr	r0, [pc, #108]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 801362c:	f002 fe2c 	bl	8016288 <iprintf>
 8013630:	4828      	ldr	r0, [pc, #160]	@ (80136d4 <SVCCTL_App_Notification+0x5fc>)
 8013632:	f002 fe99 	bl	8016368 <puts>
          APP_DBG_MSG("\n");
 8013636:	4816      	ldr	r0, [pc, #88]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013638:	f7fe fef2 	bl	8012420 <DbgTraceGetFileName>
 801363c:	4601      	mov	r1, r0
 801363e:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8013642:	4a14      	ldr	r2, [pc, #80]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013644:	4814      	ldr	r0, [pc, #80]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013646:	f002 fe1f 	bl	8016288 <iprintf>
 801364a:	200a      	movs	r0, #10
 801364c:	f002 fe2e 	bl	80162ac <putchar>
          break;
 8013650:	e013      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8013652:	480f      	ldr	r0, [pc, #60]	@ (8013690 <SVCCTL_App_Notification+0x5b8>)
 8013654:	f7fe fee4 	bl	8012420 <DbgTraceGetFileName>
 8013658:	4601      	mov	r1, r0
 801365a:	f240 23cf 	movw	r3, #719	@ 0x2cf
 801365e:	4a0d      	ldr	r2, [pc, #52]	@ (8013694 <SVCCTL_App_Notification+0x5bc>)
 8013660:	480d      	ldr	r0, [pc, #52]	@ (8013698 <SVCCTL_App_Notification+0x5c0>)
 8013662:	f002 fe11 	bl	8016288 <iprintf>
 8013666:	481c      	ldr	r0, [pc, #112]	@ (80136d8 <SVCCTL_App_Notification+0x600>)
 8013668:	f002 fe0e 	bl	8016288 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801366c:	4b0e      	ldr	r3, [pc, #56]	@ (80136a8 <SVCCTL_App_Notification+0x5d0>)
 801366e:	8adb      	ldrh	r3, [r3, #22]
 8013670:	4618      	mov	r0, r3
 8013672:	f7fd fc60 	bl	8010f36 <aci_gatt_confirm_indication>
        break;
 8013676:	e000      	b.n	801367a <SVCCTL_App_Notification+0x5a2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8013678:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801367a:	e001      	b.n	8013680 <SVCCTL_App_Notification+0x5a8>
      break;
 801367c:	bf00      	nop
 801367e:	e000      	b.n	8013682 <SVCCTL_App_Notification+0x5aa>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013680:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8013682:	2301      	movs	r3, #1
}
 8013684:	4618      	mov	r0, r3
 8013686:	3728      	adds	r7, #40	@ 0x28
 8013688:	46bd      	mov	sp, r7
 801368a:	bdb0      	pop	{r4, r5, r7, pc}
 801368c:	200010a1 	.word	0x200010a1
 8013690:	080179f4 	.word	0x080179f4
 8013694:	08019148 	.word	0x08019148
 8013698:	08017a10 	.word	0x08017a10
 801369c:	08017d80 	.word	0x08017d80
 80136a0:	08017da8 	.word	0x08017da8
 80136a4:	08017dd8 	.word	0x08017dd8
 80136a8:	20001018 	.word	0x20001018
 80136ac:	0001b207 	.word	0x0001b207
 80136b0:	08017e00 	.word	0x08017e00
 80136b4:	08017e34 	.word	0x08017e34
 80136b8:	08017e5c 	.word	0x08017e5c
 80136bc:	08017e90 	.word	0x08017e90
 80136c0:	08017eac 	.word	0x08017eac
 80136c4:	08017ec4 	.word	0x08017ec4
 80136c8:	08017f14 	.word	0x08017f14
 80136cc:	08017f5c 	.word	0x08017f5c
 80136d0:	08017f88 	.word	0x08017f88
 80136d4:	08017fc4 	.word	0x08017fc4
 80136d8:	08017fdc 	.word	0x08017fdc

080136dc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80136e2:	4b06      	ldr	r3, [pc, #24]	@ (80136fc <Ble_Tl_Init+0x20>)
 80136e4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80136e6:	4b06      	ldr	r3, [pc, #24]	@ (8013700 <Ble_Tl_Init+0x24>)
 80136e8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80136ea:	463b      	mov	r3, r7
 80136ec:	4619      	mov	r1, r3
 80136ee:	4805      	ldr	r0, [pc, #20]	@ (8013704 <Ble_Tl_Init+0x28>)
 80136f0:	f7fe f97a 	bl	80119e8 <hci_init>

  return;
 80136f4:	bf00      	nop
}
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	200300d8 	.word	0x200300d8
 8013700:	0801409d 	.word	0x0801409d
 8013704:	08014065 	.word	0x08014065

08013708 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8013708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801370a:	b08d      	sub	sp, #52	@ 0x34
 801370c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801370e:	2300      	movs	r3, #0
 8013710:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013712:	2392      	movs	r3, #146	@ 0x92
 8013714:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8013716:	48a3      	ldr	r0, [pc, #652]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013718:	f7fe fe82 	bl	8012420 <DbgTraceGetFileName>
 801371c:	4601      	mov	r1, r0
 801371e:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8013722:	4aa1      	ldr	r2, [pc, #644]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013724:	48a1      	ldr	r0, [pc, #644]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013726:	f002 fdaf 	bl	8016288 <iprintf>
 801372a:	48a1      	ldr	r0, [pc, #644]	@ (80139b0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 801372c:	f002 fe1c 	bl	8016368 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8013730:	f7fd fdeb 	bl	801130a <hci_reset>
 8013734:	4603      	mov	r3, r0
 8013736:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013738:	7dfb      	ldrb	r3, [r7, #23]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00f      	beq.n	801375e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 801373e:	4899      	ldr	r0, [pc, #612]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013740:	f7fe fe6e 	bl	8012420 <DbgTraceGetFileName>
 8013744:	4601      	mov	r1, r0
 8013746:	f240 3315 	movw	r3, #789	@ 0x315
 801374a:	4a97      	ldr	r2, [pc, #604]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801374c:	4897      	ldr	r0, [pc, #604]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801374e:	f002 fd9b 	bl	8016288 <iprintf>
 8013752:	7dfb      	ldrb	r3, [r7, #23]
 8013754:	4619      	mov	r1, r3
 8013756:	4897      	ldr	r0, [pc, #604]	@ (80139b4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8013758:	f002 fd96 	bl	8016288 <iprintf>
 801375c:	e00c      	b.n	8013778 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801375e:	4891      	ldr	r0, [pc, #580]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013760:	f7fe fe5e 	bl	8012420 <DbgTraceGetFileName>
 8013764:	4601      	mov	r1, r0
 8013766:	f240 3319 	movw	r3, #793	@ 0x319
 801376a:	4a8f      	ldr	r2, [pc, #572]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801376c:	488f      	ldr	r0, [pc, #572]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801376e:	f002 fd8b 	bl	8016288 <iprintf>
 8013772:	4891      	ldr	r0, [pc, #580]	@ (80139b8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8013774:	f002 fdf8 	bl	8016368 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8013778:	f000 fad8 	bl	8013d2c <BleGetBdAddress>
 801377c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801377e:	693a      	ldr	r2, [r7, #16]
 8013780:	2106      	movs	r1, #6
 8013782:	2000      	movs	r0, #0
 8013784:	f7fd fc81 	bl	801108a <aci_hal_write_config_data>
 8013788:	4603      	mov	r3, r0
 801378a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801378c:	7dfb      	ldrb	r3, [r7, #23]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00f      	beq.n	80137b2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8013792:	4884      	ldr	r0, [pc, #528]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013794:	f7fe fe44 	bl	8012420 <DbgTraceGetFileName>
 8013798:	4601      	mov	r1, r0
 801379a:	f240 3323 	movw	r3, #803	@ 0x323
 801379e:	4a82      	ldr	r2, [pc, #520]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80137a0:	4882      	ldr	r0, [pc, #520]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80137a2:	f002 fd71 	bl	8016288 <iprintf>
 80137a6:	7dfb      	ldrb	r3, [r7, #23]
 80137a8:	4619      	mov	r1, r3
 80137aa:	4884      	ldr	r0, [pc, #528]	@ (80139bc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80137ac:	f002 fd6c 	bl	8016288 <iprintf>
 80137b0:	e035      	b.n	801381e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80137b2:	487c      	ldr	r0, [pc, #496]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80137b4:	f7fe fe34 	bl	8012420 <DbgTraceGetFileName>
 80137b8:	4601      	mov	r1, r0
 80137ba:	f240 3327 	movw	r3, #807	@ 0x327
 80137be:	4a7a      	ldr	r2, [pc, #488]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80137c0:	487a      	ldr	r0, [pc, #488]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80137c2:	f002 fd61 	bl	8016288 <iprintf>
 80137c6:	487e      	ldr	r0, [pc, #504]	@ (80139c0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80137c8:	f002 fdce 	bl	8016368 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80137cc:	4875      	ldr	r0, [pc, #468]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80137ce:	f7fe fe27 	bl	8012420 <DbgTraceGetFileName>
 80137d2:	4601      	mov	r1, r0
 80137d4:	f44f 734a 	mov.w	r3, #808	@ 0x328
 80137d8:	4a73      	ldr	r2, [pc, #460]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80137da:	4874      	ldr	r0, [pc, #464]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80137dc:	f002 fd54 	bl	8016288 <iprintf>
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	3305      	adds	r3, #5
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	4618      	mov	r0, r3
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	3304      	adds	r3, #4
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	461c      	mov	r4, r3
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	3303      	adds	r3, #3
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	461d      	mov	r5, r3
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	3302      	adds	r3, #2
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	461a      	mov	r2, r3
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	3301      	adds	r3, #1
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	4619      	mov	r1, r3
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	9302      	str	r3, [sp, #8]
 801380e:	9101      	str	r1, [sp, #4]
 8013810:	9200      	str	r2, [sp, #0]
 8013812:	462b      	mov	r3, r5
 8013814:	4622      	mov	r2, r4
 8013816:	4601      	mov	r1, r0
 8013818:	486a      	ldr	r0, [pc, #424]	@ (80139c4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801381a:	f002 fd35 	bl	8016288 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801381e:	4a6a      	ldr	r2, [pc, #424]	@ (80139c8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8013820:	2110      	movs	r1, #16
 8013822:	2018      	movs	r0, #24
 8013824:	f7fd fc31 	bl	801108a <aci_hal_write_config_data>
 8013828:	4603      	mov	r3, r0
 801382a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d00f      	beq.n	8013852 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8013832:	485c      	ldr	r0, [pc, #368]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013834:	f7fe fdf4 	bl	8012420 <DbgTraceGetFileName>
 8013838:	4601      	mov	r1, r0
 801383a:	f240 3372 	movw	r3, #882	@ 0x372
 801383e:	4a5a      	ldr	r2, [pc, #360]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013840:	485a      	ldr	r0, [pc, #360]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013842:	f002 fd21 	bl	8016288 <iprintf>
 8013846:	7dfb      	ldrb	r3, [r7, #23]
 8013848:	4619      	mov	r1, r3
 801384a:	4860      	ldr	r0, [pc, #384]	@ (80139cc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 801384c:	f002 fd1c 	bl	8016288 <iprintf>
 8013850:	e00c      	b.n	801386c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8013852:	4854      	ldr	r0, [pc, #336]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013854:	f7fe fde4 	bl	8012420 <DbgTraceGetFileName>
 8013858:	4601      	mov	r1, r0
 801385a:	f240 3376 	movw	r3, #886	@ 0x376
 801385e:	4a52      	ldr	r2, [pc, #328]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013860:	4852      	ldr	r0, [pc, #328]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013862:	f002 fd11 	bl	8016288 <iprintf>
 8013866:	485a      	ldr	r0, [pc, #360]	@ (80139d0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8013868:	f002 fd7e 	bl	8016368 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801386c:	4a59      	ldr	r2, [pc, #356]	@ (80139d4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 801386e:	2110      	movs	r1, #16
 8013870:	2008      	movs	r0, #8
 8013872:	f7fd fc0a 	bl	801108a <aci_hal_write_config_data>
 8013876:	4603      	mov	r3, r0
 8013878:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801387a:	7dfb      	ldrb	r3, [r7, #23]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00f      	beq.n	80138a0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8013880:	4848      	ldr	r0, [pc, #288]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013882:	f7fe fdcd 	bl	8012420 <DbgTraceGetFileName>
 8013886:	4601      	mov	r1, r0
 8013888:	f240 337f 	movw	r3, #895	@ 0x37f
 801388c:	4a46      	ldr	r2, [pc, #280]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801388e:	4847      	ldr	r0, [pc, #284]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013890:	f002 fcfa 	bl	8016288 <iprintf>
 8013894:	7dfb      	ldrb	r3, [r7, #23]
 8013896:	4619      	mov	r1, r3
 8013898:	484f      	ldr	r0, [pc, #316]	@ (80139d8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 801389a:	f002 fcf5 	bl	8016288 <iprintf>
 801389e:	e00c      	b.n	80138ba <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80138a0:	4840      	ldr	r0, [pc, #256]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138a2:	f7fe fdbd 	bl	8012420 <DbgTraceGetFileName>
 80138a6:	4601      	mov	r1, r0
 80138a8:	f240 3383 	movw	r3, #899	@ 0x383
 80138ac:	4a3e      	ldr	r2, [pc, #248]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80138ae:	483f      	ldr	r0, [pc, #252]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80138b0:	f002 fcea 	bl	8016288 <iprintf>
 80138b4:	4849      	ldr	r0, [pc, #292]	@ (80139dc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80138b6:	f002 fd57 	bl	8016368 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80138ba:	2119      	movs	r1, #25
 80138bc:	2001      	movs	r0, #1
 80138be:	f7fd fc69 	bl	8011194 <aci_hal_set_tx_power_level>
 80138c2:	4603      	mov	r3, r0
 80138c4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80138c6:	7dfb      	ldrb	r3, [r7, #23]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d00f      	beq.n	80138ec <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80138cc:	4835      	ldr	r0, [pc, #212]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138ce:	f7fe fda7 	bl	8012420 <DbgTraceGetFileName>
 80138d2:	4601      	mov	r1, r0
 80138d4:	f44f 7363 	mov.w	r3, #908	@ 0x38c
 80138d8:	4a33      	ldr	r2, [pc, #204]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80138da:	4834      	ldr	r0, [pc, #208]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80138dc:	f002 fcd4 	bl	8016288 <iprintf>
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
 80138e2:	4619      	mov	r1, r3
 80138e4:	483e      	ldr	r0, [pc, #248]	@ (80139e0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80138e6:	f002 fccf 	bl	8016288 <iprintf>
 80138ea:	e00c      	b.n	8013906 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80138ec:	482d      	ldr	r0, [pc, #180]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138ee:	f7fe fd97 	bl	8012420 <DbgTraceGetFileName>
 80138f2:	4601      	mov	r1, r0
 80138f4:	f44f 7364 	mov.w	r3, #912	@ 0x390
 80138f8:	4a2b      	ldr	r2, [pc, #172]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80138fa:	482c      	ldr	r0, [pc, #176]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80138fc:	f002 fcc4 	bl	8016288 <iprintf>
 8013900:	4838      	ldr	r0, [pc, #224]	@ (80139e4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013902:	f002 fd31 	bl	8016368 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013906:	f7fd f86a 	bl	80109de <aci_gatt_init>
 801390a:	4603      	mov	r3, r0
 801390c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801390e:	7dfb      	ldrb	r3, [r7, #23]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00f      	beq.n	8013934 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013914:	4823      	ldr	r0, [pc, #140]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013916:	f7fe fd83 	bl	8012420 <DbgTraceGetFileName>
 801391a:	4601      	mov	r1, r0
 801391c:	f240 3399 	movw	r3, #921	@ 0x399
 8013920:	4a21      	ldr	r2, [pc, #132]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013922:	4822      	ldr	r0, [pc, #136]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013924:	f002 fcb0 	bl	8016288 <iprintf>
 8013928:	7dfb      	ldrb	r3, [r7, #23]
 801392a:	4619      	mov	r1, r3
 801392c:	482e      	ldr	r0, [pc, #184]	@ (80139e8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801392e:	f002 fcab 	bl	8016288 <iprintf>
 8013932:	e00c      	b.n	801394e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013934:	481b      	ldr	r0, [pc, #108]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013936:	f7fe fd73 	bl	8012420 <DbgTraceGetFileName>
 801393a:	4601      	mov	r1, r0
 801393c:	f240 339d 	movw	r3, #925	@ 0x39d
 8013940:	4a19      	ldr	r2, [pc, #100]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013942:	481a      	ldr	r0, [pc, #104]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013944:	f002 fca0 	bl	8016288 <iprintf>
 8013948:	4828      	ldr	r0, [pc, #160]	@ (80139ec <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801394a:	f002 fd0d 	bl	8016368 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801394e:	2300      	movs	r3, #0
 8013950:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013952:	7bfb      	ldrb	r3, [r7, #15]
 8013954:	f043 0301 	orr.w	r3, r3, #1
 8013958:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801395a:	7bfb      	ldrb	r3, [r7, #15]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d069      	beq.n	8013a34 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013960:	4b23      	ldr	r3, [pc, #140]	@ (80139f0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013962:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013964:	1dba      	adds	r2, r7, #6
 8013966:	7bf8      	ldrb	r0, [r7, #15]
 8013968:	1cbb      	adds	r3, r7, #2
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	1d3b      	adds	r3, r7, #4
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	4613      	mov	r3, r2
 8013972:	2209      	movs	r2, #9
 8013974:	2100      	movs	r1, #0
 8013976:	f7fc fe88 	bl	801068a <aci_gap_init>
 801397a:	4603      	mov	r3, r0
 801397c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801397e:	7dfb      	ldrb	r3, [r7, #23]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d039      	beq.n	80139f8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8013984:	4807      	ldr	r0, [pc, #28]	@ (80139a4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013986:	f7fe fd4b 	bl	8012420 <DbgTraceGetFileName>
 801398a:	4601      	mov	r1, r0
 801398c:	f240 33bd 	movw	r3, #957	@ 0x3bd
 8013990:	4a05      	ldr	r2, [pc, #20]	@ (80139a8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013992:	4806      	ldr	r0, [pc, #24]	@ (80139ac <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013994:	f002 fc78 	bl	8016288 <iprintf>
 8013998:	7dfb      	ldrb	r3, [r7, #23]
 801399a:	4619      	mov	r1, r3
 801399c:	4815      	ldr	r0, [pc, #84]	@ (80139f4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 801399e:	f002 fc73 	bl	8016288 <iprintf>
 80139a2:	e036      	b.n	8013a12 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80139a4:	080179f4 	.word	0x080179f4
 80139a8:	08019160 	.word	0x08019160
 80139ac:	08017a10 	.word	0x08017a10
 80139b0:	08018004 	.word	0x08018004
 80139b4:	08018030 	.word	0x08018030
 80139b8:	08018060 	.word	0x08018060
 80139bc:	08018080 	.word	0x08018080
 80139c0:	080180dc 	.word	0x080180dc
 80139c4:	08018128 	.word	0x08018128
 80139c8:	08019118 	.word	0x08019118
 80139cc:	08018164 	.word	0x08018164
 80139d0:	080181bc 	.word	0x080181bc
 80139d4:	08019128 	.word	0x08019128
 80139d8:	08018204 	.word	0x08018204
 80139dc:	0801825c 	.word	0x0801825c
 80139e0:	080182a4 	.word	0x080182a4
 80139e4:	080182e4 	.word	0x080182e4
 80139e8:	08018314 	.word	0x08018314
 80139ec:	08018348 	.word	0x08018348
 80139f0:	0801836c 	.word	0x0801836c
 80139f4:	08018378 	.word	0x08018378
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80139f8:	487e      	ldr	r0, [pc, #504]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80139fa:	f7fe fd11 	bl	8012420 <DbgTraceGetFileName>
 80139fe:	4601      	mov	r1, r0
 8013a00:	f240 33c1 	movw	r3, #961	@ 0x3c1
 8013a04:	4a7c      	ldr	r2, [pc, #496]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013a06:	487d      	ldr	r0, [pc, #500]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013a08:	f002 fc3e 	bl	8016288 <iprintf>
 8013a0c:	487c      	ldr	r0, [pc, #496]	@ (8013c00 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8013a0e:	f002 fcab 	bl	8016368 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013a12:	88fc      	ldrh	r4, [r7, #6]
 8013a14:	88bd      	ldrh	r5, [r7, #4]
 8013a16:	68b8      	ldr	r0, [r7, #8]
 8013a18:	f7ec fbb2 	bl	8000180 <strlen>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	4613      	mov	r3, r2
 8013a26:	2200      	movs	r2, #0
 8013a28:	4629      	mov	r1, r5
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f7fd f9da 	bl	8010de4 <aci_gatt_update_char_value>
 8013a30:	4603      	mov	r3, r0
 8013a32:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013a34:	88f8      	ldrh	r0, [r7, #6]
 8013a36:	8879      	ldrh	r1, [r7, #2]
 8013a38:	463b      	mov	r3, r7
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	2200      	movs	r2, #0
 8013a40:	f7fd f9d0 	bl	8010de4 <aci_gatt_update_char_value>
 8013a44:	4603      	mov	r3, r0
 8013a46:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013a48:	2202      	movs	r2, #2
 8013a4a:	2102      	movs	r1, #2
 8013a4c:	2000      	movs	r0, #0
 8013a4e:	f7fd fc80 	bl	8011352 <hci_le_set_default_phy>
 8013a52:	4603      	mov	r3, r0
 8013a54:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a56:	7dfb      	ldrb	r3, [r7, #23]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00f      	beq.n	8013a7c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8013a5c:	4865      	ldr	r0, [pc, #404]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013a5e:	f7fe fcdf 	bl	8012420 <DbgTraceGetFileName>
 8013a62:	4601      	mov	r1, r0
 8013a64:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8013a68:	4a63      	ldr	r2, [pc, #396]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013a6a:	4864      	ldr	r0, [pc, #400]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013a6c:	f002 fc0c 	bl	8016288 <iprintf>
 8013a70:	7dfb      	ldrb	r3, [r7, #23]
 8013a72:	4619      	mov	r1, r3
 8013a74:	4863      	ldr	r0, [pc, #396]	@ (8013c04 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8013a76:	f002 fc07 	bl	8016288 <iprintf>
 8013a7a:	e00c      	b.n	8013a96 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8013a7c:	485d      	ldr	r0, [pc, #372]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013a7e:	f7fe fccf 	bl	8012420 <DbgTraceGetFileName>
 8013a82:	4601      	mov	r1, r0
 8013a84:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8013a88:	4a5b      	ldr	r2, [pc, #364]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013a8a:	485c      	ldr	r0, [pc, #368]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013a8c:	f002 fbfc 	bl	8016288 <iprintf>
 8013a90:	485d      	ldr	r0, [pc, #372]	@ (8013c08 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8013a92:	f002 fc69 	bl	8016368 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8013a96:	4b5d      	ldr	r3, [pc, #372]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013a98:	2201      	movs	r2, #1
 8013a9a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8013a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7fc fc73 	bl	801038c <aci_gap_set_io_capability>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013aaa:	7dfb      	ldrb	r3, [r7, #23]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00f      	beq.n	8013ad0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8013ab0:	4850      	ldr	r0, [pc, #320]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013ab2:	f7fe fcb5 	bl	8012420 <DbgTraceGetFileName>
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	f240 33f1 	movw	r3, #1009	@ 0x3f1
 8013abc:	4a4e      	ldr	r2, [pc, #312]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013abe:	484f      	ldr	r0, [pc, #316]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013ac0:	f002 fbe2 	bl	8016288 <iprintf>
 8013ac4:	7dfb      	ldrb	r3, [r7, #23]
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	4851      	ldr	r0, [pc, #324]	@ (8013c10 <Ble_Hci_Gap_Gatt_Init+0x508>)
 8013aca:	f002 fbdd 	bl	8016288 <iprintf>
 8013ace:	e00c      	b.n	8013aea <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8013ad0:	4848      	ldr	r0, [pc, #288]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013ad2:	f7fe fca5 	bl	8012420 <DbgTraceGetFileName>
 8013ad6:	4601      	mov	r1, r0
 8013ad8:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 8013adc:	4a46      	ldr	r2, [pc, #280]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013ade:	4847      	ldr	r0, [pc, #284]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013ae0:	f002 fbd2 	bl	8016288 <iprintf>
 8013ae4:	484b      	ldr	r0, [pc, #300]	@ (8013c14 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8013ae6:	f002 fc3f 	bl	8016368 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8013aea:	4b48      	ldr	r3, [pc, #288]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013aec:	2201      	movs	r2, #1
 8013aee:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013af0:	4b46      	ldr	r3, [pc, #280]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013af2:	2208      	movs	r2, #8
 8013af4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8013af6:	4b45      	ldr	r3, [pc, #276]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013af8:	2210      	movs	r2, #16
 8013afa:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8013afc:	4b43      	ldr	r3, [pc, #268]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013afe:	2200      	movs	r2, #0
 8013b00:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013b02:	4b42      	ldr	r3, [pc, #264]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b04:	4a44      	ldr	r2, [pc, #272]	@ (8013c18 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8013b06:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013b08:	4b40      	ldr	r3, [pc, #256]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8013b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b10:	789c      	ldrb	r4, [r3, #2]
 8013b12:	4b3e      	ldr	r3, [pc, #248]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b14:	785d      	ldrb	r5, [r3, #1]
 8013b16:	4b3d      	ldr	r3, [pc, #244]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b18:	791b      	ldrb	r3, [r3, #4]
 8013b1a:	4a3c      	ldr	r2, [pc, #240]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b1c:	7952      	ldrb	r2, [r2, #5]
 8013b1e:	493b      	ldr	r1, [pc, #236]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b20:	78c9      	ldrb	r1, [r1, #3]
 8013b22:	483a      	ldr	r0, [pc, #232]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b24:	6880      	ldr	r0, [r0, #8]
 8013b26:	2600      	movs	r6, #0
 8013b28:	9604      	str	r6, [sp, #16]
 8013b2a:	9003      	str	r0, [sp, #12]
 8013b2c:	9102      	str	r1, [sp, #8]
 8013b2e:	9201      	str	r2, [sp, #4]
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	2300      	movs	r3, #0
 8013b34:	2201      	movs	r2, #1
 8013b36:	4629      	mov	r1, r5
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f7fc fc7b 	bl	8010434 <aci_gap_set_authentication_requirement>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013b42:	7dfb      	ldrb	r3, [r7, #23]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00f      	beq.n	8013b68 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013b48:	482a      	ldr	r0, [pc, #168]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013b4a:	f7fe fc69 	bl	8012420 <DbgTraceGetFileName>
 8013b4e:	4601      	mov	r1, r0
 8013b50:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8013b54:	4a28      	ldr	r2, [pc, #160]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013b56:	4829      	ldr	r0, [pc, #164]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013b58:	f002 fb96 	bl	8016288 <iprintf>
 8013b5c:	7dfb      	ldrb	r3, [r7, #23]
 8013b5e:	4619      	mov	r1, r3
 8013b60:	482e      	ldr	r0, [pc, #184]	@ (8013c1c <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013b62:	f002 fb91 	bl	8016288 <iprintf>
 8013b66:	e00c      	b.n	8013b82 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8013b68:	4822      	ldr	r0, [pc, #136]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013b6a:	f7fe fc59 	bl	8012420 <DbgTraceGetFileName>
 8013b6e:	4601      	mov	r1, r0
 8013b70:	f240 4314 	movw	r3, #1044	@ 0x414
 8013b74:	4a20      	ldr	r2, [pc, #128]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013b76:	4821      	ldr	r0, [pc, #132]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013b78:	f002 fb86 	bl	8016288 <iprintf>
 8013b7c:	4828      	ldr	r0, [pc, #160]	@ (8013c20 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8013b7e:	f002 fbf3 	bl	8016368 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8013b82:	4b22      	ldr	r3, [pc, #136]	@ (8013c0c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013b84:	789b      	ldrb	r3, [r3, #2]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d023      	beq.n	8013bd2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 8013b8a:	f7fc fe9d 	bl	80108c8 <aci_gap_configure_filter_accept_list>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00f      	beq.n	8013bb8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8013b98:	4816      	ldr	r0, [pc, #88]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013b9a:	f7fe fc41 	bl	8012420 <DbgTraceGetFileName>
 8013b9e:	4601      	mov	r1, r0
 8013ba0:	f240 431f 	movw	r3, #1055	@ 0x41f
 8013ba4:	4a14      	ldr	r2, [pc, #80]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013ba6:	4815      	ldr	r0, [pc, #84]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013ba8:	f002 fb6e 	bl	8016288 <iprintf>
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	481c      	ldr	r0, [pc, #112]	@ (8013c24 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8013bb2:	f002 fb69 	bl	8016288 <iprintf>
 8013bb6:	e00c      	b.n	8013bd2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8013bb8:	480e      	ldr	r0, [pc, #56]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013bba:	f7fe fc31 	bl	8012420 <DbgTraceGetFileName>
 8013bbe:	4601      	mov	r1, r0
 8013bc0:	f240 4323 	movw	r3, #1059	@ 0x423
 8013bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013bc6:	480d      	ldr	r0, [pc, #52]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013bc8:	f002 fb5e 	bl	8016288 <iprintf>
 8013bcc:	4816      	ldr	r0, [pc, #88]	@ (8013c28 <Ble_Hci_Gap_Gatt_Init+0x520>)
 8013bce:	f002 fbcb 	bl	8016368 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8013bd2:	4808      	ldr	r0, [pc, #32]	@ (8013bf4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013bd4:	f7fe fc24 	bl	8012420 <DbgTraceGetFileName>
 8013bd8:	4601      	mov	r1, r0
 8013bda:	f240 4326 	movw	r3, #1062	@ 0x426
 8013bde:	4a06      	ldr	r2, [pc, #24]	@ (8013bf8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013be0:	4806      	ldr	r0, [pc, #24]	@ (8013bfc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013be2:	f002 fb51 	bl	8016288 <iprintf>
 8013be6:	4811      	ldr	r0, [pc, #68]	@ (8013c2c <Ble_Hci_Gap_Gatt_Init+0x524>)
 8013be8:	f002 fb4e 	bl	8016288 <iprintf>
}
 8013bec:	bf00      	nop
 8013bee:	371c      	adds	r7, #28
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf4:	080179f4 	.word	0x080179f4
 8013bf8:	08019160 	.word	0x08019160
 8013bfc:	08017a10 	.word	0x08017a10
 8013c00:	080183a8 	.word	0x080183a8
 8013c04:	080183c8 	.word	0x080183c8
 8013c08:	08018404 	.word	0x08018404
 8013c0c:	20001018 	.word	0x20001018
 8013c10:	08018430 	.word	0x08018430
 8013c14:	08018470 	.word	0x08018470
 8013c18:	0001b207 	.word	0x0001b207
 8013c1c:	080184a0 	.word	0x080184a0
 8013c20:	080184ec 	.word	0x080184ec
 8013c24:	08018528 	.word	0x08018528
 8013c28:	08018568 	.word	0x08018568
 8013c2c:	08018598 	.word	0x08018598

08013c30 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b08c      	sub	sp, #48	@ 0x30
 8013c34:	af08      	add	r7, sp, #32
 8013c36:	4603      	mov	r3, r0
 8013c38:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013c3a:	2392      	movs	r3, #146	@ 0x92
 8013c3c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8013c3e:	4a32      	ldr	r2, [pc, #200]	@ (8013d08 <Adv_Request+0xd8>)
 8013c40:	79fb      	ldrb	r3, [r7, #7]
 8013c42:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013c46:	2300      	movs	r3, #0
 8013c48:	9306      	str	r3, [sp, #24]
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	9305      	str	r3, [sp, #20]
 8013c4e:	2300      	movs	r3, #0
 8013c50:	9304      	str	r3, [sp, #16]
 8013c52:	2300      	movs	r3, #0
 8013c54:	9303      	str	r3, [sp, #12]
 8013c56:	2300      	movs	r3, #0
 8013c58:	9302      	str	r3, [sp, #8]
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	9301      	str	r3, [sp, #4]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	2300      	movs	r3, #0
 8013c64:	22a0      	movs	r2, #160	@ 0xa0
 8013c66:	2180      	movs	r1, #128	@ 0x80
 8013c68:	2000      	movs	r0, #0
 8013c6a:	f7fc fa95 	bl	8010198 <aci_gap_set_discoverable>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013c72:	7bfb      	ldrb	r3, [r7, #15]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00f      	beq.n	8013c98 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8013c78:	4824      	ldr	r0, [pc, #144]	@ (8013d0c <Adv_Request+0xdc>)
 8013c7a:	f7fe fbd1 	bl	8012420 <DbgTraceGetFileName>
 8013c7e:	4601      	mov	r1, r0
 8013c80:	f240 433c 	movw	r3, #1084	@ 0x43c
 8013c84:	4a22      	ldr	r2, [pc, #136]	@ (8013d10 <Adv_Request+0xe0>)
 8013c86:	4823      	ldr	r0, [pc, #140]	@ (8013d14 <Adv_Request+0xe4>)
 8013c88:	f002 fafe 	bl	8016288 <iprintf>
 8013c8c:	7bfb      	ldrb	r3, [r7, #15]
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4821      	ldr	r0, [pc, #132]	@ (8013d18 <Adv_Request+0xe8>)
 8013c92:	f002 faf9 	bl	8016288 <iprintf>
 8013c96:	e00c      	b.n	8013cb2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8013c98:	481c      	ldr	r0, [pc, #112]	@ (8013d0c <Adv_Request+0xdc>)
 8013c9a:	f7fe fbc1 	bl	8012420 <DbgTraceGetFileName>
 8013c9e:	4601      	mov	r1, r0
 8013ca0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8013ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8013d10 <Adv_Request+0xe0>)
 8013ca6:	481b      	ldr	r0, [pc, #108]	@ (8013d14 <Adv_Request+0xe4>)
 8013ca8:	f002 faee 	bl	8016288 <iprintf>
 8013cac:	481b      	ldr	r0, [pc, #108]	@ (8013d1c <Adv_Request+0xec>)
 8013cae:	f002 fb5b 	bl	8016368 <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8013cb2:	491b      	ldr	r1, [pc, #108]	@ (8013d20 <Adv_Request+0xf0>)
 8013cb4:	2013      	movs	r0, #19
 8013cb6:	f7fc fd95 	bl	80107e4 <aci_gap_update_adv_data>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d00f      	beq.n	8013ce4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8013cc4:	4811      	ldr	r0, [pc, #68]	@ (8013d0c <Adv_Request+0xdc>)
 8013cc6:	f7fe fbab 	bl	8012420 <DbgTraceGetFileName>
 8013cca:	4601      	mov	r1, r0
 8013ccc:	f240 434f 	movw	r3, #1103	@ 0x44f
 8013cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8013d10 <Adv_Request+0xe0>)
 8013cd2:	4810      	ldr	r0, [pc, #64]	@ (8013d14 <Adv_Request+0xe4>)
 8013cd4:	f002 fad8 	bl	8016288 <iprintf>
 8013cd8:	7bfb      	ldrb	r3, [r7, #15]
 8013cda:	4619      	mov	r1, r3
 8013cdc:	4811      	ldr	r0, [pc, #68]	@ (8013d24 <Adv_Request+0xf4>)
 8013cde:	f002 fad3 	bl	8016288 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8013ce2:	e00d      	b.n	8013d00 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8013ce4:	4809      	ldr	r0, [pc, #36]	@ (8013d0c <Adv_Request+0xdc>)
 8013ce6:	f7fe fb9b 	bl	8012420 <DbgTraceGetFileName>
 8013cea:	4601      	mov	r1, r0
 8013cec:	f240 4353 	movw	r3, #1107	@ 0x453
 8013cf0:	4a07      	ldr	r2, [pc, #28]	@ (8013d10 <Adv_Request+0xe0>)
 8013cf2:	4808      	ldr	r0, [pc, #32]	@ (8013d14 <Adv_Request+0xe4>)
 8013cf4:	f002 fac8 	bl	8016288 <iprintf>
 8013cf8:	480b      	ldr	r0, [pc, #44]	@ (8013d28 <Adv_Request+0xf8>)
 8013cfa:	f002 fac5 	bl	8016288 <iprintf>
  return;
 8013cfe:	bf00      	nop
}
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	20001018 	.word	0x20001018
 8013d0c:	080179f4 	.word	0x080179f4
 8013d10:	08019178 	.word	0x08019178
 8013d14:	08017a10 	.word	0x08017a10
 8013d18:	080185c4 	.word	0x080185c4
 8013d1c:	080185fc 	.word	0x080185fc
 8013d20:	200000a4 	.word	0x200000a4
 8013d24:	08018624 	.word	0x08018624
 8013d28:	08018658 	.word	0x08018658

08013d2c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b086      	sub	sp, #24
 8013d30:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013d32:	f7ff f8ed 	bl	8012f10 <LL_FLASH_GetUDN>
 8013d36:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3e:	d023      	beq.n	8013d88 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013d40:	f7ff f8fe 	bl	8012f40 <LL_FLASH_GetSTCompanyID>
 8013d44:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013d46:	f7ff f8ef 	bl	8012f28 <LL_FLASH_GetDeviceID>
 8013d4a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	b2da      	uxtb	r2, r3
 8013d50:	4b16      	ldr	r3, [pc, #88]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d52:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	0a1b      	lsrs	r3, r3, #8
 8013d58:	b2da      	uxtb	r2, r3
 8013d5a:	4b14      	ldr	r3, [pc, #80]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d5c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	4b12      	ldr	r3, [pc, #72]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d64:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	b2da      	uxtb	r2, r3
 8013d6a:	4b10      	ldr	r3, [pc, #64]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d6c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	0a1b      	lsrs	r3, r3, #8
 8013d72:	b2da      	uxtb	r2, r3
 8013d74:	4b0d      	ldr	r3, [pc, #52]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d76:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	0c1b      	lsrs	r3, r3, #16
 8013d7c:	b2da      	uxtb	r2, r3
 8013d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d80:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8013d82:	4b0a      	ldr	r3, [pc, #40]	@ (8013dac <BleGetBdAddress+0x80>)
 8013d84:	617b      	str	r3, [r7, #20]
 8013d86:	e00b      	b.n	8013da0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8013d88:	2000      	movs	r0, #0
 8013d8a:	f7fe fc11 	bl	80125b0 <OTP_Read>
 8013d8e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d002      	beq.n	8013d9c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	617b      	str	r3, [r7, #20]
 8013d9a:	e001      	b.n	8013da0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8013d9c:	4b04      	ldr	r3, [pc, #16]	@ (8013db0 <BleGetBdAddress+0x84>)
 8013d9e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8013da0:	697b      	ldr	r3, [r7, #20]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3718      	adds	r7, #24
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	20001010 	.word	0x20001010
 8013db0:	08019110 	.word	0x08019110

08013db4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8013dba:	4b1f      	ldr	r3, [pc, #124]	@ (8013e38 <Adv_Cancel+0x84>)
 8013dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013dc0:	2b05      	cmp	r3, #5
 8013dc2:	d035      	beq.n	8013e30 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013dc4:	2392      	movs	r3, #146	@ 0x92
 8013dc6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8013dc8:	f7fc f9c2 	bl	8010150 <aci_gap_set_non_discoverable>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013dd0:	4b19      	ldr	r3, [pc, #100]	@ (8013e38 <Adv_Cancel+0x84>)
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8013dd8:	79fb      	ldrb	r3, [r7, #7]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00d      	beq.n	8013dfa <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8013dde:	4817      	ldr	r0, [pc, #92]	@ (8013e3c <Adv_Cancel+0x88>)
 8013de0:	f7fe fb1e 	bl	8012420 <DbgTraceGetFileName>
 8013de4:	4601      	mov	r1, r0
 8013de6:	f240 43a5 	movw	r3, #1189	@ 0x4a5
 8013dea:	4a15      	ldr	r2, [pc, #84]	@ (8013e40 <Adv_Cancel+0x8c>)
 8013dec:	4815      	ldr	r0, [pc, #84]	@ (8013e44 <Adv_Cancel+0x90>)
 8013dee:	f002 fa4b 	bl	8016288 <iprintf>
 8013df2:	4815      	ldr	r0, [pc, #84]	@ (8013e48 <Adv_Cancel+0x94>)
 8013df4:	f002 fa48 	bl	8016288 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8013df8:	e01a      	b.n	8013e30 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8013dfa:	4810      	ldr	r0, [pc, #64]	@ (8013e3c <Adv_Cancel+0x88>)
 8013dfc:	f7fe fb10 	bl	8012420 <DbgTraceGetFileName>
 8013e00:	4601      	mov	r1, r0
 8013e02:	f240 43a9 	movw	r3, #1193	@ 0x4a9
 8013e06:	4a0e      	ldr	r2, [pc, #56]	@ (8013e40 <Adv_Cancel+0x8c>)
 8013e08:	480e      	ldr	r0, [pc, #56]	@ (8013e44 <Adv_Cancel+0x90>)
 8013e0a:	f002 fa3d 	bl	8016288 <iprintf>
 8013e0e:	480f      	ldr	r0, [pc, #60]	@ (8013e4c <Adv_Cancel+0x98>)
 8013e10:	f002 fa3a 	bl	8016288 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013e14:	4809      	ldr	r0, [pc, #36]	@ (8013e3c <Adv_Cancel+0x88>)
 8013e16:	f7fe fb03 	bl	8012420 <DbgTraceGetFileName>
 8013e1a:	4601      	mov	r1, r0
 8013e1c:	f240 43aa 	movw	r3, #1194	@ 0x4aa
 8013e20:	4a07      	ldr	r2, [pc, #28]	@ (8013e40 <Adv_Cancel+0x8c>)
 8013e22:	4808      	ldr	r0, [pc, #32]	@ (8013e44 <Adv_Cancel+0x90>)
 8013e24:	f002 fa30 	bl	8016288 <iprintf>
 8013e28:	4809      	ldr	r0, [pc, #36]	@ (8013e50 <Adv_Cancel+0x9c>)
 8013e2a:	f002 fa2d 	bl	8016288 <iprintf>
  return;
 8013e2e:	bf00      	nop
 8013e30:	bf00      	nop
}
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	20001018 	.word	0x20001018
 8013e3c:	080179f4 	.word	0x080179f4
 8013e40:	08019184 	.word	0x08019184
 8013e44:	08017a10 	.word	0x08017a10
 8013e48:	08018680 	.word	0x08018680
 8013e4c:	080186a4 	.word	0x080186a4
 8013e50:	080186ac 	.word	0x080186ac

08013e54 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8013e54:	b590      	push	{r4, r7, lr}
 8013e56:	b08d      	sub	sp, #52	@ 0x34
 8013e58:	af02      	add	r7, sp, #8
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {10, 25}; /* ms */
 8013e5e:	4a59      	ldr	r2, [pc, #356]	@ (8013fc4 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 8013e60:	f107 030c 	add.w	r3, r7, #12
 8013e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e68:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8013e6c:	4b56      	ldr	r3, [pc, #344]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	3301      	adds	r3, #1
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f003 0301 	and.w	r3, r3, #1
 8013e78:	bfb8      	it	lt
 8013e7a:	425b      	neglt	r3, r3
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	4b52      	ldr	r3, [pc, #328]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013e80:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013e82:	4b51      	ldr	r3, [pc, #324]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	3328      	adds	r3, #40	@ 0x28
 8013e8a:	443b      	add	r3, r7
 8013e8c:	3b1c      	subs	r3, #28
 8013e8e:	ed93 7a00 	vldr	s14, [r3]
 8013e92:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e9e:	ee17 3a90 	vmov	r3, s15
 8013ea2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013ea4:	4b48      	ldr	r3, [pc, #288]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	009b      	lsls	r3, r3, #2
 8013eaa:	3328      	adds	r3, #40	@ 0x28
 8013eac:	443b      	add	r3, r7
 8013eae:	3b1c      	subs	r3, #28
 8013eb0:	ed93 7a00 	vldr	s14, [r3]
 8013eb4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ec0:	ee17 3a90 	vmov	r3, s15
 8013ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8013eca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013ece:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8013ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8013fcc <BLE_SVC_L2CAP_Conn_Update+0x178>)
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d15e      	bne.n	8013f96 <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 8013ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8013fcc <BLE_SVC_L2CAP_Conn_Update+0x178>)
 8013eda:	2200      	movs	r2, #0
 8013edc:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8013ede:	4b3a      	ldr	r3, [pc, #232]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f003 0301 	and.w	r3, r3, #1
 8013eea:	bfb8      	it	lt
 8013eec:	425b      	neglt	r3, r3
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	4b35      	ldr	r3, [pc, #212]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013ef2:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013ef4:	4b34      	ldr	r3, [pc, #208]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	3328      	adds	r3, #40	@ 0x28
 8013efc:	443b      	add	r3, r7
 8013efe:	3b1c      	subs	r3, #28
 8013f00:	ed93 7a00 	vldr	s14, [r3]
 8013f04:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f10:	ee17 3a90 	vmov	r3, s15
 8013f14:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013f16:	4b2c      	ldr	r3, [pc, #176]	@ (8013fc8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	009b      	lsls	r3, r3, #2
 8013f1c:	3328      	adds	r3, #40	@ 0x28
 8013f1e:	443b      	add	r3, r7
 8013f20:	3b1c      	subs	r3, #28
 8013f22:	ed93 7a00 	vldr	s14, [r3]
 8013f26:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f32:	ee17 3a90 	vmov	r3, s15
 8013f36:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8013f3c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013f40:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8013f42:	4b23      	ldr	r3, [pc, #140]	@ (8013fd0 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8013f44:	8ad8      	ldrh	r0, [r3, #22]
 8013f46:	8b7c      	ldrh	r4, [r7, #26]
 8013f48:	8bba      	ldrh	r2, [r7, #28]
 8013f4a:	8bf9      	ldrh	r1, [r7, #30]
 8013f4c:	8b3b      	ldrh	r3, [r7, #24]
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	4623      	mov	r3, r4
 8013f52:	f7fd fa7b 	bl	801144c <aci_l2cap_connection_parameter_update_req>
 8013f56:	4603      	mov	r3, r0
 8013f58:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8013f5a:	7dfb      	ldrb	r3, [r7, #23]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00d      	beq.n	8013f7c <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8013f60:	481c      	ldr	r0, [pc, #112]	@ (8013fd4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013f62:	f7fe fa5d 	bl	8012420 <DbgTraceGetFileName>
 8013f66:	4601      	mov	r1, r0
 8013f68:	f240 43d7 	movw	r3, #1239	@ 0x4d7
 8013f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8013fd8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8013f6e:	481b      	ldr	r0, [pc, #108]	@ (8013fdc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013f70:	f002 f98a 	bl	8016288 <iprintf>
 8013f74:	481a      	ldr	r0, [pc, #104]	@ (8013fe0 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 8013f76:	f002 f987 	bl	8016288 <iprintf>
 8013f7a:	e00c      	b.n	8013f96 <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8013f7c:	4815      	ldr	r0, [pc, #84]	@ (8013fd4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013f7e:	f7fe fa4f 	bl	8012420 <DbgTraceGetFileName>
 8013f82:	4601      	mov	r1, r0
 8013f84:	f240 43db 	movw	r3, #1243	@ 0x4db
 8013f88:	4a13      	ldr	r2, [pc, #76]	@ (8013fd8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8013f8a:	4814      	ldr	r0, [pc, #80]	@ (8013fdc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013f8c:	f002 f97c 	bl	8016288 <iprintf>
 8013f90:	4814      	ldr	r0, [pc, #80]	@ (8013fe4 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 8013f92:	f002 f979 	bl	8016288 <iprintf>
  }
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 8013f96:	7dbb      	ldrb	r3, [r7, #22]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8013f9c:	4812      	ldr	r0, [pc, #72]	@ (8013fe8 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 8013f9e:	f7ee fd49 	bl	8002a34 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8013fa2:	e00c      	b.n	8013fbe <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8013fa4:	4811      	ldr	r0, [pc, #68]	@ (8013fec <BLE_SVC_L2CAP_Conn_Update+0x198>)
 8013fa6:	f7ee fd45 	bl	8002a34 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8013faa:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8013fac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013fae:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8013fb0:	8c3b      	ldrh	r3, [r7, #32]
 8013fb2:	9300      	str	r3, [sp, #0]
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	480e      	ldr	r0, [pc, #56]	@ (8013ff0 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 8013fb8:	f7ee fd3c 	bl	8002a34 <DIAG>
  return;
 8013fbc:	bf00      	nop
}
 8013fbe:	372c      	adds	r7, #44	@ 0x2c
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd90      	pop	{r4, r7, pc}
 8013fc4:	080187fc 	.word	0x080187fc
 8013fc8:	200010a0 	.word	0x200010a0
 8013fcc:	200010a1 	.word	0x200010a1
 8013fd0:	20001018 	.word	0x20001018
 8013fd4:	080179f4 	.word	0x080179f4
 8013fd8:	08019190 	.word	0x08019190
 8013fdc:	08017a10 	.word	0x08017a10
 8013fe0:	080186c8 	.word	0x080186c8
 8013fe4:	080186f0 	.word	0x080186f0
 8013fe8:	08018720 	.word	0x08018720
 8013fec:	08018758 	.word	0x08018758
 8013ff0:	08018794 	.word	0x08018794

08013ff4 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8013ff8:	4b08      	ldr	r3, [pc, #32]	@ (801401c <Connection_Interval_Update_Req+0x28>)
 8013ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d00a      	beq.n	8014018 <Connection_Interval_Update_Req+0x24>
 8014002:	4b06      	ldr	r3, [pc, #24]	@ (801401c <Connection_Interval_Update_Req+0x28>)
 8014004:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014008:	2b00      	cmp	r3, #0
 801400a:	d005      	beq.n	8014018 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801400c:	4b03      	ldr	r3, [pc, #12]	@ (801401c <Connection_Interval_Update_Req+0x28>)
 801400e:	8adb      	ldrh	r3, [r3, #22]
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff ff1f 	bl	8013e54 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8014016:	bf00      	nop
 8014018:	bf00      	nop
}
 801401a:	bd80      	pop	{r7, pc}
 801401c:	20001018 	.word	0x20001018

08014020 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8014028:	2100      	movs	r1, #0
 801402a:	2004      	movs	r0, #4
 801402c:	f001 ff4e 	bl	8015ecc <UTIL_SEQ_SetTask>

  return;
 8014030:	bf00      	nop
}
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8014040:	2001      	movs	r0, #1
 8014042:	f001 ffaf 	bl	8015fa4 <UTIL_SEQ_SetEvt>

  return;
 8014046:	bf00      	nop
}
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8014056:	2001      	movs	r0, #1
 8014058:	f001 ffc4 	bl	8015fe4 <UTIL_SEQ_WaitEvt>

  return;
 801405c:	bf00      	nop
}
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	3308      	adds	r3, #8
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd fb70 	bl	801175c <SVCCTL_UserEvtRx>
 801407c:	4603      	mov	r3, r0
 801407e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8014080:	7afb      	ldrb	r3, [r7, #11]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d003      	beq.n	801408e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	2201      	movs	r2, #1
 801408a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801408c:	e003      	b.n	8014096 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]
  return;
 8014094:	bf00      	nop
}
 8014096:	3710      	adds	r7, #16
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	4603      	mov	r3, r0
 80140a4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80140a6:	79fb      	ldrb	r3, [r7, #7]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d002      	beq.n	80140b2 <BLE_StatusNot+0x16>
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d006      	beq.n	80140be <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80140b0:	e00b      	b.n	80140ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80140b2:	233f      	movs	r3, #63	@ 0x3f
 80140b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f001 ff34 	bl	8015f24 <UTIL_SEQ_PauseTask>
      break;
 80140bc:	e005      	b.n	80140ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80140be:	233f      	movs	r3, #63	@ 0x3f
 80140c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f001 ff4e 	bl	8015f64 <UTIL_SEQ_ResumeTask>
      break;
 80140c8:	bf00      	nop
  }

  return;
 80140ca:	bf00      	nop
}
 80140cc:	3710      	adds	r7, #16
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
	...

080140d4 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	af00      	add	r7, sp, #0
	if ( tsBle.App.ScgSetTask )
 80140d8:	4b06      	ldr	r3, [pc, #24]	@ (80140f4 <ALL_SENs_Task+0x20>)
 80140da:	7a5b      	ldrb	r3, [r3, #9]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d006      	beq.n	80140ee <ALL_SENs_Task+0x1a>
	{
		tsBle.App.ScgSetTask = false;
 80140e0:	4b04      	ldr	r3, [pc, #16]	@ (80140f4 <ALL_SENs_Task+0x20>)
 80140e2:	2200      	movs	r2, #0
 80140e4:	725a      	strb	r2, [r3, #9]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamSCG.u8TxData));
 80140e6:	4904      	ldr	r1, [pc, #16]	@ (80140f8 <ALL_SENs_Task+0x24>)
 80140e8:	2003      	movs	r0, #3
 80140ea:	f000 fc95 	bl	8014a18 <Custom_STM_App_Update_Char>
	}
}
 80140ee:	bf00      	nop
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	20001004 	.word	0x20001004
 80140f8:	20000426 	.word	0x20000426

080140fc <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 8014100:	4b06      	ldr	r3, [pc, #24]	@ (801411c <ACCEL_Task+0x20>)
 8014102:	7a9b      	ldrb	r3, [r3, #10]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d006      	beq.n	8014116 <ACCEL_Task+0x1a>
	{
		tsBle.App.AccelSetTask = false;
 8014108:	4b04      	ldr	r3, [pc, #16]	@ (801411c <ACCEL_Task+0x20>)
 801410a:	2200      	movs	r2, #0
 801410c:	729a      	strb	r2, [r3, #10]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 801410e:	4904      	ldr	r1, [pc, #16]	@ (8014120 <ACCEL_Task+0x24>)
 8014110:	2000      	movs	r0, #0
 8014112:	f000 fc81 	bl	8014a18 <Custom_STM_App_Update_Char>
	}
}
 8014116:	bf00      	nop
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20001004 	.word	0x20001004
 8014120:	2000074a 	.word	0x2000074a

08014124 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	781b      	ldrb	r3, [r3, #0]
 8014130:	2b08      	cmp	r3, #8
 8014132:	d831      	bhi.n	8014198 <Custom_STM_App_Notification+0x74>
 8014134:	a201      	add	r2, pc, #4	@ (adr r2, 801413c <Custom_STM_App_Notification+0x18>)
 8014136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801413a:	bf00      	nop
 801413c:	08014161 	.word	0x08014161
 8014140:	08014175 	.word	0x08014175
 8014144:	08014199 	.word	0x08014199
 8014148:	08014199 	.word	0x08014199
 801414c:	08014199 	.word	0x08014199
 8014150:	08014183 	.word	0x08014183
 8014154:	0801418b 	.word	0x0801418b
 8014158:	08014199 	.word	0x08014199
 801415c:	08014199 	.word	0x08014199

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.McgNotification = true;
 8014160:	4b10      	ldr	r3, [pc, #64]	@ (80141a4 <Custom_STM_App_Notification+0x80>)
 8014162:	2201      	movs	r2, #1
 8014164:	719a      	strb	r2, [r3, #6]
    	tsBle.App.AccelNotification = true;
 8014166:	4b0f      	ldr	r3, [pc, #60]	@ (80141a4 <Custom_STM_App_Notification+0x80>)
 8014168:	2201      	movs	r2, #1
 801416a:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 801416c:	480e      	ldr	r0, [pc, #56]	@ (80141a8 <Custom_STM_App_Notification+0x84>)
 801416e:	f7ee fc61 	bl	8002a34 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 8014172:	e012      	b.n	801419a <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 8014174:	4b0b      	ldr	r3, [pc, #44]	@ (80141a4 <Custom_STM_App_Notification+0x80>)
 8014176:	2200      	movs	r2, #0
 8014178:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 801417a:	480c      	ldr	r0, [pc, #48]	@ (80141ac <Custom_STM_App_Notification+0x88>)
 801417c:	f7ee fc5a 	bl	8002a34 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 8014180:	e00b      	b.n	801419a <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 8014182:	480b      	ldr	r0, [pc, #44]	@ (80141b0 <Custom_STM_App_Notification+0x8c>)
 8014184:	f7ee fc56 	bl	8002a34 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 8014188:	e007      	b.n	801419a <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.McgNotification = false;
 801418a:	4b06      	ldr	r3, [pc, #24]	@ (80141a4 <Custom_STM_App_Notification+0x80>)
 801418c:	2200      	movs	r2, #0
 801418e:	719a      	strb	r2, [r3, #6]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 8014190:	4808      	ldr	r0, [pc, #32]	@ (80141b4 <Custom_STM_App_Notification+0x90>)
 8014192:	f7ee fc4f 	bl	8002a34 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 8014196:	e000      	b.n	801419a <Custom_STM_App_Notification+0x76>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8014198:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801419a:	bf00      	nop
}
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	20001004 	.word	0x20001004
 80141a8:	08018804 	.word	0x08018804
 80141ac:	08018834 	.word	0x08018834
 80141b0:	08018868 	.word	0x08018868
 80141b4:	08018898 	.word	0x08018898

080141b8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d002      	beq.n	80141ce <Custom_APP_Notification+0x16>
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d002      	beq.n	80141d2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80141cc:	e002      	b.n	80141d4 <Custom_APP_Notification+0x1c>
      break;
 80141ce:	bf00      	nop
 80141d0:	e000      	b.n	80141d4 <Custom_APP_Notification+0x1c>
      break;
 80141d2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80141d4:	bf00      	nop
}
 80141d6:	370c      	adds	r7, #12
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr

080141e0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80141e0:	b480      	push	{r7}
 80141e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80141e4:	bf00      	nop
}
 80141e6:	46bd      	mov	sp, r7
 80141e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ec:	4770      	bx	lr
	...

080141f0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b090      	sub	sp, #64	@ 0x40
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80141f8:	2300      	movs	r3, #0
 80141fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	3301      	adds	r3, #1
 8014202:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8014204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014206:	781b      	ldrb	r3, [r3, #0]
 8014208:	2bff      	cmp	r3, #255	@ 0xff
 801420a:	f040 81ae 	bne.w	801456a <Custom_STM_Event_Handler+0x37a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014210:	3302      	adds	r3, #2
 8014212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8014214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	b29b      	uxth	r3, r3
 801421a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801421e:	2b1a      	cmp	r3, #26
 8014220:	f200 819d 	bhi.w	801455e <Custom_STM_Event_Handler+0x36e>
 8014224:	a201      	add	r2, pc, #4	@ (adr r2, 801422c <Custom_STM_Event_Handler+0x3c>)
 8014226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801422a:	bf00      	nop
 801422c:	08014299 	.word	0x08014299
 8014230:	0801455f 	.word	0x0801455f
 8014234:	0801455f 	.word	0x0801455f
 8014238:	0801455f 	.word	0x0801455f
 801423c:	0801455f 	.word	0x0801455f
 8014240:	0801455f 	.word	0x0801455f
 8014244:	0801455f 	.word	0x0801455f
 8014248:	0801455f 	.word	0x0801455f
 801424c:	0801455f 	.word	0x0801455f
 8014250:	0801455f 	.word	0x0801455f
 8014254:	0801455f 	.word	0x0801455f
 8014258:	0801455f 	.word	0x0801455f
 801425c:	0801455f 	.word	0x0801455f
 8014260:	0801455f 	.word	0x0801455f
 8014264:	0801455f 	.word	0x0801455f
 8014268:	0801455f 	.word	0x0801455f
 801426c:	0801455f 	.word	0x0801455f
 8014270:	0801455f 	.word	0x0801455f
 8014274:	0801455f 	.word	0x0801455f
 8014278:	080144e7 	.word	0x080144e7
 801427c:	0801455f 	.word	0x0801455f
 8014280:	0801455f 	.word	0x0801455f
 8014284:	0801455f 	.word	0x0801455f
 8014288:	0801455f 	.word	0x0801455f
 801428c:	0801455f 	.word	0x0801455f
 8014290:	0801455f 	.word	0x0801455f
 8014294:	08014541 	.word	0x08014541
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8014298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801429a:	3302      	adds	r3, #2
 801429c:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801429e:	6a3b      	ldr	r3, [r7, #32]
 80142a0:	885b      	ldrh	r3, [r3, #2]
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	461a      	mov	r2, r3
 80142a6:	4ba0      	ldr	r3, [pc, #640]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 80142a8:	885b      	ldrh	r3, [r3, #2]
 80142aa:	3302      	adds	r3, #2
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d119      	bne.n	80142e4 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80142b0:	2301      	movs	r3, #1
 80142b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80142b6:	6a3b      	ldr	r3, [r7, #32]
 80142b8:	7a1b      	ldrb	r3, [r3, #8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d002      	beq.n	80142c4 <Custom_STM_Event_Handler+0xd4>
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d008      	beq.n	80142d4 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80142c2:	e10f      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 80142c4:	2301      	movs	r3, #1
 80142c6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80142c8:	f107 030c 	add.w	r3, r7, #12
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7ff ff29 	bl	8014124 <Custom_STM_App_Notification>
                break;
 80142d2:	e107      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 80142d4:	2300      	movs	r3, #0
 80142d6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80142d8:	f107 030c 	add.w	r3, r7, #12
 80142dc:	4618      	mov	r0, r3
 80142de:	f7ff ff21 	bl	8014124 <Custom_STM_App_Notification>
                break;
 80142e2:	e0ff      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80142e4:	6a3b      	ldr	r3, [r7, #32]
 80142e6:	885b      	ldrh	r3, [r3, #2]
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	461a      	mov	r2, r3
 80142ec:	4b8e      	ldr	r3, [pc, #568]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 80142ee:	889b      	ldrh	r3, [r3, #4]
 80142f0:	3302      	adds	r3, #2
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d119      	bne.n	801432a <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80142f6:	2301      	movs	r3, #1
 80142f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	7a1b      	ldrb	r3, [r3, #8]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d002      	beq.n	801430a <Custom_STM_Event_Handler+0x11a>
 8014304:	2b01      	cmp	r3, #1
 8014306:	d008      	beq.n	801431a <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8014308:	e0ec      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 801430a:	2303      	movs	r3, #3
 801430c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 801430e:	f107 030c 	add.w	r3, r7, #12
 8014312:	4618      	mov	r0, r3
 8014314:	f7ff ff06 	bl	8014124 <Custom_STM_App_Notification>
                break;
 8014318:	e0e4      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 801431a:	2302      	movs	r3, #2
 801431c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 801431e:	f107 030c 	add.w	r3, r7, #12
 8014322:	4618      	mov	r0, r3
 8014324:	f7ff fefe 	bl	8014124 <Custom_STM_App_Notification>
                break;
 8014328:	e0dc      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	885b      	ldrh	r3, [r3, #2]
 801432e:	b29b      	uxth	r3, r3
 8014330:	461a      	mov	r2, r3
 8014332:	4b7d      	ldr	r3, [pc, #500]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 8014334:	891b      	ldrh	r3, [r3, #8]
 8014336:	3302      	adds	r3, #2
 8014338:	429a      	cmp	r2, r3
 801433a:	d119      	bne.n	8014370 <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801433c:	2301      	movs	r3, #1
 801433e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8014342:	6a3b      	ldr	r3, [r7, #32]
 8014344:	7a1b      	ldrb	r3, [r3, #8]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d002      	beq.n	8014350 <Custom_STM_Event_Handler+0x160>
 801434a:	2b01      	cmp	r3, #1
 801434c:	d008      	beq.n	8014360 <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 801434e:	e0c9      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8014350:	2306      	movs	r3, #6
 8014352:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014354:	f107 030c 	add.w	r3, r7, #12
 8014358:	4618      	mov	r0, r3
 801435a:	f7ff fee3 	bl	8014124 <Custom_STM_App_Notification>
                break;
 801435e:	e0c1      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8014360:	2305      	movs	r3, #5
 8014362:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014364:	f107 030c 	add.w	r3, r7, #12
 8014368:	4618      	mov	r0, r3
 801436a:	f7ff fedb 	bl	8014124 <Custom_STM_App_Notification>
                break;
 801436e:	e0b9      	b.n	80144e4 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8014370:	6a3b      	ldr	r3, [r7, #32]
 8014372:	885b      	ldrh	r3, [r3, #2]
 8014374:	b29b      	uxth	r3, r3
 8014376:	461a      	mov	r2, r3
 8014378:	4b6b      	ldr	r3, [pc, #428]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 801437a:	88db      	ldrh	r3, [r3, #6]
 801437c:	3301      	adds	r3, #1
 801437e:	429a      	cmp	r2, r3
 8014380:	f040 80ef 	bne.w	8014562 <Custom_STM_Event_Handler+0x372>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8014384:	2301      	movs	r3, #1
 8014386:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 801438a:	6a3b      	ldr	r3, [r7, #32]
 801438c:	f103 0208 	add.w	r2, r3, #8
 8014390:	4b66      	ldr	r3, [pc, #408]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014392:	3301      	adds	r3, #1
 8014394:	6810      	ldr	r0, [r2, #0]
 8014396:	6851      	ldr	r1, [r2, #4]
 8014398:	6018      	str	r0, [r3, #0]
 801439a:	6059      	str	r1, [r3, #4]
 801439c:	8912      	ldrh	r2, [r2, #8]
 801439e:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 80143a0:	220a      	movs	r2, #10
 80143a2:	4963      	ldr	r1, [pc, #396]	@ (8014530 <Custom_STM_Event_Handler+0x340>)
 80143a4:	4863      	ldr	r0, [pc, #396]	@ (8014534 <Custom_STM_Event_Handler+0x344>)
 80143a6:	f001 ff6f 	bl	8016288 <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 80143aa:	2300      	movs	r3, #0
 80143ac:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 80143ae:	2300      	movs	r3, #0
 80143b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80143b4:	e090      	b.n	80144d8 <Custom_STM_Event_Handler+0x2e8>
            {
            	// Check for CMD:  'SN'
            	if( strncmp( &tsCmd.u8RxCmd[i], "WS,", 3 ) == 0 )
 80143b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80143ba:	4a5c      	ldr	r2, [pc, #368]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143bc:	4413      	add	r3, r2
 80143be:	3301      	adds	r3, #1
 80143c0:	2203      	movs	r2, #3
 80143c2:	495d      	ldr	r1, [pc, #372]	@ (8014538 <Custom_STM_Event_Handler+0x348>)
 80143c4:	4618      	mov	r0, r3
 80143c6:	f002 f8ef 	bl	80165a8 <strncmp>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d17e      	bne.n	80144ce <Custom_STM_Event_Handler+0x2de>
                    {
							 if (tsCmd.u8RxCmd[8] == STOP)			{ tsCmd.MODE 	= Stop;}
 80143d0:	4b56      	ldr	r3, [pc, #344]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143d2:	7a5b      	ldrb	r3, [r3, #9]
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	d103      	bne.n	80143e0 <Custom_STM_Event_Handler+0x1f0>
 80143d8:	4b54      	ldr	r3, [pc, #336]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143da:	2200      	movs	r2, #0
 80143dc:	755a      	strb	r2, [r3, #21]
 80143de:	e076      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == START)			{ tsCmd.MODE 	= Start;}
 80143e0:	4b52      	ldr	r3, [pc, #328]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143e2:	7a5b      	ldrb	r3, [r3, #9]
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	d103      	bne.n	80143f0 <Custom_STM_Event_Handler+0x200>
 80143e8:	4b50      	ldr	r3, [pc, #320]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143ea:	2201      	movs	r2, #1
 80143ec:	755a      	strb	r2, [r3, #21]
 80143ee:	e06e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_ON)		{ tsCmd.ECG 	= true; }
 80143f0:	4b4e      	ldr	r3, [pc, #312]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143f2:	7a5b      	ldrb	r3, [r3, #9]
 80143f4:	2b03      	cmp	r3, #3
 80143f6:	d103      	bne.n	8014400 <Custom_STM_Event_Handler+0x210>
 80143f8:	4b4c      	ldr	r3, [pc, #304]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80143fa:	2201      	movs	r2, #1
 80143fc:	761a      	strb	r2, [r3, #24]
 80143fe:	e066      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_OFF)		{ tsCmd.ECG 	= false;}
 8014400:	4b4a      	ldr	r3, [pc, #296]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014402:	7a5b      	ldrb	r3, [r3, #9]
 8014404:	2b04      	cmp	r3, #4
 8014406:	d103      	bne.n	8014410 <Custom_STM_Event_Handler+0x220>
 8014408:	4b48      	ldr	r3, [pc, #288]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801440a:	2200      	movs	r2, #0
 801440c:	761a      	strb	r2, [r3, #24]
 801440e:	e05e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_ON)	{ tsCmd.ECG_N50 = true;}
 8014410:	4b46      	ldr	r3, [pc, #280]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014412:	7a5b      	ldrb	r3, [r3, #9]
 8014414:	2b05      	cmp	r3, #5
 8014416:	d103      	bne.n	8014420 <Custom_STM_Event_Handler+0x230>
 8014418:	4b44      	ldr	r3, [pc, #272]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801441a:	2201      	movs	r2, #1
 801441c:	765a      	strb	r2, [r3, #25]
 801441e:	e056      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_OFF)	{ tsCmd.ECG_N50 = false;}
 8014420:	4b42      	ldr	r3, [pc, #264]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014422:	7a5b      	ldrb	r3, [r3, #9]
 8014424:	2b06      	cmp	r3, #6
 8014426:	d103      	bne.n	8014430 <Custom_STM_Event_Handler+0x240>
 8014428:	4b40      	ldr	r3, [pc, #256]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801442a:	2200      	movs	r2, #0
 801442c:	765a      	strb	r2, [r3, #25]
 801442e:	e04e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_ON)	{ tsCmd.ECG_HPF = true;}
 8014430:	4b3e      	ldr	r3, [pc, #248]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014432:	7a5b      	ldrb	r3, [r3, #9]
 8014434:	2b07      	cmp	r3, #7
 8014436:	d103      	bne.n	8014440 <Custom_STM_Event_Handler+0x250>
 8014438:	4b3c      	ldr	r3, [pc, #240]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801443a:	2201      	movs	r2, #1
 801443c:	769a      	strb	r2, [r3, #26]
 801443e:	e046      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_OFF)	{ tsCmd.ECG_HPF = false;}
 8014440:	4b3a      	ldr	r3, [pc, #232]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014442:	7a5b      	ldrb	r3, [r3, #9]
 8014444:	2b08      	cmp	r3, #8
 8014446:	d103      	bne.n	8014450 <Custom_STM_Event_Handler+0x260>
 8014448:	4b38      	ldr	r3, [pc, #224]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801444a:	2200      	movs	r2, #0
 801444c:	769a      	strb	r2, [r3, #26]
 801444e:	e03e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_ON)		{ tsCmd.MCG 	= true;}
 8014450:	4b36      	ldr	r3, [pc, #216]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014452:	7a5b      	ldrb	r3, [r3, #9]
 8014454:	2b09      	cmp	r3, #9
 8014456:	d103      	bne.n	8014460 <Custom_STM_Event_Handler+0x270>
 8014458:	4b34      	ldr	r3, [pc, #208]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801445a:	2201      	movs	r2, #1
 801445c:	76da      	strb	r2, [r3, #27]
 801445e:	e036      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_OFF)		{ tsCmd.MCG 	= false;}
 8014460:	4b32      	ldr	r3, [pc, #200]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014462:	7a5b      	ldrb	r3, [r3, #9]
 8014464:	2b0a      	cmp	r3, #10
 8014466:	d103      	bne.n	8014470 <Custom_STM_Event_Handler+0x280>
 8014468:	4b30      	ldr	r3, [pc, #192]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801446a:	2200      	movs	r2, #0
 801446c:	76da      	strb	r2, [r3, #27]
 801446e:	e02e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_ON)	{ tsCmd.MCG_N50 = true;}
 8014470:	4b2e      	ldr	r3, [pc, #184]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014472:	7a5b      	ldrb	r3, [r3, #9]
 8014474:	2b0b      	cmp	r3, #11
 8014476:	d103      	bne.n	8014480 <Custom_STM_Event_Handler+0x290>
 8014478:	4b2c      	ldr	r3, [pc, #176]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801447a:	2201      	movs	r2, #1
 801447c:	771a      	strb	r2, [r3, #28]
 801447e:	e026      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_OFF)	{ tsCmd.MCG_N50 = false;}
 8014480:	4b2a      	ldr	r3, [pc, #168]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014482:	7a5b      	ldrb	r3, [r3, #9]
 8014484:	2b0c      	cmp	r3, #12
 8014486:	d103      	bne.n	8014490 <Custom_STM_Event_Handler+0x2a0>
 8014488:	4b28      	ldr	r3, [pc, #160]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801448a:	2200      	movs	r2, #0
 801448c:	771a      	strb	r2, [r3, #28]
 801448e:	e01e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_ON)	{ tsCmd.MCG_HPF = true;}
 8014490:	4b26      	ldr	r3, [pc, #152]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 8014492:	7a5b      	ldrb	r3, [r3, #9]
 8014494:	2b0d      	cmp	r3, #13
 8014496:	d103      	bne.n	80144a0 <Custom_STM_Event_Handler+0x2b0>
 8014498:	4b24      	ldr	r3, [pc, #144]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 801449a:	2201      	movs	r2, #1
 801449c:	775a      	strb	r2, [r3, #29]
 801449e:	e016      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_OFF)	{ tsCmd.MCG_HPF = false;}
 80144a0:	4b22      	ldr	r3, [pc, #136]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144a2:	7a5b      	ldrb	r3, [r3, #9]
 80144a4:	2b0e      	cmp	r3, #14
 80144a6:	d103      	bne.n	80144b0 <Custom_STM_Event_Handler+0x2c0>
 80144a8:	4b20      	ldr	r3, [pc, #128]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144aa:	2200      	movs	r2, #0
 80144ac:	775a      	strb	r2, [r3, #29]
 80144ae:	e00e      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_ON)		{ tsCmd.LED 	= true; }
 80144b0:	4b1e      	ldr	r3, [pc, #120]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144b2:	7a5b      	ldrb	r3, [r3, #9]
 80144b4:	2b0f      	cmp	r3, #15
 80144b6:	d103      	bne.n	80144c0 <Custom_STM_Event_Handler+0x2d0>
 80144b8:	4b1c      	ldr	r3, [pc, #112]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144ba:	2201      	movs	r2, #1
 80144bc:	75da      	strb	r2, [r3, #23]
 80144be:	e006      	b.n	80144ce <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_OFF)  		{ tsCmd.LED 	= false; }
 80144c0:	4b1a      	ldr	r3, [pc, #104]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144c2:	7a5b      	ldrb	r3, [r3, #9]
 80144c4:	2b10      	cmp	r3, #16
 80144c6:	d102      	bne.n	80144ce <Custom_STM_Event_Handler+0x2de>
 80144c8:	4b18      	ldr	r3, [pc, #96]	@ (801452c <Custom_STM_Event_Handler+0x33c>)
 80144ca:	2200      	movs	r2, #0
 80144cc:	75da      	strb	r2, [r3, #23]
            for (uint8_t i=0 ; i < 10 ; i++)
 80144ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80144d2:	3301      	adds	r3, #1
 80144d4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80144d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80144dc:	2b09      	cmp	r3, #9
 80144de:	f67f af6a 	bls.w	80143b6 <Custom_STM_Event_Handler+0x1c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80144e2:	e03e      	b.n	8014562 <Custom_STM_Event_Handler+0x372>
 80144e4:	e03d      	b.n	8014562 <Custom_STM_Event_Handler+0x372>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80144e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e8:	3302      	adds	r3, #2
 80144ea:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80144ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ee:	885b      	ldrh	r3, [r3, #2]
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	461a      	mov	r2, r3
 80144f4:	4b0c      	ldr	r3, [pc, #48]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 80144f6:	895b      	ldrh	r3, [r3, #10]
 80144f8:	3301      	adds	r3, #1
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d133      	bne.n	8014566 <Custom_STM_Event_Handler+0x376>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80144fe:	2301      	movs	r3, #1
 8014500:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8014504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014506:	881b      	ldrh	r3, [r3, #0]
 8014508:	b29b      	uxth	r3, r3
 801450a:	4618      	mov	r0, r3
 801450c:	f7fc fd68 	bl	8010fe0 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 8014510:	4b05      	ldr	r3, [pc, #20]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 8014512:	8818      	ldrh	r0, [r3, #0]
 8014514:	4b04      	ldr	r3, [pc, #16]	@ (8014528 <Custom_STM_Event_Handler+0x338>)
 8014516:	8959      	ldrh	r1, [r3, #10]
 8014518:	4b08      	ldr	r3, [pc, #32]	@ (801453c <Custom_STM_Event_Handler+0x34c>)
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	2314      	movs	r3, #20
 801451e:	2200      	movs	r2, #0
 8014520:	f7fc fc60 	bl	8010de4 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8014524:	e01f      	b.n	8014566 <Custom_STM_Event_Handler+0x376>
 8014526:	bf00      	nop
 8014528:	200010a4 	.word	0x200010a4
 801452c:	20000cc4 	.word	0x20000cc4
 8014530:	20000cc5 	.word	0x20000cc5
 8014534:	20000ccf 	.word	0x20000ccf
 8014538:	080188d0 	.word	0x080188d0
 801453c:	080188d4 	.word	0x080188d4
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8014540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014542:	3302      	adds	r3, #2
 8014544:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8014546:	2308      	movs	r3, #8
 8014548:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 801454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801454c:	881b      	ldrh	r3, [r3, #0]
 801454e:	b29b      	uxth	r3, r3
 8014550:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8014552:	f107 030c 	add.w	r3, r7, #12
 8014556:	4618      	mov	r0, r3
 8014558:	f7ff fde4 	bl	8014124 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801455c:	e004      	b.n	8014568 <Custom_STM_Event_Handler+0x378>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801455e:	bf00      	nop
 8014560:	e004      	b.n	801456c <Custom_STM_Event_Handler+0x37c>
          break;
 8014562:	bf00      	nop
 8014564:	e002      	b.n	801456c <Custom_STM_Event_Handler+0x37c>
          break;
 8014566:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8014568:	e000      	b.n	801456c <Custom_STM_Event_Handler+0x37c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 801456a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801456c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8014570:	4618      	mov	r0, r3
 8014572:	3738      	adds	r7, #56	@ 0x38
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08c      	sub	sp, #48	@ 0x30
 801457c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801457e:	2392      	movs	r3, #146	@ 0x92
 8014580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8014582:	48a5      	ldr	r0, [pc, #660]	@ (8014818 <SVCCTL_InitCustomSvc+0x2a0>)
 8014584:	f7fd f8d0 	bl	8011728 <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8014588:	230e      	movs	r3, #14
 801458a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 801458c:	238f      	movs	r3, #143	@ 0x8f
 801458e:	713b      	strb	r3, [r7, #4]
 8014590:	23e5      	movs	r3, #229	@ 0xe5
 8014592:	717b      	strb	r3, [r7, #5]
 8014594:	23b3      	movs	r3, #179	@ 0xb3
 8014596:	71bb      	strb	r3, [r7, #6]
 8014598:	23d5      	movs	r3, #213	@ 0xd5
 801459a:	71fb      	strb	r3, [r7, #7]
 801459c:	232e      	movs	r3, #46	@ 0x2e
 801459e:	723b      	strb	r3, [r7, #8]
 80145a0:	237f      	movs	r3, #127	@ 0x7f
 80145a2:	727b      	strb	r3, [r7, #9]
 80145a4:	234a      	movs	r3, #74	@ 0x4a
 80145a6:	72bb      	strb	r3, [r7, #10]
 80145a8:	2398      	movs	r3, #152	@ 0x98
 80145aa:	72fb      	strb	r3, [r7, #11]
 80145ac:	232a      	movs	r3, #42	@ 0x2a
 80145ae:	733b      	strb	r3, [r7, #12]
 80145b0:	2348      	movs	r3, #72	@ 0x48
 80145b2:	737b      	strb	r3, [r7, #13]
 80145b4:	237a      	movs	r3, #122	@ 0x7a
 80145b6:	73bb      	strb	r3, [r7, #14]
 80145b8:	23cc      	movs	r3, #204	@ 0xcc
 80145ba:	73fb      	strb	r3, [r7, #15]
 80145bc:	2300      	movs	r3, #0
 80145be:	743b      	strb	r3, [r7, #16]
 80145c0:	2300      	movs	r3, #0
 80145c2:	747b      	strb	r3, [r7, #17]
 80145c4:	2300      	movs	r3, #0
 80145c6:	74bb      	strb	r3, [r7, #18]
 80145c8:	2300      	movs	r3, #0
 80145ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80145cc:	7dbb      	ldrb	r3, [r7, #22]
 80145ce:	1d39      	adds	r1, r7, #4
 80145d0:	4a92      	ldr	r2, [pc, #584]	@ (801481c <SVCCTL_InitCustomSvc+0x2a4>)
 80145d2:	9200      	str	r2, [sp, #0]
 80145d4:	2201      	movs	r2, #1
 80145d6:	2002      	movs	r0, #2
 80145d8:	f7fc fa26 	bl	8010a28 <aci_gatt_add_service>
 80145dc:	4603      	mov	r3, r0
 80145de:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80145e0:	7dfb      	ldrb	r3, [r7, #23]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00f      	beq.n	8014606 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 80145e6:	488e      	ldr	r0, [pc, #568]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 80145e8:	f7fd ff1a 	bl	8012420 <DbgTraceGetFileName>
 80145ec:	4601      	mov	r1, r0
 80145ee:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 80145f2:	4a8c      	ldr	r2, [pc, #560]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 80145f4:	488c      	ldr	r0, [pc, #560]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 80145f6:	f001 fe47 	bl	8016288 <iprintf>
 80145fa:	7dfb      	ldrb	r3, [r7, #23]
 80145fc:	4619      	mov	r1, r3
 80145fe:	488b      	ldr	r0, [pc, #556]	@ (801482c <SVCCTL_InitCustomSvc+0x2b4>)
 8014600:	f001 fe42 	bl	8016288 <iprintf>
 8014604:	e00c      	b.n	8014620 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 8014606:	4886      	ldr	r0, [pc, #536]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 8014608:	f7fd ff0a 	bl	8012420 <DbgTraceGetFileName>
 801460c:	4601      	mov	r1, r0
 801460e:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8014612:	4a84      	ldr	r2, [pc, #528]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 8014614:	4884      	ldr	r0, [pc, #528]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 8014616:	f001 fe37 	bl	8016288 <iprintf>
 801461a:	4885      	ldr	r0, [pc, #532]	@ (8014830 <SVCCTL_InitCustomSvc+0x2b8>)
 801461c:	f001 fe34 	bl	8016288 <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 8014620:	2319      	movs	r3, #25
 8014622:	713b      	strb	r3, [r7, #4]
 8014624:	23ed      	movs	r3, #237	@ 0xed
 8014626:	717b      	strb	r3, [r7, #5]
 8014628:	2382      	movs	r3, #130	@ 0x82
 801462a:	71bb      	strb	r3, [r7, #6]
 801462c:	23ae      	movs	r3, #174	@ 0xae
 801462e:	71fb      	strb	r3, [r7, #7]
 8014630:	23ed      	movs	r3, #237	@ 0xed
 8014632:	723b      	strb	r3, [r7, #8]
 8014634:	2321      	movs	r3, #33	@ 0x21
 8014636:	727b      	strb	r3, [r7, #9]
 8014638:	234c      	movs	r3, #76	@ 0x4c
 801463a:	72bb      	strb	r3, [r7, #10]
 801463c:	239d      	movs	r3, #157	@ 0x9d
 801463e:	72fb      	strb	r3, [r7, #11]
 8014640:	2341      	movs	r3, #65	@ 0x41
 8014642:	733b      	strb	r3, [r7, #12]
 8014644:	2345      	movs	r3, #69	@ 0x45
 8014646:	737b      	strb	r3, [r7, #13]
 8014648:	2322      	movs	r3, #34	@ 0x22
 801464a:	73bb      	strb	r3, [r7, #14]
 801464c:	238e      	movs	r3, #142	@ 0x8e
 801464e:	73fb      	strb	r3, [r7, #15]
 8014650:	2336      	movs	r3, #54	@ 0x36
 8014652:	743b      	strb	r3, [r7, #16]
 8014654:	232a      	movs	r3, #42	@ 0x2a
 8014656:	747b      	strb	r3, [r7, #17]
 8014658:	2300      	movs	r3, #0
 801465a:	74bb      	strb	r3, [r7, #18]
 801465c:	2300      	movs	r3, #0
 801465e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014660:	4b6e      	ldr	r3, [pc, #440]	@ (801481c <SVCCTL_InitCustomSvc+0x2a4>)
 8014662:	8818      	ldrh	r0, [r3, #0]
 8014664:	4b73      	ldr	r3, [pc, #460]	@ (8014834 <SVCCTL_InitCustomSvc+0x2bc>)
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	4619      	mov	r1, r3
 801466a:	1d3a      	adds	r2, r7, #4
 801466c:	4b72      	ldr	r3, [pc, #456]	@ (8014838 <SVCCTL_InitCustomSvc+0x2c0>)
 801466e:	9305      	str	r3, [sp, #20]
 8014670:	2300      	movs	r3, #0
 8014672:	9304      	str	r3, [sp, #16]
 8014674:	2310      	movs	r3, #16
 8014676:	9303      	str	r3, [sp, #12]
 8014678:	2307      	movs	r3, #7
 801467a:	9302      	str	r3, [sp, #8]
 801467c:	2300      	movs	r3, #0
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	2310      	movs	r3, #16
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	460b      	mov	r3, r1
 8014686:	2102      	movs	r1, #2
 8014688:	f7fc faa4 	bl	8010bd4 <aci_gatt_add_char>
 801468c:	4603      	mov	r3, r0
 801468e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014690:	7dfb      	ldrb	r3, [r7, #23]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00f      	beq.n	80146b6 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8014696:	4862      	ldr	r0, [pc, #392]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 8014698:	f7fd fec2 	bl	8012420 <DbgTraceGetFileName>
 801469c:	4601      	mov	r1, r0
 801469e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80146a2:	4a60      	ldr	r2, [pc, #384]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 80146a4:	4860      	ldr	r0, [pc, #384]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 80146a6:	f001 fdef 	bl	8016288 <iprintf>
 80146aa:	7dfb      	ldrb	r3, [r7, #23]
 80146ac:	4619      	mov	r1, r3
 80146ae:	4863      	ldr	r0, [pc, #396]	@ (801483c <SVCCTL_InitCustomSvc+0x2c4>)
 80146b0:	f001 fdea 	bl	8016288 <iprintf>
 80146b4:	e00c      	b.n	80146d0 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 80146b6:	485a      	ldr	r0, [pc, #360]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 80146b8:	f7fd feb2 	bl	8012420 <DbgTraceGetFileName>
 80146bc:	4601      	mov	r1, r0
 80146be:	f44f 7305 	mov.w	r3, #532	@ 0x214
 80146c2:	4a58      	ldr	r2, [pc, #352]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 80146c4:	4858      	ldr	r0, [pc, #352]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 80146c6:	f001 fddf 	bl	8016288 <iprintf>
 80146ca:	485d      	ldr	r0, [pc, #372]	@ (8014840 <SVCCTL_InitCustomSvc+0x2c8>)
 80146cc:	f001 fddc 	bl	8016288 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 80146d0:	2319      	movs	r3, #25
 80146d2:	713b      	strb	r3, [r7, #4]
 80146d4:	23ed      	movs	r3, #237	@ 0xed
 80146d6:	717b      	strb	r3, [r7, #5]
 80146d8:	2382      	movs	r3, #130	@ 0x82
 80146da:	71bb      	strb	r3, [r7, #6]
 80146dc:	23ae      	movs	r3, #174	@ 0xae
 80146de:	71fb      	strb	r3, [r7, #7]
 80146e0:	23ed      	movs	r3, #237	@ 0xed
 80146e2:	723b      	strb	r3, [r7, #8]
 80146e4:	2321      	movs	r3, #33	@ 0x21
 80146e6:	727b      	strb	r3, [r7, #9]
 80146e8:	234c      	movs	r3, #76	@ 0x4c
 80146ea:	72bb      	strb	r3, [r7, #10]
 80146ec:	239d      	movs	r3, #157	@ 0x9d
 80146ee:	72fb      	strb	r3, [r7, #11]
 80146f0:	2341      	movs	r3, #65	@ 0x41
 80146f2:	733b      	strb	r3, [r7, #12]
 80146f4:	2345      	movs	r3, #69	@ 0x45
 80146f6:	737b      	strb	r3, [r7, #13]
 80146f8:	2322      	movs	r3, #34	@ 0x22
 80146fa:	73bb      	strb	r3, [r7, #14]
 80146fc:	238e      	movs	r3, #142	@ 0x8e
 80146fe:	73fb      	strb	r3, [r7, #15]
 8014700:	2337      	movs	r3, #55	@ 0x37
 8014702:	743b      	strb	r3, [r7, #16]
 8014704:	232a      	movs	r3, #42	@ 0x2a
 8014706:	747b      	strb	r3, [r7, #17]
 8014708:	2300      	movs	r3, #0
 801470a:	74bb      	strb	r3, [r7, #18]
 801470c:	2300      	movs	r3, #0
 801470e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014710:	4b42      	ldr	r3, [pc, #264]	@ (801481c <SVCCTL_InitCustomSvc+0x2a4>)
 8014712:	8818      	ldrh	r0, [r3, #0]
 8014714:	4b4b      	ldr	r3, [pc, #300]	@ (8014844 <SVCCTL_InitCustomSvc+0x2cc>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	4619      	mov	r1, r3
 801471a:	1d3a      	adds	r2, r7, #4
 801471c:	4b4a      	ldr	r3, [pc, #296]	@ (8014848 <SVCCTL_InitCustomSvc+0x2d0>)
 801471e:	9305      	str	r3, [sp, #20]
 8014720:	2300      	movs	r3, #0
 8014722:	9304      	str	r3, [sp, #16]
 8014724:	2310      	movs	r3, #16
 8014726:	9303      	str	r3, [sp, #12]
 8014728:	2307      	movs	r3, #7
 801472a:	9302      	str	r3, [sp, #8]
 801472c:	2300      	movs	r3, #0
 801472e:	9301      	str	r3, [sp, #4]
 8014730:	2310      	movs	r3, #16
 8014732:	9300      	str	r3, [sp, #0]
 8014734:	460b      	mov	r3, r1
 8014736:	2102      	movs	r1, #2
 8014738:	f7fc fa4c 	bl	8010bd4 <aci_gatt_add_char>
 801473c:	4603      	mov	r3, r0
 801473e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014740:	7dfb      	ldrb	r3, [r7, #23]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d00f      	beq.n	8014766 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 8014746:	4836      	ldr	r0, [pc, #216]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 8014748:	f7fd fe6a 	bl	8012420 <DbgTraceGetFileName>
 801474c:	4601      	mov	r1, r0
 801474e:	f240 232a 	movw	r3, #554	@ 0x22a
 8014752:	4a34      	ldr	r2, [pc, #208]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 8014754:	4834      	ldr	r0, [pc, #208]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 8014756:	f001 fd97 	bl	8016288 <iprintf>
 801475a:	7dfb      	ldrb	r3, [r7, #23]
 801475c:	4619      	mov	r1, r3
 801475e:	483b      	ldr	r0, [pc, #236]	@ (801484c <SVCCTL_InitCustomSvc+0x2d4>)
 8014760:	f001 fd92 	bl	8016288 <iprintf>
 8014764:	e00c      	b.n	8014780 <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 8014766:	482e      	ldr	r0, [pc, #184]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 8014768:	f7fd fe5a 	bl	8012420 <DbgTraceGetFileName>
 801476c:	4601      	mov	r1, r0
 801476e:	f240 232e 	movw	r3, #558	@ 0x22e
 8014772:	4a2c      	ldr	r2, [pc, #176]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 8014774:	482c      	ldr	r0, [pc, #176]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 8014776:	f001 fd87 	bl	8016288 <iprintf>
 801477a:	4835      	ldr	r0, [pc, #212]	@ (8014850 <SVCCTL_InitCustomSvc+0x2d8>)
 801477c:	f001 fd84 	bl	8016288 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8014780:	2319      	movs	r3, #25
 8014782:	713b      	strb	r3, [r7, #4]
 8014784:	23ed      	movs	r3, #237	@ 0xed
 8014786:	717b      	strb	r3, [r7, #5]
 8014788:	2382      	movs	r3, #130	@ 0x82
 801478a:	71bb      	strb	r3, [r7, #6]
 801478c:	23ae      	movs	r3, #174	@ 0xae
 801478e:	71fb      	strb	r3, [r7, #7]
 8014790:	23ed      	movs	r3, #237	@ 0xed
 8014792:	723b      	strb	r3, [r7, #8]
 8014794:	2321      	movs	r3, #33	@ 0x21
 8014796:	727b      	strb	r3, [r7, #9]
 8014798:	234c      	movs	r3, #76	@ 0x4c
 801479a:	72bb      	strb	r3, [r7, #10]
 801479c:	239d      	movs	r3, #157	@ 0x9d
 801479e:	72fb      	strb	r3, [r7, #11]
 80147a0:	2341      	movs	r3, #65	@ 0x41
 80147a2:	733b      	strb	r3, [r7, #12]
 80147a4:	2345      	movs	r3, #69	@ 0x45
 80147a6:	737b      	strb	r3, [r7, #13]
 80147a8:	2322      	movs	r3, #34	@ 0x22
 80147aa:	73bb      	strb	r3, [r7, #14]
 80147ac:	238e      	movs	r3, #142	@ 0x8e
 80147ae:	73fb      	strb	r3, [r7, #15]
 80147b0:	2338      	movs	r3, #56	@ 0x38
 80147b2:	743b      	strb	r3, [r7, #16]
 80147b4:	232a      	movs	r3, #42	@ 0x2a
 80147b6:	747b      	strb	r3, [r7, #17]
 80147b8:	2300      	movs	r3, #0
 80147ba:	74bb      	strb	r3, [r7, #18]
 80147bc:	2300      	movs	r3, #0
 80147be:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80147c0:	4b16      	ldr	r3, [pc, #88]	@ (801481c <SVCCTL_InitCustomSvc+0x2a4>)
 80147c2:	8818      	ldrh	r0, [r3, #0]
 80147c4:	4b23      	ldr	r3, [pc, #140]	@ (8014854 <SVCCTL_InitCustomSvc+0x2dc>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	4619      	mov	r1, r3
 80147ca:	1d3a      	adds	r2, r7, #4
 80147cc:	4b22      	ldr	r3, [pc, #136]	@ (8014858 <SVCCTL_InitCustomSvc+0x2e0>)
 80147ce:	9305      	str	r3, [sp, #20]
 80147d0:	2300      	movs	r3, #0
 80147d2:	9304      	str	r3, [sp, #16]
 80147d4:	2310      	movs	r3, #16
 80147d6:	9303      	str	r3, [sp, #12]
 80147d8:	2301      	movs	r3, #1
 80147da:	9302      	str	r3, [sp, #8]
 80147dc:	2300      	movs	r3, #0
 80147de:	9301      	str	r3, [sp, #4]
 80147e0:	2308      	movs	r3, #8
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	460b      	mov	r3, r1
 80147e6:	2102      	movs	r1, #2
 80147e8:	f7fc f9f4 	bl	8010bd4 <aci_gatt_add_char>
 80147ec:	4603      	mov	r3, r0
 80147ee:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80147f0:	7dfb      	ldrb	r3, [r7, #23]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d034      	beq.n	8014860 <SVCCTL_InitCustomSvc+0x2e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 80147f6:	480a      	ldr	r0, [pc, #40]	@ (8014820 <SVCCTL_InitCustomSvc+0x2a8>)
 80147f8:	f7fd fe12 	bl	8012420 <DbgTraceGetFileName>
 80147fc:	4601      	mov	r1, r0
 80147fe:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8014802:	4a08      	ldr	r2, [pc, #32]	@ (8014824 <SVCCTL_InitCustomSvc+0x2ac>)
 8014804:	4808      	ldr	r0, [pc, #32]	@ (8014828 <SVCCTL_InitCustomSvc+0x2b0>)
 8014806:	f001 fd3f 	bl	8016288 <iprintf>
 801480a:	7dfb      	ldrb	r3, [r7, #23]
 801480c:	4619      	mov	r1, r3
 801480e:	4813      	ldr	r0, [pc, #76]	@ (801485c <SVCCTL_InitCustomSvc+0x2e4>)
 8014810:	f001 fd3a 	bl	8016288 <iprintf>
 8014814:	e031      	b.n	801487a <SVCCTL_InitCustomSvc+0x302>
 8014816:	bf00      	nop
 8014818:	080141f1 	.word	0x080141f1
 801481c:	200010a4 	.word	0x200010a4
 8014820:	080188e8 	.word	0x080188e8
 8014824:	080191ac 	.word	0x080191ac
 8014828:	08018908 	.word	0x08018908
 801482c:	0801891c 	.word	0x0801891c
 8014830:	08018964 	.word	0x08018964
 8014834:	200000b7 	.word	0x200000b7
 8014838:	200010a6 	.word	0x200010a6
 801483c:	08018998 	.word	0x08018998
 8014840:	080189e0 	.word	0x080189e0
 8014844:	200000b8 	.word	0x200000b8
 8014848:	200010a8 	.word	0x200010a8
 801484c:	08018a14 	.word	0x08018a14
 8014850:	08018a58 	.word	0x08018a58
 8014854:	200000b9 	.word	0x200000b9
 8014858:	200010aa 	.word	0x200010aa
 801485c:	08018a8c 	.word	0x08018a8c
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8014860:	4860      	ldr	r0, [pc, #384]	@ (80149e4 <SVCCTL_InitCustomSvc+0x46c>)
 8014862:	f7fd fddd 	bl	8012420 <DbgTraceGetFileName>
 8014866:	4601      	mov	r1, r0
 8014868:	f44f 7312 	mov.w	r3, #584	@ 0x248
 801486c:	4a5e      	ldr	r2, [pc, #376]	@ (80149e8 <SVCCTL_InitCustomSvc+0x470>)
 801486e:	485f      	ldr	r0, [pc, #380]	@ (80149ec <SVCCTL_InitCustomSvc+0x474>)
 8014870:	f001 fd0a 	bl	8016288 <iprintf>
 8014874:	485e      	ldr	r0, [pc, #376]	@ (80149f0 <SVCCTL_InitCustomSvc+0x478>)
 8014876:	f001 fd07 	bl	8016288 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 801487a:	2319      	movs	r3, #25
 801487c:	713b      	strb	r3, [r7, #4]
 801487e:	23ed      	movs	r3, #237	@ 0xed
 8014880:	717b      	strb	r3, [r7, #5]
 8014882:	2382      	movs	r3, #130	@ 0x82
 8014884:	71bb      	strb	r3, [r7, #6]
 8014886:	23ae      	movs	r3, #174	@ 0xae
 8014888:	71fb      	strb	r3, [r7, #7]
 801488a:	23ed      	movs	r3, #237	@ 0xed
 801488c:	723b      	strb	r3, [r7, #8]
 801488e:	2321      	movs	r3, #33	@ 0x21
 8014890:	727b      	strb	r3, [r7, #9]
 8014892:	234c      	movs	r3, #76	@ 0x4c
 8014894:	72bb      	strb	r3, [r7, #10]
 8014896:	239d      	movs	r3, #157	@ 0x9d
 8014898:	72fb      	strb	r3, [r7, #11]
 801489a:	2341      	movs	r3, #65	@ 0x41
 801489c:	733b      	strb	r3, [r7, #12]
 801489e:	2345      	movs	r3, #69	@ 0x45
 80148a0:	737b      	strb	r3, [r7, #13]
 80148a2:	2322      	movs	r3, #34	@ 0x22
 80148a4:	73bb      	strb	r3, [r7, #14]
 80148a6:	238e      	movs	r3, #142	@ 0x8e
 80148a8:	73fb      	strb	r3, [r7, #15]
 80148aa:	2339      	movs	r3, #57	@ 0x39
 80148ac:	743b      	strb	r3, [r7, #16]
 80148ae:	232a      	movs	r3, #42	@ 0x2a
 80148b0:	747b      	strb	r3, [r7, #17]
 80148b2:	2300      	movs	r3, #0
 80148b4:	74bb      	strb	r3, [r7, #18]
 80148b6:	2300      	movs	r3, #0
 80148b8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80148ba:	4b4e      	ldr	r3, [pc, #312]	@ (80149f4 <SVCCTL_InitCustomSvc+0x47c>)
 80148bc:	8818      	ldrh	r0, [r3, #0]
 80148be:	4b4e      	ldr	r3, [pc, #312]	@ (80149f8 <SVCCTL_InitCustomSvc+0x480>)
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	4619      	mov	r1, r3
 80148c4:	1d3a      	adds	r2, r7, #4
 80148c6:	4b4d      	ldr	r3, [pc, #308]	@ (80149fc <SVCCTL_InitCustomSvc+0x484>)
 80148c8:	9305      	str	r3, [sp, #20]
 80148ca:	2300      	movs	r3, #0
 80148cc:	9304      	str	r3, [sp, #16]
 80148ce:	2310      	movs	r3, #16
 80148d0:	9303      	str	r3, [sp, #12]
 80148d2:	2307      	movs	r3, #7
 80148d4:	9302      	str	r3, [sp, #8]
 80148d6:	2300      	movs	r3, #0
 80148d8:	9301      	str	r3, [sp, #4]
 80148da:	2310      	movs	r3, #16
 80148dc:	9300      	str	r3, [sp, #0]
 80148de:	460b      	mov	r3, r1
 80148e0:	2102      	movs	r1, #2
 80148e2:	f7fc f977 	bl	8010bd4 <aci_gatt_add_char>
 80148e6:	4603      	mov	r3, r0
 80148e8:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d00f      	beq.n	8014910 <SVCCTL_InitCustomSvc+0x398>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 80148f0:	483c      	ldr	r0, [pc, #240]	@ (80149e4 <SVCCTL_InitCustomSvc+0x46c>)
 80148f2:	f7fd fd95 	bl	8012420 <DbgTraceGetFileName>
 80148f6:	4601      	mov	r1, r0
 80148f8:	f240 235e 	movw	r3, #606	@ 0x25e
 80148fc:	4a3a      	ldr	r2, [pc, #232]	@ (80149e8 <SVCCTL_InitCustomSvc+0x470>)
 80148fe:	483b      	ldr	r0, [pc, #236]	@ (80149ec <SVCCTL_InitCustomSvc+0x474>)
 8014900:	f001 fcc2 	bl	8016288 <iprintf>
 8014904:	7dfb      	ldrb	r3, [r7, #23]
 8014906:	4619      	mov	r1, r3
 8014908:	483d      	ldr	r0, [pc, #244]	@ (8014a00 <SVCCTL_InitCustomSvc+0x488>)
 801490a:	f001 fcbd 	bl	8016288 <iprintf>
 801490e:	e00c      	b.n	801492a <SVCCTL_InitCustomSvc+0x3b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 8014910:	4834      	ldr	r0, [pc, #208]	@ (80149e4 <SVCCTL_InitCustomSvc+0x46c>)
 8014912:	f7fd fd85 	bl	8012420 <DbgTraceGetFileName>
 8014916:	4601      	mov	r1, r0
 8014918:	f240 2362 	movw	r3, #610	@ 0x262
 801491c:	4a32      	ldr	r2, [pc, #200]	@ (80149e8 <SVCCTL_InitCustomSvc+0x470>)
 801491e:	4833      	ldr	r0, [pc, #204]	@ (80149ec <SVCCTL_InitCustomSvc+0x474>)
 8014920:	f001 fcb2 	bl	8016288 <iprintf>
 8014924:	4837      	ldr	r0, [pc, #220]	@ (8014a04 <SVCCTL_InitCustomSvc+0x48c>)
 8014926:	f001 fcaf 	bl	8016288 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 801492a:	2319      	movs	r3, #25
 801492c:	713b      	strb	r3, [r7, #4]
 801492e:	23ed      	movs	r3, #237	@ 0xed
 8014930:	717b      	strb	r3, [r7, #5]
 8014932:	2382      	movs	r3, #130	@ 0x82
 8014934:	71bb      	strb	r3, [r7, #6]
 8014936:	23ae      	movs	r3, #174	@ 0xae
 8014938:	71fb      	strb	r3, [r7, #7]
 801493a:	23ed      	movs	r3, #237	@ 0xed
 801493c:	723b      	strb	r3, [r7, #8]
 801493e:	2321      	movs	r3, #33	@ 0x21
 8014940:	727b      	strb	r3, [r7, #9]
 8014942:	234c      	movs	r3, #76	@ 0x4c
 8014944:	72bb      	strb	r3, [r7, #10]
 8014946:	239d      	movs	r3, #157	@ 0x9d
 8014948:	72fb      	strb	r3, [r7, #11]
 801494a:	2341      	movs	r3, #65	@ 0x41
 801494c:	733b      	strb	r3, [r7, #12]
 801494e:	2345      	movs	r3, #69	@ 0x45
 8014950:	737b      	strb	r3, [r7, #13]
 8014952:	2322      	movs	r3, #34	@ 0x22
 8014954:	73bb      	strb	r3, [r7, #14]
 8014956:	238e      	movs	r3, #142	@ 0x8e
 8014958:	73fb      	strb	r3, [r7, #15]
 801495a:	2340      	movs	r3, #64	@ 0x40
 801495c:	743b      	strb	r3, [r7, #16]
 801495e:	232a      	movs	r3, #42	@ 0x2a
 8014960:	747b      	strb	r3, [r7, #17]
 8014962:	2300      	movs	r3, #0
 8014964:	74bb      	strb	r3, [r7, #18]
 8014966:	2300      	movs	r3, #0
 8014968:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801496a:	4b22      	ldr	r3, [pc, #136]	@ (80149f4 <SVCCTL_InitCustomSvc+0x47c>)
 801496c:	8818      	ldrh	r0, [r3, #0]
 801496e:	4b26      	ldr	r3, [pc, #152]	@ (8014a08 <SVCCTL_InitCustomSvc+0x490>)
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	4619      	mov	r1, r3
 8014974:	1d3a      	adds	r2, r7, #4
 8014976:	4b25      	ldr	r3, [pc, #148]	@ (8014a0c <SVCCTL_InitCustomSvc+0x494>)
 8014978:	9305      	str	r3, [sp, #20]
 801497a:	2300      	movs	r3, #0
 801497c:	9304      	str	r3, [sp, #16]
 801497e:	2310      	movs	r3, #16
 8014980:	9303      	str	r3, [sp, #12]
 8014982:	2304      	movs	r3, #4
 8014984:	9302      	str	r3, [sp, #8]
 8014986:	2300      	movs	r3, #0
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	2302      	movs	r3, #2
 801498c:	9300      	str	r3, [sp, #0]
 801498e:	460b      	mov	r3, r1
 8014990:	2102      	movs	r1, #2
 8014992:	f7fc f91f 	bl	8010bd4 <aci_gatt_add_char>
 8014996:	4603      	mov	r3, r0
 8014998:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d00f      	beq.n	80149c0 <SVCCTL_InitCustomSvc+0x448>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 80149a0:	4810      	ldr	r0, [pc, #64]	@ (80149e4 <SVCCTL_InitCustomSvc+0x46c>)
 80149a2:	f7fd fd3d 	bl	8012420 <DbgTraceGetFileName>
 80149a6:	4601      	mov	r1, r0
 80149a8:	f44f 731e 	mov.w	r3, #632	@ 0x278
 80149ac:	4a0e      	ldr	r2, [pc, #56]	@ (80149e8 <SVCCTL_InitCustomSvc+0x470>)
 80149ae:	480f      	ldr	r0, [pc, #60]	@ (80149ec <SVCCTL_InitCustomSvc+0x474>)
 80149b0:	f001 fc6a 	bl	8016288 <iprintf>
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	4619      	mov	r1, r3
 80149b8:	4815      	ldr	r0, [pc, #84]	@ (8014a10 <SVCCTL_InitCustomSvc+0x498>)
 80149ba:	f001 fc65 	bl	8016288 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80149be:	e00d      	b.n	80149dc <SVCCTL_InitCustomSvc+0x464>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 80149c0:	4808      	ldr	r0, [pc, #32]	@ (80149e4 <SVCCTL_InitCustomSvc+0x46c>)
 80149c2:	f7fd fd2d 	bl	8012420 <DbgTraceGetFileName>
 80149c6:	4601      	mov	r1, r0
 80149c8:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 80149cc:	4a06      	ldr	r2, [pc, #24]	@ (80149e8 <SVCCTL_InitCustomSvc+0x470>)
 80149ce:	4807      	ldr	r0, [pc, #28]	@ (80149ec <SVCCTL_InitCustomSvc+0x474>)
 80149d0:	f001 fc5a 	bl	8016288 <iprintf>
 80149d4:	480f      	ldr	r0, [pc, #60]	@ (8014a14 <SVCCTL_InitCustomSvc+0x49c>)
 80149d6:	f001 fc57 	bl	8016288 <iprintf>
  return;
 80149da:	bf00      	nop
}
 80149dc:	3718      	adds	r7, #24
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	080188e8 	.word	0x080188e8
 80149e8:	080191ac 	.word	0x080191ac
 80149ec:	08018908 	.word	0x08018908
 80149f0:	08018ad0 	.word	0x08018ad0
 80149f4:	200010a4 	.word	0x200010a4
 80149f8:	200000ba 	.word	0x200000ba
 80149fc:	200010ac 	.word	0x200010ac
 8014a00:	08018b00 	.word	0x08018b00
 8014a04:	08018b48 	.word	0x08018b48
 8014a08:	200000bb 	.word	0x200000bb
 8014a0c:	200010ae 	.word	0x200010ae
 8014a10:	08018b80 	.word	0x08018b80
 8014a14:	08018bcc 	.word	0x08018bcc

08014a18 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af02      	add	r7, sp, #8
 8014a1e:	4603      	mov	r3, r0
 8014a20:	6039      	str	r1, [r7, #0]
 8014a22:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014a24:	2392      	movs	r3, #146	@ 0x92
 8014a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014a28:	79fb      	ldrb	r3, [r7, #7]
 8014a2a:	2b04      	cmp	r3, #4
 8014a2c:	f200 8115 	bhi.w	8014c5a <Custom_STM_App_Update_Char+0x242>
 8014a30:	a201      	add	r2, pc, #4	@ (adr r2, 8014a38 <Custom_STM_App_Update_Char+0x20>)
 8014a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a36:	bf00      	nop
 8014a38:	08014a4d 	.word	0x08014a4d
 8014a3c:	08014ab9 	.word	0x08014ab9
 8014a40:	08014b17 	.word	0x08014b17
 8014a44:	08014b75 	.word	0x08014b75
 8014a48:	08014bfd 	.word	0x08014bfd
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014a4c:	4b87      	ldr	r3, [pc, #540]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014a4e:	8818      	ldrh	r0, [r3, #0]
 8014a50:	4b86      	ldr	r3, [pc, #536]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014a52:	8859      	ldrh	r1, [r3, #2]
 8014a54:	4b86      	ldr	r3, [pc, #536]	@ (8014c70 <Custom_STM_App_Update_Char+0x258>)
 8014a56:	781a      	ldrb	r2, [r3, #0]
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f7fc f9c0 	bl	8010de4 <aci_gatt_update_char_value>
 8014a64:	4603      	mov	r3, r0
 8014a66:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014a68:	7bfb      	ldrb	r3, [r7, #15]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00f      	beq.n	8014a8e <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014a6e:	4881      	ldr	r0, [pc, #516]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014a70:	f7fd fcd6 	bl	8012420 <DbgTraceGetFileName>
 8014a74:	4601      	mov	r1, r0
 8014a76:	f240 23a3 	movw	r3, #675	@ 0x2a3
 8014a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014a7c:	487f      	ldr	r0, [pc, #508]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014a7e:	f001 fc03 	bl	8016288 <iprintf>
 8014a82:	7bfb      	ldrb	r3, [r7, #15]
 8014a84:	4619      	mov	r1, r3
 8014a86:	487e      	ldr	r0, [pc, #504]	@ (8014c80 <Custom_STM_App_Update_Char+0x268>)
 8014a88:	f001 fbfe 	bl	8016288 <iprintf>
 8014a8c:	e00c      	b.n	8014aa8 <Custom_STM_App_Update_Char+0x90>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014a8e:	4879      	ldr	r0, [pc, #484]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014a90:	f7fd fcc6 	bl	8012420 <DbgTraceGetFileName>
 8014a94:	4601      	mov	r1, r0
 8014a96:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8014a9a:	4a77      	ldr	r2, [pc, #476]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014a9c:	4877      	ldr	r0, [pc, #476]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014a9e:	f001 fbf3 	bl	8016288 <iprintf>
 8014aa2:	4878      	ldr	r0, [pc, #480]	@ (8014c84 <Custom_STM_App_Update_Char+0x26c>)
 8014aa4:	f001 fbf0 	bl	8016288 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 8014aa8:	7bfb      	ldrb	r3, [r7, #15]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	f040 80d7 	bne.w	8014c5e <Custom_STM_App_Update_Char+0x246>
      {
    	  tsBle.ACCEL_XferComplete = true;
 8014ab0:	4b75      	ldr	r3, [pc, #468]	@ (8014c88 <Custom_STM_App_Update_Char+0x270>)
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8014ab6:	e0d2      	b.n	8014c5e <Custom_STM_App_Update_Char+0x246>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014aba:	8818      	ldrh	r0, [r3, #0]
 8014abc:	4b6b      	ldr	r3, [pc, #428]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014abe:	8899      	ldrh	r1, [r3, #4]
 8014ac0:	4b72      	ldr	r3, [pc, #456]	@ (8014c8c <Custom_STM_App_Update_Char+0x274>)
 8014ac2:	781a      	ldrb	r2, [r3, #0]
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	2200      	movs	r2, #0
 8014acc:	f7fc f98a 	bl	8010de4 <aci_gatt_update_char_value>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014ad4:	7bfb      	ldrb	r3, [r7, #15]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d00f      	beq.n	8014afa <Custom_STM_App_Update_Char+0xe2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 8014ada:	4866      	ldr	r0, [pc, #408]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014adc:	f7fd fca0 	bl	8012420 <DbgTraceGetFileName>
 8014ae0:	4601      	mov	r1, r0
 8014ae2:	f240 23c5 	movw	r3, #709	@ 0x2c5
 8014ae6:	4a64      	ldr	r2, [pc, #400]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014ae8:	4864      	ldr	r0, [pc, #400]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014aea:	f001 fbcd 	bl	8016288 <iprintf>
 8014aee:	7bfb      	ldrb	r3, [r7, #15]
 8014af0:	4619      	mov	r1, r3
 8014af2:	4867      	ldr	r0, [pc, #412]	@ (8014c90 <Custom_STM_App_Update_Char+0x278>)
 8014af4:	f001 fbc8 	bl	8016288 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8014af8:	e0b2      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 8014afa:	485e      	ldr	r0, [pc, #376]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014afc:	f7fd fc90 	bl	8012420 <DbgTraceGetFileName>
 8014b00:	4601      	mov	r1, r0
 8014b02:	f240 23c9 	movw	r3, #713	@ 0x2c9
 8014b06:	4a5c      	ldr	r2, [pc, #368]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014b08:	485c      	ldr	r0, [pc, #368]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014b0a:	f001 fbbd 	bl	8016288 <iprintf>
 8014b0e:	4861      	ldr	r0, [pc, #388]	@ (8014c94 <Custom_STM_App_Update_Char+0x27c>)
 8014b10:	f001 fbba 	bl	8016288 <iprintf>
      break;
 8014b14:	e0a4      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014b16:	4b55      	ldr	r3, [pc, #340]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014b18:	8818      	ldrh	r0, [r3, #0]
 8014b1a:	4b54      	ldr	r3, [pc, #336]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014b1c:	88d9      	ldrh	r1, [r3, #6]
 8014b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8014c98 <Custom_STM_App_Update_Char+0x280>)
 8014b20:	781a      	ldrb	r2, [r3, #0]
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	9300      	str	r3, [sp, #0]
 8014b26:	4613      	mov	r3, r2
 8014b28:	2200      	movs	r2, #0
 8014b2a:	f7fc f95b 	bl	8010de4 <aci_gatt_update_char_value>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014b32:	7bfb      	ldrb	r3, [r7, #15]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00f      	beq.n	8014b58 <Custom_STM_App_Update_Char+0x140>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014b38:	484e      	ldr	r0, [pc, #312]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014b3a:	f7fd fc71 	bl	8012420 <DbgTraceGetFileName>
 8014b3e:	4601      	mov	r1, r0
 8014b40:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8014b44:	4a4c      	ldr	r2, [pc, #304]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014b46:	484d      	ldr	r0, [pc, #308]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014b48:	f001 fb9e 	bl	8016288 <iprintf>
 8014b4c:	7bfb      	ldrb	r3, [r7, #15]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	4852      	ldr	r0, [pc, #328]	@ (8014c9c <Custom_STM_App_Update_Char+0x284>)
 8014b52:	f001 fb99 	bl	8016288 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014b56:	e083      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014b58:	4846      	ldr	r0, [pc, #280]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014b5a:	f7fd fc61 	bl	8012420 <DbgTraceGetFileName>
 8014b5e:	4601      	mov	r1, r0
 8014b60:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8014b64:	4a44      	ldr	r2, [pc, #272]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014b66:	4845      	ldr	r0, [pc, #276]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014b68:	f001 fb8e 	bl	8016288 <iprintf>
 8014b6c:	484c      	ldr	r0, [pc, #304]	@ (8014ca0 <Custom_STM_App_Update_Char+0x288>)
 8014b6e:	f001 fb8b 	bl	8016288 <iprintf>
      break;
 8014b72:	e075      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014b74:	4b3d      	ldr	r3, [pc, #244]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014b76:	8818      	ldrh	r0, [r3, #0]
 8014b78:	4b3c      	ldr	r3, [pc, #240]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014b7a:	8919      	ldrh	r1, [r3, #8]
 8014b7c:	4b49      	ldr	r3, [pc, #292]	@ (8014ca4 <Custom_STM_App_Update_Char+0x28c>)
 8014b7e:	781a      	ldrb	r2, [r3, #0]
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	4613      	mov	r3, r2
 8014b86:	2200      	movs	r2, #0
 8014b88:	f7fc f92c 	bl	8010de4 <aci_gatt_update_char_value>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014b90:	7bfb      	ldrb	r3, [r7, #15]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d00f      	beq.n	8014bb6 <Custom_STM_App_Update_Char+0x19e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 8014b96:	4837      	ldr	r0, [pc, #220]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014b98:	f7fd fc42 	bl	8012420 <DbgTraceGetFileName>
 8014b9c:	4601      	mov	r1, r0
 8014b9e:	f240 23eb 	movw	r3, #747	@ 0x2eb
 8014ba2:	4a35      	ldr	r2, [pc, #212]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014ba4:	4835      	ldr	r0, [pc, #212]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014ba6:	f001 fb6f 	bl	8016288 <iprintf>
 8014baa:	7bfb      	ldrb	r3, [r7, #15]
 8014bac:	4619      	mov	r1, r3
 8014bae:	483e      	ldr	r0, [pc, #248]	@ (8014ca8 <Custom_STM_App_Update_Char+0x290>)
 8014bb0:	f001 fb6a 	bl	8016288 <iprintf>
 8014bb4:	e00c      	b.n	8014bd0 <Custom_STM_App_Update_Char+0x1b8>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 8014bb6:	482f      	ldr	r0, [pc, #188]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014bb8:	f7fd fc32 	bl	8012420 <DbgTraceGetFileName>
 8014bbc:	4601      	mov	r1, r0
 8014bbe:	f240 23ef 	movw	r3, #751	@ 0x2ef
 8014bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014bc4:	482d      	ldr	r0, [pc, #180]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014bc6:	f001 fb5f 	bl	8016288 <iprintf>
 8014bca:	4838      	ldr	r0, [pc, #224]	@ (8014cac <Custom_STM_App_Update_Char+0x294>)
 8014bcc:	f001 fb5c 	bl	8016288 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 8014bd0:	7bfb      	ldrb	r3, [r7, #15]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d103      	bne.n	8014bde <Custom_STM_App_Update_Char+0x1c6>
      {
    	  tsBle.SCG_XferComplete = true;
 8014bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8014c88 <Custom_STM_App_Update_Char+0x270>)
 8014bd8:	2201      	movs	r2, #1
 8014bda:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 8014bdc:	e040      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014bde:	4b23      	ldr	r3, [pc, #140]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014be0:	8818      	ldrh	r0, [r3, #0]
 8014be2:	4b22      	ldr	r3, [pc, #136]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014be4:	8919      	ldrh	r1, [r3, #8]
 8014be6:	4b2f      	ldr	r3, [pc, #188]	@ (8014ca4 <Custom_STM_App_Update_Char+0x28c>)
 8014be8:	781a      	ldrb	r2, [r3, #0]
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	4613      	mov	r3, r2
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f7fc f8f7 	bl	8010de4 <aci_gatt_update_char_value>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8014bfa:	e031      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014bfe:	8818      	ldrh	r0, [r3, #0]
 8014c00:	4b1a      	ldr	r3, [pc, #104]	@ (8014c6c <Custom_STM_App_Update_Char+0x254>)
 8014c02:	8959      	ldrh	r1, [r3, #10]
 8014c04:	4b2a      	ldr	r3, [pc, #168]	@ (8014cb0 <Custom_STM_App_Update_Char+0x298>)
 8014c06:	781a      	ldrb	r2, [r3, #0]
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	9300      	str	r3, [sp, #0]
 8014c0c:	4613      	mov	r3, r2
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f7fc f8e8 	bl	8010de4 <aci_gatt_update_char_value>
 8014c14:	4603      	mov	r3, r0
 8014c16:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014c18:	7bfb      	ldrb	r3, [r7, #15]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00f      	beq.n	8014c3e <Custom_STM_App_Update_Char+0x226>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014c1e:	4815      	ldr	r0, [pc, #84]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014c20:	f7fd fbfe 	bl	8012420 <DbgTraceGetFileName>
 8014c24:	4601      	mov	r1, r0
 8014c26:	f240 3317 	movw	r3, #791	@ 0x317
 8014c2a:	4a13      	ldr	r2, [pc, #76]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014c2c:	4813      	ldr	r0, [pc, #76]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014c2e:	f001 fb2b 	bl	8016288 <iprintf>
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
 8014c34:	4619      	mov	r1, r3
 8014c36:	481f      	ldr	r0, [pc, #124]	@ (8014cb4 <Custom_STM_App_Update_Char+0x29c>)
 8014c38:	f001 fb26 	bl	8016288 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014c3c:	e010      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014c3e:	480d      	ldr	r0, [pc, #52]	@ (8014c74 <Custom_STM_App_Update_Char+0x25c>)
 8014c40:	f7fd fbee 	bl	8012420 <DbgTraceGetFileName>
 8014c44:	4601      	mov	r1, r0
 8014c46:	f240 331b 	movw	r3, #795	@ 0x31b
 8014c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8014c78 <Custom_STM_App_Update_Char+0x260>)
 8014c4c:	480b      	ldr	r0, [pc, #44]	@ (8014c7c <Custom_STM_App_Update_Char+0x264>)
 8014c4e:	f001 fb1b 	bl	8016288 <iprintf>
 8014c52:	4819      	ldr	r0, [pc, #100]	@ (8014cb8 <Custom_STM_App_Update_Char+0x2a0>)
 8014c54:	f001 fb18 	bl	8016288 <iprintf>
      break;
 8014c58:	e002      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>

    default:
      break;
 8014c5a:	bf00      	nop
 8014c5c:	e000      	b.n	8014c60 <Custom_STM_App_Update_Char+0x248>
      break;
 8014c5e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	200010a4 	.word	0x200010a4
 8014c70:	200000b7 	.word	0x200000b7
 8014c74:	080188e8 	.word	0x080188e8
 8014c78:	080191c4 	.word	0x080191c4
 8014c7c:	08018908 	.word	0x08018908
 8014c80:	08018c04 	.word	0x08018c04
 8014c84:	08018c4c 	.word	0x08018c4c
 8014c88:	20001004 	.word	0x20001004
 8014c8c:	200000b8 	.word	0x200000b8
 8014c90:	08018c84 	.word	0x08018c84
 8014c94:	08018ccc 	.word	0x08018ccc
 8014c98:	200000b9 	.word	0x200000b9
 8014c9c:	08018d04 	.word	0x08018d04
 8014ca0:	08018d48 	.word	0x08018d48
 8014ca4:	200000ba 	.word	0x200000ba
 8014ca8:	08018d7c 	.word	0x08018d7c
 8014cac:	08018dc8 	.word	0x08018dc8
 8014cb0:	200000bb 	.word	0x200000bb
 8014cb4:	08018e04 	.word	0x08018e04
 8014cb8:	08018e50 	.word	0x08018e50

08014cbc <LL_PWR_EnableBootC2>:
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014cc0:	4b05      	ldr	r3, [pc, #20]	@ (8014cd8 <LL_PWR_EnableBootC2+0x1c>)
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	4a04      	ldr	r2, [pc, #16]	@ (8014cd8 <LL_PWR_EnableBootC2+0x1c>)
 8014cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014cca:	60d3      	str	r3, [r2, #12]
}
 8014ccc:	bf00      	nop
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd4:	4770      	bx	lr
 8014cd6:	bf00      	nop
 8014cd8:	58000400 	.word	0x58000400

08014cdc <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014ce4:	4b06      	ldr	r3, [pc, #24]	@ (8014d00 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014ce6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8014cea:	4905      	ldr	r1, [pc, #20]	@ (8014d00 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4313      	orrs	r3, r2
 8014cf0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8014cf4:	bf00      	nop
 8014cf6:	370c      	adds	r7, #12
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr
 8014d00:	58000800 	.word	0x58000800

08014d04 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014d0c:	4b05      	ldr	r3, [pc, #20]	@ (8014d24 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014d0e:	6a1a      	ldr	r2, [r3, #32]
 8014d10:	4904      	ldr	r1, [pc, #16]	@ (8014d24 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4313      	orrs	r3, r2
 8014d16:	620b      	str	r3, [r1, #32]
}
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr
 8014d24:	58000800 	.word	0x58000800

08014d28 <LL_AHB3_GRP1_EnableClock>:
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b085      	sub	sp, #20
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	4013      	ands	r3, r2
 8014d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
}
 8014d4e:	bf00      	nop
 8014d50:	3714      	adds	r7, #20
 8014d52:	46bd      	mov	sp, r7
 8014d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d58:	4770      	bx	lr

08014d5a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014d5a:	b480      	push	{r7}
 8014d5c:	b085      	sub	sp, #20
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d66:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4313      	orrs	r3, r2
 8014d72:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d7a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	4013      	ands	r3, r2
 8014d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014d84:	68fb      	ldr	r3, [r7, #12]
}
 8014d86:	bf00      	nop
 8014d88:	3714      	adds	r7, #20
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <LL_C1_IPCC_EnableIT_TXF>:
{
 8014d92:	b480      	push	{r7}
 8014d94:	b083      	sub	sp, #12
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	601a      	str	r2, [r3, #0]
}
 8014da6:	bf00      	nop
 8014da8:	370c      	adds	r7, #12
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <LL_C1_IPCC_EnableIT_RXO>:
{
 8014db2:	b480      	push	{r7}
 8014db4:	b083      	sub	sp, #12
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	f043 0201 	orr.w	r2, r3, #1
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	601a      	str	r2, [r3, #0]
}
 8014dc6:	bf00      	nop
 8014dc8:	370c      	adds	r7, #12
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd0:	4770      	bx	lr

08014dd2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014dd2:	b480      	push	{r7}
 8014dd4:	b083      	sub	sp, #12
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
 8014dda:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685a      	ldr	r2, [r3, #4]
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	041b      	lsls	r3, r3, #16
 8014de4:	43db      	mvns	r3, r3
 8014de6:	401a      	ands	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	605a      	str	r2, [r3, #4]
}
 8014dec:	bf00      	nop
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr

08014df8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b083      	sub	sp, #12
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685a      	ldr	r2, [r3, #4]
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	041b      	lsls	r3, r3, #16
 8014e0a:	431a      	orrs	r2, r3
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	605a      	str	r2, [r3, #4]
}
 8014e10:	bf00      	nop
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr

08014e1c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b083      	sub	sp, #12
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
 8014e24:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685a      	ldr	r2, [r3, #4]
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	43db      	mvns	r3, r3
 8014e2e:	401a      	ands	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	605a      	str	r2, [r3, #4]
}
 8014e34:	bf00      	nop
 8014e36:	370c      	adds	r7, #12
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3e:	4770      	bx	lr

08014e40 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	609a      	str	r2, [r3, #8]
}
 8014e50:	bf00      	nop
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr

08014e5c <LL_C1_IPCC_SetFlag_CHx>:
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b083      	sub	sp, #12
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	041a      	lsls	r2, r3, #16
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	609a      	str	r2, [r3, #8]
}
 8014e6e:	bf00      	nop
 8014e70:	370c      	adds	r7, #12
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	b083      	sub	sp, #12
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	68da      	ldr	r2, [r3, #12]
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	683a      	ldr	r2, [r7, #0]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d101      	bne.n	8014e96 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014e92:	2301      	movs	r3, #1
 8014e94:	e000      	b.n	8014e98 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	370c      	adds	r7, #12
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr

08014ea4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	69da      	ldr	r2, [r3, #28]
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	4013      	ands	r3, r2
 8014eb6:	683a      	ldr	r2, [r7, #0]
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d101      	bne.n	8014ec0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e000      	b.n	8014ec2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	370c      	adds	r7, #12
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
	...

08014ed0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014ed4:	2102      	movs	r1, #2
 8014ed6:	4818      	ldr	r0, [pc, #96]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014ed8:	f7ff ffe4 	bl	8014ea4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014edc:	4603      	mov	r3, r0
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d008      	beq.n	8014ef4 <HW_IPCC_Rx_Handler+0x24>
 8014ee2:	4b15      	ldr	r3, [pc, #84]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	f003 0302 	and.w	r3, r3, #2
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d102      	bne.n	8014ef4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014eee:	f000 f8d5 	bl	801509c <HW_IPCC_SYS_EvtHandler>
 8014ef2:	e01e      	b.n	8014f32 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014ef4:	2101      	movs	r1, #1
 8014ef6:	4810      	ldr	r0, [pc, #64]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014ef8:	f7ff ffd4 	bl	8014ea4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014efc:	4603      	mov	r3, r0
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d008      	beq.n	8014f14 <HW_IPCC_Rx_Handler+0x44>
 8014f02:	4b0d      	ldr	r3, [pc, #52]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d102      	bne.n	8014f14 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8014f0e:	f000 f889 	bl	8015024 <HW_IPCC_BLE_EvtHandler>
 8014f12:	e00e      	b.n	8014f32 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014f14:	2108      	movs	r1, #8
 8014f16:	4808      	ldr	r0, [pc, #32]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014f18:	f7ff ffc4 	bl	8014ea4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d008      	beq.n	8014f34 <HW_IPCC_Rx_Handler+0x64>
 8014f22:	4b05      	ldr	r3, [pc, #20]	@ (8014f38 <HW_IPCC_Rx_Handler+0x68>)
 8014f24:	685b      	ldr	r3, [r3, #4]
 8014f26:	f003 0308 	and.w	r3, r3, #8
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d102      	bne.n	8014f34 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014f2e:	f000 f901 	bl	8015134 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014f32:	bf00      	nop
 8014f34:	bf00      	nop
}
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	58000c00 	.word	0x58000c00

08014f3c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014f40:	2102      	movs	r1, #2
 8014f42:	4818      	ldr	r0, [pc, #96]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f44:	f7ff ff99 	bl	8014e7a <LL_C1_IPCC_IsActiveFlag_CHx>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d108      	bne.n	8014f60 <HW_IPCC_Tx_Handler+0x24>
 8014f4e:	4b15      	ldr	r3, [pc, #84]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d102      	bne.n	8014f60 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014f5a:	f000 f893 	bl	8015084 <HW_IPCC_SYS_CmdEvtHandler>
 8014f5e:	e01e      	b.n	8014f9e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014f60:	2108      	movs	r1, #8
 8014f62:	4810      	ldr	r0, [pc, #64]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f64:	f7ff ff89 	bl	8014e7a <LL_C1_IPCC_IsActiveFlag_CHx>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d108      	bne.n	8014f80 <HW_IPCC_Tx_Handler+0x44>
 8014f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d102      	bne.n	8014f80 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014f7a:	f000 f8bd 	bl	80150f8 <HW_IPCC_MM_FreeBufHandler>
 8014f7e:	e00e      	b.n	8014f9e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014f80:	2120      	movs	r1, #32
 8014f82:	4808      	ldr	r0, [pc, #32]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f84:	f7ff ff79 	bl	8014e7a <LL_C1_IPCC_IsActiveFlag_CHx>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d108      	bne.n	8014fa0 <HW_IPCC_Tx_Handler+0x64>
 8014f8e:	4b05      	ldr	r3, [pc, #20]	@ (8014fa4 <HW_IPCC_Tx_Handler+0x68>)
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d102      	bne.n	8014fa0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014f9a:	f000 f84f 	bl	801503c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014f9e:	bf00      	nop
 8014fa0:	bf00      	nop
}
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	58000c00 	.word	0x58000c00

08014fa8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014fac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014fb0:	f7ff fed3 	bl	8014d5a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014fb4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014fb8:	f7ff fea4 	bl	8014d04 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014fbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014fc0:	f7ff fe8c 	bl	8014cdc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014fc4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014fc6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014fc8:	f7ff fe78 	bl	8014cbc <LL_PWR_EnableBootC2>

  return;
 8014fcc:	bf00      	nop
}
 8014fce:	bd80      	pop	{r7, pc}

08014fd0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014fd4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014fd8:	f7ff fea6 	bl	8014d28 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014fdc:	4806      	ldr	r0, [pc, #24]	@ (8014ff8 <HW_IPCC_Init+0x28>)
 8014fde:	f7ff fee8 	bl	8014db2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014fe2:	4805      	ldr	r0, [pc, #20]	@ (8014ff8 <HW_IPCC_Init+0x28>)
 8014fe4:	f7ff fed5 	bl	8014d92 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014fe8:	202c      	movs	r0, #44	@ 0x2c
 8014fea:	f7ef fe9e 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014fee:	202d      	movs	r0, #45	@ 0x2d
 8014ff0:	f7ef fe9b 	bl	8004d2a <HAL_NVIC_EnableIRQ>

  return;
 8014ff4:	bf00      	nop
}
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	58000c00 	.word	0x58000c00

08014ffc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015000:	2101      	movs	r1, #1
 8015002:	4802      	ldr	r0, [pc, #8]	@ (801500c <HW_IPCC_BLE_Init+0x10>)
 8015004:	f7ff ff0a 	bl	8014e1c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015008:	bf00      	nop
}
 801500a:	bd80      	pop	{r7, pc}
 801500c:	58000c00 	.word	0x58000c00

08015010 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8015014:	2101      	movs	r1, #1
 8015016:	4802      	ldr	r0, [pc, #8]	@ (8015020 <HW_IPCC_BLE_SendCmd+0x10>)
 8015018:	f7ff ff20 	bl	8014e5c <LL_C1_IPCC_SetFlag_CHx>

  return;
 801501c:	bf00      	nop
}
 801501e:	bd80      	pop	{r7, pc}
 8015020:	58000c00 	.word	0x58000c00

08015024 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015028:	f7fd f842 	bl	80120b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801502c:	2101      	movs	r1, #1
 801502e:	4802      	ldr	r0, [pc, #8]	@ (8015038 <HW_IPCC_BLE_EvtHandler+0x14>)
 8015030:	f7ff ff06 	bl	8014e40 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015034:	bf00      	nop
}
 8015036:	bd80      	pop	{r7, pc}
 8015038:	58000c00 	.word	0x58000c00

0801503c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015040:	2120      	movs	r1, #32
 8015042:	4803      	ldr	r0, [pc, #12]	@ (8015050 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015044:	f7ff fed8 	bl	8014df8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015048:	f7fd f862 	bl	8012110 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801504c:	bf00      	nop
}
 801504e:	bd80      	pop	{r7, pc}
 8015050:	58000c00 	.word	0x58000c00

08015054 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015054:	b580      	push	{r7, lr}
 8015056:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015058:	2102      	movs	r1, #2
 801505a:	4802      	ldr	r0, [pc, #8]	@ (8015064 <HW_IPCC_SYS_Init+0x10>)
 801505c:	f7ff fede 	bl	8014e1c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015060:	bf00      	nop
}
 8015062:	bd80      	pop	{r7, pc}
 8015064:	58000c00 	.word	0x58000c00

08015068 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801506c:	2102      	movs	r1, #2
 801506e:	4804      	ldr	r0, [pc, #16]	@ (8015080 <HW_IPCC_SYS_SendCmd+0x18>)
 8015070:	f7ff fef4 	bl	8014e5c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015074:	2102      	movs	r1, #2
 8015076:	4802      	ldr	r0, [pc, #8]	@ (8015080 <HW_IPCC_SYS_SendCmd+0x18>)
 8015078:	f7ff feab 	bl	8014dd2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801507c:	bf00      	nop
}
 801507e:	bd80      	pop	{r7, pc}
 8015080:	58000c00 	.word	0x58000c00

08015084 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015084:	b580      	push	{r7, lr}
 8015086:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015088:	2102      	movs	r1, #2
 801508a:	4803      	ldr	r0, [pc, #12]	@ (8015098 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 801508c:	f7ff feb4 	bl	8014df8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015090:	f7fd f88e 	bl	80121b0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015094:	bf00      	nop
}
 8015096:	bd80      	pop	{r7, pc}
 8015098:	58000c00 	.word	0x58000c00

0801509c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801509c:	b580      	push	{r7, lr}
 801509e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80150a0:	f7fd f89c 	bl	80121dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80150a4:	2102      	movs	r1, #2
 80150a6:	4802      	ldr	r0, [pc, #8]	@ (80150b0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80150a8:	f7ff feca 	bl	8014e40 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80150ac:	bf00      	nop
}
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	58000c00 	.word	0x58000c00

080150b4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80150bc:	2108      	movs	r1, #8
 80150be:	480c      	ldr	r0, [pc, #48]	@ (80150f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80150c0:	f7ff fedb 	bl	8014e7a <LL_C1_IPCC_IsActiveFlag_CHx>
 80150c4:	4603      	mov	r3, r0
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d007      	beq.n	80150da <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80150ca:	4a0a      	ldr	r2, [pc, #40]	@ (80150f4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80150d0:	2108      	movs	r1, #8
 80150d2:	4807      	ldr	r0, [pc, #28]	@ (80150f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80150d4:	f7ff fe7d 	bl	8014dd2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80150d8:	e006      	b.n	80150e8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80150de:	2108      	movs	r1, #8
 80150e0:	4803      	ldr	r0, [pc, #12]	@ (80150f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80150e2:	f7ff febb 	bl	8014e5c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80150e6:	bf00      	nop
}
 80150e8:	3708      	adds	r7, #8
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	58000c00 	.word	0x58000c00
 80150f4:	200010b0 	.word	0x200010b0

080150f8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80150fc:	2108      	movs	r1, #8
 80150fe:	4806      	ldr	r0, [pc, #24]	@ (8015118 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015100:	f7ff fe7a 	bl	8014df8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015104:	4b05      	ldr	r3, [pc, #20]	@ (801511c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801510a:	2108      	movs	r1, #8
 801510c:	4802      	ldr	r0, [pc, #8]	@ (8015118 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801510e:	f7ff fea5 	bl	8014e5c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015112:	bf00      	nop
}
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	58000c00 	.word	0x58000c00
 801511c:	200010b0 	.word	0x200010b0

08015120 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015124:	2108      	movs	r1, #8
 8015126:	4802      	ldr	r0, [pc, #8]	@ (8015130 <HW_IPCC_TRACES_Init+0x10>)
 8015128:	f7ff fe78 	bl	8014e1c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801512c:	bf00      	nop
}
 801512e:	bd80      	pop	{r7, pc}
 8015130:	58000c00 	.word	0x58000c00

08015134 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015138:	f7fd f8f8 	bl	801232c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801513c:	2108      	movs	r1, #8
 801513e:	4802      	ldr	r0, [pc, #8]	@ (8015148 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015140:	f7ff fe7e 	bl	8014e40 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015144:	bf00      	nop
}
 8015146:	bd80      	pop	{r7, pc}
 8015148:	58000c00 	.word	0x58000c00

0801514c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015150:	2200      	movs	r2, #0
 8015152:	4912      	ldr	r1, [pc, #72]	@ (801519c <MX_USB_Device_Init+0x50>)
 8015154:	4812      	ldr	r0, [pc, #72]	@ (80151a0 <MX_USB_Device_Init+0x54>)
 8015156:	f7f9 fd6d 	bl	800ec34 <USBD_Init>
 801515a:	4603      	mov	r3, r0
 801515c:	2b00      	cmp	r3, #0
 801515e:	d001      	beq.n	8015164 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015160:	f7ef f864 	bl	800422c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015164:	490f      	ldr	r1, [pc, #60]	@ (80151a4 <MX_USB_Device_Init+0x58>)
 8015166:	480e      	ldr	r0, [pc, #56]	@ (80151a0 <MX_USB_Device_Init+0x54>)
 8015168:	f7f9 fd94 	bl	800ec94 <USBD_RegisterClass>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015172:	f7ef f85b 	bl	800422c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015176:	490c      	ldr	r1, [pc, #48]	@ (80151a8 <MX_USB_Device_Init+0x5c>)
 8015178:	4809      	ldr	r0, [pc, #36]	@ (80151a0 <MX_USB_Device_Init+0x54>)
 801517a:	f7f9 fc8b 	bl	800ea94 <USBD_CDC_RegisterInterface>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d001      	beq.n	8015188 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015184:	f7ef f852 	bl	800422c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015188:	4805      	ldr	r0, [pc, #20]	@ (80151a0 <MX_USB_Device_Init+0x54>)
 801518a:	f7f9 fdb9 	bl	800ed00 <USBD_Start>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d001      	beq.n	8015198 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015194:	f7ef f84a 	bl	800422c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015198:	bf00      	nop
 801519a:	bd80      	pop	{r7, pc}
 801519c:	200000d0 	.word	0x200000d0
 80151a0:	200010b4 	.word	0x200010b4
 80151a4:	20000024 	.word	0x20000024
 80151a8:	200000bc 	.word	0x200000bc

080151ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80151b0:	2200      	movs	r2, #0
 80151b2:	4905      	ldr	r1, [pc, #20]	@ (80151c8 <CDC_Init_FS+0x1c>)
 80151b4:	4805      	ldr	r0, [pc, #20]	@ (80151cc <CDC_Init_FS+0x20>)
 80151b6:	f7f9 fc87 	bl	800eac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80151ba:	4905      	ldr	r1, [pc, #20]	@ (80151d0 <CDC_Init_FS+0x24>)
 80151bc:	4803      	ldr	r0, [pc, #12]	@ (80151cc <CDC_Init_FS+0x20>)
 80151be:	f7f9 fca5 	bl	800eb0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80151c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	20001b90 	.word	0x20001b90
 80151cc:	200010b4 	.word	0x200010b4
 80151d0:	20001390 	.word	0x20001390

080151d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80151d4:	b480      	push	{r7}
 80151d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80151d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80151da:	4618      	mov	r0, r3
 80151dc:	46bd      	mov	sp, r7
 80151de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e2:	4770      	bx	lr

080151e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	4603      	mov	r3, r0
 80151ec:	6039      	str	r1, [r7, #0]
 80151ee:	71fb      	strb	r3, [r7, #7]
 80151f0:	4613      	mov	r3, r2
 80151f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80151f4:	79fb      	ldrb	r3, [r7, #7]
 80151f6:	2b23      	cmp	r3, #35	@ 0x23
 80151f8:	d84a      	bhi.n	8015290 <CDC_Control_FS+0xac>
 80151fa:	a201      	add	r2, pc, #4	@ (adr r2, 8015200 <CDC_Control_FS+0x1c>)
 80151fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015200:	08015291 	.word	0x08015291
 8015204:	08015291 	.word	0x08015291
 8015208:	08015291 	.word	0x08015291
 801520c:	08015291 	.word	0x08015291
 8015210:	08015291 	.word	0x08015291
 8015214:	08015291 	.word	0x08015291
 8015218:	08015291 	.word	0x08015291
 801521c:	08015291 	.word	0x08015291
 8015220:	08015291 	.word	0x08015291
 8015224:	08015291 	.word	0x08015291
 8015228:	08015291 	.word	0x08015291
 801522c:	08015291 	.word	0x08015291
 8015230:	08015291 	.word	0x08015291
 8015234:	08015291 	.word	0x08015291
 8015238:	08015291 	.word	0x08015291
 801523c:	08015291 	.word	0x08015291
 8015240:	08015291 	.word	0x08015291
 8015244:	08015291 	.word	0x08015291
 8015248:	08015291 	.word	0x08015291
 801524c:	08015291 	.word	0x08015291
 8015250:	08015291 	.word	0x08015291
 8015254:	08015291 	.word	0x08015291
 8015258:	08015291 	.word	0x08015291
 801525c:	08015291 	.word	0x08015291
 8015260:	08015291 	.word	0x08015291
 8015264:	08015291 	.word	0x08015291
 8015268:	08015291 	.word	0x08015291
 801526c:	08015291 	.word	0x08015291
 8015270:	08015291 	.word	0x08015291
 8015274:	08015291 	.word	0x08015291
 8015278:	08015291 	.word	0x08015291
 801527c:	08015291 	.word	0x08015291
 8015280:	08015291 	.word	0x08015291
 8015284:	08015291 	.word	0x08015291
 8015288:	08015291 	.word	0x08015291
 801528c:	08015291 	.word	0x08015291
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015290:	bf00      	nop
  }

  return (USBD_OK);
 8015292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80152aa:	6879      	ldr	r1, [r7, #4]
 80152ac:	4805      	ldr	r0, [pc, #20]	@ (80152c4 <CDC_Receive_FS+0x24>)
 80152ae:	f7f9 fc2d 	bl	800eb0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80152b2:	4804      	ldr	r0, [pc, #16]	@ (80152c4 <CDC_Receive_FS+0x24>)
 80152b4:	f7f9 fc88 	bl	800ebc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80152b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3708      	adds	r7, #8
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	bf00      	nop
 80152c4:	200010b4 	.word	0x200010b4

080152c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	460b      	mov	r3, r1
 80152d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80152d4:	2300      	movs	r3, #0
 80152d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80152d8:	4b0d      	ldr	r3, [pc, #52]	@ (8015310 <CDC_Transmit_FS+0x48>)
 80152da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80152de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d001      	beq.n	80152ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80152ea:	2301      	movs	r3, #1
 80152ec:	e00b      	b.n	8015306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80152ee:	887b      	ldrh	r3, [r7, #2]
 80152f0:	461a      	mov	r2, r3
 80152f2:	6879      	ldr	r1, [r7, #4]
 80152f4:	4806      	ldr	r0, [pc, #24]	@ (8015310 <CDC_Transmit_FS+0x48>)
 80152f6:	f7f9 fbe7 	bl	800eac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80152fa:	4805      	ldr	r0, [pc, #20]	@ (8015310 <CDC_Transmit_FS+0x48>)
 80152fc:	f7f9 fc24 	bl	800eb48 <USBD_CDC_TransmitPacket>
 8015300:	4603      	mov	r3, r0
 8015302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015304:	7bfb      	ldrb	r3, [r7, #15]
}
 8015306:	4618      	mov	r0, r3
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	200010b4 	.word	0x200010b4

08015314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015314:	b480      	push	{r7}
 8015316:	b087      	sub	sp, #28
 8015318:	af00      	add	r7, sp, #0
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	60b9      	str	r1, [r7, #8]
 801531e:	4613      	mov	r3, r2
 8015320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015322:	2300      	movs	r3, #0
 8015324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801532a:	4618      	mov	r0, r3
 801532c:	371c      	adds	r7, #28
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr
	...

08015338 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015338:	b480      	push	{r7}
 801533a:	b083      	sub	sp, #12
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	6039      	str	r1, [r7, #0]
 8015342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	2212      	movs	r2, #18
 8015348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801534a:	4b03      	ldr	r3, [pc, #12]	@ (8015358 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801534c:	4618      	mov	r0, r3
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr
 8015358:	200000f0 	.word	0x200000f0

0801535c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	4603      	mov	r3, r0
 8015364:	6039      	str	r1, [r7, #0]
 8015366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2204      	movs	r2, #4
 801536c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801536e:	4b03      	ldr	r3, [pc, #12]	@ (801537c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015370:	4618      	mov	r0, r3
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr
 801537c:	20000104 	.word	0x20000104

08015380 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801538c:	79fb      	ldrb	r3, [r7, #7]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d105      	bne.n	801539e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	4907      	ldr	r1, [pc, #28]	@ (80153b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015396:	4808      	ldr	r0, [pc, #32]	@ (80153b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015398:	f7fa fdfa 	bl	800ff90 <USBD_GetString>
 801539c:	e004      	b.n	80153a8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	4904      	ldr	r1, [pc, #16]	@ (80153b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80153a2:	4805      	ldr	r0, [pc, #20]	@ (80153b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80153a4:	f7fa fdf4 	bl	800ff90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153a8:	4b02      	ldr	r3, [pc, #8]	@ (80153b4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	20002390 	.word	0x20002390
 80153b8:	08018e8c 	.word	0x08018e8c

080153bc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80153c8:	683a      	ldr	r2, [r7, #0]
 80153ca:	4904      	ldr	r1, [pc, #16]	@ (80153dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80153cc:	4804      	ldr	r0, [pc, #16]	@ (80153e0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80153ce:	f7fa fddf 	bl	800ff90 <USBD_GetString>
  return USBD_StrDesc;
 80153d2:	4b02      	ldr	r3, [pc, #8]	@ (80153dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	20002390 	.word	0x20002390
 80153e0:	08018ea4 	.word	0x08018ea4

080153e4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	6039      	str	r1, [r7, #0]
 80153ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	221a      	movs	r2, #26
 80153f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80153f6:	f000 f843 	bl	8015480 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80153fa:	4b02      	ldr	r3, [pc, #8]	@ (8015404 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	20000108 	.word	0x20000108

08015408 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	4603      	mov	r3, r0
 8015410:	6039      	str	r1, [r7, #0]
 8015412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015414:	79fb      	ldrb	r3, [r7, #7]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d105      	bne.n	8015426 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801541a:	683a      	ldr	r2, [r7, #0]
 801541c:	4907      	ldr	r1, [pc, #28]	@ (801543c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801541e:	4808      	ldr	r0, [pc, #32]	@ (8015440 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015420:	f7fa fdb6 	bl	800ff90 <USBD_GetString>
 8015424:	e004      	b.n	8015430 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015426:	683a      	ldr	r2, [r7, #0]
 8015428:	4904      	ldr	r1, [pc, #16]	@ (801543c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801542a:	4805      	ldr	r0, [pc, #20]	@ (8015440 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801542c:	f7fa fdb0 	bl	800ff90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015430:	4b02      	ldr	r3, [pc, #8]	@ (801543c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015432:	4618      	mov	r0, r3
 8015434:	3708      	adds	r7, #8
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	20002390 	.word	0x20002390
 8015440:	08018eb8 	.word	0x08018eb8

08015444 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b082      	sub	sp, #8
 8015448:	af00      	add	r7, sp, #0
 801544a:	4603      	mov	r3, r0
 801544c:	6039      	str	r1, [r7, #0]
 801544e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015450:	79fb      	ldrb	r3, [r7, #7]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d105      	bne.n	8015462 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	4907      	ldr	r1, [pc, #28]	@ (8015478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801545a:	4808      	ldr	r0, [pc, #32]	@ (801547c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801545c:	f7fa fd98 	bl	800ff90 <USBD_GetString>
 8015460:	e004      	b.n	801546c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015462:	683a      	ldr	r2, [r7, #0]
 8015464:	4904      	ldr	r1, [pc, #16]	@ (8015478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015466:	4805      	ldr	r0, [pc, #20]	@ (801547c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015468:	f7fa fd92 	bl	800ff90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801546c:	4b02      	ldr	r3, [pc, #8]	@ (8015478 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801546e:	4618      	mov	r0, r3
 8015470:	3708      	adds	r7, #8
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	20002390 	.word	0x20002390
 801547c:	08018ec4 	.word	0x08018ec4

08015480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b084      	sub	sp, #16
 8015484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015486:	4b0f      	ldr	r3, [pc, #60]	@ (80154c4 <Get_SerialNum+0x44>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801548c:	4b0e      	ldr	r3, [pc, #56]	@ (80154c8 <Get_SerialNum+0x48>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015492:	4b0e      	ldr	r3, [pc, #56]	@ (80154cc <Get_SerialNum+0x4c>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015498:	68fa      	ldr	r2, [r7, #12]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	4413      	add	r3, r2
 801549e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d009      	beq.n	80154ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80154a6:	2208      	movs	r2, #8
 80154a8:	4909      	ldr	r1, [pc, #36]	@ (80154d0 <Get_SerialNum+0x50>)
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f000 f814 	bl	80154d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80154b0:	2204      	movs	r2, #4
 80154b2:	4908      	ldr	r1, [pc, #32]	@ (80154d4 <Get_SerialNum+0x54>)
 80154b4:	68b8      	ldr	r0, [r7, #8]
 80154b6:	f000 f80f 	bl	80154d8 <IntToUnicode>
  }
}
 80154ba:	bf00      	nop
 80154bc:	3710      	adds	r7, #16
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	1fff7590 	.word	0x1fff7590
 80154c8:	1fff7594 	.word	0x1fff7594
 80154cc:	1fff7598 	.word	0x1fff7598
 80154d0:	2000010a 	.word	0x2000010a
 80154d4:	2000011a 	.word	0x2000011a

080154d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80154d8:	b480      	push	{r7}
 80154da:	b087      	sub	sp, #28
 80154dc:	af00      	add	r7, sp, #0
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	4613      	mov	r3, r2
 80154e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80154e6:	2300      	movs	r3, #0
 80154e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80154ea:	2300      	movs	r3, #0
 80154ec:	75fb      	strb	r3, [r7, #23]
 80154ee:	e027      	b.n	8015540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	0f1b      	lsrs	r3, r3, #28
 80154f4:	2b09      	cmp	r3, #9
 80154f6:	d80b      	bhi.n	8015510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	0f1b      	lsrs	r3, r3, #28
 80154fc:	b2da      	uxtb	r2, r3
 80154fe:	7dfb      	ldrb	r3, [r7, #23]
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4619      	mov	r1, r3
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	440b      	add	r3, r1
 8015508:	3230      	adds	r2, #48	@ 0x30
 801550a:	b2d2      	uxtb	r2, r2
 801550c:	701a      	strb	r2, [r3, #0]
 801550e:	e00a      	b.n	8015526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	0f1b      	lsrs	r3, r3, #28
 8015514:	b2da      	uxtb	r2, r3
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4619      	mov	r1, r3
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	440b      	add	r3, r1
 8015520:	3237      	adds	r2, #55	@ 0x37
 8015522:	b2d2      	uxtb	r2, r2
 8015524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	011b      	lsls	r3, r3, #4
 801552a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801552c:	7dfb      	ldrb	r3, [r7, #23]
 801552e:	005b      	lsls	r3, r3, #1
 8015530:	3301      	adds	r3, #1
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	4413      	add	r3, r2
 8015536:	2200      	movs	r2, #0
 8015538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801553a:	7dfb      	ldrb	r3, [r7, #23]
 801553c:	3301      	adds	r3, #1
 801553e:	75fb      	strb	r3, [r7, #23]
 8015540:	7dfa      	ldrb	r2, [r7, #23]
 8015542:	79fb      	ldrb	r3, [r7, #7]
 8015544:	429a      	cmp	r2, r3
 8015546:	d3d3      	bcc.n	80154f0 <IntToUnicode+0x18>
  }
}
 8015548:	bf00      	nop
 801554a:	bf00      	nop
 801554c:	371c      	adds	r7, #28
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr

08015556 <LL_AHB2_GRP1_EnableClock>:
{
 8015556:	b480      	push	{r7}
 8015558:	b085      	sub	sp, #20
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801555e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015562:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015564:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	4313      	orrs	r3, r2
 801556c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801556e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	4013      	ands	r3, r2
 8015578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801557a:	68fb      	ldr	r3, [r7, #12]
}
 801557c:	bf00      	nop
 801557e:	3714      	adds	r7, #20
 8015580:	46bd      	mov	sp, r7
 8015582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015586:	4770      	bx	lr

08015588 <LL_APB1_GRP1_EnableClock>:
{
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8015590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015594:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	4313      	orrs	r3, r2
 801559e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80155a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	4013      	ands	r3, r2
 80155aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80155ac:	68fb      	ldr	r3, [r7, #12]
}
 80155ae:	bf00      	nop
 80155b0:	3714      	adds	r7, #20
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr
	...

080155bc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b09c      	sub	sp, #112	@ 0x70
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80155c8:	2200      	movs	r2, #0
 80155ca:	601a      	str	r2, [r3, #0]
 80155cc:	605a      	str	r2, [r3, #4]
 80155ce:	609a      	str	r2, [r3, #8]
 80155d0:	60da      	str	r2, [r3, #12]
 80155d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80155d4:	f107 030c 	add.w	r3, r7, #12
 80155d8:	2250      	movs	r2, #80	@ 0x50
 80155da:	2100      	movs	r1, #0
 80155dc:	4618      	mov	r0, r3
 80155de:	f000 ffdb 	bl	8016598 <memset>
  if(pcdHandle->Instance==USB)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	4a23      	ldr	r2, [pc, #140]	@ (8015674 <HAL_PCD_MspInit+0xb8>)
 80155e8:	4293      	cmp	r3, r2
 80155ea:	d13e      	bne.n	801566a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80155ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80155f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80155f2:	2306      	movs	r3, #6
 80155f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80155f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80155fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80155fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015600:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8015602:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8015606:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8015608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801560c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801560e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8015612:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015614:	f107 030c 	add.w	r3, r7, #12
 8015618:	4618      	mov	r0, r3
 801561a:	f7f3 fe79 	bl	8009310 <HAL_RCCEx_PeriphCLKConfig>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8015624:	f7ee fe02 	bl	800422c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015628:	2001      	movs	r0, #1
 801562a:	f7ff ff94 	bl	8015556 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801562e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015632:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015634:	2302      	movs	r3, #2
 8015636:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015638:	2300      	movs	r3, #0
 801563a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801563c:	2300      	movs	r3, #0
 801563e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015640:	230a      	movs	r3, #10
 8015642:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015644:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8015648:	4619      	mov	r1, r3
 801564a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801564e:	f7ef fdd7 	bl	8005200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015652:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8015656:	f7ff ff97 	bl	8015588 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801565a:	2200      	movs	r2, #0
 801565c:	2105      	movs	r1, #5
 801565e:	2014      	movs	r0, #20
 8015660:	f7ef fb49 	bl	8004cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015664:	2014      	movs	r0, #20
 8015666:	f7ef fb60 	bl	8004d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801566a:	bf00      	nop
 801566c:	3770      	adds	r7, #112	@ 0x70
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}
 8015672:	bf00      	nop
 8015674:	40006800 	.word	0x40006800

08015678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 801568c:	4619      	mov	r1, r3
 801568e:	4610      	mov	r0, r2
 8015690:	f7f9 fb83 	bl	800ed9a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015694:	bf00      	nop
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
 80156a4:	460b      	mov	r3, r1
 80156a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80156ae:	78fa      	ldrb	r2, [r7, #3]
 80156b0:	6879      	ldr	r1, [r7, #4]
 80156b2:	4613      	mov	r3, r2
 80156b4:	009b      	lsls	r3, r3, #2
 80156b6:	4413      	add	r3, r2
 80156b8:	00db      	lsls	r3, r3, #3
 80156ba:	440b      	add	r3, r1
 80156bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80156c0:	681a      	ldr	r2, [r3, #0]
 80156c2:	78fb      	ldrb	r3, [r7, #3]
 80156c4:	4619      	mov	r1, r3
 80156c6:	f7f9 fbbd 	bl	800ee44 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80156ca:	bf00      	nop
 80156cc:	3708      	adds	r7, #8
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}

080156d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b082      	sub	sp, #8
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	6078      	str	r0, [r7, #4]
 80156da:	460b      	mov	r3, r1
 80156dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80156e4:	78fa      	ldrb	r2, [r7, #3]
 80156e6:	6879      	ldr	r1, [r7, #4]
 80156e8:	4613      	mov	r3, r2
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	4413      	add	r3, r2
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	440b      	add	r3, r1
 80156f2:	3324      	adds	r3, #36	@ 0x24
 80156f4:	681a      	ldr	r2, [r3, #0]
 80156f6:	78fb      	ldrb	r3, [r7, #3]
 80156f8:	4619      	mov	r1, r3
 80156fa:	f7f9 fc56 	bl	800efaa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80156fe:	bf00      	nop
 8015700:	3708      	adds	r7, #8
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}

08015706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b082      	sub	sp, #8
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015714:	4618      	mov	r0, r3
 8015716:	f7f9 fd90 	bl	800f23a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801571a:	bf00      	nop
 801571c:	3708      	adds	r7, #8
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801572a:	2301      	movs	r3, #1
 801572c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	795b      	ldrb	r3, [r3, #5]
 8015732:	2b02      	cmp	r3, #2
 8015734:	d001      	beq.n	801573a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015736:	f7ee fd79 	bl	800422c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015740:	7bfa      	ldrb	r2, [r7, #15]
 8015742:	4611      	mov	r1, r2
 8015744:	4618      	mov	r0, r3
 8015746:	f7f9 fd34 	bl	800f1b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015750:	4618      	mov	r0, r3
 8015752:	f7f9 fcdc 	bl	800f10e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015756:	bf00      	nop
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
	...

08015760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801576e:	4618      	mov	r0, r3
 8015770:	f7f9 fd2f 	bl	800f1d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	7a5b      	ldrb	r3, [r3, #9]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d005      	beq.n	8015788 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801577c:	4b04      	ldr	r3, [pc, #16]	@ (8015790 <HAL_PCD_SuspendCallback+0x30>)
 801577e:	691b      	ldr	r3, [r3, #16]
 8015780:	4a03      	ldr	r2, [pc, #12]	@ (8015790 <HAL_PCD_SuspendCallback+0x30>)
 8015782:	f043 0306 	orr.w	r3, r3, #6
 8015786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015788:	bf00      	nop
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	e000ed00 	.word	0xe000ed00

08015794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	7a5b      	ldrb	r3, [r3, #9]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d007      	beq.n	80157b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157a4:	4b08      	ldr	r3, [pc, #32]	@ (80157c8 <HAL_PCD_ResumeCallback+0x34>)
 80157a6:	691b      	ldr	r3, [r3, #16]
 80157a8:	4a07      	ldr	r2, [pc, #28]	@ (80157c8 <HAL_PCD_ResumeCallback+0x34>)
 80157aa:	f023 0306 	bic.w	r3, r3, #6
 80157ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80157b0:	f000 f9fa 	bl	8015ba8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7f9 fd25 	bl	800f20a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80157c0:	bf00      	nop
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	e000ed00 	.word	0xe000ed00

080157cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80157d4:	4a2c      	ldr	r2, [pc, #176]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	4a2a      	ldr	r2, [pc, #168]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80157e4:	f7f2 fa7c 	bl	8007ce0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80157e8:	4b27      	ldr	r3, [pc, #156]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157ea:	4a28      	ldr	r2, [pc, #160]	@ (801588c <USBD_LL_Init+0xc0>)
 80157ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80157ee:	4b26      	ldr	r3, [pc, #152]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157f0:	2208      	movs	r2, #8
 80157f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80157f4:	4b24      	ldr	r3, [pc, #144]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157f6:	2202      	movs	r2, #2
 80157f8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80157fa:	4b23      	ldr	r3, [pc, #140]	@ (8015888 <USBD_LL_Init+0xbc>)
 80157fc:	2202      	movs	r2, #2
 80157fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015800:	4b21      	ldr	r3, [pc, #132]	@ (8015888 <USBD_LL_Init+0xbc>)
 8015802:	2200      	movs	r2, #0
 8015804:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015806:	4b20      	ldr	r3, [pc, #128]	@ (8015888 <USBD_LL_Init+0xbc>)
 8015808:	2200      	movs	r2, #0
 801580a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801580c:	4b1e      	ldr	r3, [pc, #120]	@ (8015888 <USBD_LL_Init+0xbc>)
 801580e:	2200      	movs	r2, #0
 8015810:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015812:	4b1d      	ldr	r3, [pc, #116]	@ (8015888 <USBD_LL_Init+0xbc>)
 8015814:	2200      	movs	r2, #0
 8015816:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015818:	481b      	ldr	r0, [pc, #108]	@ (8015888 <USBD_LL_Init+0xbc>)
 801581a:	f7f0 fd0f 	bl	800623c <HAL_PCD_Init>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015824:	f7ee fd02 	bl	800422c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801582e:	2318      	movs	r3, #24
 8015830:	2200      	movs	r2, #0
 8015832:	2100      	movs	r1, #0
 8015834:	f7f2 f9c8 	bl	8007bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801583e:	2358      	movs	r3, #88	@ 0x58
 8015840:	2200      	movs	r2, #0
 8015842:	2180      	movs	r1, #128	@ 0x80
 8015844:	f7f2 f9c0 	bl	8007bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801584e:	23c0      	movs	r3, #192	@ 0xc0
 8015850:	2200      	movs	r2, #0
 8015852:	2181      	movs	r1, #129	@ 0x81
 8015854:	f7f2 f9b8 	bl	8007bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801585e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015862:	2200      	movs	r2, #0
 8015864:	2101      	movs	r1, #1
 8015866:	f7f2 f9af 	bl	8007bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015874:	2200      	movs	r2, #0
 8015876:	2182      	movs	r1, #130	@ 0x82
 8015878:	f7f2 f9a6 	bl	8007bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801587c:	2300      	movs	r3, #0
}
 801587e:	4618      	mov	r0, r3
 8015880:	3708      	adds	r7, #8
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	20002590 	.word	0x20002590
 801588c:	40006800 	.word	0x40006800

08015890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015898:	2300      	movs	r3, #0
 801589a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801589c:	2300      	movs	r3, #0
 801589e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7f0 fd96 	bl	80063d8 <HAL_PCD_Start>
 80158ac:	4603      	mov	r3, r0
 80158ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158b0:	7bfb      	ldrb	r3, [r7, #15]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f000 f97e 	bl	8015bb4 <USBD_Get_USB_Status>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3710      	adds	r7, #16
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}

080158c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80158c6:	b580      	push	{r7, lr}
 80158c8:	b084      	sub	sp, #16
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
 80158ce:	4608      	mov	r0, r1
 80158d0:	4611      	mov	r1, r2
 80158d2:	461a      	mov	r2, r3
 80158d4:	4603      	mov	r3, r0
 80158d6:	70fb      	strb	r3, [r7, #3]
 80158d8:	460b      	mov	r3, r1
 80158da:	70bb      	strb	r3, [r7, #2]
 80158dc:	4613      	mov	r3, r2
 80158de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158e0:	2300      	movs	r3, #0
 80158e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158e4:	2300      	movs	r3, #0
 80158e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80158ee:	78bb      	ldrb	r3, [r7, #2]
 80158f0:	883a      	ldrh	r2, [r7, #0]
 80158f2:	78f9      	ldrb	r1, [r7, #3]
 80158f4:	f7f0 fedd 	bl	80066b2 <HAL_PCD_EP_Open>
 80158f8:	4603      	mov	r3, r0
 80158fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158fc:	7bfb      	ldrb	r3, [r7, #15]
 80158fe:	4618      	mov	r0, r3
 8015900:	f000 f958 	bl	8015bb4 <USBD_Get_USB_Status>
 8015904:	4603      	mov	r3, r0
 8015906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015908:	7bbb      	ldrb	r3, [r7, #14]
}
 801590a:	4618      	mov	r0, r3
 801590c:	3710      	adds	r7, #16
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}

08015912 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015912:	b580      	push	{r7, lr}
 8015914:	b084      	sub	sp, #16
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
 801591a:	460b      	mov	r3, r1
 801591c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801591e:	2300      	movs	r3, #0
 8015920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015922:	2300      	movs	r3, #0
 8015924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801592c:	78fa      	ldrb	r2, [r7, #3]
 801592e:	4611      	mov	r1, r2
 8015930:	4618      	mov	r0, r3
 8015932:	f7f0 ff1b 	bl	800676c <HAL_PCD_EP_Close>
 8015936:	4603      	mov	r3, r0
 8015938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801593a:	7bfb      	ldrb	r3, [r7, #15]
 801593c:	4618      	mov	r0, r3
 801593e:	f000 f939 	bl	8015bb4 <USBD_Get_USB_Status>
 8015942:	4603      	mov	r3, r0
 8015944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015946:	7bbb      	ldrb	r3, [r7, #14]
}
 8015948:	4618      	mov	r0, r3
 801594a:	3710      	adds	r7, #16
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	460b      	mov	r3, r1
 801595a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801595c:	2300      	movs	r3, #0
 801595e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015960:	2300      	movs	r3, #0
 8015962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801596a:	78fa      	ldrb	r2, [r7, #3]
 801596c:	4611      	mov	r1, r2
 801596e:	4618      	mov	r0, r3
 8015970:	f7f0 ffc4 	bl	80068fc <HAL_PCD_EP_SetStall>
 8015974:	4603      	mov	r3, r0
 8015976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015978:	7bfb      	ldrb	r3, [r7, #15]
 801597a:	4618      	mov	r0, r3
 801597c:	f000 f91a 	bl	8015bb4 <USBD_Get_USB_Status>
 8015980:	4603      	mov	r3, r0
 8015982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015984:	7bbb      	ldrb	r3, [r7, #14]
}
 8015986:	4618      	mov	r0, r3
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b084      	sub	sp, #16
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
 8015996:	460b      	mov	r3, r1
 8015998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801599e:	2300      	movs	r3, #0
 80159a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80159a8:	78fa      	ldrb	r2, [r7, #3]
 80159aa:	4611      	mov	r1, r2
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7f0 fff7 	bl	80069a0 <HAL_PCD_EP_ClrStall>
 80159b2:	4603      	mov	r3, r0
 80159b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159b6:	7bfb      	ldrb	r3, [r7, #15]
 80159b8:	4618      	mov	r0, r3
 80159ba:	f000 f8fb 	bl	8015bb4 <USBD_Get_USB_Status>
 80159be:	4603      	mov	r3, r0
 80159c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3710      	adds	r7, #16
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	460b      	mov	r3, r1
 80159d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80159de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80159e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	da0b      	bge.n	8015a00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80159e8:	78fb      	ldrb	r3, [r7, #3]
 80159ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80159ee:	68f9      	ldr	r1, [r7, #12]
 80159f0:	4613      	mov	r3, r2
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	3312      	adds	r3, #18
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	e00b      	b.n	8015a18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a00:	78fb      	ldrb	r3, [r7, #3]
 8015a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015a06:	68f9      	ldr	r1, [r7, #12]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015a16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3714      	adds	r7, #20
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	460b      	mov	r3, r1
 8015a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a30:	2300      	movs	r3, #0
 8015a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a34:	2300      	movs	r3, #0
 8015a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a3e:	78fa      	ldrb	r2, [r7, #3]
 8015a40:	4611      	mov	r1, r2
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f0 fe11 	bl	800666a <HAL_PCD_SetAddress>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a4c:	7bfb      	ldrb	r3, [r7, #15]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f000 f8b0 	bl	8015bb4 <USBD_Get_USB_Status>
 8015a54:	4603      	mov	r3, r0
 8015a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3710      	adds	r7, #16
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b086      	sub	sp, #24
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	60f8      	str	r0, [r7, #12]
 8015a6a:	607a      	str	r2, [r7, #4]
 8015a6c:	603b      	str	r3, [r7, #0]
 8015a6e:	460b      	mov	r3, r1
 8015a70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a72:	2300      	movs	r3, #0
 8015a74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a76:	2300      	movs	r3, #0
 8015a78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015a80:	7af9      	ldrb	r1, [r7, #11]
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	f7f0 ff02 	bl	800688e <HAL_PCD_EP_Transmit>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a8e:	7dfb      	ldrb	r3, [r7, #23]
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 f88f 	bl	8015bb4 <USBD_Get_USB_Status>
 8015a96:	4603      	mov	r3, r0
 8015a98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3718      	adds	r7, #24
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b086      	sub	sp, #24
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	607a      	str	r2, [r7, #4]
 8015aae:	603b      	str	r3, [r7, #0]
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015ac2:	7af9      	ldrb	r1, [r7, #11]
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	f7f0 fe98 	bl	80067fc <HAL_PCD_EP_Receive>
 8015acc:	4603      	mov	r3, r0
 8015ace:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ad0:	7dfb      	ldrb	r3, [r7, #23]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f000 f86e 	bl	8015bb4 <USBD_Get_USB_Status>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015adc:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3718      	adds	r7, #24
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b082      	sub	sp, #8
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	460b      	mov	r3, r1
 8015af0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015af8:	78fa      	ldrb	r2, [r7, #3]
 8015afa:	4611      	mov	r1, r2
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7f0 feae 	bl	800685e <HAL_PCD_EP_GetRxCount>
 8015b02:	4603      	mov	r3, r0
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
 8015b14:	460b      	mov	r3, r1
 8015b16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015b18:	78fb      	ldrb	r3, [r7, #3]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d002      	beq.n	8015b24 <HAL_PCDEx_LPM_Callback+0x18>
 8015b1e:	2b01      	cmp	r3, #1
 8015b20:	d013      	beq.n	8015b4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015b22:	e023      	b.n	8015b6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	7a5b      	ldrb	r3, [r3, #9]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d007      	beq.n	8015b3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015b2c:	f000 f83c 	bl	8015ba8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b30:	4b10      	ldr	r3, [pc, #64]	@ (8015b74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015b32:	691b      	ldr	r3, [r3, #16]
 8015b34:	4a0f      	ldr	r2, [pc, #60]	@ (8015b74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015b36:	f023 0306 	bic.w	r3, r3, #6
 8015b3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7f9 fb61 	bl	800f20a <USBD_LL_Resume>
    break;
 8015b48:	e010      	b.n	8015b6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f9 fb3e 	bl	800f1d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	7a5b      	ldrb	r3, [r3, #9]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d005      	beq.n	8015b6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b5e:	4b05      	ldr	r3, [pc, #20]	@ (8015b74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015b60:	691b      	ldr	r3, [r3, #16]
 8015b62:	4a04      	ldr	r2, [pc, #16]	@ (8015b74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015b64:	f043 0306 	orr.w	r3, r3, #6
 8015b68:	6113      	str	r3, [r2, #16]
    break;
 8015b6a:	bf00      	nop
}
 8015b6c:	bf00      	nop
 8015b6e:	3708      	adds	r7, #8
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}
 8015b74:	e000ed00 	.word	0xe000ed00

08015b78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015b80:	4b03      	ldr	r3, [pc, #12]	@ (8015b90 <USBD_static_malloc+0x18>)
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	370c      	adds	r7, #12
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	2000286c 	.word	0x2000286c

08015b94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015b94:	b480      	push	{r7}
 8015b96:	b083      	sub	sp, #12
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015b9c:	bf00      	nop
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015bac:	f7ee f8c8 	bl	8003d40 <SystemClock_Config>
}
 8015bb0:	bf00      	nop
 8015bb2:	bd80      	pop	{r7, pc}

08015bb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	4603      	mov	r3, r0
 8015bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015bc2:	79fb      	ldrb	r3, [r7, #7]
 8015bc4:	2b03      	cmp	r3, #3
 8015bc6:	d817      	bhi.n	8015bf8 <USBD_Get_USB_Status+0x44>
 8015bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8015bd0 <USBD_Get_USB_Status+0x1c>)
 8015bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bce:	bf00      	nop
 8015bd0:	08015be1 	.word	0x08015be1
 8015bd4:	08015be7 	.word	0x08015be7
 8015bd8:	08015bed 	.word	0x08015bed
 8015bdc:	08015bf3 	.word	0x08015bf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	73fb      	strb	r3, [r7, #15]
    break;
 8015be4:	e00b      	b.n	8015bfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015be6:	2303      	movs	r3, #3
 8015be8:	73fb      	strb	r3, [r7, #15]
    break;
 8015bea:	e008      	b.n	8015bfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015bec:	2301      	movs	r3, #1
 8015bee:	73fb      	strb	r3, [r7, #15]
    break;
 8015bf0:	e005      	b.n	8015bfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015bf2:	2303      	movs	r3, #3
 8015bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8015bf6:	e002      	b.n	8015bfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015bf8:	2303      	movs	r3, #3
 8015bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8015bfc:	bf00      	nop
  }
  return usb_status;
 8015bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3714      	adds	r7, #20
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr

08015c0c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015c10:	4b05      	ldr	r3, [pc, #20]	@ (8015c28 <UTIL_LPM_Init+0x1c>)
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015c16:	4b05      	ldr	r3, [pc, #20]	@ (8015c2c <UTIL_LPM_Init+0x20>)
 8015c18:	2200      	movs	r2, #0
 8015c1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015c1c:	bf00      	nop
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c24:	4770      	bx	lr
 8015c26:	bf00      	nop
 8015c28:	20002a8c 	.word	0x20002a8c
 8015c2c:	20002a90 	.word	0x20002a90

08015c30 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015c30:	b480      	push	{r7}
 8015c32:	b087      	sub	sp, #28
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	460b      	mov	r3, r1
 8015c3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8015c40:	613b      	str	r3, [r7, #16]
  return(result);
 8015c42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015c44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015c46:	b672      	cpsid	i
}
 8015c48:	bf00      	nop
  
  switch(state)
 8015c4a:	78fb      	ldrb	r3, [r7, #3]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d008      	beq.n	8015c62 <UTIL_LPM_SetOffMode+0x32>
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d10e      	bne.n	8015c72 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015c54:	4b0d      	ldr	r3, [pc, #52]	@ (8015c8c <UTIL_LPM_SetOffMode+0x5c>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	4313      	orrs	r3, r2
 8015c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8015c8c <UTIL_LPM_SetOffMode+0x5c>)
 8015c5e:	6013      	str	r3, [r2, #0]
      break;
 8015c60:	e008      	b.n	8015c74 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	43da      	mvns	r2, r3
 8015c66:	4b09      	ldr	r3, [pc, #36]	@ (8015c8c <UTIL_LPM_SetOffMode+0x5c>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4013      	ands	r3, r2
 8015c6c:	4a07      	ldr	r2, [pc, #28]	@ (8015c8c <UTIL_LPM_SetOffMode+0x5c>)
 8015c6e:	6013      	str	r3, [r2, #0]
      break;
 8015c70:	e000      	b.n	8015c74 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015c72:	bf00      	nop
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f383 8810 	msr	PRIMASK, r3
}
 8015c7e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015c80:	bf00      	nop
 8015c82:	371c      	adds	r7, #28
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	20002a90 	.word	0x20002a90

08015c90 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b090      	sub	sp, #64	@ 0x40
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8015c98:	4b73      	ldr	r3, [pc, #460]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8015c9e:	4b72      	ldr	r3, [pc, #456]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	4013      	ands	r3, r2
 8015ca6:	4a70      	ldr	r2, [pc, #448]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015ca8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8015caa:	4b70      	ldr	r3, [pc, #448]	@ (8015e6c <UTIL_SEQ_Run+0x1dc>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8015e70 <UTIL_SEQ_Run+0x1e0>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8015e74 <UTIL_SEQ_Run+0x1e4>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8015cbc:	4b6e      	ldr	r3, [pc, #440]	@ (8015e78 <UTIL_SEQ_Run+0x1e8>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015cc2:	e08d      	b.n	8015de0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015cc8:	e002      	b.n	8015cd0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8015cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ccc:	3301      	adds	r3, #1
 8015cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015cd4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cda:	401a      	ands	r2, r3
 8015cdc:	4b62      	ldr	r3, [pc, #392]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	4013      	ands	r3, r2
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d0f1      	beq.n	8015cca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8015ce6:	4a65      	ldr	r2, [pc, #404]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015cea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf0:	401a      	ands	r2, r3
 8015cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8015cfa:	4a60      	ldr	r2, [pc, #384]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015cfe:	00db      	lsls	r3, r3, #3
 8015d00:	4413      	add	r3, r2
 8015d02:	685a      	ldr	r2, [r3, #4]
 8015d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d06:	4013      	ands	r3, r2
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d106      	bne.n	8015d1a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015d0c:	4a5b      	ldr	r2, [pc, #364]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d10:	00db      	lsls	r3, r3, #3
 8015d12:	4413      	add	r3, r2
 8015d14:	f04f 32ff 	mov.w	r2, #4294967295
 8015d18:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8015d1a:	4a58      	ldr	r2, [pc, #352]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d1e:	00db      	lsls	r3, r3, #3
 8015d20:	4413      	add	r3, r2
 8015d22:	685a      	ldr	r2, [r3, #4]
 8015d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d26:	4013      	ands	r3, r2
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f000 f9b3 	bl	8016094 <SEQ_BitPosition>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	461a      	mov	r2, r3
 8015d32:	4b53      	ldr	r3, [pc, #332]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015d34:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8015d36:	4a51      	ldr	r2, [pc, #324]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d3a:	00db      	lsls	r3, r3, #3
 8015d3c:	4413      	add	r3, r2
 8015d3e:	685a      	ldr	r2, [r3, #4]
 8015d40:	4b4f      	ldr	r3, [pc, #316]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2101      	movs	r1, #1
 8015d46:	fa01 f303 	lsl.w	r3, r1, r3
 8015d4a:	43db      	mvns	r3, r3
 8015d4c:	401a      	ands	r2, r3
 8015d4e:	494b      	ldr	r1, [pc, #300]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d52:	00db      	lsls	r3, r3, #3
 8015d54:	440b      	add	r3, r1
 8015d56:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d58:	f3ef 8310 	mrs	r3, PRIMASK
 8015d5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8015d5e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d62:	b672      	cpsid	i
}
 8015d64:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8015d66:	4b46      	ldr	r3, [pc, #280]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8015d70:	43da      	mvns	r2, r3
 8015d72:	4b3e      	ldr	r3, [pc, #248]	@ (8015e6c <UTIL_SEQ_Run+0x1dc>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	4013      	ands	r3, r2
 8015d78:	4a3c      	ldr	r2, [pc, #240]	@ (8015e6c <UTIL_SEQ_Run+0x1dc>)
 8015d7a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015d7c:	2302      	movs	r3, #2
 8015d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015d80:	e013      	b.n	8015daa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d84:	3b01      	subs	r3, #1
 8015d86:	4a3d      	ldr	r2, [pc, #244]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015d88:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8015d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2201      	movs	r2, #1
 8015d92:	fa02 f303 	lsl.w	r3, r2, r3
 8015d96:	43da      	mvns	r2, r3
 8015d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	400a      	ands	r2, r1
 8015d9e:	4937      	ldr	r1, [pc, #220]	@ (8015e7c <UTIL_SEQ_Run+0x1ec>)
 8015da0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015da6:	3b01      	subs	r3, #1
 8015da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d1e8      	bne.n	8015d82 <UTIL_SEQ_Run+0xf2>
 8015db0:	6a3b      	ldr	r3, [r7, #32]
 8015db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	f383 8810 	msr	PRIMASK, r3
}
 8015dba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8015dbc:	4b30      	ldr	r3, [pc, #192]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4a30      	ldr	r2, [pc, #192]	@ (8015e84 <UTIL_SEQ_Run+0x1f4>)
 8015dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dc6:	4798      	blx	r3

    local_taskset = TaskSet;
 8015dc8:	4b28      	ldr	r3, [pc, #160]	@ (8015e6c <UTIL_SEQ_Run+0x1dc>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8015dce:	4b28      	ldr	r3, [pc, #160]	@ (8015e70 <UTIL_SEQ_Run+0x1e0>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8015dd4:	4b27      	ldr	r3, [pc, #156]	@ (8015e74 <UTIL_SEQ_Run+0x1e4>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8015dda:	4b27      	ldr	r3, [pc, #156]	@ (8015e78 <UTIL_SEQ_Run+0x1e8>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015de0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015de4:	401a      	ands	r2, r3
 8015de6:	4b20      	ldr	r3, [pc, #128]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	4013      	ands	r3, r2
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d005      	beq.n	8015dfc <UTIL_SEQ_Run+0x16c>
 8015df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df4:	4013      	ands	r3, r2
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	f43f af64 	beq.w	8015cc4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015dfc:	4b20      	ldr	r3, [pc, #128]	@ (8015e80 <UTIL_SEQ_Run+0x1f0>)
 8015dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8015e02:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015e04:	f000 f938 	bl	8016078 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e08:	f3ef 8310 	mrs	r3, PRIMASK
 8015e0c:	613b      	str	r3, [r7, #16]
  return(result);
 8015e0e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e12:	b672      	cpsid	i
}
 8015e14:	bf00      	nop
  local_taskset = TaskSet;
 8015e16:	4b15      	ldr	r3, [pc, #84]	@ (8015e6c <UTIL_SEQ_Run+0x1dc>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015e1c:	4b14      	ldr	r3, [pc, #80]	@ (8015e70 <UTIL_SEQ_Run+0x1e0>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015e22:	4b14      	ldr	r3, [pc, #80]	@ (8015e74 <UTIL_SEQ_Run+0x1e4>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8015e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e2c:	401a      	ands	r2, r3
 8015e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	4013      	ands	r3, r2
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d107      	bne.n	8015e48 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8015e38:	4b0f      	ldr	r3, [pc, #60]	@ (8015e78 <UTIL_SEQ_Run+0x1e8>)
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e3e:	4013      	ands	r3, r2
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d101      	bne.n	8015e48 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015e44:	f7ec fd8b 	bl	800295e <UTIL_SEQ_Idle>
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	f383 8810 	msr	PRIMASK, r3
}
 8015e52:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015e54:	f000 f917 	bl	8016086 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8015e58:	4a03      	ldr	r2, [pc, #12]	@ (8015e68 <UTIL_SEQ_Run+0x1d8>)
 8015e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e5c:	6013      	str	r3, [r2, #0]

  return;
 8015e5e:	bf00      	nop
}
 8015e60:	3740      	adds	r7, #64	@ 0x40
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
 8015e66:	bf00      	nop
 8015e68:	20000128 	.word	0x20000128
 8015e6c:	20002a94 	.word	0x20002a94
 8015e70:	20002a98 	.word	0x20002a98
 8015e74:	20000124 	.word	0x20000124
 8015e78:	20002a9c 	.word	0x20002a9c
 8015e7c:	20002b24 	.word	0x20002b24
 8015e80:	20002aa0 	.word	0x20002aa0
 8015e84:	20002aa4 	.word	0x20002aa4

08015e88 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b088      	sub	sp, #32
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	60b9      	str	r1, [r7, #8]
 8015e92:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e94:	f3ef 8310 	mrs	r3, PRIMASK
 8015e98:	617b      	str	r3, [r7, #20]
  return(result);
 8015e9a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8015e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e9e:	b672      	cpsid	i
}
 8015ea0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f000 f8f6 	bl	8016094 <SEQ_BitPosition>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	4619      	mov	r1, r3
 8015eac:	4a06      	ldr	r2, [pc, #24]	@ (8015ec8 <UTIL_SEQ_RegTask+0x40>)
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	f383 8810 	msr	PRIMASK, r3
}
 8015ebe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8015ec0:	bf00      	nop
}
 8015ec2:	3720      	adds	r7, #32
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	20002aa4 	.word	0x20002aa4

08015ecc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b087      	sub	sp, #28
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8015eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8015edc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ee0:	b672      	cpsid	i
}
 8015ee2:	bf00      	nop

  TaskSet |= TaskId_bm;
 8015ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8015f1c <UTIL_SEQ_SetTask+0x50>)
 8015ee6:	681a      	ldr	r2, [r3, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	4313      	orrs	r3, r2
 8015eec:	4a0b      	ldr	r2, [pc, #44]	@ (8015f1c <UTIL_SEQ_SetTask+0x50>)
 8015eee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8015f20 <UTIL_SEQ_SetTask+0x54>)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	431a      	orrs	r2, r3
 8015efc:	4908      	ldr	r1, [pc, #32]	@ (8015f20 <UTIL_SEQ_SetTask+0x54>)
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	f383 8810 	msr	PRIMASK, r3
}
 8015f0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015f10:	bf00      	nop
}
 8015f12:	371c      	adds	r7, #28
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr
 8015f1c:	20002a94 	.word	0x20002a94
 8015f20:	20002b24 	.word	0x20002b24

08015f24 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015f24:	b480      	push	{r7}
 8015f26:	b087      	sub	sp, #28
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8015f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f32:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f36:	b672      	cpsid	i
}
 8015f38:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	43da      	mvns	r2, r3
 8015f3e:	4b08      	ldr	r3, [pc, #32]	@ (8015f60 <UTIL_SEQ_PauseTask+0x3c>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4013      	ands	r3, r2
 8015f44:	4a06      	ldr	r2, [pc, #24]	@ (8015f60 <UTIL_SEQ_PauseTask+0x3c>)
 8015f46:	6013      	str	r3, [r2, #0]
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	f383 8810 	msr	PRIMASK, r3
}
 8015f52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015f54:	bf00      	nop
}
 8015f56:	371c      	adds	r7, #28
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr
 8015f60:	20000124 	.word	0x20000124

08015f64 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015f64:	b480      	push	{r7}
 8015f66:	b087      	sub	sp, #28
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8015f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f76:	b672      	cpsid	i
}
 8015f78:	bf00      	nop

  TaskMask |= TaskId_bm;
 8015f7a:	4b09      	ldr	r3, [pc, #36]	@ (8015fa0 <UTIL_SEQ_ResumeTask+0x3c>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	4313      	orrs	r3, r2
 8015f82:	4a07      	ldr	r2, [pc, #28]	@ (8015fa0 <UTIL_SEQ_ResumeTask+0x3c>)
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	f383 8810 	msr	PRIMASK, r3
}
 8015f90:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015f92:	bf00      	nop
}
 8015f94:	371c      	adds	r7, #28
 8015f96:	46bd      	mov	sp, r7
 8015f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop
 8015fa0:	20000124 	.word	0x20000124

08015fa4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b087      	sub	sp, #28
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fac:	f3ef 8310 	mrs	r3, PRIMASK
 8015fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015fb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fb6:	b672      	cpsid	i
}
 8015fb8:	bf00      	nop

  EvtSet |= EvtId_bm;
 8015fba:	4b09      	ldr	r3, [pc, #36]	@ (8015fe0 <UTIL_SEQ_SetEvt+0x3c>)
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	4313      	orrs	r3, r2
 8015fc2:	4a07      	ldr	r2, [pc, #28]	@ (8015fe0 <UTIL_SEQ_SetEvt+0x3c>)
 8015fc4:	6013      	str	r3, [r2, #0]
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	f383 8810 	msr	PRIMASK, r3
}
 8015fd0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015fd2:	bf00      	nop
}
 8015fd4:	371c      	adds	r7, #28
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop
 8015fe0:	20002a98 	.word	0x20002a98

08015fe4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b088      	sub	sp, #32
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8015fec:	4b1f      	ldr	r3, [pc, #124]	@ (801606c <UTIL_SEQ_WaitEvt+0x88>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8015ff2:	4b1e      	ldr	r3, [pc, #120]	@ (801606c <UTIL_SEQ_WaitEvt+0x88>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ffa:	d102      	bne.n	8016002 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	61fb      	str	r3, [r7, #28]
 8016000:	e005      	b.n	801600e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016002:	4b1a      	ldr	r3, [pc, #104]	@ (801606c <UTIL_SEQ_WaitEvt+0x88>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2201      	movs	r2, #1
 8016008:	fa02 f303 	lsl.w	r3, r2, r3
 801600c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801600e:	4b18      	ldr	r3, [pc, #96]	@ (8016070 <UTIL_SEQ_WaitEvt+0x8c>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016014:	4a16      	ldr	r2, [pc, #88]	@ (8016070 <UTIL_SEQ_WaitEvt+0x8c>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801601a:	e003      	b.n	8016024 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801601c:	6879      	ldr	r1, [r7, #4]
 801601e:	69f8      	ldr	r0, [r7, #28]
 8016020:	f7ec fca4 	bl	800296c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016024:	4b13      	ldr	r3, [pc, #76]	@ (8016074 <UTIL_SEQ_WaitEvt+0x90>)
 8016026:	681a      	ldr	r2, [r3, #0]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	4013      	ands	r3, r2
 801602c:	2b00      	cmp	r3, #0
 801602e:	d0f5      	beq.n	801601c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016030:	4a0e      	ldr	r2, [pc, #56]	@ (801606c <UTIL_SEQ_WaitEvt+0x88>)
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016036:	f3ef 8310 	mrs	r3, PRIMASK
 801603a:	60bb      	str	r3, [r7, #8]
  return(result);
 801603c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801603e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016040:	b672      	cpsid	i
}
 8016042:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	43da      	mvns	r2, r3
 8016048:	4b0a      	ldr	r3, [pc, #40]	@ (8016074 <UTIL_SEQ_WaitEvt+0x90>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	4013      	ands	r3, r2
 801604e:	4a09      	ldr	r2, [pc, #36]	@ (8016074 <UTIL_SEQ_WaitEvt+0x90>)
 8016050:	6013      	str	r3, [r2, #0]
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	f383 8810 	msr	PRIMASK, r3
}
 801605c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801605e:	4a04      	ldr	r2, [pc, #16]	@ (8016070 <UTIL_SEQ_WaitEvt+0x8c>)
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	6013      	str	r3, [r2, #0]
  return;
 8016064:	bf00      	nop
}
 8016066:	3720      	adds	r7, #32
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	20002aa0 	.word	0x20002aa0
 8016070:	20002a9c 	.word	0x20002a9c
 8016074:	20002a98 	.word	0x20002a98

08016078 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016078:	b480      	push	{r7}
 801607a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801607c:	bf00      	nop
}
 801607e:	46bd      	mov	sp, r7
 8016080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016084:	4770      	bx	lr

08016086 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016086:	b480      	push	{r7}
 8016088:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801608a:	bf00      	nop
}
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr

08016094 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016094:	b480      	push	{r7}
 8016096:	b085      	sub	sp, #20
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801609c:	2300      	movs	r3, #0
 801609e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80160aa:	d204      	bcs.n	80160b6 <SEQ_BitPosition+0x22>
 80160ac:	2310      	movs	r3, #16
 80160ae:	73fb      	strb	r3, [r7, #15]
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	041b      	lsls	r3, r3, #16
 80160b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80160bc:	d205      	bcs.n	80160ca <SEQ_BitPosition+0x36>
 80160be:	7bfb      	ldrb	r3, [r7, #15]
 80160c0:	3308      	adds	r3, #8
 80160c2:	73fb      	strb	r3, [r7, #15]
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	021b      	lsls	r3, r3, #8
 80160c8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80160d0:	d205      	bcs.n	80160de <SEQ_BitPosition+0x4a>
 80160d2:	7bfb      	ldrb	r3, [r7, #15]
 80160d4:	3304      	adds	r3, #4
 80160d6:	73fb      	strb	r3, [r7, #15]
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	011b      	lsls	r3, r3, #4
 80160dc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	0f1b      	lsrs	r3, r3, #28
 80160e2:	4a07      	ldr	r2, [pc, #28]	@ (8016100 <SEQ_BitPosition+0x6c>)
 80160e4:	5cd2      	ldrb	r2, [r2, r3]
 80160e6:	7bfb      	ldrb	r3, [r7, #15]
 80160e8:	4413      	add	r3, r2
 80160ea:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80160ec:	7bfb      	ldrb	r3, [r7, #15]
 80160ee:	f1c3 031f 	rsb	r3, r3, #31
 80160f2:	b2db      	uxtb	r3, r3
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3714      	adds	r7, #20
 80160f8:	46bd      	mov	sp, r7
 80160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fe:	4770      	bx	lr
 8016100:	080191e0 	.word	0x080191e0

08016104 <std>:
 8016104:	2300      	movs	r3, #0
 8016106:	b510      	push	{r4, lr}
 8016108:	4604      	mov	r4, r0
 801610a:	e9c0 3300 	strd	r3, r3, [r0]
 801610e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016112:	6083      	str	r3, [r0, #8]
 8016114:	8181      	strh	r1, [r0, #12]
 8016116:	6643      	str	r3, [r0, #100]	@ 0x64
 8016118:	81c2      	strh	r2, [r0, #14]
 801611a:	6183      	str	r3, [r0, #24]
 801611c:	4619      	mov	r1, r3
 801611e:	2208      	movs	r2, #8
 8016120:	305c      	adds	r0, #92	@ 0x5c
 8016122:	f000 fa39 	bl	8016598 <memset>
 8016126:	4b0d      	ldr	r3, [pc, #52]	@ (801615c <std+0x58>)
 8016128:	6263      	str	r3, [r4, #36]	@ 0x24
 801612a:	4b0d      	ldr	r3, [pc, #52]	@ (8016160 <std+0x5c>)
 801612c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801612e:	4b0d      	ldr	r3, [pc, #52]	@ (8016164 <std+0x60>)
 8016130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016132:	4b0d      	ldr	r3, [pc, #52]	@ (8016168 <std+0x64>)
 8016134:	6323      	str	r3, [r4, #48]	@ 0x30
 8016136:	4b0d      	ldr	r3, [pc, #52]	@ (801616c <std+0x68>)
 8016138:	6224      	str	r4, [r4, #32]
 801613a:	429c      	cmp	r4, r3
 801613c:	d006      	beq.n	801614c <std+0x48>
 801613e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016142:	4294      	cmp	r4, r2
 8016144:	d002      	beq.n	801614c <std+0x48>
 8016146:	33d0      	adds	r3, #208	@ 0xd0
 8016148:	429c      	cmp	r4, r3
 801614a:	d105      	bne.n	8016158 <std+0x54>
 801614c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016154:	f000 bac0 	b.w	80166d8 <__retarget_lock_init_recursive>
 8016158:	bd10      	pop	{r4, pc}
 801615a:	bf00      	nop
 801615c:	08016379 	.word	0x08016379
 8016160:	0801639b 	.word	0x0801639b
 8016164:	080163d3 	.word	0x080163d3
 8016168:	080163f7 	.word	0x080163f7
 801616c:	20002b34 	.word	0x20002b34

08016170 <stdio_exit_handler>:
 8016170:	4a02      	ldr	r2, [pc, #8]	@ (801617c <stdio_exit_handler+0xc>)
 8016172:	4903      	ldr	r1, [pc, #12]	@ (8016180 <stdio_exit_handler+0x10>)
 8016174:	4803      	ldr	r0, [pc, #12]	@ (8016184 <stdio_exit_handler+0x14>)
 8016176:	f000 b869 	b.w	801624c <_fwalk_sglue>
 801617a:	bf00      	nop
 801617c:	2000012c 	.word	0x2000012c
 8016180:	08017245 	.word	0x08017245
 8016184:	2000013c 	.word	0x2000013c

08016188 <cleanup_stdio>:
 8016188:	6841      	ldr	r1, [r0, #4]
 801618a:	4b0c      	ldr	r3, [pc, #48]	@ (80161bc <cleanup_stdio+0x34>)
 801618c:	4299      	cmp	r1, r3
 801618e:	b510      	push	{r4, lr}
 8016190:	4604      	mov	r4, r0
 8016192:	d001      	beq.n	8016198 <cleanup_stdio+0x10>
 8016194:	f001 f856 	bl	8017244 <_fflush_r>
 8016198:	68a1      	ldr	r1, [r4, #8]
 801619a:	4b09      	ldr	r3, [pc, #36]	@ (80161c0 <cleanup_stdio+0x38>)
 801619c:	4299      	cmp	r1, r3
 801619e:	d002      	beq.n	80161a6 <cleanup_stdio+0x1e>
 80161a0:	4620      	mov	r0, r4
 80161a2:	f001 f84f 	bl	8017244 <_fflush_r>
 80161a6:	68e1      	ldr	r1, [r4, #12]
 80161a8:	4b06      	ldr	r3, [pc, #24]	@ (80161c4 <cleanup_stdio+0x3c>)
 80161aa:	4299      	cmp	r1, r3
 80161ac:	d004      	beq.n	80161b8 <cleanup_stdio+0x30>
 80161ae:	4620      	mov	r0, r4
 80161b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161b4:	f001 b846 	b.w	8017244 <_fflush_r>
 80161b8:	bd10      	pop	{r4, pc}
 80161ba:	bf00      	nop
 80161bc:	20002b34 	.word	0x20002b34
 80161c0:	20002b9c 	.word	0x20002b9c
 80161c4:	20002c04 	.word	0x20002c04

080161c8 <global_stdio_init.part.0>:
 80161c8:	b510      	push	{r4, lr}
 80161ca:	4b0b      	ldr	r3, [pc, #44]	@ (80161f8 <global_stdio_init.part.0+0x30>)
 80161cc:	4c0b      	ldr	r4, [pc, #44]	@ (80161fc <global_stdio_init.part.0+0x34>)
 80161ce:	4a0c      	ldr	r2, [pc, #48]	@ (8016200 <global_stdio_init.part.0+0x38>)
 80161d0:	601a      	str	r2, [r3, #0]
 80161d2:	4620      	mov	r0, r4
 80161d4:	2200      	movs	r2, #0
 80161d6:	2104      	movs	r1, #4
 80161d8:	f7ff ff94 	bl	8016104 <std>
 80161dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80161e0:	2201      	movs	r2, #1
 80161e2:	2109      	movs	r1, #9
 80161e4:	f7ff ff8e 	bl	8016104 <std>
 80161e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80161ec:	2202      	movs	r2, #2
 80161ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161f2:	2112      	movs	r1, #18
 80161f4:	f7ff bf86 	b.w	8016104 <std>
 80161f8:	20002c6c 	.word	0x20002c6c
 80161fc:	20002b34 	.word	0x20002b34
 8016200:	08016171 	.word	0x08016171

08016204 <__sfp_lock_acquire>:
 8016204:	4801      	ldr	r0, [pc, #4]	@ (801620c <__sfp_lock_acquire+0x8>)
 8016206:	f000 ba68 	b.w	80166da <__retarget_lock_acquire_recursive>
 801620a:	bf00      	nop
 801620c:	20002c75 	.word	0x20002c75

08016210 <__sfp_lock_release>:
 8016210:	4801      	ldr	r0, [pc, #4]	@ (8016218 <__sfp_lock_release+0x8>)
 8016212:	f000 ba63 	b.w	80166dc <__retarget_lock_release_recursive>
 8016216:	bf00      	nop
 8016218:	20002c75 	.word	0x20002c75

0801621c <__sinit>:
 801621c:	b510      	push	{r4, lr}
 801621e:	4604      	mov	r4, r0
 8016220:	f7ff fff0 	bl	8016204 <__sfp_lock_acquire>
 8016224:	6a23      	ldr	r3, [r4, #32]
 8016226:	b11b      	cbz	r3, 8016230 <__sinit+0x14>
 8016228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801622c:	f7ff bff0 	b.w	8016210 <__sfp_lock_release>
 8016230:	4b04      	ldr	r3, [pc, #16]	@ (8016244 <__sinit+0x28>)
 8016232:	6223      	str	r3, [r4, #32]
 8016234:	4b04      	ldr	r3, [pc, #16]	@ (8016248 <__sinit+0x2c>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1f5      	bne.n	8016228 <__sinit+0xc>
 801623c:	f7ff ffc4 	bl	80161c8 <global_stdio_init.part.0>
 8016240:	e7f2      	b.n	8016228 <__sinit+0xc>
 8016242:	bf00      	nop
 8016244:	08016189 	.word	0x08016189
 8016248:	20002c6c 	.word	0x20002c6c

0801624c <_fwalk_sglue>:
 801624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016250:	4607      	mov	r7, r0
 8016252:	4688      	mov	r8, r1
 8016254:	4614      	mov	r4, r2
 8016256:	2600      	movs	r6, #0
 8016258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801625c:	f1b9 0901 	subs.w	r9, r9, #1
 8016260:	d505      	bpl.n	801626e <_fwalk_sglue+0x22>
 8016262:	6824      	ldr	r4, [r4, #0]
 8016264:	2c00      	cmp	r4, #0
 8016266:	d1f7      	bne.n	8016258 <_fwalk_sglue+0xc>
 8016268:	4630      	mov	r0, r6
 801626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801626e:	89ab      	ldrh	r3, [r5, #12]
 8016270:	2b01      	cmp	r3, #1
 8016272:	d907      	bls.n	8016284 <_fwalk_sglue+0x38>
 8016274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016278:	3301      	adds	r3, #1
 801627a:	d003      	beq.n	8016284 <_fwalk_sglue+0x38>
 801627c:	4629      	mov	r1, r5
 801627e:	4638      	mov	r0, r7
 8016280:	47c0      	blx	r8
 8016282:	4306      	orrs	r6, r0
 8016284:	3568      	adds	r5, #104	@ 0x68
 8016286:	e7e9      	b.n	801625c <_fwalk_sglue+0x10>

08016288 <iprintf>:
 8016288:	b40f      	push	{r0, r1, r2, r3}
 801628a:	b507      	push	{r0, r1, r2, lr}
 801628c:	4906      	ldr	r1, [pc, #24]	@ (80162a8 <iprintf+0x20>)
 801628e:	ab04      	add	r3, sp, #16
 8016290:	6808      	ldr	r0, [r1, #0]
 8016292:	f853 2b04 	ldr.w	r2, [r3], #4
 8016296:	6881      	ldr	r1, [r0, #8]
 8016298:	9301      	str	r3, [sp, #4]
 801629a:	f000 fca9 	bl	8016bf0 <_vfiprintf_r>
 801629e:	b003      	add	sp, #12
 80162a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80162a4:	b004      	add	sp, #16
 80162a6:	4770      	bx	lr
 80162a8:	20000138 	.word	0x20000138

080162ac <putchar>:
 80162ac:	4b02      	ldr	r3, [pc, #8]	@ (80162b8 <putchar+0xc>)
 80162ae:	4601      	mov	r1, r0
 80162b0:	6818      	ldr	r0, [r3, #0]
 80162b2:	6882      	ldr	r2, [r0, #8]
 80162b4:	f001 b850 	b.w	8017358 <_putc_r>
 80162b8:	20000138 	.word	0x20000138

080162bc <_puts_r>:
 80162bc:	6a03      	ldr	r3, [r0, #32]
 80162be:	b570      	push	{r4, r5, r6, lr}
 80162c0:	6884      	ldr	r4, [r0, #8]
 80162c2:	4605      	mov	r5, r0
 80162c4:	460e      	mov	r6, r1
 80162c6:	b90b      	cbnz	r3, 80162cc <_puts_r+0x10>
 80162c8:	f7ff ffa8 	bl	801621c <__sinit>
 80162cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80162ce:	07db      	lsls	r3, r3, #31
 80162d0:	d405      	bmi.n	80162de <_puts_r+0x22>
 80162d2:	89a3      	ldrh	r3, [r4, #12]
 80162d4:	0598      	lsls	r0, r3, #22
 80162d6:	d402      	bmi.n	80162de <_puts_r+0x22>
 80162d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162da:	f000 f9fe 	bl	80166da <__retarget_lock_acquire_recursive>
 80162de:	89a3      	ldrh	r3, [r4, #12]
 80162e0:	0719      	lsls	r1, r3, #28
 80162e2:	d502      	bpl.n	80162ea <_puts_r+0x2e>
 80162e4:	6923      	ldr	r3, [r4, #16]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d135      	bne.n	8016356 <_puts_r+0x9a>
 80162ea:	4621      	mov	r1, r4
 80162ec:	4628      	mov	r0, r5
 80162ee:	f000 f8fd 	bl	80164ec <__swsetup_r>
 80162f2:	b380      	cbz	r0, 8016356 <_puts_r+0x9a>
 80162f4:	f04f 35ff 	mov.w	r5, #4294967295
 80162f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80162fa:	07da      	lsls	r2, r3, #31
 80162fc:	d405      	bmi.n	801630a <_puts_r+0x4e>
 80162fe:	89a3      	ldrh	r3, [r4, #12]
 8016300:	059b      	lsls	r3, r3, #22
 8016302:	d402      	bmi.n	801630a <_puts_r+0x4e>
 8016304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016306:	f000 f9e9 	bl	80166dc <__retarget_lock_release_recursive>
 801630a:	4628      	mov	r0, r5
 801630c:	bd70      	pop	{r4, r5, r6, pc}
 801630e:	2b00      	cmp	r3, #0
 8016310:	da04      	bge.n	801631c <_puts_r+0x60>
 8016312:	69a2      	ldr	r2, [r4, #24]
 8016314:	429a      	cmp	r2, r3
 8016316:	dc17      	bgt.n	8016348 <_puts_r+0x8c>
 8016318:	290a      	cmp	r1, #10
 801631a:	d015      	beq.n	8016348 <_puts_r+0x8c>
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	1c5a      	adds	r2, r3, #1
 8016320:	6022      	str	r2, [r4, #0]
 8016322:	7019      	strb	r1, [r3, #0]
 8016324:	68a3      	ldr	r3, [r4, #8]
 8016326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801632a:	3b01      	subs	r3, #1
 801632c:	60a3      	str	r3, [r4, #8]
 801632e:	2900      	cmp	r1, #0
 8016330:	d1ed      	bne.n	801630e <_puts_r+0x52>
 8016332:	2b00      	cmp	r3, #0
 8016334:	da11      	bge.n	801635a <_puts_r+0x9e>
 8016336:	4622      	mov	r2, r4
 8016338:	210a      	movs	r1, #10
 801633a:	4628      	mov	r0, r5
 801633c:	f000 f898 	bl	8016470 <__swbuf_r>
 8016340:	3001      	adds	r0, #1
 8016342:	d0d7      	beq.n	80162f4 <_puts_r+0x38>
 8016344:	250a      	movs	r5, #10
 8016346:	e7d7      	b.n	80162f8 <_puts_r+0x3c>
 8016348:	4622      	mov	r2, r4
 801634a:	4628      	mov	r0, r5
 801634c:	f000 f890 	bl	8016470 <__swbuf_r>
 8016350:	3001      	adds	r0, #1
 8016352:	d1e7      	bne.n	8016324 <_puts_r+0x68>
 8016354:	e7ce      	b.n	80162f4 <_puts_r+0x38>
 8016356:	3e01      	subs	r6, #1
 8016358:	e7e4      	b.n	8016324 <_puts_r+0x68>
 801635a:	6823      	ldr	r3, [r4, #0]
 801635c:	1c5a      	adds	r2, r3, #1
 801635e:	6022      	str	r2, [r4, #0]
 8016360:	220a      	movs	r2, #10
 8016362:	701a      	strb	r2, [r3, #0]
 8016364:	e7ee      	b.n	8016344 <_puts_r+0x88>
	...

08016368 <puts>:
 8016368:	4b02      	ldr	r3, [pc, #8]	@ (8016374 <puts+0xc>)
 801636a:	4601      	mov	r1, r0
 801636c:	6818      	ldr	r0, [r3, #0]
 801636e:	f7ff bfa5 	b.w	80162bc <_puts_r>
 8016372:	bf00      	nop
 8016374:	20000138 	.word	0x20000138

08016378 <__sread>:
 8016378:	b510      	push	{r4, lr}
 801637a:	460c      	mov	r4, r1
 801637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016380:	f000 f95c 	bl	801663c <_read_r>
 8016384:	2800      	cmp	r0, #0
 8016386:	bfab      	itete	ge
 8016388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801638a:	89a3      	ldrhlt	r3, [r4, #12]
 801638c:	181b      	addge	r3, r3, r0
 801638e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016392:	bfac      	ite	ge
 8016394:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016396:	81a3      	strhlt	r3, [r4, #12]
 8016398:	bd10      	pop	{r4, pc}

0801639a <__swrite>:
 801639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801639e:	461f      	mov	r7, r3
 80163a0:	898b      	ldrh	r3, [r1, #12]
 80163a2:	05db      	lsls	r3, r3, #23
 80163a4:	4605      	mov	r5, r0
 80163a6:	460c      	mov	r4, r1
 80163a8:	4616      	mov	r6, r2
 80163aa:	d505      	bpl.n	80163b8 <__swrite+0x1e>
 80163ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163b0:	2302      	movs	r3, #2
 80163b2:	2200      	movs	r2, #0
 80163b4:	f000 f930 	bl	8016618 <_lseek_r>
 80163b8:	89a3      	ldrh	r3, [r4, #12]
 80163ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80163c2:	81a3      	strh	r3, [r4, #12]
 80163c4:	4632      	mov	r2, r6
 80163c6:	463b      	mov	r3, r7
 80163c8:	4628      	mov	r0, r5
 80163ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ce:	f000 b947 	b.w	8016660 <_write_r>

080163d2 <__sseek>:
 80163d2:	b510      	push	{r4, lr}
 80163d4:	460c      	mov	r4, r1
 80163d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163da:	f000 f91d 	bl	8016618 <_lseek_r>
 80163de:	1c43      	adds	r3, r0, #1
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	bf15      	itete	ne
 80163e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80163e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80163ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80163ee:	81a3      	strheq	r3, [r4, #12]
 80163f0:	bf18      	it	ne
 80163f2:	81a3      	strhne	r3, [r4, #12]
 80163f4:	bd10      	pop	{r4, pc}

080163f6 <__sclose>:
 80163f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163fa:	f000 b8fd 	b.w	80165f8 <_close_r>

080163fe <_vsniprintf_r>:
 80163fe:	b530      	push	{r4, r5, lr}
 8016400:	4614      	mov	r4, r2
 8016402:	2c00      	cmp	r4, #0
 8016404:	b09b      	sub	sp, #108	@ 0x6c
 8016406:	4605      	mov	r5, r0
 8016408:	461a      	mov	r2, r3
 801640a:	da05      	bge.n	8016418 <_vsniprintf_r+0x1a>
 801640c:	238b      	movs	r3, #139	@ 0x8b
 801640e:	6003      	str	r3, [r0, #0]
 8016410:	f04f 30ff 	mov.w	r0, #4294967295
 8016414:	b01b      	add	sp, #108	@ 0x6c
 8016416:	bd30      	pop	{r4, r5, pc}
 8016418:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801641c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016420:	bf14      	ite	ne
 8016422:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016426:	4623      	moveq	r3, r4
 8016428:	9302      	str	r3, [sp, #8]
 801642a:	9305      	str	r3, [sp, #20]
 801642c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016430:	9100      	str	r1, [sp, #0]
 8016432:	9104      	str	r1, [sp, #16]
 8016434:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016438:	4669      	mov	r1, sp
 801643a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801643c:	f000 fab2 	bl	80169a4 <_svfiprintf_r>
 8016440:	1c43      	adds	r3, r0, #1
 8016442:	bfbc      	itt	lt
 8016444:	238b      	movlt	r3, #139	@ 0x8b
 8016446:	602b      	strlt	r3, [r5, #0]
 8016448:	2c00      	cmp	r4, #0
 801644a:	d0e3      	beq.n	8016414 <_vsniprintf_r+0x16>
 801644c:	9b00      	ldr	r3, [sp, #0]
 801644e:	2200      	movs	r2, #0
 8016450:	701a      	strb	r2, [r3, #0]
 8016452:	e7df      	b.n	8016414 <_vsniprintf_r+0x16>

08016454 <vsniprintf>:
 8016454:	b507      	push	{r0, r1, r2, lr}
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	4613      	mov	r3, r2
 801645a:	460a      	mov	r2, r1
 801645c:	4601      	mov	r1, r0
 801645e:	4803      	ldr	r0, [pc, #12]	@ (801646c <vsniprintf+0x18>)
 8016460:	6800      	ldr	r0, [r0, #0]
 8016462:	f7ff ffcc 	bl	80163fe <_vsniprintf_r>
 8016466:	b003      	add	sp, #12
 8016468:	f85d fb04 	ldr.w	pc, [sp], #4
 801646c:	20000138 	.word	0x20000138

08016470 <__swbuf_r>:
 8016470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016472:	460e      	mov	r6, r1
 8016474:	4614      	mov	r4, r2
 8016476:	4605      	mov	r5, r0
 8016478:	b118      	cbz	r0, 8016482 <__swbuf_r+0x12>
 801647a:	6a03      	ldr	r3, [r0, #32]
 801647c:	b90b      	cbnz	r3, 8016482 <__swbuf_r+0x12>
 801647e:	f7ff fecd 	bl	801621c <__sinit>
 8016482:	69a3      	ldr	r3, [r4, #24]
 8016484:	60a3      	str	r3, [r4, #8]
 8016486:	89a3      	ldrh	r3, [r4, #12]
 8016488:	071a      	lsls	r2, r3, #28
 801648a:	d501      	bpl.n	8016490 <__swbuf_r+0x20>
 801648c:	6923      	ldr	r3, [r4, #16]
 801648e:	b943      	cbnz	r3, 80164a2 <__swbuf_r+0x32>
 8016490:	4621      	mov	r1, r4
 8016492:	4628      	mov	r0, r5
 8016494:	f000 f82a 	bl	80164ec <__swsetup_r>
 8016498:	b118      	cbz	r0, 80164a2 <__swbuf_r+0x32>
 801649a:	f04f 37ff 	mov.w	r7, #4294967295
 801649e:	4638      	mov	r0, r7
 80164a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a2:	6823      	ldr	r3, [r4, #0]
 80164a4:	6922      	ldr	r2, [r4, #16]
 80164a6:	1a98      	subs	r0, r3, r2
 80164a8:	6963      	ldr	r3, [r4, #20]
 80164aa:	b2f6      	uxtb	r6, r6
 80164ac:	4283      	cmp	r3, r0
 80164ae:	4637      	mov	r7, r6
 80164b0:	dc05      	bgt.n	80164be <__swbuf_r+0x4e>
 80164b2:	4621      	mov	r1, r4
 80164b4:	4628      	mov	r0, r5
 80164b6:	f000 fec5 	bl	8017244 <_fflush_r>
 80164ba:	2800      	cmp	r0, #0
 80164bc:	d1ed      	bne.n	801649a <__swbuf_r+0x2a>
 80164be:	68a3      	ldr	r3, [r4, #8]
 80164c0:	3b01      	subs	r3, #1
 80164c2:	60a3      	str	r3, [r4, #8]
 80164c4:	6823      	ldr	r3, [r4, #0]
 80164c6:	1c5a      	adds	r2, r3, #1
 80164c8:	6022      	str	r2, [r4, #0]
 80164ca:	701e      	strb	r6, [r3, #0]
 80164cc:	6962      	ldr	r2, [r4, #20]
 80164ce:	1c43      	adds	r3, r0, #1
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d004      	beq.n	80164de <__swbuf_r+0x6e>
 80164d4:	89a3      	ldrh	r3, [r4, #12]
 80164d6:	07db      	lsls	r3, r3, #31
 80164d8:	d5e1      	bpl.n	801649e <__swbuf_r+0x2e>
 80164da:	2e0a      	cmp	r6, #10
 80164dc:	d1df      	bne.n	801649e <__swbuf_r+0x2e>
 80164de:	4621      	mov	r1, r4
 80164e0:	4628      	mov	r0, r5
 80164e2:	f000 feaf 	bl	8017244 <_fflush_r>
 80164e6:	2800      	cmp	r0, #0
 80164e8:	d0d9      	beq.n	801649e <__swbuf_r+0x2e>
 80164ea:	e7d6      	b.n	801649a <__swbuf_r+0x2a>

080164ec <__swsetup_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	4b29      	ldr	r3, [pc, #164]	@ (8016594 <__swsetup_r+0xa8>)
 80164f0:	4605      	mov	r5, r0
 80164f2:	6818      	ldr	r0, [r3, #0]
 80164f4:	460c      	mov	r4, r1
 80164f6:	b118      	cbz	r0, 8016500 <__swsetup_r+0x14>
 80164f8:	6a03      	ldr	r3, [r0, #32]
 80164fa:	b90b      	cbnz	r3, 8016500 <__swsetup_r+0x14>
 80164fc:	f7ff fe8e 	bl	801621c <__sinit>
 8016500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016504:	0719      	lsls	r1, r3, #28
 8016506:	d422      	bmi.n	801654e <__swsetup_r+0x62>
 8016508:	06da      	lsls	r2, r3, #27
 801650a:	d407      	bmi.n	801651c <__swsetup_r+0x30>
 801650c:	2209      	movs	r2, #9
 801650e:	602a      	str	r2, [r5, #0]
 8016510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016514:	81a3      	strh	r3, [r4, #12]
 8016516:	f04f 30ff 	mov.w	r0, #4294967295
 801651a:	e033      	b.n	8016584 <__swsetup_r+0x98>
 801651c:	0758      	lsls	r0, r3, #29
 801651e:	d512      	bpl.n	8016546 <__swsetup_r+0x5a>
 8016520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016522:	b141      	cbz	r1, 8016536 <__swsetup_r+0x4a>
 8016524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016528:	4299      	cmp	r1, r3
 801652a:	d002      	beq.n	8016532 <__swsetup_r+0x46>
 801652c:	4628      	mov	r0, r5
 801652e:	f000 f8e5 	bl	80166fc <_free_r>
 8016532:	2300      	movs	r3, #0
 8016534:	6363      	str	r3, [r4, #52]	@ 0x34
 8016536:	89a3      	ldrh	r3, [r4, #12]
 8016538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801653c:	81a3      	strh	r3, [r4, #12]
 801653e:	2300      	movs	r3, #0
 8016540:	6063      	str	r3, [r4, #4]
 8016542:	6923      	ldr	r3, [r4, #16]
 8016544:	6023      	str	r3, [r4, #0]
 8016546:	89a3      	ldrh	r3, [r4, #12]
 8016548:	f043 0308 	orr.w	r3, r3, #8
 801654c:	81a3      	strh	r3, [r4, #12]
 801654e:	6923      	ldr	r3, [r4, #16]
 8016550:	b94b      	cbnz	r3, 8016566 <__swsetup_r+0x7a>
 8016552:	89a3      	ldrh	r3, [r4, #12]
 8016554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801655c:	d003      	beq.n	8016566 <__swsetup_r+0x7a>
 801655e:	4621      	mov	r1, r4
 8016560:	4628      	mov	r0, r5
 8016562:	f000 febd 	bl	80172e0 <__smakebuf_r>
 8016566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801656a:	f013 0201 	ands.w	r2, r3, #1
 801656e:	d00a      	beq.n	8016586 <__swsetup_r+0x9a>
 8016570:	2200      	movs	r2, #0
 8016572:	60a2      	str	r2, [r4, #8]
 8016574:	6962      	ldr	r2, [r4, #20]
 8016576:	4252      	negs	r2, r2
 8016578:	61a2      	str	r2, [r4, #24]
 801657a:	6922      	ldr	r2, [r4, #16]
 801657c:	b942      	cbnz	r2, 8016590 <__swsetup_r+0xa4>
 801657e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016582:	d1c5      	bne.n	8016510 <__swsetup_r+0x24>
 8016584:	bd38      	pop	{r3, r4, r5, pc}
 8016586:	0799      	lsls	r1, r3, #30
 8016588:	bf58      	it	pl
 801658a:	6962      	ldrpl	r2, [r4, #20]
 801658c:	60a2      	str	r2, [r4, #8]
 801658e:	e7f4      	b.n	801657a <__swsetup_r+0x8e>
 8016590:	2000      	movs	r0, #0
 8016592:	e7f7      	b.n	8016584 <__swsetup_r+0x98>
 8016594:	20000138 	.word	0x20000138

08016598 <memset>:
 8016598:	4402      	add	r2, r0
 801659a:	4603      	mov	r3, r0
 801659c:	4293      	cmp	r3, r2
 801659e:	d100      	bne.n	80165a2 <memset+0xa>
 80165a0:	4770      	bx	lr
 80165a2:	f803 1b01 	strb.w	r1, [r3], #1
 80165a6:	e7f9      	b.n	801659c <memset+0x4>

080165a8 <strncmp>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	b16a      	cbz	r2, 80165c8 <strncmp+0x20>
 80165ac:	3901      	subs	r1, #1
 80165ae:	1884      	adds	r4, r0, r2
 80165b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d103      	bne.n	80165c4 <strncmp+0x1c>
 80165bc:	42a0      	cmp	r0, r4
 80165be:	d001      	beq.n	80165c4 <strncmp+0x1c>
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	d1f5      	bne.n	80165b0 <strncmp+0x8>
 80165c4:	1ad0      	subs	r0, r2, r3
 80165c6:	bd10      	pop	{r4, pc}
 80165c8:	4610      	mov	r0, r2
 80165ca:	e7fc      	b.n	80165c6 <strncmp+0x1e>

080165cc <strrchr>:
 80165cc:	b538      	push	{r3, r4, r5, lr}
 80165ce:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80165d2:	4603      	mov	r3, r0
 80165d4:	d10e      	bne.n	80165f4 <strrchr+0x28>
 80165d6:	4621      	mov	r1, r4
 80165d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165dc:	f000 bf0a 	b.w	80173f4 <strchr>
 80165e0:	1c43      	adds	r3, r0, #1
 80165e2:	4605      	mov	r5, r0
 80165e4:	4621      	mov	r1, r4
 80165e6:	4618      	mov	r0, r3
 80165e8:	f000 ff04 	bl	80173f4 <strchr>
 80165ec:	2800      	cmp	r0, #0
 80165ee:	d1f7      	bne.n	80165e0 <strrchr+0x14>
 80165f0:	4628      	mov	r0, r5
 80165f2:	bd38      	pop	{r3, r4, r5, pc}
 80165f4:	2500      	movs	r5, #0
 80165f6:	e7f5      	b.n	80165e4 <strrchr+0x18>

080165f8 <_close_r>:
 80165f8:	b538      	push	{r3, r4, r5, lr}
 80165fa:	4d06      	ldr	r5, [pc, #24]	@ (8016614 <_close_r+0x1c>)
 80165fc:	2300      	movs	r3, #0
 80165fe:	4604      	mov	r4, r0
 8016600:	4608      	mov	r0, r1
 8016602:	602b      	str	r3, [r5, #0]
 8016604:	f7ee f881 	bl	800470a <_close>
 8016608:	1c43      	adds	r3, r0, #1
 801660a:	d102      	bne.n	8016612 <_close_r+0x1a>
 801660c:	682b      	ldr	r3, [r5, #0]
 801660e:	b103      	cbz	r3, 8016612 <_close_r+0x1a>
 8016610:	6023      	str	r3, [r4, #0]
 8016612:	bd38      	pop	{r3, r4, r5, pc}
 8016614:	20002c70 	.word	0x20002c70

08016618 <_lseek_r>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4d07      	ldr	r5, [pc, #28]	@ (8016638 <_lseek_r+0x20>)
 801661c:	4604      	mov	r4, r0
 801661e:	4608      	mov	r0, r1
 8016620:	4611      	mov	r1, r2
 8016622:	2200      	movs	r2, #0
 8016624:	602a      	str	r2, [r5, #0]
 8016626:	461a      	mov	r2, r3
 8016628:	f7ee f896 	bl	8004758 <_lseek>
 801662c:	1c43      	adds	r3, r0, #1
 801662e:	d102      	bne.n	8016636 <_lseek_r+0x1e>
 8016630:	682b      	ldr	r3, [r5, #0]
 8016632:	b103      	cbz	r3, 8016636 <_lseek_r+0x1e>
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	bd38      	pop	{r3, r4, r5, pc}
 8016638:	20002c70 	.word	0x20002c70

0801663c <_read_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4d07      	ldr	r5, [pc, #28]	@ (801665c <_read_r+0x20>)
 8016640:	4604      	mov	r4, r0
 8016642:	4608      	mov	r0, r1
 8016644:	4611      	mov	r1, r2
 8016646:	2200      	movs	r2, #0
 8016648:	602a      	str	r2, [r5, #0]
 801664a:	461a      	mov	r2, r3
 801664c:	f7ee f840 	bl	80046d0 <_read>
 8016650:	1c43      	adds	r3, r0, #1
 8016652:	d102      	bne.n	801665a <_read_r+0x1e>
 8016654:	682b      	ldr	r3, [r5, #0]
 8016656:	b103      	cbz	r3, 801665a <_read_r+0x1e>
 8016658:	6023      	str	r3, [r4, #0]
 801665a:	bd38      	pop	{r3, r4, r5, pc}
 801665c:	20002c70 	.word	0x20002c70

08016660 <_write_r>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4d07      	ldr	r5, [pc, #28]	@ (8016680 <_write_r+0x20>)
 8016664:	4604      	mov	r4, r0
 8016666:	4608      	mov	r0, r1
 8016668:	4611      	mov	r1, r2
 801666a:	2200      	movs	r2, #0
 801666c:	602a      	str	r2, [r5, #0]
 801666e:	461a      	mov	r2, r3
 8016670:	f7fb ff36 	bl	80124e0 <_write>
 8016674:	1c43      	adds	r3, r0, #1
 8016676:	d102      	bne.n	801667e <_write_r+0x1e>
 8016678:	682b      	ldr	r3, [r5, #0]
 801667a:	b103      	cbz	r3, 801667e <_write_r+0x1e>
 801667c:	6023      	str	r3, [r4, #0]
 801667e:	bd38      	pop	{r3, r4, r5, pc}
 8016680:	20002c70 	.word	0x20002c70

08016684 <__errno>:
 8016684:	4b01      	ldr	r3, [pc, #4]	@ (801668c <__errno+0x8>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop
 801668c:	20000138 	.word	0x20000138

08016690 <__libc_init_array>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	4d0d      	ldr	r5, [pc, #52]	@ (80166c8 <__libc_init_array+0x38>)
 8016694:	4c0d      	ldr	r4, [pc, #52]	@ (80166cc <__libc_init_array+0x3c>)
 8016696:	1b64      	subs	r4, r4, r5
 8016698:	10a4      	asrs	r4, r4, #2
 801669a:	2600      	movs	r6, #0
 801669c:	42a6      	cmp	r6, r4
 801669e:	d109      	bne.n	80166b4 <__libc_init_array+0x24>
 80166a0:	4d0b      	ldr	r5, [pc, #44]	@ (80166d0 <__libc_init_array+0x40>)
 80166a2:	4c0c      	ldr	r4, [pc, #48]	@ (80166d4 <__libc_init_array+0x44>)
 80166a4:	f000 ff1c 	bl	80174e0 <_init>
 80166a8:	1b64      	subs	r4, r4, r5
 80166aa:	10a4      	asrs	r4, r4, #2
 80166ac:	2600      	movs	r6, #0
 80166ae:	42a6      	cmp	r6, r4
 80166b0:	d105      	bne.n	80166be <__libc_init_array+0x2e>
 80166b2:	bd70      	pop	{r4, r5, r6, pc}
 80166b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80166b8:	4798      	blx	r3
 80166ba:	3601      	adds	r6, #1
 80166bc:	e7ee      	b.n	801669c <__libc_init_array+0xc>
 80166be:	f855 3b04 	ldr.w	r3, [r5], #4
 80166c2:	4798      	blx	r3
 80166c4:	3601      	adds	r6, #1
 80166c6:	e7f2      	b.n	80166ae <__libc_init_array+0x1e>
 80166c8:	0801922c 	.word	0x0801922c
 80166cc:	0801922c 	.word	0x0801922c
 80166d0:	0801922c 	.word	0x0801922c
 80166d4:	08019230 	.word	0x08019230

080166d8 <__retarget_lock_init_recursive>:
 80166d8:	4770      	bx	lr

080166da <__retarget_lock_acquire_recursive>:
 80166da:	4770      	bx	lr

080166dc <__retarget_lock_release_recursive>:
 80166dc:	4770      	bx	lr

080166de <memcpy>:
 80166de:	440a      	add	r2, r1
 80166e0:	4291      	cmp	r1, r2
 80166e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80166e6:	d100      	bne.n	80166ea <memcpy+0xc>
 80166e8:	4770      	bx	lr
 80166ea:	b510      	push	{r4, lr}
 80166ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166f4:	4291      	cmp	r1, r2
 80166f6:	d1f9      	bne.n	80166ec <memcpy+0xe>
 80166f8:	bd10      	pop	{r4, pc}
	...

080166fc <_free_r>:
 80166fc:	b538      	push	{r3, r4, r5, lr}
 80166fe:	4605      	mov	r5, r0
 8016700:	2900      	cmp	r1, #0
 8016702:	d041      	beq.n	8016788 <_free_r+0x8c>
 8016704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016708:	1f0c      	subs	r4, r1, #4
 801670a:	2b00      	cmp	r3, #0
 801670c:	bfb8      	it	lt
 801670e:	18e4      	addlt	r4, r4, r3
 8016710:	f000 f8e0 	bl	80168d4 <__malloc_lock>
 8016714:	4a1d      	ldr	r2, [pc, #116]	@ (801678c <_free_r+0x90>)
 8016716:	6813      	ldr	r3, [r2, #0]
 8016718:	b933      	cbnz	r3, 8016728 <_free_r+0x2c>
 801671a:	6063      	str	r3, [r4, #4]
 801671c:	6014      	str	r4, [r2, #0]
 801671e:	4628      	mov	r0, r5
 8016720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016724:	f000 b8dc 	b.w	80168e0 <__malloc_unlock>
 8016728:	42a3      	cmp	r3, r4
 801672a:	d908      	bls.n	801673e <_free_r+0x42>
 801672c:	6820      	ldr	r0, [r4, #0]
 801672e:	1821      	adds	r1, r4, r0
 8016730:	428b      	cmp	r3, r1
 8016732:	bf01      	itttt	eq
 8016734:	6819      	ldreq	r1, [r3, #0]
 8016736:	685b      	ldreq	r3, [r3, #4]
 8016738:	1809      	addeq	r1, r1, r0
 801673a:	6021      	streq	r1, [r4, #0]
 801673c:	e7ed      	b.n	801671a <_free_r+0x1e>
 801673e:	461a      	mov	r2, r3
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	b10b      	cbz	r3, 8016748 <_free_r+0x4c>
 8016744:	42a3      	cmp	r3, r4
 8016746:	d9fa      	bls.n	801673e <_free_r+0x42>
 8016748:	6811      	ldr	r1, [r2, #0]
 801674a:	1850      	adds	r0, r2, r1
 801674c:	42a0      	cmp	r0, r4
 801674e:	d10b      	bne.n	8016768 <_free_r+0x6c>
 8016750:	6820      	ldr	r0, [r4, #0]
 8016752:	4401      	add	r1, r0
 8016754:	1850      	adds	r0, r2, r1
 8016756:	4283      	cmp	r3, r0
 8016758:	6011      	str	r1, [r2, #0]
 801675a:	d1e0      	bne.n	801671e <_free_r+0x22>
 801675c:	6818      	ldr	r0, [r3, #0]
 801675e:	685b      	ldr	r3, [r3, #4]
 8016760:	6053      	str	r3, [r2, #4]
 8016762:	4408      	add	r0, r1
 8016764:	6010      	str	r0, [r2, #0]
 8016766:	e7da      	b.n	801671e <_free_r+0x22>
 8016768:	d902      	bls.n	8016770 <_free_r+0x74>
 801676a:	230c      	movs	r3, #12
 801676c:	602b      	str	r3, [r5, #0]
 801676e:	e7d6      	b.n	801671e <_free_r+0x22>
 8016770:	6820      	ldr	r0, [r4, #0]
 8016772:	1821      	adds	r1, r4, r0
 8016774:	428b      	cmp	r3, r1
 8016776:	bf04      	itt	eq
 8016778:	6819      	ldreq	r1, [r3, #0]
 801677a:	685b      	ldreq	r3, [r3, #4]
 801677c:	6063      	str	r3, [r4, #4]
 801677e:	bf04      	itt	eq
 8016780:	1809      	addeq	r1, r1, r0
 8016782:	6021      	streq	r1, [r4, #0]
 8016784:	6054      	str	r4, [r2, #4]
 8016786:	e7ca      	b.n	801671e <_free_r+0x22>
 8016788:	bd38      	pop	{r3, r4, r5, pc}
 801678a:	bf00      	nop
 801678c:	20002c7c 	.word	0x20002c7c

08016790 <sbrk_aligned>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	4e0f      	ldr	r6, [pc, #60]	@ (80167d0 <sbrk_aligned+0x40>)
 8016794:	460c      	mov	r4, r1
 8016796:	6831      	ldr	r1, [r6, #0]
 8016798:	4605      	mov	r5, r0
 801679a:	b911      	cbnz	r1, 80167a2 <sbrk_aligned+0x12>
 801679c:	f000 fe5a 	bl	8017454 <_sbrk_r>
 80167a0:	6030      	str	r0, [r6, #0]
 80167a2:	4621      	mov	r1, r4
 80167a4:	4628      	mov	r0, r5
 80167a6:	f000 fe55 	bl	8017454 <_sbrk_r>
 80167aa:	1c43      	adds	r3, r0, #1
 80167ac:	d103      	bne.n	80167b6 <sbrk_aligned+0x26>
 80167ae:	f04f 34ff 	mov.w	r4, #4294967295
 80167b2:	4620      	mov	r0, r4
 80167b4:	bd70      	pop	{r4, r5, r6, pc}
 80167b6:	1cc4      	adds	r4, r0, #3
 80167b8:	f024 0403 	bic.w	r4, r4, #3
 80167bc:	42a0      	cmp	r0, r4
 80167be:	d0f8      	beq.n	80167b2 <sbrk_aligned+0x22>
 80167c0:	1a21      	subs	r1, r4, r0
 80167c2:	4628      	mov	r0, r5
 80167c4:	f000 fe46 	bl	8017454 <_sbrk_r>
 80167c8:	3001      	adds	r0, #1
 80167ca:	d1f2      	bne.n	80167b2 <sbrk_aligned+0x22>
 80167cc:	e7ef      	b.n	80167ae <sbrk_aligned+0x1e>
 80167ce:	bf00      	nop
 80167d0:	20002c78 	.word	0x20002c78

080167d4 <_malloc_r>:
 80167d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d8:	1ccd      	adds	r5, r1, #3
 80167da:	f025 0503 	bic.w	r5, r5, #3
 80167de:	3508      	adds	r5, #8
 80167e0:	2d0c      	cmp	r5, #12
 80167e2:	bf38      	it	cc
 80167e4:	250c      	movcc	r5, #12
 80167e6:	2d00      	cmp	r5, #0
 80167e8:	4606      	mov	r6, r0
 80167ea:	db01      	blt.n	80167f0 <_malloc_r+0x1c>
 80167ec:	42a9      	cmp	r1, r5
 80167ee:	d904      	bls.n	80167fa <_malloc_r+0x26>
 80167f0:	230c      	movs	r3, #12
 80167f2:	6033      	str	r3, [r6, #0]
 80167f4:	2000      	movs	r0, #0
 80167f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80168d0 <_malloc_r+0xfc>
 80167fe:	f000 f869 	bl	80168d4 <__malloc_lock>
 8016802:	f8d8 3000 	ldr.w	r3, [r8]
 8016806:	461c      	mov	r4, r3
 8016808:	bb44      	cbnz	r4, 801685c <_malloc_r+0x88>
 801680a:	4629      	mov	r1, r5
 801680c:	4630      	mov	r0, r6
 801680e:	f7ff ffbf 	bl	8016790 <sbrk_aligned>
 8016812:	1c43      	adds	r3, r0, #1
 8016814:	4604      	mov	r4, r0
 8016816:	d158      	bne.n	80168ca <_malloc_r+0xf6>
 8016818:	f8d8 4000 	ldr.w	r4, [r8]
 801681c:	4627      	mov	r7, r4
 801681e:	2f00      	cmp	r7, #0
 8016820:	d143      	bne.n	80168aa <_malloc_r+0xd6>
 8016822:	2c00      	cmp	r4, #0
 8016824:	d04b      	beq.n	80168be <_malloc_r+0xea>
 8016826:	6823      	ldr	r3, [r4, #0]
 8016828:	4639      	mov	r1, r7
 801682a:	4630      	mov	r0, r6
 801682c:	eb04 0903 	add.w	r9, r4, r3
 8016830:	f000 fe10 	bl	8017454 <_sbrk_r>
 8016834:	4581      	cmp	r9, r0
 8016836:	d142      	bne.n	80168be <_malloc_r+0xea>
 8016838:	6821      	ldr	r1, [r4, #0]
 801683a:	1a6d      	subs	r5, r5, r1
 801683c:	4629      	mov	r1, r5
 801683e:	4630      	mov	r0, r6
 8016840:	f7ff ffa6 	bl	8016790 <sbrk_aligned>
 8016844:	3001      	adds	r0, #1
 8016846:	d03a      	beq.n	80168be <_malloc_r+0xea>
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	442b      	add	r3, r5
 801684c:	6023      	str	r3, [r4, #0]
 801684e:	f8d8 3000 	ldr.w	r3, [r8]
 8016852:	685a      	ldr	r2, [r3, #4]
 8016854:	bb62      	cbnz	r2, 80168b0 <_malloc_r+0xdc>
 8016856:	f8c8 7000 	str.w	r7, [r8]
 801685a:	e00f      	b.n	801687c <_malloc_r+0xa8>
 801685c:	6822      	ldr	r2, [r4, #0]
 801685e:	1b52      	subs	r2, r2, r5
 8016860:	d420      	bmi.n	80168a4 <_malloc_r+0xd0>
 8016862:	2a0b      	cmp	r2, #11
 8016864:	d917      	bls.n	8016896 <_malloc_r+0xc2>
 8016866:	1961      	adds	r1, r4, r5
 8016868:	42a3      	cmp	r3, r4
 801686a:	6025      	str	r5, [r4, #0]
 801686c:	bf18      	it	ne
 801686e:	6059      	strne	r1, [r3, #4]
 8016870:	6863      	ldr	r3, [r4, #4]
 8016872:	bf08      	it	eq
 8016874:	f8c8 1000 	streq.w	r1, [r8]
 8016878:	5162      	str	r2, [r4, r5]
 801687a:	604b      	str	r3, [r1, #4]
 801687c:	4630      	mov	r0, r6
 801687e:	f000 f82f 	bl	80168e0 <__malloc_unlock>
 8016882:	f104 000b 	add.w	r0, r4, #11
 8016886:	1d23      	adds	r3, r4, #4
 8016888:	f020 0007 	bic.w	r0, r0, #7
 801688c:	1ac2      	subs	r2, r0, r3
 801688e:	bf1c      	itt	ne
 8016890:	1a1b      	subne	r3, r3, r0
 8016892:	50a3      	strne	r3, [r4, r2]
 8016894:	e7af      	b.n	80167f6 <_malloc_r+0x22>
 8016896:	6862      	ldr	r2, [r4, #4]
 8016898:	42a3      	cmp	r3, r4
 801689a:	bf0c      	ite	eq
 801689c:	f8c8 2000 	streq.w	r2, [r8]
 80168a0:	605a      	strne	r2, [r3, #4]
 80168a2:	e7eb      	b.n	801687c <_malloc_r+0xa8>
 80168a4:	4623      	mov	r3, r4
 80168a6:	6864      	ldr	r4, [r4, #4]
 80168a8:	e7ae      	b.n	8016808 <_malloc_r+0x34>
 80168aa:	463c      	mov	r4, r7
 80168ac:	687f      	ldr	r7, [r7, #4]
 80168ae:	e7b6      	b.n	801681e <_malloc_r+0x4a>
 80168b0:	461a      	mov	r2, r3
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	42a3      	cmp	r3, r4
 80168b6:	d1fb      	bne.n	80168b0 <_malloc_r+0xdc>
 80168b8:	2300      	movs	r3, #0
 80168ba:	6053      	str	r3, [r2, #4]
 80168bc:	e7de      	b.n	801687c <_malloc_r+0xa8>
 80168be:	230c      	movs	r3, #12
 80168c0:	6033      	str	r3, [r6, #0]
 80168c2:	4630      	mov	r0, r6
 80168c4:	f000 f80c 	bl	80168e0 <__malloc_unlock>
 80168c8:	e794      	b.n	80167f4 <_malloc_r+0x20>
 80168ca:	6005      	str	r5, [r0, #0]
 80168cc:	e7d6      	b.n	801687c <_malloc_r+0xa8>
 80168ce:	bf00      	nop
 80168d0:	20002c7c 	.word	0x20002c7c

080168d4 <__malloc_lock>:
 80168d4:	4801      	ldr	r0, [pc, #4]	@ (80168dc <__malloc_lock+0x8>)
 80168d6:	f7ff bf00 	b.w	80166da <__retarget_lock_acquire_recursive>
 80168da:	bf00      	nop
 80168dc:	20002c74 	.word	0x20002c74

080168e0 <__malloc_unlock>:
 80168e0:	4801      	ldr	r0, [pc, #4]	@ (80168e8 <__malloc_unlock+0x8>)
 80168e2:	f7ff befb 	b.w	80166dc <__retarget_lock_release_recursive>
 80168e6:	bf00      	nop
 80168e8:	20002c74 	.word	0x20002c74

080168ec <__ssputs_r>:
 80168ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168f0:	688e      	ldr	r6, [r1, #8]
 80168f2:	461f      	mov	r7, r3
 80168f4:	42be      	cmp	r6, r7
 80168f6:	680b      	ldr	r3, [r1, #0]
 80168f8:	4682      	mov	sl, r0
 80168fa:	460c      	mov	r4, r1
 80168fc:	4690      	mov	r8, r2
 80168fe:	d82d      	bhi.n	801695c <__ssputs_r+0x70>
 8016900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016908:	d026      	beq.n	8016958 <__ssputs_r+0x6c>
 801690a:	6965      	ldr	r5, [r4, #20]
 801690c:	6909      	ldr	r1, [r1, #16]
 801690e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016912:	eba3 0901 	sub.w	r9, r3, r1
 8016916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801691a:	1c7b      	adds	r3, r7, #1
 801691c:	444b      	add	r3, r9
 801691e:	106d      	asrs	r5, r5, #1
 8016920:	429d      	cmp	r5, r3
 8016922:	bf38      	it	cc
 8016924:	461d      	movcc	r5, r3
 8016926:	0553      	lsls	r3, r2, #21
 8016928:	d527      	bpl.n	801697a <__ssputs_r+0x8e>
 801692a:	4629      	mov	r1, r5
 801692c:	f7ff ff52 	bl	80167d4 <_malloc_r>
 8016930:	4606      	mov	r6, r0
 8016932:	b360      	cbz	r0, 801698e <__ssputs_r+0xa2>
 8016934:	6921      	ldr	r1, [r4, #16]
 8016936:	464a      	mov	r2, r9
 8016938:	f7ff fed1 	bl	80166de <memcpy>
 801693c:	89a3      	ldrh	r3, [r4, #12]
 801693e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016946:	81a3      	strh	r3, [r4, #12]
 8016948:	6126      	str	r6, [r4, #16]
 801694a:	6165      	str	r5, [r4, #20]
 801694c:	444e      	add	r6, r9
 801694e:	eba5 0509 	sub.w	r5, r5, r9
 8016952:	6026      	str	r6, [r4, #0]
 8016954:	60a5      	str	r5, [r4, #8]
 8016956:	463e      	mov	r6, r7
 8016958:	42be      	cmp	r6, r7
 801695a:	d900      	bls.n	801695e <__ssputs_r+0x72>
 801695c:	463e      	mov	r6, r7
 801695e:	6820      	ldr	r0, [r4, #0]
 8016960:	4632      	mov	r2, r6
 8016962:	4641      	mov	r1, r8
 8016964:	f000 fd2c 	bl	80173c0 <memmove>
 8016968:	68a3      	ldr	r3, [r4, #8]
 801696a:	1b9b      	subs	r3, r3, r6
 801696c:	60a3      	str	r3, [r4, #8]
 801696e:	6823      	ldr	r3, [r4, #0]
 8016970:	4433      	add	r3, r6
 8016972:	6023      	str	r3, [r4, #0]
 8016974:	2000      	movs	r0, #0
 8016976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801697a:	462a      	mov	r2, r5
 801697c:	f000 fd7a 	bl	8017474 <_realloc_r>
 8016980:	4606      	mov	r6, r0
 8016982:	2800      	cmp	r0, #0
 8016984:	d1e0      	bne.n	8016948 <__ssputs_r+0x5c>
 8016986:	6921      	ldr	r1, [r4, #16]
 8016988:	4650      	mov	r0, sl
 801698a:	f7ff feb7 	bl	80166fc <_free_r>
 801698e:	230c      	movs	r3, #12
 8016990:	f8ca 3000 	str.w	r3, [sl]
 8016994:	89a3      	ldrh	r3, [r4, #12]
 8016996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801699a:	81a3      	strh	r3, [r4, #12]
 801699c:	f04f 30ff 	mov.w	r0, #4294967295
 80169a0:	e7e9      	b.n	8016976 <__ssputs_r+0x8a>
	...

080169a4 <_svfiprintf_r>:
 80169a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a8:	4698      	mov	r8, r3
 80169aa:	898b      	ldrh	r3, [r1, #12]
 80169ac:	061b      	lsls	r3, r3, #24
 80169ae:	b09d      	sub	sp, #116	@ 0x74
 80169b0:	4607      	mov	r7, r0
 80169b2:	460d      	mov	r5, r1
 80169b4:	4614      	mov	r4, r2
 80169b6:	d510      	bpl.n	80169da <_svfiprintf_r+0x36>
 80169b8:	690b      	ldr	r3, [r1, #16]
 80169ba:	b973      	cbnz	r3, 80169da <_svfiprintf_r+0x36>
 80169bc:	2140      	movs	r1, #64	@ 0x40
 80169be:	f7ff ff09 	bl	80167d4 <_malloc_r>
 80169c2:	6028      	str	r0, [r5, #0]
 80169c4:	6128      	str	r0, [r5, #16]
 80169c6:	b930      	cbnz	r0, 80169d6 <_svfiprintf_r+0x32>
 80169c8:	230c      	movs	r3, #12
 80169ca:	603b      	str	r3, [r7, #0]
 80169cc:	f04f 30ff 	mov.w	r0, #4294967295
 80169d0:	b01d      	add	sp, #116	@ 0x74
 80169d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d6:	2340      	movs	r3, #64	@ 0x40
 80169d8:	616b      	str	r3, [r5, #20]
 80169da:	2300      	movs	r3, #0
 80169dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80169de:	2320      	movs	r3, #32
 80169e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80169e8:	2330      	movs	r3, #48	@ 0x30
 80169ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016b88 <_svfiprintf_r+0x1e4>
 80169ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80169f2:	f04f 0901 	mov.w	r9, #1
 80169f6:	4623      	mov	r3, r4
 80169f8:	469a      	mov	sl, r3
 80169fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169fe:	b10a      	cbz	r2, 8016a04 <_svfiprintf_r+0x60>
 8016a00:	2a25      	cmp	r2, #37	@ 0x25
 8016a02:	d1f9      	bne.n	80169f8 <_svfiprintf_r+0x54>
 8016a04:	ebba 0b04 	subs.w	fp, sl, r4
 8016a08:	d00b      	beq.n	8016a22 <_svfiprintf_r+0x7e>
 8016a0a:	465b      	mov	r3, fp
 8016a0c:	4622      	mov	r2, r4
 8016a0e:	4629      	mov	r1, r5
 8016a10:	4638      	mov	r0, r7
 8016a12:	f7ff ff6b 	bl	80168ec <__ssputs_r>
 8016a16:	3001      	adds	r0, #1
 8016a18:	f000 80a7 	beq.w	8016b6a <_svfiprintf_r+0x1c6>
 8016a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a1e:	445a      	add	r2, fp
 8016a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a22:	f89a 3000 	ldrb.w	r3, [sl]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	f000 809f 	beq.w	8016b6a <_svfiprintf_r+0x1c6>
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a36:	f10a 0a01 	add.w	sl, sl, #1
 8016a3a:	9304      	str	r3, [sp, #16]
 8016a3c:	9307      	str	r3, [sp, #28]
 8016a3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016a42:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a44:	4654      	mov	r4, sl
 8016a46:	2205      	movs	r2, #5
 8016a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a4c:	484e      	ldr	r0, [pc, #312]	@ (8016b88 <_svfiprintf_r+0x1e4>)
 8016a4e:	f7e9 fb9f 	bl	8000190 <memchr>
 8016a52:	9a04      	ldr	r2, [sp, #16]
 8016a54:	b9d8      	cbnz	r0, 8016a8e <_svfiprintf_r+0xea>
 8016a56:	06d0      	lsls	r0, r2, #27
 8016a58:	bf44      	itt	mi
 8016a5a:	2320      	movmi	r3, #32
 8016a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a60:	0711      	lsls	r1, r2, #28
 8016a62:	bf44      	itt	mi
 8016a64:	232b      	movmi	r3, #43	@ 0x2b
 8016a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8016a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a70:	d015      	beq.n	8016a9e <_svfiprintf_r+0xfa>
 8016a72:	9a07      	ldr	r2, [sp, #28]
 8016a74:	4654      	mov	r4, sl
 8016a76:	2000      	movs	r0, #0
 8016a78:	f04f 0c0a 	mov.w	ip, #10
 8016a7c:	4621      	mov	r1, r4
 8016a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a82:	3b30      	subs	r3, #48	@ 0x30
 8016a84:	2b09      	cmp	r3, #9
 8016a86:	d94b      	bls.n	8016b20 <_svfiprintf_r+0x17c>
 8016a88:	b1b0      	cbz	r0, 8016ab8 <_svfiprintf_r+0x114>
 8016a8a:	9207      	str	r2, [sp, #28]
 8016a8c:	e014      	b.n	8016ab8 <_svfiprintf_r+0x114>
 8016a8e:	eba0 0308 	sub.w	r3, r0, r8
 8016a92:	fa09 f303 	lsl.w	r3, r9, r3
 8016a96:	4313      	orrs	r3, r2
 8016a98:	9304      	str	r3, [sp, #16]
 8016a9a:	46a2      	mov	sl, r4
 8016a9c:	e7d2      	b.n	8016a44 <_svfiprintf_r+0xa0>
 8016a9e:	9b03      	ldr	r3, [sp, #12]
 8016aa0:	1d19      	adds	r1, r3, #4
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	9103      	str	r1, [sp, #12]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	bfbb      	ittet	lt
 8016aaa:	425b      	neglt	r3, r3
 8016aac:	f042 0202 	orrlt.w	r2, r2, #2
 8016ab0:	9307      	strge	r3, [sp, #28]
 8016ab2:	9307      	strlt	r3, [sp, #28]
 8016ab4:	bfb8      	it	lt
 8016ab6:	9204      	strlt	r2, [sp, #16]
 8016ab8:	7823      	ldrb	r3, [r4, #0]
 8016aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8016abc:	d10a      	bne.n	8016ad4 <_svfiprintf_r+0x130>
 8016abe:	7863      	ldrb	r3, [r4, #1]
 8016ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ac2:	d132      	bne.n	8016b2a <_svfiprintf_r+0x186>
 8016ac4:	9b03      	ldr	r3, [sp, #12]
 8016ac6:	1d1a      	adds	r2, r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	9203      	str	r2, [sp, #12]
 8016acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ad0:	3402      	adds	r4, #2
 8016ad2:	9305      	str	r3, [sp, #20]
 8016ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016b98 <_svfiprintf_r+0x1f4>
 8016ad8:	7821      	ldrb	r1, [r4, #0]
 8016ada:	2203      	movs	r2, #3
 8016adc:	4650      	mov	r0, sl
 8016ade:	f7e9 fb57 	bl	8000190 <memchr>
 8016ae2:	b138      	cbz	r0, 8016af4 <_svfiprintf_r+0x150>
 8016ae4:	9b04      	ldr	r3, [sp, #16]
 8016ae6:	eba0 000a 	sub.w	r0, r0, sl
 8016aea:	2240      	movs	r2, #64	@ 0x40
 8016aec:	4082      	lsls	r2, r0
 8016aee:	4313      	orrs	r3, r2
 8016af0:	3401      	adds	r4, #1
 8016af2:	9304      	str	r3, [sp, #16]
 8016af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016af8:	4824      	ldr	r0, [pc, #144]	@ (8016b8c <_svfiprintf_r+0x1e8>)
 8016afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016afe:	2206      	movs	r2, #6
 8016b00:	f7e9 fb46 	bl	8000190 <memchr>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d036      	beq.n	8016b76 <_svfiprintf_r+0x1d2>
 8016b08:	4b21      	ldr	r3, [pc, #132]	@ (8016b90 <_svfiprintf_r+0x1ec>)
 8016b0a:	bb1b      	cbnz	r3, 8016b54 <_svfiprintf_r+0x1b0>
 8016b0c:	9b03      	ldr	r3, [sp, #12]
 8016b0e:	3307      	adds	r3, #7
 8016b10:	f023 0307 	bic.w	r3, r3, #7
 8016b14:	3308      	adds	r3, #8
 8016b16:	9303      	str	r3, [sp, #12]
 8016b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b1a:	4433      	add	r3, r6
 8016b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b1e:	e76a      	b.n	80169f6 <_svfiprintf_r+0x52>
 8016b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b24:	460c      	mov	r4, r1
 8016b26:	2001      	movs	r0, #1
 8016b28:	e7a8      	b.n	8016a7c <_svfiprintf_r+0xd8>
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	3401      	adds	r4, #1
 8016b2e:	9305      	str	r3, [sp, #20]
 8016b30:	4619      	mov	r1, r3
 8016b32:	f04f 0c0a 	mov.w	ip, #10
 8016b36:	4620      	mov	r0, r4
 8016b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b3c:	3a30      	subs	r2, #48	@ 0x30
 8016b3e:	2a09      	cmp	r2, #9
 8016b40:	d903      	bls.n	8016b4a <_svfiprintf_r+0x1a6>
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d0c6      	beq.n	8016ad4 <_svfiprintf_r+0x130>
 8016b46:	9105      	str	r1, [sp, #20]
 8016b48:	e7c4      	b.n	8016ad4 <_svfiprintf_r+0x130>
 8016b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b4e:	4604      	mov	r4, r0
 8016b50:	2301      	movs	r3, #1
 8016b52:	e7f0      	b.n	8016b36 <_svfiprintf_r+0x192>
 8016b54:	ab03      	add	r3, sp, #12
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	462a      	mov	r2, r5
 8016b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8016b94 <_svfiprintf_r+0x1f0>)
 8016b5c:	a904      	add	r1, sp, #16
 8016b5e:	4638      	mov	r0, r7
 8016b60:	f3af 8000 	nop.w
 8016b64:	1c42      	adds	r2, r0, #1
 8016b66:	4606      	mov	r6, r0
 8016b68:	d1d6      	bne.n	8016b18 <_svfiprintf_r+0x174>
 8016b6a:	89ab      	ldrh	r3, [r5, #12]
 8016b6c:	065b      	lsls	r3, r3, #25
 8016b6e:	f53f af2d 	bmi.w	80169cc <_svfiprintf_r+0x28>
 8016b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b74:	e72c      	b.n	80169d0 <_svfiprintf_r+0x2c>
 8016b76:	ab03      	add	r3, sp, #12
 8016b78:	9300      	str	r3, [sp, #0]
 8016b7a:	462a      	mov	r2, r5
 8016b7c:	4b05      	ldr	r3, [pc, #20]	@ (8016b94 <_svfiprintf_r+0x1f0>)
 8016b7e:	a904      	add	r1, sp, #16
 8016b80:	4638      	mov	r0, r7
 8016b82:	f000 f9bb 	bl	8016efc <_printf_i>
 8016b86:	e7ed      	b.n	8016b64 <_svfiprintf_r+0x1c0>
 8016b88:	080191f0 	.word	0x080191f0
 8016b8c:	080191fa 	.word	0x080191fa
 8016b90:	00000000 	.word	0x00000000
 8016b94:	080168ed 	.word	0x080168ed
 8016b98:	080191f6 	.word	0x080191f6

08016b9c <__sfputc_r>:
 8016b9c:	6893      	ldr	r3, [r2, #8]
 8016b9e:	3b01      	subs	r3, #1
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	b410      	push	{r4}
 8016ba4:	6093      	str	r3, [r2, #8]
 8016ba6:	da08      	bge.n	8016bba <__sfputc_r+0x1e>
 8016ba8:	6994      	ldr	r4, [r2, #24]
 8016baa:	42a3      	cmp	r3, r4
 8016bac:	db01      	blt.n	8016bb2 <__sfputc_r+0x16>
 8016bae:	290a      	cmp	r1, #10
 8016bb0:	d103      	bne.n	8016bba <__sfputc_r+0x1e>
 8016bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bb6:	f7ff bc5b 	b.w	8016470 <__swbuf_r>
 8016bba:	6813      	ldr	r3, [r2, #0]
 8016bbc:	1c58      	adds	r0, r3, #1
 8016bbe:	6010      	str	r0, [r2, #0]
 8016bc0:	7019      	strb	r1, [r3, #0]
 8016bc2:	4608      	mov	r0, r1
 8016bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bc8:	4770      	bx	lr

08016bca <__sfputs_r>:
 8016bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bcc:	4606      	mov	r6, r0
 8016bce:	460f      	mov	r7, r1
 8016bd0:	4614      	mov	r4, r2
 8016bd2:	18d5      	adds	r5, r2, r3
 8016bd4:	42ac      	cmp	r4, r5
 8016bd6:	d101      	bne.n	8016bdc <__sfputs_r+0x12>
 8016bd8:	2000      	movs	r0, #0
 8016bda:	e007      	b.n	8016bec <__sfputs_r+0x22>
 8016bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016be0:	463a      	mov	r2, r7
 8016be2:	4630      	mov	r0, r6
 8016be4:	f7ff ffda 	bl	8016b9c <__sfputc_r>
 8016be8:	1c43      	adds	r3, r0, #1
 8016bea:	d1f3      	bne.n	8016bd4 <__sfputs_r+0xa>
 8016bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016bf0 <_vfiprintf_r>:
 8016bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf4:	460d      	mov	r5, r1
 8016bf6:	b09d      	sub	sp, #116	@ 0x74
 8016bf8:	4614      	mov	r4, r2
 8016bfa:	4698      	mov	r8, r3
 8016bfc:	4606      	mov	r6, r0
 8016bfe:	b118      	cbz	r0, 8016c08 <_vfiprintf_r+0x18>
 8016c00:	6a03      	ldr	r3, [r0, #32]
 8016c02:	b90b      	cbnz	r3, 8016c08 <_vfiprintf_r+0x18>
 8016c04:	f7ff fb0a 	bl	801621c <__sinit>
 8016c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c0a:	07d9      	lsls	r1, r3, #31
 8016c0c:	d405      	bmi.n	8016c1a <_vfiprintf_r+0x2a>
 8016c0e:	89ab      	ldrh	r3, [r5, #12]
 8016c10:	059a      	lsls	r2, r3, #22
 8016c12:	d402      	bmi.n	8016c1a <_vfiprintf_r+0x2a>
 8016c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c16:	f7ff fd60 	bl	80166da <__retarget_lock_acquire_recursive>
 8016c1a:	89ab      	ldrh	r3, [r5, #12]
 8016c1c:	071b      	lsls	r3, r3, #28
 8016c1e:	d501      	bpl.n	8016c24 <_vfiprintf_r+0x34>
 8016c20:	692b      	ldr	r3, [r5, #16]
 8016c22:	b99b      	cbnz	r3, 8016c4c <_vfiprintf_r+0x5c>
 8016c24:	4629      	mov	r1, r5
 8016c26:	4630      	mov	r0, r6
 8016c28:	f7ff fc60 	bl	80164ec <__swsetup_r>
 8016c2c:	b170      	cbz	r0, 8016c4c <_vfiprintf_r+0x5c>
 8016c2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c30:	07dc      	lsls	r4, r3, #31
 8016c32:	d504      	bpl.n	8016c3e <_vfiprintf_r+0x4e>
 8016c34:	f04f 30ff 	mov.w	r0, #4294967295
 8016c38:	b01d      	add	sp, #116	@ 0x74
 8016c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3e:	89ab      	ldrh	r3, [r5, #12]
 8016c40:	0598      	lsls	r0, r3, #22
 8016c42:	d4f7      	bmi.n	8016c34 <_vfiprintf_r+0x44>
 8016c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c46:	f7ff fd49 	bl	80166dc <__retarget_lock_release_recursive>
 8016c4a:	e7f3      	b.n	8016c34 <_vfiprintf_r+0x44>
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c50:	2320      	movs	r3, #32
 8016c52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c5a:	2330      	movs	r3, #48	@ 0x30
 8016c5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016e0c <_vfiprintf_r+0x21c>
 8016c60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c64:	f04f 0901 	mov.w	r9, #1
 8016c68:	4623      	mov	r3, r4
 8016c6a:	469a      	mov	sl, r3
 8016c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c70:	b10a      	cbz	r2, 8016c76 <_vfiprintf_r+0x86>
 8016c72:	2a25      	cmp	r2, #37	@ 0x25
 8016c74:	d1f9      	bne.n	8016c6a <_vfiprintf_r+0x7a>
 8016c76:	ebba 0b04 	subs.w	fp, sl, r4
 8016c7a:	d00b      	beq.n	8016c94 <_vfiprintf_r+0xa4>
 8016c7c:	465b      	mov	r3, fp
 8016c7e:	4622      	mov	r2, r4
 8016c80:	4629      	mov	r1, r5
 8016c82:	4630      	mov	r0, r6
 8016c84:	f7ff ffa1 	bl	8016bca <__sfputs_r>
 8016c88:	3001      	adds	r0, #1
 8016c8a:	f000 80a7 	beq.w	8016ddc <_vfiprintf_r+0x1ec>
 8016c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c90:	445a      	add	r2, fp
 8016c92:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c94:	f89a 3000 	ldrb.w	r3, [sl]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	f000 809f 	beq.w	8016ddc <_vfiprintf_r+0x1ec>
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ca8:	f10a 0a01 	add.w	sl, sl, #1
 8016cac:	9304      	str	r3, [sp, #16]
 8016cae:	9307      	str	r3, [sp, #28]
 8016cb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cb6:	4654      	mov	r4, sl
 8016cb8:	2205      	movs	r2, #5
 8016cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cbe:	4853      	ldr	r0, [pc, #332]	@ (8016e0c <_vfiprintf_r+0x21c>)
 8016cc0:	f7e9 fa66 	bl	8000190 <memchr>
 8016cc4:	9a04      	ldr	r2, [sp, #16]
 8016cc6:	b9d8      	cbnz	r0, 8016d00 <_vfiprintf_r+0x110>
 8016cc8:	06d1      	lsls	r1, r2, #27
 8016cca:	bf44      	itt	mi
 8016ccc:	2320      	movmi	r3, #32
 8016cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016cd2:	0713      	lsls	r3, r2, #28
 8016cd4:	bf44      	itt	mi
 8016cd6:	232b      	movmi	r3, #43	@ 0x2b
 8016cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8016ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ce2:	d015      	beq.n	8016d10 <_vfiprintf_r+0x120>
 8016ce4:	9a07      	ldr	r2, [sp, #28]
 8016ce6:	4654      	mov	r4, sl
 8016ce8:	2000      	movs	r0, #0
 8016cea:	f04f 0c0a 	mov.w	ip, #10
 8016cee:	4621      	mov	r1, r4
 8016cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cf4:	3b30      	subs	r3, #48	@ 0x30
 8016cf6:	2b09      	cmp	r3, #9
 8016cf8:	d94b      	bls.n	8016d92 <_vfiprintf_r+0x1a2>
 8016cfa:	b1b0      	cbz	r0, 8016d2a <_vfiprintf_r+0x13a>
 8016cfc:	9207      	str	r2, [sp, #28]
 8016cfe:	e014      	b.n	8016d2a <_vfiprintf_r+0x13a>
 8016d00:	eba0 0308 	sub.w	r3, r0, r8
 8016d04:	fa09 f303 	lsl.w	r3, r9, r3
 8016d08:	4313      	orrs	r3, r2
 8016d0a:	9304      	str	r3, [sp, #16]
 8016d0c:	46a2      	mov	sl, r4
 8016d0e:	e7d2      	b.n	8016cb6 <_vfiprintf_r+0xc6>
 8016d10:	9b03      	ldr	r3, [sp, #12]
 8016d12:	1d19      	adds	r1, r3, #4
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	9103      	str	r1, [sp, #12]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	bfbb      	ittet	lt
 8016d1c:	425b      	neglt	r3, r3
 8016d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8016d22:	9307      	strge	r3, [sp, #28]
 8016d24:	9307      	strlt	r3, [sp, #28]
 8016d26:	bfb8      	it	lt
 8016d28:	9204      	strlt	r2, [sp, #16]
 8016d2a:	7823      	ldrb	r3, [r4, #0]
 8016d2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016d2e:	d10a      	bne.n	8016d46 <_vfiprintf_r+0x156>
 8016d30:	7863      	ldrb	r3, [r4, #1]
 8016d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d34:	d132      	bne.n	8016d9c <_vfiprintf_r+0x1ac>
 8016d36:	9b03      	ldr	r3, [sp, #12]
 8016d38:	1d1a      	adds	r2, r3, #4
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	9203      	str	r2, [sp, #12]
 8016d3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016d42:	3402      	adds	r4, #2
 8016d44:	9305      	str	r3, [sp, #20]
 8016d46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016e1c <_vfiprintf_r+0x22c>
 8016d4a:	7821      	ldrb	r1, [r4, #0]
 8016d4c:	2203      	movs	r2, #3
 8016d4e:	4650      	mov	r0, sl
 8016d50:	f7e9 fa1e 	bl	8000190 <memchr>
 8016d54:	b138      	cbz	r0, 8016d66 <_vfiprintf_r+0x176>
 8016d56:	9b04      	ldr	r3, [sp, #16]
 8016d58:	eba0 000a 	sub.w	r0, r0, sl
 8016d5c:	2240      	movs	r2, #64	@ 0x40
 8016d5e:	4082      	lsls	r2, r0
 8016d60:	4313      	orrs	r3, r2
 8016d62:	3401      	adds	r4, #1
 8016d64:	9304      	str	r3, [sp, #16]
 8016d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d6a:	4829      	ldr	r0, [pc, #164]	@ (8016e10 <_vfiprintf_r+0x220>)
 8016d6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016d70:	2206      	movs	r2, #6
 8016d72:	f7e9 fa0d 	bl	8000190 <memchr>
 8016d76:	2800      	cmp	r0, #0
 8016d78:	d03f      	beq.n	8016dfa <_vfiprintf_r+0x20a>
 8016d7a:	4b26      	ldr	r3, [pc, #152]	@ (8016e14 <_vfiprintf_r+0x224>)
 8016d7c:	bb1b      	cbnz	r3, 8016dc6 <_vfiprintf_r+0x1d6>
 8016d7e:	9b03      	ldr	r3, [sp, #12]
 8016d80:	3307      	adds	r3, #7
 8016d82:	f023 0307 	bic.w	r3, r3, #7
 8016d86:	3308      	adds	r3, #8
 8016d88:	9303      	str	r3, [sp, #12]
 8016d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d8c:	443b      	add	r3, r7
 8016d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d90:	e76a      	b.n	8016c68 <_vfiprintf_r+0x78>
 8016d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d96:	460c      	mov	r4, r1
 8016d98:	2001      	movs	r0, #1
 8016d9a:	e7a8      	b.n	8016cee <_vfiprintf_r+0xfe>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	3401      	adds	r4, #1
 8016da0:	9305      	str	r3, [sp, #20]
 8016da2:	4619      	mov	r1, r3
 8016da4:	f04f 0c0a 	mov.w	ip, #10
 8016da8:	4620      	mov	r0, r4
 8016daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dae:	3a30      	subs	r2, #48	@ 0x30
 8016db0:	2a09      	cmp	r2, #9
 8016db2:	d903      	bls.n	8016dbc <_vfiprintf_r+0x1cc>
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d0c6      	beq.n	8016d46 <_vfiprintf_r+0x156>
 8016db8:	9105      	str	r1, [sp, #20]
 8016dba:	e7c4      	b.n	8016d46 <_vfiprintf_r+0x156>
 8016dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016dc0:	4604      	mov	r4, r0
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	e7f0      	b.n	8016da8 <_vfiprintf_r+0x1b8>
 8016dc6:	ab03      	add	r3, sp, #12
 8016dc8:	9300      	str	r3, [sp, #0]
 8016dca:	462a      	mov	r2, r5
 8016dcc:	4b12      	ldr	r3, [pc, #72]	@ (8016e18 <_vfiprintf_r+0x228>)
 8016dce:	a904      	add	r1, sp, #16
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f3af 8000 	nop.w
 8016dd6:	4607      	mov	r7, r0
 8016dd8:	1c78      	adds	r0, r7, #1
 8016dda:	d1d6      	bne.n	8016d8a <_vfiprintf_r+0x19a>
 8016ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dde:	07d9      	lsls	r1, r3, #31
 8016de0:	d405      	bmi.n	8016dee <_vfiprintf_r+0x1fe>
 8016de2:	89ab      	ldrh	r3, [r5, #12]
 8016de4:	059a      	lsls	r2, r3, #22
 8016de6:	d402      	bmi.n	8016dee <_vfiprintf_r+0x1fe>
 8016de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016dea:	f7ff fc77 	bl	80166dc <__retarget_lock_release_recursive>
 8016dee:	89ab      	ldrh	r3, [r5, #12]
 8016df0:	065b      	lsls	r3, r3, #25
 8016df2:	f53f af1f 	bmi.w	8016c34 <_vfiprintf_r+0x44>
 8016df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016df8:	e71e      	b.n	8016c38 <_vfiprintf_r+0x48>
 8016dfa:	ab03      	add	r3, sp, #12
 8016dfc:	9300      	str	r3, [sp, #0]
 8016dfe:	462a      	mov	r2, r5
 8016e00:	4b05      	ldr	r3, [pc, #20]	@ (8016e18 <_vfiprintf_r+0x228>)
 8016e02:	a904      	add	r1, sp, #16
 8016e04:	4630      	mov	r0, r6
 8016e06:	f000 f879 	bl	8016efc <_printf_i>
 8016e0a:	e7e4      	b.n	8016dd6 <_vfiprintf_r+0x1e6>
 8016e0c:	080191f0 	.word	0x080191f0
 8016e10:	080191fa 	.word	0x080191fa
 8016e14:	00000000 	.word	0x00000000
 8016e18:	08016bcb 	.word	0x08016bcb
 8016e1c:	080191f6 	.word	0x080191f6

08016e20 <_printf_common>:
 8016e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e24:	4616      	mov	r6, r2
 8016e26:	4698      	mov	r8, r3
 8016e28:	688a      	ldr	r2, [r1, #8]
 8016e2a:	690b      	ldr	r3, [r1, #16]
 8016e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016e30:	4293      	cmp	r3, r2
 8016e32:	bfb8      	it	lt
 8016e34:	4613      	movlt	r3, r2
 8016e36:	6033      	str	r3, [r6, #0]
 8016e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016e3c:	4607      	mov	r7, r0
 8016e3e:	460c      	mov	r4, r1
 8016e40:	b10a      	cbz	r2, 8016e46 <_printf_common+0x26>
 8016e42:	3301      	adds	r3, #1
 8016e44:	6033      	str	r3, [r6, #0]
 8016e46:	6823      	ldr	r3, [r4, #0]
 8016e48:	0699      	lsls	r1, r3, #26
 8016e4a:	bf42      	ittt	mi
 8016e4c:	6833      	ldrmi	r3, [r6, #0]
 8016e4e:	3302      	addmi	r3, #2
 8016e50:	6033      	strmi	r3, [r6, #0]
 8016e52:	6825      	ldr	r5, [r4, #0]
 8016e54:	f015 0506 	ands.w	r5, r5, #6
 8016e58:	d106      	bne.n	8016e68 <_printf_common+0x48>
 8016e5a:	f104 0a19 	add.w	sl, r4, #25
 8016e5e:	68e3      	ldr	r3, [r4, #12]
 8016e60:	6832      	ldr	r2, [r6, #0]
 8016e62:	1a9b      	subs	r3, r3, r2
 8016e64:	42ab      	cmp	r3, r5
 8016e66:	dc26      	bgt.n	8016eb6 <_printf_common+0x96>
 8016e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016e6c:	6822      	ldr	r2, [r4, #0]
 8016e6e:	3b00      	subs	r3, #0
 8016e70:	bf18      	it	ne
 8016e72:	2301      	movne	r3, #1
 8016e74:	0692      	lsls	r2, r2, #26
 8016e76:	d42b      	bmi.n	8016ed0 <_printf_common+0xb0>
 8016e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016e7c:	4641      	mov	r1, r8
 8016e7e:	4638      	mov	r0, r7
 8016e80:	47c8      	blx	r9
 8016e82:	3001      	adds	r0, #1
 8016e84:	d01e      	beq.n	8016ec4 <_printf_common+0xa4>
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	6922      	ldr	r2, [r4, #16]
 8016e8a:	f003 0306 	and.w	r3, r3, #6
 8016e8e:	2b04      	cmp	r3, #4
 8016e90:	bf02      	ittt	eq
 8016e92:	68e5      	ldreq	r5, [r4, #12]
 8016e94:	6833      	ldreq	r3, [r6, #0]
 8016e96:	1aed      	subeq	r5, r5, r3
 8016e98:	68a3      	ldr	r3, [r4, #8]
 8016e9a:	bf0c      	ite	eq
 8016e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ea0:	2500      	movne	r5, #0
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	bfc4      	itt	gt
 8016ea6:	1a9b      	subgt	r3, r3, r2
 8016ea8:	18ed      	addgt	r5, r5, r3
 8016eaa:	2600      	movs	r6, #0
 8016eac:	341a      	adds	r4, #26
 8016eae:	42b5      	cmp	r5, r6
 8016eb0:	d11a      	bne.n	8016ee8 <_printf_common+0xc8>
 8016eb2:	2000      	movs	r0, #0
 8016eb4:	e008      	b.n	8016ec8 <_printf_common+0xa8>
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	4652      	mov	r2, sl
 8016eba:	4641      	mov	r1, r8
 8016ebc:	4638      	mov	r0, r7
 8016ebe:	47c8      	blx	r9
 8016ec0:	3001      	adds	r0, #1
 8016ec2:	d103      	bne.n	8016ecc <_printf_common+0xac>
 8016ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ecc:	3501      	adds	r5, #1
 8016ece:	e7c6      	b.n	8016e5e <_printf_common+0x3e>
 8016ed0:	18e1      	adds	r1, r4, r3
 8016ed2:	1c5a      	adds	r2, r3, #1
 8016ed4:	2030      	movs	r0, #48	@ 0x30
 8016ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016eda:	4422      	add	r2, r4
 8016edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016ee4:	3302      	adds	r3, #2
 8016ee6:	e7c7      	b.n	8016e78 <_printf_common+0x58>
 8016ee8:	2301      	movs	r3, #1
 8016eea:	4622      	mov	r2, r4
 8016eec:	4641      	mov	r1, r8
 8016eee:	4638      	mov	r0, r7
 8016ef0:	47c8      	blx	r9
 8016ef2:	3001      	adds	r0, #1
 8016ef4:	d0e6      	beq.n	8016ec4 <_printf_common+0xa4>
 8016ef6:	3601      	adds	r6, #1
 8016ef8:	e7d9      	b.n	8016eae <_printf_common+0x8e>
	...

08016efc <_printf_i>:
 8016efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f00:	7e0f      	ldrb	r7, [r1, #24]
 8016f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016f04:	2f78      	cmp	r7, #120	@ 0x78
 8016f06:	4691      	mov	r9, r2
 8016f08:	4680      	mov	r8, r0
 8016f0a:	460c      	mov	r4, r1
 8016f0c:	469a      	mov	sl, r3
 8016f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016f12:	d807      	bhi.n	8016f24 <_printf_i+0x28>
 8016f14:	2f62      	cmp	r7, #98	@ 0x62
 8016f16:	d80a      	bhi.n	8016f2e <_printf_i+0x32>
 8016f18:	2f00      	cmp	r7, #0
 8016f1a:	f000 80d2 	beq.w	80170c2 <_printf_i+0x1c6>
 8016f1e:	2f58      	cmp	r7, #88	@ 0x58
 8016f20:	f000 80b9 	beq.w	8017096 <_printf_i+0x19a>
 8016f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016f2c:	e03a      	b.n	8016fa4 <_printf_i+0xa8>
 8016f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016f32:	2b15      	cmp	r3, #21
 8016f34:	d8f6      	bhi.n	8016f24 <_printf_i+0x28>
 8016f36:	a101      	add	r1, pc, #4	@ (adr r1, 8016f3c <_printf_i+0x40>)
 8016f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016f3c:	08016f95 	.word	0x08016f95
 8016f40:	08016fa9 	.word	0x08016fa9
 8016f44:	08016f25 	.word	0x08016f25
 8016f48:	08016f25 	.word	0x08016f25
 8016f4c:	08016f25 	.word	0x08016f25
 8016f50:	08016f25 	.word	0x08016f25
 8016f54:	08016fa9 	.word	0x08016fa9
 8016f58:	08016f25 	.word	0x08016f25
 8016f5c:	08016f25 	.word	0x08016f25
 8016f60:	08016f25 	.word	0x08016f25
 8016f64:	08016f25 	.word	0x08016f25
 8016f68:	080170a9 	.word	0x080170a9
 8016f6c:	08016fd3 	.word	0x08016fd3
 8016f70:	08017063 	.word	0x08017063
 8016f74:	08016f25 	.word	0x08016f25
 8016f78:	08016f25 	.word	0x08016f25
 8016f7c:	080170cb 	.word	0x080170cb
 8016f80:	08016f25 	.word	0x08016f25
 8016f84:	08016fd3 	.word	0x08016fd3
 8016f88:	08016f25 	.word	0x08016f25
 8016f8c:	08016f25 	.word	0x08016f25
 8016f90:	0801706b 	.word	0x0801706b
 8016f94:	6833      	ldr	r3, [r6, #0]
 8016f96:	1d1a      	adds	r2, r3, #4
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	6032      	str	r2, [r6, #0]
 8016f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	e09d      	b.n	80170e4 <_printf_i+0x1e8>
 8016fa8:	6833      	ldr	r3, [r6, #0]
 8016faa:	6820      	ldr	r0, [r4, #0]
 8016fac:	1d19      	adds	r1, r3, #4
 8016fae:	6031      	str	r1, [r6, #0]
 8016fb0:	0606      	lsls	r6, r0, #24
 8016fb2:	d501      	bpl.n	8016fb8 <_printf_i+0xbc>
 8016fb4:	681d      	ldr	r5, [r3, #0]
 8016fb6:	e003      	b.n	8016fc0 <_printf_i+0xc4>
 8016fb8:	0645      	lsls	r5, r0, #25
 8016fba:	d5fb      	bpl.n	8016fb4 <_printf_i+0xb8>
 8016fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016fc0:	2d00      	cmp	r5, #0
 8016fc2:	da03      	bge.n	8016fcc <_printf_i+0xd0>
 8016fc4:	232d      	movs	r3, #45	@ 0x2d
 8016fc6:	426d      	negs	r5, r5
 8016fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016fcc:	4859      	ldr	r0, [pc, #356]	@ (8017134 <_printf_i+0x238>)
 8016fce:	230a      	movs	r3, #10
 8016fd0:	e011      	b.n	8016ff6 <_printf_i+0xfa>
 8016fd2:	6821      	ldr	r1, [r4, #0]
 8016fd4:	6833      	ldr	r3, [r6, #0]
 8016fd6:	0608      	lsls	r0, r1, #24
 8016fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8016fdc:	d402      	bmi.n	8016fe4 <_printf_i+0xe8>
 8016fde:	0649      	lsls	r1, r1, #25
 8016fe0:	bf48      	it	mi
 8016fe2:	b2ad      	uxthmi	r5, r5
 8016fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8016fe6:	4853      	ldr	r0, [pc, #332]	@ (8017134 <_printf_i+0x238>)
 8016fe8:	6033      	str	r3, [r6, #0]
 8016fea:	bf14      	ite	ne
 8016fec:	230a      	movne	r3, #10
 8016fee:	2308      	moveq	r3, #8
 8016ff0:	2100      	movs	r1, #0
 8016ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016ff6:	6866      	ldr	r6, [r4, #4]
 8016ff8:	60a6      	str	r6, [r4, #8]
 8016ffa:	2e00      	cmp	r6, #0
 8016ffc:	bfa2      	ittt	ge
 8016ffe:	6821      	ldrge	r1, [r4, #0]
 8017000:	f021 0104 	bicge.w	r1, r1, #4
 8017004:	6021      	strge	r1, [r4, #0]
 8017006:	b90d      	cbnz	r5, 801700c <_printf_i+0x110>
 8017008:	2e00      	cmp	r6, #0
 801700a:	d04b      	beq.n	80170a4 <_printf_i+0x1a8>
 801700c:	4616      	mov	r6, r2
 801700e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017012:	fb03 5711 	mls	r7, r3, r1, r5
 8017016:	5dc7      	ldrb	r7, [r0, r7]
 8017018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801701c:	462f      	mov	r7, r5
 801701e:	42bb      	cmp	r3, r7
 8017020:	460d      	mov	r5, r1
 8017022:	d9f4      	bls.n	801700e <_printf_i+0x112>
 8017024:	2b08      	cmp	r3, #8
 8017026:	d10b      	bne.n	8017040 <_printf_i+0x144>
 8017028:	6823      	ldr	r3, [r4, #0]
 801702a:	07df      	lsls	r7, r3, #31
 801702c:	d508      	bpl.n	8017040 <_printf_i+0x144>
 801702e:	6923      	ldr	r3, [r4, #16]
 8017030:	6861      	ldr	r1, [r4, #4]
 8017032:	4299      	cmp	r1, r3
 8017034:	bfde      	ittt	le
 8017036:	2330      	movle	r3, #48	@ 0x30
 8017038:	f806 3c01 	strble.w	r3, [r6, #-1]
 801703c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017040:	1b92      	subs	r2, r2, r6
 8017042:	6122      	str	r2, [r4, #16]
 8017044:	f8cd a000 	str.w	sl, [sp]
 8017048:	464b      	mov	r3, r9
 801704a:	aa03      	add	r2, sp, #12
 801704c:	4621      	mov	r1, r4
 801704e:	4640      	mov	r0, r8
 8017050:	f7ff fee6 	bl	8016e20 <_printf_common>
 8017054:	3001      	adds	r0, #1
 8017056:	d14a      	bne.n	80170ee <_printf_i+0x1f2>
 8017058:	f04f 30ff 	mov.w	r0, #4294967295
 801705c:	b004      	add	sp, #16
 801705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017062:	6823      	ldr	r3, [r4, #0]
 8017064:	f043 0320 	orr.w	r3, r3, #32
 8017068:	6023      	str	r3, [r4, #0]
 801706a:	4833      	ldr	r0, [pc, #204]	@ (8017138 <_printf_i+0x23c>)
 801706c:	2778      	movs	r7, #120	@ 0x78
 801706e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017072:	6823      	ldr	r3, [r4, #0]
 8017074:	6831      	ldr	r1, [r6, #0]
 8017076:	061f      	lsls	r7, r3, #24
 8017078:	f851 5b04 	ldr.w	r5, [r1], #4
 801707c:	d402      	bmi.n	8017084 <_printf_i+0x188>
 801707e:	065f      	lsls	r7, r3, #25
 8017080:	bf48      	it	mi
 8017082:	b2ad      	uxthmi	r5, r5
 8017084:	6031      	str	r1, [r6, #0]
 8017086:	07d9      	lsls	r1, r3, #31
 8017088:	bf44      	itt	mi
 801708a:	f043 0320 	orrmi.w	r3, r3, #32
 801708e:	6023      	strmi	r3, [r4, #0]
 8017090:	b11d      	cbz	r5, 801709a <_printf_i+0x19e>
 8017092:	2310      	movs	r3, #16
 8017094:	e7ac      	b.n	8016ff0 <_printf_i+0xf4>
 8017096:	4827      	ldr	r0, [pc, #156]	@ (8017134 <_printf_i+0x238>)
 8017098:	e7e9      	b.n	801706e <_printf_i+0x172>
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	f023 0320 	bic.w	r3, r3, #32
 80170a0:	6023      	str	r3, [r4, #0]
 80170a2:	e7f6      	b.n	8017092 <_printf_i+0x196>
 80170a4:	4616      	mov	r6, r2
 80170a6:	e7bd      	b.n	8017024 <_printf_i+0x128>
 80170a8:	6833      	ldr	r3, [r6, #0]
 80170aa:	6825      	ldr	r5, [r4, #0]
 80170ac:	6961      	ldr	r1, [r4, #20]
 80170ae:	1d18      	adds	r0, r3, #4
 80170b0:	6030      	str	r0, [r6, #0]
 80170b2:	062e      	lsls	r6, r5, #24
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	d501      	bpl.n	80170bc <_printf_i+0x1c0>
 80170b8:	6019      	str	r1, [r3, #0]
 80170ba:	e002      	b.n	80170c2 <_printf_i+0x1c6>
 80170bc:	0668      	lsls	r0, r5, #25
 80170be:	d5fb      	bpl.n	80170b8 <_printf_i+0x1bc>
 80170c0:	8019      	strh	r1, [r3, #0]
 80170c2:	2300      	movs	r3, #0
 80170c4:	6123      	str	r3, [r4, #16]
 80170c6:	4616      	mov	r6, r2
 80170c8:	e7bc      	b.n	8017044 <_printf_i+0x148>
 80170ca:	6833      	ldr	r3, [r6, #0]
 80170cc:	1d1a      	adds	r2, r3, #4
 80170ce:	6032      	str	r2, [r6, #0]
 80170d0:	681e      	ldr	r6, [r3, #0]
 80170d2:	6862      	ldr	r2, [r4, #4]
 80170d4:	2100      	movs	r1, #0
 80170d6:	4630      	mov	r0, r6
 80170d8:	f7e9 f85a 	bl	8000190 <memchr>
 80170dc:	b108      	cbz	r0, 80170e2 <_printf_i+0x1e6>
 80170de:	1b80      	subs	r0, r0, r6
 80170e0:	6060      	str	r0, [r4, #4]
 80170e2:	6863      	ldr	r3, [r4, #4]
 80170e4:	6123      	str	r3, [r4, #16]
 80170e6:	2300      	movs	r3, #0
 80170e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80170ec:	e7aa      	b.n	8017044 <_printf_i+0x148>
 80170ee:	6923      	ldr	r3, [r4, #16]
 80170f0:	4632      	mov	r2, r6
 80170f2:	4649      	mov	r1, r9
 80170f4:	4640      	mov	r0, r8
 80170f6:	47d0      	blx	sl
 80170f8:	3001      	adds	r0, #1
 80170fa:	d0ad      	beq.n	8017058 <_printf_i+0x15c>
 80170fc:	6823      	ldr	r3, [r4, #0]
 80170fe:	079b      	lsls	r3, r3, #30
 8017100:	d413      	bmi.n	801712a <_printf_i+0x22e>
 8017102:	68e0      	ldr	r0, [r4, #12]
 8017104:	9b03      	ldr	r3, [sp, #12]
 8017106:	4298      	cmp	r0, r3
 8017108:	bfb8      	it	lt
 801710a:	4618      	movlt	r0, r3
 801710c:	e7a6      	b.n	801705c <_printf_i+0x160>
 801710e:	2301      	movs	r3, #1
 8017110:	4632      	mov	r2, r6
 8017112:	4649      	mov	r1, r9
 8017114:	4640      	mov	r0, r8
 8017116:	47d0      	blx	sl
 8017118:	3001      	adds	r0, #1
 801711a:	d09d      	beq.n	8017058 <_printf_i+0x15c>
 801711c:	3501      	adds	r5, #1
 801711e:	68e3      	ldr	r3, [r4, #12]
 8017120:	9903      	ldr	r1, [sp, #12]
 8017122:	1a5b      	subs	r3, r3, r1
 8017124:	42ab      	cmp	r3, r5
 8017126:	dcf2      	bgt.n	801710e <_printf_i+0x212>
 8017128:	e7eb      	b.n	8017102 <_printf_i+0x206>
 801712a:	2500      	movs	r5, #0
 801712c:	f104 0619 	add.w	r6, r4, #25
 8017130:	e7f5      	b.n	801711e <_printf_i+0x222>
 8017132:	bf00      	nop
 8017134:	08019201 	.word	0x08019201
 8017138:	08019212 	.word	0x08019212

0801713c <__sflush_r>:
 801713c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017144:	0716      	lsls	r6, r2, #28
 8017146:	4605      	mov	r5, r0
 8017148:	460c      	mov	r4, r1
 801714a:	d454      	bmi.n	80171f6 <__sflush_r+0xba>
 801714c:	684b      	ldr	r3, [r1, #4]
 801714e:	2b00      	cmp	r3, #0
 8017150:	dc02      	bgt.n	8017158 <__sflush_r+0x1c>
 8017152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017154:	2b00      	cmp	r3, #0
 8017156:	dd48      	ble.n	80171ea <__sflush_r+0xae>
 8017158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801715a:	2e00      	cmp	r6, #0
 801715c:	d045      	beq.n	80171ea <__sflush_r+0xae>
 801715e:	2300      	movs	r3, #0
 8017160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017164:	682f      	ldr	r7, [r5, #0]
 8017166:	6a21      	ldr	r1, [r4, #32]
 8017168:	602b      	str	r3, [r5, #0]
 801716a:	d030      	beq.n	80171ce <__sflush_r+0x92>
 801716c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801716e:	89a3      	ldrh	r3, [r4, #12]
 8017170:	0759      	lsls	r1, r3, #29
 8017172:	d505      	bpl.n	8017180 <__sflush_r+0x44>
 8017174:	6863      	ldr	r3, [r4, #4]
 8017176:	1ad2      	subs	r2, r2, r3
 8017178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801717a:	b10b      	cbz	r3, 8017180 <__sflush_r+0x44>
 801717c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801717e:	1ad2      	subs	r2, r2, r3
 8017180:	2300      	movs	r3, #0
 8017182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017184:	6a21      	ldr	r1, [r4, #32]
 8017186:	4628      	mov	r0, r5
 8017188:	47b0      	blx	r6
 801718a:	1c43      	adds	r3, r0, #1
 801718c:	89a3      	ldrh	r3, [r4, #12]
 801718e:	d106      	bne.n	801719e <__sflush_r+0x62>
 8017190:	6829      	ldr	r1, [r5, #0]
 8017192:	291d      	cmp	r1, #29
 8017194:	d82b      	bhi.n	80171ee <__sflush_r+0xb2>
 8017196:	4a2a      	ldr	r2, [pc, #168]	@ (8017240 <__sflush_r+0x104>)
 8017198:	410a      	asrs	r2, r1
 801719a:	07d6      	lsls	r6, r2, #31
 801719c:	d427      	bmi.n	80171ee <__sflush_r+0xb2>
 801719e:	2200      	movs	r2, #0
 80171a0:	6062      	str	r2, [r4, #4]
 80171a2:	04d9      	lsls	r1, r3, #19
 80171a4:	6922      	ldr	r2, [r4, #16]
 80171a6:	6022      	str	r2, [r4, #0]
 80171a8:	d504      	bpl.n	80171b4 <__sflush_r+0x78>
 80171aa:	1c42      	adds	r2, r0, #1
 80171ac:	d101      	bne.n	80171b2 <__sflush_r+0x76>
 80171ae:	682b      	ldr	r3, [r5, #0]
 80171b0:	b903      	cbnz	r3, 80171b4 <__sflush_r+0x78>
 80171b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80171b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80171b6:	602f      	str	r7, [r5, #0]
 80171b8:	b1b9      	cbz	r1, 80171ea <__sflush_r+0xae>
 80171ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80171be:	4299      	cmp	r1, r3
 80171c0:	d002      	beq.n	80171c8 <__sflush_r+0x8c>
 80171c2:	4628      	mov	r0, r5
 80171c4:	f7ff fa9a 	bl	80166fc <_free_r>
 80171c8:	2300      	movs	r3, #0
 80171ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80171cc:	e00d      	b.n	80171ea <__sflush_r+0xae>
 80171ce:	2301      	movs	r3, #1
 80171d0:	4628      	mov	r0, r5
 80171d2:	47b0      	blx	r6
 80171d4:	4602      	mov	r2, r0
 80171d6:	1c50      	adds	r0, r2, #1
 80171d8:	d1c9      	bne.n	801716e <__sflush_r+0x32>
 80171da:	682b      	ldr	r3, [r5, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d0c6      	beq.n	801716e <__sflush_r+0x32>
 80171e0:	2b1d      	cmp	r3, #29
 80171e2:	d001      	beq.n	80171e8 <__sflush_r+0xac>
 80171e4:	2b16      	cmp	r3, #22
 80171e6:	d11e      	bne.n	8017226 <__sflush_r+0xea>
 80171e8:	602f      	str	r7, [r5, #0]
 80171ea:	2000      	movs	r0, #0
 80171ec:	e022      	b.n	8017234 <__sflush_r+0xf8>
 80171ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171f2:	b21b      	sxth	r3, r3
 80171f4:	e01b      	b.n	801722e <__sflush_r+0xf2>
 80171f6:	690f      	ldr	r7, [r1, #16]
 80171f8:	2f00      	cmp	r7, #0
 80171fa:	d0f6      	beq.n	80171ea <__sflush_r+0xae>
 80171fc:	0793      	lsls	r3, r2, #30
 80171fe:	680e      	ldr	r6, [r1, #0]
 8017200:	bf08      	it	eq
 8017202:	694b      	ldreq	r3, [r1, #20]
 8017204:	600f      	str	r7, [r1, #0]
 8017206:	bf18      	it	ne
 8017208:	2300      	movne	r3, #0
 801720a:	eba6 0807 	sub.w	r8, r6, r7
 801720e:	608b      	str	r3, [r1, #8]
 8017210:	f1b8 0f00 	cmp.w	r8, #0
 8017214:	dde9      	ble.n	80171ea <__sflush_r+0xae>
 8017216:	6a21      	ldr	r1, [r4, #32]
 8017218:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801721a:	4643      	mov	r3, r8
 801721c:	463a      	mov	r2, r7
 801721e:	4628      	mov	r0, r5
 8017220:	47b0      	blx	r6
 8017222:	2800      	cmp	r0, #0
 8017224:	dc08      	bgt.n	8017238 <__sflush_r+0xfc>
 8017226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801722a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801722e:	81a3      	strh	r3, [r4, #12]
 8017230:	f04f 30ff 	mov.w	r0, #4294967295
 8017234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017238:	4407      	add	r7, r0
 801723a:	eba8 0800 	sub.w	r8, r8, r0
 801723e:	e7e7      	b.n	8017210 <__sflush_r+0xd4>
 8017240:	dfbffffe 	.word	0xdfbffffe

08017244 <_fflush_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	690b      	ldr	r3, [r1, #16]
 8017248:	4605      	mov	r5, r0
 801724a:	460c      	mov	r4, r1
 801724c:	b913      	cbnz	r3, 8017254 <_fflush_r+0x10>
 801724e:	2500      	movs	r5, #0
 8017250:	4628      	mov	r0, r5
 8017252:	bd38      	pop	{r3, r4, r5, pc}
 8017254:	b118      	cbz	r0, 801725e <_fflush_r+0x1a>
 8017256:	6a03      	ldr	r3, [r0, #32]
 8017258:	b90b      	cbnz	r3, 801725e <_fflush_r+0x1a>
 801725a:	f7fe ffdf 	bl	801621c <__sinit>
 801725e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d0f3      	beq.n	801724e <_fflush_r+0xa>
 8017266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017268:	07d0      	lsls	r0, r2, #31
 801726a:	d404      	bmi.n	8017276 <_fflush_r+0x32>
 801726c:	0599      	lsls	r1, r3, #22
 801726e:	d402      	bmi.n	8017276 <_fflush_r+0x32>
 8017270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017272:	f7ff fa32 	bl	80166da <__retarget_lock_acquire_recursive>
 8017276:	4628      	mov	r0, r5
 8017278:	4621      	mov	r1, r4
 801727a:	f7ff ff5f 	bl	801713c <__sflush_r>
 801727e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017280:	07da      	lsls	r2, r3, #31
 8017282:	4605      	mov	r5, r0
 8017284:	d4e4      	bmi.n	8017250 <_fflush_r+0xc>
 8017286:	89a3      	ldrh	r3, [r4, #12]
 8017288:	059b      	lsls	r3, r3, #22
 801728a:	d4e1      	bmi.n	8017250 <_fflush_r+0xc>
 801728c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801728e:	f7ff fa25 	bl	80166dc <__retarget_lock_release_recursive>
 8017292:	e7dd      	b.n	8017250 <_fflush_r+0xc>

08017294 <__swhatbuf_r>:
 8017294:	b570      	push	{r4, r5, r6, lr}
 8017296:	460c      	mov	r4, r1
 8017298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801729c:	2900      	cmp	r1, #0
 801729e:	b096      	sub	sp, #88	@ 0x58
 80172a0:	4615      	mov	r5, r2
 80172a2:	461e      	mov	r6, r3
 80172a4:	da0d      	bge.n	80172c2 <__swhatbuf_r+0x2e>
 80172a6:	89a3      	ldrh	r3, [r4, #12]
 80172a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80172ac:	f04f 0100 	mov.w	r1, #0
 80172b0:	bf14      	ite	ne
 80172b2:	2340      	movne	r3, #64	@ 0x40
 80172b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80172b8:	2000      	movs	r0, #0
 80172ba:	6031      	str	r1, [r6, #0]
 80172bc:	602b      	str	r3, [r5, #0]
 80172be:	b016      	add	sp, #88	@ 0x58
 80172c0:	bd70      	pop	{r4, r5, r6, pc}
 80172c2:	466a      	mov	r2, sp
 80172c4:	f000 f8a4 	bl	8017410 <_fstat_r>
 80172c8:	2800      	cmp	r0, #0
 80172ca:	dbec      	blt.n	80172a6 <__swhatbuf_r+0x12>
 80172cc:	9901      	ldr	r1, [sp, #4]
 80172ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80172d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80172d6:	4259      	negs	r1, r3
 80172d8:	4159      	adcs	r1, r3
 80172da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80172de:	e7eb      	b.n	80172b8 <__swhatbuf_r+0x24>

080172e0 <__smakebuf_r>:
 80172e0:	898b      	ldrh	r3, [r1, #12]
 80172e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172e4:	079d      	lsls	r5, r3, #30
 80172e6:	4606      	mov	r6, r0
 80172e8:	460c      	mov	r4, r1
 80172ea:	d507      	bpl.n	80172fc <__smakebuf_r+0x1c>
 80172ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80172f0:	6023      	str	r3, [r4, #0]
 80172f2:	6123      	str	r3, [r4, #16]
 80172f4:	2301      	movs	r3, #1
 80172f6:	6163      	str	r3, [r4, #20]
 80172f8:	b003      	add	sp, #12
 80172fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172fc:	ab01      	add	r3, sp, #4
 80172fe:	466a      	mov	r2, sp
 8017300:	f7ff ffc8 	bl	8017294 <__swhatbuf_r>
 8017304:	9f00      	ldr	r7, [sp, #0]
 8017306:	4605      	mov	r5, r0
 8017308:	4639      	mov	r1, r7
 801730a:	4630      	mov	r0, r6
 801730c:	f7ff fa62 	bl	80167d4 <_malloc_r>
 8017310:	b948      	cbnz	r0, 8017326 <__smakebuf_r+0x46>
 8017312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017316:	059a      	lsls	r2, r3, #22
 8017318:	d4ee      	bmi.n	80172f8 <__smakebuf_r+0x18>
 801731a:	f023 0303 	bic.w	r3, r3, #3
 801731e:	f043 0302 	orr.w	r3, r3, #2
 8017322:	81a3      	strh	r3, [r4, #12]
 8017324:	e7e2      	b.n	80172ec <__smakebuf_r+0xc>
 8017326:	89a3      	ldrh	r3, [r4, #12]
 8017328:	6020      	str	r0, [r4, #0]
 801732a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801732e:	81a3      	strh	r3, [r4, #12]
 8017330:	9b01      	ldr	r3, [sp, #4]
 8017332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017336:	b15b      	cbz	r3, 8017350 <__smakebuf_r+0x70>
 8017338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801733c:	4630      	mov	r0, r6
 801733e:	f000 f879 	bl	8017434 <_isatty_r>
 8017342:	b128      	cbz	r0, 8017350 <__smakebuf_r+0x70>
 8017344:	89a3      	ldrh	r3, [r4, #12]
 8017346:	f023 0303 	bic.w	r3, r3, #3
 801734a:	f043 0301 	orr.w	r3, r3, #1
 801734e:	81a3      	strh	r3, [r4, #12]
 8017350:	89a3      	ldrh	r3, [r4, #12]
 8017352:	431d      	orrs	r5, r3
 8017354:	81a5      	strh	r5, [r4, #12]
 8017356:	e7cf      	b.n	80172f8 <__smakebuf_r+0x18>

08017358 <_putc_r>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	460d      	mov	r5, r1
 801735c:	4614      	mov	r4, r2
 801735e:	4606      	mov	r6, r0
 8017360:	b118      	cbz	r0, 801736a <_putc_r+0x12>
 8017362:	6a03      	ldr	r3, [r0, #32]
 8017364:	b90b      	cbnz	r3, 801736a <_putc_r+0x12>
 8017366:	f7fe ff59 	bl	801621c <__sinit>
 801736a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801736c:	07d8      	lsls	r0, r3, #31
 801736e:	d405      	bmi.n	801737c <_putc_r+0x24>
 8017370:	89a3      	ldrh	r3, [r4, #12]
 8017372:	0599      	lsls	r1, r3, #22
 8017374:	d402      	bmi.n	801737c <_putc_r+0x24>
 8017376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017378:	f7ff f9af 	bl	80166da <__retarget_lock_acquire_recursive>
 801737c:	68a3      	ldr	r3, [r4, #8]
 801737e:	3b01      	subs	r3, #1
 8017380:	2b00      	cmp	r3, #0
 8017382:	60a3      	str	r3, [r4, #8]
 8017384:	da05      	bge.n	8017392 <_putc_r+0x3a>
 8017386:	69a2      	ldr	r2, [r4, #24]
 8017388:	4293      	cmp	r3, r2
 801738a:	db12      	blt.n	80173b2 <_putc_r+0x5a>
 801738c:	b2eb      	uxtb	r3, r5
 801738e:	2b0a      	cmp	r3, #10
 8017390:	d00f      	beq.n	80173b2 <_putc_r+0x5a>
 8017392:	6823      	ldr	r3, [r4, #0]
 8017394:	1c5a      	adds	r2, r3, #1
 8017396:	6022      	str	r2, [r4, #0]
 8017398:	701d      	strb	r5, [r3, #0]
 801739a:	b2ed      	uxtb	r5, r5
 801739c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801739e:	07da      	lsls	r2, r3, #31
 80173a0:	d405      	bmi.n	80173ae <_putc_r+0x56>
 80173a2:	89a3      	ldrh	r3, [r4, #12]
 80173a4:	059b      	lsls	r3, r3, #22
 80173a6:	d402      	bmi.n	80173ae <_putc_r+0x56>
 80173a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173aa:	f7ff f997 	bl	80166dc <__retarget_lock_release_recursive>
 80173ae:	4628      	mov	r0, r5
 80173b0:	bd70      	pop	{r4, r5, r6, pc}
 80173b2:	4629      	mov	r1, r5
 80173b4:	4622      	mov	r2, r4
 80173b6:	4630      	mov	r0, r6
 80173b8:	f7ff f85a 	bl	8016470 <__swbuf_r>
 80173bc:	4605      	mov	r5, r0
 80173be:	e7ed      	b.n	801739c <_putc_r+0x44>

080173c0 <memmove>:
 80173c0:	4288      	cmp	r0, r1
 80173c2:	b510      	push	{r4, lr}
 80173c4:	eb01 0402 	add.w	r4, r1, r2
 80173c8:	d902      	bls.n	80173d0 <memmove+0x10>
 80173ca:	4284      	cmp	r4, r0
 80173cc:	4623      	mov	r3, r4
 80173ce:	d807      	bhi.n	80173e0 <memmove+0x20>
 80173d0:	1e43      	subs	r3, r0, #1
 80173d2:	42a1      	cmp	r1, r4
 80173d4:	d008      	beq.n	80173e8 <memmove+0x28>
 80173d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173de:	e7f8      	b.n	80173d2 <memmove+0x12>
 80173e0:	4402      	add	r2, r0
 80173e2:	4601      	mov	r1, r0
 80173e4:	428a      	cmp	r2, r1
 80173e6:	d100      	bne.n	80173ea <memmove+0x2a>
 80173e8:	bd10      	pop	{r4, pc}
 80173ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173f2:	e7f7      	b.n	80173e4 <memmove+0x24>

080173f4 <strchr>:
 80173f4:	b2c9      	uxtb	r1, r1
 80173f6:	4603      	mov	r3, r0
 80173f8:	4618      	mov	r0, r3
 80173fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173fe:	b112      	cbz	r2, 8017406 <strchr+0x12>
 8017400:	428a      	cmp	r2, r1
 8017402:	d1f9      	bne.n	80173f8 <strchr+0x4>
 8017404:	4770      	bx	lr
 8017406:	2900      	cmp	r1, #0
 8017408:	bf18      	it	ne
 801740a:	2000      	movne	r0, #0
 801740c:	4770      	bx	lr
	...

08017410 <_fstat_r>:
 8017410:	b538      	push	{r3, r4, r5, lr}
 8017412:	4d07      	ldr	r5, [pc, #28]	@ (8017430 <_fstat_r+0x20>)
 8017414:	2300      	movs	r3, #0
 8017416:	4604      	mov	r4, r0
 8017418:	4608      	mov	r0, r1
 801741a:	4611      	mov	r1, r2
 801741c:	602b      	str	r3, [r5, #0]
 801741e:	f7ed f980 	bl	8004722 <_fstat>
 8017422:	1c43      	adds	r3, r0, #1
 8017424:	d102      	bne.n	801742c <_fstat_r+0x1c>
 8017426:	682b      	ldr	r3, [r5, #0]
 8017428:	b103      	cbz	r3, 801742c <_fstat_r+0x1c>
 801742a:	6023      	str	r3, [r4, #0]
 801742c:	bd38      	pop	{r3, r4, r5, pc}
 801742e:	bf00      	nop
 8017430:	20002c70 	.word	0x20002c70

08017434 <_isatty_r>:
 8017434:	b538      	push	{r3, r4, r5, lr}
 8017436:	4d06      	ldr	r5, [pc, #24]	@ (8017450 <_isatty_r+0x1c>)
 8017438:	2300      	movs	r3, #0
 801743a:	4604      	mov	r4, r0
 801743c:	4608      	mov	r0, r1
 801743e:	602b      	str	r3, [r5, #0]
 8017440:	f7ed f97f 	bl	8004742 <_isatty>
 8017444:	1c43      	adds	r3, r0, #1
 8017446:	d102      	bne.n	801744e <_isatty_r+0x1a>
 8017448:	682b      	ldr	r3, [r5, #0]
 801744a:	b103      	cbz	r3, 801744e <_isatty_r+0x1a>
 801744c:	6023      	str	r3, [r4, #0]
 801744e:	bd38      	pop	{r3, r4, r5, pc}
 8017450:	20002c70 	.word	0x20002c70

08017454 <_sbrk_r>:
 8017454:	b538      	push	{r3, r4, r5, lr}
 8017456:	4d06      	ldr	r5, [pc, #24]	@ (8017470 <_sbrk_r+0x1c>)
 8017458:	2300      	movs	r3, #0
 801745a:	4604      	mov	r4, r0
 801745c:	4608      	mov	r0, r1
 801745e:	602b      	str	r3, [r5, #0]
 8017460:	f7ed f988 	bl	8004774 <_sbrk>
 8017464:	1c43      	adds	r3, r0, #1
 8017466:	d102      	bne.n	801746e <_sbrk_r+0x1a>
 8017468:	682b      	ldr	r3, [r5, #0]
 801746a:	b103      	cbz	r3, 801746e <_sbrk_r+0x1a>
 801746c:	6023      	str	r3, [r4, #0]
 801746e:	bd38      	pop	{r3, r4, r5, pc}
 8017470:	20002c70 	.word	0x20002c70

08017474 <_realloc_r>:
 8017474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017478:	4680      	mov	r8, r0
 801747a:	4615      	mov	r5, r2
 801747c:	460c      	mov	r4, r1
 801747e:	b921      	cbnz	r1, 801748a <_realloc_r+0x16>
 8017480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017484:	4611      	mov	r1, r2
 8017486:	f7ff b9a5 	b.w	80167d4 <_malloc_r>
 801748a:	b92a      	cbnz	r2, 8017498 <_realloc_r+0x24>
 801748c:	f7ff f936 	bl	80166fc <_free_r>
 8017490:	2400      	movs	r4, #0
 8017492:	4620      	mov	r0, r4
 8017494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017498:	f000 f81a 	bl	80174d0 <_malloc_usable_size_r>
 801749c:	4285      	cmp	r5, r0
 801749e:	4606      	mov	r6, r0
 80174a0:	d802      	bhi.n	80174a8 <_realloc_r+0x34>
 80174a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80174a6:	d8f4      	bhi.n	8017492 <_realloc_r+0x1e>
 80174a8:	4629      	mov	r1, r5
 80174aa:	4640      	mov	r0, r8
 80174ac:	f7ff f992 	bl	80167d4 <_malloc_r>
 80174b0:	4607      	mov	r7, r0
 80174b2:	2800      	cmp	r0, #0
 80174b4:	d0ec      	beq.n	8017490 <_realloc_r+0x1c>
 80174b6:	42b5      	cmp	r5, r6
 80174b8:	462a      	mov	r2, r5
 80174ba:	4621      	mov	r1, r4
 80174bc:	bf28      	it	cs
 80174be:	4632      	movcs	r2, r6
 80174c0:	f7ff f90d 	bl	80166de <memcpy>
 80174c4:	4621      	mov	r1, r4
 80174c6:	4640      	mov	r0, r8
 80174c8:	f7ff f918 	bl	80166fc <_free_r>
 80174cc:	463c      	mov	r4, r7
 80174ce:	e7e0      	b.n	8017492 <_realloc_r+0x1e>

080174d0 <_malloc_usable_size_r>:
 80174d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174d4:	1f18      	subs	r0, r3, #4
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	bfbc      	itt	lt
 80174da:	580b      	ldrlt	r3, [r1, r0]
 80174dc:	18c0      	addlt	r0, r0, r3
 80174de:	4770      	bx	lr

080174e0 <_init>:
 80174e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e2:	bf00      	nop
 80174e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174e6:	bc08      	pop	{r3}
 80174e8:	469e      	mov	lr, r3
 80174ea:	4770      	bx	lr

080174ec <_fini>:
 80174ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ee:	bf00      	nop
 80174f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174f2:	bc08      	pop	{r3}
 80174f4:	469e      	mov	lr, r3
 80174f6:	4770      	bx	lr
